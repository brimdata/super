skip: broken with charm -h changes

script: |
  # Start an authentication enabled zqd, and create 2 separate access tokens
  # representing different users in different tenants.
  LAKE_EXTRA_FLAGS="-auth.enabled=true -auth.clientid=testclient -auth.domain=https://testdomain -auth.jwkspath=./auth-public-jwks.json" source services.sh
  zapi -host $LAKE_HOST -configpath ./user1 auth store -access \
    $(gentoken -domain https://testdomain -privatekeyfile ./auth-private-key -keyid testkey -tenantid tenant1 -userid user1)
  zapi -host $LAKE_HOST -configpath ./user2 auth store -access \
    $(gentoken -domain https://testdomain -privatekeyfile ./auth-private-key -keyid testkey -tenantid tenant2 -userid user2)
  zapi -configpath ./user1 -host $LAKE_HOST auth verify
  zapi -configpath ./user2 -host $LAKE_HOST auth verify
  echo ===
  # Create 2 spaces for each user, using the same name for one of the spaces,
  # export their space id for later usage.
  zapi -configpath ./user1 -host $LAKE_HOST new testsp0
  export USER1_SP0=$(zapi -configpath ./user1 -host $LAKE_HOST ls -l -f zng | zq -f text "name=testsp0 | pick id" -)
  zapi -configpath ./user1 -host $LAKE_HOST new testsp1
  export USER1_SP1=$(zapi -configpath ./user1 -host $LAKE_HOST ls -l -f zng | zq -f text "name=testsp1 | pick id" -)
  zapi -configpath ./user2 -host $LAKE_HOST new testsp0
  export USER2_SP0=$(zapi -configpath ./user2 -host $LAKE_HOST ls -l -f zng | zq -f text "name=testsp0 | pick id" -)
  zapi -configpath ./user2 -host $LAKE_HOST new testsp2
  export USER2_SP2=$(zapi -configpath ./user2 -host $LAKE_HOST ls -l -f zng | zq -f text "name=testsp2 | pick id" -)
  echo ===
  # List the spaces for each user, and verify that they see only the spaces
  # that they created.
  echo user1 ls
  zapi -configpath ./user1 -host $LAKE_HOST ls
  echo ===
  echo user2 ls
  zapi -configpath ./user2 -host $LAKE_HOST ls
  echo ===
  # User1 should not be able to access user2's space.
  echo user1 info
  zapi -configpath ./user1 -host $LAKE_HOST -id $USER2_SP0 info 2>&1
  echo ===
  # User1 should not be able to rename user2's space.
  echo user1 rename
  zapi -configpath ./user1 -host $LAKE_HOST -id $USER2_SP0 rename newname 2>&1
  echo ===
  # User1 should not be able to remove user2's space.
  echo user1 rm
  zapi -configpath ./user1 -host $LAKE_HOST -id $USER2_SP0 rm 2>&1

inputs:
  - name: services.sh
    source: ../services.sh
  - name: auth-public-jwks.json
    source: ../../testdata/auth-public-jwks.json
  - name: auth-private-key
    source: ../../testdata/auth-private-key

outputs:
  - name: stdout
    data: |
      {
      	"tenant_id": "tenant1",
      	"user_id": "user1"
      }
      {
      	"tenant_id": "tenant2",
      	"user_id": "user2"
      }
      ===
      testsp0: space created
      testsp1: space created
      testsp0: space created
      testsp2: space created
      ===
      user1 ls
      testsp0
      testsp1
      ===
      user2 ls
      testsp0
      testsp2
      ===
      user1 info
      status code 403: forbidden
      ===
      user1 rename
      status code 403: forbidden
      ===
      user1 rm
      status code 403: forbidden
