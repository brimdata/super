script: |
  export SUPER_DB_LAKE=test
  super db init -q
  echo =1= >&2
  ! super db query -z "$(cat bad-single-line.spq)"
  echo =2= >&2
  ! super db query -z "$(cat bad-multiple-lines.spq)"
  echo =3= >&2
  ! super db query -z -I good.spq "$(cat bad-single-line.spq)"
  echo =4= >&2
  ! super db query -z -I good.spq "$(cat bad-multiple-lines.spq)"
  echo =5= >&2
  ! super db query -z -I bad-single-line.spq
  echo =6= >&2
  ! super db query -z -I bad-multiple-lines.spq
  echo =7= >&2
  ! super db query -z -I good.spq -I bad-single-line.spq
  echo =8= >&2
  ! super db query -z -I good.spq -I bad-multiple-lines.spq

inputs:
  - name: bad-single-line.spq
    data: |
      from test \ count()
  - name: bad-multiple-lines.spq
    data: |
      from
      test \ count()
  - name: good.spq
    data: |
      type mystring=string

outputs:
  - name: stderr
    data: |
      =1=
      parse error at line 1, column 12:
      from test \ count()
             === ^ ===
      =2=
      parse error at line 2, column 7:
      test \ count()
        === ^ ===
      =3=
      parse error at line 1, column 12:
      from test \ count()
             === ^ ===
      =4=
      parse error at line 2, column 7:
      test \ count()
        === ^ ===
      =5=
      parse error in bad-single-line.spq at line 1, column 12:
      from test \ count()
             === ^ ===
      =6=
      parse error in bad-multiple-lines.spq at line 2, column 7:
      test \ count()
        === ^ ===
      =7=
      parse error in bad-single-line.spq at line 1, column 12:
      from test \ count()
             === ^ ===
      =8=
      parse error in bad-multiple-lines.spq at line 2, column 7:
      test \ count()
        === ^ ===
