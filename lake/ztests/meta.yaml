script: |
  export ZED_LAKE=test
  zed init -q
  zed create -q -orderby a:asc poolA
  zed create -q -orderby b:desc poolB
  zed load -q -use poolA@main a.zson
  zed load -q -use poolB@main b.zson
  zed query -Z 'from :pools | drop id | sort name | drop ts'
  echo ===
  zed query -Z 'from poolA@main:objects | cut nameof(this),meta'
  zed query -Z 'from poolA@main:log | cut nameof(this) | drop ts'
  echo ===
  zed index create -q Rule field a
  zed query -Z 'from :index_rules | nameof:=nameof(this) | drop ts,id'

inputs:
  - name: a.zson
    data: |
      {a:1}
      {a:2}
  - name: b.zson
    data: |
      {b:3}
      {b:2}
      {b:1}

outputs:
  - name: stdout
    data: |
      {
          name: "poolA",
          layout: {
              order: "asc" (=order.Which),
              keys: [
                  [
                      "a"
                  ] (=field.Path)
              ] (=field.List)
          } (=order.Layout),
          seek_stride: 65536,
          threshold: 524288000
      }
      {
          name: "poolB",
          layout: {
              order: "desc" (=order.Which),
              keys: [
                  [
                      "b"
                  ] (=field.Path)
              ] (=field.List)
          } (=order.Layout),
          seek_stride: 65536,
          threshold: 524288000
      }
      ===
      {
          nameof: "data.Object",
          meta: {
              first: 1,
              last: 2,
              count: 2 (uint64),
              row_size: 18
          } (=data.Meta)
      }
      {
          nameof: "lake.BranchTip"
      }
      {
          nameof: "Commit"
      }
      ===
      {
          name: "Rule",
          fields: [
              [
                  "a"
              ] (=field.Path)
          ] (=field.List),
          nameof: "index.FieldRule"
      }
