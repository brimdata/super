script: |
  export SUPER_DB_LAKE=test
  super db init -q
  super db create -use -q -orderby k POOL
  super db load -q -message "initial load of a.jsup into main" a.jsup
  super db branch -q child
  super db use -q @child
  super db load -q -message "initial load of b.jsup into child" b.jsup
  echo === main ===
  super db query -z "from POOL"
  echo === child ===
  super db query -z "from POOL@child"
  echo === child after merge ===
  super db merge -q main
  super db query -z "from POOL@child"
  echo === main after merge ===
  super db query -z "from POOL"
  echo === main after load c ===
  super db load -q -use POOL c.jsup
  super db query -z "from POOL"
  echo === child after main load c ===
  super db query -z "from POOL@child"
  echo === main after child load a and merge ===
  super db load -q a.jsup
  super db merge -q main
  super db query -z "from POOL"

inputs:
  - name: a.jsup
    data: |
      {k:0,a:1}
  - name: b.jsup
    data: |
      {k:1,b:1}
  - name: c.jsup
    data: |
      {k:2,c:1}

outputs:
  - name: stdout
    data: |
      === main ===
      {k:0,a:1}
      === child ===
      {k:0,a:1}
      {k:1,b:1}
      === child after merge ===
      {k:0,a:1}
      {k:1,b:1}
      === main after merge ===
      {k:0,a:1}
      {k:1,b:1}
      === main after load c ===
      {k:0,a:1}
      {k:1,b:1}
      {k:2,c:1}
      === child after main load c ===
      {k:0,a:1}
      {k:1,b:1}
      === main after child load a and merge ===
      {k:0,a:1}
      {k:0,a:1}
      {k:1,b:1}
      {k:2,c:1}
