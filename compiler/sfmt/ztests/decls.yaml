script: |
  super compile -C -I test.spq
  echo "==="
  super compile -dag -C -I test.spq

inputs:
  - name: test.spq
    data: |
      fn fib(n): (n <= 1 ? n : fib(n-1) + fib(n-2))
      const foo = "bar"
      fn add(a,b): (a+b)
      const bar = "baz"
      op stamp assignee: ( values {...this, assignee, ts: now()} )
      op nop foo: ( pass )
      op joinTest left_file, right_file, left_key, right_key, left_dest, right_source: (
        from eval(left_file)
        | inner join (
          from eval(right_file)
        ) on left.left_key = right.right_key 
        | values {...left,left_dest:right.right_source}
      )
      joinTest "fruit.json", "people.json", flavor, likes, eater, name
      | stamp "bob"

outputs:
  - name: stdout
    data: |
      fn fib(n): (
        (n<=1) ? n : fib(n-1)+fib(n-2)
      )
      const foo = "bar"
      fn add(a, b): (
        a+b
      )
      const bar = "baz"
      op stamp assignee: (
        values {...this,assignee,ts:now()}
      )
      op nop foo: (
        pass
      )
      op joinTest left_file, right_file, left_key, right_key, left_dest, right_source: (
        from eval(left_file)
        | inner join (
          from eval(right_file)
        ) on left.left_key=right.right_key
        | values {...left,left_dest:right.right_source}
      )
      call joinTest "fruit.json", "people.json", flavor, likes, eater, name
      | call stamp "bob"
      ===
      fn 0/fib(n): (
        (n<=1) ? n : 0(n-1)+0(n-2)
      )
      fn 1/add(a, b): (
        a+b
      )
      fork
        (
          file fruit.json format json
        )
        (
          file people.json format json
        )
      | inner join as {left,right} on left.left_key==right.right_key
      | values {...left,left_dest:right.right_source}
      | values {...this,assignee:"bob",ts:now()}
      | output main
