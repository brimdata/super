script: |
  echo === debug
  super compile -C -O 'from file | debug a | yield b'
  echo === distinct
  super compile -C -O 'from file | distinct a | yield b'
  echo === fork-join
  super compile -C -O 'fork ( from file1 ) ( from file2 ) | join on right.a=left.b | yield left.c,right.d'
  echo === join
  super compile -C -O "from file1 | join (from file2) on left.a=right.b | yield left.c,right.d"
  echo === switch-join
  super compile -C -O 'from file | switch a case b ( put x:=c ) case d ( put x:=e ) | join on left.f=right.g | yield left.h,right.i'
  echo === where
  super compile -C -O "from file | a==1 or e==2 | yield c, b, d"
  echo ===
  export SUPER_DB=test
  super db init -q
  super db create -q -orderby ts pool-ts
  super db compile -C -O "from 'pool-ts' | x=='hello' or x==1.0 | yield a" | sed -e 's/lister .*/lister/' -e 's/seqscan .*field/seqscan field/'
  echo ===
  super db compile -C -O "from 'pool-ts' | x > 1 and y <= 1.0" | sed -e 's/lister .*/lister/' -e 's/seqscan .*filter/seqscan filter/'
  echo ===
  super db compile -C -O "from 'pool-ts' | x=='hello' or x!=1.0" | sed -e 's/lister .*/lister/' -e 's/seqscan .*filter/seqscan filter/'
  echo ===
  super db compile -C -O "from 'pool-ts' | x=='hello' or !(y==2 or y==3)" | sed -e 's/lister .*/lister/' -e 's/seqscan .*filter/seqscan filter/'
  echo ===
  super db compile -C -O "from 'pool-ts' | ts >= 0 and ts <= 2" | sed -e 's/lister .*pruner/lister pruner/' -e 's/seqscan .*pruner/seqscan pruner/'
  echo ===
  super db compile -C -O "from 'pool-ts' | ts >= 0 and ts <= 2 and x=='hello'"| sed -e 's/lister .*pruner/lister pruner/' -e 's/seqscan .*pruner/seqscan pruner/'

outputs:
  - name: stdout
    data: |
      === debug
      file file fields a,b
      | mirror
        (
          yield a
          | output debug
        )
        (
          yield b
          | output main
        )
      === distinct
      file file unordered fields a,b
      | distinct a
      | yield b
      | output main
      === fork-join
      fork
        (
          file file1 unordered fields b,c
        )
        (
          file file2 unordered fields a,d
        )
      | inner join as {left,right} on b=a
      | yield left.c, right.d
      | output main
      === join
      fork
        (
          file file1 unordered fields a,c
        )
        (
          file file2 unordered fields b,d
        )
      | inner join as {left,right} on a=b
      | yield left.c, right.d
      | output main
      === switch-join
      file file unordered fields a,b,c,d,e,f,g,h,i
      | switch a
        case b (
          put x:=c
        )
        case d (
          put x:=e
        )
      | inner join as {left,right} on f=g
      | yield left.h, right.i
      | output main
      === where
      file file fields a,b,c,d,e filter (a==1 or e==2)
      | yield c, b, d
      | output main
      ===
      lister
      | slicer
      | seqscan fields a,x filter (x=="hello" or x==1.)
      | yield a
      | output main
      ===
      lister
      | slicer
      | seqscan filter (x>1 and y<=1.)
      | output main
      ===
      lister
      | slicer
      | seqscan filter (x=="hello" or x!=1.)
      | output main
      ===
      lister
      | slicer
      | seqscan filter (x=="hello" or !(y==2 or y==3))
      | output main
      ===
      lister pruner (compare(0, max, true)>0 or compare(2, min, true)<0)
      | slicer
      | seqscan pruner (compare(0, max, true)>0 or compare(2, min, true)<0) filter (ts>=0 and ts<=2)
      | output main
      ===
      lister pruner (compare(0, max, true)>0 or compare(2, min, true)<0)
      | slicer
      | seqscan pruner (compare(0, max, true)>0 or compare(2, min, true)<0) filter (ts>=0 and ts<=2 and x=="hello")
      | output main
