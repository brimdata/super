// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 7, col: 1, offset: 26},
			expr: &choiceExpr{
				pos: position{line: 8, col: 5, offset: 36},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 8, col: 5, offset: 36},
						run: (*parser).callonstart2,
						expr: &seqExpr{
							pos: position{line: 8, col: 5, offset: 36},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 8, col: 5, offset: 36},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 8, col: 8, offset: 39},
									label: "scope",
									expr: &ruleRefExpr{
										pos:  position{line: 8, col: 14, offset: 45},
										name: "Scope",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 8, col: 20, offset: 51},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 8, col: 23, offset: 54},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 9, col: 5, offset: 99},
						run: (*parser).callonstart9,
						expr: &seqExpr{
							pos: position{line: 9, col: 5, offset: 99},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 9, col: 5, offset: 99},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 9, col: 8, offset: 102},
									label: "seq",
									expr: &ruleRefExpr{
										pos:  position{line: 9, col: 12, offset: 106},
										name: "Seq",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 9, col: 16, offset: 110},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 9, col: 19, offset: 113},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Scope",
			pos:  position{line: 11, col: 1, offset: 138},
			expr: &actionExpr{
				pos: position{line: 12, col: 5, offset: 148},
				run: (*parser).callonScope1,
				expr: &seqExpr{
					pos: position{line: 12, col: 5, offset: 148},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 12, col: 5, offset: 148},
							label: "decls",
							expr: &oneOrMoreExpr{
								pos: position{line: 12, col: 11, offset: 154},
								expr: &ruleRefExpr{
									pos:  position{line: 12, col: 11, offset: 154},
									name: "Decl",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 12, col: 17, offset: 160},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 12, col: 22, offset: 165},
								name: "Seq",
							},
						},
					},
				},
			},
		},
		{
			name: "Seq",
			pos:  position{line: 16, col: 1, offset: 266},
			expr: &actionExpr{
				pos: position{line: 17, col: 5, offset: 274},
				run: (*parser).callonSeq1,
				expr: &seqExpr{
					pos: position{line: 17, col: 5, offset: 274},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 5, offset: 274},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 11, offset: 280},
								name: "Operation",
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 21, offset: 290},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 17, col: 26, offset: 295},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 26, offset: 295},
									name: "SeqTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SeqTail",
			pos:  position{line: 21, col: 1, offset: 388},
			expr: &actionExpr{
				pos: position{line: 21, col: 11, offset: 398},
				run: (*parser).callonSeqTail1,
				expr: &seqExpr{
					pos: position{line: 21, col: 11, offset: 398},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 21, col: 11, offset: 398},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 14, offset: 401},
							name: "Pipe",
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 19, offset: 406},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 21, col: 22, offset: 409},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 24, offset: 411},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Decl",
			pos:  position{line: 23, col: 1, offset: 440},
			expr: &actionExpr{
				pos: position{line: 24, col: 5, offset: 449},
				run: (*parser).callonDecl1,
				expr: &seqExpr{
					pos: position{line: 24, col: 5, offset: 449},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 24, col: 5, offset: 449},
							label: "v",
							expr: &choiceExpr{
								pos: position{line: 24, col: 8, offset: 452},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 24, col: 8, offset: 452},
										name: "ConstDecl",
									},
									&ruleRefExpr{
										pos:  position{line: 24, col: 20, offset: 464},
										name: "FuncDecl",
									},
									&ruleRefExpr{
										pos:  position{line: 24, col: 31, offset: 475},
										name: "OpDecl",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 24, col: 39, offset: 483},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "ConstDecl",
			pos:  position{line: 26, col: 1, offset: 504},
			expr: &choiceExpr{
				pos: position{line: 27, col: 5, offset: 518},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 27, col: 5, offset: 518},
						run: (*parser).callonConstDecl2,
						expr: &seqExpr{
							pos: position{line: 27, col: 5, offset: 518},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 27, col: 5, offset: 518},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 13, offset: 526},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 15, offset: 528},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 18, offset: 531},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 33, offset: 546},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 27, col: 36, offset: 549},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 40, offset: 553},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 43, offset: 556},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 48, offset: 561},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 30, col: 5, offset: 666},
						run: (*parser).callonConstDecl13,
						expr: &seqExpr{
							pos: position{line: 30, col: 5, offset: 666},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 30, col: 5, offset: 666},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 12, offset: 673},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 14, offset: 675},
									label: "id",
									expr: &choiceExpr{
										pos: position{line: 30, col: 18, offset: 679},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 30, col: 18, offset: 679},
												name: "IdentifierName",
											},
											&ruleRefExpr{
												pos:  position{line: 30, col: 35, offset: 696},
												name: "QuotedString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 49, offset: 710},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 30, col: 52, offset: 713},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 56, offset: 717},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 59, offset: 720},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 30, col: 63, offset: 724},
										name: "Type",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuncDecl",
			pos:  position{line: 41, col: 1, offset: 993},
			expr: &actionExpr{
				pos: position{line: 42, col: 5, offset: 1006},
				run: (*parser).callonFuncDecl1,
				expr: &seqExpr{
					pos: position{line: 42, col: 5, offset: 1006},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 42, col: 5, offset: 1006},
							val:        "func",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 12, offset: 1013},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 42, col: 14, offset: 1015},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 17, offset: 1018},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 32, offset: 1033},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 42, col: 35, offset: 1036},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 39, offset: 1040},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 42, col: 42, offset: 1043},
							label: "params",
							expr: &zeroOrOneExpr{
								pos: position{line: 42, col: 49, offset: 1050},
								expr: &ruleRefExpr{
									pos:  position{line: 42, col: 49, offset: 1050},
									name: "IdentifierNames",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 66, offset: 1067},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 42, col: 69, offset: 1070},
							val:        ")",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 73, offset: 1074},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 42, col: 76, offset: 1077},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 80, offset: 1081},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 42, col: 83, offset: 1084},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 87, offset: 1088},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 42, col: 90, offset: 1091},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 95, offset: 1096},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 100, offset: 1101},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 42, col: 103, offset: 1104},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OpDecl",
			pos:  position{line: 55, col: 1, offset: 1288},
			expr: &actionExpr{
				pos: position{line: 56, col: 5, offset: 1299},
				run: (*parser).callonOpDecl1,
				expr: &seqExpr{
					pos: position{line: 56, col: 5, offset: 1299},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 56, col: 5, offset: 1299},
							val:        "op",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 56, col: 10, offset: 1304},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 56, col: 12, offset: 1306},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 56, col: 17, offset: 1311},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 56, col: 32, offset: 1326},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 56, col: 35, offset: 1329},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 56, col: 39, offset: 1333},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 56, col: 42, offset: 1336},
							label: "params",
							expr: &ruleRefExpr{
								pos:  position{line: 56, col: 49, offset: 1343},
								name: "Params",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 56, col: 56, offset: 1350},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 56, col: 59, offset: 1353},
							val:        ")",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 56, col: 63, offset: 1357},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 56, col: 66, offset: 1360},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 56, col: 70, offset: 1364},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 56, col: 73, offset: 1367},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 56, col: 77, offset: 1371},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 56, col: 80, offset: 1374},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 56, col: 85, offset: 1379},
								name: "Seq",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 56, col: 89, offset: 1383},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 56, col: 92, offset: 1386},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Params",
			pos:  position{line: 69, col: 1, offset: 1570},
			expr: &actionExpr{
				pos: position{line: 70, col: 5, offset: 1582},
				run: (*parser).callonParams1,
				expr: &seqExpr{
					pos: position{line: 70, col: 5, offset: 1582},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 70, col: 5, offset: 1582},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 70, col: 11, offset: 1588},
								name: "Param",
							},
						},
						&labeledExpr{
							pos:   position{line: 70, col: 17, offset: 1594},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 70, col: 22, offset: 1599},
								expr: &actionExpr{
									pos: position{line: 70, col: 23, offset: 1600},
									run: (*parser).callonParams7,
									expr: &seqExpr{
										pos: position{line: 70, col: 23, offset: 1600},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 70, col: 23, offset: 1600},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 70, col: 26, offset: 1603},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 70, col: 30, offset: 1607},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 70, col: 33, offset: 1610},
												label: "p",
												expr: &ruleRefExpr{
													pos:  position{line: 70, col: 35, offset: 1612},
													name: "Param",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Param",
			pos:  position{line: 74, col: 1, offset: 1726},
			expr: &choiceExpr{
				pos: position{line: 75, col: 5, offset: 1736},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 75, col: 5, offset: 1736},
						run: (*parser).callonParam2,
						expr: &seqExpr{
							pos: position{line: 75, col: 5, offset: 1736},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 75, col: 5, offset: 1736},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 75, col: 13, offset: 1744},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 75, col: 15, offset: 1746},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 75, col: 18, offset: 1749},
										name: "IdentifierName",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 76, col: 5, offset: 1841},
						run: (*parser).callonParam8,
						expr: &litMatcher{
							pos:        position{line: 76, col: 5, offset: 1841},
							val:        "...",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 77, col: 5, offset: 1913},
						run: (*parser).callonParam10,
						expr: &labeledExpr{
							pos:   position{line: 77, col: 5, offset: 1913},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 77, col: 8, offset: 1916},
								name: "IdentifierName",
							},
						},
					},
				},
			},
		},
		{
			name: "Operation",
			pos:  position{line: 79, col: 1, offset: 2005},
			expr: &choiceExpr{
				pos: position{line: 80, col: 5, offset: 2019},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 80, col: 5, offset: 2019},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 80, col: 5, offset: 2019},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 80, col: 5, offset: 2019},
									val:        "fork",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 80, col: 12, offset: 2026},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 80, col: 15, offset: 2029},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 80, col: 19, offset: 2033},
									label: "paths",
									expr: &oneOrMoreExpr{
										pos: position{line: 80, col: 25, offset: 2039},
										expr: &ruleRefExpr{
											pos:  position{line: 80, col: 25, offset: 2039},
											name: "Leg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 80, col: 30, offset: 2044},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 80, col: 33, offset: 2047},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 83, col: 5, offset: 2140},
						run: (*parser).callonOperation12,
						expr: &seqExpr{
							pos: position{line: 83, col: 5, offset: 2140},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 83, col: 5, offset: 2140},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 83, col: 14, offset: 2149},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 83, col: 16, offset: 2151},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 83, col: 21, offset: 2156},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 83, col: 26, offset: 2161},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 83, col: 28, offset: 2163},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 83, col: 32, offset: 2167},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 83, col: 38, offset: 2173},
										expr: &ruleRefExpr{
											pos:  position{line: 83, col: 38, offset: 2173},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 83, col: 49, offset: 2184},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 83, col: 52, offset: 2187},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 86, col: 5, offset: 2292},
						run: (*parser).callonOperation25,
						expr: &seqExpr{
							pos: position{line: 86, col: 5, offset: 2292},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 86, col: 5, offset: 2292},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 86, col: 14, offset: 2301},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 86, col: 17, offset: 2304},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 86, col: 21, offset: 2308},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 86, col: 27, offset: 2314},
										expr: &ruleRefExpr{
											pos:  position{line: 86, col: 27, offset: 2314},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 86, col: 38, offset: 2325},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 86, col: 41, offset: 2328},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 89, col: 5, offset: 2432},
						run: (*parser).callonOperation35,
						expr: &seqExpr{
							pos: position{line: 89, col: 5, offset: 2432},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 89, col: 5, offset: 2432},
									val:        "from",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 89, col: 12, offset: 2439},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 89, col: 15, offset: 2442},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 89, col: 19, offset: 2446},
									label: "trunks",
									expr: &oneOrMoreExpr{
										pos: position{line: 89, col: 26, offset: 2453},
										expr: &ruleRefExpr{
											pos:  position{line: 89, col: 26, offset: 2453},
											name: "FromLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 89, col: 35, offset: 2462},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 89, col: 38, offset: 2465},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 92, col: 5, offset: 2556},
						run: (*parser).callonOperation45,
						expr: &seqExpr{
							pos: position{line: 92, col: 5, offset: 2556},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 92, col: 5, offset: 2556},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 92, col: 9, offset: 2560},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 92, col: 12, offset: 2563},
									label: "scope",
									expr: &ruleRefExpr{
										pos:  position{line: 92, col: 18, offset: 2569},
										name: "Scope",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 92, col: 24, offset: 2575},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 92, col: 27, offset: 2578},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&labeledExpr{
						pos:   position{line: 93, col: 5, offset: 2608},
						label: "op",
						expr: &ruleRefExpr{
							pos:  position{line: 93, col: 8, offset: 2611},
							name: "Operator",
						},
					},
					&actionExpr{
						pos: position{line: 94, col: 5, offset: 2624},
						run: (*parser).callonOperation55,
						expr: &seqExpr{
							pos: position{line: 94, col: 5, offset: 2624},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 94, col: 5, offset: 2624},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 94, col: 7, offset: 2626},
										name: "OpAssignment",
									},
								},
								&andExpr{
									pos: position{line: 94, col: 20, offset: 2639},
									expr: &ruleRefExpr{
										pos:  position{line: 94, col: 21, offset: 2640},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 95, col: 5, offset: 2670},
						run: (*parser).callonOperation61,
						expr: &seqExpr{
							pos: position{line: 95, col: 5, offset: 2670},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 95, col: 5, offset: 2670},
									expr: &seqExpr{
										pos: position{line: 95, col: 7, offset: 2672},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 95, col: 7, offset: 2672},
												name: "Function",
											},
											&ruleRefExpr{
												pos:  position{line: 95, col: 16, offset: 2681},
												name: "EndOfOp",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 95, col: 25, offset: 2690},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 95, col: 27, offset: 2692},
										name: "Aggregation",
									},
								},
								&andExpr{
									pos: position{line: 95, col: 39, offset: 2704},
									expr: &ruleRefExpr{
										pos:  position{line: 95, col: 40, offset: 2705},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 96, col: 5, offset: 2735},
						run: (*parser).callonOperation71,
						expr: &seqExpr{
							pos: position{line: 96, col: 5, offset: 2735},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 96, col: 5, offset: 2735},
									val:        "search",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 96, col: 14, offset: 2744},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 96, col: 16, offset: 2746},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 96, col: 21, offset: 2751},
										name: "SearchBoolean",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 99, col: 5, offset: 2850},
						run: (*parser).callonOperation77,
						expr: &labeledExpr{
							pos:   position{line: 99, col: 5, offset: 2850},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 99, col: 10, offset: 2855},
								name: "SearchBoolean",
							},
						},
					},
					&actionExpr{
						pos: position{line: 102, col: 5, offset: 2954},
						run: (*parser).callonOperation80,
						expr: &labeledExpr{
							pos:   position{line: 102, col: 5, offset: 2954},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 102, col: 10, offset: 2959},
								name: "Cast",
							},
						},
					},
					&actionExpr{
						pos: position{line: 105, col: 5, offset: 3047},
						run: (*parser).callonOperation83,
						expr: &labeledExpr{
							pos:   position{line: 105, col: 5, offset: 3047},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 105, col: 10, offset: 3052},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "EndOfOp",
			pos:  position{line: 109, col: 1, offset: 3139},
			expr: &seqExpr{
				pos: position{line: 109, col: 11, offset: 3149},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 109, col: 11, offset: 3149},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 109, col: 15, offset: 3153},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 109, col: 15, offset: 3153},
								name: "Pipe",
							},
							&ruleRefExpr{
								pos:  position{line: 109, col: 22, offset: 3160},
								name: "SearchKeywordGuard",
							},
							&litMatcher{
								pos:        position{line: 109, col: 43, offset: 3181},
								val:        "=>",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 109, col: 50, offset: 3188},
								val:        ")",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 109, col: 56, offset: 3194},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "Pipe",
			pos:  position{line: 110, col: 1, offset: 3199},
			expr: &seqExpr{
				pos: position{line: 110, col: 8, offset: 3206},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 110, col: 8, offset: 3206},
						val:        "|",
						ignoreCase: false,
					},
					&notExpr{
						pos: position{line: 110, col: 12, offset: 3210},
						expr: &choiceExpr{
							pos: position{line: 110, col: 14, offset: 3212},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 110, col: 14, offset: 3212},
									val:        "{",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 110, col: 20, offset: 3218},
									val:        "[",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Leg",
			pos:  position{line: 112, col: 1, offset: 3224},
			expr: &actionExpr{
				pos: position{line: 112, col: 7, offset: 3230},
				run: (*parser).callonLeg1,
				expr: &seqExpr{
					pos: position{line: 112, col: 7, offset: 3230},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 112, col: 7, offset: 3230},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 112, col: 10, offset: 3233},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 112, col: 15, offset: 3238},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 112, col: 18, offset: 3241},
							label: "seq",
							expr: &ruleRefExpr{
								pos:  position{line: 112, col: 22, offset: 3245},
								name: "Seq",
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchLeg",
			pos:  position{line: 114, col: 1, offset: 3270},
			expr: &actionExpr{
				pos: position{line: 115, col: 5, offset: 3284},
				run: (*parser).callonSwitchLeg1,
				expr: &seqExpr{
					pos: position{line: 115, col: 5, offset: 3284},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 115, col: 5, offset: 3284},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 115, col: 8, offset: 3287},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 115, col: 13, offset: 3292},
								name: "Case",
							},
						},
						&labeledExpr{
							pos:   position{line: 115, col: 18, offset: 3297},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 115, col: 23, offset: 3302},
								name: "Leg",
							},
						},
					},
				},
			},
		},
		{
			name: "Case",
			pos:  position{line: 119, col: 1, offset: 3384},
			expr: &choiceExpr{
				pos: position{line: 120, col: 5, offset: 3393},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 120, col: 5, offset: 3393},
						run: (*parser).callonCase2,
						expr: &seqExpr{
							pos: position{line: 120, col: 5, offset: 3393},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 120, col: 5, offset: 3393},
									val:        "case",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 120, col: 12, offset: 3400},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 120, col: 14, offset: 3402},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 120, col: 19, offset: 3407},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 121, col: 5, offset: 3437},
						run: (*parser).callonCase8,
						expr: &litMatcher{
							pos:        position{line: 121, col: 5, offset: 3437},
							val:        "default",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromLeg",
			pos:  position{line: 123, col: 1, offset: 3468},
			expr: &actionExpr{
				pos: position{line: 124, col: 5, offset: 3480},
				run: (*parser).callonFromLeg1,
				expr: &seqExpr{
					pos: position{line: 124, col: 5, offset: 3480},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 124, col: 5, offset: 3480},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 124, col: 8, offset: 3483},
							label: "source",
							expr: &ruleRefExpr{
								pos:  position{line: 124, col: 15, offset: 3490},
								name: "FromSource",
							},
						},
						&labeledExpr{
							pos:   position{line: 124, col: 26, offset: 3501},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 124, col: 30, offset: 3505},
								expr: &seqExpr{
									pos: position{line: 124, col: 31, offset: 3506},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 124, col: 31, offset: 3506},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 124, col: 34, offset: 3509},
											val:        "=>",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 124, col: 39, offset: 3514},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 124, col: 42, offset: 3517},
											name: "Seq",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FromSource",
			pos:  position{line: 132, col: 1, offset: 3708},
			expr: &choiceExpr{
				pos: position{line: 133, col: 5, offset: 3723},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 133, col: 5, offset: 3723},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 134, col: 5, offset: 3732},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 135, col: 5, offset: 3740},
						name: "Pool",
					},
					&ruleRefExpr{
						pos:  position{line: 136, col: 5, offset: 3749},
						name: "PassOp",
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 138, col: 1, offset: 3757},
			expr: &seqExpr{
				pos: position{line: 138, col: 13, offset: 3769},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 138, col: 13, offset: 3769},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 138, col: 17, offset: 3773},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 138, col: 18, offset: 3774},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 138, col: 18, offset: 3774},
										expr: &litMatcher{
											pos:        position{line: 138, col: 19, offset: 3775},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 138, col: 24, offset: 3780},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 138, col: 38, offset: 3794},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 138, col: 57, offset: 3813},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 138, col: 82, offset: 3838},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 138, col: 88, offset: 3844},
								val:        "(",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 138, col: 94, offset: 3850},
								val:        "[",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 138, col: 100, offset: 3856},
								val:        "~",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 140, col: 1, offset: 3862},
			expr: &actionExpr{
				pos: position{line: 140, col: 14, offset: 3875},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 140, col: 15, offset: 3876},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 140, col: 15, offset: 3876},
							val:        "==",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 140, col: 22, offset: 3883},
							val:        "!=",
							ignoreCase: false,
						},
						&seqExpr{
							pos: position{line: 140, col: 30, offset: 3891},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 140, col: 30, offset: 3891},
									val:        "in",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 140, col: 35, offset: 3896},
									expr: &ruleRefExpr{
										pos:  position{line: 140, col: 36, offset: 3897},
										name: "IdentifierRest",
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 140, col: 54, offset: 3915},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 140, col: 61, offset: 3922},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 140, col: 67, offset: 3928},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 140, col: 74, offset: 3935},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 142, col: 1, offset: 3972},
			expr: &actionExpr{
				pos: position{line: 143, col: 5, offset: 3990},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 143, col: 5, offset: 3990},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 143, col: 5, offset: 3990},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 143, col: 11, offset: 3996},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 143, col: 21, offset: 4006},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 143, col: 26, offset: 4011},
								expr: &ruleRefExpr{
									pos:  position{line: 143, col: 26, offset: 4011},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 147, col: 1, offset: 4085},
			expr: &actionExpr{
				pos: position{line: 147, col: 16, offset: 4100},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 147, col: 16, offset: 4100},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 147, col: 16, offset: 4100},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 147, col: 18, offset: 4102},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 147, col: 26, offset: 4110},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 147, col: 28, offset: 4112},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 147, col: 30, offset: 4114},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 149, col: 1, offset: 4164},
			expr: &actionExpr{
				pos: position{line: 150, col: 5, offset: 4178},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 150, col: 5, offset: 4178},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 150, col: 5, offset: 4178},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 150, col: 11, offset: 4184},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 151, col: 5, offset: 4201},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 151, col: 10, offset: 4206},
								expr: &actionExpr{
									pos: position{line: 151, col: 11, offset: 4207},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 151, col: 11, offset: 4207},
										exprs: []interface{}{
											&zeroOrOneExpr{
												pos: position{line: 151, col: 11, offset: 4207},
												expr: &seqExpr{
													pos: position{line: 151, col: 12, offset: 4208},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 151, col: 12, offset: 4208},
															name: "_",
														},
														&ruleRefExpr{
															pos:  position{line: 151, col: 14, offset: 4210},
															name: "AndToken",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 151, col: 25, offset: 4221},
												name: "_",
											},
											&notExpr{
												pos: position{line: 151, col: 27, offset: 4223},
												expr: &choiceExpr{
													pos: position{line: 151, col: 29, offset: 4225},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 151, col: 29, offset: 4225},
															name: "OrToken",
														},
														&ruleRefExpr{
															pos:  position{line: 151, col: 39, offset: 4235},
															name: "SearchKeywordGuard",
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 151, col: 59, offset: 4255},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 151, col: 64, offset: 4260},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchKeywordGuard",
			pos:  position{line: 155, col: 1, offset: 4378},
			expr: &choiceExpr{
				pos: position{line: 156, col: 5, offset: 4401},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 156, col: 5, offset: 4401},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 156, col: 5, offset: 4401},
								name: "FromSource",
							},
							&ruleRefExpr{
								pos:  position{line: 156, col: 16, offset: 4412},
								name: "__",
							},
							&litMatcher{
								pos:        position{line: 156, col: 19, offset: 4415},
								val:        "=>",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 156, col: 24, offset: 4420},
								name: "__",
							},
						},
					},
					&seqExpr{
						pos: position{line: 157, col: 5, offset: 4427},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 157, col: 5, offset: 4427},
								name: "Case",
							},
							&ruleRefExpr{
								pos:  position{line: 157, col: 10, offset: 4432},
								name: "__",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 159, col: 1, offset: 4436},
			expr: &choiceExpr{
				pos: position{line: 160, col: 5, offset: 4453},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 160, col: 5, offset: 4453},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 160, col: 5, offset: 4453},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 160, col: 6, offset: 4454},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 160, col: 6, offset: 4454},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 160, col: 6, offset: 4454},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 160, col: 15, offset: 4463},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 160, col: 19, offset: 4467},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 160, col: 19, offset: 4467},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 160, col: 23, offset: 4471},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 160, col: 27, offset: 4475},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 160, col: 29, offset: 4477},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 163, col: 5, offset: 4589},
						run: (*parser).callonSearchFactor13,
						expr: &seqExpr{
							pos: position{line: 163, col: 5, offset: 4589},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 163, col: 5, offset: 4589},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 163, col: 9, offset: 4593},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 163, col: 12, offset: 4596},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 163, col: 17, offset: 4601},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 163, col: 31, offset: 4615},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 163, col: 34, offset: 4618},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 164, col: 5, offset: 4647},
						name: "SearchExpr",
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 166, col: 1, offset: 4659},
			expr: &choiceExpr{
				pos: position{line: 167, col: 5, offset: 4674},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 167, col: 5, offset: 4674},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 168, col: 5, offset: 4685},
						name: "Glob",
					},
					&actionExpr{
						pos: position{line: 169, col: 5, offset: 4694},
						run: (*parser).callonSearchExpr4,
						expr: &seqExpr{
							pos: position{line: 169, col: 5, offset: 4694},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 169, col: 5, offset: 4694},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 169, col: 7, offset: 4696},
										name: "SearchValue",
									},
								},
								&choiceExpr{
									pos: position{line: 169, col: 20, offset: 4709},
									alternatives: []interface{}{
										&notExpr{
											pos: position{line: 169, col: 20, offset: 4709},
											expr: &ruleRefExpr{
												pos:  position{line: 169, col: 21, offset: 4710},
												name: "ExprGuard",
											},
										},
										&andExpr{
											pos: position{line: 169, col: 33, offset: 4722},
											expr: &seqExpr{
												pos: position{line: 169, col: 35, offset: 4724},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 169, col: 35, offset: 4724},
														name: "_",
													},
													&ruleRefExpr{
														pos:  position{line: 169, col: 37, offset: 4726},
														name: "Glob",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 172, col: 5, offset: 4838},
						run: (*parser).callonSearchExpr15,
						expr: &seqExpr{
							pos: position{line: 172, col: 5, offset: 4838},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 172, col: 5, offset: 4838},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 172, col: 9, offset: 4842},
									expr: &ruleRefExpr{
										pos:  position{line: 172, col: 10, offset: 4843},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 175, col: 5, offset: 4959},
						name: "SearchPredicate",
					},
				},
			},
		},
		{
			name: "SearchPredicate",
			pos:  position{line: 177, col: 1, offset: 4976},
			expr: &choiceExpr{
				pos: position{line: 178, col: 5, offset: 4996},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 178, col: 5, offset: 4996},
						run: (*parser).callonSearchPredicate2,
						expr: &seqExpr{
							pos: position{line: 178, col: 5, offset: 4996},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 178, col: 5, offset: 4996},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 178, col: 9, offset: 5000},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 178, col: 22, offset: 5013},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 178, col: 25, offset: 5016},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 178, col: 28, offset: 5019},
										name: "Comparator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 178, col: 39, offset: 5030},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 178, col: 42, offset: 5033},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 178, col: 46, offset: 5037},
										name: "AdditiveExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 181, col: 6, offset: 5160},
						run: (*parser).callonSearchPredicate12,
						expr: &seqExpr{
							pos: position{line: 181, col: 6, offset: 5160},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 181, col: 6, offset: 5160},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 181, col: 12, offset: 5166},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 181, col: 21, offset: 5175},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 181, col: 26, offset: 5180},
										expr: &ruleRefExpr{
											pos:  position{line: 181, col: 27, offset: 5181},
											name: "Deref",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 185, col: 1, offset: 5253},
			expr: &choiceExpr{
				pos: position{line: 186, col: 5, offset: 5269},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 186, col: 5, offset: 5269},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 187, col: 5, offset: 5281},
						run: (*parser).callonSearchValue3,
						expr: &seqExpr{
							pos: position{line: 187, col: 5, offset: 5281},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 187, col: 5, offset: 5281},
									expr: &ruleRefExpr{
										pos:  position{line: 187, col: 6, offset: 5282},
										name: "RegexpPattern",
									},
								},
								&labeledExpr{
									pos:   position{line: 187, col: 20, offset: 5296},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 187, col: 22, offset: 5298},
										name: "KeyWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Glob",
			pos:  position{line: 191, col: 1, offset: 5406},
			expr: &actionExpr{
				pos: position{line: 192, col: 5, offset: 5415},
				run: (*parser).callonGlob1,
				expr: &labeledExpr{
					pos:   position{line: 192, col: 5, offset: 5415},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 192, col: 13, offset: 5423},
						name: "GlobPattern",
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 196, col: 1, offset: 5519},
			expr: &actionExpr{
				pos: position{line: 197, col: 5, offset: 5530},
				run: (*parser).callonRegexp1,
				expr: &labeledExpr{
					pos:   position{line: 197, col: 5, offset: 5530},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 197, col: 13, offset: 5538},
						name: "RegexpPattern",
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 203, col: 1, offset: 5664},
			expr: &choiceExpr{
				pos: position{line: 204, col: 5, offset: 5680},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 204, col: 5, offset: 5680},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 204, col: 5, offset: 5680},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 204, col: 5, offset: 5680},
									expr: &ruleRefExpr{
										pos:  position{line: 204, col: 5, offset: 5680},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 204, col: 16, offset: 5691},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 204, col: 21, offset: 5696},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 204, col: 33, offset: 5708},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 204, col: 39, offset: 5714},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 207, col: 5, offset: 5840},
						run: (*parser).callonAggregation10,
						expr: &seqExpr{
							pos: position{line: 207, col: 5, offset: 5840},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 207, col: 5, offset: 5840},
									expr: &ruleRefExpr{
										pos:  position{line: 207, col: 5, offset: 5840},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 207, col: 16, offset: 5851},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 207, col: 21, offset: 5856},
										name: "AggAssignments",
									},
								},
								&labeledExpr{
									pos:   position{line: 207, col: 36, offset: 5871},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 207, col: 41, offset: 5876},
										expr: &seqExpr{
											pos: position{line: 207, col: 42, offset: 5877},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 207, col: 42, offset: 5877},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 207, col: 44, offset: 5879},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 207, col: 58, offset: 5893},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 207, col: 64, offset: 5899},
										name: "LimitArg",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Summarize",
			pos:  position{line: 215, col: 1, offset: 6113},
			expr: &seqExpr{
				pos: position{line: 215, col: 13, offset: 6125},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 215, col: 13, offset: 6125},
						val:        "summarize",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 215, col: 25, offset: 6137},
						name: "_",
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 217, col: 1, offset: 6140},
			expr: &actionExpr{
				pos: position{line: 218, col: 5, offset: 6156},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 218, col: 5, offset: 6156},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 218, col: 5, offset: 6156},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 218, col: 13, offset: 6164},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 218, col: 15, offset: 6166},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 218, col: 23, offset: 6174},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 220, col: 1, offset: 6215},
			expr: &choiceExpr{
				pos: position{line: 221, col: 5, offset: 6228},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 221, col: 5, offset: 6228},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 221, col: 5, offset: 6228},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 221, col: 5, offset: 6228},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 221, col: 7, offset: 6230},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 221, col: 14, offset: 6237},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 221, col: 16, offset: 6239},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 221, col: 25, offset: 6248},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 221, col: 27, offset: 6250},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 221, col: 33, offset: 6256},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 222, col: 5, offset: 6287},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 222, col: 5, offset: 6287},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 227, col: 1, offset: 6547},
			expr: &choiceExpr{
				pos: position{line: 228, col: 5, offset: 6566},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 228, col: 5, offset: 6566},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 229, col: 5, offset: 6581},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 229, col: 5, offset: 6581},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 229, col: 10, offset: 6586},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 231, col: 1, offset: 6678},
			expr: &actionExpr{
				pos: position{line: 232, col: 5, offset: 6698},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 232, col: 5, offset: 6698},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 232, col: 5, offset: 6698},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 232, col: 11, offset: 6704},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 232, col: 26, offset: 6719},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 232, col: 31, offset: 6724},
								expr: &actionExpr{
									pos: position{line: 232, col: 32, offset: 6725},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 232, col: 32, offset: 6725},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 232, col: 32, offset: 6725},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 232, col: 35, offset: 6728},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 232, col: 39, offset: 6732},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 232, col: 42, offset: 6735},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 232, col: 47, offset: 6740},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignment",
			pos:  position{line: 236, col: 1, offset: 6862},
			expr: &choiceExpr{
				pos: position{line: 237, col: 5, offset: 6880},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 237, col: 5, offset: 6880},
						run: (*parser).callonAggAssignment2,
						expr: &seqExpr{
							pos: position{line: 237, col: 5, offset: 6880},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 237, col: 5, offset: 6880},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 237, col: 10, offset: 6885},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 237, col: 15, offset: 6890},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 237, col: 18, offset: 6893},
									val:        ":=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 237, col: 23, offset: 6898},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 237, col: 26, offset: 6901},
									label: "agg",
									expr: &ruleRefExpr{
										pos:  position{line: 237, col: 30, offset: 6905},
										name: "Agg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 240, col: 5, offset: 7009},
						run: (*parser).callonAggAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 240, col: 5, offset: 7009},
							label: "agg",
							expr: &ruleRefExpr{
								pos:  position{line: 240, col: 9, offset: 7013},
								name: "Agg",
							},
						},
					},
				},
			},
		},
		{
			name: "Agg",
			pos:  position{line: 244, col: 1, offset: 7113},
			expr: &actionExpr{
				pos: position{line: 245, col: 5, offset: 7121},
				run: (*parser).callonAgg1,
				expr: &seqExpr{
					pos: position{line: 245, col: 5, offset: 7121},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 245, col: 5, offset: 7121},
							expr: &ruleRefExpr{
								pos:  position{line: 245, col: 6, offset: 7122},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 245, col: 16, offset: 7132},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 245, col: 19, offset: 7135},
								name: "AggName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 245, col: 27, offset: 7143},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 245, col: 30, offset: 7146},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 245, col: 34, offset: 7150},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 245, col: 37, offset: 7153},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 245, col: 42, offset: 7158},
								expr: &choiceExpr{
									pos: position{line: 245, col: 43, offset: 7159},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 245, col: 43, offset: 7159},
											name: "OverExpr",
										},
										&ruleRefExpr{
											pos:  position{line: 245, col: 54, offset: 7170},
											name: "Expr",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 245, col: 61, offset: 7177},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 245, col: 64, offset: 7180},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 245, col: 68, offset: 7184},
							expr: &seqExpr{
								pos: position{line: 245, col: 70, offset: 7186},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 245, col: 70, offset: 7186},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 245, col: 73, offset: 7189},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 245, col: 78, offset: 7194},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 245, col: 84, offset: 7200},
								expr: &ruleRefExpr{
									pos:  position{line: 245, col: 84, offset: 7200},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggName",
			pos:  position{line: 253, col: 1, offset: 7391},
			expr: &choiceExpr{
				pos: position{line: 254, col: 5, offset: 7403},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 254, col: 5, offset: 7403},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 255, col: 5, offset: 7422},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 256, col: 5, offset: 7435},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 258, col: 1, offset: 7444},
			expr: &actionExpr{
				pos: position{line: 258, col: 15, offset: 7458},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 258, col: 15, offset: 7458},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 258, col: 15, offset: 7458},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 258, col: 17, offset: 7460},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 258, col: 25, offset: 7468},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 258, col: 27, offset: 7470},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 258, col: 32, offset: 7475},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignments",
			pos:  position{line: 260, col: 1, offset: 7511},
			expr: &actionExpr{
				pos: position{line: 261, col: 5, offset: 7530},
				run: (*parser).callonAggAssignments1,
				expr: &seqExpr{
					pos: position{line: 261, col: 5, offset: 7530},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 261, col: 5, offset: 7530},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 261, col: 11, offset: 7536},
								name: "AggAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 261, col: 25, offset: 7550},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 261, col: 30, offset: 7555},
								expr: &seqExpr{
									pos: position{line: 261, col: 31, offset: 7556},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 261, col: 31, offset: 7556},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 261, col: 34, offset: 7559},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 261, col: 38, offset: 7563},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 261, col: 41, offset: 7566},
											name: "AggAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 271, col: 1, offset: 7790},
			expr: &choiceExpr{
				pos: position{line: 272, col: 5, offset: 7803},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 272, col: 5, offset: 7803},
						name: "AssertOp",
					},
					&ruleRefExpr{
						pos:  position{line: 273, col: 5, offset: 7816},
						name: "SortOp",
					},
					&ruleRefExpr{
						pos:  position{line: 274, col: 5, offset: 7827},
						name: "TopOp",
					},
					&ruleRefExpr{
						pos:  position{line: 275, col: 5, offset: 7837},
						name: "CutOp",
					},
					&ruleRefExpr{
						pos:  position{line: 276, col: 5, offset: 7847},
						name: "DropOp",
					},
					&ruleRefExpr{
						pos:  position{line: 277, col: 5, offset: 7858},
						name: "HeadOp",
					},
					&ruleRefExpr{
						pos:  position{line: 278, col: 5, offset: 7869},
						name: "TailOp",
					},
					&ruleRefExpr{
						pos:  position{line: 279, col: 5, offset: 7880},
						name: "WhereOp",
					},
					&ruleRefExpr{
						pos:  position{line: 280, col: 5, offset: 7892},
						name: "UniqOp",
					},
					&ruleRefExpr{
						pos:  position{line: 281, col: 5, offset: 7903},
						name: "PutOp",
					},
					&ruleRefExpr{
						pos:  position{line: 282, col: 5, offset: 7913},
						name: "RenameOp",
					},
					&ruleRefExpr{
						pos:  position{line: 283, col: 5, offset: 7926},
						name: "FuseOp",
					},
					&ruleRefExpr{
						pos:  position{line: 284, col: 5, offset: 7937},
						name: "ShapeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 285, col: 5, offset: 7949},
						name: "JoinOp",
					},
					&ruleRefExpr{
						pos:  position{line: 286, col: 5, offset: 7960},
						name: "SampleOp",
					},
					&ruleRefExpr{
						pos:  position{line: 287, col: 5, offset: 7973},
						name: "SQLOp",
					},
					&ruleRefExpr{
						pos:  position{line: 288, col: 5, offset: 7983},
						name: "FromOp",
					},
					&ruleRefExpr{
						pos:  position{line: 289, col: 5, offset: 7994},
						name: "PassOp",
					},
					&ruleRefExpr{
						pos:  position{line: 290, col: 5, offset: 8005},
						name: "ExplodeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 291, col: 5, offset: 8019},
						name: "MergeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 292, col: 5, offset: 8031},
						name: "OverOp",
					},
					&ruleRefExpr{
						pos:  position{line: 293, col: 5, offset: 8042},
						name: "YieldOp",
					},
					&ruleRefExpr{
						pos:  position{line: 294, col: 5, offset: 8054},
						name: "LoadOp",
					},
				},
			},
		},
		{
			name: "AssertOp",
			pos:  position{line: 296, col: 1, offset: 8062},
			expr: &actionExpr{
				pos: position{line: 297, col: 5, offset: 8075},
				run: (*parser).callonAssertOp1,
				expr: &seqExpr{
					pos: position{line: 297, col: 5, offset: 8075},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 297, col: 5, offset: 8075},
							val:        "assert",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 297, col: 14, offset: 8084},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 297, col: 16, offset: 8086},
							label: "expr",
							expr: &actionExpr{
								pos: position{line: 297, col: 22, offset: 8092},
								run: (*parser).callonAssertOp6,
								expr: &labeledExpr{
									pos:   position{line: 297, col: 22, offset: 8092},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 297, col: 24, offset: 8094},
										name: "Expr",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortOp",
			pos:  position{line: 333, col: 1, offset: 9445},
			expr: &actionExpr{
				pos: position{line: 334, col: 5, offset: 9456},
				run: (*parser).callonSortOp1,
				expr: &seqExpr{
					pos: position{line: 334, col: 5, offset: 9456},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 334, col: 5, offset: 9456},
							val:        "sort",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 334, col: 12, offset: 9463},
							expr: &ruleRefExpr{
								pos:  position{line: 334, col: 13, offset: 9464},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 334, col: 18, offset: 9469},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 334, col: 23, offset: 9474},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 334, col: 32, offset: 9483},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 334, col: 37, offset: 9488},
								expr: &actionExpr{
									pos: position{line: 334, col: 38, offset: 9489},
									run: (*parser).callonSortOp10,
									expr: &seqExpr{
										pos: position{line: 334, col: 38, offset: 9489},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 334, col: 38, offset: 9489},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 334, col: 40, offset: 9491},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 334, col: 42, offset: 9493},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 348, col: 1, offset: 9904},
			expr: &actionExpr{
				pos: position{line: 348, col: 12, offset: 9915},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 348, col: 12, offset: 9915},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 348, col: 17, offset: 9920},
						expr: &actionExpr{
							pos: position{line: 348, col: 18, offset: 9921},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 348, col: 18, offset: 9921},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 348, col: 18, offset: 9921},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 348, col: 20, offset: 9923},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 348, col: 22, offset: 9925},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 350, col: 1, offset: 9982},
			expr: &choiceExpr{
				pos: position{line: 351, col: 5, offset: 9994},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 351, col: 5, offset: 9994},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 351, col: 5, offset: 9994},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 352, col: 5, offset: 10069},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 352, col: 5, offset: 10069},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 352, col: 5, offset: 10069},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 352, col: 14, offset: 10078},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 352, col: 16, offset: 10080},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 352, col: 23, offset: 10087},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 352, col: 24, offset: 10088},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 352, col: 24, offset: 10088},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 352, col: 34, offset: 10098},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopOp",
			pos:  position{line: 354, col: 1, offset: 10211},
			expr: &actionExpr{
				pos: position{line: 355, col: 5, offset: 10221},
				run: (*parser).callonTopOp1,
				expr: &seqExpr{
					pos: position{line: 355, col: 5, offset: 10221},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 355, col: 5, offset: 10221},
							val:        "top",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 355, col: 11, offset: 10227},
							expr: &ruleRefExpr{
								pos:  position{line: 355, col: 12, offset: 10228},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 355, col: 17, offset: 10233},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 355, col: 23, offset: 10239},
								expr: &actionExpr{
									pos: position{line: 355, col: 24, offset: 10240},
									run: (*parser).callonTopOp8,
									expr: &seqExpr{
										pos: position{line: 355, col: 24, offset: 10240},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 355, col: 24, offset: 10240},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 355, col: 26, offset: 10242},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 355, col: 28, offset: 10244},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 355, col: 53, offset: 10269},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 355, col: 59, offset: 10275},
								expr: &seqExpr{
									pos: position{line: 355, col: 60, offset: 10276},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 355, col: 60, offset: 10276},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 355, col: 62, offset: 10278},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 355, col: 73, offset: 10289},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 355, col: 80, offset: 10296},
								expr: &actionExpr{
									pos: position{line: 355, col: 81, offset: 10297},
									run: (*parser).callonTopOp20,
									expr: &seqExpr{
										pos: position{line: 355, col: 81, offset: 10297},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 355, col: 81, offset: 10297},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 355, col: 83, offset: 10299},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 355, col: 85, offset: 10301},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutOp",
			pos:  position{line: 369, col: 1, offset: 10636},
			expr: &actionExpr{
				pos: position{line: 370, col: 5, offset: 10646},
				run: (*parser).callonCutOp1,
				expr: &seqExpr{
					pos: position{line: 370, col: 5, offset: 10646},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 370, col: 5, offset: 10646},
							val:        "cut",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 370, col: 11, offset: 10652},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 370, col: 13, offset: 10654},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 370, col: 18, offset: 10659},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropOp",
			pos:  position{line: 374, col: 1, offset: 10754},
			expr: &actionExpr{
				pos: position{line: 375, col: 5, offset: 10765},
				run: (*parser).callonDropOp1,
				expr: &seqExpr{
					pos: position{line: 375, col: 5, offset: 10765},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 375, col: 5, offset: 10765},
							val:        "drop",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 375, col: 12, offset: 10772},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 375, col: 14, offset: 10774},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 375, col: 19, offset: 10779},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadOp",
			pos:  position{line: 379, col: 1, offset: 10870},
			expr: &choiceExpr{
				pos: position{line: 380, col: 5, offset: 10881},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 380, col: 5, offset: 10881},
						run: (*parser).callonHeadOp2,
						expr: &seqExpr{
							pos: position{line: 380, col: 5, offset: 10881},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 380, col: 5, offset: 10881},
									val:        "head",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 380, col: 12, offset: 10888},
									name: "_",
								},
								&notExpr{
									pos: position{line: 380, col: 14, offset: 10890},
									expr: &ruleRefExpr{
										pos:  position{line: 380, col: 15, offset: 10891},
										name: "EndOfOp",
									},
								},
								&labeledExpr{
									pos:   position{line: 380, col: 23, offset: 10899},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 380, col: 29, offset: 10905},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 381, col: 5, offset: 10985},
						run: (*parser).callonHeadOp10,
						expr: &litMatcher{
							pos:        position{line: 381, col: 5, offset: 10985},
							val:        "head",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TailOp",
			pos:  position{line: 383, col: 1, offset: 11132},
			expr: &choiceExpr{
				pos: position{line: 384, col: 5, offset: 11143},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 384, col: 5, offset: 11143},
						run: (*parser).callonTailOp2,
						expr: &seqExpr{
							pos: position{line: 384, col: 5, offset: 11143},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 384, col: 5, offset: 11143},
									val:        "tail",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 384, col: 12, offset: 11150},
									name: "_",
								},
								&notExpr{
									pos: position{line: 384, col: 14, offset: 11152},
									expr: &ruleRefExpr{
										pos:  position{line: 384, col: 15, offset: 11153},
										name: "EndOfOp",
									},
								},
								&labeledExpr{
									pos:   position{line: 384, col: 23, offset: 11161},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 384, col: 29, offset: 11167},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 385, col: 5, offset: 11247},
						run: (*parser).callonTailOp10,
						expr: &litMatcher{
							pos:        position{line: 385, col: 5, offset: 11247},
							val:        "tail",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "WhereOp",
			pos:  position{line: 387, col: 1, offset: 11394},
			expr: &actionExpr{
				pos: position{line: 388, col: 5, offset: 11406},
				run: (*parser).callonWhereOp1,
				expr: &seqExpr{
					pos: position{line: 388, col: 5, offset: 11406},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 388, col: 5, offset: 11406},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 388, col: 13, offset: 11414},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 388, col: 15, offset: 11416},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 388, col: 20, offset: 11421},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "UniqOp",
			pos:  position{line: 392, col: 1, offset: 11507},
			expr: &choiceExpr{
				pos: position{line: 393, col: 5, offset: 11518},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 393, col: 5, offset: 11518},
						run: (*parser).callonUniqOp2,
						expr: &seqExpr{
							pos: position{line: 393, col: 5, offset: 11518},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 393, col: 5, offset: 11518},
									val:        "uniq",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 393, col: 12, offset: 11525},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 393, col: 14, offset: 11527},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 396, col: 5, offset: 11616},
						run: (*parser).callonUniqOp7,
						expr: &litMatcher{
							pos:        position{line: 396, col: 5, offset: 11616},
							val:        "uniq",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PutOp",
			pos:  position{line: 400, col: 1, offset: 11705},
			expr: &actionExpr{
				pos: position{line: 401, col: 5, offset: 11715},
				run: (*parser).callonPutOp1,
				expr: &seqExpr{
					pos: position{line: 401, col: 5, offset: 11715},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 401, col: 5, offset: 11715},
							val:        "put",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 401, col: 11, offset: 11721},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 401, col: 13, offset: 11723},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 401, col: 18, offset: 11728},
								name: "Assignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameOp",
			pos:  position{line: 405, col: 1, offset: 11819},
			expr: &actionExpr{
				pos: position{line: 406, col: 5, offset: 11832},
				run: (*parser).callonRenameOp1,
				expr: &seqExpr{
					pos: position{line: 406, col: 5, offset: 11832},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 406, col: 5, offset: 11832},
							val:        "rename",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 406, col: 14, offset: 11841},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 406, col: 16, offset: 11843},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 406, col: 22, offset: 11849},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 406, col: 33, offset: 11860},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 406, col: 38, offset: 11865},
								expr: &actionExpr{
									pos: position{line: 406, col: 39, offset: 11866},
									run: (*parser).callonRenameOp9,
									expr: &seqExpr{
										pos: position{line: 406, col: 39, offset: 11866},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 406, col: 39, offset: 11866},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 406, col: 42, offset: 11869},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 406, col: 46, offset: 11873},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 406, col: 49, offset: 11876},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 406, col: 52, offset: 11879},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseOp",
			pos:  position{line: 414, col: 1, offset: 12286},
			expr: &actionExpr{
				pos: position{line: 415, col: 5, offset: 12297},
				run: (*parser).callonFuseOp1,
				expr: &seqExpr{
					pos: position{line: 415, col: 5, offset: 12297},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 415, col: 5, offset: 12297},
							val:        "fuse",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 415, col: 12, offset: 12304},
							expr: &seqExpr{
								pos: position{line: 415, col: 14, offset: 12306},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 415, col: 14, offset: 12306},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 415, col: 17, offset: 12309},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 415, col: 22, offset: 12314},
							expr: &ruleRefExpr{
								pos:  position{line: 415, col: 23, offset: 12315},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "ShapeOp",
			pos:  position{line: 419, col: 1, offset: 12386},
			expr: &actionExpr{
				pos: position{line: 420, col: 5, offset: 12398},
				run: (*parser).callonShapeOp1,
				expr: &seqExpr{
					pos: position{line: 420, col: 5, offset: 12398},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 420, col: 5, offset: 12398},
							val:        "shape",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 420, col: 13, offset: 12406},
							expr: &seqExpr{
								pos: position{line: 420, col: 15, offset: 12408},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 420, col: 15, offset: 12408},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 420, col: 18, offset: 12411},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 420, col: 23, offset: 12416},
							expr: &ruleRefExpr{
								pos:  position{line: 420, col: 24, offset: 12417},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "JoinOp",
			pos:  position{line: 424, col: 1, offset: 12489},
			expr: &actionExpr{
				pos: position{line: 425, col: 5, offset: 12500},
				run: (*parser).callonJoinOp1,
				expr: &seqExpr{
					pos: position{line: 425, col: 5, offset: 12500},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 425, col: 5, offset: 12500},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 425, col: 11, offset: 12506},
								name: "JoinStyle",
							},
						},
						&litMatcher{
							pos:        position{line: 425, col: 21, offset: 12516},
							val:        "join",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 425, col: 28, offset: 12523},
							label: "rightInput",
							expr: &ruleRefExpr{
								pos:  position{line: 425, col: 39, offset: 12534},
								name: "JoinRightInput",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 425, col: 54, offset: 12549},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 425, col: 57, offset: 12552},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 425, col: 59, offset: 12554},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 425, col: 63, offset: 12558},
								name: "JoinKey",
							},
						},
						&labeledExpr{
							pos:   position{line: 425, col: 71, offset: 12566},
							label: "optKey",
							expr: &zeroOrOneExpr{
								pos: position{line: 425, col: 78, offset: 12573},
								expr: &seqExpr{
									pos: position{line: 425, col: 79, offset: 12574},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 425, col: 79, offset: 12574},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 425, col: 82, offset: 12577},
											val:        "=",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 425, col: 86, offset: 12581},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 425, col: 89, offset: 12584},
											name: "JoinKey",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 425, col: 99, offset: 12594},
							label: "optArgs",
							expr: &zeroOrOneExpr{
								pos: position{line: 425, col: 107, offset: 12602},
								expr: &seqExpr{
									pos: position{line: 425, col: 108, offset: 12603},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 425, col: 108, offset: 12603},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 425, col: 110, offset: 12605},
											name: "FlexAssignments",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinStyle",
			pos:  position{line: 436, col: 1, offset: 12961},
			expr: &choiceExpr{
				pos: position{line: 437, col: 5, offset: 12975},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 437, col: 5, offset: 12975},
						run: (*parser).callonJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 437, col: 5, offset: 12975},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 437, col: 5, offset: 12975},
									val:        "anti",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 437, col: 12, offset: 12982},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 438, col: 5, offset: 13012},
						run: (*parser).callonJoinStyle6,
						expr: &seqExpr{
							pos: position{line: 438, col: 5, offset: 13012},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 438, col: 5, offset: 13012},
									val:        "inner",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 438, col: 13, offset: 13020},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 439, col: 5, offset: 13050},
						run: (*parser).callonJoinStyle10,
						expr: &seqExpr{
							pos: position{line: 439, col: 5, offset: 13050},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 439, col: 5, offset: 13050},
									val:        "left",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 439, col: 13, offset: 13058},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 440, col: 5, offset: 13087},
						run: (*parser).callonJoinStyle14,
						expr: &seqExpr{
							pos: position{line: 440, col: 5, offset: 13087},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 440, col: 5, offset: 13087},
									val:        "right",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 440, col: 13, offset: 13095},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 441, col: 5, offset: 13125},
						run: (*parser).callonJoinStyle18,
						expr: &litMatcher{
							pos:        position{line: 441, col: 5, offset: 13125},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "JoinRightInput",
			pos:  position{line: 443, col: 1, offset: 13160},
			expr: &choiceExpr{
				pos: position{line: 444, col: 5, offset: 13179},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 444, col: 5, offset: 13179},
						run: (*parser).callonJoinRightInput2,
						expr: &seqExpr{
							pos: position{line: 444, col: 5, offset: 13179},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 444, col: 5, offset: 13179},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 444, col: 8, offset: 13182},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 444, col: 12, offset: 13186},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 444, col: 15, offset: 13189},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 444, col: 17, offset: 13191},
										name: "Seq",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 444, col: 21, offset: 13195},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 444, col: 24, offset: 13198},
									val:        ")",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 444, col: 28, offset: 13202},
									name: "__",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 445, col: 5, offset: 13227},
						run: (*parser).callonJoinRightInput12,
						expr: &ruleRefExpr{
							pos:  position{line: 445, col: 5, offset: 13227},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 447, col: 1, offset: 13250},
			expr: &choiceExpr{
				pos: position{line: 448, col: 5, offset: 13262},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 448, col: 5, offset: 13262},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 449, col: 5, offset: 13271},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 449, col: 5, offset: 13271},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 449, col: 5, offset: 13271},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 449, col: 9, offset: 13275},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 449, col: 14, offset: 13280},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 449, col: 19, offset: 13285},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SampleOp",
			pos:  position{line: 451, col: 1, offset: 13311},
			expr: &actionExpr{
				pos: position{line: 452, col: 5, offset: 13324},
				run: (*parser).callonSampleOp1,
				expr: &seqExpr{
					pos: position{line: 452, col: 5, offset: 13324},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 452, col: 5, offset: 13324},
							val:        "sample",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 452, col: 14, offset: 13333},
							expr: &ruleRefExpr{
								pos:  position{line: 452, col: 15, offset: 13334},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 452, col: 20, offset: 13339},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 452, col: 22, offset: 13341},
								name: "SampleExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "OpAssignment",
			pos:  position{line: 459, col: 1, offset: 13689},
			expr: &actionExpr{
				pos: position{line: 460, col: 5, offset: 13706},
				run: (*parser).callonOpAssignment1,
				expr: &labeledExpr{
					pos:   position{line: 460, col: 5, offset: 13706},
					label: "a",
					expr: &ruleRefExpr{
						pos:  position{line: 460, col: 7, offset: 13708},
						name: "Assignments",
					},
				},
			},
		},
		{
			name: "SampleExpr",
			pos:  position{line: 464, col: 1, offset: 13808},
			expr: &choiceExpr{
				pos: position{line: 465, col: 5, offset: 13823},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 465, col: 5, offset: 13823},
						run: (*parser).callonSampleExpr2,
						expr: &seqExpr{
							pos: position{line: 465, col: 5, offset: 13823},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 465, col: 5, offset: 13823},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 465, col: 7, offset: 13825},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 465, col: 12, offset: 13830},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 466, col: 5, offset: 13860},
						run: (*parser).callonSampleExpr7,
						expr: &litMatcher{
							pos:        position{line: 466, col: 5, offset: 13860},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LoadOp",
			pos:  position{line: 468, col: 1, offset: 13933},
			expr: &actionExpr{
				pos: position{line: 469, col: 5, offset: 13944},
				run: (*parser).callonLoadOp1,
				expr: &seqExpr{
					pos: position{line: 469, col: 5, offset: 13944},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 469, col: 5, offset: 13944},
							val:        "load",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 469, col: 12, offset: 13951},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 469, col: 14, offset: 13953},
							label: "pool",
							expr: &ruleRefExpr{
								pos:  position{line: 469, col: 19, offset: 13958},
								name: "PoolNameString",
							},
						},
						&labeledExpr{
							pos:   position{line: 469, col: 34, offset: 13973},
							label: "branch",
							expr: &zeroOrOneExpr{
								pos: position{line: 469, col: 41, offset: 13980},
								expr: &ruleRefExpr{
									pos:  position{line: 469, col: 41, offset: 13980},
									name: "PoolBranch",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 469, col: 53, offset: 13992},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 469, col: 60, offset: 13999},
								expr: &ruleRefExpr{
									pos:  position{line: 469, col: 60, offset: 13999},
									name: "AuthorArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 469, col: 71, offset: 14010},
							label: "message",
							expr: &zeroOrOneExpr{
								pos: position{line: 469, col: 79, offset: 14018},
								expr: &ruleRefExpr{
									pos:  position{line: 469, col: 79, offset: 14018},
									name: "MessageArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 469, col: 91, offset: 14030},
							label: "meta",
							expr: &zeroOrOneExpr{
								pos: position{line: 469, col: 96, offset: 14035},
								expr: &ruleRefExpr{
									pos:  position{line: 469, col: 96, offset: 14035},
									name: "MetaArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AuthorArg",
			pos:  position{line: 473, col: 1, offset: 14194},
			expr: &actionExpr{
				pos: position{line: 474, col: 5, offset: 14208},
				run: (*parser).callonAuthorArg1,
				expr: &seqExpr{
					pos: position{line: 474, col: 5, offset: 14208},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 474, col: 5, offset: 14208},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 474, col: 7, offset: 14210},
							val:        "author",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 474, col: 16, offset: 14219},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 474, col: 18, offset: 14221},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 474, col: 22, offset: 14225},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "MessageArg",
			pos:  position{line: 476, col: 1, offset: 14259},
			expr: &actionExpr{
				pos: position{line: 477, col: 5, offset: 14274},
				run: (*parser).callonMessageArg1,
				expr: &seqExpr{
					pos: position{line: 477, col: 5, offset: 14274},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 477, col: 5, offset: 14274},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 477, col: 7, offset: 14276},
							val:        "message",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 477, col: 17, offset: 14286},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 477, col: 19, offset: 14288},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 477, col: 23, offset: 14292},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "MetaArg",
			pos:  position{line: 479, col: 1, offset: 14326},
			expr: &actionExpr{
				pos: position{line: 480, col: 5, offset: 14338},
				run: (*parser).callonMetaArg1,
				expr: &seqExpr{
					pos: position{line: 480, col: 5, offset: 14338},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 480, col: 5, offset: 14338},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 480, col: 7, offset: 14340},
							val:        "meta",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 480, col: 14, offset: 14347},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 480, col: 16, offset: 14349},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 480, col: 20, offset: 14353},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolBranch",
			pos:  position{line: 482, col: 1, offset: 14387},
			expr: &actionExpr{
				pos: position{line: 483, col: 5, offset: 14402},
				run: (*parser).callonPoolBranch1,
				expr: &seqExpr{
					pos: position{line: 483, col: 5, offset: 14402},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 483, col: 5, offset: 14402},
							val:        "@",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 483, col: 9, offset: 14406},
							label: "branch",
							expr: &choiceExpr{
								pos: position{line: 483, col: 17, offset: 14414},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 483, col: 17, offset: 14414},
										name: "PoolIdentifier",
									},
									&ruleRefExpr{
										pos:  position{line: 483, col: 34, offset: 14431},
										name: "QuotedString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FromOp",
			pos:  position{line: 485, col: 1, offset: 14469},
			expr: &actionExpr{
				pos: position{line: 486, col: 5, offset: 14480},
				run: (*parser).callonFromOp1,
				expr: &labeledExpr{
					pos:   position{line: 486, col: 5, offset: 14480},
					label: "source",
					expr: &ruleRefExpr{
						pos:  position{line: 486, col: 12, offset: 14487},
						name: "FromAny",
					},
				},
			},
		},
		{
			name: "FromAny",
			pos:  position{line: 490, col: 1, offset: 14645},
			expr: &choiceExpr{
				pos: position{line: 491, col: 5, offset: 14657},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 491, col: 5, offset: 14657},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 492, col: 5, offset: 14666},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 493, col: 5, offset: 14674},
						name: "From",
					},
				},
			},
		},
		{
			name: "File",
			pos:  position{line: 495, col: 1, offset: 14680},
			expr: &actionExpr{
				pos: position{line: 496, col: 5, offset: 14689},
				run: (*parser).callonFile1,
				expr: &seqExpr{
					pos: position{line: 496, col: 5, offset: 14689},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 496, col: 5, offset: 14689},
							val:        "file",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 496, col: 12, offset: 14696},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 496, col: 14, offset: 14698},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 496, col: 19, offset: 14703},
								name: "Path",
							},
						},
						&labeledExpr{
							pos:   position{line: 496, col: 24, offset: 14708},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 496, col: 31, offset: 14715},
								expr: &ruleRefExpr{
									pos:  position{line: 496, col: 31, offset: 14715},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 496, col: 42, offset: 14726},
							label: "sort_key",
							expr: &zeroOrOneExpr{
								pos: position{line: 496, col: 51, offset: 14735},
								expr: &ruleRefExpr{
									pos:  position{line: 496, col: 51, offset: 14735},
									name: "SortKeyArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "From",
			pos:  position{line: 500, col: 1, offset: 14867},
			expr: &actionExpr{
				pos: position{line: 501, col: 5, offset: 14876},
				run: (*parser).callonFrom1,
				expr: &seqExpr{
					pos: position{line: 501, col: 5, offset: 14876},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 501, col: 5, offset: 14876},
							val:        "from",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 501, col: 12, offset: 14883},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 501, col: 14, offset: 14885},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 501, col: 19, offset: 14890},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "Pool",
			pos:  position{line: 503, col: 1, offset: 14921},
			expr: &actionExpr{
				pos: position{line: 504, col: 5, offset: 14930},
				run: (*parser).callonPool1,
				expr: &seqExpr{
					pos: position{line: 504, col: 5, offset: 14930},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 504, col: 5, offset: 14930},
							val:        "pool",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 504, col: 12, offset: 14937},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 504, col: 14, offset: 14939},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 504, col: 19, offset: 14944},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolBody",
			pos:  position{line: 506, col: 1, offset: 14975},
			expr: &actionExpr{
				pos: position{line: 507, col: 5, offset: 14988},
				run: (*parser).callonPoolBody1,
				expr: &seqExpr{
					pos: position{line: 507, col: 5, offset: 14988},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 507, col: 5, offset: 14988},
							label: "spec",
							expr: &ruleRefExpr{
								pos:  position{line: 507, col: 10, offset: 14993},
								name: "PoolSpec",
							},
						},
						&labeledExpr{
							pos:   position{line: 507, col: 19, offset: 15002},
							label: "at",
							expr: &zeroOrOneExpr{
								pos: position{line: 507, col: 22, offset: 15005},
								expr: &ruleRefExpr{
									pos:  position{line: 507, col: 22, offset: 15005},
									name: "PoolAt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Get",
			pos:  position{line: 511, col: 1, offset: 15103},
			expr: &actionExpr{
				pos: position{line: 512, col: 5, offset: 15111},
				run: (*parser).callonGet1,
				expr: &seqExpr{
					pos: position{line: 512, col: 5, offset: 15111},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 512, col: 5, offset: 15111},
							val:        "get",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 512, col: 11, offset: 15117},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 512, col: 13, offset: 15119},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 512, col: 17, offset: 15123},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 512, col: 21, offset: 15127},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 512, col: 28, offset: 15134},
								expr: &ruleRefExpr{
									pos:  position{line: 512, col: 28, offset: 15134},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 512, col: 39, offset: 15145},
							label: "sort_key",
							expr: &zeroOrOneExpr{
								pos: position{line: 512, col: 48, offset: 15154},
								expr: &ruleRefExpr{
									pos:  position{line: 512, col: 48, offset: 15154},
									name: "SortKeyArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 512, col: 60, offset: 15166},
							label: "method",
							expr: &zeroOrOneExpr{
								pos: position{line: 512, col: 67, offset: 15173},
								expr: &ruleRefExpr{
									pos:  position{line: 512, col: 67, offset: 15173},
									name: "MethodArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 512, col: 78, offset: 15184},
							label: "headers",
							expr: &zeroOrOneExpr{
								pos: position{line: 512, col: 86, offset: 15192},
								expr: &ruleRefExpr{
									pos:  position{line: 512, col: 86, offset: 15192},
									name: "HeadersArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 512, col: 98, offset: 15204},
							label: "body",
							expr: &zeroOrOneExpr{
								pos: position{line: 512, col: 103, offset: 15209},
								expr: &ruleRefExpr{
									pos:  position{line: 512, col: 103, offset: 15209},
									name: "BodyArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 531, col: 1, offset: 15499},
			expr: &actionExpr{
				pos: position{line: 531, col: 7, offset: 15505},
				run: (*parser).callonURL1,
				expr: &seqExpr{
					pos: position{line: 531, col: 7, offset: 15505},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 531, col: 8, offset: 15506},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 531, col: 8, offset: 15506},
									val:        "http:",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 531, col: 18, offset: 15516},
									val:        "https:",
									ignoreCase: false,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 531, col: 28, offset: 15526},
							name: "Path",
						},
					},
				},
			},
		},
		{
			name: "MethodArg",
			pos:  position{line: 533, col: 1, offset: 15563},
			expr: &actionExpr{
				pos: position{line: 533, col: 13, offset: 15575},
				run: (*parser).callonMethodArg1,
				expr: &seqExpr{
					pos: position{line: 533, col: 13, offset: 15575},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 533, col: 13, offset: 15575},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 533, col: 15, offset: 15577},
							val:        "method",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 533, col: 24, offset: 15586},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 533, col: 26, offset: 15588},
							label: "v",
							expr: &choiceExpr{
								pos: position{line: 533, col: 29, offset: 15591},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 533, col: 29, offset: 15591},
										name: "IdentifierName",
									},
									&ruleRefExpr{
										pos:  position{line: 533, col: 46, offset: 15608},
										name: "QuotedString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "HeadersArg",
			pos:  position{line: 535, col: 1, offset: 15641},
			expr: &actionExpr{
				pos: position{line: 535, col: 14, offset: 15654},
				run: (*parser).callonHeadersArg1,
				expr: &seqExpr{
					pos: position{line: 535, col: 14, offset: 15654},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 535, col: 14, offset: 15654},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 535, col: 16, offset: 15656},
							val:        "headers",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 535, col: 26, offset: 15666},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 535, col: 28, offset: 15668},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 535, col: 30, offset: 15670},
								name: "Record",
							},
						},
					},
				},
			},
		},
		{
			name: "BodyArg",
			pos:  position{line: 537, col: 1, offset: 15696},
			expr: &actionExpr{
				pos: position{line: 537, col: 11, offset: 15706},
				run: (*parser).callonBodyArg1,
				expr: &seqExpr{
					pos: position{line: 537, col: 11, offset: 15706},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 537, col: 11, offset: 15706},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 537, col: 13, offset: 15708},
							val:        "body",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 537, col: 20, offset: 15715},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 537, col: 22, offset: 15717},
							label: "v",
							expr: &choiceExpr{
								pos: position{line: 537, col: 25, offset: 15720},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 537, col: 25, offset: 15720},
										name: "IdentifierName",
									},
									&ruleRefExpr{
										pos:  position{line: 537, col: 42, offset: 15737},
										name: "QuotedString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Path",
			pos:  position{line: 539, col: 1, offset: 15770},
			expr: &choiceExpr{
				pos: position{line: 540, col: 5, offset: 15779},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 540, col: 5, offset: 15779},
						run: (*parser).callonPath2,
						expr: &labeledExpr{
							pos:   position{line: 540, col: 5, offset: 15779},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 540, col: 7, offset: 15781},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 541, col: 5, offset: 15816},
						run: (*parser).callonPath5,
						expr: &oneOrMoreExpr{
							pos: position{line: 541, col: 5, offset: 15816},
							expr: &charClassMatcher{
								pos:        position{line: 541, col: 5, offset: 15816},
								val:        "[0-9a-zA-Z!@$%^&*_=<>,./?:[\\]{}~+-]",
								chars:      []rune{'!', '@', '$', '%', '^', '&', '*', '_', '=', '<', '>', ',', '.', '/', '?', ':', '[', ']', '{', '}', '~', '+', '-'},
								ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PoolAt",
			pos:  position{line: 544, col: 1, offset: 15918},
			expr: &actionExpr{
				pos: position{line: 545, col: 5, offset: 15929},
				run: (*parser).callonPoolAt1,
				expr: &seqExpr{
					pos: position{line: 545, col: 5, offset: 15929},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 545, col: 5, offset: 15929},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 545, col: 7, offset: 15931},
							val:        "at",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 545, col: 12, offset: 15936},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 545, col: 14, offset: 15938},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 545, col: 17, offset: 15941},
								name: "KSUID",
							},
						},
					},
				},
			},
		},
		{
			name: "KSUID",
			pos:  position{line: 548, col: 1, offset: 16007},
			expr: &actionExpr{
				pos: position{line: 548, col: 9, offset: 16015},
				run: (*parser).callonKSUID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 548, col: 9, offset: 16015},
					expr: &charClassMatcher{
						pos:        position{line: 548, col: 10, offset: 16016},
						val:        "[0-9a-zA-Z]",
						ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "PoolSpec",
			pos:  position{line: 550, col: 1, offset: 16062},
			expr: &choiceExpr{
				pos: position{line: 551, col: 5, offset: 16075},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 551, col: 5, offset: 16075},
						run: (*parser).callonPoolSpec2,
						expr: &seqExpr{
							pos: position{line: 551, col: 5, offset: 16075},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 551, col: 5, offset: 16075},
									label: "pool",
									expr: &ruleRefExpr{
										pos:  position{line: 551, col: 10, offset: 16080},
										name: "PoolName",
									},
								},
								&labeledExpr{
									pos:   position{line: 551, col: 19, offset: 16089},
									label: "commit",
									expr: &zeroOrOneExpr{
										pos: position{line: 551, col: 26, offset: 16096},
										expr: &ruleRefExpr{
											pos:  position{line: 551, col: 26, offset: 16096},
											name: "PoolCommit",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 551, col: 38, offset: 16108},
									label: "meta",
									expr: &zeroOrOneExpr{
										pos: position{line: 551, col: 43, offset: 16113},
										expr: &ruleRefExpr{
											pos:  position{line: 551, col: 43, offset: 16113},
											name: "PoolMeta",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 551, col: 53, offset: 16123},
									label: "tap",
									expr: &ruleRefExpr{
										pos:  position{line: 551, col: 57, offset: 16127},
										name: "TapArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 554, col: 5, offset: 16245},
						run: (*parser).callonPoolSpec14,
						expr: &labeledExpr{
							pos:   position{line: 554, col: 5, offset: 16245},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 554, col: 10, offset: 16250},
								name: "PoolMeta",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolCommit",
			pos:  position{line: 558, col: 1, offset: 16351},
			expr: &actionExpr{
				pos: position{line: 559, col: 5, offset: 16366},
				run: (*parser).callonPoolCommit1,
				expr: &seqExpr{
					pos: position{line: 559, col: 5, offset: 16366},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 559, col: 5, offset: 16366},
							val:        "@",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 559, col: 9, offset: 16370},
							label: "commit",
							expr: &ruleRefExpr{
								pos:  position{line: 559, col: 16, offset: 16377},
								name: "PoolNameString",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolMeta",
			pos:  position{line: 561, col: 1, offset: 16416},
			expr: &actionExpr{
				pos: position{line: 562, col: 5, offset: 16429},
				run: (*parser).callonPoolMeta1,
				expr: &seqExpr{
					pos: position{line: 562, col: 5, offset: 16429},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 562, col: 5, offset: 16429},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 562, col: 9, offset: 16433},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 562, col: 14, offset: 16438},
								name: "PoolIdentifier",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolName",
			pos:  position{line: 564, col: 1, offset: 16475},
			expr: &choiceExpr{
				pos: position{line: 565, col: 5, offset: 16488},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 565, col: 5, offset: 16488},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 566, col: 5, offset: 16499},
						name: "Glob",
					},
					&actionExpr{
						pos: position{line: 567, col: 5, offset: 16508},
						run: (*parser).callonPoolName4,
						expr: &seqExpr{
							pos: position{line: 567, col: 5, offset: 16508},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 567, col: 5, offset: 16508},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 567, col: 9, offset: 16512},
									expr: &ruleRefExpr{
										pos:  position{line: 567, col: 10, offset: 16513},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 568, col: 5, offset: 16598},
						run: (*parser).callonPoolName9,
						expr: &labeledExpr{
							pos:   position{line: 568, col: 5, offset: 16598},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 568, col: 10, offset: 16603},
								name: "PoolNameString",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolNameString",
			pos:  position{line: 570, col: 1, offset: 16690},
			expr: &choiceExpr{
				pos: position{line: 571, col: 5, offset: 16709},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 571, col: 5, offset: 16709},
						name: "PoolIdentifier",
					},
					&ruleRefExpr{
						pos:  position{line: 572, col: 5, offset: 16728},
						name: "KSUID",
					},
					&ruleRefExpr{
						pos:  position{line: 573, col: 5, offset: 16738},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "PoolIdentifier",
			pos:  position{line: 575, col: 1, offset: 16752},
			expr: &actionExpr{
				pos: position{line: 576, col: 5, offset: 16771},
				run: (*parser).callonPoolIdentifier1,
				expr: &seqExpr{
					pos: position{line: 576, col: 5, offset: 16771},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 576, col: 6, offset: 16772},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 576, col: 6, offset: 16772},
									name: "IdentifierStart",
								},
								&litMatcher{
									pos:        position{line: 576, col: 24, offset: 16790},
									val:        ".",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 576, col: 29, offset: 16795},
							expr: &choiceExpr{
								pos: position{line: 576, col: 30, offset: 16796},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 576, col: 30, offset: 16796},
										name: "IdentifierRest",
									},
									&litMatcher{
										pos:        position{line: 576, col: 47, offset: 16813},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortKeyArg",
			pos:  position{line: 578, col: 1, offset: 16851},
			expr: &actionExpr{
				pos: position{line: 579, col: 5, offset: 16866},
				run: (*parser).callonSortKeyArg1,
				expr: &seqExpr{
					pos: position{line: 579, col: 5, offset: 16866},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 579, col: 5, offset: 16866},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 579, col: 7, offset: 16868},
							val:        "order",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 579, col: 15, offset: 16876},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 579, col: 17, offset: 16878},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 579, col: 22, offset: 16883},
								name: "FieldExprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 579, col: 33, offset: 16894},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 579, col: 39, offset: 16900},
								name: "OrderSuffix",
							},
						},
					},
				},
			},
		},
		{
			name: "TapArg",
			pos:  position{line: 583, col: 1, offset: 17011},
			expr: &choiceExpr{
				pos: position{line: 584, col: 5, offset: 17022},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 584, col: 5, offset: 17022},
						run: (*parser).callonTapArg2,
						expr: &seqExpr{
							pos: position{line: 584, col: 5, offset: 17022},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 584, col: 5, offset: 17022},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 584, col: 7, offset: 17024},
									val:        "tap",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 585, col: 5, offset: 17055},
						run: (*parser).callonTapArg6,
						expr: &litMatcher{
							pos:        position{line: 585, col: 5, offset: 17055},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FormatArg",
			pos:  position{line: 587, col: 1, offset: 17081},
			expr: &actionExpr{
				pos: position{line: 588, col: 5, offset: 17095},
				run: (*parser).callonFormatArg1,
				expr: &seqExpr{
					pos: position{line: 588, col: 5, offset: 17095},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 588, col: 5, offset: 17095},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 588, col: 7, offset: 17097},
							val:        "format",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 588, col: 16, offset: 17106},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 588, col: 18, offset: 17108},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 588, col: 22, offset: 17112},
								name: "IdentifierName",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderSuffix",
			pos:  position{line: 590, col: 1, offset: 17148},
			expr: &choiceExpr{
				pos: position{line: 591, col: 5, offset: 17164},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 591, col: 5, offset: 17164},
						run: (*parser).callonOrderSuffix2,
						expr: &litMatcher{
							pos:        position{line: 591, col: 5, offset: 17164},
							val:        ":asc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 592, col: 5, offset: 17198},
						run: (*parser).callonOrderSuffix4,
						expr: &litMatcher{
							pos:        position{line: 592, col: 5, offset: 17198},
							val:        ":desc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 593, col: 5, offset: 17233},
						run: (*parser).callonOrderSuffix6,
						expr: &litMatcher{
							pos:        position{line: 593, col: 5, offset: 17233},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PassOp",
			pos:  position{line: 595, col: 1, offset: 17264},
			expr: &actionExpr{
				pos: position{line: 596, col: 5, offset: 17275},
				run: (*parser).callonPassOp1,
				expr: &seqExpr{
					pos: position{line: 596, col: 5, offset: 17275},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 596, col: 5, offset: 17275},
							val:        "pass",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 596, col: 12, offset: 17282},
							expr: &ruleRefExpr{
								pos:  position{line: 596, col: 13, offset: 17283},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "ExplodeOp",
			pos:  position{line: 602, col: 1, offset: 17476},
			expr: &actionExpr{
				pos: position{line: 603, col: 5, offset: 17490},
				run: (*parser).callonExplodeOp1,
				expr: &seqExpr{
					pos: position{line: 603, col: 5, offset: 17490},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 603, col: 5, offset: 17490},
							val:        "explode",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 603, col: 15, offset: 17500},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 603, col: 17, offset: 17502},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 603, col: 22, offset: 17507},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 603, col: 28, offset: 17513},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 603, col: 32, offset: 17517},
								name: "TypeArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 603, col: 40, offset: 17525},
							label: "as",
							expr: &zeroOrOneExpr{
								pos: position{line: 603, col: 43, offset: 17528},
								expr: &ruleRefExpr{
									pos:  position{line: 603, col: 43, offset: 17528},
									name: "AsArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MergeOp",
			pos:  position{line: 607, col: 1, offset: 17641},
			expr: &actionExpr{
				pos: position{line: 608, col: 5, offset: 17653},
				run: (*parser).callonMergeOp1,
				expr: &seqExpr{
					pos: position{line: 608, col: 5, offset: 17653},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 608, col: 5, offset: 17653},
							val:        "merge",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 608, col: 13, offset: 17661},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 608, col: 15, offset: 17663},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 608, col: 20, offset: 17668},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "OverOp",
			pos:  position{line: 612, col: 1, offset: 17754},
			expr: &actionExpr{
				pos: position{line: 613, col: 5, offset: 17765},
				run: (*parser).callonOverOp1,
				expr: &seqExpr{
					pos: position{line: 613, col: 5, offset: 17765},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 613, col: 5, offset: 17765},
							val:        "over",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 613, col: 12, offset: 17772},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 613, col: 14, offset: 17774},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 613, col: 20, offset: 17780},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 613, col: 26, offset: 17786},
							label: "locals",
							expr: &zeroOrOneExpr{
								pos: position{line: 613, col: 33, offset: 17793},
								expr: &ruleRefExpr{
									pos:  position{line: 613, col: 33, offset: 17793},
									name: "Locals",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 613, col: 41, offset: 17801},
							label: "body",
							expr: &zeroOrOneExpr{
								pos: position{line: 613, col: 46, offset: 17806},
								expr: &ruleRefExpr{
									pos:  position{line: 613, col: 46, offset: 17806},
									name: "Lateral",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Lateral",
			pos:  position{line: 617, col: 1, offset: 17929},
			expr: &choiceExpr{
				pos: position{line: 618, col: 5, offset: 17941},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 618, col: 5, offset: 17941},
						run: (*parser).callonLateral2,
						expr: &seqExpr{
							pos: position{line: 618, col: 5, offset: 17941},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 618, col: 5, offset: 17941},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 618, col: 8, offset: 17944},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 618, col: 13, offset: 17949},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 618, col: 16, offset: 17952},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 618, col: 20, offset: 17956},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 618, col: 23, offset: 17959},
									label: "scope",
									expr: &ruleRefExpr{
										pos:  position{line: 618, col: 29, offset: 17965},
										name: "Scope",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 618, col: 35, offset: 17971},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 618, col: 38, offset: 17974},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 619, col: 5, offset: 18004},
						run: (*parser).callonLateral13,
						expr: &seqExpr{
							pos: position{line: 619, col: 5, offset: 18004},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 619, col: 5, offset: 18004},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 619, col: 8, offset: 18007},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 619, col: 13, offset: 18012},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 619, col: 16, offset: 18015},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 619, col: 20, offset: 18019},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 619, col: 23, offset: 18022},
									label: "seq",
									expr: &ruleRefExpr{
										pos:  position{line: 619, col: 27, offset: 18026},
										name: "Seq",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 619, col: 31, offset: 18030},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 619, col: 34, offset: 18033},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Locals",
			pos:  position{line: 621, col: 1, offset: 18058},
			expr: &actionExpr{
				pos: position{line: 622, col: 5, offset: 18069},
				run: (*parser).callonLocals1,
				expr: &seqExpr{
					pos: position{line: 622, col: 5, offset: 18069},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 622, col: 5, offset: 18069},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 622, col: 7, offset: 18071},
							val:        "with",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 622, col: 14, offset: 18078},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 622, col: 16, offset: 18080},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 622, col: 22, offset: 18086},
								name: "LocalsAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 622, col: 39, offset: 18103},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 622, col: 44, offset: 18108},
								expr: &actionExpr{
									pos: position{line: 622, col: 45, offset: 18109},
									run: (*parser).callonLocals10,
									expr: &seqExpr{
										pos: position{line: 622, col: 45, offset: 18109},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 622, col: 45, offset: 18109},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 622, col: 48, offset: 18112},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 622, col: 52, offset: 18116},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 622, col: 55, offset: 18119},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 622, col: 57, offset: 18121},
													name: "LocalsAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocalsAssignment",
			pos:  position{line: 626, col: 1, offset: 18242},
			expr: &actionExpr{
				pos: position{line: 627, col: 5, offset: 18263},
				run: (*parser).callonLocalsAssignment1,
				expr: &seqExpr{
					pos: position{line: 627, col: 5, offset: 18263},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 627, col: 5, offset: 18263},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 627, col: 10, offset: 18268},
								name: "IdentifierName",
							},
						},
						&labeledExpr{
							pos:   position{line: 627, col: 25, offset: 18283},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 627, col: 29, offset: 18287},
								expr: &seqExpr{
									pos: position{line: 627, col: 30, offset: 18288},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 627, col: 30, offset: 18288},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 627, col: 33, offset: 18291},
											val:        "=",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 627, col: 37, offset: 18295},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 627, col: 40, offset: 18298},
											name: "Expr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "YieldOp",
			pos:  position{line: 635, col: 1, offset: 18519},
			expr: &actionExpr{
				pos: position{line: 636, col: 5, offset: 18531},
				run: (*parser).callonYieldOp1,
				expr: &seqExpr{
					pos: position{line: 636, col: 5, offset: 18531},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 636, col: 5, offset: 18531},
							val:        "yield",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 636, col: 13, offset: 18539},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 636, col: 15, offset: 18541},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 636, col: 21, offset: 18547},
								name: "Exprs",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeArg",
			pos:  position{line: 640, col: 1, offset: 18636},
			expr: &actionExpr{
				pos: position{line: 641, col: 5, offset: 18648},
				run: (*parser).callonTypeArg1,
				expr: &seqExpr{
					pos: position{line: 641, col: 5, offset: 18648},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 641, col: 5, offset: 18648},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 641, col: 7, offset: 18650},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 641, col: 10, offset: 18653},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 641, col: 12, offset: 18655},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 641, col: 16, offset: 18659},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "AsArg",
			pos:  position{line: 643, col: 1, offset: 18685},
			expr: &actionExpr{
				pos: position{line: 644, col: 5, offset: 18695},
				run: (*parser).callonAsArg1,
				expr: &seqExpr{
					pos: position{line: 644, col: 5, offset: 18695},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 644, col: 5, offset: 18695},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 644, col: 7, offset: 18697},
							name: "AS",
						},
						&ruleRefExpr{
							pos:  position{line: 644, col: 10, offset: 18700},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 644, col: 12, offset: 18702},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 644, col: 16, offset: 18706},
								name: "Lval",
							},
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 648, col: 1, offset: 18757},
			expr: &ruleRefExpr{
				pos:  position{line: 648, col: 8, offset: 18764},
				name: "DerefExpr",
			},
		},
		{
			name: "Lvals",
			pos:  position{line: 650, col: 1, offset: 18775},
			expr: &actionExpr{
				pos: position{line: 651, col: 5, offset: 18785},
				run: (*parser).callonLvals1,
				expr: &seqExpr{
					pos: position{line: 651, col: 5, offset: 18785},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 651, col: 5, offset: 18785},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 651, col: 11, offset: 18791},
								name: "Lval",
							},
						},
						&labeledExpr{
							pos:   position{line: 651, col: 16, offset: 18796},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 651, col: 21, offset: 18801},
								expr: &actionExpr{
									pos: position{line: 651, col: 22, offset: 18802},
									run: (*parser).callonLvals7,
									expr: &seqExpr{
										pos: position{line: 651, col: 22, offset: 18802},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 651, col: 22, offset: 18802},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 651, col: 25, offset: 18805},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 651, col: 29, offset: 18809},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 651, col: 32, offset: 18812},
												label: "lval",
												expr: &ruleRefExpr{
													pos:  position{line: 651, col: 37, offset: 18817},
													name: "Lval",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 655, col: 1, offset: 18929},
			expr: &ruleRefExpr{
				pos:  position{line: 655, col: 13, offset: 18941},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 657, col: 1, offset: 18947},
			expr: &actionExpr{
				pos: position{line: 658, col: 5, offset: 18962},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 658, col: 5, offset: 18962},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 658, col: 5, offset: 18962},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 658, col: 11, offset: 18968},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 658, col: 21, offset: 18978},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 658, col: 26, offset: 18983},
								expr: &seqExpr{
									pos: position{line: 658, col: 27, offset: 18984},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 658, col: 27, offset: 18984},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 658, col: 30, offset: 18987},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 658, col: 34, offset: 18991},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 658, col: 37, offset: 18994},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignments",
			pos:  position{line: 668, col: 1, offset: 19193},
			expr: &actionExpr{
				pos: position{line: 669, col: 5, offset: 19209},
				run: (*parser).callonAssignments1,
				expr: &seqExpr{
					pos: position{line: 669, col: 5, offset: 19209},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 669, col: 5, offset: 19209},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 669, col: 11, offset: 19215},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 669, col: 22, offset: 19226},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 669, col: 27, offset: 19231},
								expr: &actionExpr{
									pos: position{line: 669, col: 28, offset: 19232},
									run: (*parser).callonAssignments7,
									expr: &seqExpr{
										pos: position{line: 669, col: 28, offset: 19232},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 669, col: 28, offset: 19232},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 669, col: 31, offset: 19235},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 669, col: 35, offset: 19239},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 669, col: 38, offset: 19242},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 669, col: 40, offset: 19244},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 673, col: 1, offset: 19355},
			expr: &actionExpr{
				pos: position{line: 674, col: 5, offset: 19370},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 674, col: 5, offset: 19370},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 674, col: 5, offset: 19370},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 674, col: 9, offset: 19374},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 674, col: 14, offset: 19379},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 674, col: 17, offset: 19382},
							val:        ":=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 674, col: 22, offset: 19387},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 674, col: 25, offset: 19390},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 674, col: 29, offset: 19394},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 676, col: 1, offset: 19485},
			expr: &ruleRefExpr{
				pos:  position{line: 676, col: 8, offset: 19492},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 678, col: 1, offset: 19509},
			expr: &actionExpr{
				pos: position{line: 679, col: 5, offset: 19529},
				run: (*parser).callonConditionalExpr1,
				expr: &seqExpr{
					pos: position{line: 679, col: 5, offset: 19529},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 679, col: 5, offset: 19529},
							label: "cond",
							expr: &ruleRefExpr{
								pos:  position{line: 679, col: 10, offset: 19534},
								name: "LogicalOrExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 679, col: 24, offset: 19548},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 679, col: 28, offset: 19552},
								expr: &seqExpr{
									pos: position{line: 679, col: 29, offset: 19553},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 679, col: 29, offset: 19553},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 679, col: 32, offset: 19556},
											val:        "?",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 679, col: 36, offset: 19560},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 679, col: 39, offset: 19563},
											name: "Expr",
										},
										&ruleRefExpr{
											pos:  position{line: 679, col: 44, offset: 19568},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 679, col: 47, offset: 19571},
											val:        ":",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 679, col: 51, offset: 19575},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 679, col: 54, offset: 19578},
											name: "Expr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 688, col: 1, offset: 19839},
			expr: &actionExpr{
				pos: position{line: 689, col: 5, offset: 19857},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 689, col: 5, offset: 19857},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 689, col: 5, offset: 19857},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 689, col: 11, offset: 19863},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 690, col: 5, offset: 19882},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 690, col: 10, offset: 19887},
								expr: &actionExpr{
									pos: position{line: 690, col: 11, offset: 19888},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 690, col: 11, offset: 19888},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 690, col: 11, offset: 19888},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 690, col: 14, offset: 19891},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 690, col: 17, offset: 19894},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 690, col: 25, offset: 19902},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 690, col: 28, offset: 19905},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 690, col: 33, offset: 19910},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 694, col: 1, offset: 20029},
			expr: &actionExpr{
				pos: position{line: 695, col: 5, offset: 20048},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 695, col: 5, offset: 20048},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 695, col: 5, offset: 20048},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 695, col: 11, offset: 20054},
								name: "ComparisonExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 696, col: 5, offset: 20073},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 696, col: 10, offset: 20078},
								expr: &actionExpr{
									pos: position{line: 696, col: 11, offset: 20079},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 696, col: 11, offset: 20079},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 696, col: 11, offset: 20079},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 696, col: 14, offset: 20082},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 696, col: 17, offset: 20085},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 696, col: 26, offset: 20094},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 696, col: 29, offset: 20097},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 696, col: 34, offset: 20102},
													name: "ComparisonExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ComparisonExpr",
			pos:  position{line: 700, col: 1, offset: 20221},
			expr: &actionExpr{
				pos: position{line: 701, col: 5, offset: 20240},
				run: (*parser).callonComparisonExpr1,
				expr: &seqExpr{
					pos: position{line: 701, col: 5, offset: 20240},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 701, col: 5, offset: 20240},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 701, col: 9, offset: 20244},
								name: "AdditiveExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 701, col: 22, offset: 20257},
							label: "opAndRHS",
							expr: &zeroOrOneExpr{
								pos: position{line: 701, col: 31, offset: 20266},
								expr: &choiceExpr{
									pos: position{line: 701, col: 32, offset: 20267},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 701, col: 32, offset: 20267},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 701, col: 32, offset: 20267},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 701, col: 35, offset: 20270},
													name: "Comparator",
												},
												&ruleRefExpr{
													pos:  position{line: 701, col: 46, offset: 20281},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 701, col: 49, offset: 20284},
													name: "AdditiveExpr",
												},
											},
										},
										&seqExpr{
											pos: position{line: 701, col: 64, offset: 20299},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 701, col: 64, offset: 20299},
													name: "__",
												},
												&actionExpr{
													pos: position{line: 701, col: 68, offset: 20303},
													run: (*parser).callonComparisonExpr15,
													expr: &litMatcher{
														pos:        position{line: 701, col: 68, offset: 20303},
														val:        "~",
														ignoreCase: false,
													},
												},
												&ruleRefExpr{
													pos:  position{line: 701, col: 104, offset: 20339},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 701, col: 107, offset: 20342},
													name: "Regexp",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 710, col: 1, offset: 20603},
			expr: &actionExpr{
				pos: position{line: 711, col: 5, offset: 20620},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 711, col: 5, offset: 20620},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 711, col: 5, offset: 20620},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 711, col: 11, offset: 20626},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 712, col: 5, offset: 20649},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 712, col: 10, offset: 20654},
								expr: &actionExpr{
									pos: position{line: 712, col: 11, offset: 20655},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 712, col: 11, offset: 20655},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 712, col: 11, offset: 20655},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 712, col: 14, offset: 20658},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 712, col: 17, offset: 20661},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 712, col: 34, offset: 20678},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 712, col: 37, offset: 20681},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 712, col: 42, offset: 20686},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 716, col: 1, offset: 20809},
			expr: &actionExpr{
				pos: position{line: 716, col: 20, offset: 20828},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 716, col: 21, offset: 20829},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 716, col: 21, offset: 20829},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 716, col: 27, offset: 20835},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 718, col: 1, offset: 20872},
			expr: &actionExpr{
				pos: position{line: 719, col: 5, offset: 20895},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 719, col: 5, offset: 20895},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 719, col: 5, offset: 20895},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 719, col: 11, offset: 20901},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 720, col: 5, offset: 20913},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 720, col: 10, offset: 20918},
								expr: &actionExpr{
									pos: position{line: 720, col: 11, offset: 20919},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 720, col: 11, offset: 20919},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 720, col: 11, offset: 20919},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 720, col: 14, offset: 20922},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 720, col: 17, offset: 20925},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 720, col: 40, offset: 20948},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 720, col: 43, offset: 20951},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 720, col: 48, offset: 20956},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 724, col: 1, offset: 21068},
			expr: &actionExpr{
				pos: position{line: 724, col: 26, offset: 21093},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 724, col: 27, offset: 21094},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 724, col: 27, offset: 21094},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 724, col: 33, offset: 21100},
							val:        "/",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 724, col: 39, offset: 21106},
							val:        "%",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 726, col: 1, offset: 21143},
			expr: &choiceExpr{
				pos: position{line: 727, col: 5, offset: 21155},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 727, col: 5, offset: 21155},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 727, col: 5, offset: 21155},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 727, col: 5, offset: 21155},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 727, col: 9, offset: 21159},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 727, col: 12, offset: 21162},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 727, col: 14, offset: 21164},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 730, col: 5, offset: 21273},
						name: "NegationExpr",
					},
				},
			},
		},
		{
			name: "NegationExpr",
			pos:  position{line: 732, col: 1, offset: 21287},
			expr: &choiceExpr{
				pos: position{line: 733, col: 5, offset: 21304},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 733, col: 5, offset: 21304},
						run: (*parser).callonNegationExpr2,
						expr: &seqExpr{
							pos: position{line: 733, col: 5, offset: 21304},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 733, col: 5, offset: 21304},
									expr: &ruleRefExpr{
										pos:  position{line: 733, col: 6, offset: 21305},
										name: "Literal",
									},
								},
								&litMatcher{
									pos:        position{line: 733, col: 14, offset: 21313},
									val:        "-",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 733, col: 18, offset: 21317},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 733, col: 21, offset: 21320},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 733, col: 23, offset: 21322},
										name: "FuncExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 736, col: 5, offset: 21432},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 738, col: 1, offset: 21442},
			expr: &choiceExpr{
				pos: position{line: 739, col: 5, offset: 21455},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 739, col: 5, offset: 21455},
						run: (*parser).callonFuncExpr2,
						expr: &seqExpr{
							pos: position{line: 739, col: 5, offset: 21455},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 739, col: 5, offset: 21455},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 739, col: 11, offset: 21461},
										name: "Cast",
									},
								},
								&labeledExpr{
									pos:   position{line: 739, col: 16, offset: 21466},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 739, col: 21, offset: 21471},
										expr: &ruleRefExpr{
											pos:  position{line: 739, col: 22, offset: 21472},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 742, col: 5, offset: 21543},
						run: (*parser).callonFuncExpr9,
						expr: &seqExpr{
							pos: position{line: 742, col: 5, offset: 21543},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 742, col: 5, offset: 21543},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 742, col: 11, offset: 21549},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 742, col: 20, offset: 21558},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 742, col: 25, offset: 21563},
										expr: &ruleRefExpr{
											pos:  position{line: 742, col: 26, offset: 21564},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 745, col: 5, offset: 21635},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 746, col: 5, offset: 21649},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FuncGuard",
			pos:  position{line: 748, col: 1, offset: 21658},
			expr: &seqExpr{
				pos: position{line: 748, col: 13, offset: 21670},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 748, col: 13, offset: 21670},
						name: "NotFuncs",
					},
					&ruleRefExpr{
						pos:  position{line: 748, col: 22, offset: 21679},
						name: "__",
					},
					&litMatcher{
						pos:        position{line: 748, col: 25, offset: 21682},
						val:        "(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "NotFuncs",
			pos:  position{line: 750, col: 1, offset: 21687},
			expr: &choiceExpr{
				pos: position{line: 751, col: 5, offset: 21700},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 751, col: 5, offset: 21700},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 752, col: 5, offset: 21710},
						val:        "select",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Cast",
			pos:  position{line: 754, col: 1, offset: 21720},
			expr: &actionExpr{
				pos: position{line: 755, col: 5, offset: 21729},
				run: (*parser).callonCast1,
				expr: &seqExpr{
					pos: position{line: 755, col: 5, offset: 21729},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 755, col: 5, offset: 21729},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 755, col: 9, offset: 21733},
								name: "CastType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 755, col: 18, offset: 21742},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 755, col: 21, offset: 21745},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 755, col: 25, offset: 21749},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 755, col: 28, offset: 21752},
							label: "expr",
							expr: &choiceExpr{
								pos: position{line: 755, col: 34, offset: 21758},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 755, col: 34, offset: 21758},
										name: "OverExpr",
									},
									&ruleRefExpr{
										pos:  position{line: 755, col: 45, offset: 21769},
										name: "Expr",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 755, col: 51, offset: 21775},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 755, col: 54, offset: 21778},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 759, col: 1, offset: 21875},
			expr: &choiceExpr{
				pos: position{line: 760, col: 5, offset: 21888},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 760, col: 5, offset: 21888},
						name: "Grep",
					},
					&actionExpr{
						pos: position{line: 762, col: 5, offset: 21975},
						run: (*parser).callonFunction3,
						expr: &seqExpr{
							pos: position{line: 762, col: 5, offset: 21975},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 762, col: 5, offset: 21975},
									val:        "regexp",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 762, col: 14, offset: 21984},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 762, col: 17, offset: 21987},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 762, col: 21, offset: 21991},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 762, col: 24, offset: 21994},
									label: "arg0Text",
									expr: &ruleRefExpr{
										pos:  position{line: 762, col: 33, offset: 22003},
										name: "RegexpPattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 762, col: 47, offset: 22017},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 762, col: 50, offset: 22020},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 762, col: 54, offset: 22024},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 762, col: 57, offset: 22027},
									label: "arg1",
									expr: &ruleRefExpr{
										pos:  position{line: 762, col: 62, offset: 22032},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 762, col: 67, offset: 22037},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 762, col: 70, offset: 22040},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 762, col: 74, offset: 22044},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 762, col: 80, offset: 22050},
										expr: &ruleRefExpr{
											pos:  position{line: 762, col: 80, offset: 22050},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 766, col: 5, offset: 22298},
						run: (*parser).callonFunction21,
						expr: &seqExpr{
							pos: position{line: 766, col: 5, offset: 22298},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 766, col: 5, offset: 22298},
									val:        "regexp_replace",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 766, col: 22, offset: 22315},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 766, col: 25, offset: 22318},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 766, col: 29, offset: 22322},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 766, col: 32, offset: 22325},
									label: "arg0",
									expr: &ruleRefExpr{
										pos:  position{line: 766, col: 37, offset: 22330},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 766, col: 42, offset: 22335},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 766, col: 45, offset: 22338},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 766, col: 49, offset: 22342},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 766, col: 52, offset: 22345},
									label: "arg1Text",
									expr: &ruleRefExpr{
										pos:  position{line: 766, col: 61, offset: 22354},
										name: "RegexpPattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 766, col: 75, offset: 22368},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 766, col: 78, offset: 22371},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 766, col: 82, offset: 22375},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 766, col: 85, offset: 22378},
									label: "arg2",
									expr: &ruleRefExpr{
										pos:  position{line: 766, col: 90, offset: 22383},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 766, col: 95, offset: 22388},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 766, col: 98, offset: 22391},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 766, col: 102, offset: 22395},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 766, col: 108, offset: 22401},
										expr: &ruleRefExpr{
											pos:  position{line: 766, col: 108, offset: 22401},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 770, col: 5, offset: 22663},
						run: (*parser).callonFunction44,
						expr: &seqExpr{
							pos: position{line: 770, col: 5, offset: 22663},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 770, col: 5, offset: 22663},
									expr: &ruleRefExpr{
										pos:  position{line: 770, col: 6, offset: 22664},
										name: "FuncGuard",
									},
								},
								&labeledExpr{
									pos:   position{line: 770, col: 16, offset: 22674},
									label: "fn",
									expr: &ruleRefExpr{
										pos:  position{line: 770, col: 19, offset: 22677},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 770, col: 34, offset: 22692},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 770, col: 37, offset: 22695},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 770, col: 41, offset: 22699},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 770, col: 44, offset: 22702},
									label: "args",
									expr: &ruleRefExpr{
										pos:  position{line: 770, col: 49, offset: 22707},
										name: "FunctionArgs",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 770, col: 62, offset: 22720},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 770, col: 65, offset: 22723},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 770, col: 69, offset: 22727},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 770, col: 75, offset: 22733},
										expr: &ruleRefExpr{
											pos:  position{line: 770, col: 75, offset: 22733},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FunctionArgs",
			pos:  position{line: 774, col: 1, offset: 22854},
			expr: &choiceExpr{
				pos: position{line: 775, col: 5, offset: 22871},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 775, col: 5, offset: 22871},
						run: (*parser).callonFunctionArgs2,
						expr: &labeledExpr{
							pos:   position{line: 775, col: 5, offset: 22871},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 775, col: 7, offset: 22873},
								name: "OverExpr",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 776, col: 5, offset: 22919},
						name: "OptionalExprs",
					},
				},
			},
		},
		{
			name: "Grep",
			pos:  position{line: 778, col: 1, offset: 22934},
			expr: &actionExpr{
				pos: position{line: 779, col: 5, offset: 22943},
				run: (*parser).callonGrep1,
				expr: &seqExpr{
					pos: position{line: 779, col: 5, offset: 22943},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 779, col: 5, offset: 22943},
							val:        "grep",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 779, col: 12, offset: 22950},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 779, col: 15, offset: 22953},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 779, col: 19, offset: 22957},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 779, col: 22, offset: 22960},
							label: "pattern",
							expr: &ruleRefExpr{
								pos:  position{line: 779, col: 30, offset: 22968},
								name: "Pattern",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 779, col: 38, offset: 22976},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 779, col: 41, offset: 22979},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 779, col: 45, offset: 22983},
								expr: &seqExpr{
									pos: position{line: 779, col: 46, offset: 22984},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 779, col: 46, offset: 22984},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 779, col: 50, offset: 22988},
											name: "__",
										},
										&choiceExpr{
											pos: position{line: 779, col: 54, offset: 22992},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 779, col: 54, offset: 22992},
													name: "OverExpr",
												},
												&ruleRefExpr{
													pos:  position{line: 779, col: 65, offset: 23003},
													name: "Expr",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 779, col: 71, offset: 23009},
											name: "__",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 779, col: 76, offset: 23014},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Pattern",
			pos:  position{line: 787, col: 1, offset: 23255},
			expr: &choiceExpr{
				pos: position{line: 788, col: 5, offset: 23267},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 788, col: 5, offset: 23267},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 789, col: 5, offset: 23278},
						name: "Glob",
					},
					&actionExpr{
						pos: position{line: 790, col: 5, offset: 23287},
						run: (*parser).callonPattern4,
						expr: &labeledExpr{
							pos:   position{line: 790, col: 5, offset: 23287},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 790, col: 7, offset: 23289},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "OptionalExprs",
			pos:  position{line: 794, col: 1, offset: 23381},
			expr: &choiceExpr{
				pos: position{line: 795, col: 5, offset: 23399},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 795, col: 5, offset: 23399},
						name: "Exprs",
					},
					&actionExpr{
						pos: position{line: 796, col: 5, offset: 23409},
						run: (*parser).callonOptionalExprs3,
						expr: &ruleRefExpr{
							pos:  position{line: 796, col: 5, offset: 23409},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 798, col: 1, offset: 23445},
			expr: &actionExpr{
				pos: position{line: 799, col: 5, offset: 23455},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 799, col: 5, offset: 23455},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 799, col: 5, offset: 23455},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 799, col: 11, offset: 23461},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 799, col: 16, offset: 23466},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 799, col: 21, offset: 23471},
								expr: &actionExpr{
									pos: position{line: 799, col: 22, offset: 23472},
									run: (*parser).callonExprs7,
									expr: &seqExpr{
										pos: position{line: 799, col: 22, offset: 23472},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 799, col: 22, offset: 23472},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 799, col: 25, offset: 23475},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 799, col: 29, offset: 23479},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 799, col: 32, offset: 23482},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 799, col: 34, offset: 23484},
													name: "Expr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 803, col: 1, offset: 23593},
			expr: &actionExpr{
				pos: position{line: 804, col: 5, offset: 23607},
				run: (*parser).callonDerefExpr1,
				expr: &seqExpr{
					pos: position{line: 804, col: 5, offset: 23607},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 804, col: 5, offset: 23607},
							expr: &ruleRefExpr{
								pos:  position{line: 804, col: 6, offset: 23608},
								name: "IP6",
							},
						},
						&labeledExpr{
							pos:   position{line: 804, col: 10, offset: 23612},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 804, col: 16, offset: 23618},
								name: "Identifier",
							},
						},
						&labeledExpr{
							pos:   position{line: 804, col: 27, offset: 23629},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 804, col: 32, offset: 23634},
								expr: &ruleRefExpr{
									pos:  position{line: 804, col: 33, offset: 23635},
									name: "Deref",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 808, col: 1, offset: 23703},
			expr: &choiceExpr{
				pos: position{line: 809, col: 5, offset: 23713},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 809, col: 5, offset: 23713},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 809, col: 5, offset: 23713},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 809, col: 5, offset: 23713},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 809, col: 9, offset: 23717},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 809, col: 14, offset: 23722},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 809, col: 27, offset: 23735},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 809, col: 30, offset: 23738},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 809, col: 34, offset: 23742},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 809, col: 37, offset: 23745},
									label: "to",
									expr: &zeroOrOneExpr{
										pos: position{line: 809, col: 40, offset: 23748},
										expr: &ruleRefExpr{
											pos:  position{line: 809, col: 40, offset: 23748},
											name: "AdditiveExpr",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 809, col: 54, offset: 23762},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 815, col: 5, offset: 23936},
						run: (*parser).callonDeref14,
						expr: &seqExpr{
							pos: position{line: 815, col: 5, offset: 23936},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 815, col: 5, offset: 23936},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 815, col: 9, offset: 23940},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 815, col: 12, offset: 23943},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 815, col: 16, offset: 23947},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 815, col: 19, offset: 23950},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 815, col: 22, offset: 23953},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 815, col: 35, offset: 23966},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 821, col: 5, offset: 24139},
						run: (*parser).callonDeref23,
						expr: &seqExpr{
							pos: position{line: 821, col: 5, offset: 24139},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 821, col: 5, offset: 24139},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 821, col: 9, offset: 24143},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 821, col: 14, offset: 24148},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 821, col: 19, offset: 24153},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 822, col: 5, offset: 24202},
						run: (*parser).callonDeref29,
						expr: &seqExpr{
							pos: position{line: 822, col: 5, offset: 24202},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 822, col: 5, offset: 24202},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 822, col: 9, offset: 24206},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 822, col: 12, offset: 24209},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 824, col: 1, offset: 24260},
			expr: &choiceExpr{
				pos: position{line: 825, col: 5, offset: 24272},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 825, col: 5, offset: 24272},
						name: "Record",
					},
					&ruleRefExpr{
						pos:  position{line: 826, col: 5, offset: 24283},
						name: "Array",
					},
					&ruleRefExpr{
						pos:  position{line: 827, col: 5, offset: 24293},
						name: "Set",
					},
					&ruleRefExpr{
						pos:  position{line: 828, col: 5, offset: 24301},
						name: "Map",
					},
					&ruleRefExpr{
						pos:  position{line: 829, col: 5, offset: 24309},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 830, col: 5, offset: 24321},
						run: (*parser).callonPrimary7,
						expr: &seqExpr{
							pos: position{line: 830, col: 5, offset: 24321},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 830, col: 5, offset: 24321},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 830, col: 9, offset: 24325},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 830, col: 12, offset: 24328},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 830, col: 17, offset: 24333},
										name: "OverExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 830, col: 26, offset: 24342},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 830, col: 29, offset: 24345},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 831, col: 5, offset: 24374},
						run: (*parser).callonPrimary15,
						expr: &seqExpr{
							pos: position{line: 831, col: 5, offset: 24374},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 831, col: 5, offset: 24374},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 831, col: 9, offset: 24378},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 831, col: 12, offset: 24381},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 831, col: 17, offset: 24386},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 831, col: 22, offset: 24391},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 831, col: 25, offset: 24394},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OverExpr",
			pos:  position{line: 833, col: 1, offset: 24420},
			expr: &actionExpr{
				pos: position{line: 834, col: 5, offset: 24433},
				run: (*parser).callonOverExpr1,
				expr: &seqExpr{
					pos: position{line: 834, col: 5, offset: 24433},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 834, col: 5, offset: 24433},
							val:        "over",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 834, col: 12, offset: 24440},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 834, col: 14, offset: 24442},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 834, col: 20, offset: 24448},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 834, col: 26, offset: 24454},
							label: "locals",
							expr: &zeroOrOneExpr{
								pos: position{line: 834, col: 33, offset: 24461},
								expr: &ruleRefExpr{
									pos:  position{line: 834, col: 33, offset: 24461},
									name: "Locals",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 834, col: 41, offset: 24469},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 834, col: 44, offset: 24472},
							val:        "|",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 834, col: 48, offset: 24476},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 834, col: 51, offset: 24479},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 834, col: 56, offset: 24484},
								name: "Seq",
							},
						},
					},
				},
			},
		},
		{
			name: "Record",
			pos:  position{line: 838, col: 1, offset: 24606},
			expr: &actionExpr{
				pos: position{line: 839, col: 5, offset: 24617},
				run: (*parser).callonRecord1,
				expr: &seqExpr{
					pos: position{line: 839, col: 5, offset: 24617},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 839, col: 5, offset: 24617},
							val:        "{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 839, col: 9, offset: 24621},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 839, col: 12, offset: 24624},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 839, col: 18, offset: 24630},
								name: "RecordElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 839, col: 30, offset: 24642},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 839, col: 33, offset: 24645},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RecordElems",
			pos:  position{line: 843, col: 1, offset: 24737},
			expr: &choiceExpr{
				pos: position{line: 844, col: 5, offset: 24753},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 844, col: 5, offset: 24753},
						run: (*parser).callonRecordElems2,
						expr: &seqExpr{
							pos: position{line: 844, col: 5, offset: 24753},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 844, col: 5, offset: 24753},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 844, col: 11, offset: 24759},
										name: "RecordElem",
									},
								},
								&labeledExpr{
									pos:   position{line: 844, col: 22, offset: 24770},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 844, col: 27, offset: 24775},
										expr: &ruleRefExpr{
											pos:  position{line: 844, col: 27, offset: 24775},
											name: "RecordElemTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 847, col: 5, offset: 24874},
						run: (*parser).callonRecordElems9,
						expr: &ruleRefExpr{
							pos:  position{line: 847, col: 5, offset: 24874},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "RecordElemTail",
			pos:  position{line: 849, col: 1, offset: 24910},
			expr: &actionExpr{
				pos: position{line: 849, col: 18, offset: 24927},
				run: (*parser).callonRecordElemTail1,
				expr: &seqExpr{
					pos: position{line: 849, col: 18, offset: 24927},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 849, col: 18, offset: 24927},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 849, col: 21, offset: 24930},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 849, col: 25, offset: 24934},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 849, col: 28, offset: 24937},
							label: "elem",
							expr: &ruleRefExpr{
								pos:  position{line: 849, col: 33, offset: 24942},
								name: "RecordElem",
							},
						},
					},
				},
			},
		},
		{
			name: "RecordElem",
			pos:  position{line: 851, col: 1, offset: 24975},
			expr: &choiceExpr{
				pos: position{line: 852, col: 5, offset: 24990},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 852, col: 5, offset: 24990},
						name: "Spread",
					},
					&ruleRefExpr{
						pos:  position{line: 853, col: 5, offset: 25001},
						name: "Field",
					},
					&ruleRefExpr{
						pos:  position{line: 854, col: 5, offset: 25011},
						name: "Identifier",
					},
				},
			},
		},
		{
			name: "Spread",
			pos:  position{line: 856, col: 1, offset: 25023},
			expr: &actionExpr{
				pos: position{line: 857, col: 5, offset: 25034},
				run: (*parser).callonSpread1,
				expr: &seqExpr{
					pos: position{line: 857, col: 5, offset: 25034},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 857, col: 5, offset: 25034},
							val:        "...",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 857, col: 11, offset: 25040},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 857, col: 14, offset: 25043},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 857, col: 19, offset: 25048},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 861, col: 1, offset: 25135},
			expr: &actionExpr{
				pos: position{line: 862, col: 5, offset: 25145},
				run: (*parser).callonField1,
				expr: &seqExpr{
					pos: position{line: 862, col: 5, offset: 25145},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 862, col: 5, offset: 25145},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 862, col: 10, offset: 25150},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 862, col: 20, offset: 25160},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 862, col: 23, offset: 25163},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 862, col: 27, offset: 25167},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 862, col: 30, offset: 25170},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 862, col: 36, offset: 25176},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Array",
			pos:  position{line: 866, col: 1, offset: 25278},
			expr: &actionExpr{
				pos: position{line: 867, col: 5, offset: 25288},
				run: (*parser).callonArray1,
				expr: &seqExpr{
					pos: position{line: 867, col: 5, offset: 25288},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 867, col: 5, offset: 25288},
							val:        "[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 867, col: 9, offset: 25292},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 867, col: 12, offset: 25295},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 867, col: 18, offset: 25301},
								name: "VectorElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 867, col: 30, offset: 25313},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 867, col: 33, offset: 25316},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Set",
			pos:  position{line: 871, col: 1, offset: 25407},
			expr: &actionExpr{
				pos: position{line: 872, col: 5, offset: 25415},
				run: (*parser).callonSet1,
				expr: &seqExpr{
					pos: position{line: 872, col: 5, offset: 25415},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 872, col: 5, offset: 25415},
							val:        "|[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 872, col: 10, offset: 25420},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 872, col: 13, offset: 25423},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 872, col: 19, offset: 25429},
								name: "VectorElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 872, col: 31, offset: 25441},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 872, col: 34, offset: 25444},
							val:        "]|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "VectorElems",
			pos:  position{line: 876, col: 1, offset: 25534},
			expr: &choiceExpr{
				pos: position{line: 877, col: 5, offset: 25550},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 877, col: 5, offset: 25550},
						run: (*parser).callonVectorElems2,
						expr: &seqExpr{
							pos: position{line: 877, col: 5, offset: 25550},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 877, col: 5, offset: 25550},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 877, col: 11, offset: 25556},
										name: "VectorElem",
									},
								},
								&labeledExpr{
									pos:   position{line: 877, col: 22, offset: 25567},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 877, col: 27, offset: 25572},
										expr: &actionExpr{
											pos: position{line: 877, col: 28, offset: 25573},
											run: (*parser).callonVectorElems8,
											expr: &seqExpr{
												pos: position{line: 877, col: 28, offset: 25573},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 877, col: 28, offset: 25573},
														name: "__",
													},
													&litMatcher{
														pos:        position{line: 877, col: 31, offset: 25576},
														val:        ",",
														ignoreCase: false,
													},
													&ruleRefExpr{
														pos:  position{line: 877, col: 35, offset: 25580},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 877, col: 38, offset: 25583},
														label: "e",
														expr: &ruleRefExpr{
															pos:  position{line: 877, col: 40, offset: 25585},
															name: "VectorElem",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 880, col: 5, offset: 25703},
						run: (*parser).callonVectorElems15,
						expr: &ruleRefExpr{
							pos:  position{line: 880, col: 5, offset: 25703},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "VectorElem",
			pos:  position{line: 882, col: 1, offset: 25739},
			expr: &choiceExpr{
				pos: position{line: 883, col: 5, offset: 25754},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 883, col: 5, offset: 25754},
						name: "Spread",
					},
					&actionExpr{
						pos: position{line: 884, col: 5, offset: 25765},
						run: (*parser).callonVectorElem3,
						expr: &labeledExpr{
							pos:   position{line: 884, col: 5, offset: 25765},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 884, col: 7, offset: 25767},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Map",
			pos:  position{line: 886, col: 1, offset: 25846},
			expr: &actionExpr{
				pos: position{line: 887, col: 5, offset: 25854},
				run: (*parser).callonMap1,
				expr: &seqExpr{
					pos: position{line: 887, col: 5, offset: 25854},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 887, col: 5, offset: 25854},
							val:        "|{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 887, col: 10, offset: 25859},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 887, col: 13, offset: 25862},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 887, col: 19, offset: 25868},
								name: "Entries",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 887, col: 27, offset: 25876},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 887, col: 30, offset: 25879},
							val:        "}|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Entries",
			pos:  position{line: 891, col: 1, offset: 25971},
			expr: &choiceExpr{
				pos: position{line: 892, col: 5, offset: 25983},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 892, col: 5, offset: 25983},
						run: (*parser).callonEntries2,
						expr: &seqExpr{
							pos: position{line: 892, col: 5, offset: 25983},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 892, col: 5, offset: 25983},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 892, col: 11, offset: 25989},
										name: "Entry",
									},
								},
								&labeledExpr{
									pos:   position{line: 892, col: 17, offset: 25995},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 892, col: 22, offset: 26000},
										expr: &ruleRefExpr{
											pos:  position{line: 892, col: 22, offset: 26000},
											name: "EntryTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 895, col: 5, offset: 26094},
						run: (*parser).callonEntries9,
						expr: &ruleRefExpr{
							pos:  position{line: 895, col: 5, offset: 26094},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "EntryTail",
			pos:  position{line: 898, col: 1, offset: 26131},
			expr: &actionExpr{
				pos: position{line: 898, col: 13, offset: 26143},
				run: (*parser).callonEntryTail1,
				expr: &seqExpr{
					pos: position{line: 898, col: 13, offset: 26143},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 898, col: 13, offset: 26143},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 898, col: 16, offset: 26146},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 898, col: 20, offset: 26150},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 898, col: 23, offset: 26153},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 898, col: 25, offset: 26155},
								name: "Entry",
							},
						},
					},
				},
			},
		},
		{
			name: "Entry",
			pos:  position{line: 900, col: 1, offset: 26180},
			expr: &actionExpr{
				pos: position{line: 901, col: 5, offset: 26190},
				run: (*parser).callonEntry1,
				expr: &seqExpr{
					pos: position{line: 901, col: 5, offset: 26190},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 901, col: 5, offset: 26190},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 901, col: 9, offset: 26194},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 901, col: 14, offset: 26199},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 901, col: 17, offset: 26202},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 901, col: 21, offset: 26206},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 901, col: 24, offset: 26209},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 901, col: 30, offset: 26215},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOp",
			pos:  position{line: 907, col: 1, offset: 26322},
			expr: &actionExpr{
				pos: position{line: 908, col: 5, offset: 26332},
				run: (*parser).callonSQLOp1,
				expr: &seqExpr{
					pos: position{line: 908, col: 5, offset: 26332},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 908, col: 5, offset: 26332},
							label: "selection",
							expr: &ruleRefExpr{
								pos:  position{line: 908, col: 15, offset: 26342},
								name: "SQLSelect",
							},
						},
						&labeledExpr{
							pos:   position{line: 909, col: 5, offset: 26356},
							label: "from",
							expr: &zeroOrOneExpr{
								pos: position{line: 909, col: 10, offset: 26361},
								expr: &ruleRefExpr{
									pos:  position{line: 909, col: 10, offset: 26361},
									name: "SQLFrom",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 910, col: 5, offset: 26374},
							label: "joins",
							expr: &zeroOrOneExpr{
								pos: position{line: 910, col: 11, offset: 26380},
								expr: &ruleRefExpr{
									pos:  position{line: 910, col: 11, offset: 26380},
									name: "SQLJoins",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 911, col: 5, offset: 26394},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 911, col: 11, offset: 26400},
								expr: &ruleRefExpr{
									pos:  position{line: 911, col: 11, offset: 26400},
									name: "SQLWhere",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 912, col: 5, offset: 26414},
							label: "groupby",
							expr: &zeroOrOneExpr{
								pos: position{line: 912, col: 13, offset: 26422},
								expr: &ruleRefExpr{
									pos:  position{line: 912, col: 13, offset: 26422},
									name: "SQLGroupBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 913, col: 5, offset: 26438},
							label: "having",
							expr: &zeroOrOneExpr{
								pos: position{line: 913, col: 12, offset: 26445},
								expr: &ruleRefExpr{
									pos:  position{line: 913, col: 12, offset: 26445},
									name: "SQLHaving",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 914, col: 5, offset: 26460},
							label: "orderby",
							expr: &zeroOrOneExpr{
								pos: position{line: 914, col: 13, offset: 26468},
								expr: &ruleRefExpr{
									pos:  position{line: 914, col: 13, offset: 26468},
									name: "SQLOrderBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 915, col: 5, offset: 26484},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 915, col: 11, offset: 26490},
								name: "SQLLimit",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLSelect",
			pos:  position{line: 939, col: 1, offset: 26856},
			expr: &choiceExpr{
				pos: position{line: 940, col: 5, offset: 26870},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 940, col: 5, offset: 26870},
						run: (*parser).callonSQLSelect2,
						expr: &seqExpr{
							pos: position{line: 940, col: 5, offset: 26870},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 940, col: 5, offset: 26870},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 940, col: 12, offset: 26877},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 940, col: 14, offset: 26879},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 941, col: 5, offset: 26907},
						run: (*parser).callonSQLSelect7,
						expr: &seqExpr{
							pos: position{line: 941, col: 5, offset: 26907},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 941, col: 5, offset: 26907},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 941, col: 12, offset: 26914},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 941, col: 14, offset: 26916},
									label: "assignments",
									expr: &ruleRefExpr{
										pos:  position{line: 941, col: 26, offset: 26928},
										name: "SQLAssignments",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignment",
			pos:  position{line: 943, col: 1, offset: 26972},
			expr: &actionExpr{
				pos: position{line: 944, col: 5, offset: 26990},
				run: (*parser).callonSQLAssignment1,
				expr: &seqExpr{
					pos: position{line: 944, col: 5, offset: 26990},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 944, col: 5, offset: 26990},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 944, col: 9, offset: 26994},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 944, col: 14, offset: 26999},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 944, col: 18, offset: 27003},
								expr: &seqExpr{
									pos: position{line: 944, col: 19, offset: 27004},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 944, col: 19, offset: 27004},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 944, col: 21, offset: 27006},
											name: "AS",
										},
										&ruleRefExpr{
											pos:  position{line: 944, col: 24, offset: 27009},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 944, col: 26, offset: 27011},
											name: "Lval",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignments",
			pos:  position{line: 952, col: 1, offset: 27202},
			expr: &actionExpr{
				pos: position{line: 953, col: 5, offset: 27221},
				run: (*parser).callonSQLAssignments1,
				expr: &seqExpr{
					pos: position{line: 953, col: 5, offset: 27221},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 953, col: 5, offset: 27221},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 953, col: 11, offset: 27227},
								name: "SQLAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 953, col: 25, offset: 27241},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 953, col: 30, offset: 27246},
								expr: &actionExpr{
									pos: position{line: 953, col: 31, offset: 27247},
									run: (*parser).callonSQLAssignments7,
									expr: &seqExpr{
										pos: position{line: 953, col: 31, offset: 27247},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 953, col: 31, offset: 27247},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 953, col: 34, offset: 27250},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 953, col: 38, offset: 27254},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 953, col: 41, offset: 27257},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 953, col: 46, offset: 27262},
													name: "SQLAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLFrom",
			pos:  position{line: 957, col: 1, offset: 27383},
			expr: &choiceExpr{
				pos: position{line: 958, col: 5, offset: 27395},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 958, col: 5, offset: 27395},
						run: (*parser).callonSQLFrom2,
						expr: &seqExpr{
							pos: position{line: 958, col: 5, offset: 27395},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 958, col: 5, offset: 27395},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 958, col: 7, offset: 27397},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 958, col: 12, offset: 27402},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 958, col: 14, offset: 27404},
									label: "table",
									expr: &ruleRefExpr{
										pos:  position{line: 958, col: 20, offset: 27410},
										name: "SQLTable",
									},
								},
								&labeledExpr{
									pos:   position{line: 958, col: 29, offset: 27419},
									label: "alias",
									expr: &zeroOrOneExpr{
										pos: position{line: 958, col: 35, offset: 27425},
										expr: &ruleRefExpr{
											pos:  position{line: 958, col: 35, offset: 27425},
											name: "SQLAlias",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 961, col: 5, offset: 27520},
						run: (*parser).callonSQLFrom12,
						expr: &seqExpr{
							pos: position{line: 961, col: 5, offset: 27520},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 961, col: 5, offset: 27520},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 961, col: 7, offset: 27522},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 961, col: 12, offset: 27527},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 961, col: 14, offset: 27529},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAlias",
			pos:  position{line: 963, col: 1, offset: 27554},
			expr: &choiceExpr{
				pos: position{line: 964, col: 5, offset: 27567},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 964, col: 5, offset: 27567},
						run: (*parser).callonSQLAlias2,
						expr: &seqExpr{
							pos: position{line: 964, col: 5, offset: 27567},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 964, col: 5, offset: 27567},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 964, col: 7, offset: 27569},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 964, col: 10, offset: 27572},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 964, col: 12, offset: 27574},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 964, col: 15, offset: 27577},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 965, col: 5, offset: 27605},
						run: (*parser).callonSQLAlias9,
						expr: &seqExpr{
							pos: position{line: 965, col: 5, offset: 27605},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 965, col: 5, offset: 27605},
									name: "_",
								},
								&notExpr{
									pos: position{line: 965, col: 7, offset: 27607},
									expr: &seqExpr{
										pos: position{line: 965, col: 9, offset: 27609},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 965, col: 9, offset: 27609},
												name: "SQLTokenSentinels",
											},
											&ruleRefExpr{
												pos:  position{line: 965, col: 27, offset: 27627},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 965, col: 30, offset: 27630},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 965, col: 33, offset: 27633},
										name: "Lval",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLTable",
			pos:  position{line: 967, col: 1, offset: 27658},
			expr: &ruleRefExpr{
				pos:  position{line: 968, col: 5, offset: 27671},
				name: "Expr",
			},
		},
		{
			name: "SQLJoins",
			pos:  position{line: 970, col: 1, offset: 27677},
			expr: &actionExpr{
				pos: position{line: 971, col: 5, offset: 27690},
				run: (*parser).callonSQLJoins1,
				expr: &seqExpr{
					pos: position{line: 971, col: 5, offset: 27690},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 971, col: 5, offset: 27690},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 971, col: 11, offset: 27696},
								name: "SQLJoin",
							},
						},
						&labeledExpr{
							pos:   position{line: 971, col: 19, offset: 27704},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 971, col: 24, offset: 27709},
								expr: &actionExpr{
									pos: position{line: 971, col: 25, offset: 27710},
									run: (*parser).callonSQLJoins7,
									expr: &labeledExpr{
										pos:   position{line: 971, col: 25, offset: 27710},
										label: "join",
										expr: &ruleRefExpr{
											pos:  position{line: 971, col: 30, offset: 27715},
											name: "SQLJoin",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoin",
			pos:  position{line: 975, col: 1, offset: 27830},
			expr: &actionExpr{
				pos: position{line: 976, col: 5, offset: 27842},
				run: (*parser).callonSQLJoin1,
				expr: &seqExpr{
					pos: position{line: 976, col: 5, offset: 27842},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 976, col: 5, offset: 27842},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 976, col: 11, offset: 27848},
								name: "SQLJoinStyle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 976, col: 24, offset: 27861},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 976, col: 26, offset: 27863},
							name: "JOIN",
						},
						&ruleRefExpr{
							pos:  position{line: 976, col: 31, offset: 27868},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 976, col: 33, offset: 27870},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 976, col: 39, offset: 27876},
								name: "SQLTable",
							},
						},
						&labeledExpr{
							pos:   position{line: 976, col: 48, offset: 27885},
							label: "alias",
							expr: &zeroOrOneExpr{
								pos: position{line: 976, col: 54, offset: 27891},
								expr: &ruleRefExpr{
									pos:  position{line: 976, col: 54, offset: 27891},
									name: "SQLAlias",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 976, col: 64, offset: 27901},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 976, col: 66, offset: 27903},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 976, col: 69, offset: 27906},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 976, col: 71, offset: 27908},
							label: "leftKey",
							expr: &ruleRefExpr{
								pos:  position{line: 976, col: 79, offset: 27916},
								name: "JoinKey",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 976, col: 87, offset: 27924},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 976, col: 90, offset: 27927},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 976, col: 94, offset: 27931},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 976, col: 97, offset: 27934},
							label: "rightKey",
							expr: &ruleRefExpr{
								pos:  position{line: 976, col: 106, offset: 27943},
								name: "JoinKey",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoinStyle",
			pos:  position{line: 991, col: 1, offset: 28174},
			expr: &choiceExpr{
				pos: position{line: 992, col: 5, offset: 28191},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 992, col: 5, offset: 28191},
						run: (*parser).callonSQLJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 992, col: 5, offset: 28191},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 992, col: 5, offset: 28191},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 992, col: 7, offset: 28193},
									label: "style",
									expr: &choiceExpr{
										pos: position{line: 992, col: 14, offset: 28200},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 992, col: 14, offset: 28200},
												name: "ANTI",
											},
											&ruleRefExpr{
												pos:  position{line: 992, col: 21, offset: 28207},
												name: "INNER",
											},
											&ruleRefExpr{
												pos:  position{line: 992, col: 29, offset: 28215},
												name: "LEFT",
											},
											&ruleRefExpr{
												pos:  position{line: 992, col: 36, offset: 28222},
												name: "RIGHT",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 993, col: 5, offset: 28255},
						run: (*parser).callonSQLJoinStyle11,
						expr: &litMatcher{
							pos:        position{line: 993, col: 5, offset: 28255},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLWhere",
			pos:  position{line: 995, col: 1, offset: 28283},
			expr: &actionExpr{
				pos: position{line: 996, col: 5, offset: 28296},
				run: (*parser).callonSQLWhere1,
				expr: &seqExpr{
					pos: position{line: 996, col: 5, offset: 28296},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 996, col: 5, offset: 28296},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 996, col: 7, offset: 28298},
							name: "WHERE",
						},
						&ruleRefExpr{
							pos:  position{line: 996, col: 13, offset: 28304},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 996, col: 15, offset: 28306},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 996, col: 20, offset: 28311},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLGroupBy",
			pos:  position{line: 998, col: 1, offset: 28347},
			expr: &actionExpr{
				pos: position{line: 999, col: 5, offset: 28362},
				run: (*parser).callonSQLGroupBy1,
				expr: &seqExpr{
					pos: position{line: 999, col: 5, offset: 28362},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 999, col: 5, offset: 28362},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 999, col: 7, offset: 28364},
							name: "GROUP",
						},
						&ruleRefExpr{
							pos:  position{line: 999, col: 13, offset: 28370},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 999, col: 15, offset: 28372},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 999, col: 18, offset: 28375},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 999, col: 20, offset: 28377},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 999, col: 28, offset: 28385},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLHaving",
			pos:  position{line: 1001, col: 1, offset: 28421},
			expr: &actionExpr{
				pos: position{line: 1002, col: 5, offset: 28435},
				run: (*parser).callonSQLHaving1,
				expr: &seqExpr{
					pos: position{line: 1002, col: 5, offset: 28435},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1002, col: 5, offset: 28435},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 1002, col: 7, offset: 28437},
							name: "HAVING",
						},
						&ruleRefExpr{
							pos:  position{line: 1002, col: 14, offset: 28444},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 1002, col: 16, offset: 28446},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 1002, col: 21, offset: 28451},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrderBy",
			pos:  position{line: 1004, col: 1, offset: 28487},
			expr: &actionExpr{
				pos: position{line: 1005, col: 5, offset: 28502},
				run: (*parser).callonSQLOrderBy1,
				expr: &seqExpr{
					pos: position{line: 1005, col: 5, offset: 28502},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1005, col: 5, offset: 28502},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 1005, col: 7, offset: 28504},
							name: "ORDER",
						},
						&ruleRefExpr{
							pos:  position{line: 1005, col: 13, offset: 28510},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 1005, col: 15, offset: 28512},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 1005, col: 18, offset: 28515},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 1005, col: 20, offset: 28517},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 1005, col: 25, offset: 28522},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 1005, col: 31, offset: 28528},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 1005, col: 37, offset: 28534},
								name: "SQLOrder",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrder",
			pos:  position{line: 1009, col: 1, offset: 28645},
			expr: &choiceExpr{
				pos: position{line: 1010, col: 5, offset: 28658},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1010, col: 5, offset: 28658},
						run: (*parser).callonSQLOrder2,
						expr: &seqExpr{
							pos: position{line: 1010, col: 5, offset: 28658},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1010, col: 5, offset: 28658},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 1010, col: 7, offset: 28660},
									label: "dir",
									expr: &choiceExpr{
										pos: position{line: 1010, col: 12, offset: 28665},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1010, col: 12, offset: 28665},
												name: "ASC",
											},
											&ruleRefExpr{
												pos:  position{line: 1010, col: 18, offset: 28671},
												name: "DESC",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1011, col: 5, offset: 28701},
						run: (*parser).callonSQLOrder9,
						expr: &litMatcher{
							pos:        position{line: 1011, col: 5, offset: 28701},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLLimit",
			pos:  position{line: 1013, col: 1, offset: 28727},
			expr: &choiceExpr{
				pos: position{line: 1014, col: 5, offset: 28740},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1014, col: 5, offset: 28740},
						run: (*parser).callonSQLLimit2,
						expr: &seqExpr{
							pos: position{line: 1014, col: 5, offset: 28740},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1014, col: 5, offset: 28740},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 1014, col: 7, offset: 28742},
									name: "LIMIT",
								},
								&ruleRefExpr{
									pos:  position{line: 1014, col: 13, offset: 28748},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 1014, col: 15, offset: 28750},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 1014, col: 21, offset: 28756},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1015, col: 5, offset: 28787},
						run: (*parser).callonSQLLimit9,
						expr: &litMatcher{
							pos:        position{line: 1015, col: 5, offset: 28787},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SELECT",
			pos:  position{line: 1017, col: 1, offset: 28809},
			expr: &actionExpr{
				pos: position{line: 1017, col: 10, offset: 28818},
				run: (*parser).callonSELECT1,
				expr: &litMatcher{
					pos:        position{line: 1017, col: 10, offset: 28818},
					val:        "select",
					ignoreCase: true,
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 1018, col: 1, offset: 28853},
			expr: &actionExpr{
				pos: position{line: 1018, col: 6, offset: 28858},
				run: (*parser).callonAS1,
				expr: &litMatcher{
					pos:        position{line: 1018, col: 6, offset: 28858},
					val:        "as",
					ignoreCase: true,
				},
			},
		},
		{
			name: "FROM",
			pos:  position{line: 1019, col: 1, offset: 28885},
			expr: &actionExpr{
				pos: position{line: 1019, col: 8, offset: 28892},
				run: (*parser).callonFROM1,
				expr: &litMatcher{
					pos:        position{line: 1019, col: 8, offset: 28892},
					val:        "from",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JOIN",
			pos:  position{line: 1020, col: 1, offset: 28923},
			expr: &actionExpr{
				pos: position{line: 1020, col: 8, offset: 28930},
				run: (*parser).callonJOIN1,
				expr: &litMatcher{
					pos:        position{line: 1020, col: 8, offset: 28930},
					val:        "join",
					ignoreCase: true,
				},
			},
		},
		{
			name: "WHERE",
			pos:  position{line: 1021, col: 1, offset: 28961},
			expr: &actionExpr{
				pos: position{line: 1021, col: 9, offset: 28969},
				run: (*parser).callonWHERE1,
				expr: &litMatcher{
					pos:        position{line: 1021, col: 9, offset: 28969},
					val:        "where",
					ignoreCase: true,
				},
			},
		},
		{
			name: "GROUP",
			pos:  position{line: 1022, col: 1, offset: 29002},
			expr: &actionExpr{
				pos: position{line: 1022, col: 9, offset: 29010},
				run: (*parser).callonGROUP1,
				expr: &litMatcher{
					pos:        position{line: 1022, col: 9, offset: 29010},
					val:        "group",
					ignoreCase: true,
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 1023, col: 1, offset: 29043},
			expr: &actionExpr{
				pos: position{line: 1023, col: 6, offset: 29048},
				run: (*parser).callonBY1,
				expr: &litMatcher{
					pos:        position{line: 1023, col: 6, offset: 29048},
					val:        "by",
					ignoreCase: true,
				},
			},
		},
		{
			name: "HAVING",
			pos:  position{line: 1024, col: 1, offset: 29075},
			expr: &actionExpr{
				pos: position{line: 1024, col: 10, offset: 29084},
				run: (*parser).callonHAVING1,
				expr: &litMatcher{
					pos:        position{line: 1024, col: 10, offset: 29084},
					val:        "having",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ORDER",
			pos:  position{line: 1025, col: 1, offset: 29119},
			expr: &actionExpr{
				pos: position{line: 1025, col: 9, offset: 29127},
				run: (*parser).callonORDER1,
				expr: &litMatcher{
					pos:        position{line: 1025, col: 9, offset: 29127},
					val:        "order",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ON",
			pos:  position{line: 1026, col: 1, offset: 29160},
			expr: &actionExpr{
				pos: position{line: 1026, col: 6, offset: 29165},
				run: (*parser).callonON1,
				expr: &litMatcher{
					pos:        position{line: 1026, col: 6, offset: 29165},
					val:        "on",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LIMIT",
			pos:  position{line: 1027, col: 1, offset: 29192},
			expr: &actionExpr{
				pos: position{line: 1027, col: 9, offset: 29200},
				run: (*parser).callonLIMIT1,
				expr: &litMatcher{
					pos:        position{line: 1027, col: 9, offset: 29200},
					val:        "limit",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ASC",
			pos:  position{line: 1028, col: 1, offset: 29233},
			expr: &actionExpr{
				pos: position{line: 1028, col: 7, offset: 29239},
				run: (*parser).callonASC1,
				expr: &litMatcher{
					pos:        position{line: 1028, col: 7, offset: 29239},
					val:        "asc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "DESC",
			pos:  position{line: 1029, col: 1, offset: 29268},
			expr: &actionExpr{
				pos: position{line: 1029, col: 8, offset: 29275},
				run: (*parser).callonDESC1,
				expr: &litMatcher{
					pos:        position{line: 1029, col: 8, offset: 29275},
					val:        "desc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ANTI",
			pos:  position{line: 1030, col: 1, offset: 29306},
			expr: &actionExpr{
				pos: position{line: 1030, col: 8, offset: 29313},
				run: (*parser).callonANTI1,
				expr: &litMatcher{
					pos:        position{line: 1030, col: 8, offset: 29313},
					val:        "anti",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LEFT",
			pos:  position{line: 1031, col: 1, offset: 29344},
			expr: &actionExpr{
				pos: position{line: 1031, col: 8, offset: 29351},
				run: (*parser).callonLEFT1,
				expr: &litMatcher{
					pos:        position{line: 1031, col: 8, offset: 29351},
					val:        "left",
					ignoreCase: true,
				},
			},
		},
		{
			name: "RIGHT",
			pos:  position{line: 1032, col: 1, offset: 29382},
			expr: &actionExpr{
				pos: position{line: 1032, col: 9, offset: 29390},
				run: (*parser).callonRIGHT1,
				expr: &litMatcher{
					pos:        position{line: 1032, col: 9, offset: 29390},
					val:        "right",
					ignoreCase: true,
				},
			},
		},
		{
			name: "INNER",
			pos:  position{line: 1033, col: 1, offset: 29423},
			expr: &actionExpr{
				pos: position{line: 1033, col: 9, offset: 29431},
				run: (*parser).callonINNER1,
				expr: &litMatcher{
					pos:        position{line: 1033, col: 9, offset: 29431},
					val:        "inner",
					ignoreCase: true,
				},
			},
		},
		{
			name: "SQLTokenSentinels",
			pos:  position{line: 1035, col: 1, offset: 29465},
			expr: &choiceExpr{
				pos: position{line: 1036, col: 5, offset: 29487},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1036, col: 5, offset: 29487},
						name: "SELECT",
					},
					&ruleRefExpr{
						pos:  position{line: 1036, col: 14, offset: 29496},
						name: "AS",
					},
					&ruleRefExpr{
						pos:  position{line: 1036, col: 19, offset: 29501},
						name: "FROM",
					},
					&ruleRefExpr{
						pos:  position{line: 1036, col: 26, offset: 29508},
						name: "JOIN",
					},
					&ruleRefExpr{
						pos:  position{line: 1036, col: 33, offset: 29515},
						name: "WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 1036, col: 41, offset: 29523},
						name: "GROUP",
					},
					&ruleRefExpr{
						pos:  position{line: 1036, col: 49, offset: 29531},
						name: "HAVING",
					},
					&ruleRefExpr{
						pos:  position{line: 1036, col: 58, offset: 29540},
						name: "ORDER",
					},
					&ruleRefExpr{
						pos:  position{line: 1036, col: 66, offset: 29548},
						name: "LIMIT",
					},
					&ruleRefExpr{
						pos:  position{line: 1036, col: 74, offset: 29556},
						name: "ON",
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 1040, col: 1, offset: 29582},
			expr: &choiceExpr{
				pos: position{line: 1041, col: 5, offset: 29594},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1041, col: 5, offset: 29594},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1042, col: 5, offset: 29610},
						name: "TemplateLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1043, col: 5, offset: 29630},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1044, col: 5, offset: 29648},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1045, col: 5, offset: 29667},
						name: "BytesLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1046, col: 5, offset: 29684},
						name: "Duration",
					},
					&ruleRefExpr{
						pos:  position{line: 1047, col: 5, offset: 29697},
						name: "Time",
					},
					&ruleRefExpr{
						pos:  position{line: 1048, col: 5, offset: 29706},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1049, col: 5, offset: 29723},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1050, col: 5, offset: 29742},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1051, col: 5, offset: 29761},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 1053, col: 1, offset: 29774},
			expr: &choiceExpr{
				pos: position{line: 1054, col: 5, offset: 29792},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1054, col: 5, offset: 29792},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 1054, col: 5, offset: 29792},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1054, col: 5, offset: 29792},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1054, col: 7, offset: 29794},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 1054, col: 14, offset: 29801},
									expr: &ruleRefExpr{
										pos:  position{line: 1054, col: 15, offset: 29802},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1057, col: 5, offset: 29917},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 1057, col: 5, offset: 29917},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1057, col: 7, offset: 29919},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 1061, col: 1, offset: 30023},
			expr: &choiceExpr{
				pos: position{line: 1062, col: 5, offset: 30042},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1062, col: 5, offset: 30042},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 1062, col: 5, offset: 30042},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1062, col: 5, offset: 30042},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1062, col: 7, offset: 30044},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 1062, col: 11, offset: 30048},
									expr: &ruleRefExpr{
										pos:  position{line: 1062, col: 12, offset: 30049},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1065, col: 5, offset: 30163},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 1065, col: 5, offset: 30163},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1065, col: 7, offset: 30165},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 1069, col: 1, offset: 30264},
			expr: &actionExpr{
				pos: position{line: 1070, col: 5, offset: 30281},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1070, col: 5, offset: 30281},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1070, col: 7, offset: 30283},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 1074, col: 1, offset: 30396},
			expr: &actionExpr{
				pos: position{line: 1075, col: 5, offset: 30415},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1075, col: 5, offset: 30415},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1075, col: 7, offset: 30417},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 1079, col: 1, offset: 30526},
			expr: &choiceExpr{
				pos: position{line: 1080, col: 5, offset: 30545},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1080, col: 5, offset: 30545},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 1080, col: 5, offset: 30545},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1081, col: 5, offset: 30649},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 1081, col: 5, offset: 30649},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 1083, col: 1, offset: 30751},
			expr: &actionExpr{
				pos: position{line: 1084, col: 5, offset: 30767},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 1084, col: 5, offset: 30767},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "BytesLiteral",
			pos:  position{line: 1086, col: 1, offset: 30863},
			expr: &actionExpr{
				pos: position{line: 1087, col: 5, offset: 30880},
				run: (*parser).callonBytesLiteral1,
				expr: &seqExpr{
					pos: position{line: 1087, col: 5, offset: 30880},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1087, col: 5, offset: 30880},
							val:        "0x",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1087, col: 10, offset: 30885},
							expr: &ruleRefExpr{
								pos:  position{line: 1087, col: 10, offset: 30885},
								name: "HexDigit",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeLiteral",
			pos:  position{line: 1091, col: 1, offset: 31000},
			expr: &actionExpr{
				pos: position{line: 1092, col: 5, offset: 31016},
				run: (*parser).callonTypeLiteral1,
				expr: &seqExpr{
					pos: position{line: 1092, col: 5, offset: 31016},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1092, col: 5, offset: 31016},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1092, col: 9, offset: 31020},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1092, col: 13, offset: 31024},
								name: "Type",
							},
						},
						&litMatcher{
							pos:        position{line: 1092, col: 18, offset: 31029},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "CastType",
			pos:  position{line: 1096, col: 1, offset: 31118},
			expr: &choiceExpr{
				pos: position{line: 1097, col: 5, offset: 31131},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1097, col: 5, offset: 31131},
						name: "TypeLiteral",
					},
					&actionExpr{
						pos: position{line: 1098, col: 5, offset: 31147},
						run: (*parser).callonCastType3,
						expr: &labeledExpr{
							pos:   position{line: 1098, col: 5, offset: 31147},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1098, col: 9, offset: 31151},
								name: "PrimitiveType",
							},
						},
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 1102, col: 1, offset: 31250},
			expr: &choiceExpr{
				pos: position{line: 1103, col: 5, offset: 31259},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1103, col: 5, offset: 31259},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1104, col: 5, offset: 31275},
						name: "AmbiguousType",
					},
					&ruleRefExpr{
						pos:  position{line: 1105, col: 5, offset: 31293},
						name: "ComplexType",
					},
				},
			},
		},
		{
			name: "AmbiguousType",
			pos:  position{line: 1107, col: 1, offset: 31306},
			expr: &choiceExpr{
				pos: position{line: 1108, col: 5, offset: 31324},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1108, col: 5, offset: 31324},
						run: (*parser).callonAmbiguousType2,
						expr: &seqExpr{
							pos: position{line: 1108, col: 5, offset: 31324},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1108, col: 5, offset: 31324},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1108, col: 10, offset: 31329},
										name: "PrimitiveType",
									},
								},
								&notExpr{
									pos: position{line: 1108, col: 24, offset: 31343},
									expr: &ruleRefExpr{
										pos:  position{line: 1108, col: 25, offset: 31344},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1109, col: 5, offset: 31384},
						run: (*parser).callonAmbiguousType8,
						expr: &seqExpr{
							pos: position{line: 1109, col: 5, offset: 31384},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1109, col: 5, offset: 31384},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1109, col: 10, offset: 31389},
										name: "IdentifierName",
									},
								},
								&labeledExpr{
									pos:   position{line: 1109, col: 25, offset: 31404},
									label: "opt",
									expr: &zeroOrOneExpr{
										pos: position{line: 1109, col: 29, offset: 31408},
										expr: &seqExpr{
											pos: position{line: 1109, col: 30, offset: 31409},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1109, col: 30, offset: 31409},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 1109, col: 33, offset: 31412},
													val:        "=",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 1109, col: 37, offset: 31416},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 1109, col: 40, offset: 31419},
													name: "Type",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1115, col: 5, offset: 31651},
						run: (*parser).callonAmbiguousType19,
						expr: &labeledExpr{
							pos:   position{line: 1115, col: 5, offset: 31651},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1115, col: 10, offset: 31656},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1118, col: 5, offset: 31756},
						run: (*parser).callonAmbiguousType22,
						expr: &seqExpr{
							pos: position{line: 1118, col: 5, offset: 31756},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1118, col: 5, offset: 31756},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1118, col: 9, offset: 31760},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1118, col: 12, offset: 31763},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 1118, col: 14, offset: 31765},
										name: "TypeUnion",
									},
								},
								&litMatcher{
									pos:        position{line: 1118, col: 24, offset: 31775},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeUnion",
			pos:  position{line: 1120, col: 1, offset: 31798},
			expr: &actionExpr{
				pos: position{line: 1121, col: 5, offset: 31812},
				run: (*parser).callonTypeUnion1,
				expr: &labeledExpr{
					pos:   position{line: 1121, col: 5, offset: 31812},
					label: "types",
					expr: &ruleRefExpr{
						pos:  position{line: 1121, col: 11, offset: 31818},
						name: "TypeList",
					},
				},
			},
		},
		{
			name: "TypeList",
			pos:  position{line: 1125, col: 1, offset: 31914},
			expr: &actionExpr{
				pos: position{line: 1126, col: 5, offset: 31927},
				run: (*parser).callonTypeList1,
				expr: &seqExpr{
					pos: position{line: 1126, col: 5, offset: 31927},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1126, col: 5, offset: 31927},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1126, col: 11, offset: 31933},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 1126, col: 16, offset: 31938},
							label: "rest",
							expr: &oneOrMoreExpr{
								pos: position{line: 1126, col: 21, offset: 31943},
								expr: &ruleRefExpr{
									pos:  position{line: 1126, col: 21, offset: 31943},
									name: "TypeListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeListTail",
			pos:  position{line: 1130, col: 1, offset: 32037},
			expr: &actionExpr{
				pos: position{line: 1130, col: 16, offset: 32052},
				run: (*parser).callonTypeListTail1,
				expr: &seqExpr{
					pos: position{line: 1130, col: 16, offset: 32052},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1130, col: 16, offset: 32052},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1130, col: 19, offset: 32055},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1130, col: 23, offset: 32059},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1130, col: 26, offset: 32062},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1130, col: 30, offset: 32066},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexType",
			pos:  position{line: 1132, col: 1, offset: 32092},
			expr: &choiceExpr{
				pos: position{line: 1133, col: 5, offset: 32108},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1133, col: 5, offset: 32108},
						run: (*parser).callonComplexType2,
						expr: &seqExpr{
							pos: position{line: 1133, col: 5, offset: 32108},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1133, col: 5, offset: 32108},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1133, col: 9, offset: 32112},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1133, col: 12, offset: 32115},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 1133, col: 19, offset: 32122},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1133, col: 33, offset: 32136},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1133, col: 36, offset: 32139},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1136, col: 5, offset: 32236},
						run: (*parser).callonComplexType10,
						expr: &seqExpr{
							pos: position{line: 1136, col: 5, offset: 32236},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1136, col: 5, offset: 32236},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1136, col: 9, offset: 32240},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1136, col: 12, offset: 32243},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1136, col: 16, offset: 32247},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1136, col: 21, offset: 32252},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1136, col: 24, offset: 32255},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1139, col: 5, offset: 32346},
						run: (*parser).callonComplexType18,
						expr: &seqExpr{
							pos: position{line: 1139, col: 5, offset: 32346},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1139, col: 5, offset: 32346},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1139, col: 10, offset: 32351},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1139, col: 13, offset: 32354},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1139, col: 17, offset: 32358},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1139, col: 22, offset: 32363},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1139, col: 25, offset: 32366},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1142, col: 5, offset: 32456},
						run: (*parser).callonComplexType26,
						expr: &seqExpr{
							pos: position{line: 1142, col: 5, offset: 32456},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1142, col: 5, offset: 32456},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1142, col: 10, offset: 32461},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1142, col: 13, offset: 32464},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 1142, col: 21, offset: 32472},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1142, col: 26, offset: 32477},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1142, col: 29, offset: 32480},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1142, col: 33, offset: 32484},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1142, col: 36, offset: 32487},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 1142, col: 44, offset: 32495},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1142, col: 49, offset: 32500},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1142, col: 52, offset: 32503},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateLiteral",
			pos:  position{line: 1146, col: 1, offset: 32619},
			expr: &actionExpr{
				pos: position{line: 1147, col: 5, offset: 32639},
				run: (*parser).callonTemplateLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1147, col: 5, offset: 32639},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1147, col: 7, offset: 32641},
						name: "TemplateLiteralParts",
					},
				},
			},
		},
		{
			name: "TemplateLiteralParts",
			pos:  position{line: 1154, col: 1, offset: 32857},
			expr: &choiceExpr{
				pos: position{line: 1155, col: 5, offset: 32882},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1155, col: 5, offset: 32882},
						run: (*parser).callonTemplateLiteralParts2,
						expr: &seqExpr{
							pos: position{line: 1155, col: 5, offset: 32882},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1155, col: 5, offset: 32882},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1155, col: 9, offset: 32886},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1155, col: 11, offset: 32888},
										expr: &ruleRefExpr{
											pos:  position{line: 1155, col: 11, offset: 32888},
											name: "TemplateDoubleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1155, col: 37, offset: 32914},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1156, col: 5, offset: 32940},
						run: (*parser).callonTemplateLiteralParts9,
						expr: &seqExpr{
							pos: position{line: 1156, col: 5, offset: 32940},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1156, col: 5, offset: 32940},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1156, col: 9, offset: 32944},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1156, col: 11, offset: 32946},
										expr: &ruleRefExpr{
											pos:  position{line: 1156, col: 11, offset: 32946},
											name: "TemplateSingleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1156, col: 37, offset: 32972},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedPart",
			pos:  position{line: 1158, col: 1, offset: 32995},
			expr: &choiceExpr{
				pos: position{line: 1159, col: 5, offset: 33024},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1159, col: 5, offset: 33024},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 1160, col: 5, offset: 33041},
						run: (*parser).callonTemplateDoubleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 1160, col: 5, offset: 33041},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1160, col: 7, offset: 33043},
								expr: &ruleRefExpr{
									pos:  position{line: 1160, col: 7, offset: 33043},
									name: "TemplateDoubleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedChar",
			pos:  position{line: 1164, col: 1, offset: 33180},
			expr: &choiceExpr{
				pos: position{line: 1165, col: 5, offset: 33209},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1165, col: 5, offset: 33209},
						run: (*parser).callonTemplateDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1165, col: 5, offset: 33209},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1165, col: 5, offset: 33209},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1165, col: 10, offset: 33214},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1165, col: 12, offset: 33216},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1166, col: 5, offset: 33243},
						run: (*parser).callonTemplateDoubleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1166, col: 5, offset: 33243},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1166, col: 5, offset: 33243},
									expr: &litMatcher{
										pos:        position{line: 1166, col: 7, offset: 33245},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1166, col: 13, offset: 33251},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1166, col: 15, offset: 33253},
										name: "DoubleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedPart",
			pos:  position{line: 1168, col: 1, offset: 33289},
			expr: &choiceExpr{
				pos: position{line: 1169, col: 5, offset: 33318},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1169, col: 5, offset: 33318},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 1170, col: 5, offset: 33335},
						run: (*parser).callonTemplateSingleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 1170, col: 5, offset: 33335},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1170, col: 7, offset: 33337},
								expr: &ruleRefExpr{
									pos:  position{line: 1170, col: 7, offset: 33337},
									name: "TemplateSingleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedChar",
			pos:  position{line: 1174, col: 1, offset: 33474},
			expr: &choiceExpr{
				pos: position{line: 1175, col: 5, offset: 33503},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1175, col: 5, offset: 33503},
						run: (*parser).callonTemplateSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1175, col: 5, offset: 33503},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1175, col: 5, offset: 33503},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1175, col: 10, offset: 33508},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1175, col: 12, offset: 33510},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1176, col: 5, offset: 33537},
						run: (*parser).callonTemplateSingleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1176, col: 5, offset: 33537},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1176, col: 5, offset: 33537},
									expr: &litMatcher{
										pos:        position{line: 1176, col: 7, offset: 33539},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1176, col: 13, offset: 33545},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1176, col: 15, offset: 33547},
										name: "SingleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateExpr",
			pos:  position{line: 1178, col: 1, offset: 33583},
			expr: &actionExpr{
				pos: position{line: 1179, col: 5, offset: 33600},
				run: (*parser).callonTemplateExpr1,
				expr: &seqExpr{
					pos: position{line: 1179, col: 5, offset: 33600},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1179, col: 5, offset: 33600},
							val:        "${",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1179, col: 10, offset: 33605},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1179, col: 13, offset: 33608},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 1179, col: 15, offset: 33610},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1179, col: 20, offset: 33615},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1179, col: 23, offset: 33618},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 1194, col: 1, offset: 33914},
			expr: &actionExpr{
				pos: position{line: 1195, col: 5, offset: 33932},
				run: (*parser).callonPrimitiveType1,
				expr: &choiceExpr{
					pos: position{line: 1195, col: 9, offset: 33936},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 1195, col: 9, offset: 33936},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1195, col: 19, offset: 33946},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1195, col: 30, offset: 33957},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1195, col: 41, offset: 33968},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1196, col: 9, offset: 33985},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1196, col: 18, offset: 33994},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1196, col: 28, offset: 34004},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1196, col: 38, offset: 34014},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1197, col: 9, offset: 34030},
							val:        "float16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1197, col: 21, offset: 34042},
							val:        "float32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1197, col: 33, offset: 34054},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1198, col: 9, offset: 34072},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1198, col: 18, offset: 34081},
							val:        "string",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1199, col: 9, offset: 34098},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1199, col: 22, offset: 34111},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1200, col: 9, offset: 34126},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1201, col: 9, offset: 34142},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1201, col: 16, offset: 34149},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1202, col: 9, offset: 34163},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1202, col: 18, offset: 34172},
							val:        "null",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldList",
			pos:  position{line: 1206, col: 1, offset: 34287},
			expr: &choiceExpr{
				pos: position{line: 1207, col: 5, offset: 34305},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1207, col: 5, offset: 34305},
						run: (*parser).callonTypeFieldList2,
						expr: &seqExpr{
							pos: position{line: 1207, col: 5, offset: 34305},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1207, col: 5, offset: 34305},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 1207, col: 11, offset: 34311},
										name: "TypeField",
									},
								},
								&labeledExpr{
									pos:   position{line: 1207, col: 21, offset: 34321},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1207, col: 26, offset: 34326},
										expr: &ruleRefExpr{
											pos:  position{line: 1207, col: 26, offset: 34326},
											name: "TypeFieldListTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1210, col: 5, offset: 34428},
						run: (*parser).callonTypeFieldList9,
						expr: &litMatcher{
							pos:        position{line: 1210, col: 5, offset: 34428},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTail",
			pos:  position{line: 1212, col: 1, offset: 34452},
			expr: &actionExpr{
				pos: position{line: 1212, col: 21, offset: 34472},
				run: (*parser).callonTypeFieldListTail1,
				expr: &seqExpr{
					pos: position{line: 1212, col: 21, offset: 34472},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1212, col: 21, offset: 34472},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1212, col: 24, offset: 34475},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1212, col: 28, offset: 34479},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1212, col: 31, offset: 34482},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1212, col: 35, offset: 34486},
								name: "TypeField",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeField",
			pos:  position{line: 1214, col: 1, offset: 34517},
			expr: &actionExpr{
				pos: position{line: 1215, col: 5, offset: 34531},
				run: (*parser).callonTypeField1,
				expr: &seqExpr{
					pos: position{line: 1215, col: 5, offset: 34531},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1215, col: 5, offset: 34531},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1215, col: 10, offset: 34536},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1215, col: 20, offset: 34546},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1215, col: 23, offset: 34549},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1215, col: 27, offset: 34553},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1215, col: 30, offset: 34556},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1215, col: 34, offset: 34560},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 1219, col: 1, offset: 34642},
			expr: &choiceExpr{
				pos: position{line: 1220, col: 5, offset: 34656},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1220, col: 5, offset: 34656},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 1221, col: 5, offset: 34675},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 1223, col: 1, offset: 34689},
			expr: &actionExpr{
				pos: position{line: 1223, col: 12, offset: 34700},
				run: (*parser).callonAndToken1,
				expr: &seqExpr{
					pos: position{line: 1223, col: 12, offset: 34700},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1223, col: 13, offset: 34701},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1223, col: 13, offset: 34701},
									val:        "and",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1223, col: 21, offset: 34709},
									val:        "AND",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1223, col: 28, offset: 34716},
							expr: &ruleRefExpr{
								pos:  position{line: 1223, col: 29, offset: 34717},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 1224, col: 1, offset: 34754},
			expr: &actionExpr{
				pos: position{line: 1224, col: 11, offset: 34764},
				run: (*parser).callonOrToken1,
				expr: &seqExpr{
					pos: position{line: 1224, col: 11, offset: 34764},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1224, col: 12, offset: 34765},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1224, col: 12, offset: 34765},
									val:        "or",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1224, col: 19, offset: 34772},
									val:        "OR",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1224, col: 25, offset: 34778},
							expr: &ruleRefExpr{
								pos:  position{line: 1224, col: 26, offset: 34779},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 1225, col: 1, offset: 34815},
			expr: &actionExpr{
				pos: position{line: 1225, col: 11, offset: 34825},
				run: (*parser).callonInToken1,
				expr: &seqExpr{
					pos: position{line: 1225, col: 11, offset: 34825},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1225, col: 11, offset: 34825},
							val:        "in",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1225, col: 16, offset: 34830},
							expr: &ruleRefExpr{
								pos:  position{line: 1225, col: 17, offset: 34831},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 1226, col: 1, offset: 34867},
			expr: &actionExpr{
				pos: position{line: 1226, col: 12, offset: 34878},
				run: (*parser).callonNotToken1,
				expr: &seqExpr{
					pos: position{line: 1226, col: 12, offset: 34878},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1226, col: 13, offset: 34879},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1226, col: 13, offset: 34879},
									val:        "not",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1226, col: 21, offset: 34887},
									val:        "NOT",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1226, col: 28, offset: 34894},
							expr: &ruleRefExpr{
								pos:  position{line: 1226, col: 29, offset: 34895},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 1227, col: 1, offset: 34932},
			expr: &actionExpr{
				pos: position{line: 1227, col: 11, offset: 34942},
				run: (*parser).callonByToken1,
				expr: &seqExpr{
					pos: position{line: 1227, col: 11, offset: 34942},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1227, col: 11, offset: 34942},
							val:        "by",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1227, col: 16, offset: 34947},
							expr: &ruleRefExpr{
								pos:  position{line: 1227, col: 17, offset: 34948},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 1229, col: 1, offset: 34985},
			expr: &charClassMatcher{
				pos:        position{line: 1229, col: 19, offset: 35003},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 1231, col: 1, offset: 35015},
			expr: &choiceExpr{
				pos: position{line: 1231, col: 18, offset: 35032},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1231, col: 18, offset: 35032},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 1231, col: 36, offset: 35050},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 1233, col: 1, offset: 35057},
			expr: &actionExpr{
				pos: position{line: 1234, col: 5, offset: 35072},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 1234, col: 5, offset: 35072},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 1234, col: 8, offset: 35075},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 1236, col: 1, offset: 35156},
			expr: &choiceExpr{
				pos: position{line: 1237, col: 5, offset: 35175},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1237, col: 5, offset: 35175},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 1237, col: 5, offset: 35175},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1237, col: 5, offset: 35175},
									expr: &seqExpr{
										pos: position{line: 1237, col: 7, offset: 35177},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1237, col: 7, offset: 35177},
												name: "IDGuard",
											},
											&notExpr{
												pos: position{line: 1237, col: 15, offset: 35185},
												expr: &ruleRefExpr{
													pos:  position{line: 1237, col: 16, offset: 35186},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1237, col: 32, offset: 35202},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1237, col: 48, offset: 35218},
									expr: &ruleRefExpr{
										pos:  position{line: 1237, col: 48, offset: 35218},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1238, col: 5, offset: 35269},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 1238, col: 5, offset: 35269},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1239, col: 5, offset: 35308},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 1239, col: 5, offset: 35308},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1239, col: 5, offset: 35308},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1239, col: 10, offset: 35313},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1239, col: 13, offset: 35316},
										name: "IDGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1241, col: 5, offset: 35407},
						run: (*parser).callonIdentifierName19,
						expr: &litMatcher{
							pos:        position{line: 1241, col: 5, offset: 35407},
							val:        "type",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1242, col: 5, offset: 35449},
						run: (*parser).callonIdentifierName21,
						expr: &seqExpr{
							pos: position{line: 1242, col: 5, offset: 35449},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1242, col: 5, offset: 35449},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1242, col: 8, offset: 35452},
										name: "SQLTokenSentinels",
									},
								},
								&andExpr{
									pos: position{line: 1242, col: 26, offset: 35470},
									expr: &seqExpr{
										pos: position{line: 1242, col: 28, offset: 35472},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1242, col: 28, offset: 35472},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1242, col: 31, offset: 35475},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierNames",
			pos:  position{line: 1244, col: 1, offset: 35500},
			expr: &actionExpr{
				pos: position{line: 1245, col: 5, offset: 35520},
				run: (*parser).callonIdentifierNames1,
				expr: &seqExpr{
					pos: position{line: 1245, col: 5, offset: 35520},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1245, col: 5, offset: 35520},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1245, col: 11, offset: 35526},
								name: "IdentifierName",
							},
						},
						&labeledExpr{
							pos:   position{line: 1245, col: 26, offset: 35541},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1245, col: 31, offset: 35546},
								expr: &actionExpr{
									pos: position{line: 1245, col: 32, offset: 35547},
									run: (*parser).callonIdentifierNames7,
									expr: &seqExpr{
										pos: position{line: 1245, col: 32, offset: 35547},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1245, col: 32, offset: 35547},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1245, col: 35, offset: 35550},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1245, col: 39, offset: 35554},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 1245, col: 42, offset: 35557},
												label: "id",
												expr: &ruleRefExpr{
													pos:  position{line: 1245, col: 45, offset: 35560},
													name: "IdentifierName",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IDGuard",
			pos:  position{line: 1249, col: 1, offset: 35676},
			expr: &choiceExpr{
				pos: position{line: 1250, col: 5, offset: 35688},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1250, col: 5, offset: 35688},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1251, col: 5, offset: 35707},
						name: "NullLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1252, col: 5, offset: 35723},
						name: "NaN",
					},
					&ruleRefExpr{
						pos:  position{line: 1253, col: 5, offset: 35731},
						name: "Infinity",
					},
				},
			},
		},
		{
			name: "Time",
			pos:  position{line: 1255, col: 1, offset: 35741},
			expr: &actionExpr{
				pos: position{line: 1256, col: 5, offset: 35750},
				run: (*parser).callonTime1,
				expr: &seqExpr{
					pos: position{line: 1256, col: 5, offset: 35750},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1256, col: 5, offset: 35750},
							name: "FullDate",
						},
						&litMatcher{
							pos:        position{line: 1256, col: 14, offset: 35759},
							val:        "T",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1256, col: 18, offset: 35763},
							name: "FullTime",
						},
					},
				},
			},
		},
		{
			name: "FullDate",
			pos:  position{line: 1260, col: 1, offset: 35883},
			expr: &seqExpr{
				pos: position{line: 1260, col: 12, offset: 35894},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1260, col: 12, offset: 35894},
						name: "D4",
					},
					&litMatcher{
						pos:        position{line: 1260, col: 15, offset: 35897},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1260, col: 19, offset: 35901},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1260, col: 22, offset: 35904},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1260, col: 26, offset: 35908},
						name: "D2",
					},
				},
			},
		},
		{
			name: "D4",
			pos:  position{line: 1262, col: 1, offset: 35912},
			expr: &seqExpr{
				pos: position{line: 1262, col: 6, offset: 35917},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1262, col: 6, offset: 35917},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1262, col: 11, offset: 35922},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1262, col: 16, offset: 35927},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1262, col: 21, offset: 35932},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "D2",
			pos:  position{line: 1263, col: 1, offset: 35938},
			expr: &seqExpr{
				pos: position{line: 1263, col: 6, offset: 35943},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1263, col: 6, offset: 35943},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1263, col: 11, offset: 35948},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "FullTime",
			pos:  position{line: 1265, col: 1, offset: 35955},
			expr: &seqExpr{
				pos: position{line: 1265, col: 12, offset: 35966},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1265, col: 12, offset: 35966},
						name: "PartialTime",
					},
					&ruleRefExpr{
						pos:  position{line: 1265, col: 24, offset: 35978},
						name: "TimeOffset",
					},
				},
			},
		},
		{
			name: "PartialTime",
			pos:  position{line: 1267, col: 1, offset: 35990},
			expr: &seqExpr{
				pos: position{line: 1267, col: 15, offset: 36004},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1267, col: 15, offset: 36004},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1267, col: 18, offset: 36007},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1267, col: 22, offset: 36011},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1267, col: 25, offset: 36014},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1267, col: 29, offset: 36018},
						name: "D2",
					},
					&zeroOrOneExpr{
						pos: position{line: 1267, col: 32, offset: 36021},
						expr: &seqExpr{
							pos: position{line: 1267, col: 33, offset: 36022},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1267, col: 33, offset: 36022},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1267, col: 37, offset: 36026},
									expr: &charClassMatcher{
										pos:        position{line: 1267, col: 37, offset: 36026},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeOffset",
			pos:  position{line: 1269, col: 1, offset: 36036},
			expr: &choiceExpr{
				pos: position{line: 1270, col: 5, offset: 36051},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1270, col: 5, offset: 36051},
						val:        "Z",
						ignoreCase: false,
					},
					&seqExpr{
						pos: position{line: 1271, col: 5, offset: 36059},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 1271, col: 6, offset: 36060},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1271, col: 6, offset: 36060},
										val:        "+",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 1271, col: 12, offset: 36066},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1271, col: 17, offset: 36071},
								name: "D2",
							},
							&litMatcher{
								pos:        position{line: 1271, col: 20, offset: 36074},
								val:        ":",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 1271, col: 24, offset: 36078},
								name: "D2",
							},
							&zeroOrOneExpr{
								pos: position{line: 1271, col: 27, offset: 36081},
								expr: &seqExpr{
									pos: position{line: 1271, col: 28, offset: 36082},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1271, col: 28, offset: 36082},
											val:        ".",
											ignoreCase: false,
										},
										&oneOrMoreExpr{
											pos: position{line: 1271, col: 32, offset: 36086},
											expr: &charClassMatcher{
												pos:        position{line: 1271, col: 32, offset: 36086},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 1273, col: 1, offset: 36096},
			expr: &actionExpr{
				pos: position{line: 1274, col: 5, offset: 36109},
				run: (*parser).callonDuration1,
				expr: &seqExpr{
					pos: position{line: 1274, col: 5, offset: 36109},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1274, col: 5, offset: 36109},
							expr: &litMatcher{
								pos:        position{line: 1274, col: 5, offset: 36109},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1274, col: 10, offset: 36114},
							expr: &seqExpr{
								pos: position{line: 1274, col: 11, offset: 36115},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1274, col: 11, offset: 36115},
										name: "Decimal",
									},
									&ruleRefExpr{
										pos:  position{line: 1274, col: 19, offset: 36123},
										name: "TimeUnit",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Decimal",
			pos:  position{line: 1278, col: 1, offset: 36249},
			expr: &seqExpr{
				pos: position{line: 1278, col: 11, offset: 36259},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1278, col: 11, offset: 36259},
						name: "UInt",
					},
					&zeroOrOneExpr{
						pos: position{line: 1278, col: 16, offset: 36264},
						expr: &seqExpr{
							pos: position{line: 1278, col: 17, offset: 36265},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1278, col: 17, offset: 36265},
									val:        ".",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1278, col: 21, offset: 36269},
									name: "UInt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeUnit",
			pos:  position{line: 1280, col: 1, offset: 36277},
			expr: &choiceExpr{
				pos: position{line: 1281, col: 5, offset: 36290},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1281, col: 5, offset: 36290},
						val:        "ns",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1282, col: 5, offset: 36299},
						val:        "us",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1283, col: 5, offset: 36308},
						val:        "ms",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1284, col: 5, offset: 36317},
						val:        "s",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1285, col: 5, offset: 36325},
						val:        "m",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1286, col: 5, offset: 36333},
						val:        "h",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1287, col: 5, offset: 36341},
						val:        "d",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1288, col: 5, offset: 36349},
						val:        "w",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1289, col: 5, offset: 36357},
						val:        "y",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 1291, col: 1, offset: 36362},
			expr: &actionExpr{
				pos: position{line: 1292, col: 5, offset: 36369},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 1292, col: 5, offset: 36369},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1292, col: 5, offset: 36369},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1292, col: 10, offset: 36374},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1292, col: 14, offset: 36378},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1292, col: 19, offset: 36383},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1292, col: 23, offset: 36387},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1292, col: 28, offset: 36392},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1292, col: 32, offset: 36396},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 1294, col: 1, offset: 36433},
			expr: &actionExpr{
				pos: position{line: 1295, col: 5, offset: 36441},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 1295, col: 5, offset: 36441},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1295, col: 5, offset: 36441},
							expr: &seqExpr{
								pos: position{line: 1295, col: 7, offset: 36443},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1295, col: 7, offset: 36443},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 1295, col: 11, offset: 36447},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 1295, col: 15, offset: 36451},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 1295, col: 19, offset: 36455},
										expr: &choiceExpr{
											pos: position{line: 1295, col: 21, offset: 36457},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1295, col: 21, offset: 36457},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 1295, col: 32, offset: 36468},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1295, col: 38, offset: 36474},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1295, col: 40, offset: 36476},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 1299, col: 1, offset: 36640},
			expr: &choiceExpr{
				pos: position{line: 1300, col: 5, offset: 36658},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1300, col: 5, offset: 36658},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 1300, col: 5, offset: 36658},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1300, col: 5, offset: 36658},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 1300, col: 7, offset: 36660},
										expr: &ruleRefExpr{
											pos:  position{line: 1300, col: 7, offset: 36660},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1300, col: 17, offset: 36670},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1300, col: 19, offset: 36672},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1303, col: 5, offset: 36736},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 1303, col: 5, offset: 36736},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1303, col: 5, offset: 36736},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1303, col: 7, offset: 36738},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1303, col: 11, offset: 36742},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1303, col: 13, offset: 36744},
										expr: &ruleRefExpr{
											pos:  position{line: 1303, col: 13, offset: 36744},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1303, col: 23, offset: 36754},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1303, col: 28, offset: 36759},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1303, col: 30, offset: 36761},
										expr: &ruleRefExpr{
											pos:  position{line: 1303, col: 30, offset: 36761},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1303, col: 40, offset: 36771},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 1303, col: 42, offset: 36773},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1306, col: 5, offset: 36872},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 1306, col: 5, offset: 36872},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1306, col: 5, offset: 36872},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1306, col: 10, offset: 36877},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1306, col: 12, offset: 36879},
										expr: &ruleRefExpr{
											pos:  position{line: 1306, col: 12, offset: 36879},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1306, col: 22, offset: 36889},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1306, col: 24, offset: 36891},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1309, col: 5, offset: 36962},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 1309, col: 5, offset: 36962},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1309, col: 5, offset: 36962},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1309, col: 7, offset: 36964},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1309, col: 11, offset: 36968},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1309, col: 13, offset: 36970},
										expr: &ruleRefExpr{
											pos:  position{line: 1309, col: 13, offset: 36970},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1309, col: 23, offset: 36980},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1312, col: 5, offset: 37048},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 1312, col: 5, offset: 37048},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 1316, col: 1, offset: 37085},
			expr: &choiceExpr{
				pos: position{line: 1317, col: 5, offset: 37097},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1317, col: 5, offset: 37097},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 1318, col: 5, offset: 37104},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 1320, col: 1, offset: 37109},
			expr: &actionExpr{
				pos: position{line: 1320, col: 12, offset: 37120},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 1320, col: 12, offset: 37120},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1320, col: 12, offset: 37120},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1320, col: 16, offset: 37124},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1320, col: 18, offset: 37126},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 1322, col: 1, offset: 37164},
			expr: &actionExpr{
				pos: position{line: 1322, col: 12, offset: 37175},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 1322, col: 12, offset: 37175},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1322, col: 12, offset: 37175},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1322, col: 14, offset: 37177},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 1322, col: 18, offset: 37181},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 1324, col: 1, offset: 37219},
			expr: &actionExpr{
				pos: position{line: 1325, col: 5, offset: 37230},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 1325, col: 5, offset: 37230},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1325, col: 5, offset: 37230},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1325, col: 7, offset: 37232},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 1325, col: 10, offset: 37235},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1325, col: 14, offset: 37239},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1325, col: 16, offset: 37241},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 1329, col: 1, offset: 37314},
			expr: &actionExpr{
				pos: position{line: 1330, col: 5, offset: 37325},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 1330, col: 5, offset: 37325},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1330, col: 5, offset: 37325},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1330, col: 7, offset: 37327},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 1330, col: 11, offset: 37331},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1330, col: 15, offset: 37335},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1330, col: 17, offset: 37337},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 1334, col: 1, offset: 37400},
			expr: &actionExpr{
				pos: position{line: 1335, col: 4, offset: 37408},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 1335, col: 4, offset: 37408},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 1335, col: 6, offset: 37410},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 1337, col: 1, offset: 37450},
			expr: &choiceExpr{
				pos: position{line: 1338, col: 5, offset: 37464},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1338, col: 5, offset: 37464},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 1339, col: 5, offset: 37479},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 1341, col: 1, offset: 37495},
			expr: &actionExpr{
				pos: position{line: 1341, col: 14, offset: 37508},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1341, col: 14, offset: 37508},
					expr: &charClassMatcher{
						pos:        position{line: 1341, col: 14, offset: 37508},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 1343, col: 1, offset: 37547},
			expr: &actionExpr{
				pos: position{line: 1344, col: 5, offset: 37566},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 1344, col: 5, offset: 37566},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1344, col: 5, offset: 37566},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1344, col: 9, offset: 37570},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 1346, col: 1, offset: 37613},
			expr: &choiceExpr{
				pos: position{line: 1347, col: 5, offset: 37629},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1347, col: 5, offset: 37629},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 1347, col: 5, offset: 37629},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1347, col: 5, offset: 37629},
									expr: &litMatcher{
										pos:        position{line: 1347, col: 5, offset: 37629},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1347, col: 10, offset: 37634},
									expr: &charClassMatcher{
										pos:        position{line: 1347, col: 10, offset: 37634},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 1347, col: 17, offset: 37641},
									val:        ".",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1347, col: 21, offset: 37645},
									expr: &charClassMatcher{
										pos:        position{line: 1347, col: 21, offset: 37645},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1347, col: 28, offset: 37652},
									expr: &ruleRefExpr{
										pos:  position{line: 1347, col: 28, offset: 37652},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1350, col: 5, offset: 37711},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 1350, col: 5, offset: 37711},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1350, col: 5, offset: 37711},
									expr: &litMatcher{
										pos:        position{line: 1350, col: 5, offset: 37711},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1350, col: 10, offset: 37716},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1350, col: 14, offset: 37720},
									expr: &charClassMatcher{
										pos:        position{line: 1350, col: 14, offset: 37720},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1350, col: 21, offset: 37727},
									expr: &ruleRefExpr{
										pos:  position{line: 1350, col: 21, offset: 37727},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1353, col: 5, offset: 37786},
						run: (*parser).callonFloatString22,
						expr: &choiceExpr{
							pos: position{line: 1353, col: 6, offset: 37787},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1353, col: 6, offset: 37787},
									name: "NaN",
								},
								&ruleRefExpr{
									pos:  position{line: 1353, col: 12, offset: 37793},
									name: "Infinity",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 1356, col: 1, offset: 37836},
			expr: &seqExpr{
				pos: position{line: 1356, col: 16, offset: 37851},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1356, col: 16, offset: 37851},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 1356, col: 21, offset: 37856},
						expr: &charClassMatcher{
							pos:        position{line: 1356, col: 21, offset: 37856},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1356, col: 27, offset: 37862},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "NaN",
			pos:  position{line: 1358, col: 1, offset: 37874},
			expr: &litMatcher{
				pos:        position{line: 1358, col: 7, offset: 37880},
				val:        "NaN",
				ignoreCase: false,
			},
		},
		{
			name: "Infinity",
			pos:  position{line: 1360, col: 1, offset: 37887},
			expr: &seqExpr{
				pos: position{line: 1360, col: 12, offset: 37898},
				exprs: []interface{}{
					&zeroOrOneExpr{
						pos: position{line: 1360, col: 12, offset: 37898},
						expr: &choiceExpr{
							pos: position{line: 1360, col: 13, offset: 37899},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1360, col: 13, offset: 37899},
									val:        "-",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1360, col: 19, offset: 37905},
									val:        "+",
									ignoreCase: false,
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1360, col: 25, offset: 37911},
						val:        "Inf",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 1362, col: 1, offset: 37918},
			expr: &actionExpr{
				pos: position{line: 1362, col: 7, offset: 37924},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1362, col: 7, offset: 37924},
					expr: &ruleRefExpr{
						pos:  position{line: 1362, col: 7, offset: 37924},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 1364, col: 1, offset: 37966},
			expr: &charClassMatcher{
				pos:        position{line: 1364, col: 12, offset: 37977},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1366, col: 1, offset: 37990},
			expr: &choiceExpr{
				pos: position{line: 1367, col: 5, offset: 38007},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1367, col: 5, offset: 38007},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 1367, col: 5, offset: 38007},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1367, col: 5, offset: 38007},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1367, col: 9, offset: 38011},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1367, col: 11, offset: 38013},
										expr: &ruleRefExpr{
											pos:  position{line: 1367, col: 11, offset: 38013},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1367, col: 29, offset: 38031},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1368, col: 5, offset: 38068},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 1368, col: 5, offset: 38068},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1368, col: 5, offset: 38068},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1368, col: 9, offset: 38072},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1368, col: 11, offset: 38074},
										expr: &ruleRefExpr{
											pos:  position{line: 1368, col: 11, offset: 38074},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1368, col: 29, offset: 38092},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 1370, col: 1, offset: 38126},
			expr: &choiceExpr{
				pos: position{line: 1371, col: 5, offset: 38147},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1371, col: 5, offset: 38147},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1371, col: 5, offset: 38147},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1371, col: 5, offset: 38147},
									expr: &choiceExpr{
										pos: position{line: 1371, col: 7, offset: 38149},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1371, col: 7, offset: 38149},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1371, col: 13, offset: 38155},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1371, col: 26, offset: 38168,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1372, col: 5, offset: 38205},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1372, col: 5, offset: 38205},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1372, col: 5, offset: 38205},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1372, col: 10, offset: 38210},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1372, col: 12, offset: 38212},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 1374, col: 1, offset: 38246},
			expr: &actionExpr{
				pos: position{line: 1375, col: 5, offset: 38258},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 1375, col: 5, offset: 38258},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1375, col: 5, offset: 38258},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1375, col: 10, offset: 38263},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1375, col: 23, offset: 38276},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1375, col: 28, offset: 38281},
								expr: &ruleRefExpr{
									pos:  position{line: 1375, col: 28, offset: 38281},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 1377, col: 1, offset: 38343},
			expr: &choiceExpr{
				pos: position{line: 1378, col: 5, offset: 38360},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1378, col: 5, offset: 38360},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1379, col: 5, offset: 38377},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordChars",
			pos:  position{line: 1381, col: 1, offset: 38389},
			expr: &actionExpr{
				pos: position{line: 1381, col: 16, offset: 38404},
				run: (*parser).callonKeyWordChars1,
				expr: &charClassMatcher{
					pos:        position{line: 1381, col: 16, offset: 38404},
					val:        "[a-zA-Z_.:/%#@~]",
					chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
					ranges:     []rune{'a', 'z', 'A', 'Z'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 1383, col: 1, offset: 38453},
			expr: &choiceExpr{
				pos: position{line: 1384, col: 5, offset: 38469},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1384, col: 5, offset: 38469},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 1385, col: 5, offset: 38486},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 1387, col: 1, offset: 38493},
			expr: &actionExpr{
				pos: position{line: 1387, col: 14, offset: 38506},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 1387, col: 14, offset: 38506},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1387, col: 14, offset: 38506},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1387, col: 19, offset: 38511},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1387, col: 22, offset: 38514},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1387, col: 22, offset: 38514},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1387, col: 38, offset: 38530},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobPattern",
			pos:  position{line: 1389, col: 1, offset: 38565},
			expr: &actionExpr{
				pos: position{line: 1390, col: 5, offset: 38581},
				run: (*parser).callonGlobPattern1,
				expr: &seqExpr{
					pos: position{line: 1390, col: 5, offset: 38581},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1390, col: 5, offset: 38581},
							expr: &ruleRefExpr{
								pos:  position{line: 1390, col: 6, offset: 38582},
								name: "GlobProperStart",
							},
						},
						&andExpr{
							pos: position{line: 1390, col: 22, offset: 38598},
							expr: &ruleRefExpr{
								pos:  position{line: 1390, col: 23, offset: 38599},
								name: "GlobHasStar",
							},
						},
						&labeledExpr{
							pos:   position{line: 1390, col: 35, offset: 38611},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1390, col: 40, offset: 38616},
								name: "GlobStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1390, col: 50, offset: 38626},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1390, col: 55, offset: 38631},
								expr: &ruleRefExpr{
									pos:  position{line: 1390, col: 55, offset: 38631},
									name: "GlobRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobProperStart",
			pos:  position{line: 1394, col: 1, offset: 38700},
			expr: &choiceExpr{
				pos: position{line: 1394, col: 19, offset: 38718},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1394, col: 19, offset: 38718},
						name: "KeyWordStart",
					},
					&seqExpr{
						pos: position{line: 1394, col: 34, offset: 38733},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1394, col: 34, offset: 38733},
								expr: &litMatcher{
									pos:        position{line: 1394, col: 34, offset: 38733},
									val:        "*",
									ignoreCase: false,
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1394, col: 39, offset: 38738},
								name: "KeyWordRest",
							},
						},
					},
				},
			},
		},
		{
			name: "GlobHasStar",
			pos:  position{line: 1395, col: 1, offset: 38750},
			expr: &seqExpr{
				pos: position{line: 1395, col: 15, offset: 38764},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1395, col: 15, offset: 38764},
						expr: &ruleRefExpr{
							pos:  position{line: 1395, col: 15, offset: 38764},
							name: "KeyWordRest",
						},
					},
					&litMatcher{
						pos:        position{line: 1395, col: 28, offset: 38777},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "GlobStart",
			pos:  position{line: 1397, col: 1, offset: 38782},
			expr: &choiceExpr{
				pos: position{line: 1398, col: 5, offset: 38796},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1398, col: 5, offset: 38796},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1399, col: 5, offset: 38813},
						name: "GlobEsc",
					},
					&actionExpr{
						pos: position{line: 1400, col: 5, offset: 38825},
						run: (*parser).callonGlobStart4,
						expr: &litMatcher{
							pos:        position{line: 1400, col: 5, offset: 38825},
							val:        "*",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GlobRest",
			pos:  position{line: 1402, col: 1, offset: 38850},
			expr: &choiceExpr{
				pos: position{line: 1403, col: 5, offset: 38863},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1403, col: 5, offset: 38863},
						name: "GlobStart",
					},
					&charClassMatcher{
						pos:        position{line: 1404, col: 5, offset: 38877},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "GlobEsc",
			pos:  position{line: 1406, col: 1, offset: 38884},
			expr: &actionExpr{
				pos: position{line: 1406, col: 11, offset: 38894},
				run: (*parser).callonGlobEsc1,
				expr: &seqExpr{
					pos: position{line: 1406, col: 11, offset: 38894},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1406, col: 11, offset: 38894},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1406, col: 16, offset: 38899},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1406, col: 19, offset: 38902},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1406, col: 19, offset: 38902},
										name: "GlobEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1406, col: 32, offset: 38915},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobEscape",
			pos:  position{line: 1408, col: 1, offset: 38950},
			expr: &choiceExpr{
				pos: position{line: 1409, col: 5, offset: 38965},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1409, col: 5, offset: 38965},
						run: (*parser).callonGlobEscape2,
						expr: &litMatcher{
							pos:        position{line: 1409, col: 5, offset: 38965},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1410, col: 5, offset: 38993},
						run: (*parser).callonGlobEscape4,
						expr: &litMatcher{
							pos:        position{line: 1410, col: 5, offset: 38993},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1411, col: 5, offset: 39023},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 1413, col: 1, offset: 39029},
			expr: &choiceExpr{
				pos: position{line: 1414, col: 5, offset: 39050},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1414, col: 5, offset: 39050},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1414, col: 5, offset: 39050},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1414, col: 5, offset: 39050},
									expr: &choiceExpr{
										pos: position{line: 1414, col: 7, offset: 39052},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1414, col: 7, offset: 39052},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1414, col: 13, offset: 39058},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1414, col: 26, offset: 39071,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1415, col: 5, offset: 39108},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1415, col: 5, offset: 39108},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1415, col: 5, offset: 39108},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1415, col: 10, offset: 39113},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1415, col: 12, offset: 39115},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 1417, col: 1, offset: 39149},
			expr: &choiceExpr{
				pos: position{line: 1418, col: 5, offset: 39168},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1418, col: 5, offset: 39168},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 1419, col: 5, offset: 39189},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 1421, col: 1, offset: 39204},
			expr: &choiceExpr{
				pos: position{line: 1422, col: 5, offset: 39225},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1422, col: 5, offset: 39225},
						val:        "'",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1423, col: 5, offset: 39233},
						run: (*parser).callonSingleCharEscape3,
						expr: &litMatcher{
							pos:        position{line: 1423, col: 5, offset: 39233},
							val:        "\"",
							ignoreCase: false,
						},
					},
					&litMatcher{
						pos:        position{line: 1424, col: 5, offset: 39273},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1425, col: 5, offset: 39282},
						run: (*parser).callonSingleCharEscape6,
						expr: &litMatcher{
							pos:        position{line: 1425, col: 5, offset: 39282},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1426, col: 5, offset: 39311},
						run: (*parser).callonSingleCharEscape8,
						expr: &litMatcher{
							pos:        position{line: 1426, col: 5, offset: 39311},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1427, col: 5, offset: 39340},
						run: (*parser).callonSingleCharEscape10,
						expr: &litMatcher{
							pos:        position{line: 1427, col: 5, offset: 39340},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1428, col: 5, offset: 39369},
						run: (*parser).callonSingleCharEscape12,
						expr: &litMatcher{
							pos:        position{line: 1428, col: 5, offset: 39369},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1429, col: 5, offset: 39398},
						run: (*parser).callonSingleCharEscape14,
						expr: &litMatcher{
							pos:        position{line: 1429, col: 5, offset: 39398},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1430, col: 5, offset: 39427},
						run: (*parser).callonSingleCharEscape16,
						expr: &litMatcher{
							pos:        position{line: 1430, col: 5, offset: 39427},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 1432, col: 1, offset: 39453},
			expr: &choiceExpr{
				pos: position{line: 1433, col: 5, offset: 39471},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1433, col: 5, offset: 39471},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 1433, col: 5, offset: 39471},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1434, col: 5, offset: 39499},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 1434, col: 5, offset: 39499},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1435, col: 5, offset: 39527},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 1437, col: 1, offset: 39533},
			expr: &choiceExpr{
				pos: position{line: 1438, col: 5, offset: 39551},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1438, col: 5, offset: 39551},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 1438, col: 5, offset: 39551},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1438, col: 5, offset: 39551},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1438, col: 9, offset: 39555},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1438, col: 16, offset: 39562},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1438, col: 16, offset: 39562},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1438, col: 25, offset: 39571},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1438, col: 34, offset: 39580},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1438, col: 43, offset: 39589},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1441, col: 5, offset: 39652},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 1441, col: 5, offset: 39652},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1441, col: 5, offset: 39652},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1441, col: 9, offset: 39656},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1441, col: 13, offset: 39660},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1441, col: 20, offset: 39667},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1441, col: 20, offset: 39667},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 1441, col: 29, offset: 39676},
												expr: &ruleRefExpr{
													pos:  position{line: 1441, col: 29, offset: 39676},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1441, col: 39, offset: 39686},
												expr: &ruleRefExpr{
													pos:  position{line: 1441, col: 39, offset: 39686},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1441, col: 49, offset: 39696},
												expr: &ruleRefExpr{
													pos:  position{line: 1441, col: 49, offset: 39696},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1441, col: 59, offset: 39706},
												expr: &ruleRefExpr{
													pos:  position{line: 1441, col: 59, offset: 39706},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1441, col: 69, offset: 39716},
												expr: &ruleRefExpr{
													pos:  position{line: 1441, col: 69, offset: 39716},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1441, col: 80, offset: 39727},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpPattern",
			pos:  position{line: 1445, col: 1, offset: 39781},
			expr: &actionExpr{
				pos: position{line: 1446, col: 5, offset: 39799},
				run: (*parser).callonRegexpPattern1,
				expr: &seqExpr{
					pos: position{line: 1446, col: 5, offset: 39799},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1446, col: 5, offset: 39799},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1446, col: 9, offset: 39803},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1446, col: 14, offset: 39808},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 1446, col: 25, offset: 39819},
							val:        "/",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1446, col: 29, offset: 39823},
							expr: &ruleRefExpr{
								pos:  position{line: 1446, col: 30, offset: 39824},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 1448, col: 1, offset: 39859},
			expr: &actionExpr{
				pos: position{line: 1449, col: 5, offset: 39874},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1449, col: 5, offset: 39874},
					expr: &choiceExpr{
						pos: position{line: 1449, col: 6, offset: 39875},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 1449, col: 6, offset: 39875},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&seqExpr{
								pos: position{line: 1449, col: 15, offset: 39884},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1449, col: 15, offset: 39884},
										val:        "\\",
										ignoreCase: false,
									},
									&anyMatcher{
										line: 1449, col: 20, offset: 39889,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 1451, col: 1, offset: 39925},
			expr: &charClassMatcher{
				pos:        position{line: 1452, col: 5, offset: 39941},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 1454, col: 1, offset: 39956},
			expr: &oneOrMoreExpr{
				pos: position{line: 1454, col: 5, offset: 39960},
				expr: &ruleRefExpr{
					pos:  position{line: 1454, col: 5, offset: 39960},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1456, col: 1, offset: 39971},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1456, col: 6, offset: 39976},
				expr: &ruleRefExpr{
					pos:  position{line: 1456, col: 6, offset: 39976},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 1458, col: 1, offset: 39987},
			expr: &choiceExpr{
				pos: position{line: 1459, col: 5, offset: 40000},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1459, col: 5, offset: 40000},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 1460, col: 5, offset: 40015},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 1461, col: 5, offset: 40034},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 1463, col: 1, offset: 40043},
			expr: &anyMatcher{
				line: 1464, col: 5, offset: 40063,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 1466, col: 1, offset: 40066},
			expr: &choiceExpr{
				pos: position{line: 1467, col: 5, offset: 40094},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1467, col: 5, offset: 40094},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1468, col: 5, offset: 40103},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1469, col: 5, offset: 40112},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1470, col: 5, offset: 40121},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1471, col: 5, offset: 40129},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1472, col: 5, offset: 40142},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 1474, col: 1, offset: 40152},
			expr: &charClassMatcher{
				pos:        position{line: 1475, col: 5, offset: 40171},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 1481, col: 1, offset: 40501},
			expr: &ruleRefExpr{
				pos:  position{line: 1484, col: 5, offset: 40572},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1486, col: 1, offset: 40591},
			expr: &seqExpr{
				pos: position{line: 1487, col: 5, offset: 40612},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1487, col: 5, offset: 40612},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1487, col: 10, offset: 40617},
						expr: &seqExpr{
							pos: position{line: 1487, col: 11, offset: 40618},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1487, col: 11, offset: 40618},
									expr: &litMatcher{
										pos:        position{line: 1487, col: 12, offset: 40619},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1487, col: 17, offset: 40624},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1487, col: 35, offset: 40642},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1489, col: 1, offset: 40648},
			expr: &seqExpr{
				pos: position{line: 1490, col: 5, offset: 40670},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1490, col: 5, offset: 40670},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1490, col: 10, offset: 40675},
						expr: &seqExpr{
							pos: position{line: 1490, col: 11, offset: 40676},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1490, col: 11, offset: 40676},
									expr: &ruleRefExpr{
										pos:  position{line: 1490, col: 12, offset: 40677},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1490, col: 27, offset: 40692},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1492, col: 1, offset: 40711},
			expr: &seqExpr{
				pos: position{line: 1492, col: 7, offset: 40717},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1492, col: 7, offset: 40717},
						expr: &ruleRefExpr{
							pos:  position{line: 1492, col: 7, offset: 40717},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1492, col: 19, offset: 40729},
						name: "LineTerminator",
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 1494, col: 1, offset: 40745},
			expr: &choiceExpr{
				pos: position{line: 1494, col: 7, offset: 40751},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1494, col: 7, offset: 40751},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 1494, col: 11, offset: 40755},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1496, col: 1, offset: 40760},
			expr: &notExpr{
				pos: position{line: 1496, col: 7, offset: 40766},
				expr: &anyMatcher{
					line: 1496, col: 8, offset: 40767,
				},
			},
		},
		{
			name: "EOKW",
			pos:  position{line: 1498, col: 1, offset: 40770},
			expr: &notExpr{
				pos: position{line: 1498, col: 8, offset: 40777},
				expr: &ruleRefExpr{
					pos:  position{line: 1498, col: 9, offset: 40778},
					name: "KeyWordChars",
				},
			},
		},
	},
}

func (c *current) onstart2(scope interface{}) (interface{}, error) {
	return []interface{}{scope}, nil
}

func (p *parser) callonstart2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart2(stack["scope"])
}

func (c *current) onstart9(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonstart9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart9(stack["seq"])
}

func (c *current) onScope1(decls, body interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Scope", "decls": decls, "body": body}, nil

}

func (p *parser) callonScope1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope1(stack["decls"], stack["body"])
}

func (c *current) onSeq1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSeq1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSeq1(stack["first"], stack["rest"])
}

func (c *current) onSeqTail1(o interface{}) (interface{}, error) {
	return o, nil
}

func (p *parser) callonSeqTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSeqTail1(stack["o"])
}

func (c *current) onDecl1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonDecl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDecl1(stack["v"])
}

func (c *current) onConstDecl2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ConstDecl", "name": id, "expr": expr}, nil

}

func (p *parser) callonConstDecl2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDecl2(stack["id"], stack["expr"])
}

func (c *current) onConstDecl13(id, typ interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "ConstDecl",

		"name": id,

		"expr": map[string]interface{}{"kind": "TypeValue", "value": map[string]interface{}{"kind": "TypeDef", "name": id, "type": typ}}}, nil

}

func (p *parser) callonConstDecl13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDecl13(stack["id"], stack["typ"])
}

func (c *current) onFuncDecl1(id, params, expr interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "FuncDecl",

		"name": id,

		"params": params,

		"expr": expr}, nil

}

func (p *parser) callonFuncDecl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncDecl1(stack["id"], stack["params"], stack["expr"])
}

func (c *current) onOpDecl1(name, params, body interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "OpDecl",

		"name": name,

		"params": params,

		"body": body}, nil

}

func (p *parser) callonOpDecl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpDecl1(stack["name"], stack["params"], stack["body"])
}

func (c *current) onParams7(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonParams7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParams7(stack["p"])
}

func (c *current) onParams1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonParams1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParams1(stack["first"], stack["rest"])
}

func (c *current) onParam2(id interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ConstParam", "name": id}, nil
}

func (p *parser) callonParam2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParam2(stack["id"])
}

func (c *current) onParam8() (interface{}, error) {
	return map[string]interface{}{"kind": "SpreadParam"}, nil
}

func (p *parser) callonParam8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParam8()
}

func (c *current) onParam10(id interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "NamedParam", "name": id}, nil
}

func (p *parser) callonParam10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParam10(stack["id"])
}

func (c *current) onOperation2(paths interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Parallel", "paths": paths}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["paths"])
}

func (c *current) onOperation12(expr, cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": expr, "cases": cases}, nil

}

func (p *parser) callonOperation12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation12(stack["expr"], stack["cases"])
}

func (c *current) onOperation25(cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": nil, "cases": cases}, nil

}

func (p *parser) callonOperation25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation25(stack["cases"])
}

func (c *current) onOperation35(trunks interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": trunks}, nil

}

func (p *parser) callonOperation35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation35(stack["trunks"])
}

func (c *current) onOperation45(scope interface{}) (interface{}, error) {
	return scope, nil
}

func (p *parser) callonOperation45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation45(stack["scope"])
}

func (c *current) onOperation55(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation55(stack["a"])
}

func (c *current) onOperation61(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation61(stack["a"])
}

func (c *current) onOperation71(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Search", "expr": expr}, nil

}

func (p *parser) callonOperation71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation71(stack["expr"])
}

func (c *current) onOperation77(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation77(stack["expr"])
}

func (c *current) onOperation80(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation80(stack["expr"])
}

func (c *current) onOperation83(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation83(stack["expr"])
}

func (c *current) onLeg1(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLeg1(stack["seq"])
}

func (c *current) onSwitchLeg1(expr, path interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": expr, "path": path}, nil

}

func (p *parser) callonSwitchLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchLeg1(stack["expr"], stack["path"])
}

func (c *current) onCase2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonCase2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase2(stack["expr"])
}

func (c *current) onCase8() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonCase8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase8()
}

func (c *current) onFromLeg1(source, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Trunk", "source": source, "seq": nil}
	if opt != nil {
		m["seq"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonFromLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromLeg1(stack["source"], stack["opt"])
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor13(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor13(stack["expr"])
}

func (c *current) onSearchExpr4(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Term", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonSearchExpr4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr4(stack["v"])
}

func (c *current) onSearchExpr15() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil

}

func (p *parser) callonSearchExpr15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr15()
}

func (c *current) onSearchPredicate2(lhs, op, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": op, "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonSearchPredicate2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPredicate2(stack["lhs"], stack["op"], stack["rhs"])
}

func (c *current) onSearchPredicate12(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchPredicate12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPredicate12(stack["first"], stack["rest"])
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onGlob1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Glob", "pattern": pattern}, nil

}

func (p *parser) callonGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlob1(stack["pattern"])
}

func (c *current) onRegexp1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Regexp", "pattern": pattern}, nil

}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["pattern"])
}

func (c *current) onAggregation2(keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Summarize", "keys": keys, "aggs": nil, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["keys"], stack["limit"])
}

func (c *current) onAggregation10(aggs, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"kind": "Summarize", "keys": nil, "aggs": aggs, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation10(stack["aggs"], stack["keys"], stack["limit"])
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAggAssignment2(lval, agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lval, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment2(stack["lval"], stack["agg"])
}

func (c *current) onAggAssignment11(agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment11(stack["agg"])
}

func (c *current) onAgg1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"kind": "Agg", "name": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonAgg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAgg1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onAggAssignments1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonAggAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssertOp6(e interface{}) (interface{}, error) {
	return []interface{}{e, string(c.text)}, nil
}

func (p *parser) callonAssertOp6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssertOp6(stack["e"])
}

func (c *current) onAssertOp1(expr interface{}) (interface{}, error) {
	// 'assert EXPR' is equivalent to
	// 'yield EXPR ? this : error({message: "assertion failed", "expr": EXPR_text, "on": this}'
	// where EXPR_text is the literal text of EXPR.
	return map[string]interface{}{"kind": "Yield", "exprs": []interface{}{map[string]interface{}{

		"kind": "Conditional",

		"cond": expr.([]interface{})[0],

		"then": map[string]interface{}{"kind": "ID", "name": "this"},

		"else": map[string]interface{}{

			"kind": "Call",

			"name": "error",

			"args": []interface{}{map[string]interface{}{"kind": "RecordExpr", "elems": []interface{}{

				map[string]interface{}{"kind": "Field", "name": "message", "value": map[string]interface{}{

					"kind": "Primitive", "text": "assertion failed", "type": "string"}},

				map[string]interface{}{"kind": "Field", "name": "expr", "value": map[string]interface{}{

					"kind": "Primitive", "text": expr.([]interface{})[1], "type": "string"}},

				map[string]interface{}{"kind": "Field", "name": "on", "value": map[string]interface{}{

					"kind": "ID", "name": "this"}}}}},

			"where": nil}}}}, nil

}

func (p *parser) callonAssertOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssertOp1(stack["expr"])
}

func (c *current) onSortOp10(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortOp10(stack["l"])
}

func (c *current) onSortOp1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var op = map[string]interface{}{"kind": "Sort", "args": list, "order": "asc", "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		op["order"] = "desc"
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			op["nullsfirst"] = true
		}
	}
	return op, nil

}

func (p *parser) callonSortOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortOp1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopOp8(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopOp8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp8(stack["n"])
}

func (c *current) onTopOp20(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopOp20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp20(stack["f"])
}

func (c *current) onTopOp1(limit, flush, fields interface{}) (interface{}, error) {
	var op = map[string]interface{}{"kind": "Top", "limit": 0, "args": nil, "flush": false}
	if limit != nil {
		op["limit"] = limit
	}
	if fields != nil {
		op["args"] = fields
	}
	if flush != nil {
		op["flush"] = true
	}
	return op, nil

}

func (p *parser) callonTopOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cut", "args": args}, nil

}

func (p *parser) callonCutOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutOp1(stack["args"])
}

func (c *current) onDropOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Drop", "args": args}, nil

}

func (p *parser) callonDropOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropOp1(stack["args"])
}

func (c *current) onHeadOp2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": count}, nil
}

func (p *parser) callonHeadOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOp2(stack["count"])
}

func (c *current) onHeadOp10() (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": map[string]interface{}{"kind": "Primitive", "type": "int64", "text": "1"}}, nil
}

func (p *parser) callonHeadOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOp10()
}

func (c *current) onTailOp2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": count}, nil
}

func (p *parser) callonTailOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailOp2(stack["count"])
}

func (c *current) onTailOp10() (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": map[string]interface{}{"kind": "Primitive", "type": "int64", "text": "1"}}, nil
}

func (p *parser) callonTailOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailOp10()
}

func (c *current) onWhereOp1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Where", "expr": expr}, nil

}

func (p *parser) callonWhereOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereOp1(stack["expr"])
}

func (c *current) onUniqOp2() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": true}, nil

}

func (p *parser) callonUniqOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqOp2()
}

func (c *current) onUniqOp7() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": false}, nil

}

func (p *parser) callonUniqOp7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqOp7()
}

func (c *current) onPutOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Put", "args": args}, nil

}

func (p *parser) callonPutOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutOp1(stack["args"])
}

func (c *current) onRenameOp9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameOp9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameOp9(stack["cl"])
}

func (c *current) onRenameOp1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Rename", "args": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameOp1(stack["first"], stack["rest"])
}

func (c *current) onFuseOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Fuse"}, nil

}

func (p *parser) callonFuseOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseOp1()
}

func (c *current) onShapeOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Shape"}, nil

}

func (p *parser) callonShapeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShapeOp1()
}

func (c *current) onJoinOp1(style, rightInput, key, optKey, optArgs interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Join", "style": style, "right_input": rightInput, "left_key": key, "right_key": key, "args": nil}
	if optKey != nil {
		m["right_key"] = optKey.([]interface{})[3]
	}
	if optArgs != nil {
		m["args"] = optArgs.([]interface{})[1]
	}
	return m, nil

}

func (p *parser) callonJoinOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinOp1(stack["style"], stack["rightInput"], stack["key"], stack["optKey"], stack["optArgs"])
}

func (c *current) onJoinStyle2() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle2()
}

func (c *current) onJoinStyle6() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle6()
}

func (c *current) onJoinStyle10() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle10()
}

func (c *current) onJoinStyle14() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonJoinStyle14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle14()
}

func (c *current) onJoinStyle18() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle18()
}

func (c *current) onJoinRightInput2(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonJoinRightInput2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinRightInput2(stack["s"])
}

func (c *current) onJoinRightInput12() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonJoinRightInput12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinRightInput12()
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onSampleOp1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sample", "expr": e}, nil
}

func (p *parser) callonSampleOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleOp1(stack["e"])
}

func (c *current) onOpAssignment1(a interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpAssignment", "assignments": a}, nil

}

func (p *parser) callonOpAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpAssignment1(stack["a"])
}

func (c *current) onSampleExpr2(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonSampleExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr2(stack["lval"])
}

func (c *current) onSampleExpr7() (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": "this"}, nil
}

func (p *parser) callonSampleExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr7()
}

func (c *current) onLoadOp1(pool, branch, author, message, meta interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Load", "pool": pool, "branch": branch, "author": author, "message": message, "meta": meta}, nil

}

func (p *parser) callonLoadOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLoadOp1(stack["pool"], stack["branch"], stack["author"], stack["message"], stack["meta"])
}

func (c *current) onAuthorArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonAuthorArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAuthorArg1(stack["val"])
}

func (c *current) onMessageArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonMessageArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMessageArg1(stack["val"])
}

func (c *current) onMetaArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonMetaArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMetaArg1(stack["val"])
}

func (c *current) onPoolBranch1(branch interface{}) (interface{}, error) {
	return branch, nil
}

func (p *parser) callonPoolBranch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBranch1(stack["branch"])
}

func (c *current) onFromOp1(source interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": []interface{}{map[string]interface{}{"kind": "Trunk", "source": source}}}, nil

}

func (p *parser) callonFromOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromOp1(stack["source"])
}

func (c *current) onFile1(path, format, sort_key interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "File", "path": path, "format": format, "sort_key": sort_key}, nil

}

func (p *parser) callonFile1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile1(stack["path"], stack["format"], stack["sort_key"])
}

func (c *current) onFrom1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonFrom1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrom1(stack["body"])
}

func (c *current) onPool1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonPool1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPool1(stack["body"])
}

func (c *current) onPoolBody1(spec, at interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pool", "spec": spec, "at": at}, nil

}

func (p *parser) callonPoolBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBody1(stack["spec"], stack["at"])
}

func (c *current) onGet1(url, format, sort_key, method, headers, body interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "HTTP",

		"url": url,

		"format": format,

		"sort_key": sort_key,

		"method": method,

		"headers": headers,

		"body": body}, nil

}

func (p *parser) callonGet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGet1(stack["url"], stack["format"], stack["sort_key"], stack["method"], stack["headers"], stack["body"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onMethodArg1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonMethodArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethodArg1(stack["v"])
}

func (c *current) onHeadersArg1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonHeadersArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadersArg1(stack["v"])
}

func (c *current) onBodyArg1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonBodyArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBodyArg1(stack["v"])
}

func (c *current) onPath2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonPath2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath2(stack["v"])
}

func (c *current) onPath5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPath5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath5()
}

func (c *current) onPoolAt1(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonPoolAt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolAt1(stack["id"])
}

func (c *current) onKSUID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKSUID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKSUID1()
}

func (c *current) onPoolSpec2(pool, commit, meta, tap interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": pool, "commit": commit, "meta": meta, "tap": tap}, nil

}

func (p *parser) callonPoolSpec2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec2(stack["pool"], stack["commit"], stack["meta"], stack["tap"])
}

func (c *current) onPoolSpec14(meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": nil, "commit": nil, "meta": meta}, nil

}

func (p *parser) callonPoolSpec14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec14(stack["meta"])
}

func (c *current) onPoolCommit1(commit interface{}) (interface{}, error) {
	return commit, nil
}

func (p *parser) callonPoolCommit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolCommit1(stack["commit"])
}

func (c *current) onPoolMeta1(meta interface{}) (interface{}, error) {
	return meta, nil
}

func (p *parser) callonPoolMeta1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolMeta1(stack["meta"])
}

func (c *current) onPoolName4() (interface{}, error) {
	return map[string]interface{}{"kind": "Glob", "pattern": "*"}, nil
}

func (p *parser) callonPoolName4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName4()
}

func (c *current) onPoolName9(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "String", "text": name}, nil
}

func (p *parser) callonPoolName9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName9(stack["name"])
}

func (c *current) onPoolIdentifier1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPoolIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolIdentifier1()
}

func (c *current) onSortKeyArg1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SortKey", "keys": keys, "order": order}, nil

}

func (p *parser) callonSortKeyArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortKeyArg1(stack["keys"], stack["order"])
}

func (c *current) onTapArg2() (interface{}, error) {
	return true, nil
}

func (p *parser) callonTapArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTapArg2()
}

func (c *current) onTapArg6() (interface{}, error) {
	return false, nil
}

func (p *parser) callonTapArg6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTapArg6()
}

func (c *current) onFormatArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonFormatArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArg1(stack["val"])
}

func (c *current) onOrderSuffix2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix2()
}

func (c *current) onOrderSuffix4() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderSuffix4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix4()
}

func (c *current) onOrderSuffix6() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix6()
}

func (c *current) onPassOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Pass"}, nil

}

func (p *parser) callonPassOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassOp1()
}

func (c *current) onExplodeOp1(args, typ, as interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Explode", "args": args, "as": as, "type": typ}, nil

}

func (p *parser) callonExplodeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplodeOp1(stack["args"], stack["typ"], stack["as"])
}

func (c *current) onMergeOp1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Merge", "expr": expr}, nil

}

func (p *parser) callonMergeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMergeOp1(stack["expr"])
}

func (c *current) onOverOp1(exprs, locals, body interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Over", "exprs": exprs, "locals": locals, "body": body}, nil

}

func (p *parser) callonOverOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverOp1(stack["exprs"], stack["locals"], stack["body"])
}

func (c *current) onLateral2(scope interface{}) (interface{}, error) {
	return scope, nil
}

func (p *parser) callonLateral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLateral2(stack["scope"])
}

func (c *current) onLateral13(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonLateral13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLateral13(stack["seq"])
}

func (c *current) onLocals10(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonLocals10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocals10(stack["a"])
}

func (c *current) onLocals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLocals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocals1(stack["first"], stack["rest"])
}

func (c *current) onLocalsAssignment1(name, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"name": name, "expr": map[string]interface{}{"kind": "ID", "name": name}}
	if opt != nil {
		m["expr"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonLocalsAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocalsAssignment1(stack["name"], stack["opt"])
}

func (c *current) onYieldOp1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Yield", "exprs": exprs}, nil

}

func (p *parser) callonYieldOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYieldOp1(stack["exprs"])
}

func (c *current) onTypeArg1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeArg1(stack["typ"])
}

func (c *current) onAsArg1(lhs interface{}) (interface{}, error) {
	return lhs, nil
}

func (p *parser) callonAsArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsArg1(stack["lhs"])
}

func (c *current) onLvals7(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonLvals7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals7(stack["lval"])
}

func (c *current) onLvals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLvals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals1(stack["first"], stack["rest"])
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignments7(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments7(stack["a"])
}

func (c *current) onAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr1(cond, opt interface{}) (interface{}, error) {
	if opt != nil {
		var Then = opt.([]interface{})[3]
		var Else = opt.([]interface{})[7]
		return map[string]interface{}{"kind": "Conditional", "cond": cond, "then": Then, "else": Else}, nil
	}
	return cond, nil

}

func (p *parser) callonConditionalExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr1(stack["cond"], stack["opt"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onComparisonExpr15() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparisonExpr15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr15()
}

func (c *current) onComparisonExpr1(lhs, opAndRHS interface{}) (interface{}, error) {
	if opAndRHS == nil {
		return lhs, nil
	}
	var op = opAndRHS.([]interface{})[1]
	var rhs = opAndRHS.([]interface{})[3]
	return map[string]interface{}{"kind": "BinaryExpr", "op": op, "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonComparisonExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr1(stack["lhs"], stack["opAndRHS"])
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onNegationExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "-", "operand": e}, nil

}

func (p *parser) callonNegationExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNegationExpr2(stack["e"])
}

func (c *current) onFuncExpr2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr2(stack["first"], stack["rest"])
}

func (c *current) onFuncExpr9(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr9(stack["first"], stack["rest"])
}

func (c *current) onCast1(typ, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": expr, "type": typ}, nil

}

func (p *parser) callonCast1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCast1(stack["typ"], stack["expr"])
}

func (c *current) onFunction3(arg0Text, arg1, where interface{}) (interface{}, error) {
	var arg0 = map[string]interface{}{"kind": "Primitive", "type": "string", "text": arg0Text}
	return map[string]interface{}{"kind": "Call", "name": "regexp", "args": []interface{}{arg0, arg1}, "where": where}, nil

}

func (p *parser) callonFunction3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction3(stack["arg0Text"], stack["arg1"], stack["where"])
}

func (c *current) onFunction21(arg0, arg1Text, arg2, where interface{}) (interface{}, error) {
	var arg1 = map[string]interface{}{"kind": "Primitive", "type": "string", "text": arg1Text}
	return map[string]interface{}{"kind": "Call", "name": "regexp_replace", "args": []interface{}{arg0, arg1, arg2}, "where": where}, nil

}

func (p *parser) callonFunction21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction21(stack["arg0"], stack["arg1Text"], stack["arg2"], stack["where"])
}

func (c *current) onFunction44(fn, args, where interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": fn, "args": args, "where": where}, nil

}

func (p *parser) callonFunction44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction44(stack["fn"], stack["args"], stack["where"])
}

func (c *current) onFunctionArgs2(o interface{}) (interface{}, error) {
	return []interface{}{o}, nil
}

func (p *parser) callonFunctionArgs2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunctionArgs2(stack["o"])
}

func (c *current) onGrep1(pattern, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Grep", "pattern": pattern, "expr": map[string]interface{}{"kind": "ID", "name": "this"}}
	if opt != nil {
		m["expr"] = opt.([]interface{})[2]
	}
	return m, nil

}

func (p *parser) callonGrep1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrep1(stack["pattern"], stack["opt"])
}

func (c *current) onPattern4(s interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "String", "text": s}, nil

}

func (p *parser) callonPattern4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPattern4(stack["s"])
}

func (c *current) onOptionalExprs3() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonOptionalExprs3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalExprs3()
}

func (c *current) onExprs7(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonExprs7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs7(stack["e"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr1(stack["first"], stack["rest"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref14(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": nil, "rhs": to}}, nil

}

func (p *parser) callonDeref14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref14(stack["to"])
}

func (c *current) onDeref23(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref23(stack["expr"])
}

func (c *current) onDeref29(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref29(stack["id"])
}

func (c *current) onPrimary7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary7(stack["expr"])
}

func (c *current) onPrimary15(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary15(stack["expr"])
}

func (c *current) onOverExpr1(exprs, locals, body interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OverExpr", "locals": locals, "exprs": exprs, "body": body}, nil

}

func (p *parser) callonOverExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverExpr1(stack["exprs"], stack["locals"], stack["body"])
}

func (c *current) onRecord1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RecordExpr", "elems": elems}, nil

}

func (p *parser) callonRecord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecord1(stack["elems"])
}

func (c *current) onRecordElems2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonRecordElems2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems2(stack["first"], stack["rest"])
}

func (c *current) onRecordElems9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonRecordElems9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems9()
}

func (c *current) onRecordElemTail1(elem interface{}) (interface{}, error) {
	return elem, nil
}

func (p *parser) callonRecordElemTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElemTail1(stack["elem"])
}

func (c *current) onSpread1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Spread", "expr": expr}, nil

}

func (p *parser) callonSpread1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpread1(stack["expr"])
}

func (c *current) onField1(name, value interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Field", "name": name, "value": value}, nil

}

func (p *parser) callonField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField1(stack["name"], stack["value"])
}

func (c *current) onArray1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ArrayExpr", "elems": elems}, nil

}

func (p *parser) callonArray1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArray1(stack["elems"])
}

func (c *current) onSet1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SetExpr", "elems": elems}, nil

}

func (p *parser) callonSet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSet1(stack["elems"])
}

func (c *current) onVectorElems8(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonVectorElems8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems8(stack["e"])
}

func (c *current) onVectorElems2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonVectorElems2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems2(stack["first"], stack["rest"])
}

func (c *current) onVectorElems15() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonVectorElems15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems15()
}

func (c *current) onVectorElem3(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "VectorValue", "expr": e}, nil
}

func (p *parser) callonVectorElem3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElem3(stack["e"])
}

func (c *current) onMap1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "MapExpr", "entries": exprs}, nil

}

func (p *parser) callonMap1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMap1(stack["exprs"])
}

func (c *current) onEntries2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonEntries2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries2(stack["first"], stack["rest"])
}

func (c *current) onEntries9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonEntries9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries9()
}

func (c *current) onEntryTail1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonEntryTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntryTail1(stack["e"])
}

func (c *current) onEntry1(key, value interface{}) (interface{}, error) {
	return map[string]interface{}{"key": key, "value": value}, nil

}

func (p *parser) callonEntry1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntry1(stack["key"], stack["value"])
}

func (c *current) onSQLOp1(selection, from, joins, where, groupby, having, orderby, limit interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "SQLExpr",

		"select": selection,

		"from": from,

		"joins": joins,

		"where": where,

		"group_by": groupby,

		"having": having,

		"order_by": orderby,

		"limit": limit}, nil

}

func (p *parser) callonSQLOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOp1(stack["selection"], stack["from"], stack["joins"], stack["where"], stack["groupby"], stack["having"], stack["orderby"], stack["limit"])
}

func (c *current) onSQLSelect2() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLSelect2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect2()
}

func (c *current) onSQLSelect7(assignments interface{}) (interface{}, error) {
	return assignments, nil
}

func (p *parser) callonSQLSelect7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect7(stack["assignments"])
}

func (c *current) onSQLAssignment1(rhs, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": rhs}
	if opt != nil {
		m["lhs"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonSQLAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment1(stack["rhs"], stack["opt"])
}

func (c *current) onSQLAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments7(stack["expr"])
}

func (c *current) onSQLAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSQLFrom2(table, alias interface{}) (interface{}, error) {
	return map[string]interface{}{"table": table, "alias": alias}, nil

}

func (p *parser) callonSQLFrom2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom2(stack["table"], stack["alias"])
}

func (c *current) onSQLFrom12() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLFrom12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom12()
}

func (c *current) onSQLAlias2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias2(stack["id"])
}

func (c *current) onSQLAlias9(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias9(stack["id"])
}

func (c *current) onSQLJoins7(join interface{}) (interface{}, error) {
	return join, nil
}

func (p *parser) callonSQLJoins7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins7(stack["join"])
}

func (c *current) onSQLJoins1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLJoins1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins1(stack["first"], stack["rest"])
}

func (c *current) onSQLJoin1(style, table, alias, leftKey, rightKey interface{}) (interface{}, error) {
	return map[string]interface{}{

		"table": table,

		"style": style,

		"left_key": leftKey,

		"right_key": rightKey,

		"alias": alias}, nil

}

func (p *parser) callonSQLJoin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoin1(stack["style"], stack["table"], stack["alias"], stack["leftKey"], stack["rightKey"])
}

func (c *current) onSQLJoinStyle2(style interface{}) (interface{}, error) {
	return style, nil
}

func (p *parser) callonSQLJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle2(stack["style"])
}

func (c *current) onSQLJoinStyle11() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonSQLJoinStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle11()
}

func (c *current) onSQLWhere1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLWhere1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLWhere1(stack["expr"])
}

func (c *current) onSQLGroupBy1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonSQLGroupBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLGroupBy1(stack["columns"])
}

func (c *current) onSQLHaving1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLHaving1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLHaving1(stack["expr"])
}

func (c *current) onSQLOrderBy1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SQLOrderBy", "keys": keys, "order": order}, nil

}

func (p *parser) callonSQLOrderBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrderBy1(stack["keys"], stack["order"])
}

func (c *current) onSQLOrder2(dir interface{}) (interface{}, error) {
	return dir, nil
}

func (p *parser) callonSQLOrder2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder2(stack["dir"])
}

func (c *current) onSQLOrder9() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonSQLOrder9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder9()
}

func (c *current) onSQLLimit2(count interface{}) (interface{}, error) {
	return count, nil
}

func (p *parser) callonSQLLimit2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit2(stack["count"])
}

func (c *current) onSQLLimit9() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonSQLLimit9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit9()
}

func (c *current) onSELECT1() (interface{}, error) {
	return "select", nil
}

func (p *parser) callonSELECT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSELECT1()
}

func (c *current) onAS1() (interface{}, error) {
	return "as", nil
}

func (p *parser) callonAS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAS1()
}

func (c *current) onFROM1() (interface{}, error) {
	return "from", nil
}

func (p *parser) callonFROM1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFROM1()
}

func (c *current) onJOIN1() (interface{}, error) {
	return "join", nil
}

func (p *parser) callonJOIN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJOIN1()
}

func (c *current) onWHERE1() (interface{}, error) {
	return "where", nil
}

func (p *parser) callonWHERE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWHERE1()
}

func (c *current) onGROUP1() (interface{}, error) {
	return "group", nil
}

func (p *parser) callonGROUP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGROUP1()
}

func (c *current) onBY1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonBY1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBY1()
}

func (c *current) onHAVING1() (interface{}, error) {
	return "having", nil
}

func (p *parser) callonHAVING1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHAVING1()
}

func (c *current) onORDER1() (interface{}, error) {
	return "order", nil
}

func (p *parser) callonORDER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onORDER1()
}

func (c *current) onON1() (interface{}, error) {
	return "on", nil
}

func (p *parser) callonON1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onON1()
}

func (c *current) onLIMIT1() (interface{}, error) {
	return "limit", nil
}

func (p *parser) callonLIMIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIMIT1()
}

func (c *current) onASC1() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonASC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onASC1()
}

func (c *current) onDESC1() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonDESC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDESC1()
}

func (c *current) onANTI1() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonANTI1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onANTI1()
}

func (c *current) onLEFT1() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonLEFT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLEFT1()
}

func (c *current) onRIGHT1() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonRIGHT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRIGHT1()
}

func (c *current) onINNER1() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonINNER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINNER1()
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "float64", "text": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "int64", "text": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "null", "text": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onBytesLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bytes", "text": string(c.text)}, nil

}

func (p *parser) callonBytesLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBytesLiteral1()
}

func (c *current) onTypeLiteral1(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonTypeLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeLiteral1(stack["typ"])
}

func (c *current) onCastType3(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonCastType3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCastType3(stack["typ"])
}

func (c *current) onAmbiguousType2(name interface{}) (interface{}, error) {
	return name, nil
}

func (p *parser) callonAmbiguousType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType2(stack["name"])
}

func (c *current) onAmbiguousType8(name, opt interface{}) (interface{}, error) {
	if opt != nil {
		return map[string]interface{}{"kind": "TypeDef", "name": name, "type": opt.([]interface{})[3]}, nil
	}
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType8(stack["name"], stack["opt"])
}

func (c *current) onAmbiguousType19(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType19(stack["name"])
}

func (c *current) onAmbiguousType22(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonAmbiguousType22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType22(stack["u"])
}

func (c *current) onTypeUnion1(types interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeUnion", "types": types}, nil

}

func (p *parser) callonTypeUnion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeUnion1(stack["types"])
}

func (c *current) onTypeList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeList1(stack["first"], stack["rest"])
}

func (c *current) onTypeListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeListTail1(stack["typ"])
}

func (c *current) onComplexType2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType2(stack["fields"])
}

func (c *current) onComplexType10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexType10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType10(stack["typ"])
}

func (c *current) onComplexType18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexType18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType18(stack["typ"])
}

func (c *current) onComplexType26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexType26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType26(stack["keyType"], stack["valType"])
}

func (c *current) onTemplateLiteral1(v interface{}) (interface{}, error) {
	if len(v.([]interface{})) == 0 {
		return map[string]interface{}{"kind": "Primitive", "type": "string", "text": ""}, nil
	}
	return makeTemplateExprChain(v), nil

}

func (p *parser) callonTemplateLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteral1(stack["v"])
}

func (c *current) onTemplateLiteralParts2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts2(stack["v"])
}

func (c *current) onTemplateLiteralParts9(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts9(stack["v"])
}

func (c *current) onTemplateDoubleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateDoubleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedPart3(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar2(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar7(stack["v"])
}

func (c *current) onTemplateSingleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateSingleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedPart3(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar2(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar7(stack["v"])
}

func (c *current) onTemplateExpr1(e interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "Cast",

		"expr": e,

		"type": map[string]interface{}{

			"kind": "TypeValue",

			"value": map[string]interface{}{"kind": "TypePrimitive", "name": "string"}}}, nil

}

func (p *parser) callonTemplateExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateExpr1(stack["e"])
}

func (c *current) onPrimitiveType1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveType1()
}

func (c *current) onTypeFieldList2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList2(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldList9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonTypeFieldList9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList9()
}

func (c *current) onTypeFieldListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTail1(stack["typ"])
}

func (c *current) onTypeField1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeField1(stack["name"], stack["typ"])
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return "in", nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onIdentifierName19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName19()
}

func (c *current) onIdentifierName21(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName21(stack["id"])
}

func (c *current) onIdentifierNames7(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierNames7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierNames7(stack["id"])
}

func (c *current) onIdentifierNames1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonIdentifierNames1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierNames1(stack["first"], stack["rest"])
}

func (c *current) onTime1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "time", "text": string(c.text)}, nil

}

func (p *parser) callonTime1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTime1()
}

func (c *current) onDuration1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "duration", "text": string(c.text)}, nil

}

func (p *parser) callonDuration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDuration1()
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onFloatString22() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFloatString22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString22()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordChars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordChars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordChars1()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onGlobPattern1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil

}

func (p *parser) callonGlobPattern1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobPattern1(stack["head"], stack["tail"])
}

func (c *current) onGlobStart4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonGlobStart4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobStart4()
}

func (c *current) onGlobEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonGlobEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEsc1(stack["s"])
}

func (c *current) onGlobEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonGlobEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape2()
}

func (c *current) onGlobEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonGlobEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape4()
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onSingleCharEscape3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleCharEscape3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape3()
}

func (c *current) onSingleCharEscape6() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape6()
}

func (c *current) onSingleCharEscape8() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape8()
}

func (c *current) onSingleCharEscape10() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape10()
}

func (c *current) onSingleCharEscape12() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape12()
}

func (c *current) onSingleCharEscape14() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape14()
}

func (c *current) onSingleCharEscape16() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape16()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexpPattern1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexpPattern1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpPattern1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
