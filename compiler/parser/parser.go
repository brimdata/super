// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 7, col: 1, offset: 26},
			expr: &choiceExpr{
				pos: position{line: 8, col: 5, offset: 36},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 8, col: 5, offset: 36},
						run: (*parser).callonstart2,
						expr: &seqExpr{
							pos: position{line: 8, col: 5, offset: 36},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 8, col: 5, offset: 36},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 8, col: 8, offset: 39},
									label: "scope",
									expr: &ruleRefExpr{
										pos:  position{line: 8, col: 14, offset: 45},
										name: "Scope",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 8, col: 20, offset: 51},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 8, col: 23, offset: 54},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 9, col: 5, offset: 99},
						run: (*parser).callonstart9,
						expr: &seqExpr{
							pos: position{line: 9, col: 5, offset: 99},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 9, col: 5, offset: 99},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 9, col: 8, offset: 102},
									label: "seq",
									expr: &ruleRefExpr{
										pos:  position{line: 9, col: 12, offset: 106},
										name: "Seq",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 9, col: 16, offset: 110},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 9, col: 19, offset: 113},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Scope",
			pos:  position{line: 11, col: 1, offset: 138},
			expr: &actionExpr{
				pos: position{line: 12, col: 5, offset: 148},
				run: (*parser).callonScope1,
				expr: &seqExpr{
					pos: position{line: 12, col: 5, offset: 148},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 12, col: 5, offset: 148},
							label: "decls",
							expr: &oneOrMoreExpr{
								pos: position{line: 12, col: 11, offset: 154},
								expr: &ruleRefExpr{
									pos:  position{line: 12, col: 11, offset: 154},
									name: "Decl",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 12, col: 17, offset: 160},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 12, col: 22, offset: 165},
								name: "Seq",
							},
						},
					},
				},
			},
		},
		{
			name: "Seq",
			pos:  position{line: 16, col: 1, offset: 266},
			expr: &actionExpr{
				pos: position{line: 17, col: 5, offset: 274},
				run: (*parser).callonSeq1,
				expr: &seqExpr{
					pos: position{line: 17, col: 5, offset: 274},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 5, offset: 274},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 11, offset: 280},
								name: "Operation",
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 21, offset: 290},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 17, col: 26, offset: 295},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 26, offset: 295},
									name: "SeqTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SeqTail",
			pos:  position{line: 21, col: 1, offset: 388},
			expr: &actionExpr{
				pos: position{line: 21, col: 11, offset: 398},
				run: (*parser).callonSeqTail1,
				expr: &seqExpr{
					pos: position{line: 21, col: 11, offset: 398},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 21, col: 11, offset: 398},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 14, offset: 401},
							name: "Pipe",
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 19, offset: 406},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 21, col: 22, offset: 409},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 24, offset: 411},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Decl",
			pos:  position{line: 23, col: 1, offset: 440},
			expr: &actionExpr{
				pos: position{line: 24, col: 5, offset: 449},
				run: (*parser).callonDecl1,
				expr: &seqExpr{
					pos: position{line: 24, col: 5, offset: 449},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 24, col: 5, offset: 449},
							label: "v",
							expr: &choiceExpr{
								pos: position{line: 24, col: 8, offset: 452},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 24, col: 8, offset: 452},
										name: "ConstDecl",
									},
									&ruleRefExpr{
										pos:  position{line: 24, col: 20, offset: 464},
										name: "FuncDecl",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 24, col: 30, offset: 474},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "ConstDecl",
			pos:  position{line: 26, col: 1, offset: 495},
			expr: &choiceExpr{
				pos: position{line: 27, col: 5, offset: 509},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 27, col: 5, offset: 509},
						run: (*parser).callonConstDecl2,
						expr: &seqExpr{
							pos: position{line: 27, col: 5, offset: 509},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 27, col: 5, offset: 509},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 13, offset: 517},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 15, offset: 519},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 18, offset: 522},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 33, offset: 537},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 27, col: 36, offset: 540},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 40, offset: 544},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 43, offset: 547},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 48, offset: 552},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 30, col: 5, offset: 657},
						run: (*parser).callonConstDecl13,
						expr: &seqExpr{
							pos: position{line: 30, col: 5, offset: 657},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 30, col: 5, offset: 657},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 12, offset: 664},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 14, offset: 666},
									label: "id",
									expr: &choiceExpr{
										pos: position{line: 30, col: 18, offset: 670},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 30, col: 18, offset: 670},
												name: "IdentifierName",
											},
											&ruleRefExpr{
												pos:  position{line: 30, col: 35, offset: 687},
												name: "QuotedString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 49, offset: 701},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 30, col: 52, offset: 704},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 56, offset: 708},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 59, offset: 711},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 30, col: 63, offset: 715},
										name: "Type",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuncDecl",
			pos:  position{line: 41, col: 1, offset: 984},
			expr: &actionExpr{
				pos: position{line: 42, col: 5, offset: 997},
				run: (*parser).callonFuncDecl1,
				expr: &seqExpr{
					pos: position{line: 42, col: 5, offset: 997},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 42, col: 5, offset: 997},
							val:        "func",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 12, offset: 1004},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 42, col: 14, offset: 1006},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 17, offset: 1009},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 32, offset: 1024},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 42, col: 35, offset: 1027},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 39, offset: 1031},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 42, col: 42, offset: 1034},
							label: "params",
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 49, offset: 1041},
								name: "IdentifierNames",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 65, offset: 1057},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 42, col: 68, offset: 1060},
							val:        ")",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 72, offset: 1064},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 42, col: 75, offset: 1067},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 79, offset: 1071},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 42, col: 82, offset: 1074},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 86, offset: 1078},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 42, col: 89, offset: 1081},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 94, offset: 1086},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 99, offset: 1091},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 42, col: 102, offset: 1094},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Operation",
			pos:  position{line: 55, col: 1, offset: 1278},
			expr: &choiceExpr{
				pos: position{line: 56, col: 5, offset: 1292},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 56, col: 5, offset: 1292},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 56, col: 5, offset: 1292},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 56, col: 5, offset: 1292},
									val:        "fork",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 56, col: 12, offset: 1299},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 56, col: 15, offset: 1302},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 56, col: 19, offset: 1306},
									label: "paths",
									expr: &oneOrMoreExpr{
										pos: position{line: 56, col: 25, offset: 1312},
										expr: &ruleRefExpr{
											pos:  position{line: 56, col: 25, offset: 1312},
											name: "Leg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 56, col: 30, offset: 1317},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 56, col: 33, offset: 1320},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 59, col: 5, offset: 1413},
						run: (*parser).callonOperation12,
						expr: &seqExpr{
							pos: position{line: 59, col: 5, offset: 1413},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 59, col: 5, offset: 1413},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 59, col: 14, offset: 1422},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 59, col: 16, offset: 1424},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 59, col: 21, offset: 1429},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 59, col: 26, offset: 1434},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 59, col: 28, offset: 1436},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 59, col: 32, offset: 1440},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 59, col: 38, offset: 1446},
										expr: &ruleRefExpr{
											pos:  position{line: 59, col: 38, offset: 1446},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 59, col: 49, offset: 1457},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 59, col: 52, offset: 1460},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 62, col: 5, offset: 1565},
						run: (*parser).callonOperation25,
						expr: &seqExpr{
							pos: position{line: 62, col: 5, offset: 1565},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 62, col: 5, offset: 1565},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 62, col: 14, offset: 1574},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 62, col: 17, offset: 1577},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 62, col: 21, offset: 1581},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 62, col: 27, offset: 1587},
										expr: &ruleRefExpr{
											pos:  position{line: 62, col: 27, offset: 1587},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 62, col: 38, offset: 1598},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 62, col: 41, offset: 1601},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 65, col: 5, offset: 1705},
						run: (*parser).callonOperation35,
						expr: &seqExpr{
							pos: position{line: 65, col: 5, offset: 1705},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 65, col: 5, offset: 1705},
									val:        "from",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 65, col: 12, offset: 1712},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 65, col: 15, offset: 1715},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 65, col: 19, offset: 1719},
									label: "trunks",
									expr: &oneOrMoreExpr{
										pos: position{line: 65, col: 26, offset: 1726},
										expr: &ruleRefExpr{
											pos:  position{line: 65, col: 26, offset: 1726},
											name: "FromLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 65, col: 35, offset: 1735},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 65, col: 38, offset: 1738},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 68, col: 5, offset: 1829},
						run: (*parser).callonOperation45,
						expr: &seqExpr{
							pos: position{line: 68, col: 5, offset: 1829},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 68, col: 5, offset: 1829},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 68, col: 9, offset: 1833},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 68, col: 12, offset: 1836},
									label: "scope",
									expr: &ruleRefExpr{
										pos:  position{line: 68, col: 18, offset: 1842},
										name: "Scope",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 68, col: 24, offset: 1848},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 68, col: 27, offset: 1851},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&labeledExpr{
						pos:   position{line: 69, col: 5, offset: 1881},
						label: "op",
						expr: &ruleRefExpr{
							pos:  position{line: 69, col: 8, offset: 1884},
							name: "Operator",
						},
					},
					&actionExpr{
						pos: position{line: 70, col: 5, offset: 1897},
						run: (*parser).callonOperation55,
						expr: &seqExpr{
							pos: position{line: 70, col: 5, offset: 1897},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 70, col: 5, offset: 1897},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 70, col: 7, offset: 1899},
										name: "OpAssignment",
									},
								},
								&andExpr{
									pos: position{line: 70, col: 20, offset: 1912},
									expr: &ruleRefExpr{
										pos:  position{line: 70, col: 21, offset: 1913},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 71, col: 5, offset: 1943},
						run: (*parser).callonOperation61,
						expr: &seqExpr{
							pos: position{line: 71, col: 5, offset: 1943},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 71, col: 5, offset: 1943},
									expr: &seqExpr{
										pos: position{line: 71, col: 7, offset: 1945},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 71, col: 7, offset: 1945},
												name: "Function",
											},
											&ruleRefExpr{
												pos:  position{line: 71, col: 16, offset: 1954},
												name: "EndOfOp",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 71, col: 25, offset: 1963},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 71, col: 27, offset: 1965},
										name: "Aggregation",
									},
								},
								&andExpr{
									pos: position{line: 71, col: 39, offset: 1977},
									expr: &ruleRefExpr{
										pos:  position{line: 71, col: 40, offset: 1978},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 72, col: 5, offset: 2008},
						run: (*parser).callonOperation71,
						expr: &seqExpr{
							pos: position{line: 72, col: 5, offset: 2008},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 72, col: 5, offset: 2008},
									val:        "search",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 72, col: 14, offset: 2017},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 72, col: 16, offset: 2019},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 72, col: 21, offset: 2024},
										name: "SearchBoolean",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 75, col: 5, offset: 2123},
						run: (*parser).callonOperation77,
						expr: &labeledExpr{
							pos:   position{line: 75, col: 5, offset: 2123},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 75, col: 10, offset: 2128},
								name: "SearchBoolean",
							},
						},
					},
					&actionExpr{
						pos: position{line: 78, col: 5, offset: 2227},
						run: (*parser).callonOperation80,
						expr: &labeledExpr{
							pos:   position{line: 78, col: 5, offset: 2227},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 78, col: 10, offset: 2232},
								name: "Cast",
							},
						},
					},
					&actionExpr{
						pos: position{line: 81, col: 5, offset: 2320},
						run: (*parser).callonOperation83,
						expr: &labeledExpr{
							pos:   position{line: 81, col: 5, offset: 2320},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 81, col: 10, offset: 2325},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "EndOfOp",
			pos:  position{line: 85, col: 1, offset: 2412},
			expr: &seqExpr{
				pos: position{line: 85, col: 11, offset: 2422},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 85, col: 11, offset: 2422},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 85, col: 15, offset: 2426},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 85, col: 15, offset: 2426},
								name: "Pipe",
							},
							&ruleRefExpr{
								pos:  position{line: 85, col: 22, offset: 2433},
								name: "SearchKeywordGuard",
							},
							&litMatcher{
								pos:        position{line: 85, col: 43, offset: 2454},
								val:        "=>",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 85, col: 50, offset: 2461},
								val:        ")",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 85, col: 56, offset: 2467},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "Pipe",
			pos:  position{line: 86, col: 1, offset: 2472},
			expr: &seqExpr{
				pos: position{line: 86, col: 8, offset: 2479},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 86, col: 8, offset: 2479},
						val:        "|",
						ignoreCase: false,
					},
					&notExpr{
						pos: position{line: 86, col: 12, offset: 2483},
						expr: &choiceExpr{
							pos: position{line: 86, col: 14, offset: 2485},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 86, col: 14, offset: 2485},
									val:        "{",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 86, col: 20, offset: 2491},
									val:        "[",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Leg",
			pos:  position{line: 88, col: 1, offset: 2497},
			expr: &actionExpr{
				pos: position{line: 88, col: 7, offset: 2503},
				run: (*parser).callonLeg1,
				expr: &seqExpr{
					pos: position{line: 88, col: 7, offset: 2503},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 88, col: 7, offset: 2503},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 88, col: 10, offset: 2506},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 88, col: 15, offset: 2511},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 88, col: 18, offset: 2514},
							label: "seq",
							expr: &ruleRefExpr{
								pos:  position{line: 88, col: 22, offset: 2518},
								name: "Seq",
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchLeg",
			pos:  position{line: 90, col: 1, offset: 2543},
			expr: &actionExpr{
				pos: position{line: 91, col: 5, offset: 2557},
				run: (*parser).callonSwitchLeg1,
				expr: &seqExpr{
					pos: position{line: 91, col: 5, offset: 2557},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 91, col: 5, offset: 2557},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 91, col: 8, offset: 2560},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 91, col: 13, offset: 2565},
								name: "Case",
							},
						},
						&labeledExpr{
							pos:   position{line: 91, col: 18, offset: 2570},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 91, col: 23, offset: 2575},
								name: "Leg",
							},
						},
					},
				},
			},
		},
		{
			name: "Case",
			pos:  position{line: 95, col: 1, offset: 2657},
			expr: &choiceExpr{
				pos: position{line: 96, col: 5, offset: 2666},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 96, col: 5, offset: 2666},
						run: (*parser).callonCase2,
						expr: &seqExpr{
							pos: position{line: 96, col: 5, offset: 2666},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 96, col: 5, offset: 2666},
									val:        "case",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 96, col: 12, offset: 2673},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 96, col: 14, offset: 2675},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 96, col: 19, offset: 2680},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 97, col: 5, offset: 2710},
						run: (*parser).callonCase8,
						expr: &litMatcher{
							pos:        position{line: 97, col: 5, offset: 2710},
							val:        "default",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromLeg",
			pos:  position{line: 99, col: 1, offset: 2741},
			expr: &actionExpr{
				pos: position{line: 100, col: 5, offset: 2753},
				run: (*parser).callonFromLeg1,
				expr: &seqExpr{
					pos: position{line: 100, col: 5, offset: 2753},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 100, col: 5, offset: 2753},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 100, col: 8, offset: 2756},
							label: "source",
							expr: &ruleRefExpr{
								pos:  position{line: 100, col: 15, offset: 2763},
								name: "FromSource",
							},
						},
						&labeledExpr{
							pos:   position{line: 100, col: 26, offset: 2774},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 100, col: 30, offset: 2778},
								expr: &seqExpr{
									pos: position{line: 100, col: 31, offset: 2779},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 100, col: 31, offset: 2779},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 100, col: 34, offset: 2782},
											val:        "=>",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 100, col: 39, offset: 2787},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 100, col: 42, offset: 2790},
											name: "Seq",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FromSource",
			pos:  position{line: 108, col: 1, offset: 2981},
			expr: &choiceExpr{
				pos: position{line: 109, col: 5, offset: 2996},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 109, col: 5, offset: 2996},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 110, col: 5, offset: 3005},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 111, col: 5, offset: 3013},
						name: "Pool",
					},
					&ruleRefExpr{
						pos:  position{line: 112, col: 5, offset: 3022},
						name: "PassOp",
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 114, col: 1, offset: 3030},
			expr: &seqExpr{
				pos: position{line: 114, col: 13, offset: 3042},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 114, col: 13, offset: 3042},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 114, col: 17, offset: 3046},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 114, col: 18, offset: 3047},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 114, col: 18, offset: 3047},
										expr: &litMatcher{
											pos:        position{line: 114, col: 19, offset: 3048},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 114, col: 24, offset: 3053},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 114, col: 38, offset: 3067},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 114, col: 57, offset: 3086},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 114, col: 82, offset: 3111},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 114, col: 88, offset: 3117},
								val:        "(",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 114, col: 94, offset: 3123},
								val:        "[",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 114, col: 100, offset: 3129},
								val:        "~",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 116, col: 1, offset: 3135},
			expr: &actionExpr{
				pos: position{line: 116, col: 14, offset: 3148},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 116, col: 15, offset: 3149},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 116, col: 15, offset: 3149},
							val:        "==",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 116, col: 22, offset: 3156},
							val:        "!=",
							ignoreCase: false,
						},
						&seqExpr{
							pos: position{line: 116, col: 30, offset: 3164},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 116, col: 30, offset: 3164},
									val:        "in",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 116, col: 35, offset: 3169},
									expr: &ruleRefExpr{
										pos:  position{line: 116, col: 36, offset: 3170},
										name: "IdentifierRest",
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 116, col: 54, offset: 3188},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 116, col: 61, offset: 3195},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 116, col: 67, offset: 3201},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 116, col: 74, offset: 3208},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 118, col: 1, offset: 3245},
			expr: &actionExpr{
				pos: position{line: 119, col: 5, offset: 3263},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 119, col: 5, offset: 3263},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 119, col: 5, offset: 3263},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 119, col: 11, offset: 3269},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 119, col: 21, offset: 3279},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 119, col: 26, offset: 3284},
								expr: &ruleRefExpr{
									pos:  position{line: 119, col: 26, offset: 3284},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 123, col: 1, offset: 3358},
			expr: &actionExpr{
				pos: position{line: 123, col: 16, offset: 3373},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 123, col: 16, offset: 3373},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 123, col: 16, offset: 3373},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 123, col: 18, offset: 3375},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 123, col: 26, offset: 3383},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 123, col: 28, offset: 3385},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 123, col: 30, offset: 3387},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 125, col: 1, offset: 3437},
			expr: &actionExpr{
				pos: position{line: 126, col: 5, offset: 3451},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 126, col: 5, offset: 3451},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 126, col: 5, offset: 3451},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 126, col: 11, offset: 3457},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 127, col: 5, offset: 3474},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 127, col: 10, offset: 3479},
								expr: &actionExpr{
									pos: position{line: 127, col: 11, offset: 3480},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 127, col: 11, offset: 3480},
										exprs: []interface{}{
											&zeroOrOneExpr{
												pos: position{line: 127, col: 11, offset: 3480},
												expr: &seqExpr{
													pos: position{line: 127, col: 12, offset: 3481},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 127, col: 12, offset: 3481},
															name: "_",
														},
														&ruleRefExpr{
															pos:  position{line: 127, col: 14, offset: 3483},
															name: "AndToken",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 127, col: 25, offset: 3494},
												name: "_",
											},
											&notExpr{
												pos: position{line: 127, col: 27, offset: 3496},
												expr: &choiceExpr{
													pos: position{line: 127, col: 29, offset: 3498},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 127, col: 29, offset: 3498},
															name: "OrToken",
														},
														&ruleRefExpr{
															pos:  position{line: 127, col: 39, offset: 3508},
															name: "SearchKeywordGuard",
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 127, col: 59, offset: 3528},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 127, col: 64, offset: 3533},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchKeywordGuard",
			pos:  position{line: 131, col: 1, offset: 3651},
			expr: &choiceExpr{
				pos: position{line: 132, col: 5, offset: 3674},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 132, col: 5, offset: 3674},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 132, col: 5, offset: 3674},
								name: "FromSource",
							},
							&ruleRefExpr{
								pos:  position{line: 132, col: 16, offset: 3685},
								name: "__",
							},
							&litMatcher{
								pos:        position{line: 132, col: 19, offset: 3688},
								val:        "=>",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 132, col: 24, offset: 3693},
								name: "__",
							},
						},
					},
					&seqExpr{
						pos: position{line: 133, col: 5, offset: 3700},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 133, col: 5, offset: 3700},
								name: "Case",
							},
							&ruleRefExpr{
								pos:  position{line: 133, col: 10, offset: 3705},
								name: "__",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 135, col: 1, offset: 3709},
			expr: &choiceExpr{
				pos: position{line: 136, col: 5, offset: 3726},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 136, col: 5, offset: 3726},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 136, col: 5, offset: 3726},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 136, col: 6, offset: 3727},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 136, col: 6, offset: 3727},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 136, col: 6, offset: 3727},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 136, col: 15, offset: 3736},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 136, col: 19, offset: 3740},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 136, col: 19, offset: 3740},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 136, col: 23, offset: 3744},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 136, col: 27, offset: 3748},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 136, col: 29, offset: 3750},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 139, col: 5, offset: 3862},
						run: (*parser).callonSearchFactor13,
						expr: &seqExpr{
							pos: position{line: 139, col: 5, offset: 3862},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 139, col: 5, offset: 3862},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 139, col: 9, offset: 3866},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 139, col: 12, offset: 3869},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 139, col: 17, offset: 3874},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 139, col: 31, offset: 3888},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 139, col: 34, offset: 3891},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 140, col: 5, offset: 3920},
						name: "SearchExpr",
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 142, col: 1, offset: 3932},
			expr: &choiceExpr{
				pos: position{line: 143, col: 5, offset: 3947},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 143, col: 5, offset: 3947},
						name: "Glob",
					},
					&ruleRefExpr{
						pos:  position{line: 144, col: 5, offset: 3956},
						name: "Regexp",
					},
					&actionExpr{
						pos: position{line: 145, col: 5, offset: 3967},
						run: (*parser).callonSearchExpr4,
						expr: &seqExpr{
							pos: position{line: 145, col: 5, offset: 3967},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 145, col: 5, offset: 3967},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 145, col: 7, offset: 3969},
										name: "SearchValue",
									},
								},
								&choiceExpr{
									pos: position{line: 145, col: 20, offset: 3982},
									alternatives: []interface{}{
										&notExpr{
											pos: position{line: 145, col: 20, offset: 3982},
											expr: &ruleRefExpr{
												pos:  position{line: 145, col: 21, offset: 3983},
												name: "ExprGuard",
											},
										},
										&andExpr{
											pos: position{line: 145, col: 33, offset: 3995},
											expr: &seqExpr{
												pos: position{line: 145, col: 35, offset: 3997},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 145, col: 35, offset: 3997},
														name: "_",
													},
													&ruleRefExpr{
														pos:  position{line: 145, col: 37, offset: 3999},
														name: "Glob",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 148, col: 5, offset: 4111},
						run: (*parser).callonSearchExpr15,
						expr: &seqExpr{
							pos: position{line: 148, col: 5, offset: 4111},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 148, col: 5, offset: 4111},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 148, col: 9, offset: 4115},
									expr: &ruleRefExpr{
										pos:  position{line: 148, col: 10, offset: 4116},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 151, col: 5, offset: 4232},
						name: "SearchPredicate",
					},
				},
			},
		},
		{
			name: "SearchPredicate",
			pos:  position{line: 153, col: 1, offset: 4249},
			expr: &choiceExpr{
				pos: position{line: 154, col: 5, offset: 4269},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 154, col: 5, offset: 4269},
						run: (*parser).callonSearchPredicate2,
						expr: &seqExpr{
							pos: position{line: 154, col: 5, offset: 4269},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 154, col: 5, offset: 4269},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 154, col: 9, offset: 4273},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 154, col: 22, offset: 4286},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 154, col: 25, offset: 4289},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 154, col: 28, offset: 4292},
										name: "Comparator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 154, col: 39, offset: 4303},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 154, col: 42, offset: 4306},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 154, col: 46, offset: 4310},
										name: "AdditiveExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 157, col: 6, offset: 4433},
						run: (*parser).callonSearchPredicate12,
						expr: &seqExpr{
							pos: position{line: 157, col: 6, offset: 4433},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 157, col: 6, offset: 4433},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 157, col: 12, offset: 4439},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 157, col: 21, offset: 4448},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 157, col: 26, offset: 4453},
										expr: &ruleRefExpr{
											pos:  position{line: 157, col: 27, offset: 4454},
											name: "Deref",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 161, col: 1, offset: 4526},
			expr: &choiceExpr{
				pos: position{line: 162, col: 5, offset: 4542},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 162, col: 5, offset: 4542},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 163, col: 5, offset: 4554},
						run: (*parser).callonSearchValue3,
						expr: &seqExpr{
							pos: position{line: 163, col: 5, offset: 4554},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 163, col: 5, offset: 4554},
									expr: &ruleRefExpr{
										pos:  position{line: 163, col: 6, offset: 4555},
										name: "RegexpPattern",
									},
								},
								&labeledExpr{
									pos:   position{line: 163, col: 20, offset: 4569},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 163, col: 22, offset: 4571},
										name: "KeyWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Glob",
			pos:  position{line: 167, col: 1, offset: 4679},
			expr: &actionExpr{
				pos: position{line: 168, col: 5, offset: 4688},
				run: (*parser).callonGlob1,
				expr: &labeledExpr{
					pos:   position{line: 168, col: 5, offset: 4688},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 168, col: 13, offset: 4696},
						name: "GlobPattern",
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 172, col: 1, offset: 4792},
			expr: &actionExpr{
				pos: position{line: 173, col: 5, offset: 4803},
				run: (*parser).callonRegexp1,
				expr: &labeledExpr{
					pos:   position{line: 173, col: 5, offset: 4803},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 173, col: 13, offset: 4811},
						name: "RegexpPattern",
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 179, col: 1, offset: 4937},
			expr: &choiceExpr{
				pos: position{line: 180, col: 5, offset: 4953},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 180, col: 5, offset: 4953},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 180, col: 5, offset: 4953},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 180, col: 5, offset: 4953},
									expr: &ruleRefExpr{
										pos:  position{line: 180, col: 5, offset: 4953},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 180, col: 16, offset: 4964},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 180, col: 21, offset: 4969},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 180, col: 33, offset: 4981},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 180, col: 39, offset: 4987},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 183, col: 5, offset: 5113},
						run: (*parser).callonAggregation10,
						expr: &seqExpr{
							pos: position{line: 183, col: 5, offset: 5113},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 183, col: 5, offset: 5113},
									expr: &ruleRefExpr{
										pos:  position{line: 183, col: 5, offset: 5113},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 183, col: 16, offset: 5124},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 183, col: 21, offset: 5129},
										name: "AggAssignments",
									},
								},
								&labeledExpr{
									pos:   position{line: 183, col: 36, offset: 5144},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 183, col: 41, offset: 5149},
										expr: &seqExpr{
											pos: position{line: 183, col: 42, offset: 5150},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 183, col: 42, offset: 5150},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 183, col: 44, offset: 5152},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 183, col: 58, offset: 5166},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 183, col: 64, offset: 5172},
										name: "LimitArg",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Summarize",
			pos:  position{line: 191, col: 1, offset: 5386},
			expr: &seqExpr{
				pos: position{line: 191, col: 13, offset: 5398},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 191, col: 13, offset: 5398},
						val:        "summarize",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 191, col: 25, offset: 5410},
						name: "_",
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 193, col: 1, offset: 5413},
			expr: &actionExpr{
				pos: position{line: 194, col: 5, offset: 5429},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 194, col: 5, offset: 5429},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 194, col: 5, offset: 5429},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 194, col: 13, offset: 5437},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 194, col: 15, offset: 5439},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 194, col: 23, offset: 5447},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 196, col: 1, offset: 5488},
			expr: &choiceExpr{
				pos: position{line: 197, col: 5, offset: 5501},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 197, col: 5, offset: 5501},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 197, col: 5, offset: 5501},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 197, col: 5, offset: 5501},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 197, col: 7, offset: 5503},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 197, col: 14, offset: 5510},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 197, col: 16, offset: 5512},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 197, col: 25, offset: 5521},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 197, col: 27, offset: 5523},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 197, col: 33, offset: 5529},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 198, col: 5, offset: 5560},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 198, col: 5, offset: 5560},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 203, col: 1, offset: 5820},
			expr: &choiceExpr{
				pos: position{line: 204, col: 5, offset: 5839},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 204, col: 5, offset: 5839},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 205, col: 5, offset: 5854},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 205, col: 5, offset: 5854},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 205, col: 10, offset: 5859},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 207, col: 1, offset: 5951},
			expr: &actionExpr{
				pos: position{line: 208, col: 5, offset: 5971},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 208, col: 5, offset: 5971},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 208, col: 5, offset: 5971},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 208, col: 11, offset: 5977},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 208, col: 26, offset: 5992},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 208, col: 31, offset: 5997},
								expr: &actionExpr{
									pos: position{line: 208, col: 32, offset: 5998},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 208, col: 32, offset: 5998},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 208, col: 32, offset: 5998},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 208, col: 35, offset: 6001},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 208, col: 39, offset: 6005},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 208, col: 42, offset: 6008},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 208, col: 47, offset: 6013},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignment",
			pos:  position{line: 212, col: 1, offset: 6135},
			expr: &choiceExpr{
				pos: position{line: 213, col: 5, offset: 6153},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 213, col: 5, offset: 6153},
						run: (*parser).callonAggAssignment2,
						expr: &seqExpr{
							pos: position{line: 213, col: 5, offset: 6153},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 213, col: 5, offset: 6153},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 213, col: 10, offset: 6158},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 213, col: 15, offset: 6163},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 213, col: 18, offset: 6166},
									val:        ":=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 213, col: 23, offset: 6171},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 213, col: 26, offset: 6174},
									label: "agg",
									expr: &ruleRefExpr{
										pos:  position{line: 213, col: 30, offset: 6178},
										name: "Agg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 216, col: 5, offset: 6282},
						run: (*parser).callonAggAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 216, col: 5, offset: 6282},
							label: "agg",
							expr: &ruleRefExpr{
								pos:  position{line: 216, col: 9, offset: 6286},
								name: "Agg",
							},
						},
					},
				},
			},
		},
		{
			name: "Agg",
			pos:  position{line: 220, col: 1, offset: 6386},
			expr: &actionExpr{
				pos: position{line: 221, col: 5, offset: 6394},
				run: (*parser).callonAgg1,
				expr: &seqExpr{
					pos: position{line: 221, col: 5, offset: 6394},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 221, col: 5, offset: 6394},
							expr: &ruleRefExpr{
								pos:  position{line: 221, col: 6, offset: 6395},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 221, col: 16, offset: 6405},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 221, col: 19, offset: 6408},
								name: "AggName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 221, col: 27, offset: 6416},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 221, col: 30, offset: 6419},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 221, col: 34, offset: 6423},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 221, col: 37, offset: 6426},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 221, col: 42, offset: 6431},
								expr: &choiceExpr{
									pos: position{line: 221, col: 43, offset: 6432},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 221, col: 43, offset: 6432},
											name: "OverExpr",
										},
										&ruleRefExpr{
											pos:  position{line: 221, col: 54, offset: 6443},
											name: "Expr",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 221, col: 61, offset: 6450},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 221, col: 64, offset: 6453},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 221, col: 68, offset: 6457},
							expr: &seqExpr{
								pos: position{line: 221, col: 70, offset: 6459},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 221, col: 70, offset: 6459},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 221, col: 73, offset: 6462},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 221, col: 78, offset: 6467},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 221, col: 84, offset: 6473},
								expr: &ruleRefExpr{
									pos:  position{line: 221, col: 84, offset: 6473},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggName",
			pos:  position{line: 229, col: 1, offset: 6664},
			expr: &choiceExpr{
				pos: position{line: 230, col: 5, offset: 6676},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 230, col: 5, offset: 6676},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 231, col: 5, offset: 6695},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 232, col: 5, offset: 6708},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 234, col: 1, offset: 6717},
			expr: &actionExpr{
				pos: position{line: 234, col: 15, offset: 6731},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 234, col: 15, offset: 6731},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 234, col: 15, offset: 6731},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 234, col: 17, offset: 6733},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 234, col: 25, offset: 6741},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 234, col: 27, offset: 6743},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 234, col: 32, offset: 6748},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignments",
			pos:  position{line: 236, col: 1, offset: 6784},
			expr: &actionExpr{
				pos: position{line: 237, col: 5, offset: 6803},
				run: (*parser).callonAggAssignments1,
				expr: &seqExpr{
					pos: position{line: 237, col: 5, offset: 6803},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 237, col: 5, offset: 6803},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 237, col: 11, offset: 6809},
								name: "AggAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 237, col: 25, offset: 6823},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 237, col: 30, offset: 6828},
								expr: &seqExpr{
									pos: position{line: 237, col: 31, offset: 6829},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 237, col: 31, offset: 6829},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 237, col: 34, offset: 6832},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 237, col: 38, offset: 6836},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 237, col: 41, offset: 6839},
											name: "AggAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 247, col: 1, offset: 7063},
			expr: &choiceExpr{
				pos: position{line: 248, col: 5, offset: 7076},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 248, col: 5, offset: 7076},
						name: "AssertOp",
					},
					&ruleRefExpr{
						pos:  position{line: 249, col: 5, offset: 7089},
						name: "SortOp",
					},
					&ruleRefExpr{
						pos:  position{line: 250, col: 5, offset: 7100},
						name: "TopOp",
					},
					&ruleRefExpr{
						pos:  position{line: 251, col: 5, offset: 7110},
						name: "CutOp",
					},
					&ruleRefExpr{
						pos:  position{line: 252, col: 5, offset: 7120},
						name: "DropOp",
					},
					&ruleRefExpr{
						pos:  position{line: 253, col: 5, offset: 7131},
						name: "HeadOp",
					},
					&ruleRefExpr{
						pos:  position{line: 254, col: 5, offset: 7142},
						name: "TailOp",
					},
					&ruleRefExpr{
						pos:  position{line: 255, col: 5, offset: 7153},
						name: "WhereOp",
					},
					&ruleRefExpr{
						pos:  position{line: 256, col: 5, offset: 7165},
						name: "UniqOp",
					},
					&ruleRefExpr{
						pos:  position{line: 257, col: 5, offset: 7176},
						name: "PutOp",
					},
					&ruleRefExpr{
						pos:  position{line: 258, col: 5, offset: 7186},
						name: "RenameOp",
					},
					&ruleRefExpr{
						pos:  position{line: 259, col: 5, offset: 7199},
						name: "FuseOp",
					},
					&ruleRefExpr{
						pos:  position{line: 260, col: 5, offset: 7210},
						name: "ShapeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 261, col: 5, offset: 7222},
						name: "JoinOp",
					},
					&ruleRefExpr{
						pos:  position{line: 262, col: 5, offset: 7233},
						name: "SampleOp",
					},
					&ruleRefExpr{
						pos:  position{line: 263, col: 5, offset: 7246},
						name: "SQLOp",
					},
					&ruleRefExpr{
						pos:  position{line: 264, col: 5, offset: 7256},
						name: "FromOp",
					},
					&ruleRefExpr{
						pos:  position{line: 265, col: 5, offset: 7267},
						name: "PassOp",
					},
					&ruleRefExpr{
						pos:  position{line: 266, col: 5, offset: 7278},
						name: "ExplodeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 267, col: 5, offset: 7292},
						name: "MergeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 268, col: 5, offset: 7304},
						name: "OverOp",
					},
					&ruleRefExpr{
						pos:  position{line: 269, col: 5, offset: 7315},
						name: "YieldOp",
					},
				},
			},
		},
		{
			name: "AssertOp",
			pos:  position{line: 271, col: 1, offset: 7324},
			expr: &actionExpr{
				pos: position{line: 272, col: 5, offset: 7337},
				run: (*parser).callonAssertOp1,
				expr: &seqExpr{
					pos: position{line: 272, col: 5, offset: 7337},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 272, col: 5, offset: 7337},
							val:        "assert",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 272, col: 14, offset: 7346},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 272, col: 16, offset: 7348},
							label: "expr",
							expr: &actionExpr{
								pos: position{line: 272, col: 22, offset: 7354},
								run: (*parser).callonAssertOp6,
								expr: &labeledExpr{
									pos:   position{line: 272, col: 22, offset: 7354},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 272, col: 24, offset: 7356},
										name: "Expr",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortOp",
			pos:  position{line: 308, col: 1, offset: 8707},
			expr: &actionExpr{
				pos: position{line: 309, col: 5, offset: 8718},
				run: (*parser).callonSortOp1,
				expr: &seqExpr{
					pos: position{line: 309, col: 5, offset: 8718},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 309, col: 5, offset: 8718},
							val:        "sort",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 309, col: 12, offset: 8725},
							expr: &ruleRefExpr{
								pos:  position{line: 309, col: 13, offset: 8726},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 309, col: 18, offset: 8731},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 309, col: 23, offset: 8736},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 309, col: 32, offset: 8745},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 309, col: 37, offset: 8750},
								expr: &actionExpr{
									pos: position{line: 309, col: 38, offset: 8751},
									run: (*parser).callonSortOp10,
									expr: &seqExpr{
										pos: position{line: 309, col: 38, offset: 8751},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 309, col: 38, offset: 8751},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 309, col: 40, offset: 8753},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 309, col: 42, offset: 8755},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 323, col: 1, offset: 9166},
			expr: &actionExpr{
				pos: position{line: 323, col: 12, offset: 9177},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 323, col: 12, offset: 9177},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 323, col: 17, offset: 9182},
						expr: &actionExpr{
							pos: position{line: 323, col: 18, offset: 9183},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 323, col: 18, offset: 9183},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 323, col: 18, offset: 9183},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 323, col: 20, offset: 9185},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 323, col: 22, offset: 9187},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 325, col: 1, offset: 9244},
			expr: &choiceExpr{
				pos: position{line: 326, col: 5, offset: 9256},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 326, col: 5, offset: 9256},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 326, col: 5, offset: 9256},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 327, col: 5, offset: 9331},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 327, col: 5, offset: 9331},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 327, col: 5, offset: 9331},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 327, col: 14, offset: 9340},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 327, col: 16, offset: 9342},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 327, col: 23, offset: 9349},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 327, col: 24, offset: 9350},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 327, col: 24, offset: 9350},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 327, col: 34, offset: 9360},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopOp",
			pos:  position{line: 329, col: 1, offset: 9473},
			expr: &actionExpr{
				pos: position{line: 330, col: 5, offset: 9483},
				run: (*parser).callonTopOp1,
				expr: &seqExpr{
					pos: position{line: 330, col: 5, offset: 9483},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 330, col: 5, offset: 9483},
							val:        "top",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 330, col: 11, offset: 9489},
							expr: &ruleRefExpr{
								pos:  position{line: 330, col: 12, offset: 9490},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 330, col: 17, offset: 9495},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 330, col: 23, offset: 9501},
								expr: &actionExpr{
									pos: position{line: 330, col: 24, offset: 9502},
									run: (*parser).callonTopOp8,
									expr: &seqExpr{
										pos: position{line: 330, col: 24, offset: 9502},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 330, col: 24, offset: 9502},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 330, col: 26, offset: 9504},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 330, col: 28, offset: 9506},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 330, col: 53, offset: 9531},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 330, col: 59, offset: 9537},
								expr: &seqExpr{
									pos: position{line: 330, col: 60, offset: 9538},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 330, col: 60, offset: 9538},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 330, col: 62, offset: 9540},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 330, col: 73, offset: 9551},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 330, col: 80, offset: 9558},
								expr: &actionExpr{
									pos: position{line: 330, col: 81, offset: 9559},
									run: (*parser).callonTopOp20,
									expr: &seqExpr{
										pos: position{line: 330, col: 81, offset: 9559},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 330, col: 81, offset: 9559},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 330, col: 83, offset: 9561},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 330, col: 85, offset: 9563},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutOp",
			pos:  position{line: 344, col: 1, offset: 9898},
			expr: &actionExpr{
				pos: position{line: 345, col: 5, offset: 9908},
				run: (*parser).callonCutOp1,
				expr: &seqExpr{
					pos: position{line: 345, col: 5, offset: 9908},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 345, col: 5, offset: 9908},
							val:        "cut",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 345, col: 11, offset: 9914},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 345, col: 13, offset: 9916},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 345, col: 18, offset: 9921},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropOp",
			pos:  position{line: 349, col: 1, offset: 10016},
			expr: &actionExpr{
				pos: position{line: 350, col: 5, offset: 10027},
				run: (*parser).callonDropOp1,
				expr: &seqExpr{
					pos: position{line: 350, col: 5, offset: 10027},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 350, col: 5, offset: 10027},
							val:        "drop",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 350, col: 12, offset: 10034},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 350, col: 14, offset: 10036},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 350, col: 19, offset: 10041},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadOp",
			pos:  position{line: 354, col: 1, offset: 10132},
			expr: &choiceExpr{
				pos: position{line: 355, col: 5, offset: 10143},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 355, col: 5, offset: 10143},
						run: (*parser).callonHeadOp2,
						expr: &seqExpr{
							pos: position{line: 355, col: 5, offset: 10143},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 355, col: 5, offset: 10143},
									val:        "head",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 355, col: 12, offset: 10150},
									name: "_",
								},
								&notExpr{
									pos: position{line: 355, col: 14, offset: 10152},
									expr: &ruleRefExpr{
										pos:  position{line: 355, col: 15, offset: 10153},
										name: "EndOfOp",
									},
								},
								&labeledExpr{
									pos:   position{line: 355, col: 23, offset: 10161},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 355, col: 29, offset: 10167},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 356, col: 5, offset: 10247},
						run: (*parser).callonHeadOp10,
						expr: &litMatcher{
							pos:        position{line: 356, col: 5, offset: 10247},
							val:        "head",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TailOp",
			pos:  position{line: 358, col: 1, offset: 10394},
			expr: &choiceExpr{
				pos: position{line: 359, col: 5, offset: 10405},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 359, col: 5, offset: 10405},
						run: (*parser).callonTailOp2,
						expr: &seqExpr{
							pos: position{line: 359, col: 5, offset: 10405},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 359, col: 5, offset: 10405},
									val:        "tail",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 359, col: 12, offset: 10412},
									name: "_",
								},
								&notExpr{
									pos: position{line: 359, col: 14, offset: 10414},
									expr: &ruleRefExpr{
										pos:  position{line: 359, col: 15, offset: 10415},
										name: "EndOfOp",
									},
								},
								&labeledExpr{
									pos:   position{line: 359, col: 23, offset: 10423},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 359, col: 29, offset: 10429},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 360, col: 5, offset: 10509},
						run: (*parser).callonTailOp10,
						expr: &litMatcher{
							pos:        position{line: 360, col: 5, offset: 10509},
							val:        "tail",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "WhereOp",
			pos:  position{line: 362, col: 1, offset: 10656},
			expr: &actionExpr{
				pos: position{line: 363, col: 5, offset: 10668},
				run: (*parser).callonWhereOp1,
				expr: &seqExpr{
					pos: position{line: 363, col: 5, offset: 10668},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 363, col: 5, offset: 10668},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 363, col: 13, offset: 10676},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 363, col: 15, offset: 10678},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 363, col: 20, offset: 10683},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "UniqOp",
			pos:  position{line: 367, col: 1, offset: 10769},
			expr: &choiceExpr{
				pos: position{line: 368, col: 5, offset: 10780},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 368, col: 5, offset: 10780},
						run: (*parser).callonUniqOp2,
						expr: &seqExpr{
							pos: position{line: 368, col: 5, offset: 10780},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 368, col: 5, offset: 10780},
									val:        "uniq",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 368, col: 12, offset: 10787},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 368, col: 14, offset: 10789},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 371, col: 5, offset: 10878},
						run: (*parser).callonUniqOp7,
						expr: &litMatcher{
							pos:        position{line: 371, col: 5, offset: 10878},
							val:        "uniq",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PutOp",
			pos:  position{line: 375, col: 1, offset: 10967},
			expr: &actionExpr{
				pos: position{line: 376, col: 5, offset: 10977},
				run: (*parser).callonPutOp1,
				expr: &seqExpr{
					pos: position{line: 376, col: 5, offset: 10977},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 376, col: 5, offset: 10977},
							val:        "put",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 376, col: 11, offset: 10983},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 376, col: 13, offset: 10985},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 376, col: 18, offset: 10990},
								name: "Assignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameOp",
			pos:  position{line: 380, col: 1, offset: 11081},
			expr: &actionExpr{
				pos: position{line: 381, col: 5, offset: 11094},
				run: (*parser).callonRenameOp1,
				expr: &seqExpr{
					pos: position{line: 381, col: 5, offset: 11094},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 381, col: 5, offset: 11094},
							val:        "rename",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 381, col: 14, offset: 11103},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 381, col: 16, offset: 11105},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 381, col: 22, offset: 11111},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 381, col: 33, offset: 11122},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 381, col: 38, offset: 11127},
								expr: &actionExpr{
									pos: position{line: 381, col: 39, offset: 11128},
									run: (*parser).callonRenameOp9,
									expr: &seqExpr{
										pos: position{line: 381, col: 39, offset: 11128},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 381, col: 39, offset: 11128},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 381, col: 42, offset: 11131},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 381, col: 46, offset: 11135},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 381, col: 49, offset: 11138},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 381, col: 52, offset: 11141},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseOp",
			pos:  position{line: 389, col: 1, offset: 11548},
			expr: &actionExpr{
				pos: position{line: 390, col: 5, offset: 11559},
				run: (*parser).callonFuseOp1,
				expr: &seqExpr{
					pos: position{line: 390, col: 5, offset: 11559},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 390, col: 5, offset: 11559},
							val:        "fuse",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 390, col: 12, offset: 11566},
							expr: &seqExpr{
								pos: position{line: 390, col: 14, offset: 11568},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 390, col: 14, offset: 11568},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 390, col: 17, offset: 11571},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 390, col: 22, offset: 11576},
							expr: &ruleRefExpr{
								pos:  position{line: 390, col: 23, offset: 11577},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "ShapeOp",
			pos:  position{line: 394, col: 1, offset: 11648},
			expr: &actionExpr{
				pos: position{line: 395, col: 5, offset: 11660},
				run: (*parser).callonShapeOp1,
				expr: &seqExpr{
					pos: position{line: 395, col: 5, offset: 11660},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 395, col: 5, offset: 11660},
							val:        "shape",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 395, col: 13, offset: 11668},
							expr: &seqExpr{
								pos: position{line: 395, col: 15, offset: 11670},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 395, col: 15, offset: 11670},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 395, col: 18, offset: 11673},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 395, col: 23, offset: 11678},
							expr: &ruleRefExpr{
								pos:  position{line: 395, col: 24, offset: 11679},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "JoinOp",
			pos:  position{line: 399, col: 1, offset: 11751},
			expr: &actionExpr{
				pos: position{line: 400, col: 5, offset: 11762},
				run: (*parser).callonJoinOp1,
				expr: &seqExpr{
					pos: position{line: 400, col: 5, offset: 11762},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 400, col: 5, offset: 11762},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 400, col: 11, offset: 11768},
								name: "JoinStyle",
							},
						},
						&litMatcher{
							pos:        position{line: 400, col: 21, offset: 11778},
							val:        "join",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 400, col: 28, offset: 11785},
							label: "rightInput",
							expr: &ruleRefExpr{
								pos:  position{line: 400, col: 39, offset: 11796},
								name: "JoinRightInput",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 400, col: 54, offset: 11811},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 400, col: 57, offset: 11814},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 400, col: 59, offset: 11816},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 400, col: 63, offset: 11820},
								name: "JoinKey",
							},
						},
						&labeledExpr{
							pos:   position{line: 400, col: 71, offset: 11828},
							label: "optKey",
							expr: &zeroOrOneExpr{
								pos: position{line: 400, col: 78, offset: 11835},
								expr: &seqExpr{
									pos: position{line: 400, col: 79, offset: 11836},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 400, col: 79, offset: 11836},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 400, col: 82, offset: 11839},
											val:        "=",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 400, col: 86, offset: 11843},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 400, col: 89, offset: 11846},
											name: "JoinKey",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 400, col: 99, offset: 11856},
							label: "optArgs",
							expr: &zeroOrOneExpr{
								pos: position{line: 400, col: 107, offset: 11864},
								expr: &seqExpr{
									pos: position{line: 400, col: 108, offset: 11865},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 400, col: 108, offset: 11865},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 400, col: 110, offset: 11867},
											name: "FlexAssignments",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinStyle",
			pos:  position{line: 411, col: 1, offset: 12223},
			expr: &choiceExpr{
				pos: position{line: 412, col: 5, offset: 12237},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 412, col: 5, offset: 12237},
						run: (*parser).callonJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 412, col: 5, offset: 12237},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 412, col: 5, offset: 12237},
									val:        "anti",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 412, col: 12, offset: 12244},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 413, col: 5, offset: 12274},
						run: (*parser).callonJoinStyle6,
						expr: &seqExpr{
							pos: position{line: 413, col: 5, offset: 12274},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 413, col: 5, offset: 12274},
									val:        "inner",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 413, col: 13, offset: 12282},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 414, col: 5, offset: 12312},
						run: (*parser).callonJoinStyle10,
						expr: &seqExpr{
							pos: position{line: 414, col: 5, offset: 12312},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 414, col: 5, offset: 12312},
									val:        "left",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 414, col: 13, offset: 12320},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 415, col: 5, offset: 12349},
						run: (*parser).callonJoinStyle14,
						expr: &seqExpr{
							pos: position{line: 415, col: 5, offset: 12349},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 415, col: 5, offset: 12349},
									val:        "right",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 415, col: 13, offset: 12357},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 416, col: 5, offset: 12387},
						run: (*parser).callonJoinStyle18,
						expr: &litMatcher{
							pos:        position{line: 416, col: 5, offset: 12387},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "JoinRightInput",
			pos:  position{line: 418, col: 1, offset: 12422},
			expr: &choiceExpr{
				pos: position{line: 419, col: 5, offset: 12441},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 419, col: 5, offset: 12441},
						run: (*parser).callonJoinRightInput2,
						expr: &seqExpr{
							pos: position{line: 419, col: 5, offset: 12441},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 419, col: 5, offset: 12441},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 419, col: 8, offset: 12444},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 419, col: 12, offset: 12448},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 419, col: 15, offset: 12451},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 419, col: 17, offset: 12453},
										name: "Seq",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 419, col: 21, offset: 12457},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 419, col: 24, offset: 12460},
									val:        ")",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 419, col: 28, offset: 12464},
									name: "__",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 420, col: 5, offset: 12489},
						run: (*parser).callonJoinRightInput12,
						expr: &ruleRefExpr{
							pos:  position{line: 420, col: 5, offset: 12489},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 422, col: 1, offset: 12512},
			expr: &choiceExpr{
				pos: position{line: 423, col: 5, offset: 12524},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 423, col: 5, offset: 12524},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 424, col: 5, offset: 12533},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 424, col: 5, offset: 12533},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 424, col: 5, offset: 12533},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 424, col: 9, offset: 12537},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 424, col: 14, offset: 12542},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 424, col: 19, offset: 12547},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SampleOp",
			pos:  position{line: 426, col: 1, offset: 12573},
			expr: &actionExpr{
				pos: position{line: 427, col: 5, offset: 12586},
				run: (*parser).callonSampleOp1,
				expr: &seqExpr{
					pos: position{line: 427, col: 5, offset: 12586},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 427, col: 5, offset: 12586},
							val:        "sample",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 427, col: 14, offset: 12595},
							expr: &ruleRefExpr{
								pos:  position{line: 427, col: 15, offset: 12596},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 427, col: 20, offset: 12601},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 427, col: 22, offset: 12603},
								name: "SampleExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "OpAssignment",
			pos:  position{line: 434, col: 1, offset: 12951},
			expr: &actionExpr{
				pos: position{line: 435, col: 5, offset: 12968},
				run: (*parser).callonOpAssignment1,
				expr: &labeledExpr{
					pos:   position{line: 435, col: 5, offset: 12968},
					label: "a",
					expr: &ruleRefExpr{
						pos:  position{line: 435, col: 7, offset: 12970},
						name: "Assignments",
					},
				},
			},
		},
		{
			name: "SampleExpr",
			pos:  position{line: 439, col: 1, offset: 13070},
			expr: &choiceExpr{
				pos: position{line: 440, col: 5, offset: 13085},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 440, col: 5, offset: 13085},
						run: (*parser).callonSampleExpr2,
						expr: &seqExpr{
							pos: position{line: 440, col: 5, offset: 13085},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 440, col: 5, offset: 13085},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 440, col: 7, offset: 13087},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 440, col: 12, offset: 13092},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 441, col: 5, offset: 13122},
						run: (*parser).callonSampleExpr7,
						expr: &litMatcher{
							pos:        position{line: 441, col: 5, offset: 13122},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromOp",
			pos:  position{line: 443, col: 1, offset: 13195},
			expr: &actionExpr{
				pos: position{line: 444, col: 5, offset: 13206},
				run: (*parser).callonFromOp1,
				expr: &labeledExpr{
					pos:   position{line: 444, col: 5, offset: 13206},
					label: "source",
					expr: &ruleRefExpr{
						pos:  position{line: 444, col: 12, offset: 13213},
						name: "FromAny",
					},
				},
			},
		},
		{
			name: "FromAny",
			pos:  position{line: 448, col: 1, offset: 13371},
			expr: &choiceExpr{
				pos: position{line: 449, col: 5, offset: 13383},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 449, col: 5, offset: 13383},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 450, col: 5, offset: 13392},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 451, col: 5, offset: 13400},
						name: "From",
					},
				},
			},
		},
		{
			name: "File",
			pos:  position{line: 453, col: 1, offset: 13406},
			expr: &actionExpr{
				pos: position{line: 454, col: 5, offset: 13415},
				run: (*parser).callonFile1,
				expr: &seqExpr{
					pos: position{line: 454, col: 5, offset: 13415},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 454, col: 5, offset: 13415},
							val:        "file",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 454, col: 12, offset: 13422},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 454, col: 14, offset: 13424},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 454, col: 19, offset: 13429},
								name: "Path",
							},
						},
						&labeledExpr{
							pos:   position{line: 454, col: 24, offset: 13434},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 454, col: 31, offset: 13441},
								expr: &ruleRefExpr{
									pos:  position{line: 454, col: 31, offset: 13441},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 454, col: 42, offset: 13452},
							label: "sort_key",
							expr: &zeroOrOneExpr{
								pos: position{line: 454, col: 51, offset: 13461},
								expr: &ruleRefExpr{
									pos:  position{line: 454, col: 51, offset: 13461},
									name: "SortKeyArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "From",
			pos:  position{line: 458, col: 1, offset: 13593},
			expr: &actionExpr{
				pos: position{line: 459, col: 5, offset: 13602},
				run: (*parser).callonFrom1,
				expr: &seqExpr{
					pos: position{line: 459, col: 5, offset: 13602},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 459, col: 5, offset: 13602},
							val:        "from",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 459, col: 12, offset: 13609},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 459, col: 14, offset: 13611},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 459, col: 19, offset: 13616},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "Pool",
			pos:  position{line: 461, col: 1, offset: 13647},
			expr: &actionExpr{
				pos: position{line: 462, col: 5, offset: 13656},
				run: (*parser).callonPool1,
				expr: &seqExpr{
					pos: position{line: 462, col: 5, offset: 13656},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 462, col: 5, offset: 13656},
							val:        "pool",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 462, col: 12, offset: 13663},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 462, col: 14, offset: 13665},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 462, col: 19, offset: 13670},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolBody",
			pos:  position{line: 464, col: 1, offset: 13701},
			expr: &actionExpr{
				pos: position{line: 465, col: 5, offset: 13714},
				run: (*parser).callonPoolBody1,
				expr: &seqExpr{
					pos: position{line: 465, col: 5, offset: 13714},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 465, col: 5, offset: 13714},
							label: "spec",
							expr: &ruleRefExpr{
								pos:  position{line: 465, col: 10, offset: 13719},
								name: "PoolSpec",
							},
						},
						&labeledExpr{
							pos:   position{line: 465, col: 19, offset: 13728},
							label: "at",
							expr: &zeroOrOneExpr{
								pos: position{line: 465, col: 22, offset: 13731},
								expr: &ruleRefExpr{
									pos:  position{line: 465, col: 22, offset: 13731},
									name: "PoolAt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Get",
			pos:  position{line: 469, col: 1, offset: 13829},
			expr: &actionExpr{
				pos: position{line: 470, col: 5, offset: 13837},
				run: (*parser).callonGet1,
				expr: &seqExpr{
					pos: position{line: 470, col: 5, offset: 13837},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 470, col: 5, offset: 13837},
							val:        "get",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 470, col: 11, offset: 13843},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 470, col: 13, offset: 13845},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 470, col: 17, offset: 13849},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 470, col: 21, offset: 13853},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 470, col: 28, offset: 13860},
								expr: &ruleRefExpr{
									pos:  position{line: 470, col: 28, offset: 13860},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 470, col: 39, offset: 13871},
							label: "sort_key",
							expr: &zeroOrOneExpr{
								pos: position{line: 470, col: 48, offset: 13880},
								expr: &ruleRefExpr{
									pos:  position{line: 470, col: 48, offset: 13880},
									name: "SortKeyArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 474, col: 1, offset: 14010},
			expr: &actionExpr{
				pos: position{line: 474, col: 7, offset: 14016},
				run: (*parser).callonURL1,
				expr: &seqExpr{
					pos: position{line: 474, col: 7, offset: 14016},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 474, col: 8, offset: 14017},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 474, col: 8, offset: 14017},
									val:        "http:",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 474, col: 18, offset: 14027},
									val:        "https:",
									ignoreCase: false,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 474, col: 28, offset: 14037},
							name: "Path",
						},
					},
				},
			},
		},
		{
			name: "Path",
			pos:  position{line: 476, col: 1, offset: 14074},
			expr: &choiceExpr{
				pos: position{line: 477, col: 5, offset: 14083},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 477, col: 5, offset: 14083},
						run: (*parser).callonPath2,
						expr: &labeledExpr{
							pos:   position{line: 477, col: 5, offset: 14083},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 477, col: 7, offset: 14085},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 478, col: 5, offset: 14120},
						run: (*parser).callonPath5,
						expr: &oneOrMoreExpr{
							pos: position{line: 478, col: 5, offset: 14120},
							expr: &charClassMatcher{
								pos:        position{line: 478, col: 5, offset: 14120},
								val:        "[0-9a-zA-Z!@$%^&*_=<>,./?:[\\]{}~+-]",
								chars:      []rune{'!', '@', '$', '%', '^', '&', '*', '_', '=', '<', '>', ',', '.', '/', '?', ':', '[', ']', '{', '}', '~', '+', '-'},
								ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PoolAt",
			pos:  position{line: 481, col: 1, offset: 14222},
			expr: &actionExpr{
				pos: position{line: 482, col: 5, offset: 14233},
				run: (*parser).callonPoolAt1,
				expr: &seqExpr{
					pos: position{line: 482, col: 5, offset: 14233},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 482, col: 5, offset: 14233},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 482, col: 7, offset: 14235},
							val:        "at",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 482, col: 12, offset: 14240},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 482, col: 14, offset: 14242},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 482, col: 17, offset: 14245},
								name: "KSUID",
							},
						},
					},
				},
			},
		},
		{
			name: "KSUID",
			pos:  position{line: 485, col: 1, offset: 14311},
			expr: &actionExpr{
				pos: position{line: 485, col: 9, offset: 14319},
				run: (*parser).callonKSUID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 485, col: 9, offset: 14319},
					expr: &charClassMatcher{
						pos:        position{line: 485, col: 10, offset: 14320},
						val:        "[0-9a-zA-Z]",
						ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "PoolSpec",
			pos:  position{line: 487, col: 1, offset: 14366},
			expr: &choiceExpr{
				pos: position{line: 488, col: 5, offset: 14379},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 488, col: 5, offset: 14379},
						run: (*parser).callonPoolSpec2,
						expr: &seqExpr{
							pos: position{line: 488, col: 5, offset: 14379},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 488, col: 5, offset: 14379},
									label: "pool",
									expr: &ruleRefExpr{
										pos:  position{line: 488, col: 10, offset: 14384},
										name: "PoolName",
									},
								},
								&labeledExpr{
									pos:   position{line: 488, col: 19, offset: 14393},
									label: "commit",
									expr: &zeroOrOneExpr{
										pos: position{line: 488, col: 26, offset: 14400},
										expr: &ruleRefExpr{
											pos:  position{line: 488, col: 26, offset: 14400},
											name: "PoolCommit",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 488, col: 38, offset: 14412},
									label: "meta",
									expr: &zeroOrOneExpr{
										pos: position{line: 488, col: 43, offset: 14417},
										expr: &ruleRefExpr{
											pos:  position{line: 488, col: 43, offset: 14417},
											name: "PoolMeta",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 488, col: 53, offset: 14427},
									label: "tap",
									expr: &ruleRefExpr{
										pos:  position{line: 488, col: 57, offset: 14431},
										name: "TapArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 491, col: 5, offset: 14549},
						run: (*parser).callonPoolSpec14,
						expr: &labeledExpr{
							pos:   position{line: 491, col: 5, offset: 14549},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 491, col: 10, offset: 14554},
								name: "PoolMeta",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolCommit",
			pos:  position{line: 495, col: 1, offset: 14655},
			expr: &actionExpr{
				pos: position{line: 496, col: 5, offset: 14670},
				run: (*parser).callonPoolCommit1,
				expr: &seqExpr{
					pos: position{line: 496, col: 5, offset: 14670},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 496, col: 5, offset: 14670},
							val:        "@",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 496, col: 9, offset: 14674},
							label: "commit",
							expr: &ruleRefExpr{
								pos:  position{line: 496, col: 16, offset: 14681},
								name: "PoolNameString",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolMeta",
			pos:  position{line: 498, col: 1, offset: 14720},
			expr: &actionExpr{
				pos: position{line: 499, col: 5, offset: 14733},
				run: (*parser).callonPoolMeta1,
				expr: &seqExpr{
					pos: position{line: 499, col: 5, offset: 14733},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 499, col: 5, offset: 14733},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 499, col: 9, offset: 14737},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 499, col: 14, offset: 14742},
								name: "PoolIdentifier",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolName",
			pos:  position{line: 501, col: 1, offset: 14779},
			expr: &choiceExpr{
				pos: position{line: 502, col: 5, offset: 14792},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 502, col: 5, offset: 14792},
						name: "Glob",
					},
					&actionExpr{
						pos: position{line: 503, col: 5, offset: 14801},
						run: (*parser).callonPoolName3,
						expr: &seqExpr{
							pos: position{line: 503, col: 5, offset: 14801},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 503, col: 5, offset: 14801},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 503, col: 9, offset: 14805},
									expr: &ruleRefExpr{
										pos:  position{line: 503, col: 10, offset: 14806},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 504, col: 5, offset: 14891},
						name: "Regexp",
					},
					&actionExpr{
						pos: position{line: 505, col: 5, offset: 14902},
						run: (*parser).callonPoolName9,
						expr: &labeledExpr{
							pos:   position{line: 505, col: 5, offset: 14902},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 505, col: 10, offset: 14907},
								name: "PoolNameString",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolNameString",
			pos:  position{line: 507, col: 1, offset: 14994},
			expr: &choiceExpr{
				pos: position{line: 508, col: 5, offset: 15013},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 508, col: 5, offset: 15013},
						name: "PoolIdentifier",
					},
					&ruleRefExpr{
						pos:  position{line: 509, col: 5, offset: 15032},
						name: "KSUID",
					},
					&ruleRefExpr{
						pos:  position{line: 510, col: 5, offset: 15042},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "PoolIdentifier",
			pos:  position{line: 512, col: 1, offset: 15056},
			expr: &actionExpr{
				pos: position{line: 513, col: 5, offset: 15075},
				run: (*parser).callonPoolIdentifier1,
				expr: &seqExpr{
					pos: position{line: 513, col: 5, offset: 15075},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 513, col: 6, offset: 15076},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 513, col: 6, offset: 15076},
									name: "IdentifierStart",
								},
								&litMatcher{
									pos:        position{line: 513, col: 24, offset: 15094},
									val:        ".",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 513, col: 29, offset: 15099},
							expr: &choiceExpr{
								pos: position{line: 513, col: 30, offset: 15100},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 513, col: 30, offset: 15100},
										name: "IdentifierRest",
									},
									&litMatcher{
										pos:        position{line: 513, col: 47, offset: 15117},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortKeyArg",
			pos:  position{line: 515, col: 1, offset: 15155},
			expr: &actionExpr{
				pos: position{line: 516, col: 5, offset: 15170},
				run: (*parser).callonSortKeyArg1,
				expr: &seqExpr{
					pos: position{line: 516, col: 5, offset: 15170},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 516, col: 5, offset: 15170},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 516, col: 7, offset: 15172},
							val:        "order",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 516, col: 15, offset: 15180},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 516, col: 17, offset: 15182},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 516, col: 22, offset: 15187},
								name: "FieldExprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 516, col: 33, offset: 15198},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 516, col: 39, offset: 15204},
								name: "OrderSuffix",
							},
						},
					},
				},
			},
		},
		{
			name: "TapArg",
			pos:  position{line: 520, col: 1, offset: 15315},
			expr: &choiceExpr{
				pos: position{line: 521, col: 5, offset: 15326},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 521, col: 5, offset: 15326},
						run: (*parser).callonTapArg2,
						expr: &seqExpr{
							pos: position{line: 521, col: 5, offset: 15326},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 521, col: 5, offset: 15326},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 521, col: 7, offset: 15328},
									val:        "tap",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 522, col: 5, offset: 15359},
						run: (*parser).callonTapArg6,
						expr: &litMatcher{
							pos:        position{line: 522, col: 5, offset: 15359},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FormatArg",
			pos:  position{line: 524, col: 1, offset: 15385},
			expr: &actionExpr{
				pos: position{line: 525, col: 5, offset: 15399},
				run: (*parser).callonFormatArg1,
				expr: &seqExpr{
					pos: position{line: 525, col: 5, offset: 15399},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 525, col: 5, offset: 15399},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 525, col: 7, offset: 15401},
							val:        "format",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 525, col: 16, offset: 15410},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 525, col: 18, offset: 15412},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 525, col: 22, offset: 15416},
								name: "IdentifierName",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderSuffix",
			pos:  position{line: 527, col: 1, offset: 15452},
			expr: &choiceExpr{
				pos: position{line: 528, col: 5, offset: 15468},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 528, col: 5, offset: 15468},
						run: (*parser).callonOrderSuffix2,
						expr: &litMatcher{
							pos:        position{line: 528, col: 5, offset: 15468},
							val:        ":asc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 529, col: 5, offset: 15502},
						run: (*parser).callonOrderSuffix4,
						expr: &litMatcher{
							pos:        position{line: 529, col: 5, offset: 15502},
							val:        ":desc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 530, col: 5, offset: 15537},
						run: (*parser).callonOrderSuffix6,
						expr: &litMatcher{
							pos:        position{line: 530, col: 5, offset: 15537},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PassOp",
			pos:  position{line: 532, col: 1, offset: 15568},
			expr: &actionExpr{
				pos: position{line: 533, col: 5, offset: 15579},
				run: (*parser).callonPassOp1,
				expr: &seqExpr{
					pos: position{line: 533, col: 5, offset: 15579},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 533, col: 5, offset: 15579},
							val:        "pass",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 533, col: 12, offset: 15586},
							expr: &ruleRefExpr{
								pos:  position{line: 533, col: 13, offset: 15587},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "ExplodeOp",
			pos:  position{line: 539, col: 1, offset: 15780},
			expr: &actionExpr{
				pos: position{line: 540, col: 5, offset: 15794},
				run: (*parser).callonExplodeOp1,
				expr: &seqExpr{
					pos: position{line: 540, col: 5, offset: 15794},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 540, col: 5, offset: 15794},
							val:        "explode",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 540, col: 15, offset: 15804},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 540, col: 17, offset: 15806},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 540, col: 22, offset: 15811},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 540, col: 28, offset: 15817},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 540, col: 32, offset: 15821},
								name: "TypeArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 540, col: 40, offset: 15829},
							label: "as",
							expr: &zeroOrOneExpr{
								pos: position{line: 540, col: 43, offset: 15832},
								expr: &ruleRefExpr{
									pos:  position{line: 540, col: 43, offset: 15832},
									name: "AsArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MergeOp",
			pos:  position{line: 544, col: 1, offset: 15945},
			expr: &actionExpr{
				pos: position{line: 545, col: 5, offset: 15957},
				run: (*parser).callonMergeOp1,
				expr: &seqExpr{
					pos: position{line: 545, col: 5, offset: 15957},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 545, col: 5, offset: 15957},
							val:        "merge",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 545, col: 13, offset: 15965},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 545, col: 15, offset: 15967},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 545, col: 20, offset: 15972},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "OverOp",
			pos:  position{line: 549, col: 1, offset: 16058},
			expr: &actionExpr{
				pos: position{line: 550, col: 5, offset: 16069},
				run: (*parser).callonOverOp1,
				expr: &seqExpr{
					pos: position{line: 550, col: 5, offset: 16069},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 550, col: 5, offset: 16069},
							val:        "over",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 550, col: 12, offset: 16076},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 550, col: 14, offset: 16078},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 550, col: 20, offset: 16084},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 550, col: 26, offset: 16090},
							label: "locals",
							expr: &zeroOrOneExpr{
								pos: position{line: 550, col: 33, offset: 16097},
								expr: &ruleRefExpr{
									pos:  position{line: 550, col: 33, offset: 16097},
									name: "Locals",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 550, col: 41, offset: 16105},
							label: "body",
							expr: &zeroOrOneExpr{
								pos: position{line: 550, col: 46, offset: 16110},
								expr: &ruleRefExpr{
									pos:  position{line: 550, col: 46, offset: 16110},
									name: "Lateral",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Lateral",
			pos:  position{line: 554, col: 1, offset: 16233},
			expr: &choiceExpr{
				pos: position{line: 555, col: 5, offset: 16245},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 555, col: 5, offset: 16245},
						run: (*parser).callonLateral2,
						expr: &seqExpr{
							pos: position{line: 555, col: 5, offset: 16245},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 555, col: 5, offset: 16245},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 555, col: 8, offset: 16248},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 555, col: 13, offset: 16253},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 555, col: 16, offset: 16256},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 555, col: 20, offset: 16260},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 555, col: 23, offset: 16263},
									label: "scope",
									expr: &ruleRefExpr{
										pos:  position{line: 555, col: 29, offset: 16269},
										name: "Scope",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 555, col: 35, offset: 16275},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 555, col: 38, offset: 16278},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 556, col: 5, offset: 16308},
						run: (*parser).callonLateral13,
						expr: &seqExpr{
							pos: position{line: 556, col: 5, offset: 16308},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 556, col: 5, offset: 16308},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 556, col: 8, offset: 16311},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 556, col: 13, offset: 16316},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 556, col: 16, offset: 16319},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 556, col: 20, offset: 16323},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 556, col: 23, offset: 16326},
									label: "seq",
									expr: &ruleRefExpr{
										pos:  position{line: 556, col: 27, offset: 16330},
										name: "Seq",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 556, col: 31, offset: 16334},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 556, col: 34, offset: 16337},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Locals",
			pos:  position{line: 558, col: 1, offset: 16362},
			expr: &actionExpr{
				pos: position{line: 559, col: 5, offset: 16373},
				run: (*parser).callonLocals1,
				expr: &seqExpr{
					pos: position{line: 559, col: 5, offset: 16373},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 559, col: 5, offset: 16373},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 559, col: 7, offset: 16375},
							val:        "with",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 559, col: 14, offset: 16382},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 559, col: 16, offset: 16384},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 559, col: 22, offset: 16390},
								name: "LocalsAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 559, col: 39, offset: 16407},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 559, col: 44, offset: 16412},
								expr: &actionExpr{
									pos: position{line: 559, col: 45, offset: 16413},
									run: (*parser).callonLocals10,
									expr: &seqExpr{
										pos: position{line: 559, col: 45, offset: 16413},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 559, col: 45, offset: 16413},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 559, col: 48, offset: 16416},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 559, col: 52, offset: 16420},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 559, col: 55, offset: 16423},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 559, col: 57, offset: 16425},
													name: "LocalsAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocalsAssignment",
			pos:  position{line: 563, col: 1, offset: 16546},
			expr: &actionExpr{
				pos: position{line: 564, col: 5, offset: 16567},
				run: (*parser).callonLocalsAssignment1,
				expr: &seqExpr{
					pos: position{line: 564, col: 5, offset: 16567},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 564, col: 5, offset: 16567},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 564, col: 10, offset: 16572},
								name: "IdentifierName",
							},
						},
						&labeledExpr{
							pos:   position{line: 564, col: 25, offset: 16587},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 564, col: 29, offset: 16591},
								expr: &seqExpr{
									pos: position{line: 564, col: 30, offset: 16592},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 564, col: 30, offset: 16592},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 564, col: 33, offset: 16595},
											val:        "=",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 564, col: 37, offset: 16599},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 564, col: 40, offset: 16602},
											name: "Expr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "YieldOp",
			pos:  position{line: 572, col: 1, offset: 16823},
			expr: &actionExpr{
				pos: position{line: 573, col: 5, offset: 16835},
				run: (*parser).callonYieldOp1,
				expr: &seqExpr{
					pos: position{line: 573, col: 5, offset: 16835},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 573, col: 5, offset: 16835},
							val:        "yield",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 573, col: 13, offset: 16843},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 573, col: 15, offset: 16845},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 573, col: 21, offset: 16851},
								name: "Exprs",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeArg",
			pos:  position{line: 577, col: 1, offset: 16940},
			expr: &actionExpr{
				pos: position{line: 578, col: 5, offset: 16952},
				run: (*parser).callonTypeArg1,
				expr: &seqExpr{
					pos: position{line: 578, col: 5, offset: 16952},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 578, col: 5, offset: 16952},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 578, col: 7, offset: 16954},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 578, col: 10, offset: 16957},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 578, col: 12, offset: 16959},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 578, col: 16, offset: 16963},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "AsArg",
			pos:  position{line: 580, col: 1, offset: 16989},
			expr: &actionExpr{
				pos: position{line: 581, col: 5, offset: 16999},
				run: (*parser).callonAsArg1,
				expr: &seqExpr{
					pos: position{line: 581, col: 5, offset: 16999},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 581, col: 5, offset: 16999},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 581, col: 7, offset: 17001},
							name: "AS",
						},
						&ruleRefExpr{
							pos:  position{line: 581, col: 10, offset: 17004},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 581, col: 12, offset: 17006},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 581, col: 16, offset: 17010},
								name: "Lval",
							},
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 585, col: 1, offset: 17061},
			expr: &ruleRefExpr{
				pos:  position{line: 585, col: 8, offset: 17068},
				name: "DerefExpr",
			},
		},
		{
			name: "Lvals",
			pos:  position{line: 587, col: 1, offset: 17079},
			expr: &actionExpr{
				pos: position{line: 588, col: 5, offset: 17089},
				run: (*parser).callonLvals1,
				expr: &seqExpr{
					pos: position{line: 588, col: 5, offset: 17089},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 588, col: 5, offset: 17089},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 588, col: 11, offset: 17095},
								name: "Lval",
							},
						},
						&labeledExpr{
							pos:   position{line: 588, col: 16, offset: 17100},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 588, col: 21, offset: 17105},
								expr: &actionExpr{
									pos: position{line: 588, col: 22, offset: 17106},
									run: (*parser).callonLvals7,
									expr: &seqExpr{
										pos: position{line: 588, col: 22, offset: 17106},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 588, col: 22, offset: 17106},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 588, col: 25, offset: 17109},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 588, col: 29, offset: 17113},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 588, col: 32, offset: 17116},
												label: "lval",
												expr: &ruleRefExpr{
													pos:  position{line: 588, col: 37, offset: 17121},
													name: "Lval",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 592, col: 1, offset: 17233},
			expr: &ruleRefExpr{
				pos:  position{line: 592, col: 13, offset: 17245},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 594, col: 1, offset: 17251},
			expr: &actionExpr{
				pos: position{line: 595, col: 5, offset: 17266},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 595, col: 5, offset: 17266},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 595, col: 5, offset: 17266},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 595, col: 11, offset: 17272},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 595, col: 21, offset: 17282},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 595, col: 26, offset: 17287},
								expr: &seqExpr{
									pos: position{line: 595, col: 27, offset: 17288},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 595, col: 27, offset: 17288},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 595, col: 30, offset: 17291},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 595, col: 34, offset: 17295},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 595, col: 37, offset: 17298},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignments",
			pos:  position{line: 605, col: 1, offset: 17497},
			expr: &actionExpr{
				pos: position{line: 606, col: 5, offset: 17513},
				run: (*parser).callonAssignments1,
				expr: &seqExpr{
					pos: position{line: 606, col: 5, offset: 17513},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 606, col: 5, offset: 17513},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 606, col: 11, offset: 17519},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 606, col: 22, offset: 17530},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 606, col: 27, offset: 17535},
								expr: &actionExpr{
									pos: position{line: 606, col: 28, offset: 17536},
									run: (*parser).callonAssignments7,
									expr: &seqExpr{
										pos: position{line: 606, col: 28, offset: 17536},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 606, col: 28, offset: 17536},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 606, col: 31, offset: 17539},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 606, col: 35, offset: 17543},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 606, col: 38, offset: 17546},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 606, col: 40, offset: 17548},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 610, col: 1, offset: 17659},
			expr: &actionExpr{
				pos: position{line: 611, col: 5, offset: 17674},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 611, col: 5, offset: 17674},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 611, col: 5, offset: 17674},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 611, col: 9, offset: 17678},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 611, col: 14, offset: 17683},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 611, col: 17, offset: 17686},
							val:        ":=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 611, col: 22, offset: 17691},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 611, col: 25, offset: 17694},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 611, col: 29, offset: 17698},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 613, col: 1, offset: 17789},
			expr: &ruleRefExpr{
				pos:  position{line: 613, col: 8, offset: 17796},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 615, col: 1, offset: 17813},
			expr: &actionExpr{
				pos: position{line: 616, col: 5, offset: 17833},
				run: (*parser).callonConditionalExpr1,
				expr: &seqExpr{
					pos: position{line: 616, col: 5, offset: 17833},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 616, col: 5, offset: 17833},
							label: "cond",
							expr: &ruleRefExpr{
								pos:  position{line: 616, col: 10, offset: 17838},
								name: "LogicalOrExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 616, col: 24, offset: 17852},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 616, col: 28, offset: 17856},
								expr: &seqExpr{
									pos: position{line: 616, col: 29, offset: 17857},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 616, col: 29, offset: 17857},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 616, col: 32, offset: 17860},
											val:        "?",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 616, col: 36, offset: 17864},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 616, col: 39, offset: 17867},
											name: "Expr",
										},
										&ruleRefExpr{
											pos:  position{line: 616, col: 44, offset: 17872},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 616, col: 47, offset: 17875},
											val:        ":",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 616, col: 51, offset: 17879},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 616, col: 54, offset: 17882},
											name: "Expr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 625, col: 1, offset: 18143},
			expr: &actionExpr{
				pos: position{line: 626, col: 5, offset: 18161},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 626, col: 5, offset: 18161},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 626, col: 5, offset: 18161},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 626, col: 11, offset: 18167},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 627, col: 5, offset: 18186},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 627, col: 10, offset: 18191},
								expr: &actionExpr{
									pos: position{line: 627, col: 11, offset: 18192},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 627, col: 11, offset: 18192},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 627, col: 11, offset: 18192},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 627, col: 14, offset: 18195},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 627, col: 17, offset: 18198},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 627, col: 25, offset: 18206},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 627, col: 28, offset: 18209},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 627, col: 33, offset: 18214},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 631, col: 1, offset: 18333},
			expr: &actionExpr{
				pos: position{line: 632, col: 5, offset: 18352},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 632, col: 5, offset: 18352},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 632, col: 5, offset: 18352},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 632, col: 11, offset: 18358},
								name: "ComparisonExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 633, col: 5, offset: 18377},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 633, col: 10, offset: 18382},
								expr: &actionExpr{
									pos: position{line: 633, col: 11, offset: 18383},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 633, col: 11, offset: 18383},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 633, col: 11, offset: 18383},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 633, col: 14, offset: 18386},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 633, col: 17, offset: 18389},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 633, col: 26, offset: 18398},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 633, col: 29, offset: 18401},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 633, col: 34, offset: 18406},
													name: "ComparisonExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ComparisonExpr",
			pos:  position{line: 637, col: 1, offset: 18525},
			expr: &actionExpr{
				pos: position{line: 638, col: 5, offset: 18544},
				run: (*parser).callonComparisonExpr1,
				expr: &seqExpr{
					pos: position{line: 638, col: 5, offset: 18544},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 638, col: 5, offset: 18544},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 638, col: 9, offset: 18548},
								name: "AdditiveExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 638, col: 22, offset: 18561},
							label: "opAndRHS",
							expr: &zeroOrOneExpr{
								pos: position{line: 638, col: 31, offset: 18570},
								expr: &choiceExpr{
									pos: position{line: 638, col: 32, offset: 18571},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 638, col: 32, offset: 18571},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 638, col: 32, offset: 18571},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 638, col: 35, offset: 18574},
													name: "Comparator",
												},
												&ruleRefExpr{
													pos:  position{line: 638, col: 46, offset: 18585},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 638, col: 49, offset: 18588},
													name: "AdditiveExpr",
												},
											},
										},
										&seqExpr{
											pos: position{line: 638, col: 64, offset: 18603},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 638, col: 64, offset: 18603},
													name: "__",
												},
												&actionExpr{
													pos: position{line: 638, col: 68, offset: 18607},
													run: (*parser).callonComparisonExpr15,
													expr: &litMatcher{
														pos:        position{line: 638, col: 68, offset: 18607},
														val:        "~",
														ignoreCase: false,
													},
												},
												&ruleRefExpr{
													pos:  position{line: 638, col: 104, offset: 18643},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 638, col: 107, offset: 18646},
													name: "Regexp",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 647, col: 1, offset: 18907},
			expr: &actionExpr{
				pos: position{line: 648, col: 5, offset: 18924},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 648, col: 5, offset: 18924},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 648, col: 5, offset: 18924},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 648, col: 11, offset: 18930},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 649, col: 5, offset: 18953},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 649, col: 10, offset: 18958},
								expr: &actionExpr{
									pos: position{line: 649, col: 11, offset: 18959},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 649, col: 11, offset: 18959},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 649, col: 11, offset: 18959},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 649, col: 14, offset: 18962},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 649, col: 17, offset: 18965},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 649, col: 34, offset: 18982},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 649, col: 37, offset: 18985},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 649, col: 42, offset: 18990},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 653, col: 1, offset: 19113},
			expr: &actionExpr{
				pos: position{line: 653, col: 20, offset: 19132},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 653, col: 21, offset: 19133},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 653, col: 21, offset: 19133},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 653, col: 27, offset: 19139},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 655, col: 1, offset: 19176},
			expr: &actionExpr{
				pos: position{line: 656, col: 5, offset: 19199},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 656, col: 5, offset: 19199},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 656, col: 5, offset: 19199},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 656, col: 11, offset: 19205},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 657, col: 5, offset: 19217},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 657, col: 10, offset: 19222},
								expr: &actionExpr{
									pos: position{line: 657, col: 11, offset: 19223},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 657, col: 11, offset: 19223},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 657, col: 11, offset: 19223},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 657, col: 14, offset: 19226},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 657, col: 17, offset: 19229},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 657, col: 40, offset: 19252},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 657, col: 43, offset: 19255},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 657, col: 48, offset: 19260},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 661, col: 1, offset: 19372},
			expr: &actionExpr{
				pos: position{line: 661, col: 26, offset: 19397},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 661, col: 27, offset: 19398},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 661, col: 27, offset: 19398},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 661, col: 33, offset: 19404},
							val:        "/",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 661, col: 39, offset: 19410},
							val:        "%",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 663, col: 1, offset: 19447},
			expr: &choiceExpr{
				pos: position{line: 664, col: 5, offset: 19459},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 664, col: 5, offset: 19459},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 664, col: 5, offset: 19459},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 664, col: 5, offset: 19459},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 664, col: 9, offset: 19463},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 664, col: 12, offset: 19466},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 664, col: 14, offset: 19468},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 667, col: 5, offset: 19577},
						name: "NegationExpr",
					},
				},
			},
		},
		{
			name: "NegationExpr",
			pos:  position{line: 669, col: 1, offset: 19591},
			expr: &choiceExpr{
				pos: position{line: 670, col: 5, offset: 19608},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 670, col: 5, offset: 19608},
						run: (*parser).callonNegationExpr2,
						expr: &seqExpr{
							pos: position{line: 670, col: 5, offset: 19608},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 670, col: 5, offset: 19608},
									expr: &ruleRefExpr{
										pos:  position{line: 670, col: 6, offset: 19609},
										name: "Literal",
									},
								},
								&litMatcher{
									pos:        position{line: 670, col: 14, offset: 19617},
									val:        "-",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 670, col: 18, offset: 19621},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 670, col: 21, offset: 19624},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 670, col: 23, offset: 19626},
										name: "FuncExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 673, col: 5, offset: 19736},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 675, col: 1, offset: 19746},
			expr: &choiceExpr{
				pos: position{line: 676, col: 5, offset: 19759},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 676, col: 5, offset: 19759},
						run: (*parser).callonFuncExpr2,
						expr: &seqExpr{
							pos: position{line: 676, col: 5, offset: 19759},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 676, col: 5, offset: 19759},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 676, col: 11, offset: 19765},
										name: "Cast",
									},
								},
								&labeledExpr{
									pos:   position{line: 676, col: 16, offset: 19770},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 676, col: 21, offset: 19775},
										expr: &ruleRefExpr{
											pos:  position{line: 676, col: 22, offset: 19776},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 679, col: 5, offset: 19847},
						run: (*parser).callonFuncExpr9,
						expr: &seqExpr{
							pos: position{line: 679, col: 5, offset: 19847},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 679, col: 5, offset: 19847},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 679, col: 11, offset: 19853},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 679, col: 20, offset: 19862},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 679, col: 25, offset: 19867},
										expr: &ruleRefExpr{
											pos:  position{line: 679, col: 26, offset: 19868},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 682, col: 5, offset: 19939},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 683, col: 5, offset: 19953},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FuncGuard",
			pos:  position{line: 685, col: 1, offset: 19962},
			expr: &seqExpr{
				pos: position{line: 685, col: 13, offset: 19974},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 685, col: 13, offset: 19974},
						name: "NotFuncs",
					},
					&ruleRefExpr{
						pos:  position{line: 685, col: 22, offset: 19983},
						name: "__",
					},
					&litMatcher{
						pos:        position{line: 685, col: 25, offset: 19986},
						val:        "(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "NotFuncs",
			pos:  position{line: 687, col: 1, offset: 19991},
			expr: &choiceExpr{
				pos: position{line: 688, col: 5, offset: 20004},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 688, col: 5, offset: 20004},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 689, col: 5, offset: 20014},
						val:        "select",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Cast",
			pos:  position{line: 691, col: 1, offset: 20024},
			expr: &actionExpr{
				pos: position{line: 692, col: 5, offset: 20033},
				run: (*parser).callonCast1,
				expr: &seqExpr{
					pos: position{line: 692, col: 5, offset: 20033},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 692, col: 5, offset: 20033},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 692, col: 9, offset: 20037},
								name: "CastType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 692, col: 18, offset: 20046},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 692, col: 21, offset: 20049},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 692, col: 25, offset: 20053},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 692, col: 28, offset: 20056},
							label: "expr",
							expr: &choiceExpr{
								pos: position{line: 692, col: 34, offset: 20062},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 692, col: 34, offset: 20062},
										name: "OverExpr",
									},
									&ruleRefExpr{
										pos:  position{line: 692, col: 45, offset: 20073},
										name: "Expr",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 692, col: 51, offset: 20079},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 692, col: 54, offset: 20082},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 696, col: 1, offset: 20179},
			expr: &choiceExpr{
				pos: position{line: 697, col: 5, offset: 20192},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 697, col: 5, offset: 20192},
						name: "Grep",
					},
					&actionExpr{
						pos: position{line: 699, col: 5, offset: 20279},
						run: (*parser).callonFunction3,
						expr: &seqExpr{
							pos: position{line: 699, col: 5, offset: 20279},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 699, col: 5, offset: 20279},
									val:        "regexp",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 699, col: 14, offset: 20288},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 699, col: 17, offset: 20291},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 699, col: 21, offset: 20295},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 699, col: 24, offset: 20298},
									label: "arg0Text",
									expr: &ruleRefExpr{
										pos:  position{line: 699, col: 33, offset: 20307},
										name: "RegexpPattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 699, col: 47, offset: 20321},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 699, col: 50, offset: 20324},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 699, col: 54, offset: 20328},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 699, col: 57, offset: 20331},
									label: "arg1",
									expr: &ruleRefExpr{
										pos:  position{line: 699, col: 62, offset: 20336},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 699, col: 67, offset: 20341},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 699, col: 70, offset: 20344},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 699, col: 74, offset: 20348},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 699, col: 80, offset: 20354},
										expr: &ruleRefExpr{
											pos:  position{line: 699, col: 80, offset: 20354},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 703, col: 5, offset: 20602},
						run: (*parser).callonFunction21,
						expr: &seqExpr{
							pos: position{line: 703, col: 5, offset: 20602},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 703, col: 5, offset: 20602},
									val:        "regexp_replace",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 703, col: 22, offset: 20619},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 703, col: 25, offset: 20622},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 703, col: 29, offset: 20626},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 703, col: 32, offset: 20629},
									label: "arg0",
									expr: &ruleRefExpr{
										pos:  position{line: 703, col: 37, offset: 20634},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 703, col: 42, offset: 20639},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 703, col: 45, offset: 20642},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 703, col: 49, offset: 20646},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 703, col: 52, offset: 20649},
									label: "arg1Text",
									expr: &ruleRefExpr{
										pos:  position{line: 703, col: 61, offset: 20658},
										name: "RegexpPattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 703, col: 75, offset: 20672},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 703, col: 78, offset: 20675},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 703, col: 82, offset: 20679},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 703, col: 85, offset: 20682},
									label: "arg2",
									expr: &ruleRefExpr{
										pos:  position{line: 703, col: 90, offset: 20687},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 703, col: 95, offset: 20692},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 703, col: 98, offset: 20695},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 703, col: 102, offset: 20699},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 703, col: 108, offset: 20705},
										expr: &ruleRefExpr{
											pos:  position{line: 703, col: 108, offset: 20705},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 707, col: 5, offset: 20967},
						run: (*parser).callonFunction44,
						expr: &seqExpr{
							pos: position{line: 707, col: 5, offset: 20967},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 707, col: 5, offset: 20967},
									expr: &ruleRefExpr{
										pos:  position{line: 707, col: 6, offset: 20968},
										name: "FuncGuard",
									},
								},
								&labeledExpr{
									pos:   position{line: 707, col: 16, offset: 20978},
									label: "fn",
									expr: &ruleRefExpr{
										pos:  position{line: 707, col: 19, offset: 20981},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 707, col: 34, offset: 20996},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 707, col: 37, offset: 20999},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 707, col: 41, offset: 21003},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 707, col: 44, offset: 21006},
									label: "args",
									expr: &ruleRefExpr{
										pos:  position{line: 707, col: 49, offset: 21011},
										name: "FunctionArgs",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 707, col: 62, offset: 21024},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 707, col: 65, offset: 21027},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 707, col: 69, offset: 21031},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 707, col: 75, offset: 21037},
										expr: &ruleRefExpr{
											pos:  position{line: 707, col: 75, offset: 21037},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FunctionArgs",
			pos:  position{line: 711, col: 1, offset: 21158},
			expr: &choiceExpr{
				pos: position{line: 712, col: 5, offset: 21175},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 712, col: 5, offset: 21175},
						run: (*parser).callonFunctionArgs2,
						expr: &labeledExpr{
							pos:   position{line: 712, col: 5, offset: 21175},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 712, col: 7, offset: 21177},
								name: "OverExpr",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 713, col: 5, offset: 21223},
						name: "OptionalExprs",
					},
				},
			},
		},
		{
			name: "Grep",
			pos:  position{line: 715, col: 1, offset: 21238},
			expr: &actionExpr{
				pos: position{line: 716, col: 5, offset: 21247},
				run: (*parser).callonGrep1,
				expr: &seqExpr{
					pos: position{line: 716, col: 5, offset: 21247},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 716, col: 5, offset: 21247},
							val:        "grep",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 716, col: 12, offset: 21254},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 716, col: 15, offset: 21257},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 716, col: 19, offset: 21261},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 716, col: 22, offset: 21264},
							label: "pattern",
							expr: &ruleRefExpr{
								pos:  position{line: 716, col: 30, offset: 21272},
								name: "Pattern",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 716, col: 38, offset: 21280},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 716, col: 41, offset: 21283},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 716, col: 45, offset: 21287},
								expr: &seqExpr{
									pos: position{line: 716, col: 46, offset: 21288},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 716, col: 46, offset: 21288},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 716, col: 50, offset: 21292},
											name: "__",
										},
										&choiceExpr{
											pos: position{line: 716, col: 54, offset: 21296},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 716, col: 54, offset: 21296},
													name: "OverExpr",
												},
												&ruleRefExpr{
													pos:  position{line: 716, col: 65, offset: 21307},
													name: "Expr",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 716, col: 71, offset: 21313},
											name: "__",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 716, col: 76, offset: 21318},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Pattern",
			pos:  position{line: 724, col: 1, offset: 21559},
			expr: &choiceExpr{
				pos: position{line: 725, col: 5, offset: 21571},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 725, col: 5, offset: 21571},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 726, col: 5, offset: 21582},
						name: "Glob",
					},
					&actionExpr{
						pos: position{line: 727, col: 5, offset: 21591},
						run: (*parser).callonPattern4,
						expr: &labeledExpr{
							pos:   position{line: 727, col: 5, offset: 21591},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 727, col: 7, offset: 21593},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "OptionalExprs",
			pos:  position{line: 731, col: 1, offset: 21685},
			expr: &choiceExpr{
				pos: position{line: 732, col: 5, offset: 21703},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 732, col: 5, offset: 21703},
						name: "Exprs",
					},
					&actionExpr{
						pos: position{line: 733, col: 5, offset: 21713},
						run: (*parser).callonOptionalExprs3,
						expr: &ruleRefExpr{
							pos:  position{line: 733, col: 5, offset: 21713},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 735, col: 1, offset: 21749},
			expr: &actionExpr{
				pos: position{line: 736, col: 5, offset: 21759},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 736, col: 5, offset: 21759},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 736, col: 5, offset: 21759},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 736, col: 11, offset: 21765},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 736, col: 16, offset: 21770},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 736, col: 21, offset: 21775},
								expr: &actionExpr{
									pos: position{line: 736, col: 22, offset: 21776},
									run: (*parser).callonExprs7,
									expr: &seqExpr{
										pos: position{line: 736, col: 22, offset: 21776},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 736, col: 22, offset: 21776},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 736, col: 25, offset: 21779},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 736, col: 29, offset: 21783},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 736, col: 32, offset: 21786},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 736, col: 34, offset: 21788},
													name: "Expr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 740, col: 1, offset: 21897},
			expr: &actionExpr{
				pos: position{line: 741, col: 5, offset: 21911},
				run: (*parser).callonDerefExpr1,
				expr: &seqExpr{
					pos: position{line: 741, col: 5, offset: 21911},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 741, col: 5, offset: 21911},
							expr: &ruleRefExpr{
								pos:  position{line: 741, col: 6, offset: 21912},
								name: "IP6",
							},
						},
						&labeledExpr{
							pos:   position{line: 741, col: 10, offset: 21916},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 741, col: 16, offset: 21922},
								name: "Identifier",
							},
						},
						&labeledExpr{
							pos:   position{line: 741, col: 27, offset: 21933},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 741, col: 32, offset: 21938},
								expr: &ruleRefExpr{
									pos:  position{line: 741, col: 33, offset: 21939},
									name: "Deref",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 745, col: 1, offset: 22007},
			expr: &choiceExpr{
				pos: position{line: 746, col: 5, offset: 22017},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 746, col: 5, offset: 22017},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 746, col: 5, offset: 22017},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 746, col: 5, offset: 22017},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 746, col: 9, offset: 22021},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 746, col: 14, offset: 22026},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 746, col: 27, offset: 22039},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 746, col: 30, offset: 22042},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 746, col: 34, offset: 22046},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 746, col: 37, offset: 22049},
									label: "to",
									expr: &zeroOrOneExpr{
										pos: position{line: 746, col: 40, offset: 22052},
										expr: &ruleRefExpr{
											pos:  position{line: 746, col: 40, offset: 22052},
											name: "AdditiveExpr",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 746, col: 54, offset: 22066},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 752, col: 5, offset: 22240},
						run: (*parser).callonDeref14,
						expr: &seqExpr{
							pos: position{line: 752, col: 5, offset: 22240},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 752, col: 5, offset: 22240},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 752, col: 9, offset: 22244},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 752, col: 12, offset: 22247},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 752, col: 16, offset: 22251},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 752, col: 19, offset: 22254},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 752, col: 22, offset: 22257},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 752, col: 35, offset: 22270},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 758, col: 5, offset: 22443},
						run: (*parser).callonDeref23,
						expr: &seqExpr{
							pos: position{line: 758, col: 5, offset: 22443},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 758, col: 5, offset: 22443},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 758, col: 9, offset: 22447},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 758, col: 14, offset: 22452},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 758, col: 19, offset: 22457},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 759, col: 5, offset: 22506},
						run: (*parser).callonDeref29,
						expr: &seqExpr{
							pos: position{line: 759, col: 5, offset: 22506},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 759, col: 5, offset: 22506},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 759, col: 9, offset: 22510},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 759, col: 12, offset: 22513},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 761, col: 1, offset: 22564},
			expr: &choiceExpr{
				pos: position{line: 762, col: 5, offset: 22576},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 762, col: 5, offset: 22576},
						name: "Record",
					},
					&ruleRefExpr{
						pos:  position{line: 763, col: 5, offset: 22587},
						name: "Array",
					},
					&ruleRefExpr{
						pos:  position{line: 764, col: 5, offset: 22597},
						name: "Set",
					},
					&ruleRefExpr{
						pos:  position{line: 765, col: 5, offset: 22605},
						name: "Map",
					},
					&ruleRefExpr{
						pos:  position{line: 766, col: 5, offset: 22613},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 767, col: 5, offset: 22625},
						run: (*parser).callonPrimary7,
						expr: &seqExpr{
							pos: position{line: 767, col: 5, offset: 22625},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 767, col: 5, offset: 22625},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 767, col: 9, offset: 22629},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 767, col: 12, offset: 22632},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 767, col: 17, offset: 22637},
										name: "OverExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 767, col: 26, offset: 22646},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 767, col: 29, offset: 22649},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 768, col: 5, offset: 22678},
						run: (*parser).callonPrimary15,
						expr: &seqExpr{
							pos: position{line: 768, col: 5, offset: 22678},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 768, col: 5, offset: 22678},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 768, col: 9, offset: 22682},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 768, col: 12, offset: 22685},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 768, col: 17, offset: 22690},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 768, col: 22, offset: 22695},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 768, col: 25, offset: 22698},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OverExpr",
			pos:  position{line: 770, col: 1, offset: 22724},
			expr: &actionExpr{
				pos: position{line: 771, col: 5, offset: 22737},
				run: (*parser).callonOverExpr1,
				expr: &seqExpr{
					pos: position{line: 771, col: 5, offset: 22737},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 771, col: 5, offset: 22737},
							val:        "over",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 771, col: 12, offset: 22744},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 771, col: 14, offset: 22746},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 771, col: 20, offset: 22752},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 771, col: 26, offset: 22758},
							label: "locals",
							expr: &zeroOrOneExpr{
								pos: position{line: 771, col: 33, offset: 22765},
								expr: &ruleRefExpr{
									pos:  position{line: 771, col: 33, offset: 22765},
									name: "Locals",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 771, col: 41, offset: 22773},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 771, col: 44, offset: 22776},
							val:        "|",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 771, col: 48, offset: 22780},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 771, col: 51, offset: 22783},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 771, col: 56, offset: 22788},
								name: "Seq",
							},
						},
					},
				},
			},
		},
		{
			name: "Record",
			pos:  position{line: 775, col: 1, offset: 22910},
			expr: &actionExpr{
				pos: position{line: 776, col: 5, offset: 22921},
				run: (*parser).callonRecord1,
				expr: &seqExpr{
					pos: position{line: 776, col: 5, offset: 22921},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 776, col: 5, offset: 22921},
							val:        "{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 776, col: 9, offset: 22925},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 776, col: 12, offset: 22928},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 776, col: 18, offset: 22934},
								name: "RecordElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 776, col: 30, offset: 22946},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 776, col: 33, offset: 22949},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RecordElems",
			pos:  position{line: 780, col: 1, offset: 23041},
			expr: &choiceExpr{
				pos: position{line: 781, col: 5, offset: 23057},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 781, col: 5, offset: 23057},
						run: (*parser).callonRecordElems2,
						expr: &seqExpr{
							pos: position{line: 781, col: 5, offset: 23057},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 781, col: 5, offset: 23057},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 781, col: 11, offset: 23063},
										name: "RecordElem",
									},
								},
								&labeledExpr{
									pos:   position{line: 781, col: 22, offset: 23074},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 781, col: 27, offset: 23079},
										expr: &ruleRefExpr{
											pos:  position{line: 781, col: 27, offset: 23079},
											name: "RecordElemTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 784, col: 5, offset: 23178},
						run: (*parser).callonRecordElems9,
						expr: &ruleRefExpr{
							pos:  position{line: 784, col: 5, offset: 23178},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "RecordElemTail",
			pos:  position{line: 786, col: 1, offset: 23214},
			expr: &actionExpr{
				pos: position{line: 786, col: 18, offset: 23231},
				run: (*parser).callonRecordElemTail1,
				expr: &seqExpr{
					pos: position{line: 786, col: 18, offset: 23231},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 786, col: 18, offset: 23231},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 786, col: 21, offset: 23234},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 786, col: 25, offset: 23238},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 786, col: 28, offset: 23241},
							label: "elem",
							expr: &ruleRefExpr{
								pos:  position{line: 786, col: 33, offset: 23246},
								name: "RecordElem",
							},
						},
					},
				},
			},
		},
		{
			name: "RecordElem",
			pos:  position{line: 788, col: 1, offset: 23279},
			expr: &choiceExpr{
				pos: position{line: 789, col: 5, offset: 23294},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 789, col: 5, offset: 23294},
						name: "Spread",
					},
					&ruleRefExpr{
						pos:  position{line: 790, col: 5, offset: 23305},
						name: "Field",
					},
					&ruleRefExpr{
						pos:  position{line: 791, col: 5, offset: 23315},
						name: "Identifier",
					},
				},
			},
		},
		{
			name: "Spread",
			pos:  position{line: 793, col: 1, offset: 23327},
			expr: &actionExpr{
				pos: position{line: 794, col: 5, offset: 23338},
				run: (*parser).callonSpread1,
				expr: &seqExpr{
					pos: position{line: 794, col: 5, offset: 23338},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 794, col: 5, offset: 23338},
							val:        "...",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 794, col: 11, offset: 23344},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 794, col: 14, offset: 23347},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 794, col: 19, offset: 23352},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 798, col: 1, offset: 23439},
			expr: &actionExpr{
				pos: position{line: 799, col: 5, offset: 23449},
				run: (*parser).callonField1,
				expr: &seqExpr{
					pos: position{line: 799, col: 5, offset: 23449},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 799, col: 5, offset: 23449},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 799, col: 10, offset: 23454},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 799, col: 20, offset: 23464},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 799, col: 23, offset: 23467},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 799, col: 27, offset: 23471},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 799, col: 30, offset: 23474},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 799, col: 36, offset: 23480},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Array",
			pos:  position{line: 803, col: 1, offset: 23582},
			expr: &actionExpr{
				pos: position{line: 804, col: 5, offset: 23592},
				run: (*parser).callonArray1,
				expr: &seqExpr{
					pos: position{line: 804, col: 5, offset: 23592},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 804, col: 5, offset: 23592},
							val:        "[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 804, col: 9, offset: 23596},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 804, col: 12, offset: 23599},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 804, col: 18, offset: 23605},
								name: "VectorElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 804, col: 30, offset: 23617},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 804, col: 33, offset: 23620},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Set",
			pos:  position{line: 808, col: 1, offset: 23711},
			expr: &actionExpr{
				pos: position{line: 809, col: 5, offset: 23719},
				run: (*parser).callonSet1,
				expr: &seqExpr{
					pos: position{line: 809, col: 5, offset: 23719},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 809, col: 5, offset: 23719},
							val:        "|[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 809, col: 10, offset: 23724},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 809, col: 13, offset: 23727},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 809, col: 19, offset: 23733},
								name: "VectorElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 809, col: 31, offset: 23745},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 809, col: 34, offset: 23748},
							val:        "]|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "VectorElems",
			pos:  position{line: 813, col: 1, offset: 23838},
			expr: &choiceExpr{
				pos: position{line: 814, col: 5, offset: 23854},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 814, col: 5, offset: 23854},
						run: (*parser).callonVectorElems2,
						expr: &seqExpr{
							pos: position{line: 814, col: 5, offset: 23854},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 814, col: 5, offset: 23854},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 814, col: 11, offset: 23860},
										name: "VectorElem",
									},
								},
								&labeledExpr{
									pos:   position{line: 814, col: 22, offset: 23871},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 814, col: 27, offset: 23876},
										expr: &actionExpr{
											pos: position{line: 814, col: 28, offset: 23877},
											run: (*parser).callonVectorElems8,
											expr: &seqExpr{
												pos: position{line: 814, col: 28, offset: 23877},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 814, col: 28, offset: 23877},
														name: "__",
													},
													&litMatcher{
														pos:        position{line: 814, col: 31, offset: 23880},
														val:        ",",
														ignoreCase: false,
													},
													&ruleRefExpr{
														pos:  position{line: 814, col: 35, offset: 23884},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 814, col: 38, offset: 23887},
														label: "e",
														expr: &ruleRefExpr{
															pos:  position{line: 814, col: 40, offset: 23889},
															name: "VectorElem",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 817, col: 5, offset: 24007},
						run: (*parser).callonVectorElems15,
						expr: &ruleRefExpr{
							pos:  position{line: 817, col: 5, offset: 24007},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "VectorElem",
			pos:  position{line: 819, col: 1, offset: 24043},
			expr: &choiceExpr{
				pos: position{line: 820, col: 5, offset: 24058},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 820, col: 5, offset: 24058},
						name: "Spread",
					},
					&actionExpr{
						pos: position{line: 821, col: 5, offset: 24069},
						run: (*parser).callonVectorElem3,
						expr: &labeledExpr{
							pos:   position{line: 821, col: 5, offset: 24069},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 821, col: 7, offset: 24071},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Map",
			pos:  position{line: 823, col: 1, offset: 24150},
			expr: &actionExpr{
				pos: position{line: 824, col: 5, offset: 24158},
				run: (*parser).callonMap1,
				expr: &seqExpr{
					pos: position{line: 824, col: 5, offset: 24158},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 824, col: 5, offset: 24158},
							val:        "|{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 824, col: 10, offset: 24163},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 824, col: 13, offset: 24166},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 824, col: 19, offset: 24172},
								name: "Entries",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 824, col: 27, offset: 24180},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 824, col: 30, offset: 24183},
							val:        "}|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Entries",
			pos:  position{line: 828, col: 1, offset: 24275},
			expr: &choiceExpr{
				pos: position{line: 829, col: 5, offset: 24287},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 829, col: 5, offset: 24287},
						run: (*parser).callonEntries2,
						expr: &seqExpr{
							pos: position{line: 829, col: 5, offset: 24287},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 829, col: 5, offset: 24287},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 829, col: 11, offset: 24293},
										name: "Entry",
									},
								},
								&labeledExpr{
									pos:   position{line: 829, col: 17, offset: 24299},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 829, col: 22, offset: 24304},
										expr: &ruleRefExpr{
											pos:  position{line: 829, col: 22, offset: 24304},
											name: "EntryTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 832, col: 5, offset: 24398},
						run: (*parser).callonEntries9,
						expr: &ruleRefExpr{
							pos:  position{line: 832, col: 5, offset: 24398},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "EntryTail",
			pos:  position{line: 835, col: 1, offset: 24435},
			expr: &actionExpr{
				pos: position{line: 835, col: 13, offset: 24447},
				run: (*parser).callonEntryTail1,
				expr: &seqExpr{
					pos: position{line: 835, col: 13, offset: 24447},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 835, col: 13, offset: 24447},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 835, col: 16, offset: 24450},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 835, col: 20, offset: 24454},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 835, col: 23, offset: 24457},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 835, col: 25, offset: 24459},
								name: "Entry",
							},
						},
					},
				},
			},
		},
		{
			name: "Entry",
			pos:  position{line: 837, col: 1, offset: 24484},
			expr: &actionExpr{
				pos: position{line: 838, col: 5, offset: 24494},
				run: (*parser).callonEntry1,
				expr: &seqExpr{
					pos: position{line: 838, col: 5, offset: 24494},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 838, col: 5, offset: 24494},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 838, col: 9, offset: 24498},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 838, col: 14, offset: 24503},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 838, col: 17, offset: 24506},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 838, col: 21, offset: 24510},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 838, col: 24, offset: 24513},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 838, col: 30, offset: 24519},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOp",
			pos:  position{line: 844, col: 1, offset: 24626},
			expr: &actionExpr{
				pos: position{line: 845, col: 5, offset: 24636},
				run: (*parser).callonSQLOp1,
				expr: &seqExpr{
					pos: position{line: 845, col: 5, offset: 24636},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 845, col: 5, offset: 24636},
							label: "selection",
							expr: &ruleRefExpr{
								pos:  position{line: 845, col: 15, offset: 24646},
								name: "SQLSelect",
							},
						},
						&labeledExpr{
							pos:   position{line: 846, col: 5, offset: 24660},
							label: "from",
							expr: &zeroOrOneExpr{
								pos: position{line: 846, col: 10, offset: 24665},
								expr: &ruleRefExpr{
									pos:  position{line: 846, col: 10, offset: 24665},
									name: "SQLFrom",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 847, col: 5, offset: 24678},
							label: "joins",
							expr: &zeroOrOneExpr{
								pos: position{line: 847, col: 11, offset: 24684},
								expr: &ruleRefExpr{
									pos:  position{line: 847, col: 11, offset: 24684},
									name: "SQLJoins",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 848, col: 5, offset: 24698},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 848, col: 11, offset: 24704},
								expr: &ruleRefExpr{
									pos:  position{line: 848, col: 11, offset: 24704},
									name: "SQLWhere",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 849, col: 5, offset: 24718},
							label: "groupby",
							expr: &zeroOrOneExpr{
								pos: position{line: 849, col: 13, offset: 24726},
								expr: &ruleRefExpr{
									pos:  position{line: 849, col: 13, offset: 24726},
									name: "SQLGroupBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 850, col: 5, offset: 24742},
							label: "having",
							expr: &zeroOrOneExpr{
								pos: position{line: 850, col: 12, offset: 24749},
								expr: &ruleRefExpr{
									pos:  position{line: 850, col: 12, offset: 24749},
									name: "SQLHaving",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 851, col: 5, offset: 24764},
							label: "orderby",
							expr: &zeroOrOneExpr{
								pos: position{line: 851, col: 13, offset: 24772},
								expr: &ruleRefExpr{
									pos:  position{line: 851, col: 13, offset: 24772},
									name: "SQLOrderBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 852, col: 5, offset: 24788},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 852, col: 11, offset: 24794},
								name: "SQLLimit",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLSelect",
			pos:  position{line: 876, col: 1, offset: 25160},
			expr: &choiceExpr{
				pos: position{line: 877, col: 5, offset: 25174},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 877, col: 5, offset: 25174},
						run: (*parser).callonSQLSelect2,
						expr: &seqExpr{
							pos: position{line: 877, col: 5, offset: 25174},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 877, col: 5, offset: 25174},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 877, col: 12, offset: 25181},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 877, col: 14, offset: 25183},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 878, col: 5, offset: 25211},
						run: (*parser).callonSQLSelect7,
						expr: &seqExpr{
							pos: position{line: 878, col: 5, offset: 25211},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 878, col: 5, offset: 25211},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 878, col: 12, offset: 25218},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 878, col: 14, offset: 25220},
									label: "assignments",
									expr: &ruleRefExpr{
										pos:  position{line: 878, col: 26, offset: 25232},
										name: "SQLAssignments",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignment",
			pos:  position{line: 880, col: 1, offset: 25276},
			expr: &actionExpr{
				pos: position{line: 881, col: 5, offset: 25294},
				run: (*parser).callonSQLAssignment1,
				expr: &seqExpr{
					pos: position{line: 881, col: 5, offset: 25294},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 881, col: 5, offset: 25294},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 881, col: 9, offset: 25298},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 881, col: 14, offset: 25303},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 881, col: 18, offset: 25307},
								expr: &seqExpr{
									pos: position{line: 881, col: 19, offset: 25308},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 881, col: 19, offset: 25308},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 881, col: 21, offset: 25310},
											name: "AS",
										},
										&ruleRefExpr{
											pos:  position{line: 881, col: 24, offset: 25313},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 881, col: 26, offset: 25315},
											name: "Lval",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignments",
			pos:  position{line: 889, col: 1, offset: 25506},
			expr: &actionExpr{
				pos: position{line: 890, col: 5, offset: 25525},
				run: (*parser).callonSQLAssignments1,
				expr: &seqExpr{
					pos: position{line: 890, col: 5, offset: 25525},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 890, col: 5, offset: 25525},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 890, col: 11, offset: 25531},
								name: "SQLAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 890, col: 25, offset: 25545},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 890, col: 30, offset: 25550},
								expr: &actionExpr{
									pos: position{line: 890, col: 31, offset: 25551},
									run: (*parser).callonSQLAssignments7,
									expr: &seqExpr{
										pos: position{line: 890, col: 31, offset: 25551},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 890, col: 31, offset: 25551},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 890, col: 34, offset: 25554},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 890, col: 38, offset: 25558},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 890, col: 41, offset: 25561},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 890, col: 46, offset: 25566},
													name: "SQLAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLFrom",
			pos:  position{line: 894, col: 1, offset: 25687},
			expr: &choiceExpr{
				pos: position{line: 895, col: 5, offset: 25699},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 895, col: 5, offset: 25699},
						run: (*parser).callonSQLFrom2,
						expr: &seqExpr{
							pos: position{line: 895, col: 5, offset: 25699},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 895, col: 5, offset: 25699},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 895, col: 7, offset: 25701},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 895, col: 12, offset: 25706},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 895, col: 14, offset: 25708},
									label: "table",
									expr: &ruleRefExpr{
										pos:  position{line: 895, col: 20, offset: 25714},
										name: "SQLTable",
									},
								},
								&labeledExpr{
									pos:   position{line: 895, col: 29, offset: 25723},
									label: "alias",
									expr: &zeroOrOneExpr{
										pos: position{line: 895, col: 35, offset: 25729},
										expr: &ruleRefExpr{
											pos:  position{line: 895, col: 35, offset: 25729},
											name: "SQLAlias",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 898, col: 5, offset: 25824},
						run: (*parser).callonSQLFrom12,
						expr: &seqExpr{
							pos: position{line: 898, col: 5, offset: 25824},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 898, col: 5, offset: 25824},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 898, col: 7, offset: 25826},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 898, col: 12, offset: 25831},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 898, col: 14, offset: 25833},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAlias",
			pos:  position{line: 900, col: 1, offset: 25858},
			expr: &choiceExpr{
				pos: position{line: 901, col: 5, offset: 25871},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 901, col: 5, offset: 25871},
						run: (*parser).callonSQLAlias2,
						expr: &seqExpr{
							pos: position{line: 901, col: 5, offset: 25871},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 901, col: 5, offset: 25871},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 901, col: 7, offset: 25873},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 901, col: 10, offset: 25876},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 901, col: 12, offset: 25878},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 901, col: 15, offset: 25881},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 902, col: 5, offset: 25909},
						run: (*parser).callonSQLAlias9,
						expr: &seqExpr{
							pos: position{line: 902, col: 5, offset: 25909},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 902, col: 5, offset: 25909},
									name: "_",
								},
								&notExpr{
									pos: position{line: 902, col: 7, offset: 25911},
									expr: &seqExpr{
										pos: position{line: 902, col: 9, offset: 25913},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 902, col: 9, offset: 25913},
												name: "SQLTokenSentinels",
											},
											&ruleRefExpr{
												pos:  position{line: 902, col: 27, offset: 25931},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 902, col: 30, offset: 25934},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 902, col: 33, offset: 25937},
										name: "Lval",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLTable",
			pos:  position{line: 904, col: 1, offset: 25962},
			expr: &ruleRefExpr{
				pos:  position{line: 905, col: 5, offset: 25975},
				name: "Expr",
			},
		},
		{
			name: "SQLJoins",
			pos:  position{line: 907, col: 1, offset: 25981},
			expr: &actionExpr{
				pos: position{line: 908, col: 5, offset: 25994},
				run: (*parser).callonSQLJoins1,
				expr: &seqExpr{
					pos: position{line: 908, col: 5, offset: 25994},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 908, col: 5, offset: 25994},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 908, col: 11, offset: 26000},
								name: "SQLJoin",
							},
						},
						&labeledExpr{
							pos:   position{line: 908, col: 19, offset: 26008},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 908, col: 24, offset: 26013},
								expr: &actionExpr{
									pos: position{line: 908, col: 25, offset: 26014},
									run: (*parser).callonSQLJoins7,
									expr: &labeledExpr{
										pos:   position{line: 908, col: 25, offset: 26014},
										label: "join",
										expr: &ruleRefExpr{
											pos:  position{line: 908, col: 30, offset: 26019},
											name: "SQLJoin",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoin",
			pos:  position{line: 912, col: 1, offset: 26134},
			expr: &actionExpr{
				pos: position{line: 913, col: 5, offset: 26146},
				run: (*parser).callonSQLJoin1,
				expr: &seqExpr{
					pos: position{line: 913, col: 5, offset: 26146},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 913, col: 5, offset: 26146},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 913, col: 11, offset: 26152},
								name: "SQLJoinStyle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 913, col: 24, offset: 26165},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 913, col: 26, offset: 26167},
							name: "JOIN",
						},
						&ruleRefExpr{
							pos:  position{line: 913, col: 31, offset: 26172},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 913, col: 33, offset: 26174},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 913, col: 39, offset: 26180},
								name: "SQLTable",
							},
						},
						&labeledExpr{
							pos:   position{line: 913, col: 48, offset: 26189},
							label: "alias",
							expr: &zeroOrOneExpr{
								pos: position{line: 913, col: 54, offset: 26195},
								expr: &ruleRefExpr{
									pos:  position{line: 913, col: 54, offset: 26195},
									name: "SQLAlias",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 913, col: 64, offset: 26205},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 913, col: 66, offset: 26207},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 913, col: 69, offset: 26210},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 913, col: 71, offset: 26212},
							label: "leftKey",
							expr: &ruleRefExpr{
								pos:  position{line: 913, col: 79, offset: 26220},
								name: "JoinKey",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 913, col: 87, offset: 26228},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 913, col: 90, offset: 26231},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 913, col: 94, offset: 26235},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 913, col: 97, offset: 26238},
							label: "rightKey",
							expr: &ruleRefExpr{
								pos:  position{line: 913, col: 106, offset: 26247},
								name: "JoinKey",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoinStyle",
			pos:  position{line: 928, col: 1, offset: 26478},
			expr: &choiceExpr{
				pos: position{line: 929, col: 5, offset: 26495},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 929, col: 5, offset: 26495},
						run: (*parser).callonSQLJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 929, col: 5, offset: 26495},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 929, col: 5, offset: 26495},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 929, col: 7, offset: 26497},
									label: "style",
									expr: &choiceExpr{
										pos: position{line: 929, col: 14, offset: 26504},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 929, col: 14, offset: 26504},
												name: "ANTI",
											},
											&ruleRefExpr{
												pos:  position{line: 929, col: 21, offset: 26511},
												name: "INNER",
											},
											&ruleRefExpr{
												pos:  position{line: 929, col: 29, offset: 26519},
												name: "LEFT",
											},
											&ruleRefExpr{
												pos:  position{line: 929, col: 36, offset: 26526},
												name: "RIGHT",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 930, col: 5, offset: 26559},
						run: (*parser).callonSQLJoinStyle11,
						expr: &litMatcher{
							pos:        position{line: 930, col: 5, offset: 26559},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLWhere",
			pos:  position{line: 932, col: 1, offset: 26587},
			expr: &actionExpr{
				pos: position{line: 933, col: 5, offset: 26600},
				run: (*parser).callonSQLWhere1,
				expr: &seqExpr{
					pos: position{line: 933, col: 5, offset: 26600},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 933, col: 5, offset: 26600},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 933, col: 7, offset: 26602},
							name: "WHERE",
						},
						&ruleRefExpr{
							pos:  position{line: 933, col: 13, offset: 26608},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 933, col: 15, offset: 26610},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 933, col: 20, offset: 26615},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLGroupBy",
			pos:  position{line: 935, col: 1, offset: 26651},
			expr: &actionExpr{
				pos: position{line: 936, col: 5, offset: 26666},
				run: (*parser).callonSQLGroupBy1,
				expr: &seqExpr{
					pos: position{line: 936, col: 5, offset: 26666},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 936, col: 5, offset: 26666},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 936, col: 7, offset: 26668},
							name: "GROUP",
						},
						&ruleRefExpr{
							pos:  position{line: 936, col: 13, offset: 26674},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 936, col: 15, offset: 26676},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 936, col: 18, offset: 26679},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 936, col: 20, offset: 26681},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 936, col: 28, offset: 26689},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLHaving",
			pos:  position{line: 938, col: 1, offset: 26725},
			expr: &actionExpr{
				pos: position{line: 939, col: 5, offset: 26739},
				run: (*parser).callonSQLHaving1,
				expr: &seqExpr{
					pos: position{line: 939, col: 5, offset: 26739},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 939, col: 5, offset: 26739},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 939, col: 7, offset: 26741},
							name: "HAVING",
						},
						&ruleRefExpr{
							pos:  position{line: 939, col: 14, offset: 26748},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 939, col: 16, offset: 26750},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 939, col: 21, offset: 26755},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrderBy",
			pos:  position{line: 941, col: 1, offset: 26791},
			expr: &actionExpr{
				pos: position{line: 942, col: 5, offset: 26806},
				run: (*parser).callonSQLOrderBy1,
				expr: &seqExpr{
					pos: position{line: 942, col: 5, offset: 26806},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 942, col: 5, offset: 26806},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 942, col: 7, offset: 26808},
							name: "ORDER",
						},
						&ruleRefExpr{
							pos:  position{line: 942, col: 13, offset: 26814},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 942, col: 15, offset: 26816},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 942, col: 18, offset: 26819},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 942, col: 20, offset: 26821},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 942, col: 25, offset: 26826},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 942, col: 31, offset: 26832},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 942, col: 37, offset: 26838},
								name: "SQLOrder",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrder",
			pos:  position{line: 946, col: 1, offset: 26949},
			expr: &choiceExpr{
				pos: position{line: 947, col: 5, offset: 26962},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 947, col: 5, offset: 26962},
						run: (*parser).callonSQLOrder2,
						expr: &seqExpr{
							pos: position{line: 947, col: 5, offset: 26962},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 947, col: 5, offset: 26962},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 947, col: 7, offset: 26964},
									label: "dir",
									expr: &choiceExpr{
										pos: position{line: 947, col: 12, offset: 26969},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 947, col: 12, offset: 26969},
												name: "ASC",
											},
											&ruleRefExpr{
												pos:  position{line: 947, col: 18, offset: 26975},
												name: "DESC",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 948, col: 5, offset: 27005},
						run: (*parser).callonSQLOrder9,
						expr: &litMatcher{
							pos:        position{line: 948, col: 5, offset: 27005},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLLimit",
			pos:  position{line: 950, col: 1, offset: 27031},
			expr: &choiceExpr{
				pos: position{line: 951, col: 5, offset: 27044},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 951, col: 5, offset: 27044},
						run: (*parser).callonSQLLimit2,
						expr: &seqExpr{
							pos: position{line: 951, col: 5, offset: 27044},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 951, col: 5, offset: 27044},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 951, col: 7, offset: 27046},
									name: "LIMIT",
								},
								&ruleRefExpr{
									pos:  position{line: 951, col: 13, offset: 27052},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 951, col: 15, offset: 27054},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 951, col: 21, offset: 27060},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 952, col: 5, offset: 27091},
						run: (*parser).callonSQLLimit9,
						expr: &litMatcher{
							pos:        position{line: 952, col: 5, offset: 27091},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SELECT",
			pos:  position{line: 954, col: 1, offset: 27113},
			expr: &actionExpr{
				pos: position{line: 954, col: 10, offset: 27122},
				run: (*parser).callonSELECT1,
				expr: &litMatcher{
					pos:        position{line: 954, col: 10, offset: 27122},
					val:        "select",
					ignoreCase: true,
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 955, col: 1, offset: 27157},
			expr: &actionExpr{
				pos: position{line: 955, col: 6, offset: 27162},
				run: (*parser).callonAS1,
				expr: &litMatcher{
					pos:        position{line: 955, col: 6, offset: 27162},
					val:        "as",
					ignoreCase: true,
				},
			},
		},
		{
			name: "FROM",
			pos:  position{line: 956, col: 1, offset: 27189},
			expr: &actionExpr{
				pos: position{line: 956, col: 8, offset: 27196},
				run: (*parser).callonFROM1,
				expr: &litMatcher{
					pos:        position{line: 956, col: 8, offset: 27196},
					val:        "from",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JOIN",
			pos:  position{line: 957, col: 1, offset: 27227},
			expr: &actionExpr{
				pos: position{line: 957, col: 8, offset: 27234},
				run: (*parser).callonJOIN1,
				expr: &litMatcher{
					pos:        position{line: 957, col: 8, offset: 27234},
					val:        "join",
					ignoreCase: true,
				},
			},
		},
		{
			name: "WHERE",
			pos:  position{line: 958, col: 1, offset: 27265},
			expr: &actionExpr{
				pos: position{line: 958, col: 9, offset: 27273},
				run: (*parser).callonWHERE1,
				expr: &litMatcher{
					pos:        position{line: 958, col: 9, offset: 27273},
					val:        "where",
					ignoreCase: true,
				},
			},
		},
		{
			name: "GROUP",
			pos:  position{line: 959, col: 1, offset: 27306},
			expr: &actionExpr{
				pos: position{line: 959, col: 9, offset: 27314},
				run: (*parser).callonGROUP1,
				expr: &litMatcher{
					pos:        position{line: 959, col: 9, offset: 27314},
					val:        "group",
					ignoreCase: true,
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 960, col: 1, offset: 27347},
			expr: &actionExpr{
				pos: position{line: 960, col: 6, offset: 27352},
				run: (*parser).callonBY1,
				expr: &litMatcher{
					pos:        position{line: 960, col: 6, offset: 27352},
					val:        "by",
					ignoreCase: true,
				},
			},
		},
		{
			name: "HAVING",
			pos:  position{line: 961, col: 1, offset: 27379},
			expr: &actionExpr{
				pos: position{line: 961, col: 10, offset: 27388},
				run: (*parser).callonHAVING1,
				expr: &litMatcher{
					pos:        position{line: 961, col: 10, offset: 27388},
					val:        "having",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ORDER",
			pos:  position{line: 962, col: 1, offset: 27423},
			expr: &actionExpr{
				pos: position{line: 962, col: 9, offset: 27431},
				run: (*parser).callonORDER1,
				expr: &litMatcher{
					pos:        position{line: 962, col: 9, offset: 27431},
					val:        "order",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ON",
			pos:  position{line: 963, col: 1, offset: 27464},
			expr: &actionExpr{
				pos: position{line: 963, col: 6, offset: 27469},
				run: (*parser).callonON1,
				expr: &litMatcher{
					pos:        position{line: 963, col: 6, offset: 27469},
					val:        "on",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LIMIT",
			pos:  position{line: 964, col: 1, offset: 27496},
			expr: &actionExpr{
				pos: position{line: 964, col: 9, offset: 27504},
				run: (*parser).callonLIMIT1,
				expr: &litMatcher{
					pos:        position{line: 964, col: 9, offset: 27504},
					val:        "limit",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ASC",
			pos:  position{line: 965, col: 1, offset: 27537},
			expr: &actionExpr{
				pos: position{line: 965, col: 7, offset: 27543},
				run: (*parser).callonASC1,
				expr: &litMatcher{
					pos:        position{line: 965, col: 7, offset: 27543},
					val:        "asc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "DESC",
			pos:  position{line: 966, col: 1, offset: 27572},
			expr: &actionExpr{
				pos: position{line: 966, col: 8, offset: 27579},
				run: (*parser).callonDESC1,
				expr: &litMatcher{
					pos:        position{line: 966, col: 8, offset: 27579},
					val:        "desc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ANTI",
			pos:  position{line: 967, col: 1, offset: 27610},
			expr: &actionExpr{
				pos: position{line: 967, col: 8, offset: 27617},
				run: (*parser).callonANTI1,
				expr: &litMatcher{
					pos:        position{line: 967, col: 8, offset: 27617},
					val:        "anti",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LEFT",
			pos:  position{line: 968, col: 1, offset: 27648},
			expr: &actionExpr{
				pos: position{line: 968, col: 8, offset: 27655},
				run: (*parser).callonLEFT1,
				expr: &litMatcher{
					pos:        position{line: 968, col: 8, offset: 27655},
					val:        "left",
					ignoreCase: true,
				},
			},
		},
		{
			name: "RIGHT",
			pos:  position{line: 969, col: 1, offset: 27686},
			expr: &actionExpr{
				pos: position{line: 969, col: 9, offset: 27694},
				run: (*parser).callonRIGHT1,
				expr: &litMatcher{
					pos:        position{line: 969, col: 9, offset: 27694},
					val:        "right",
					ignoreCase: true,
				},
			},
		},
		{
			name: "INNER",
			pos:  position{line: 970, col: 1, offset: 27727},
			expr: &actionExpr{
				pos: position{line: 970, col: 9, offset: 27735},
				run: (*parser).callonINNER1,
				expr: &litMatcher{
					pos:        position{line: 970, col: 9, offset: 27735},
					val:        "inner",
					ignoreCase: true,
				},
			},
		},
		{
			name: "SQLTokenSentinels",
			pos:  position{line: 972, col: 1, offset: 27769},
			expr: &choiceExpr{
				pos: position{line: 973, col: 5, offset: 27791},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 973, col: 5, offset: 27791},
						name: "SELECT",
					},
					&ruleRefExpr{
						pos:  position{line: 973, col: 14, offset: 27800},
						name: "AS",
					},
					&ruleRefExpr{
						pos:  position{line: 973, col: 19, offset: 27805},
						name: "FROM",
					},
					&ruleRefExpr{
						pos:  position{line: 973, col: 26, offset: 27812},
						name: "JOIN",
					},
					&ruleRefExpr{
						pos:  position{line: 973, col: 33, offset: 27819},
						name: "WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 973, col: 41, offset: 27827},
						name: "GROUP",
					},
					&ruleRefExpr{
						pos:  position{line: 973, col: 49, offset: 27835},
						name: "HAVING",
					},
					&ruleRefExpr{
						pos:  position{line: 973, col: 58, offset: 27844},
						name: "ORDER",
					},
					&ruleRefExpr{
						pos:  position{line: 973, col: 66, offset: 27852},
						name: "LIMIT",
					},
					&ruleRefExpr{
						pos:  position{line: 973, col: 74, offset: 27860},
						name: "ON",
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 977, col: 1, offset: 27886},
			expr: &choiceExpr{
				pos: position{line: 978, col: 5, offset: 27898},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 978, col: 5, offset: 27898},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 979, col: 5, offset: 27914},
						name: "TemplateLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 980, col: 5, offset: 27934},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 981, col: 5, offset: 27952},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 982, col: 5, offset: 27971},
						name: "BytesLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 983, col: 5, offset: 27988},
						name: "Duration",
					},
					&ruleRefExpr{
						pos:  position{line: 984, col: 5, offset: 28001},
						name: "Time",
					},
					&ruleRefExpr{
						pos:  position{line: 985, col: 5, offset: 28010},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 986, col: 5, offset: 28027},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 987, col: 5, offset: 28046},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 988, col: 5, offset: 28065},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 990, col: 1, offset: 28078},
			expr: &choiceExpr{
				pos: position{line: 991, col: 5, offset: 28096},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 991, col: 5, offset: 28096},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 991, col: 5, offset: 28096},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 991, col: 5, offset: 28096},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 991, col: 7, offset: 28098},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 991, col: 14, offset: 28105},
									expr: &ruleRefExpr{
										pos:  position{line: 991, col: 15, offset: 28106},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 994, col: 5, offset: 28221},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 994, col: 5, offset: 28221},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 994, col: 7, offset: 28223},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 998, col: 1, offset: 28327},
			expr: &choiceExpr{
				pos: position{line: 999, col: 5, offset: 28346},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 999, col: 5, offset: 28346},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 999, col: 5, offset: 28346},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 999, col: 5, offset: 28346},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 999, col: 7, offset: 28348},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 999, col: 11, offset: 28352},
									expr: &ruleRefExpr{
										pos:  position{line: 999, col: 12, offset: 28353},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1002, col: 5, offset: 28467},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 1002, col: 5, offset: 28467},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1002, col: 7, offset: 28469},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 1006, col: 1, offset: 28568},
			expr: &actionExpr{
				pos: position{line: 1007, col: 5, offset: 28585},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1007, col: 5, offset: 28585},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1007, col: 7, offset: 28587},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 1011, col: 1, offset: 28700},
			expr: &actionExpr{
				pos: position{line: 1012, col: 5, offset: 28719},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1012, col: 5, offset: 28719},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1012, col: 7, offset: 28721},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 1016, col: 1, offset: 28830},
			expr: &choiceExpr{
				pos: position{line: 1017, col: 5, offset: 28849},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1017, col: 5, offset: 28849},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 1017, col: 5, offset: 28849},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1018, col: 5, offset: 28953},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 1018, col: 5, offset: 28953},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 1020, col: 1, offset: 29055},
			expr: &actionExpr{
				pos: position{line: 1021, col: 5, offset: 29071},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 1021, col: 5, offset: 29071},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "BytesLiteral",
			pos:  position{line: 1023, col: 1, offset: 29167},
			expr: &actionExpr{
				pos: position{line: 1024, col: 5, offset: 29184},
				run: (*parser).callonBytesLiteral1,
				expr: &seqExpr{
					pos: position{line: 1024, col: 5, offset: 29184},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1024, col: 5, offset: 29184},
							val:        "0x",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1024, col: 10, offset: 29189},
							expr: &ruleRefExpr{
								pos:  position{line: 1024, col: 10, offset: 29189},
								name: "HexDigit",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeLiteral",
			pos:  position{line: 1028, col: 1, offset: 29304},
			expr: &actionExpr{
				pos: position{line: 1029, col: 5, offset: 29320},
				run: (*parser).callonTypeLiteral1,
				expr: &seqExpr{
					pos: position{line: 1029, col: 5, offset: 29320},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1029, col: 5, offset: 29320},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1029, col: 9, offset: 29324},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1029, col: 13, offset: 29328},
								name: "Type",
							},
						},
						&litMatcher{
							pos:        position{line: 1029, col: 18, offset: 29333},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "CastType",
			pos:  position{line: 1033, col: 1, offset: 29422},
			expr: &choiceExpr{
				pos: position{line: 1034, col: 5, offset: 29435},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1034, col: 5, offset: 29435},
						name: "TypeLiteral",
					},
					&actionExpr{
						pos: position{line: 1035, col: 5, offset: 29451},
						run: (*parser).callonCastType3,
						expr: &labeledExpr{
							pos:   position{line: 1035, col: 5, offset: 29451},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1035, col: 9, offset: 29455},
								name: "PrimitiveType",
							},
						},
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 1039, col: 1, offset: 29554},
			expr: &choiceExpr{
				pos: position{line: 1040, col: 5, offset: 29563},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1040, col: 5, offset: 29563},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1041, col: 5, offset: 29579},
						name: "AmbiguousType",
					},
					&ruleRefExpr{
						pos:  position{line: 1042, col: 5, offset: 29597},
						name: "ComplexType",
					},
				},
			},
		},
		{
			name: "AmbiguousType",
			pos:  position{line: 1044, col: 1, offset: 29610},
			expr: &choiceExpr{
				pos: position{line: 1045, col: 5, offset: 29628},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1045, col: 5, offset: 29628},
						run: (*parser).callonAmbiguousType2,
						expr: &seqExpr{
							pos: position{line: 1045, col: 5, offset: 29628},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1045, col: 5, offset: 29628},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1045, col: 10, offset: 29633},
										name: "PrimitiveType",
									},
								},
								&notExpr{
									pos: position{line: 1045, col: 24, offset: 29647},
									expr: &ruleRefExpr{
										pos:  position{line: 1045, col: 25, offset: 29648},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1046, col: 5, offset: 29688},
						run: (*parser).callonAmbiguousType8,
						expr: &seqExpr{
							pos: position{line: 1046, col: 5, offset: 29688},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1046, col: 5, offset: 29688},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1046, col: 10, offset: 29693},
										name: "IdentifierName",
									},
								},
								&labeledExpr{
									pos:   position{line: 1046, col: 25, offset: 29708},
									label: "opt",
									expr: &zeroOrOneExpr{
										pos: position{line: 1046, col: 29, offset: 29712},
										expr: &seqExpr{
											pos: position{line: 1046, col: 30, offset: 29713},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1046, col: 30, offset: 29713},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 1046, col: 33, offset: 29716},
													val:        "=",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 1046, col: 37, offset: 29720},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 1046, col: 40, offset: 29723},
													name: "Type",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1052, col: 5, offset: 29955},
						run: (*parser).callonAmbiguousType19,
						expr: &labeledExpr{
							pos:   position{line: 1052, col: 5, offset: 29955},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1052, col: 10, offset: 29960},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1055, col: 5, offset: 30060},
						run: (*parser).callonAmbiguousType22,
						expr: &seqExpr{
							pos: position{line: 1055, col: 5, offset: 30060},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1055, col: 5, offset: 30060},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1055, col: 9, offset: 30064},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1055, col: 12, offset: 30067},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 1055, col: 14, offset: 30069},
										name: "TypeUnion",
									},
								},
								&litMatcher{
									pos:        position{line: 1055, col: 24, offset: 30079},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeUnion",
			pos:  position{line: 1057, col: 1, offset: 30102},
			expr: &actionExpr{
				pos: position{line: 1058, col: 5, offset: 30116},
				run: (*parser).callonTypeUnion1,
				expr: &labeledExpr{
					pos:   position{line: 1058, col: 5, offset: 30116},
					label: "types",
					expr: &ruleRefExpr{
						pos:  position{line: 1058, col: 11, offset: 30122},
						name: "TypeList",
					},
				},
			},
		},
		{
			name: "TypeList",
			pos:  position{line: 1062, col: 1, offset: 30218},
			expr: &actionExpr{
				pos: position{line: 1063, col: 5, offset: 30231},
				run: (*parser).callonTypeList1,
				expr: &seqExpr{
					pos: position{line: 1063, col: 5, offset: 30231},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1063, col: 5, offset: 30231},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1063, col: 11, offset: 30237},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 1063, col: 16, offset: 30242},
							label: "rest",
							expr: &oneOrMoreExpr{
								pos: position{line: 1063, col: 21, offset: 30247},
								expr: &ruleRefExpr{
									pos:  position{line: 1063, col: 21, offset: 30247},
									name: "TypeListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeListTail",
			pos:  position{line: 1067, col: 1, offset: 30341},
			expr: &actionExpr{
				pos: position{line: 1067, col: 16, offset: 30356},
				run: (*parser).callonTypeListTail1,
				expr: &seqExpr{
					pos: position{line: 1067, col: 16, offset: 30356},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1067, col: 16, offset: 30356},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1067, col: 19, offset: 30359},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1067, col: 23, offset: 30363},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1067, col: 26, offset: 30366},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1067, col: 30, offset: 30370},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexType",
			pos:  position{line: 1069, col: 1, offset: 30396},
			expr: &choiceExpr{
				pos: position{line: 1070, col: 5, offset: 30412},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1070, col: 5, offset: 30412},
						run: (*parser).callonComplexType2,
						expr: &seqExpr{
							pos: position{line: 1070, col: 5, offset: 30412},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1070, col: 5, offset: 30412},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1070, col: 9, offset: 30416},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1070, col: 12, offset: 30419},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 1070, col: 19, offset: 30426},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1070, col: 33, offset: 30440},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1070, col: 36, offset: 30443},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1073, col: 5, offset: 30540},
						run: (*parser).callonComplexType10,
						expr: &seqExpr{
							pos: position{line: 1073, col: 5, offset: 30540},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1073, col: 5, offset: 30540},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1073, col: 9, offset: 30544},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1073, col: 12, offset: 30547},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1073, col: 16, offset: 30551},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1073, col: 21, offset: 30556},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1073, col: 24, offset: 30559},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1076, col: 5, offset: 30650},
						run: (*parser).callonComplexType18,
						expr: &seqExpr{
							pos: position{line: 1076, col: 5, offset: 30650},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1076, col: 5, offset: 30650},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1076, col: 10, offset: 30655},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1076, col: 13, offset: 30658},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1076, col: 17, offset: 30662},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1076, col: 22, offset: 30667},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1076, col: 25, offset: 30670},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1079, col: 5, offset: 30760},
						run: (*parser).callonComplexType26,
						expr: &seqExpr{
							pos: position{line: 1079, col: 5, offset: 30760},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1079, col: 5, offset: 30760},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1079, col: 10, offset: 30765},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1079, col: 13, offset: 30768},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 1079, col: 21, offset: 30776},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1079, col: 26, offset: 30781},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1079, col: 29, offset: 30784},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1079, col: 33, offset: 30788},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1079, col: 36, offset: 30791},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 1079, col: 44, offset: 30799},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1079, col: 49, offset: 30804},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1079, col: 52, offset: 30807},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateLiteral",
			pos:  position{line: 1083, col: 1, offset: 30923},
			expr: &actionExpr{
				pos: position{line: 1084, col: 5, offset: 30943},
				run: (*parser).callonTemplateLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1084, col: 5, offset: 30943},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1084, col: 7, offset: 30945},
						name: "TemplateLiteralParts",
					},
				},
			},
		},
		{
			name: "TemplateLiteralParts",
			pos:  position{line: 1091, col: 1, offset: 31161},
			expr: &choiceExpr{
				pos: position{line: 1092, col: 5, offset: 31186},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1092, col: 5, offset: 31186},
						run: (*parser).callonTemplateLiteralParts2,
						expr: &seqExpr{
							pos: position{line: 1092, col: 5, offset: 31186},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1092, col: 5, offset: 31186},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1092, col: 9, offset: 31190},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1092, col: 11, offset: 31192},
										expr: &ruleRefExpr{
											pos:  position{line: 1092, col: 11, offset: 31192},
											name: "TemplateDoubleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1092, col: 37, offset: 31218},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1093, col: 5, offset: 31244},
						run: (*parser).callonTemplateLiteralParts9,
						expr: &seqExpr{
							pos: position{line: 1093, col: 5, offset: 31244},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1093, col: 5, offset: 31244},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1093, col: 9, offset: 31248},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1093, col: 11, offset: 31250},
										expr: &ruleRefExpr{
											pos:  position{line: 1093, col: 11, offset: 31250},
											name: "TemplateSingleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1093, col: 37, offset: 31276},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedPart",
			pos:  position{line: 1095, col: 1, offset: 31299},
			expr: &choiceExpr{
				pos: position{line: 1096, col: 5, offset: 31328},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1096, col: 5, offset: 31328},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 1097, col: 5, offset: 31345},
						run: (*parser).callonTemplateDoubleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 1097, col: 5, offset: 31345},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1097, col: 7, offset: 31347},
								expr: &ruleRefExpr{
									pos:  position{line: 1097, col: 7, offset: 31347},
									name: "TemplateDoubleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedChar",
			pos:  position{line: 1101, col: 1, offset: 31484},
			expr: &choiceExpr{
				pos: position{line: 1102, col: 5, offset: 31513},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1102, col: 5, offset: 31513},
						run: (*parser).callonTemplateDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1102, col: 5, offset: 31513},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1102, col: 5, offset: 31513},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1102, col: 10, offset: 31518},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1102, col: 12, offset: 31520},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1103, col: 5, offset: 31547},
						run: (*parser).callonTemplateDoubleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1103, col: 5, offset: 31547},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1103, col: 5, offset: 31547},
									expr: &litMatcher{
										pos:        position{line: 1103, col: 7, offset: 31549},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1103, col: 13, offset: 31555},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1103, col: 15, offset: 31557},
										name: "DoubleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedPart",
			pos:  position{line: 1105, col: 1, offset: 31593},
			expr: &choiceExpr{
				pos: position{line: 1106, col: 5, offset: 31622},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1106, col: 5, offset: 31622},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 1107, col: 5, offset: 31639},
						run: (*parser).callonTemplateSingleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 1107, col: 5, offset: 31639},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1107, col: 7, offset: 31641},
								expr: &ruleRefExpr{
									pos:  position{line: 1107, col: 7, offset: 31641},
									name: "TemplateSingleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedChar",
			pos:  position{line: 1111, col: 1, offset: 31778},
			expr: &choiceExpr{
				pos: position{line: 1112, col: 5, offset: 31807},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1112, col: 5, offset: 31807},
						run: (*parser).callonTemplateSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1112, col: 5, offset: 31807},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1112, col: 5, offset: 31807},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1112, col: 10, offset: 31812},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1112, col: 12, offset: 31814},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1113, col: 5, offset: 31841},
						run: (*parser).callonTemplateSingleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1113, col: 5, offset: 31841},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1113, col: 5, offset: 31841},
									expr: &litMatcher{
										pos:        position{line: 1113, col: 7, offset: 31843},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1113, col: 13, offset: 31849},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1113, col: 15, offset: 31851},
										name: "SingleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateExpr",
			pos:  position{line: 1115, col: 1, offset: 31887},
			expr: &actionExpr{
				pos: position{line: 1116, col: 5, offset: 31904},
				run: (*parser).callonTemplateExpr1,
				expr: &seqExpr{
					pos: position{line: 1116, col: 5, offset: 31904},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1116, col: 5, offset: 31904},
							val:        "${",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1116, col: 10, offset: 31909},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1116, col: 13, offset: 31912},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 1116, col: 15, offset: 31914},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1116, col: 20, offset: 31919},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1116, col: 23, offset: 31922},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 1131, col: 1, offset: 32218},
			expr: &actionExpr{
				pos: position{line: 1132, col: 5, offset: 32236},
				run: (*parser).callonPrimitiveType1,
				expr: &choiceExpr{
					pos: position{line: 1132, col: 9, offset: 32240},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 1132, col: 9, offset: 32240},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1132, col: 19, offset: 32250},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1132, col: 30, offset: 32261},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1132, col: 41, offset: 32272},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1133, col: 9, offset: 32289},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1133, col: 18, offset: 32298},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1133, col: 28, offset: 32308},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1133, col: 38, offset: 32318},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1134, col: 9, offset: 32334},
							val:        "float16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1134, col: 21, offset: 32346},
							val:        "float32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1134, col: 33, offset: 32358},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1135, col: 9, offset: 32376},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1135, col: 18, offset: 32385},
							val:        "string",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1136, col: 9, offset: 32402},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1136, col: 22, offset: 32415},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1137, col: 9, offset: 32430},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1138, col: 9, offset: 32446},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1138, col: 16, offset: 32453},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1139, col: 9, offset: 32467},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1139, col: 18, offset: 32476},
							val:        "null",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldList",
			pos:  position{line: 1143, col: 1, offset: 32591},
			expr: &choiceExpr{
				pos: position{line: 1144, col: 5, offset: 32609},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1144, col: 5, offset: 32609},
						run: (*parser).callonTypeFieldList2,
						expr: &seqExpr{
							pos: position{line: 1144, col: 5, offset: 32609},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1144, col: 5, offset: 32609},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 1144, col: 11, offset: 32615},
										name: "TypeField",
									},
								},
								&labeledExpr{
									pos:   position{line: 1144, col: 21, offset: 32625},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1144, col: 26, offset: 32630},
										expr: &ruleRefExpr{
											pos:  position{line: 1144, col: 26, offset: 32630},
											name: "TypeFieldListTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1147, col: 5, offset: 32732},
						run: (*parser).callonTypeFieldList9,
						expr: &litMatcher{
							pos:        position{line: 1147, col: 5, offset: 32732},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTail",
			pos:  position{line: 1149, col: 1, offset: 32756},
			expr: &actionExpr{
				pos: position{line: 1149, col: 21, offset: 32776},
				run: (*parser).callonTypeFieldListTail1,
				expr: &seqExpr{
					pos: position{line: 1149, col: 21, offset: 32776},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1149, col: 21, offset: 32776},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1149, col: 24, offset: 32779},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1149, col: 28, offset: 32783},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1149, col: 31, offset: 32786},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1149, col: 35, offset: 32790},
								name: "TypeField",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeField",
			pos:  position{line: 1151, col: 1, offset: 32821},
			expr: &actionExpr{
				pos: position{line: 1152, col: 5, offset: 32835},
				run: (*parser).callonTypeField1,
				expr: &seqExpr{
					pos: position{line: 1152, col: 5, offset: 32835},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1152, col: 5, offset: 32835},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1152, col: 10, offset: 32840},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1152, col: 20, offset: 32850},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1152, col: 23, offset: 32853},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1152, col: 27, offset: 32857},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1152, col: 30, offset: 32860},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1152, col: 34, offset: 32864},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 1156, col: 1, offset: 32946},
			expr: &choiceExpr{
				pos: position{line: 1157, col: 5, offset: 32960},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1157, col: 5, offset: 32960},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 1158, col: 5, offset: 32979},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 1160, col: 1, offset: 32993},
			expr: &actionExpr{
				pos: position{line: 1160, col: 12, offset: 33004},
				run: (*parser).callonAndToken1,
				expr: &seqExpr{
					pos: position{line: 1160, col: 12, offset: 33004},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1160, col: 13, offset: 33005},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1160, col: 13, offset: 33005},
									val:        "and",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1160, col: 21, offset: 33013},
									val:        "AND",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1160, col: 28, offset: 33020},
							expr: &ruleRefExpr{
								pos:  position{line: 1160, col: 29, offset: 33021},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 1161, col: 1, offset: 33058},
			expr: &actionExpr{
				pos: position{line: 1161, col: 11, offset: 33068},
				run: (*parser).callonOrToken1,
				expr: &seqExpr{
					pos: position{line: 1161, col: 11, offset: 33068},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1161, col: 12, offset: 33069},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1161, col: 12, offset: 33069},
									val:        "or",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1161, col: 19, offset: 33076},
									val:        "OR",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1161, col: 25, offset: 33082},
							expr: &ruleRefExpr{
								pos:  position{line: 1161, col: 26, offset: 33083},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 1162, col: 1, offset: 33119},
			expr: &actionExpr{
				pos: position{line: 1162, col: 11, offset: 33129},
				run: (*parser).callonInToken1,
				expr: &seqExpr{
					pos: position{line: 1162, col: 11, offset: 33129},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1162, col: 11, offset: 33129},
							val:        "in",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1162, col: 16, offset: 33134},
							expr: &ruleRefExpr{
								pos:  position{line: 1162, col: 17, offset: 33135},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 1163, col: 1, offset: 33171},
			expr: &actionExpr{
				pos: position{line: 1163, col: 12, offset: 33182},
				run: (*parser).callonNotToken1,
				expr: &seqExpr{
					pos: position{line: 1163, col: 12, offset: 33182},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1163, col: 13, offset: 33183},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1163, col: 13, offset: 33183},
									val:        "not",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1163, col: 21, offset: 33191},
									val:        "NOT",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1163, col: 28, offset: 33198},
							expr: &ruleRefExpr{
								pos:  position{line: 1163, col: 29, offset: 33199},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 1164, col: 1, offset: 33236},
			expr: &actionExpr{
				pos: position{line: 1164, col: 11, offset: 33246},
				run: (*parser).callonByToken1,
				expr: &seqExpr{
					pos: position{line: 1164, col: 11, offset: 33246},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1164, col: 11, offset: 33246},
							val:        "by",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1164, col: 16, offset: 33251},
							expr: &ruleRefExpr{
								pos:  position{line: 1164, col: 17, offset: 33252},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 1166, col: 1, offset: 33289},
			expr: &charClassMatcher{
				pos:        position{line: 1166, col: 19, offset: 33307},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 1168, col: 1, offset: 33319},
			expr: &choiceExpr{
				pos: position{line: 1168, col: 18, offset: 33336},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1168, col: 18, offset: 33336},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 1168, col: 36, offset: 33354},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 1170, col: 1, offset: 33361},
			expr: &actionExpr{
				pos: position{line: 1171, col: 5, offset: 33376},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 1171, col: 5, offset: 33376},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 1171, col: 8, offset: 33379},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 1173, col: 1, offset: 33460},
			expr: &choiceExpr{
				pos: position{line: 1174, col: 5, offset: 33479},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1174, col: 5, offset: 33479},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 1174, col: 5, offset: 33479},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1174, col: 5, offset: 33479},
									expr: &seqExpr{
										pos: position{line: 1174, col: 7, offset: 33481},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1174, col: 7, offset: 33481},
												name: "IDGuard",
											},
											&notExpr{
												pos: position{line: 1174, col: 15, offset: 33489},
												expr: &ruleRefExpr{
													pos:  position{line: 1174, col: 16, offset: 33490},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1174, col: 32, offset: 33506},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1174, col: 48, offset: 33522},
									expr: &ruleRefExpr{
										pos:  position{line: 1174, col: 48, offset: 33522},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1175, col: 5, offset: 33573},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 1175, col: 5, offset: 33573},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1176, col: 5, offset: 33612},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 1176, col: 5, offset: 33612},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1176, col: 5, offset: 33612},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1176, col: 10, offset: 33617},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1176, col: 13, offset: 33620},
										name: "IDGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1178, col: 5, offset: 33711},
						run: (*parser).callonIdentifierName19,
						expr: &litMatcher{
							pos:        position{line: 1178, col: 5, offset: 33711},
							val:        "type",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1179, col: 5, offset: 33753},
						run: (*parser).callonIdentifierName21,
						expr: &seqExpr{
							pos: position{line: 1179, col: 5, offset: 33753},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1179, col: 5, offset: 33753},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1179, col: 8, offset: 33756},
										name: "SQLTokenSentinels",
									},
								},
								&andExpr{
									pos: position{line: 1179, col: 26, offset: 33774},
									expr: &seqExpr{
										pos: position{line: 1179, col: 28, offset: 33776},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1179, col: 28, offset: 33776},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1179, col: 31, offset: 33779},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierNames",
			pos:  position{line: 1181, col: 1, offset: 33804},
			expr: &actionExpr{
				pos: position{line: 1182, col: 5, offset: 33824},
				run: (*parser).callonIdentifierNames1,
				expr: &seqExpr{
					pos: position{line: 1182, col: 5, offset: 33824},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1182, col: 5, offset: 33824},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1182, col: 11, offset: 33830},
								name: "IdentifierName",
							},
						},
						&labeledExpr{
							pos:   position{line: 1182, col: 26, offset: 33845},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1182, col: 31, offset: 33850},
								expr: &actionExpr{
									pos: position{line: 1182, col: 32, offset: 33851},
									run: (*parser).callonIdentifierNames7,
									expr: &seqExpr{
										pos: position{line: 1182, col: 32, offset: 33851},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1182, col: 32, offset: 33851},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1182, col: 35, offset: 33854},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1182, col: 39, offset: 33858},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 1182, col: 42, offset: 33861},
												label: "id",
												expr: &ruleRefExpr{
													pos:  position{line: 1182, col: 45, offset: 33864},
													name: "IdentifierName",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IDGuard",
			pos:  position{line: 1186, col: 1, offset: 33980},
			expr: &choiceExpr{
				pos: position{line: 1187, col: 5, offset: 33992},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1187, col: 5, offset: 33992},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1188, col: 5, offset: 34011},
						name: "NullLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1189, col: 5, offset: 34027},
						name: "NaN",
					},
					&ruleRefExpr{
						pos:  position{line: 1190, col: 5, offset: 34035},
						name: "Infinity",
					},
				},
			},
		},
		{
			name: "Time",
			pos:  position{line: 1192, col: 1, offset: 34045},
			expr: &actionExpr{
				pos: position{line: 1193, col: 5, offset: 34054},
				run: (*parser).callonTime1,
				expr: &seqExpr{
					pos: position{line: 1193, col: 5, offset: 34054},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1193, col: 5, offset: 34054},
							name: "FullDate",
						},
						&litMatcher{
							pos:        position{line: 1193, col: 14, offset: 34063},
							val:        "T",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1193, col: 18, offset: 34067},
							name: "FullTime",
						},
					},
				},
			},
		},
		{
			name: "FullDate",
			pos:  position{line: 1197, col: 1, offset: 34187},
			expr: &seqExpr{
				pos: position{line: 1197, col: 12, offset: 34198},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1197, col: 12, offset: 34198},
						name: "D4",
					},
					&litMatcher{
						pos:        position{line: 1197, col: 15, offset: 34201},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1197, col: 19, offset: 34205},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1197, col: 22, offset: 34208},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1197, col: 26, offset: 34212},
						name: "D2",
					},
				},
			},
		},
		{
			name: "D4",
			pos:  position{line: 1199, col: 1, offset: 34216},
			expr: &seqExpr{
				pos: position{line: 1199, col: 6, offset: 34221},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1199, col: 6, offset: 34221},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1199, col: 11, offset: 34226},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1199, col: 16, offset: 34231},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1199, col: 21, offset: 34236},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "D2",
			pos:  position{line: 1200, col: 1, offset: 34242},
			expr: &seqExpr{
				pos: position{line: 1200, col: 6, offset: 34247},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1200, col: 6, offset: 34247},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1200, col: 11, offset: 34252},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "FullTime",
			pos:  position{line: 1202, col: 1, offset: 34259},
			expr: &seqExpr{
				pos: position{line: 1202, col: 12, offset: 34270},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1202, col: 12, offset: 34270},
						name: "PartialTime",
					},
					&ruleRefExpr{
						pos:  position{line: 1202, col: 24, offset: 34282},
						name: "TimeOffset",
					},
				},
			},
		},
		{
			name: "PartialTime",
			pos:  position{line: 1204, col: 1, offset: 34294},
			expr: &seqExpr{
				pos: position{line: 1204, col: 15, offset: 34308},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1204, col: 15, offset: 34308},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1204, col: 18, offset: 34311},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1204, col: 22, offset: 34315},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1204, col: 25, offset: 34318},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1204, col: 29, offset: 34322},
						name: "D2",
					},
					&zeroOrOneExpr{
						pos: position{line: 1204, col: 32, offset: 34325},
						expr: &seqExpr{
							pos: position{line: 1204, col: 33, offset: 34326},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1204, col: 33, offset: 34326},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1204, col: 37, offset: 34330},
									expr: &charClassMatcher{
										pos:        position{line: 1204, col: 37, offset: 34330},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeOffset",
			pos:  position{line: 1206, col: 1, offset: 34340},
			expr: &choiceExpr{
				pos: position{line: 1207, col: 5, offset: 34355},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1207, col: 5, offset: 34355},
						val:        "Z",
						ignoreCase: false,
					},
					&seqExpr{
						pos: position{line: 1208, col: 5, offset: 34363},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 1208, col: 6, offset: 34364},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1208, col: 6, offset: 34364},
										val:        "+",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 1208, col: 12, offset: 34370},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1208, col: 17, offset: 34375},
								name: "D2",
							},
							&litMatcher{
								pos:        position{line: 1208, col: 20, offset: 34378},
								val:        ":",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 1208, col: 24, offset: 34382},
								name: "D2",
							},
							&zeroOrOneExpr{
								pos: position{line: 1208, col: 27, offset: 34385},
								expr: &seqExpr{
									pos: position{line: 1208, col: 28, offset: 34386},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1208, col: 28, offset: 34386},
											val:        ".",
											ignoreCase: false,
										},
										&oneOrMoreExpr{
											pos: position{line: 1208, col: 32, offset: 34390},
											expr: &charClassMatcher{
												pos:        position{line: 1208, col: 32, offset: 34390},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 1210, col: 1, offset: 34400},
			expr: &actionExpr{
				pos: position{line: 1211, col: 5, offset: 34413},
				run: (*parser).callonDuration1,
				expr: &seqExpr{
					pos: position{line: 1211, col: 5, offset: 34413},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1211, col: 5, offset: 34413},
							expr: &litMatcher{
								pos:        position{line: 1211, col: 5, offset: 34413},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1211, col: 10, offset: 34418},
							expr: &seqExpr{
								pos: position{line: 1211, col: 11, offset: 34419},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1211, col: 11, offset: 34419},
										name: "Decimal",
									},
									&ruleRefExpr{
										pos:  position{line: 1211, col: 19, offset: 34427},
										name: "TimeUnit",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Decimal",
			pos:  position{line: 1215, col: 1, offset: 34553},
			expr: &seqExpr{
				pos: position{line: 1215, col: 11, offset: 34563},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1215, col: 11, offset: 34563},
						name: "UInt",
					},
					&zeroOrOneExpr{
						pos: position{line: 1215, col: 16, offset: 34568},
						expr: &seqExpr{
							pos: position{line: 1215, col: 17, offset: 34569},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1215, col: 17, offset: 34569},
									val:        ".",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1215, col: 21, offset: 34573},
									name: "UInt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeUnit",
			pos:  position{line: 1217, col: 1, offset: 34581},
			expr: &choiceExpr{
				pos: position{line: 1218, col: 5, offset: 34594},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1218, col: 5, offset: 34594},
						val:        "ns",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1219, col: 5, offset: 34603},
						val:        "us",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1220, col: 5, offset: 34612},
						val:        "ms",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1221, col: 5, offset: 34621},
						val:        "s",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1222, col: 5, offset: 34629},
						val:        "m",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1223, col: 5, offset: 34637},
						val:        "h",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1224, col: 5, offset: 34645},
						val:        "d",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1225, col: 5, offset: 34653},
						val:        "w",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1226, col: 5, offset: 34661},
						val:        "y",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 1228, col: 1, offset: 34666},
			expr: &actionExpr{
				pos: position{line: 1229, col: 5, offset: 34673},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 1229, col: 5, offset: 34673},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1229, col: 5, offset: 34673},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1229, col: 10, offset: 34678},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1229, col: 14, offset: 34682},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1229, col: 19, offset: 34687},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1229, col: 23, offset: 34691},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1229, col: 28, offset: 34696},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1229, col: 32, offset: 34700},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 1231, col: 1, offset: 34737},
			expr: &actionExpr{
				pos: position{line: 1232, col: 5, offset: 34745},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 1232, col: 5, offset: 34745},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1232, col: 5, offset: 34745},
							expr: &seqExpr{
								pos: position{line: 1232, col: 7, offset: 34747},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1232, col: 7, offset: 34747},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 1232, col: 11, offset: 34751},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 1232, col: 15, offset: 34755},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 1232, col: 19, offset: 34759},
										expr: &choiceExpr{
											pos: position{line: 1232, col: 21, offset: 34761},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1232, col: 21, offset: 34761},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 1232, col: 32, offset: 34772},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1232, col: 38, offset: 34778},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1232, col: 40, offset: 34780},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 1236, col: 1, offset: 34944},
			expr: &choiceExpr{
				pos: position{line: 1237, col: 5, offset: 34962},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1237, col: 5, offset: 34962},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 1237, col: 5, offset: 34962},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1237, col: 5, offset: 34962},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 1237, col: 7, offset: 34964},
										expr: &ruleRefExpr{
											pos:  position{line: 1237, col: 7, offset: 34964},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1237, col: 17, offset: 34974},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1237, col: 19, offset: 34976},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1240, col: 5, offset: 35040},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 1240, col: 5, offset: 35040},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1240, col: 5, offset: 35040},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1240, col: 7, offset: 35042},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1240, col: 11, offset: 35046},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1240, col: 13, offset: 35048},
										expr: &ruleRefExpr{
											pos:  position{line: 1240, col: 13, offset: 35048},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1240, col: 23, offset: 35058},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1240, col: 28, offset: 35063},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1240, col: 30, offset: 35065},
										expr: &ruleRefExpr{
											pos:  position{line: 1240, col: 30, offset: 35065},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1240, col: 40, offset: 35075},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 1240, col: 42, offset: 35077},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1243, col: 5, offset: 35176},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 1243, col: 5, offset: 35176},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1243, col: 5, offset: 35176},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1243, col: 10, offset: 35181},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1243, col: 12, offset: 35183},
										expr: &ruleRefExpr{
											pos:  position{line: 1243, col: 12, offset: 35183},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1243, col: 22, offset: 35193},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1243, col: 24, offset: 35195},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1246, col: 5, offset: 35266},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 1246, col: 5, offset: 35266},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1246, col: 5, offset: 35266},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1246, col: 7, offset: 35268},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1246, col: 11, offset: 35272},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1246, col: 13, offset: 35274},
										expr: &ruleRefExpr{
											pos:  position{line: 1246, col: 13, offset: 35274},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1246, col: 23, offset: 35284},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1249, col: 5, offset: 35352},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 1249, col: 5, offset: 35352},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 1253, col: 1, offset: 35389},
			expr: &choiceExpr{
				pos: position{line: 1254, col: 5, offset: 35401},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1254, col: 5, offset: 35401},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 1255, col: 5, offset: 35408},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 1257, col: 1, offset: 35413},
			expr: &actionExpr{
				pos: position{line: 1257, col: 12, offset: 35424},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 1257, col: 12, offset: 35424},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1257, col: 12, offset: 35424},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1257, col: 16, offset: 35428},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1257, col: 18, offset: 35430},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 1259, col: 1, offset: 35468},
			expr: &actionExpr{
				pos: position{line: 1259, col: 12, offset: 35479},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 1259, col: 12, offset: 35479},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1259, col: 12, offset: 35479},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1259, col: 14, offset: 35481},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 1259, col: 18, offset: 35485},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 1261, col: 1, offset: 35523},
			expr: &actionExpr{
				pos: position{line: 1262, col: 5, offset: 35534},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 1262, col: 5, offset: 35534},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1262, col: 5, offset: 35534},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1262, col: 7, offset: 35536},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 1262, col: 10, offset: 35539},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1262, col: 14, offset: 35543},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1262, col: 16, offset: 35545},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 1266, col: 1, offset: 35618},
			expr: &actionExpr{
				pos: position{line: 1267, col: 5, offset: 35629},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 1267, col: 5, offset: 35629},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1267, col: 5, offset: 35629},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1267, col: 7, offset: 35631},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 1267, col: 11, offset: 35635},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1267, col: 15, offset: 35639},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1267, col: 17, offset: 35641},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 1271, col: 1, offset: 35704},
			expr: &actionExpr{
				pos: position{line: 1272, col: 4, offset: 35712},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 1272, col: 4, offset: 35712},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 1272, col: 6, offset: 35714},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 1274, col: 1, offset: 35754},
			expr: &choiceExpr{
				pos: position{line: 1275, col: 5, offset: 35768},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1275, col: 5, offset: 35768},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 1276, col: 5, offset: 35783},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 1278, col: 1, offset: 35799},
			expr: &actionExpr{
				pos: position{line: 1278, col: 14, offset: 35812},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1278, col: 14, offset: 35812},
					expr: &charClassMatcher{
						pos:        position{line: 1278, col: 14, offset: 35812},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 1280, col: 1, offset: 35851},
			expr: &actionExpr{
				pos: position{line: 1281, col: 5, offset: 35870},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 1281, col: 5, offset: 35870},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1281, col: 5, offset: 35870},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1281, col: 9, offset: 35874},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 1283, col: 1, offset: 35917},
			expr: &choiceExpr{
				pos: position{line: 1284, col: 5, offset: 35933},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1284, col: 5, offset: 35933},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 1284, col: 5, offset: 35933},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1284, col: 5, offset: 35933},
									expr: &litMatcher{
										pos:        position{line: 1284, col: 5, offset: 35933},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1284, col: 10, offset: 35938},
									expr: &charClassMatcher{
										pos:        position{line: 1284, col: 10, offset: 35938},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 1284, col: 17, offset: 35945},
									val:        ".",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1284, col: 21, offset: 35949},
									expr: &charClassMatcher{
										pos:        position{line: 1284, col: 21, offset: 35949},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1284, col: 28, offset: 35956},
									expr: &ruleRefExpr{
										pos:  position{line: 1284, col: 28, offset: 35956},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1287, col: 5, offset: 36015},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 1287, col: 5, offset: 36015},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1287, col: 5, offset: 36015},
									expr: &litMatcher{
										pos:        position{line: 1287, col: 5, offset: 36015},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1287, col: 10, offset: 36020},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1287, col: 14, offset: 36024},
									expr: &charClassMatcher{
										pos:        position{line: 1287, col: 14, offset: 36024},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1287, col: 21, offset: 36031},
									expr: &ruleRefExpr{
										pos:  position{line: 1287, col: 21, offset: 36031},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1290, col: 5, offset: 36090},
						run: (*parser).callonFloatString22,
						expr: &choiceExpr{
							pos: position{line: 1290, col: 6, offset: 36091},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1290, col: 6, offset: 36091},
									name: "NaN",
								},
								&ruleRefExpr{
									pos:  position{line: 1290, col: 12, offset: 36097},
									name: "Infinity",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 1293, col: 1, offset: 36140},
			expr: &seqExpr{
				pos: position{line: 1293, col: 16, offset: 36155},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1293, col: 16, offset: 36155},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 1293, col: 21, offset: 36160},
						expr: &charClassMatcher{
							pos:        position{line: 1293, col: 21, offset: 36160},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1293, col: 27, offset: 36166},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "NaN",
			pos:  position{line: 1295, col: 1, offset: 36178},
			expr: &litMatcher{
				pos:        position{line: 1295, col: 7, offset: 36184},
				val:        "NaN",
				ignoreCase: false,
			},
		},
		{
			name: "Infinity",
			pos:  position{line: 1297, col: 1, offset: 36191},
			expr: &seqExpr{
				pos: position{line: 1297, col: 12, offset: 36202},
				exprs: []interface{}{
					&zeroOrOneExpr{
						pos: position{line: 1297, col: 12, offset: 36202},
						expr: &choiceExpr{
							pos: position{line: 1297, col: 13, offset: 36203},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1297, col: 13, offset: 36203},
									val:        "-",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1297, col: 19, offset: 36209},
									val:        "+",
									ignoreCase: false,
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1297, col: 25, offset: 36215},
						val:        "Inf",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 1299, col: 1, offset: 36222},
			expr: &actionExpr{
				pos: position{line: 1299, col: 7, offset: 36228},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1299, col: 7, offset: 36228},
					expr: &ruleRefExpr{
						pos:  position{line: 1299, col: 7, offset: 36228},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 1301, col: 1, offset: 36270},
			expr: &charClassMatcher{
				pos:        position{line: 1301, col: 12, offset: 36281},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1303, col: 1, offset: 36294},
			expr: &choiceExpr{
				pos: position{line: 1304, col: 5, offset: 36311},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1304, col: 5, offset: 36311},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 1304, col: 5, offset: 36311},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1304, col: 5, offset: 36311},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1304, col: 9, offset: 36315},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1304, col: 11, offset: 36317},
										expr: &ruleRefExpr{
											pos:  position{line: 1304, col: 11, offset: 36317},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1304, col: 29, offset: 36335},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1305, col: 5, offset: 36372},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 1305, col: 5, offset: 36372},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1305, col: 5, offset: 36372},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1305, col: 9, offset: 36376},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1305, col: 11, offset: 36378},
										expr: &ruleRefExpr{
											pos:  position{line: 1305, col: 11, offset: 36378},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1305, col: 29, offset: 36396},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 1307, col: 1, offset: 36430},
			expr: &choiceExpr{
				pos: position{line: 1308, col: 5, offset: 36451},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1308, col: 5, offset: 36451},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1308, col: 5, offset: 36451},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1308, col: 5, offset: 36451},
									expr: &choiceExpr{
										pos: position{line: 1308, col: 7, offset: 36453},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1308, col: 7, offset: 36453},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1308, col: 13, offset: 36459},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1308, col: 26, offset: 36472,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1309, col: 5, offset: 36509},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1309, col: 5, offset: 36509},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1309, col: 5, offset: 36509},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1309, col: 10, offset: 36514},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1309, col: 12, offset: 36516},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 1311, col: 1, offset: 36550},
			expr: &actionExpr{
				pos: position{line: 1312, col: 5, offset: 36562},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 1312, col: 5, offset: 36562},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1312, col: 5, offset: 36562},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1312, col: 10, offset: 36567},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1312, col: 23, offset: 36580},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1312, col: 28, offset: 36585},
								expr: &ruleRefExpr{
									pos:  position{line: 1312, col: 28, offset: 36585},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 1314, col: 1, offset: 36647},
			expr: &choiceExpr{
				pos: position{line: 1315, col: 5, offset: 36664},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1315, col: 5, offset: 36664},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1316, col: 5, offset: 36681},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordChars",
			pos:  position{line: 1318, col: 1, offset: 36693},
			expr: &actionExpr{
				pos: position{line: 1318, col: 16, offset: 36708},
				run: (*parser).callonKeyWordChars1,
				expr: &charClassMatcher{
					pos:        position{line: 1318, col: 16, offset: 36708},
					val:        "[a-zA-Z_.:/%#@~]",
					chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
					ranges:     []rune{'a', 'z', 'A', 'Z'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 1320, col: 1, offset: 36757},
			expr: &choiceExpr{
				pos: position{line: 1321, col: 5, offset: 36773},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1321, col: 5, offset: 36773},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 1322, col: 5, offset: 36790},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 1324, col: 1, offset: 36797},
			expr: &actionExpr{
				pos: position{line: 1324, col: 14, offset: 36810},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 1324, col: 14, offset: 36810},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1324, col: 14, offset: 36810},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1324, col: 19, offset: 36815},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1324, col: 22, offset: 36818},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1324, col: 22, offset: 36818},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1324, col: 38, offset: 36834},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobPattern",
			pos:  position{line: 1326, col: 1, offset: 36869},
			expr: &actionExpr{
				pos: position{line: 1327, col: 5, offset: 36885},
				run: (*parser).callonGlobPattern1,
				expr: &seqExpr{
					pos: position{line: 1327, col: 5, offset: 36885},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1327, col: 5, offset: 36885},
							expr: &ruleRefExpr{
								pos:  position{line: 1327, col: 6, offset: 36886},
								name: "GlobProperStart",
							},
						},
						&andExpr{
							pos: position{line: 1327, col: 22, offset: 36902},
							expr: &ruleRefExpr{
								pos:  position{line: 1327, col: 23, offset: 36903},
								name: "GlobHasStar",
							},
						},
						&labeledExpr{
							pos:   position{line: 1327, col: 35, offset: 36915},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1327, col: 40, offset: 36920},
								name: "GlobStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1327, col: 50, offset: 36930},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1327, col: 55, offset: 36935},
								expr: &ruleRefExpr{
									pos:  position{line: 1327, col: 55, offset: 36935},
									name: "GlobRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobProperStart",
			pos:  position{line: 1331, col: 1, offset: 37004},
			expr: &choiceExpr{
				pos: position{line: 1331, col: 19, offset: 37022},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1331, col: 19, offset: 37022},
						name: "KeyWordStart",
					},
					&seqExpr{
						pos: position{line: 1331, col: 34, offset: 37037},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1331, col: 34, offset: 37037},
								expr: &litMatcher{
									pos:        position{line: 1331, col: 34, offset: 37037},
									val:        "*",
									ignoreCase: false,
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1331, col: 39, offset: 37042},
								name: "KeyWordRest",
							},
						},
					},
				},
			},
		},
		{
			name: "GlobHasStar",
			pos:  position{line: 1332, col: 1, offset: 37054},
			expr: &seqExpr{
				pos: position{line: 1332, col: 15, offset: 37068},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1332, col: 15, offset: 37068},
						expr: &ruleRefExpr{
							pos:  position{line: 1332, col: 15, offset: 37068},
							name: "KeyWordRest",
						},
					},
					&litMatcher{
						pos:        position{line: 1332, col: 28, offset: 37081},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "GlobStart",
			pos:  position{line: 1334, col: 1, offset: 37086},
			expr: &choiceExpr{
				pos: position{line: 1335, col: 5, offset: 37100},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1335, col: 5, offset: 37100},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1336, col: 5, offset: 37117},
						name: "GlobEsc",
					},
					&actionExpr{
						pos: position{line: 1337, col: 5, offset: 37129},
						run: (*parser).callonGlobStart4,
						expr: &litMatcher{
							pos:        position{line: 1337, col: 5, offset: 37129},
							val:        "*",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GlobRest",
			pos:  position{line: 1339, col: 1, offset: 37154},
			expr: &choiceExpr{
				pos: position{line: 1340, col: 5, offset: 37167},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1340, col: 5, offset: 37167},
						name: "GlobStart",
					},
					&charClassMatcher{
						pos:        position{line: 1341, col: 5, offset: 37181},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "GlobEsc",
			pos:  position{line: 1343, col: 1, offset: 37188},
			expr: &actionExpr{
				pos: position{line: 1343, col: 11, offset: 37198},
				run: (*parser).callonGlobEsc1,
				expr: &seqExpr{
					pos: position{line: 1343, col: 11, offset: 37198},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1343, col: 11, offset: 37198},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1343, col: 16, offset: 37203},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1343, col: 19, offset: 37206},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1343, col: 19, offset: 37206},
										name: "GlobEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1343, col: 32, offset: 37219},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobEscape",
			pos:  position{line: 1345, col: 1, offset: 37254},
			expr: &choiceExpr{
				pos: position{line: 1346, col: 5, offset: 37269},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1346, col: 5, offset: 37269},
						run: (*parser).callonGlobEscape2,
						expr: &litMatcher{
							pos:        position{line: 1346, col: 5, offset: 37269},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1347, col: 5, offset: 37297},
						run: (*parser).callonGlobEscape4,
						expr: &litMatcher{
							pos:        position{line: 1347, col: 5, offset: 37297},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1348, col: 5, offset: 37327},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 1350, col: 1, offset: 37333},
			expr: &choiceExpr{
				pos: position{line: 1351, col: 5, offset: 37354},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1351, col: 5, offset: 37354},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1351, col: 5, offset: 37354},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1351, col: 5, offset: 37354},
									expr: &choiceExpr{
										pos: position{line: 1351, col: 7, offset: 37356},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1351, col: 7, offset: 37356},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1351, col: 13, offset: 37362},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1351, col: 26, offset: 37375,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1352, col: 5, offset: 37412},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1352, col: 5, offset: 37412},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1352, col: 5, offset: 37412},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1352, col: 10, offset: 37417},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1352, col: 12, offset: 37419},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 1354, col: 1, offset: 37453},
			expr: &choiceExpr{
				pos: position{line: 1355, col: 5, offset: 37472},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1355, col: 5, offset: 37472},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 1356, col: 5, offset: 37493},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 1358, col: 1, offset: 37508},
			expr: &choiceExpr{
				pos: position{line: 1359, col: 5, offset: 37529},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1359, col: 5, offset: 37529},
						val:        "'",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1360, col: 5, offset: 37537},
						run: (*parser).callonSingleCharEscape3,
						expr: &litMatcher{
							pos:        position{line: 1360, col: 5, offset: 37537},
							val:        "\"",
							ignoreCase: false,
						},
					},
					&litMatcher{
						pos:        position{line: 1361, col: 5, offset: 37577},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1362, col: 5, offset: 37586},
						run: (*parser).callonSingleCharEscape6,
						expr: &litMatcher{
							pos:        position{line: 1362, col: 5, offset: 37586},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1363, col: 5, offset: 37615},
						run: (*parser).callonSingleCharEscape8,
						expr: &litMatcher{
							pos:        position{line: 1363, col: 5, offset: 37615},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1364, col: 5, offset: 37644},
						run: (*parser).callonSingleCharEscape10,
						expr: &litMatcher{
							pos:        position{line: 1364, col: 5, offset: 37644},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1365, col: 5, offset: 37673},
						run: (*parser).callonSingleCharEscape12,
						expr: &litMatcher{
							pos:        position{line: 1365, col: 5, offset: 37673},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1366, col: 5, offset: 37702},
						run: (*parser).callonSingleCharEscape14,
						expr: &litMatcher{
							pos:        position{line: 1366, col: 5, offset: 37702},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1367, col: 5, offset: 37731},
						run: (*parser).callonSingleCharEscape16,
						expr: &litMatcher{
							pos:        position{line: 1367, col: 5, offset: 37731},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 1369, col: 1, offset: 37757},
			expr: &choiceExpr{
				pos: position{line: 1370, col: 5, offset: 37775},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1370, col: 5, offset: 37775},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 1370, col: 5, offset: 37775},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1371, col: 5, offset: 37803},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 1371, col: 5, offset: 37803},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1372, col: 5, offset: 37831},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 1374, col: 1, offset: 37837},
			expr: &choiceExpr{
				pos: position{line: 1375, col: 5, offset: 37855},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1375, col: 5, offset: 37855},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 1375, col: 5, offset: 37855},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1375, col: 5, offset: 37855},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1375, col: 9, offset: 37859},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1375, col: 16, offset: 37866},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1375, col: 16, offset: 37866},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1375, col: 25, offset: 37875},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1375, col: 34, offset: 37884},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1375, col: 43, offset: 37893},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1378, col: 5, offset: 37956},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 1378, col: 5, offset: 37956},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1378, col: 5, offset: 37956},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1378, col: 9, offset: 37960},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1378, col: 13, offset: 37964},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1378, col: 20, offset: 37971},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1378, col: 20, offset: 37971},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 1378, col: 29, offset: 37980},
												expr: &ruleRefExpr{
													pos:  position{line: 1378, col: 29, offset: 37980},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1378, col: 39, offset: 37990},
												expr: &ruleRefExpr{
													pos:  position{line: 1378, col: 39, offset: 37990},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1378, col: 49, offset: 38000},
												expr: &ruleRefExpr{
													pos:  position{line: 1378, col: 49, offset: 38000},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1378, col: 59, offset: 38010},
												expr: &ruleRefExpr{
													pos:  position{line: 1378, col: 59, offset: 38010},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1378, col: 69, offset: 38020},
												expr: &ruleRefExpr{
													pos:  position{line: 1378, col: 69, offset: 38020},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1378, col: 80, offset: 38031},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpPattern",
			pos:  position{line: 1382, col: 1, offset: 38085},
			expr: &actionExpr{
				pos: position{line: 1383, col: 5, offset: 38103},
				run: (*parser).callonRegexpPattern1,
				expr: &seqExpr{
					pos: position{line: 1383, col: 5, offset: 38103},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1383, col: 5, offset: 38103},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1383, col: 9, offset: 38107},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1383, col: 14, offset: 38112},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 1383, col: 25, offset: 38123},
							val:        "/",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1383, col: 29, offset: 38127},
							expr: &ruleRefExpr{
								pos:  position{line: 1383, col: 30, offset: 38128},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 1385, col: 1, offset: 38163},
			expr: &actionExpr{
				pos: position{line: 1386, col: 5, offset: 38178},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1386, col: 5, offset: 38178},
					expr: &choiceExpr{
						pos: position{line: 1386, col: 6, offset: 38179},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 1386, col: 6, offset: 38179},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&seqExpr{
								pos: position{line: 1386, col: 15, offset: 38188},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1386, col: 15, offset: 38188},
										val:        "\\",
										ignoreCase: false,
									},
									&anyMatcher{
										line: 1386, col: 20, offset: 38193,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 1388, col: 1, offset: 38229},
			expr: &charClassMatcher{
				pos:        position{line: 1389, col: 5, offset: 38245},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 1391, col: 1, offset: 38260},
			expr: &oneOrMoreExpr{
				pos: position{line: 1391, col: 5, offset: 38264},
				expr: &ruleRefExpr{
					pos:  position{line: 1391, col: 5, offset: 38264},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1393, col: 1, offset: 38275},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1393, col: 6, offset: 38280},
				expr: &ruleRefExpr{
					pos:  position{line: 1393, col: 6, offset: 38280},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 1395, col: 1, offset: 38291},
			expr: &choiceExpr{
				pos: position{line: 1396, col: 5, offset: 38304},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1396, col: 5, offset: 38304},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 1397, col: 5, offset: 38319},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 1398, col: 5, offset: 38338},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 1400, col: 1, offset: 38347},
			expr: &anyMatcher{
				line: 1401, col: 5, offset: 38367,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 1403, col: 1, offset: 38370},
			expr: &choiceExpr{
				pos: position{line: 1404, col: 5, offset: 38398},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1404, col: 5, offset: 38398},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1405, col: 5, offset: 38407},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1406, col: 5, offset: 38416},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1407, col: 5, offset: 38425},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1408, col: 5, offset: 38433},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1409, col: 5, offset: 38446},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 1411, col: 1, offset: 38456},
			expr: &charClassMatcher{
				pos:        position{line: 1412, col: 5, offset: 38475},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 1418, col: 1, offset: 38805},
			expr: &ruleRefExpr{
				pos:  position{line: 1421, col: 5, offset: 38876},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1423, col: 1, offset: 38895},
			expr: &seqExpr{
				pos: position{line: 1424, col: 5, offset: 38916},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1424, col: 5, offset: 38916},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1424, col: 10, offset: 38921},
						expr: &seqExpr{
							pos: position{line: 1424, col: 11, offset: 38922},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1424, col: 11, offset: 38922},
									expr: &litMatcher{
										pos:        position{line: 1424, col: 12, offset: 38923},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1424, col: 17, offset: 38928},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1424, col: 35, offset: 38946},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1426, col: 1, offset: 38952},
			expr: &seqExpr{
				pos: position{line: 1427, col: 5, offset: 38974},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1427, col: 5, offset: 38974},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1427, col: 10, offset: 38979},
						expr: &seqExpr{
							pos: position{line: 1427, col: 11, offset: 38980},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1427, col: 11, offset: 38980},
									expr: &ruleRefExpr{
										pos:  position{line: 1427, col: 12, offset: 38981},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1427, col: 27, offset: 38996},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1429, col: 1, offset: 39015},
			expr: &seqExpr{
				pos: position{line: 1429, col: 7, offset: 39021},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1429, col: 7, offset: 39021},
						expr: &ruleRefExpr{
							pos:  position{line: 1429, col: 7, offset: 39021},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1429, col: 19, offset: 39033},
						name: "LineTerminator",
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 1431, col: 1, offset: 39049},
			expr: &choiceExpr{
				pos: position{line: 1431, col: 7, offset: 39055},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1431, col: 7, offset: 39055},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 1431, col: 11, offset: 39059},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1433, col: 1, offset: 39064},
			expr: &notExpr{
				pos: position{line: 1433, col: 7, offset: 39070},
				expr: &anyMatcher{
					line: 1433, col: 8, offset: 39071,
				},
			},
		},
		{
			name: "EOKW",
			pos:  position{line: 1435, col: 1, offset: 39074},
			expr: &notExpr{
				pos: position{line: 1435, col: 8, offset: 39081},
				expr: &ruleRefExpr{
					pos:  position{line: 1435, col: 9, offset: 39082},
					name: "KeyWordChars",
				},
			},
		},
	},
}

func (c *current) onstart2(scope interface{}) (interface{}, error) {
	return []interface{}{scope}, nil
}

func (p *parser) callonstart2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart2(stack["scope"])
}

func (c *current) onstart9(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonstart9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart9(stack["seq"])
}

func (c *current) onScope1(decls, body interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Scope", "decls": decls, "body": body}, nil

}

func (p *parser) callonScope1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope1(stack["decls"], stack["body"])
}

func (c *current) onSeq1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSeq1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSeq1(stack["first"], stack["rest"])
}

func (c *current) onSeqTail1(o interface{}) (interface{}, error) {
	return o, nil
}

func (p *parser) callonSeqTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSeqTail1(stack["o"])
}

func (c *current) onDecl1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonDecl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDecl1(stack["v"])
}

func (c *current) onConstDecl2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ConstDecl", "name": id, "expr": expr}, nil

}

func (p *parser) callonConstDecl2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDecl2(stack["id"], stack["expr"])
}

func (c *current) onConstDecl13(id, typ interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "ConstDecl",

		"name": id,

		"expr": map[string]interface{}{"kind": "TypeValue", "value": map[string]interface{}{"kind": "TypeDef", "name": id, "type": typ}}}, nil

}

func (p *parser) callonConstDecl13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDecl13(stack["id"], stack["typ"])
}

func (c *current) onFuncDecl1(id, params, expr interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "FuncDecl",

		"name": id,

		"params": params,

		"expr": expr}, nil

}

func (p *parser) callonFuncDecl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncDecl1(stack["id"], stack["params"], stack["expr"])
}

func (c *current) onOperation2(paths interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Parallel", "paths": paths}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["paths"])
}

func (c *current) onOperation12(expr, cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": expr, "cases": cases}, nil

}

func (p *parser) callonOperation12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation12(stack["expr"], stack["cases"])
}

func (c *current) onOperation25(cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": nil, "cases": cases}, nil

}

func (p *parser) callonOperation25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation25(stack["cases"])
}

func (c *current) onOperation35(trunks interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": trunks}, nil

}

func (p *parser) callonOperation35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation35(stack["trunks"])
}

func (c *current) onOperation45(scope interface{}) (interface{}, error) {
	return scope, nil
}

func (p *parser) callonOperation45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation45(stack["scope"])
}

func (c *current) onOperation55(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation55(stack["a"])
}

func (c *current) onOperation61(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation61(stack["a"])
}

func (c *current) onOperation71(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Search", "expr": expr}, nil

}

func (p *parser) callonOperation71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation71(stack["expr"])
}

func (c *current) onOperation77(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation77(stack["expr"])
}

func (c *current) onOperation80(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation80(stack["expr"])
}

func (c *current) onOperation83(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation83(stack["expr"])
}

func (c *current) onLeg1(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLeg1(stack["seq"])
}

func (c *current) onSwitchLeg1(expr, path interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": expr, "path": path}, nil

}

func (p *parser) callonSwitchLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchLeg1(stack["expr"], stack["path"])
}

func (c *current) onCase2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonCase2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase2(stack["expr"])
}

func (c *current) onCase8() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonCase8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase8()
}

func (c *current) onFromLeg1(source, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Trunk", "source": source, "seq": nil}
	if opt != nil {
		m["seq"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonFromLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromLeg1(stack["source"], stack["opt"])
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor13(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor13(stack["expr"])
}

func (c *current) onSearchExpr4(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Term", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonSearchExpr4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr4(stack["v"])
}

func (c *current) onSearchExpr15() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil

}

func (p *parser) callonSearchExpr15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr15()
}

func (c *current) onSearchPredicate2(lhs, op, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": op, "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonSearchPredicate2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPredicate2(stack["lhs"], stack["op"], stack["rhs"])
}

func (c *current) onSearchPredicate12(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchPredicate12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPredicate12(stack["first"], stack["rest"])
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onGlob1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Glob", "pattern": pattern}, nil

}

func (p *parser) callonGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlob1(stack["pattern"])
}

func (c *current) onRegexp1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Regexp", "pattern": pattern}, nil

}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["pattern"])
}

func (c *current) onAggregation2(keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Summarize", "keys": keys, "aggs": nil, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["keys"], stack["limit"])
}

func (c *current) onAggregation10(aggs, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"kind": "Summarize", "keys": nil, "aggs": aggs, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation10(stack["aggs"], stack["keys"], stack["limit"])
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAggAssignment2(lval, agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lval, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment2(stack["lval"], stack["agg"])
}

func (c *current) onAggAssignment11(agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment11(stack["agg"])
}

func (c *current) onAgg1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"kind": "Agg", "name": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonAgg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAgg1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onAggAssignments1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonAggAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssertOp6(e interface{}) (interface{}, error) {
	return []interface{}{e, string(c.text)}, nil
}

func (p *parser) callonAssertOp6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssertOp6(stack["e"])
}

func (c *current) onAssertOp1(expr interface{}) (interface{}, error) {
	// 'assert EXPR' is equivalent to
	// 'yield EXPR ? this : error({message: "assertion failed", "expr": EXPR_text, "on": this}'
	// where EXPR_text is the literal text of EXPR.
	return map[string]interface{}{"kind": "Yield", "exprs": []interface{}{map[string]interface{}{

		"kind": "Conditional",

		"cond": expr.([]interface{})[0],

		"then": map[string]interface{}{"kind": "ID", "name": "this"},

		"else": map[string]interface{}{

			"kind": "Call",

			"name": "error",

			"args": []interface{}{map[string]interface{}{"kind": "RecordExpr", "elems": []interface{}{

				map[string]interface{}{"kind": "Field", "name": "message", "value": map[string]interface{}{

					"kind": "Primitive", "text": "assertion failed", "type": "string"}},

				map[string]interface{}{"kind": "Field", "name": "expr", "value": map[string]interface{}{

					"kind": "Primitive", "text": expr.([]interface{})[1], "type": "string"}},

				map[string]interface{}{"kind": "Field", "name": "on", "value": map[string]interface{}{

					"kind": "ID", "name": "this"}}}}},

			"where": nil}}}}, nil

}

func (p *parser) callonAssertOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssertOp1(stack["expr"])
}

func (c *current) onSortOp10(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortOp10(stack["l"])
}

func (c *current) onSortOp1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var op = map[string]interface{}{"kind": "Sort", "args": list, "order": "asc", "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		op["order"] = "desc"
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			op["nullsfirst"] = true
		}
	}
	return op, nil

}

func (p *parser) callonSortOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortOp1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopOp8(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopOp8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp8(stack["n"])
}

func (c *current) onTopOp20(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopOp20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp20(stack["f"])
}

func (c *current) onTopOp1(limit, flush, fields interface{}) (interface{}, error) {
	var op = map[string]interface{}{"kind": "Top", "limit": 0, "args": nil, "flush": false}
	if limit != nil {
		op["limit"] = limit
	}
	if fields != nil {
		op["args"] = fields
	}
	if flush != nil {
		op["flush"] = true
	}
	return op, nil

}

func (p *parser) callonTopOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cut", "args": args}, nil

}

func (p *parser) callonCutOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutOp1(stack["args"])
}

func (c *current) onDropOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Drop", "args": args}, nil

}

func (p *parser) callonDropOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropOp1(stack["args"])
}

func (c *current) onHeadOp2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": count}, nil
}

func (p *parser) callonHeadOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOp2(stack["count"])
}

func (c *current) onHeadOp10() (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": map[string]interface{}{"kind": "Primitive", "type": "int64", "text": "1"}}, nil
}

func (p *parser) callonHeadOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOp10()
}

func (c *current) onTailOp2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": count}, nil
}

func (p *parser) callonTailOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailOp2(stack["count"])
}

func (c *current) onTailOp10() (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": map[string]interface{}{"kind": "Primitive", "type": "int64", "text": "1"}}, nil
}

func (p *parser) callonTailOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailOp10()
}

func (c *current) onWhereOp1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Where", "expr": expr}, nil

}

func (p *parser) callonWhereOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereOp1(stack["expr"])
}

func (c *current) onUniqOp2() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": true}, nil

}

func (p *parser) callonUniqOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqOp2()
}

func (c *current) onUniqOp7() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": false}, nil

}

func (p *parser) callonUniqOp7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqOp7()
}

func (c *current) onPutOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Put", "args": args}, nil

}

func (p *parser) callonPutOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutOp1(stack["args"])
}

func (c *current) onRenameOp9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameOp9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameOp9(stack["cl"])
}

func (c *current) onRenameOp1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Rename", "args": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameOp1(stack["first"], stack["rest"])
}

func (c *current) onFuseOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Fuse"}, nil

}

func (p *parser) callonFuseOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseOp1()
}

func (c *current) onShapeOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Shape"}, nil

}

func (p *parser) callonShapeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShapeOp1()
}

func (c *current) onJoinOp1(style, rightInput, key, optKey, optArgs interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Join", "style": style, "right_input": rightInput, "left_key": key, "right_key": key, "args": nil}
	if optKey != nil {
		m["right_key"] = optKey.([]interface{})[3]
	}
	if optArgs != nil {
		m["args"] = optArgs.([]interface{})[1]
	}
	return m, nil

}

func (p *parser) callonJoinOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinOp1(stack["style"], stack["rightInput"], stack["key"], stack["optKey"], stack["optArgs"])
}

func (c *current) onJoinStyle2() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle2()
}

func (c *current) onJoinStyle6() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle6()
}

func (c *current) onJoinStyle10() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle10()
}

func (c *current) onJoinStyle14() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonJoinStyle14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle14()
}

func (c *current) onJoinStyle18() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle18()
}

func (c *current) onJoinRightInput2(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonJoinRightInput2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinRightInput2(stack["s"])
}

func (c *current) onJoinRightInput12() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonJoinRightInput12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinRightInput12()
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onSampleOp1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sample", "expr": e}, nil
}

func (p *parser) callonSampleOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleOp1(stack["e"])
}

func (c *current) onOpAssignment1(a interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpAssignment", "assignments": a}, nil

}

func (p *parser) callonOpAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpAssignment1(stack["a"])
}

func (c *current) onSampleExpr2(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonSampleExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr2(stack["lval"])
}

func (c *current) onSampleExpr7() (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": "this"}, nil
}

func (p *parser) callonSampleExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr7()
}

func (c *current) onFromOp1(source interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": []interface{}{map[string]interface{}{"kind": "Trunk", "source": source}}}, nil

}

func (p *parser) callonFromOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromOp1(stack["source"])
}

func (c *current) onFile1(path, format, sort_key interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "File", "path": path, "format": format, "sort_key": sort_key}, nil

}

func (p *parser) callonFile1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile1(stack["path"], stack["format"], stack["sort_key"])
}

func (c *current) onFrom1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonFrom1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrom1(stack["body"])
}

func (c *current) onPool1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonPool1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPool1(stack["body"])
}

func (c *current) onPoolBody1(spec, at interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pool", "spec": spec, "at": at}, nil

}

func (p *parser) callonPoolBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBody1(stack["spec"], stack["at"])
}

func (c *current) onGet1(url, format, sort_key interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "HTTP", "url": url, "format": format, "sort_key": sort_key}, nil

}

func (p *parser) callonGet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGet1(stack["url"], stack["format"], stack["sort_key"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onPath2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonPath2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath2(stack["v"])
}

func (c *current) onPath5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPath5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath5()
}

func (c *current) onPoolAt1(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonPoolAt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolAt1(stack["id"])
}

func (c *current) onKSUID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKSUID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKSUID1()
}

func (c *current) onPoolSpec2(pool, commit, meta, tap interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": pool, "commit": commit, "meta": meta, "tap": tap}, nil

}

func (p *parser) callonPoolSpec2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec2(stack["pool"], stack["commit"], stack["meta"], stack["tap"])
}

func (c *current) onPoolSpec14(meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": nil, "commit": nil, "meta": meta}, nil

}

func (p *parser) callonPoolSpec14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec14(stack["meta"])
}

func (c *current) onPoolCommit1(commit interface{}) (interface{}, error) {
	return commit, nil
}

func (p *parser) callonPoolCommit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolCommit1(stack["commit"])
}

func (c *current) onPoolMeta1(meta interface{}) (interface{}, error) {
	return meta, nil
}

func (p *parser) callonPoolMeta1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolMeta1(stack["meta"])
}

func (c *current) onPoolName3() (interface{}, error) {
	return map[string]interface{}{"kind": "Glob", "pattern": "*"}, nil
}

func (p *parser) callonPoolName3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName3()
}

func (c *current) onPoolName9(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "String", "text": name}, nil
}

func (p *parser) callonPoolName9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName9(stack["name"])
}

func (c *current) onPoolIdentifier1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPoolIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolIdentifier1()
}

func (c *current) onSortKeyArg1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SortKey", "keys": keys, "order": order}, nil

}

func (p *parser) callonSortKeyArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortKeyArg1(stack["keys"], stack["order"])
}

func (c *current) onTapArg2() (interface{}, error) {
	return true, nil
}

func (p *parser) callonTapArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTapArg2()
}

func (c *current) onTapArg6() (interface{}, error) {
	return false, nil
}

func (p *parser) callonTapArg6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTapArg6()
}

func (c *current) onFormatArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonFormatArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArg1(stack["val"])
}

func (c *current) onOrderSuffix2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix2()
}

func (c *current) onOrderSuffix4() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderSuffix4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix4()
}

func (c *current) onOrderSuffix6() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix6()
}

func (c *current) onPassOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Pass"}, nil

}

func (p *parser) callonPassOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassOp1()
}

func (c *current) onExplodeOp1(args, typ, as interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Explode", "args": args, "as": as, "type": typ}, nil

}

func (p *parser) callonExplodeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplodeOp1(stack["args"], stack["typ"], stack["as"])
}

func (c *current) onMergeOp1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Merge", "expr": expr}, nil

}

func (p *parser) callonMergeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMergeOp1(stack["expr"])
}

func (c *current) onOverOp1(exprs, locals, body interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Over", "exprs": exprs, "locals": locals, "body": body}, nil

}

func (p *parser) callonOverOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverOp1(stack["exprs"], stack["locals"], stack["body"])
}

func (c *current) onLateral2(scope interface{}) (interface{}, error) {
	return scope, nil
}

func (p *parser) callonLateral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLateral2(stack["scope"])
}

func (c *current) onLateral13(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonLateral13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLateral13(stack["seq"])
}

func (c *current) onLocals10(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonLocals10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocals10(stack["a"])
}

func (c *current) onLocals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLocals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocals1(stack["first"], stack["rest"])
}

func (c *current) onLocalsAssignment1(name, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"name": name, "expr": map[string]interface{}{"kind": "ID", "name": name}}
	if opt != nil {
		m["expr"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonLocalsAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocalsAssignment1(stack["name"], stack["opt"])
}

func (c *current) onYieldOp1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Yield", "exprs": exprs}, nil

}

func (p *parser) callonYieldOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYieldOp1(stack["exprs"])
}

func (c *current) onTypeArg1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeArg1(stack["typ"])
}

func (c *current) onAsArg1(lhs interface{}) (interface{}, error) {
	return lhs, nil
}

func (p *parser) callonAsArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsArg1(stack["lhs"])
}

func (c *current) onLvals7(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonLvals7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals7(stack["lval"])
}

func (c *current) onLvals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLvals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals1(stack["first"], stack["rest"])
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignments7(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments7(stack["a"])
}

func (c *current) onAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr1(cond, opt interface{}) (interface{}, error) {
	if opt != nil {
		var Then = opt.([]interface{})[3]
		var Else = opt.([]interface{})[7]
		return map[string]interface{}{"kind": "Conditional", "cond": cond, "then": Then, "else": Else}, nil
	}
	return cond, nil

}

func (p *parser) callonConditionalExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr1(stack["cond"], stack["opt"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onComparisonExpr15() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparisonExpr15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr15()
}

func (c *current) onComparisonExpr1(lhs, opAndRHS interface{}) (interface{}, error) {
	if opAndRHS == nil {
		return lhs, nil
	}
	var op = opAndRHS.([]interface{})[1]
	var rhs = opAndRHS.([]interface{})[3]
	return map[string]interface{}{"kind": "BinaryExpr", "op": op, "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonComparisonExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr1(stack["lhs"], stack["opAndRHS"])
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onNegationExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "-", "operand": e}, nil

}

func (p *parser) callonNegationExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNegationExpr2(stack["e"])
}

func (c *current) onFuncExpr2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr2(stack["first"], stack["rest"])
}

func (c *current) onFuncExpr9(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr9(stack["first"], stack["rest"])
}

func (c *current) onCast1(typ, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": expr, "type": typ}, nil

}

func (p *parser) callonCast1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCast1(stack["typ"], stack["expr"])
}

func (c *current) onFunction3(arg0Text, arg1, where interface{}) (interface{}, error) {
	var arg0 = map[string]interface{}{"kind": "Primitive", "type": "string", "text": arg0Text}
	return map[string]interface{}{"kind": "Call", "name": "regexp", "args": []interface{}{arg0, arg1}, "where": where}, nil

}

func (p *parser) callonFunction3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction3(stack["arg0Text"], stack["arg1"], stack["where"])
}

func (c *current) onFunction21(arg0, arg1Text, arg2, where interface{}) (interface{}, error) {
	var arg1 = map[string]interface{}{"kind": "Primitive", "type": "string", "text": arg1Text}
	return map[string]interface{}{"kind": "Call", "name": "regexp_replace", "args": []interface{}{arg0, arg1, arg2}, "where": where}, nil

}

func (p *parser) callonFunction21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction21(stack["arg0"], stack["arg1Text"], stack["arg2"], stack["where"])
}

func (c *current) onFunction44(fn, args, where interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": fn, "args": args, "where": where}, nil

}

func (p *parser) callonFunction44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction44(stack["fn"], stack["args"], stack["where"])
}

func (c *current) onFunctionArgs2(o interface{}) (interface{}, error) {
	return []interface{}{o}, nil
}

func (p *parser) callonFunctionArgs2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunctionArgs2(stack["o"])
}

func (c *current) onGrep1(pattern, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Grep", "pattern": pattern, "expr": map[string]interface{}{"kind": "ID", "name": "this"}}
	if opt != nil {
		m["expr"] = opt.([]interface{})[2]
	}
	return m, nil

}

func (p *parser) callonGrep1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrep1(stack["pattern"], stack["opt"])
}

func (c *current) onPattern4(s interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "String", "text": s}, nil

}

func (p *parser) callonPattern4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPattern4(stack["s"])
}

func (c *current) onOptionalExprs3() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonOptionalExprs3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalExprs3()
}

func (c *current) onExprs7(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonExprs7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs7(stack["e"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr1(stack["first"], stack["rest"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref14(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": nil, "rhs": to}}, nil

}

func (p *parser) callonDeref14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref14(stack["to"])
}

func (c *current) onDeref23(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref23(stack["expr"])
}

func (c *current) onDeref29(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref29(stack["id"])
}

func (c *current) onPrimary7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary7(stack["expr"])
}

func (c *current) onPrimary15(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary15(stack["expr"])
}

func (c *current) onOverExpr1(exprs, locals, body interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OverExpr", "locals": locals, "exprs": exprs, "body": body}, nil

}

func (p *parser) callonOverExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverExpr1(stack["exprs"], stack["locals"], stack["body"])
}

func (c *current) onRecord1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RecordExpr", "elems": elems}, nil

}

func (p *parser) callonRecord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecord1(stack["elems"])
}

func (c *current) onRecordElems2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonRecordElems2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems2(stack["first"], stack["rest"])
}

func (c *current) onRecordElems9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonRecordElems9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems9()
}

func (c *current) onRecordElemTail1(elem interface{}) (interface{}, error) {
	return elem, nil
}

func (p *parser) callonRecordElemTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElemTail1(stack["elem"])
}

func (c *current) onSpread1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Spread", "expr": expr}, nil

}

func (p *parser) callonSpread1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpread1(stack["expr"])
}

func (c *current) onField1(name, value interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Field", "name": name, "value": value}, nil

}

func (p *parser) callonField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField1(stack["name"], stack["value"])
}

func (c *current) onArray1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ArrayExpr", "elems": elems}, nil

}

func (p *parser) callonArray1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArray1(stack["elems"])
}

func (c *current) onSet1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SetExpr", "elems": elems}, nil

}

func (p *parser) callonSet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSet1(stack["elems"])
}

func (c *current) onVectorElems8(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonVectorElems8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems8(stack["e"])
}

func (c *current) onVectorElems2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonVectorElems2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems2(stack["first"], stack["rest"])
}

func (c *current) onVectorElems15() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonVectorElems15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems15()
}

func (c *current) onVectorElem3(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "VectorValue", "expr": e}, nil
}

func (p *parser) callonVectorElem3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElem3(stack["e"])
}

func (c *current) onMap1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "MapExpr", "entries": exprs}, nil

}

func (p *parser) callonMap1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMap1(stack["exprs"])
}

func (c *current) onEntries2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonEntries2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries2(stack["first"], stack["rest"])
}

func (c *current) onEntries9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonEntries9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries9()
}

func (c *current) onEntryTail1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonEntryTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntryTail1(stack["e"])
}

func (c *current) onEntry1(key, value interface{}) (interface{}, error) {
	return map[string]interface{}{"key": key, "value": value}, nil

}

func (p *parser) callonEntry1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntry1(stack["key"], stack["value"])
}

func (c *current) onSQLOp1(selection, from, joins, where, groupby, having, orderby, limit interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "SQLExpr",

		"select": selection,

		"from": from,

		"joins": joins,

		"where": where,

		"group_by": groupby,

		"having": having,

		"order_by": orderby,

		"limit": limit}, nil

}

func (p *parser) callonSQLOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOp1(stack["selection"], stack["from"], stack["joins"], stack["where"], stack["groupby"], stack["having"], stack["orderby"], stack["limit"])
}

func (c *current) onSQLSelect2() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLSelect2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect2()
}

func (c *current) onSQLSelect7(assignments interface{}) (interface{}, error) {
	return assignments, nil
}

func (p *parser) callonSQLSelect7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect7(stack["assignments"])
}

func (c *current) onSQLAssignment1(rhs, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": rhs}
	if opt != nil {
		m["lhs"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonSQLAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment1(stack["rhs"], stack["opt"])
}

func (c *current) onSQLAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments7(stack["expr"])
}

func (c *current) onSQLAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSQLFrom2(table, alias interface{}) (interface{}, error) {
	return map[string]interface{}{"table": table, "alias": alias}, nil

}

func (p *parser) callonSQLFrom2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom2(stack["table"], stack["alias"])
}

func (c *current) onSQLFrom12() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLFrom12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom12()
}

func (c *current) onSQLAlias2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias2(stack["id"])
}

func (c *current) onSQLAlias9(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias9(stack["id"])
}

func (c *current) onSQLJoins7(join interface{}) (interface{}, error) {
	return join, nil
}

func (p *parser) callonSQLJoins7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins7(stack["join"])
}

func (c *current) onSQLJoins1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLJoins1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins1(stack["first"], stack["rest"])
}

func (c *current) onSQLJoin1(style, table, alias, leftKey, rightKey interface{}) (interface{}, error) {
	return map[string]interface{}{

		"table": table,

		"style": style,

		"left_key": leftKey,

		"right_key": rightKey,

		"alias": alias}, nil

}

func (p *parser) callonSQLJoin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoin1(stack["style"], stack["table"], stack["alias"], stack["leftKey"], stack["rightKey"])
}

func (c *current) onSQLJoinStyle2(style interface{}) (interface{}, error) {
	return style, nil
}

func (p *parser) callonSQLJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle2(stack["style"])
}

func (c *current) onSQLJoinStyle11() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonSQLJoinStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle11()
}

func (c *current) onSQLWhere1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLWhere1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLWhere1(stack["expr"])
}

func (c *current) onSQLGroupBy1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonSQLGroupBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLGroupBy1(stack["columns"])
}

func (c *current) onSQLHaving1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLHaving1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLHaving1(stack["expr"])
}

func (c *current) onSQLOrderBy1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SQLOrderBy", "keys": keys, "order": order}, nil

}

func (p *parser) callonSQLOrderBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrderBy1(stack["keys"], stack["order"])
}

func (c *current) onSQLOrder2(dir interface{}) (interface{}, error) {
	return dir, nil
}

func (p *parser) callonSQLOrder2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder2(stack["dir"])
}

func (c *current) onSQLOrder9() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonSQLOrder9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder9()
}

func (c *current) onSQLLimit2(count interface{}) (interface{}, error) {
	return count, nil
}

func (p *parser) callonSQLLimit2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit2(stack["count"])
}

func (c *current) onSQLLimit9() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonSQLLimit9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit9()
}

func (c *current) onSELECT1() (interface{}, error) {
	return "select", nil
}

func (p *parser) callonSELECT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSELECT1()
}

func (c *current) onAS1() (interface{}, error) {
	return "as", nil
}

func (p *parser) callonAS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAS1()
}

func (c *current) onFROM1() (interface{}, error) {
	return "from", nil
}

func (p *parser) callonFROM1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFROM1()
}

func (c *current) onJOIN1() (interface{}, error) {
	return "join", nil
}

func (p *parser) callonJOIN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJOIN1()
}

func (c *current) onWHERE1() (interface{}, error) {
	return "where", nil
}

func (p *parser) callonWHERE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWHERE1()
}

func (c *current) onGROUP1() (interface{}, error) {
	return "group", nil
}

func (p *parser) callonGROUP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGROUP1()
}

func (c *current) onBY1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonBY1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBY1()
}

func (c *current) onHAVING1() (interface{}, error) {
	return "having", nil
}

func (p *parser) callonHAVING1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHAVING1()
}

func (c *current) onORDER1() (interface{}, error) {
	return "order", nil
}

func (p *parser) callonORDER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onORDER1()
}

func (c *current) onON1() (interface{}, error) {
	return "on", nil
}

func (p *parser) callonON1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onON1()
}

func (c *current) onLIMIT1() (interface{}, error) {
	return "limit", nil
}

func (p *parser) callonLIMIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIMIT1()
}

func (c *current) onASC1() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonASC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onASC1()
}

func (c *current) onDESC1() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonDESC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDESC1()
}

func (c *current) onANTI1() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonANTI1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onANTI1()
}

func (c *current) onLEFT1() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonLEFT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLEFT1()
}

func (c *current) onRIGHT1() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonRIGHT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRIGHT1()
}

func (c *current) onINNER1() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonINNER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINNER1()
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "float64", "text": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "int64", "text": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "null", "text": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onBytesLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bytes", "text": string(c.text)}, nil

}

func (p *parser) callonBytesLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBytesLiteral1()
}

func (c *current) onTypeLiteral1(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonTypeLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeLiteral1(stack["typ"])
}

func (c *current) onCastType3(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonCastType3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCastType3(stack["typ"])
}

func (c *current) onAmbiguousType2(name interface{}) (interface{}, error) {
	return name, nil
}

func (p *parser) callonAmbiguousType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType2(stack["name"])
}

func (c *current) onAmbiguousType8(name, opt interface{}) (interface{}, error) {
	if opt != nil {
		return map[string]interface{}{"kind": "TypeDef", "name": name, "type": opt.([]interface{})[3]}, nil
	}
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType8(stack["name"], stack["opt"])
}

func (c *current) onAmbiguousType19(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType19(stack["name"])
}

func (c *current) onAmbiguousType22(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonAmbiguousType22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType22(stack["u"])
}

func (c *current) onTypeUnion1(types interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeUnion", "types": types}, nil

}

func (p *parser) callonTypeUnion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeUnion1(stack["types"])
}

func (c *current) onTypeList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeList1(stack["first"], stack["rest"])
}

func (c *current) onTypeListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeListTail1(stack["typ"])
}

func (c *current) onComplexType2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType2(stack["fields"])
}

func (c *current) onComplexType10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexType10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType10(stack["typ"])
}

func (c *current) onComplexType18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexType18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType18(stack["typ"])
}

func (c *current) onComplexType26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexType26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType26(stack["keyType"], stack["valType"])
}

func (c *current) onTemplateLiteral1(v interface{}) (interface{}, error) {
	if len(v.([]interface{})) == 0 {
		return map[string]interface{}{"kind": "Primitive", "type": "string", "text": ""}, nil
	}
	return makeTemplateExprChain(v), nil

}

func (p *parser) callonTemplateLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteral1(stack["v"])
}

func (c *current) onTemplateLiteralParts2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts2(stack["v"])
}

func (c *current) onTemplateLiteralParts9(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts9(stack["v"])
}

func (c *current) onTemplateDoubleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateDoubleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedPart3(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar2(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar7(stack["v"])
}

func (c *current) onTemplateSingleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateSingleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedPart3(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar2(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar7(stack["v"])
}

func (c *current) onTemplateExpr1(e interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "Cast",

		"expr": e,

		"type": map[string]interface{}{

			"kind": "TypeValue",

			"value": map[string]interface{}{"kind": "TypePrimitive", "name": "string"}}}, nil

}

func (p *parser) callonTemplateExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateExpr1(stack["e"])
}

func (c *current) onPrimitiveType1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveType1()
}

func (c *current) onTypeFieldList2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList2(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldList9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonTypeFieldList9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList9()
}

func (c *current) onTypeFieldListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTail1(stack["typ"])
}

func (c *current) onTypeField1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeField1(stack["name"], stack["typ"])
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return "in", nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onIdentifierName19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName19()
}

func (c *current) onIdentifierName21(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName21(stack["id"])
}

func (c *current) onIdentifierNames7(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierNames7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierNames7(stack["id"])
}

func (c *current) onIdentifierNames1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonIdentifierNames1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierNames1(stack["first"], stack["rest"])
}

func (c *current) onTime1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "time", "text": string(c.text)}, nil

}

func (p *parser) callonTime1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTime1()
}

func (c *current) onDuration1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "duration", "text": string(c.text)}, nil

}

func (p *parser) callonDuration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDuration1()
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onFloatString22() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFloatString22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString22()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordChars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordChars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordChars1()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onGlobPattern1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil

}

func (p *parser) callonGlobPattern1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobPattern1(stack["head"], stack["tail"])
}

func (c *current) onGlobStart4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonGlobStart4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobStart4()
}

func (c *current) onGlobEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonGlobEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEsc1(stack["s"])
}

func (c *current) onGlobEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonGlobEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape2()
}

func (c *current) onGlobEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonGlobEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape4()
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onSingleCharEscape3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleCharEscape3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape3()
}

func (c *current) onSingleCharEscape6() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape6()
}

func (c *current) onSingleCharEscape8() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape8()
}

func (c *current) onSingleCharEscape10() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape10()
}

func (c *current) onSingleCharEscape12() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape12()
}

func (c *current) onSingleCharEscape14() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape14()
}

func (c *current) onSingleCharEscape16() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape16()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexpPattern1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexpPattern1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpPattern1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
