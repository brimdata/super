// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 7, col: 1, offset: 26},
			expr: &choiceExpr{
				pos: position{line: 8, col: 5, offset: 36},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 8, col: 5, offset: 36},
						run: (*parser).callonstart2,
						expr: &seqExpr{
							pos: position{line: 8, col: 5, offset: 36},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 8, col: 5, offset: 36},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 8, col: 8, offset: 39},
									label: "scope",
									expr: &ruleRefExpr{
										pos:  position{line: 8, col: 14, offset: 45},
										name: "Scope",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 8, col: 20, offset: 51},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 8, col: 23, offset: 54},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 9, col: 5, offset: 99},
						run: (*parser).callonstart9,
						expr: &seqExpr{
							pos: position{line: 9, col: 5, offset: 99},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 9, col: 5, offset: 99},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 9, col: 8, offset: 102},
									label: "seq",
									expr: &ruleRefExpr{
										pos:  position{line: 9, col: 12, offset: 106},
										name: "Seq",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 9, col: 16, offset: 110},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 9, col: 19, offset: 113},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Scope",
			pos:  position{line: 11, col: 1, offset: 138},
			expr: &actionExpr{
				pos: position{line: 12, col: 5, offset: 148},
				run: (*parser).callonScope1,
				expr: &seqExpr{
					pos: position{line: 12, col: 5, offset: 148},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 12, col: 5, offset: 148},
							label: "decls",
							expr: &oneOrMoreExpr{
								pos: position{line: 12, col: 11, offset: 154},
								expr: &ruleRefExpr{
									pos:  position{line: 12, col: 11, offset: 154},
									name: "Decl",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 12, col: 17, offset: 160},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 12, col: 22, offset: 165},
								name: "Seq",
							},
						},
					},
				},
			},
		},
		{
			name: "Seq",
			pos:  position{line: 16, col: 1, offset: 266},
			expr: &actionExpr{
				pos: position{line: 17, col: 5, offset: 274},
				run: (*parser).callonSeq1,
				expr: &seqExpr{
					pos: position{line: 17, col: 5, offset: 274},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 5, offset: 274},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 11, offset: 280},
								name: "Operation",
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 21, offset: 290},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 17, col: 26, offset: 295},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 26, offset: 295},
									name: "SeqTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SeqTail",
			pos:  position{line: 21, col: 1, offset: 388},
			expr: &actionExpr{
				pos: position{line: 21, col: 11, offset: 398},
				run: (*parser).callonSeqTail1,
				expr: &seqExpr{
					pos: position{line: 21, col: 11, offset: 398},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 21, col: 11, offset: 398},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 14, offset: 401},
							name: "Pipe",
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 19, offset: 406},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 21, col: 22, offset: 409},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 24, offset: 411},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Decl",
			pos:  position{line: 23, col: 1, offset: 440},
			expr: &actionExpr{
				pos: position{line: 24, col: 5, offset: 449},
				run: (*parser).callonDecl1,
				expr: &seqExpr{
					pos: position{line: 24, col: 5, offset: 449},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 24, col: 5, offset: 449},
							label: "v",
							expr: &choiceExpr{
								pos: position{line: 24, col: 8, offset: 452},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 24, col: 8, offset: 452},
										name: "ConstDecl",
									},
									&ruleRefExpr{
										pos:  position{line: 24, col: 20, offset: 464},
										name: "FuncDecl",
									},
									&ruleRefExpr{
										pos:  position{line: 24, col: 31, offset: 475},
										name: "OpDecl",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 24, col: 39, offset: 483},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "ConstDecl",
			pos:  position{line: 26, col: 1, offset: 504},
			expr: &choiceExpr{
				pos: position{line: 27, col: 5, offset: 518},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 27, col: 5, offset: 518},
						run: (*parser).callonConstDecl2,
						expr: &seqExpr{
							pos: position{line: 27, col: 5, offset: 518},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 27, col: 5, offset: 518},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 13, offset: 526},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 15, offset: 528},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 18, offset: 531},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 33, offset: 546},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 27, col: 36, offset: 549},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 40, offset: 553},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 43, offset: 556},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 48, offset: 561},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 30, col: 5, offset: 666},
						run: (*parser).callonConstDecl13,
						expr: &seqExpr{
							pos: position{line: 30, col: 5, offset: 666},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 30, col: 5, offset: 666},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 12, offset: 673},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 14, offset: 675},
									label: "id",
									expr: &choiceExpr{
										pos: position{line: 30, col: 18, offset: 679},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 30, col: 18, offset: 679},
												name: "IdentifierName",
											},
											&ruleRefExpr{
												pos:  position{line: 30, col: 35, offset: 696},
												name: "QuotedString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 49, offset: 710},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 30, col: 52, offset: 713},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 56, offset: 717},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 59, offset: 720},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 30, col: 63, offset: 724},
										name: "Type",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuncDecl",
			pos:  position{line: 41, col: 1, offset: 993},
			expr: &actionExpr{
				pos: position{line: 42, col: 5, offset: 1006},
				run: (*parser).callonFuncDecl1,
				expr: &seqExpr{
					pos: position{line: 42, col: 5, offset: 1006},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 42, col: 5, offset: 1006},
							val:        "func",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 12, offset: 1013},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 42, col: 14, offset: 1015},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 17, offset: 1018},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 32, offset: 1033},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 42, col: 35, offset: 1036},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 39, offset: 1040},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 42, col: 42, offset: 1043},
							label: "params",
							expr: &zeroOrOneExpr{
								pos: position{line: 42, col: 49, offset: 1050},
								expr: &ruleRefExpr{
									pos:  position{line: 42, col: 49, offset: 1050},
									name: "IdentifierNames",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 66, offset: 1067},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 42, col: 69, offset: 1070},
							val:        ")",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 73, offset: 1074},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 42, col: 76, offset: 1077},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 80, offset: 1081},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 42, col: 83, offset: 1084},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 87, offset: 1088},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 42, col: 90, offset: 1091},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 95, offset: 1096},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 100, offset: 1101},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 42, col: 103, offset: 1104},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OpDecl",
			pos:  position{line: 55, col: 1, offset: 1288},
			expr: &actionExpr{
				pos: position{line: 56, col: 5, offset: 1299},
				run: (*parser).callonOpDecl1,
				expr: &seqExpr{
					pos: position{line: 56, col: 5, offset: 1299},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 56, col: 5, offset: 1299},
							val:        "op",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 56, col: 10, offset: 1304},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 56, col: 12, offset: 1306},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 56, col: 17, offset: 1311},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 56, col: 32, offset: 1326},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 56, col: 35, offset: 1329},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 56, col: 39, offset: 1333},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 56, col: 42, offset: 1336},
							label: "params",
							expr: &zeroOrOneExpr{
								pos: position{line: 56, col: 49, offset: 1343},
								expr: &ruleRefExpr{
									pos:  position{line: 56, col: 49, offset: 1343},
									name: "Params",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 56, col: 57, offset: 1351},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 56, col: 60, offset: 1354},
							val:        ")",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 56, col: 64, offset: 1358},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 56, col: 67, offset: 1361},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 56, col: 71, offset: 1365},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 56, col: 74, offset: 1368},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 56, col: 78, offset: 1372},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 56, col: 81, offset: 1375},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 56, col: 86, offset: 1380},
								name: "Seq",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 56, col: 90, offset: 1384},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 56, col: 93, offset: 1387},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Params",
			pos:  position{line: 69, col: 1, offset: 1571},
			expr: &actionExpr{
				pos: position{line: 70, col: 5, offset: 1583},
				run: (*parser).callonParams1,
				expr: &seqExpr{
					pos: position{line: 70, col: 5, offset: 1583},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 70, col: 5, offset: 1583},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 70, col: 11, offset: 1589},
								name: "Param",
							},
						},
						&labeledExpr{
							pos:   position{line: 70, col: 17, offset: 1595},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 70, col: 22, offset: 1600},
								expr: &actionExpr{
									pos: position{line: 70, col: 23, offset: 1601},
									run: (*parser).callonParams7,
									expr: &seqExpr{
										pos: position{line: 70, col: 23, offset: 1601},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 70, col: 23, offset: 1601},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 70, col: 26, offset: 1604},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 70, col: 30, offset: 1608},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 70, col: 33, offset: 1611},
												label: "p",
												expr: &ruleRefExpr{
													pos:  position{line: 70, col: 35, offset: 1613},
													name: "Param",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Param",
			pos:  position{line: 74, col: 1, offset: 1727},
			expr: &choiceExpr{
				pos: position{line: 75, col: 5, offset: 1737},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 75, col: 5, offset: 1737},
						run: (*parser).callonParam2,
						expr: &seqExpr{
							pos: position{line: 75, col: 5, offset: 1737},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 75, col: 5, offset: 1737},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 75, col: 13, offset: 1745},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 75, col: 15, offset: 1747},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 75, col: 18, offset: 1750},
										name: "IdentifierName",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 76, col: 5, offset: 1842},
						run: (*parser).callonParam8,
						expr: &litMatcher{
							pos:        position{line: 76, col: 5, offset: 1842},
							val:        "...",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 77, col: 5, offset: 1914},
						run: (*parser).callonParam10,
						expr: &labeledExpr{
							pos:   position{line: 77, col: 5, offset: 1914},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 77, col: 8, offset: 1917},
								name: "IdentifierName",
							},
						},
					},
				},
			},
		},
		{
			name: "Operation",
			pos:  position{line: 79, col: 1, offset: 2006},
			expr: &choiceExpr{
				pos: position{line: 80, col: 5, offset: 2020},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 80, col: 5, offset: 2020},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 80, col: 5, offset: 2020},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 80, col: 5, offset: 2020},
									val:        "fork",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 80, col: 12, offset: 2027},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 80, col: 15, offset: 2030},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 80, col: 19, offset: 2034},
									label: "paths",
									expr: &oneOrMoreExpr{
										pos: position{line: 80, col: 25, offset: 2040},
										expr: &ruleRefExpr{
											pos:  position{line: 80, col: 25, offset: 2040},
											name: "Leg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 80, col: 30, offset: 2045},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 80, col: 33, offset: 2048},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 83, col: 5, offset: 2141},
						run: (*parser).callonOperation12,
						expr: &seqExpr{
							pos: position{line: 83, col: 5, offset: 2141},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 83, col: 5, offset: 2141},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 83, col: 14, offset: 2150},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 83, col: 16, offset: 2152},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 83, col: 21, offset: 2157},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 83, col: 26, offset: 2162},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 83, col: 28, offset: 2164},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 83, col: 32, offset: 2168},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 83, col: 38, offset: 2174},
										expr: &ruleRefExpr{
											pos:  position{line: 83, col: 38, offset: 2174},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 83, col: 49, offset: 2185},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 83, col: 52, offset: 2188},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 86, col: 5, offset: 2293},
						run: (*parser).callonOperation25,
						expr: &seqExpr{
							pos: position{line: 86, col: 5, offset: 2293},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 86, col: 5, offset: 2293},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 86, col: 14, offset: 2302},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 86, col: 17, offset: 2305},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 86, col: 21, offset: 2309},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 86, col: 27, offset: 2315},
										expr: &ruleRefExpr{
											pos:  position{line: 86, col: 27, offset: 2315},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 86, col: 38, offset: 2326},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 86, col: 41, offset: 2329},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 89, col: 5, offset: 2433},
						run: (*parser).callonOperation35,
						expr: &seqExpr{
							pos: position{line: 89, col: 5, offset: 2433},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 89, col: 5, offset: 2433},
									val:        "from",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 89, col: 12, offset: 2440},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 89, col: 15, offset: 2443},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 89, col: 19, offset: 2447},
									label: "trunks",
									expr: &oneOrMoreExpr{
										pos: position{line: 89, col: 26, offset: 2454},
										expr: &ruleRefExpr{
											pos:  position{line: 89, col: 26, offset: 2454},
											name: "FromLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 89, col: 35, offset: 2463},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 89, col: 38, offset: 2466},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 92, col: 5, offset: 2557},
						run: (*parser).callonOperation45,
						expr: &seqExpr{
							pos: position{line: 92, col: 5, offset: 2557},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 92, col: 5, offset: 2557},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 92, col: 9, offset: 2561},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 92, col: 12, offset: 2564},
									label: "scope",
									expr: &ruleRefExpr{
										pos:  position{line: 92, col: 18, offset: 2570},
										name: "Scope",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 92, col: 24, offset: 2576},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 92, col: 27, offset: 2579},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&labeledExpr{
						pos:   position{line: 93, col: 5, offset: 2609},
						label: "op",
						expr: &ruleRefExpr{
							pos:  position{line: 93, col: 8, offset: 2612},
							name: "Operator",
						},
					},
					&actionExpr{
						pos: position{line: 94, col: 5, offset: 2625},
						run: (*parser).callonOperation55,
						expr: &seqExpr{
							pos: position{line: 94, col: 5, offset: 2625},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 94, col: 5, offset: 2625},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 94, col: 7, offset: 2627},
										name: "OpAssignment",
									},
								},
								&andExpr{
									pos: position{line: 94, col: 20, offset: 2640},
									expr: &ruleRefExpr{
										pos:  position{line: 94, col: 21, offset: 2641},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 95, col: 5, offset: 2671},
						run: (*parser).callonOperation61,
						expr: &seqExpr{
							pos: position{line: 95, col: 5, offset: 2671},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 95, col: 5, offset: 2671},
									expr: &seqExpr{
										pos: position{line: 95, col: 7, offset: 2673},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 95, col: 7, offset: 2673},
												name: "Function",
											},
											&ruleRefExpr{
												pos:  position{line: 95, col: 16, offset: 2682},
												name: "EndOfOp",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 95, col: 25, offset: 2691},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 95, col: 27, offset: 2693},
										name: "Aggregation",
									},
								},
								&andExpr{
									pos: position{line: 95, col: 39, offset: 2705},
									expr: &ruleRefExpr{
										pos:  position{line: 95, col: 40, offset: 2706},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 96, col: 5, offset: 2736},
						run: (*parser).callonOperation71,
						expr: &seqExpr{
							pos: position{line: 96, col: 5, offset: 2736},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 96, col: 5, offset: 2736},
									val:        "search",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 96, col: 14, offset: 2745},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 96, col: 16, offset: 2747},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 96, col: 21, offset: 2752},
										name: "SearchBoolean",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 99, col: 5, offset: 2851},
						run: (*parser).callonOperation77,
						expr: &labeledExpr{
							pos:   position{line: 99, col: 5, offset: 2851},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 99, col: 10, offset: 2856},
								name: "SearchBoolean",
							},
						},
					},
					&actionExpr{
						pos: position{line: 102, col: 5, offset: 2955},
						run: (*parser).callonOperation80,
						expr: &labeledExpr{
							pos:   position{line: 102, col: 5, offset: 2955},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 102, col: 10, offset: 2960},
								name: "Cast",
							},
						},
					},
					&actionExpr{
						pos: position{line: 105, col: 5, offset: 3048},
						run: (*parser).callonOperation83,
						expr: &labeledExpr{
							pos:   position{line: 105, col: 5, offset: 3048},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 105, col: 10, offset: 3053},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "EndOfOp",
			pos:  position{line: 109, col: 1, offset: 3140},
			expr: &seqExpr{
				pos: position{line: 109, col: 11, offset: 3150},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 109, col: 11, offset: 3150},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 109, col: 15, offset: 3154},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 109, col: 15, offset: 3154},
								name: "Pipe",
							},
							&ruleRefExpr{
								pos:  position{line: 109, col: 22, offset: 3161},
								name: "SearchKeywordGuard",
							},
							&litMatcher{
								pos:        position{line: 109, col: 43, offset: 3182},
								val:        "=>",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 109, col: 50, offset: 3189},
								val:        ")",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 109, col: 56, offset: 3195},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "Pipe",
			pos:  position{line: 110, col: 1, offset: 3200},
			expr: &seqExpr{
				pos: position{line: 110, col: 8, offset: 3207},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 110, col: 8, offset: 3207},
						val:        "|",
						ignoreCase: false,
					},
					&notExpr{
						pos: position{line: 110, col: 12, offset: 3211},
						expr: &choiceExpr{
							pos: position{line: 110, col: 14, offset: 3213},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 110, col: 14, offset: 3213},
									val:        "{",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 110, col: 20, offset: 3219},
									val:        "[",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Leg",
			pos:  position{line: 112, col: 1, offset: 3225},
			expr: &actionExpr{
				pos: position{line: 112, col: 7, offset: 3231},
				run: (*parser).callonLeg1,
				expr: &seqExpr{
					pos: position{line: 112, col: 7, offset: 3231},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 112, col: 7, offset: 3231},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 112, col: 10, offset: 3234},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 112, col: 15, offset: 3239},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 112, col: 18, offset: 3242},
							label: "seq",
							expr: &ruleRefExpr{
								pos:  position{line: 112, col: 22, offset: 3246},
								name: "Seq",
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchLeg",
			pos:  position{line: 114, col: 1, offset: 3271},
			expr: &actionExpr{
				pos: position{line: 115, col: 5, offset: 3285},
				run: (*parser).callonSwitchLeg1,
				expr: &seqExpr{
					pos: position{line: 115, col: 5, offset: 3285},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 115, col: 5, offset: 3285},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 115, col: 8, offset: 3288},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 115, col: 13, offset: 3293},
								name: "Case",
							},
						},
						&labeledExpr{
							pos:   position{line: 115, col: 18, offset: 3298},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 115, col: 23, offset: 3303},
								name: "Leg",
							},
						},
					},
				},
			},
		},
		{
			name: "Case",
			pos:  position{line: 119, col: 1, offset: 3385},
			expr: &choiceExpr{
				pos: position{line: 120, col: 5, offset: 3394},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 120, col: 5, offset: 3394},
						run: (*parser).callonCase2,
						expr: &seqExpr{
							pos: position{line: 120, col: 5, offset: 3394},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 120, col: 5, offset: 3394},
									val:        "case",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 120, col: 12, offset: 3401},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 120, col: 14, offset: 3403},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 120, col: 19, offset: 3408},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 121, col: 5, offset: 3438},
						run: (*parser).callonCase8,
						expr: &litMatcher{
							pos:        position{line: 121, col: 5, offset: 3438},
							val:        "default",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromLeg",
			pos:  position{line: 123, col: 1, offset: 3469},
			expr: &actionExpr{
				pos: position{line: 124, col: 5, offset: 3481},
				run: (*parser).callonFromLeg1,
				expr: &seqExpr{
					pos: position{line: 124, col: 5, offset: 3481},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 124, col: 5, offset: 3481},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 124, col: 8, offset: 3484},
							label: "source",
							expr: &ruleRefExpr{
								pos:  position{line: 124, col: 15, offset: 3491},
								name: "FromSource",
							},
						},
						&labeledExpr{
							pos:   position{line: 124, col: 26, offset: 3502},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 124, col: 30, offset: 3506},
								expr: &seqExpr{
									pos: position{line: 124, col: 31, offset: 3507},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 124, col: 31, offset: 3507},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 124, col: 34, offset: 3510},
											val:        "=>",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 124, col: 39, offset: 3515},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 124, col: 42, offset: 3518},
											name: "Seq",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FromSource",
			pos:  position{line: 132, col: 1, offset: 3709},
			expr: &choiceExpr{
				pos: position{line: 133, col: 5, offset: 3724},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 133, col: 5, offset: 3724},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 134, col: 5, offset: 3733},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 135, col: 5, offset: 3741},
						name: "Pool",
					},
					&ruleRefExpr{
						pos:  position{line: 136, col: 5, offset: 3750},
						name: "PassOp",
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 138, col: 1, offset: 3758},
			expr: &seqExpr{
				pos: position{line: 138, col: 13, offset: 3770},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 138, col: 13, offset: 3770},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 138, col: 17, offset: 3774},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 138, col: 18, offset: 3775},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 138, col: 18, offset: 3775},
										expr: &litMatcher{
											pos:        position{line: 138, col: 19, offset: 3776},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 138, col: 24, offset: 3781},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 138, col: 38, offset: 3795},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 138, col: 57, offset: 3814},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 138, col: 82, offset: 3839},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 138, col: 88, offset: 3845},
								val:        "(",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 138, col: 94, offset: 3851},
								val:        "[",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 138, col: 100, offset: 3857},
								val:        "~",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 140, col: 1, offset: 3863},
			expr: &actionExpr{
				pos: position{line: 140, col: 14, offset: 3876},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 140, col: 15, offset: 3877},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 140, col: 15, offset: 3877},
							val:        "==",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 140, col: 22, offset: 3884},
							val:        "!=",
							ignoreCase: false,
						},
						&seqExpr{
							pos: position{line: 140, col: 30, offset: 3892},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 140, col: 30, offset: 3892},
									val:        "in",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 140, col: 35, offset: 3897},
									expr: &ruleRefExpr{
										pos:  position{line: 140, col: 36, offset: 3898},
										name: "IdentifierRest",
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 140, col: 54, offset: 3916},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 140, col: 61, offset: 3923},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 140, col: 67, offset: 3929},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 140, col: 74, offset: 3936},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 142, col: 1, offset: 3973},
			expr: &actionExpr{
				pos: position{line: 143, col: 5, offset: 3991},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 143, col: 5, offset: 3991},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 143, col: 5, offset: 3991},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 143, col: 11, offset: 3997},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 143, col: 21, offset: 4007},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 143, col: 26, offset: 4012},
								expr: &ruleRefExpr{
									pos:  position{line: 143, col: 26, offset: 4012},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 147, col: 1, offset: 4086},
			expr: &actionExpr{
				pos: position{line: 147, col: 16, offset: 4101},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 147, col: 16, offset: 4101},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 147, col: 16, offset: 4101},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 147, col: 18, offset: 4103},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 147, col: 26, offset: 4111},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 147, col: 28, offset: 4113},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 147, col: 30, offset: 4115},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 149, col: 1, offset: 4165},
			expr: &actionExpr{
				pos: position{line: 150, col: 5, offset: 4179},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 150, col: 5, offset: 4179},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 150, col: 5, offset: 4179},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 150, col: 11, offset: 4185},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 151, col: 5, offset: 4202},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 151, col: 10, offset: 4207},
								expr: &actionExpr{
									pos: position{line: 151, col: 11, offset: 4208},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 151, col: 11, offset: 4208},
										exprs: []interface{}{
											&zeroOrOneExpr{
												pos: position{line: 151, col: 11, offset: 4208},
												expr: &seqExpr{
													pos: position{line: 151, col: 12, offset: 4209},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 151, col: 12, offset: 4209},
															name: "_",
														},
														&ruleRefExpr{
															pos:  position{line: 151, col: 14, offset: 4211},
															name: "AndToken",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 151, col: 25, offset: 4222},
												name: "_",
											},
											&notExpr{
												pos: position{line: 151, col: 27, offset: 4224},
												expr: &choiceExpr{
													pos: position{line: 151, col: 29, offset: 4226},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 151, col: 29, offset: 4226},
															name: "OrToken",
														},
														&ruleRefExpr{
															pos:  position{line: 151, col: 39, offset: 4236},
															name: "SearchKeywordGuard",
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 151, col: 59, offset: 4256},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 151, col: 64, offset: 4261},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchKeywordGuard",
			pos:  position{line: 155, col: 1, offset: 4379},
			expr: &choiceExpr{
				pos: position{line: 156, col: 5, offset: 4402},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 156, col: 5, offset: 4402},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 156, col: 5, offset: 4402},
								name: "FromSource",
							},
							&ruleRefExpr{
								pos:  position{line: 156, col: 16, offset: 4413},
								name: "__",
							},
							&litMatcher{
								pos:        position{line: 156, col: 19, offset: 4416},
								val:        "=>",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 156, col: 24, offset: 4421},
								name: "__",
							},
						},
					},
					&seqExpr{
						pos: position{line: 157, col: 5, offset: 4428},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 157, col: 5, offset: 4428},
								name: "Case",
							},
							&ruleRefExpr{
								pos:  position{line: 157, col: 10, offset: 4433},
								name: "__",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 159, col: 1, offset: 4437},
			expr: &choiceExpr{
				pos: position{line: 160, col: 5, offset: 4454},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 160, col: 5, offset: 4454},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 160, col: 5, offset: 4454},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 160, col: 6, offset: 4455},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 160, col: 6, offset: 4455},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 160, col: 6, offset: 4455},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 160, col: 15, offset: 4464},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 160, col: 19, offset: 4468},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 160, col: 19, offset: 4468},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 160, col: 23, offset: 4472},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 160, col: 27, offset: 4476},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 160, col: 29, offset: 4478},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 163, col: 5, offset: 4590},
						run: (*parser).callonSearchFactor13,
						expr: &seqExpr{
							pos: position{line: 163, col: 5, offset: 4590},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 163, col: 5, offset: 4590},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 163, col: 9, offset: 4594},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 163, col: 12, offset: 4597},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 163, col: 17, offset: 4602},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 163, col: 31, offset: 4616},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 163, col: 34, offset: 4619},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 164, col: 5, offset: 4648},
						name: "SearchExpr",
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 166, col: 1, offset: 4660},
			expr: &choiceExpr{
				pos: position{line: 167, col: 5, offset: 4675},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 167, col: 5, offset: 4675},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 168, col: 5, offset: 4686},
						name: "Glob",
					},
					&actionExpr{
						pos: position{line: 169, col: 5, offset: 4695},
						run: (*parser).callonSearchExpr4,
						expr: &seqExpr{
							pos: position{line: 169, col: 5, offset: 4695},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 169, col: 5, offset: 4695},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 169, col: 7, offset: 4697},
										name: "SearchValue",
									},
								},
								&choiceExpr{
									pos: position{line: 169, col: 20, offset: 4710},
									alternatives: []interface{}{
										&notExpr{
											pos: position{line: 169, col: 20, offset: 4710},
											expr: &ruleRefExpr{
												pos:  position{line: 169, col: 21, offset: 4711},
												name: "ExprGuard",
											},
										},
										&andExpr{
											pos: position{line: 169, col: 33, offset: 4723},
											expr: &seqExpr{
												pos: position{line: 169, col: 35, offset: 4725},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 169, col: 35, offset: 4725},
														name: "_",
													},
													&ruleRefExpr{
														pos:  position{line: 169, col: 37, offset: 4727},
														name: "Glob",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 172, col: 5, offset: 4839},
						run: (*parser).callonSearchExpr15,
						expr: &seqExpr{
							pos: position{line: 172, col: 5, offset: 4839},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 172, col: 5, offset: 4839},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 172, col: 9, offset: 4843},
									expr: &ruleRefExpr{
										pos:  position{line: 172, col: 10, offset: 4844},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 175, col: 5, offset: 4960},
						name: "SearchPredicate",
					},
				},
			},
		},
		{
			name: "SearchPredicate",
			pos:  position{line: 177, col: 1, offset: 4977},
			expr: &choiceExpr{
				pos: position{line: 178, col: 5, offset: 4997},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 178, col: 5, offset: 4997},
						run: (*parser).callonSearchPredicate2,
						expr: &seqExpr{
							pos: position{line: 178, col: 5, offset: 4997},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 178, col: 5, offset: 4997},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 178, col: 9, offset: 5001},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 178, col: 22, offset: 5014},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 178, col: 25, offset: 5017},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 178, col: 28, offset: 5020},
										name: "Comparator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 178, col: 39, offset: 5031},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 178, col: 42, offset: 5034},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 178, col: 46, offset: 5038},
										name: "AdditiveExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 181, col: 6, offset: 5161},
						run: (*parser).callonSearchPredicate12,
						expr: &seqExpr{
							pos: position{line: 181, col: 6, offset: 5161},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 181, col: 6, offset: 5161},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 181, col: 12, offset: 5167},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 181, col: 21, offset: 5176},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 181, col: 26, offset: 5181},
										expr: &ruleRefExpr{
											pos:  position{line: 181, col: 27, offset: 5182},
											name: "Deref",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 185, col: 1, offset: 5254},
			expr: &choiceExpr{
				pos: position{line: 186, col: 5, offset: 5270},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 186, col: 5, offset: 5270},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 187, col: 5, offset: 5282},
						run: (*parser).callonSearchValue3,
						expr: &seqExpr{
							pos: position{line: 187, col: 5, offset: 5282},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 187, col: 5, offset: 5282},
									expr: &ruleRefExpr{
										pos:  position{line: 187, col: 6, offset: 5283},
										name: "RegexpPattern",
									},
								},
								&labeledExpr{
									pos:   position{line: 187, col: 20, offset: 5297},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 187, col: 22, offset: 5299},
										name: "KeyWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Glob",
			pos:  position{line: 191, col: 1, offset: 5407},
			expr: &actionExpr{
				pos: position{line: 192, col: 5, offset: 5416},
				run: (*parser).callonGlob1,
				expr: &labeledExpr{
					pos:   position{line: 192, col: 5, offset: 5416},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 192, col: 13, offset: 5424},
						name: "GlobPattern",
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 196, col: 1, offset: 5520},
			expr: &actionExpr{
				pos: position{line: 197, col: 5, offset: 5531},
				run: (*parser).callonRegexp1,
				expr: &labeledExpr{
					pos:   position{line: 197, col: 5, offset: 5531},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 197, col: 13, offset: 5539},
						name: "RegexpPattern",
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 203, col: 1, offset: 5665},
			expr: &choiceExpr{
				pos: position{line: 204, col: 5, offset: 5681},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 204, col: 5, offset: 5681},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 204, col: 5, offset: 5681},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 204, col: 5, offset: 5681},
									expr: &ruleRefExpr{
										pos:  position{line: 204, col: 5, offset: 5681},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 204, col: 16, offset: 5692},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 204, col: 21, offset: 5697},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 204, col: 33, offset: 5709},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 204, col: 39, offset: 5715},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 207, col: 5, offset: 5841},
						run: (*parser).callonAggregation10,
						expr: &seqExpr{
							pos: position{line: 207, col: 5, offset: 5841},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 207, col: 5, offset: 5841},
									expr: &ruleRefExpr{
										pos:  position{line: 207, col: 5, offset: 5841},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 207, col: 16, offset: 5852},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 207, col: 21, offset: 5857},
										name: "AggAssignments",
									},
								},
								&labeledExpr{
									pos:   position{line: 207, col: 36, offset: 5872},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 207, col: 41, offset: 5877},
										expr: &seqExpr{
											pos: position{line: 207, col: 42, offset: 5878},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 207, col: 42, offset: 5878},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 207, col: 44, offset: 5880},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 207, col: 58, offset: 5894},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 207, col: 64, offset: 5900},
										name: "LimitArg",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Summarize",
			pos:  position{line: 215, col: 1, offset: 6114},
			expr: &seqExpr{
				pos: position{line: 215, col: 13, offset: 6126},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 215, col: 13, offset: 6126},
						val:        "summarize",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 215, col: 25, offset: 6138},
						name: "_",
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 217, col: 1, offset: 6141},
			expr: &actionExpr{
				pos: position{line: 218, col: 5, offset: 6157},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 218, col: 5, offset: 6157},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 218, col: 5, offset: 6157},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 218, col: 13, offset: 6165},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 218, col: 15, offset: 6167},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 218, col: 23, offset: 6175},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 220, col: 1, offset: 6216},
			expr: &choiceExpr{
				pos: position{line: 221, col: 5, offset: 6229},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 221, col: 5, offset: 6229},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 221, col: 5, offset: 6229},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 221, col: 5, offset: 6229},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 221, col: 7, offset: 6231},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 221, col: 14, offset: 6238},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 221, col: 16, offset: 6240},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 221, col: 25, offset: 6249},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 221, col: 27, offset: 6251},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 221, col: 33, offset: 6257},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 222, col: 5, offset: 6288},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 222, col: 5, offset: 6288},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 227, col: 1, offset: 6548},
			expr: &choiceExpr{
				pos: position{line: 228, col: 5, offset: 6567},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 228, col: 5, offset: 6567},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 229, col: 5, offset: 6582},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 229, col: 5, offset: 6582},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 229, col: 10, offset: 6587},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 231, col: 1, offset: 6679},
			expr: &actionExpr{
				pos: position{line: 232, col: 5, offset: 6699},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 232, col: 5, offset: 6699},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 232, col: 5, offset: 6699},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 232, col: 11, offset: 6705},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 232, col: 26, offset: 6720},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 232, col: 31, offset: 6725},
								expr: &actionExpr{
									pos: position{line: 232, col: 32, offset: 6726},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 232, col: 32, offset: 6726},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 232, col: 32, offset: 6726},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 232, col: 35, offset: 6729},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 232, col: 39, offset: 6733},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 232, col: 42, offset: 6736},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 232, col: 47, offset: 6741},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignment",
			pos:  position{line: 236, col: 1, offset: 6863},
			expr: &choiceExpr{
				pos: position{line: 237, col: 5, offset: 6881},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 237, col: 5, offset: 6881},
						run: (*parser).callonAggAssignment2,
						expr: &seqExpr{
							pos: position{line: 237, col: 5, offset: 6881},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 237, col: 5, offset: 6881},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 237, col: 10, offset: 6886},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 237, col: 15, offset: 6891},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 237, col: 18, offset: 6894},
									val:        ":=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 237, col: 23, offset: 6899},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 237, col: 26, offset: 6902},
									label: "agg",
									expr: &ruleRefExpr{
										pos:  position{line: 237, col: 30, offset: 6906},
										name: "Agg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 240, col: 5, offset: 7010},
						run: (*parser).callonAggAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 240, col: 5, offset: 7010},
							label: "agg",
							expr: &ruleRefExpr{
								pos:  position{line: 240, col: 9, offset: 7014},
								name: "Agg",
							},
						},
					},
				},
			},
		},
		{
			name: "Agg",
			pos:  position{line: 244, col: 1, offset: 7114},
			expr: &actionExpr{
				pos: position{line: 245, col: 5, offset: 7122},
				run: (*parser).callonAgg1,
				expr: &seqExpr{
					pos: position{line: 245, col: 5, offset: 7122},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 245, col: 5, offset: 7122},
							expr: &ruleRefExpr{
								pos:  position{line: 245, col: 6, offset: 7123},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 245, col: 16, offset: 7133},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 245, col: 19, offset: 7136},
								name: "AggName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 245, col: 27, offset: 7144},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 245, col: 30, offset: 7147},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 245, col: 34, offset: 7151},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 245, col: 37, offset: 7154},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 245, col: 42, offset: 7159},
								expr: &choiceExpr{
									pos: position{line: 245, col: 43, offset: 7160},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 245, col: 43, offset: 7160},
											name: "OverExpr",
										},
										&ruleRefExpr{
											pos:  position{line: 245, col: 54, offset: 7171},
											name: "Expr",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 245, col: 61, offset: 7178},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 245, col: 64, offset: 7181},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 245, col: 68, offset: 7185},
							expr: &seqExpr{
								pos: position{line: 245, col: 70, offset: 7187},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 245, col: 70, offset: 7187},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 245, col: 73, offset: 7190},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 245, col: 78, offset: 7195},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 245, col: 84, offset: 7201},
								expr: &ruleRefExpr{
									pos:  position{line: 245, col: 84, offset: 7201},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggName",
			pos:  position{line: 253, col: 1, offset: 7392},
			expr: &choiceExpr{
				pos: position{line: 254, col: 5, offset: 7404},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 254, col: 5, offset: 7404},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 255, col: 5, offset: 7423},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 256, col: 5, offset: 7436},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 258, col: 1, offset: 7445},
			expr: &actionExpr{
				pos: position{line: 258, col: 15, offset: 7459},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 258, col: 15, offset: 7459},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 258, col: 15, offset: 7459},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 258, col: 17, offset: 7461},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 258, col: 25, offset: 7469},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 258, col: 27, offset: 7471},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 258, col: 32, offset: 7476},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignments",
			pos:  position{line: 260, col: 1, offset: 7512},
			expr: &actionExpr{
				pos: position{line: 261, col: 5, offset: 7531},
				run: (*parser).callonAggAssignments1,
				expr: &seqExpr{
					pos: position{line: 261, col: 5, offset: 7531},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 261, col: 5, offset: 7531},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 261, col: 11, offset: 7537},
								name: "AggAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 261, col: 25, offset: 7551},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 261, col: 30, offset: 7556},
								expr: &seqExpr{
									pos: position{line: 261, col: 31, offset: 7557},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 261, col: 31, offset: 7557},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 261, col: 34, offset: 7560},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 261, col: 38, offset: 7564},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 261, col: 41, offset: 7567},
											name: "AggAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 271, col: 1, offset: 7791},
			expr: &choiceExpr{
				pos: position{line: 272, col: 5, offset: 7804},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 272, col: 5, offset: 7804},
						name: "AssertOp",
					},
					&ruleRefExpr{
						pos:  position{line: 273, col: 5, offset: 7817},
						name: "SortOp",
					},
					&ruleRefExpr{
						pos:  position{line: 274, col: 5, offset: 7828},
						name: "TopOp",
					},
					&ruleRefExpr{
						pos:  position{line: 275, col: 5, offset: 7838},
						name: "CutOp",
					},
					&ruleRefExpr{
						pos:  position{line: 276, col: 5, offset: 7848},
						name: "DropOp",
					},
					&ruleRefExpr{
						pos:  position{line: 277, col: 5, offset: 7859},
						name: "HeadOp",
					},
					&ruleRefExpr{
						pos:  position{line: 278, col: 5, offset: 7870},
						name: "TailOp",
					},
					&ruleRefExpr{
						pos:  position{line: 279, col: 5, offset: 7881},
						name: "WhereOp",
					},
					&ruleRefExpr{
						pos:  position{line: 280, col: 5, offset: 7893},
						name: "UniqOp",
					},
					&ruleRefExpr{
						pos:  position{line: 281, col: 5, offset: 7904},
						name: "PutOp",
					},
					&ruleRefExpr{
						pos:  position{line: 282, col: 5, offset: 7914},
						name: "RenameOp",
					},
					&ruleRefExpr{
						pos:  position{line: 283, col: 5, offset: 7927},
						name: "FuseOp",
					},
					&ruleRefExpr{
						pos:  position{line: 284, col: 5, offset: 7938},
						name: "ShapeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 285, col: 5, offset: 7950},
						name: "JoinOp",
					},
					&ruleRefExpr{
						pos:  position{line: 286, col: 5, offset: 7961},
						name: "SampleOp",
					},
					&ruleRefExpr{
						pos:  position{line: 287, col: 5, offset: 7974},
						name: "SQLOp",
					},
					&ruleRefExpr{
						pos:  position{line: 288, col: 5, offset: 7984},
						name: "FromOp",
					},
					&ruleRefExpr{
						pos:  position{line: 289, col: 5, offset: 7995},
						name: "PassOp",
					},
					&ruleRefExpr{
						pos:  position{line: 290, col: 5, offset: 8006},
						name: "ExplodeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 291, col: 5, offset: 8020},
						name: "MergeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 292, col: 5, offset: 8032},
						name: "OverOp",
					},
					&ruleRefExpr{
						pos:  position{line: 293, col: 5, offset: 8043},
						name: "YieldOp",
					},
					&ruleRefExpr{
						pos:  position{line: 294, col: 5, offset: 8055},
						name: "LoadOp",
					},
				},
			},
		},
		{
			name: "AssertOp",
			pos:  position{line: 296, col: 1, offset: 8063},
			expr: &actionExpr{
				pos: position{line: 297, col: 5, offset: 8076},
				run: (*parser).callonAssertOp1,
				expr: &seqExpr{
					pos: position{line: 297, col: 5, offset: 8076},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 297, col: 5, offset: 8076},
							val:        "assert",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 297, col: 14, offset: 8085},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 297, col: 16, offset: 8087},
							label: "expr",
							expr: &actionExpr{
								pos: position{line: 297, col: 22, offset: 8093},
								run: (*parser).callonAssertOp6,
								expr: &labeledExpr{
									pos:   position{line: 297, col: 22, offset: 8093},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 297, col: 24, offset: 8095},
										name: "Expr",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortOp",
			pos:  position{line: 333, col: 1, offset: 9446},
			expr: &actionExpr{
				pos: position{line: 334, col: 5, offset: 9457},
				run: (*parser).callonSortOp1,
				expr: &seqExpr{
					pos: position{line: 334, col: 5, offset: 9457},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 334, col: 5, offset: 9457},
							val:        "sort",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 334, col: 12, offset: 9464},
							expr: &ruleRefExpr{
								pos:  position{line: 334, col: 13, offset: 9465},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 334, col: 18, offset: 9470},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 334, col: 23, offset: 9475},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 334, col: 32, offset: 9484},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 334, col: 37, offset: 9489},
								expr: &actionExpr{
									pos: position{line: 334, col: 38, offset: 9490},
									run: (*parser).callonSortOp10,
									expr: &seqExpr{
										pos: position{line: 334, col: 38, offset: 9490},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 334, col: 38, offset: 9490},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 334, col: 40, offset: 9492},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 334, col: 42, offset: 9494},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 348, col: 1, offset: 9905},
			expr: &actionExpr{
				pos: position{line: 348, col: 12, offset: 9916},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 348, col: 12, offset: 9916},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 348, col: 17, offset: 9921},
						expr: &actionExpr{
							pos: position{line: 348, col: 18, offset: 9922},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 348, col: 18, offset: 9922},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 348, col: 18, offset: 9922},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 348, col: 20, offset: 9924},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 348, col: 22, offset: 9926},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 350, col: 1, offset: 9983},
			expr: &choiceExpr{
				pos: position{line: 351, col: 5, offset: 9995},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 351, col: 5, offset: 9995},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 351, col: 5, offset: 9995},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 352, col: 5, offset: 10070},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 352, col: 5, offset: 10070},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 352, col: 5, offset: 10070},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 352, col: 14, offset: 10079},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 352, col: 16, offset: 10081},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 352, col: 23, offset: 10088},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 352, col: 24, offset: 10089},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 352, col: 24, offset: 10089},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 352, col: 34, offset: 10099},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopOp",
			pos:  position{line: 354, col: 1, offset: 10212},
			expr: &actionExpr{
				pos: position{line: 355, col: 5, offset: 10222},
				run: (*parser).callonTopOp1,
				expr: &seqExpr{
					pos: position{line: 355, col: 5, offset: 10222},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 355, col: 5, offset: 10222},
							val:        "top",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 355, col: 11, offset: 10228},
							expr: &ruleRefExpr{
								pos:  position{line: 355, col: 12, offset: 10229},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 355, col: 17, offset: 10234},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 355, col: 23, offset: 10240},
								expr: &actionExpr{
									pos: position{line: 355, col: 24, offset: 10241},
									run: (*parser).callonTopOp8,
									expr: &seqExpr{
										pos: position{line: 355, col: 24, offset: 10241},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 355, col: 24, offset: 10241},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 355, col: 26, offset: 10243},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 355, col: 28, offset: 10245},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 355, col: 53, offset: 10270},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 355, col: 59, offset: 10276},
								expr: &seqExpr{
									pos: position{line: 355, col: 60, offset: 10277},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 355, col: 60, offset: 10277},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 355, col: 62, offset: 10279},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 355, col: 73, offset: 10290},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 355, col: 80, offset: 10297},
								expr: &actionExpr{
									pos: position{line: 355, col: 81, offset: 10298},
									run: (*parser).callonTopOp20,
									expr: &seqExpr{
										pos: position{line: 355, col: 81, offset: 10298},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 355, col: 81, offset: 10298},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 355, col: 83, offset: 10300},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 355, col: 85, offset: 10302},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutOp",
			pos:  position{line: 369, col: 1, offset: 10637},
			expr: &actionExpr{
				pos: position{line: 370, col: 5, offset: 10647},
				run: (*parser).callonCutOp1,
				expr: &seqExpr{
					pos: position{line: 370, col: 5, offset: 10647},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 370, col: 5, offset: 10647},
							val:        "cut",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 370, col: 11, offset: 10653},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 370, col: 13, offset: 10655},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 370, col: 18, offset: 10660},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropOp",
			pos:  position{line: 374, col: 1, offset: 10755},
			expr: &actionExpr{
				pos: position{line: 375, col: 5, offset: 10766},
				run: (*parser).callonDropOp1,
				expr: &seqExpr{
					pos: position{line: 375, col: 5, offset: 10766},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 375, col: 5, offset: 10766},
							val:        "drop",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 375, col: 12, offset: 10773},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 375, col: 14, offset: 10775},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 375, col: 19, offset: 10780},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadOp",
			pos:  position{line: 379, col: 1, offset: 10871},
			expr: &choiceExpr{
				pos: position{line: 380, col: 5, offset: 10882},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 380, col: 5, offset: 10882},
						run: (*parser).callonHeadOp2,
						expr: &seqExpr{
							pos: position{line: 380, col: 5, offset: 10882},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 380, col: 5, offset: 10882},
									val:        "head",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 380, col: 12, offset: 10889},
									name: "_",
								},
								&notExpr{
									pos: position{line: 380, col: 14, offset: 10891},
									expr: &ruleRefExpr{
										pos:  position{line: 380, col: 15, offset: 10892},
										name: "EndOfOp",
									},
								},
								&labeledExpr{
									pos:   position{line: 380, col: 23, offset: 10900},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 380, col: 29, offset: 10906},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 381, col: 5, offset: 10986},
						run: (*parser).callonHeadOp10,
						expr: &litMatcher{
							pos:        position{line: 381, col: 5, offset: 10986},
							val:        "head",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TailOp",
			pos:  position{line: 383, col: 1, offset: 11133},
			expr: &choiceExpr{
				pos: position{line: 384, col: 5, offset: 11144},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 384, col: 5, offset: 11144},
						run: (*parser).callonTailOp2,
						expr: &seqExpr{
							pos: position{line: 384, col: 5, offset: 11144},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 384, col: 5, offset: 11144},
									val:        "tail",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 384, col: 12, offset: 11151},
									name: "_",
								},
								&notExpr{
									pos: position{line: 384, col: 14, offset: 11153},
									expr: &ruleRefExpr{
										pos:  position{line: 384, col: 15, offset: 11154},
										name: "EndOfOp",
									},
								},
								&labeledExpr{
									pos:   position{line: 384, col: 23, offset: 11162},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 384, col: 29, offset: 11168},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 385, col: 5, offset: 11248},
						run: (*parser).callonTailOp10,
						expr: &litMatcher{
							pos:        position{line: 385, col: 5, offset: 11248},
							val:        "tail",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "WhereOp",
			pos:  position{line: 387, col: 1, offset: 11395},
			expr: &actionExpr{
				pos: position{line: 388, col: 5, offset: 11407},
				run: (*parser).callonWhereOp1,
				expr: &seqExpr{
					pos: position{line: 388, col: 5, offset: 11407},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 388, col: 5, offset: 11407},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 388, col: 13, offset: 11415},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 388, col: 15, offset: 11417},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 388, col: 20, offset: 11422},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "UniqOp",
			pos:  position{line: 392, col: 1, offset: 11508},
			expr: &choiceExpr{
				pos: position{line: 393, col: 5, offset: 11519},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 393, col: 5, offset: 11519},
						run: (*parser).callonUniqOp2,
						expr: &seqExpr{
							pos: position{line: 393, col: 5, offset: 11519},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 393, col: 5, offset: 11519},
									val:        "uniq",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 393, col: 12, offset: 11526},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 393, col: 14, offset: 11528},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 396, col: 5, offset: 11617},
						run: (*parser).callonUniqOp7,
						expr: &litMatcher{
							pos:        position{line: 396, col: 5, offset: 11617},
							val:        "uniq",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PutOp",
			pos:  position{line: 400, col: 1, offset: 11706},
			expr: &actionExpr{
				pos: position{line: 401, col: 5, offset: 11716},
				run: (*parser).callonPutOp1,
				expr: &seqExpr{
					pos: position{line: 401, col: 5, offset: 11716},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 401, col: 5, offset: 11716},
							val:        "put",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 401, col: 11, offset: 11722},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 401, col: 13, offset: 11724},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 401, col: 18, offset: 11729},
								name: "Assignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameOp",
			pos:  position{line: 405, col: 1, offset: 11820},
			expr: &actionExpr{
				pos: position{line: 406, col: 5, offset: 11833},
				run: (*parser).callonRenameOp1,
				expr: &seqExpr{
					pos: position{line: 406, col: 5, offset: 11833},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 406, col: 5, offset: 11833},
							val:        "rename",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 406, col: 14, offset: 11842},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 406, col: 16, offset: 11844},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 406, col: 22, offset: 11850},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 406, col: 33, offset: 11861},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 406, col: 38, offset: 11866},
								expr: &actionExpr{
									pos: position{line: 406, col: 39, offset: 11867},
									run: (*parser).callonRenameOp9,
									expr: &seqExpr{
										pos: position{line: 406, col: 39, offset: 11867},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 406, col: 39, offset: 11867},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 406, col: 42, offset: 11870},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 406, col: 46, offset: 11874},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 406, col: 49, offset: 11877},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 406, col: 52, offset: 11880},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseOp",
			pos:  position{line: 414, col: 1, offset: 12287},
			expr: &actionExpr{
				pos: position{line: 415, col: 5, offset: 12298},
				run: (*parser).callonFuseOp1,
				expr: &seqExpr{
					pos: position{line: 415, col: 5, offset: 12298},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 415, col: 5, offset: 12298},
							val:        "fuse",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 415, col: 12, offset: 12305},
							expr: &seqExpr{
								pos: position{line: 415, col: 14, offset: 12307},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 415, col: 14, offset: 12307},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 415, col: 17, offset: 12310},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 415, col: 22, offset: 12315},
							expr: &ruleRefExpr{
								pos:  position{line: 415, col: 23, offset: 12316},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "ShapeOp",
			pos:  position{line: 419, col: 1, offset: 12387},
			expr: &actionExpr{
				pos: position{line: 420, col: 5, offset: 12399},
				run: (*parser).callonShapeOp1,
				expr: &seqExpr{
					pos: position{line: 420, col: 5, offset: 12399},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 420, col: 5, offset: 12399},
							val:        "shape",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 420, col: 13, offset: 12407},
							expr: &seqExpr{
								pos: position{line: 420, col: 15, offset: 12409},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 420, col: 15, offset: 12409},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 420, col: 18, offset: 12412},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 420, col: 23, offset: 12417},
							expr: &ruleRefExpr{
								pos:  position{line: 420, col: 24, offset: 12418},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "JoinOp",
			pos:  position{line: 424, col: 1, offset: 12490},
			expr: &actionExpr{
				pos: position{line: 425, col: 5, offset: 12501},
				run: (*parser).callonJoinOp1,
				expr: &seqExpr{
					pos: position{line: 425, col: 5, offset: 12501},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 425, col: 5, offset: 12501},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 425, col: 11, offset: 12507},
								name: "JoinStyle",
							},
						},
						&litMatcher{
							pos:        position{line: 425, col: 21, offset: 12517},
							val:        "join",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 425, col: 28, offset: 12524},
							label: "rightInput",
							expr: &ruleRefExpr{
								pos:  position{line: 425, col: 39, offset: 12535},
								name: "JoinRightInput",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 425, col: 54, offset: 12550},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 425, col: 57, offset: 12553},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 425, col: 59, offset: 12555},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 425, col: 63, offset: 12559},
								name: "JoinKey",
							},
						},
						&labeledExpr{
							pos:   position{line: 425, col: 71, offset: 12567},
							label: "optKey",
							expr: &zeroOrOneExpr{
								pos: position{line: 425, col: 78, offset: 12574},
								expr: &seqExpr{
									pos: position{line: 425, col: 79, offset: 12575},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 425, col: 79, offset: 12575},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 425, col: 82, offset: 12578},
											val:        "=",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 425, col: 86, offset: 12582},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 425, col: 89, offset: 12585},
											name: "JoinKey",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 425, col: 99, offset: 12595},
							label: "optArgs",
							expr: &zeroOrOneExpr{
								pos: position{line: 425, col: 107, offset: 12603},
								expr: &seqExpr{
									pos: position{line: 425, col: 108, offset: 12604},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 425, col: 108, offset: 12604},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 425, col: 110, offset: 12606},
											name: "FlexAssignments",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinStyle",
			pos:  position{line: 436, col: 1, offset: 12962},
			expr: &choiceExpr{
				pos: position{line: 437, col: 5, offset: 12976},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 437, col: 5, offset: 12976},
						run: (*parser).callonJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 437, col: 5, offset: 12976},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 437, col: 5, offset: 12976},
									val:        "anti",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 437, col: 12, offset: 12983},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 438, col: 5, offset: 13013},
						run: (*parser).callonJoinStyle6,
						expr: &seqExpr{
							pos: position{line: 438, col: 5, offset: 13013},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 438, col: 5, offset: 13013},
									val:        "inner",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 438, col: 13, offset: 13021},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 439, col: 5, offset: 13051},
						run: (*parser).callonJoinStyle10,
						expr: &seqExpr{
							pos: position{line: 439, col: 5, offset: 13051},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 439, col: 5, offset: 13051},
									val:        "left",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 439, col: 13, offset: 13059},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 440, col: 5, offset: 13088},
						run: (*parser).callonJoinStyle14,
						expr: &seqExpr{
							pos: position{line: 440, col: 5, offset: 13088},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 440, col: 5, offset: 13088},
									val:        "right",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 440, col: 13, offset: 13096},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 441, col: 5, offset: 13126},
						run: (*parser).callonJoinStyle18,
						expr: &litMatcher{
							pos:        position{line: 441, col: 5, offset: 13126},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "JoinRightInput",
			pos:  position{line: 443, col: 1, offset: 13161},
			expr: &choiceExpr{
				pos: position{line: 444, col: 5, offset: 13180},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 444, col: 5, offset: 13180},
						run: (*parser).callonJoinRightInput2,
						expr: &seqExpr{
							pos: position{line: 444, col: 5, offset: 13180},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 444, col: 5, offset: 13180},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 444, col: 8, offset: 13183},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 444, col: 12, offset: 13187},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 444, col: 15, offset: 13190},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 444, col: 17, offset: 13192},
										name: "Seq",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 444, col: 21, offset: 13196},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 444, col: 24, offset: 13199},
									val:        ")",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 444, col: 28, offset: 13203},
									name: "__",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 445, col: 5, offset: 13228},
						run: (*parser).callonJoinRightInput12,
						expr: &ruleRefExpr{
							pos:  position{line: 445, col: 5, offset: 13228},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 447, col: 1, offset: 13251},
			expr: &choiceExpr{
				pos: position{line: 448, col: 5, offset: 13263},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 448, col: 5, offset: 13263},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 449, col: 5, offset: 13272},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 449, col: 5, offset: 13272},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 449, col: 5, offset: 13272},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 449, col: 9, offset: 13276},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 449, col: 14, offset: 13281},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 449, col: 19, offset: 13286},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SampleOp",
			pos:  position{line: 451, col: 1, offset: 13312},
			expr: &actionExpr{
				pos: position{line: 452, col: 5, offset: 13325},
				run: (*parser).callonSampleOp1,
				expr: &seqExpr{
					pos: position{line: 452, col: 5, offset: 13325},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 452, col: 5, offset: 13325},
							val:        "sample",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 452, col: 14, offset: 13334},
							expr: &ruleRefExpr{
								pos:  position{line: 452, col: 15, offset: 13335},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 452, col: 20, offset: 13340},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 452, col: 22, offset: 13342},
								name: "SampleExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "OpAssignment",
			pos:  position{line: 459, col: 1, offset: 13690},
			expr: &actionExpr{
				pos: position{line: 460, col: 5, offset: 13707},
				run: (*parser).callonOpAssignment1,
				expr: &labeledExpr{
					pos:   position{line: 460, col: 5, offset: 13707},
					label: "a",
					expr: &ruleRefExpr{
						pos:  position{line: 460, col: 7, offset: 13709},
						name: "Assignments",
					},
				},
			},
		},
		{
			name: "SampleExpr",
			pos:  position{line: 464, col: 1, offset: 13809},
			expr: &choiceExpr{
				pos: position{line: 465, col: 5, offset: 13824},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 465, col: 5, offset: 13824},
						run: (*parser).callonSampleExpr2,
						expr: &seqExpr{
							pos: position{line: 465, col: 5, offset: 13824},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 465, col: 5, offset: 13824},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 465, col: 7, offset: 13826},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 465, col: 12, offset: 13831},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 466, col: 5, offset: 13861},
						run: (*parser).callonSampleExpr7,
						expr: &litMatcher{
							pos:        position{line: 466, col: 5, offset: 13861},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LoadOp",
			pos:  position{line: 468, col: 1, offset: 13934},
			expr: &actionExpr{
				pos: position{line: 469, col: 5, offset: 13945},
				run: (*parser).callonLoadOp1,
				expr: &seqExpr{
					pos: position{line: 469, col: 5, offset: 13945},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 469, col: 5, offset: 13945},
							val:        "load",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 469, col: 12, offset: 13952},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 469, col: 14, offset: 13954},
							label: "pool",
							expr: &ruleRefExpr{
								pos:  position{line: 469, col: 19, offset: 13959},
								name: "PoolNameString",
							},
						},
						&labeledExpr{
							pos:   position{line: 469, col: 34, offset: 13974},
							label: "branch",
							expr: &zeroOrOneExpr{
								pos: position{line: 469, col: 41, offset: 13981},
								expr: &ruleRefExpr{
									pos:  position{line: 469, col: 41, offset: 13981},
									name: "PoolBranch",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 469, col: 53, offset: 13993},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 469, col: 60, offset: 14000},
								expr: &ruleRefExpr{
									pos:  position{line: 469, col: 60, offset: 14000},
									name: "AuthorArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 469, col: 71, offset: 14011},
							label: "message",
							expr: &zeroOrOneExpr{
								pos: position{line: 469, col: 79, offset: 14019},
								expr: &ruleRefExpr{
									pos:  position{line: 469, col: 79, offset: 14019},
									name: "MessageArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 469, col: 91, offset: 14031},
							label: "meta",
							expr: &zeroOrOneExpr{
								pos: position{line: 469, col: 96, offset: 14036},
								expr: &ruleRefExpr{
									pos:  position{line: 469, col: 96, offset: 14036},
									name: "MetaArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AuthorArg",
			pos:  position{line: 473, col: 1, offset: 14195},
			expr: &actionExpr{
				pos: position{line: 474, col: 5, offset: 14209},
				run: (*parser).callonAuthorArg1,
				expr: &seqExpr{
					pos: position{line: 474, col: 5, offset: 14209},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 474, col: 5, offset: 14209},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 474, col: 7, offset: 14211},
							val:        "author",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 474, col: 16, offset: 14220},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 474, col: 18, offset: 14222},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 474, col: 22, offset: 14226},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "MessageArg",
			pos:  position{line: 476, col: 1, offset: 14260},
			expr: &actionExpr{
				pos: position{line: 477, col: 5, offset: 14275},
				run: (*parser).callonMessageArg1,
				expr: &seqExpr{
					pos: position{line: 477, col: 5, offset: 14275},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 477, col: 5, offset: 14275},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 477, col: 7, offset: 14277},
							val:        "message",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 477, col: 17, offset: 14287},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 477, col: 19, offset: 14289},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 477, col: 23, offset: 14293},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "MetaArg",
			pos:  position{line: 479, col: 1, offset: 14327},
			expr: &actionExpr{
				pos: position{line: 480, col: 5, offset: 14339},
				run: (*parser).callonMetaArg1,
				expr: &seqExpr{
					pos: position{line: 480, col: 5, offset: 14339},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 480, col: 5, offset: 14339},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 480, col: 7, offset: 14341},
							val:        "meta",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 480, col: 14, offset: 14348},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 480, col: 16, offset: 14350},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 480, col: 20, offset: 14354},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolBranch",
			pos:  position{line: 482, col: 1, offset: 14388},
			expr: &actionExpr{
				pos: position{line: 483, col: 5, offset: 14403},
				run: (*parser).callonPoolBranch1,
				expr: &seqExpr{
					pos: position{line: 483, col: 5, offset: 14403},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 483, col: 5, offset: 14403},
							val:        "@",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 483, col: 9, offset: 14407},
							label: "branch",
							expr: &choiceExpr{
								pos: position{line: 483, col: 17, offset: 14415},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 483, col: 17, offset: 14415},
										name: "PoolIdentifier",
									},
									&ruleRefExpr{
										pos:  position{line: 483, col: 34, offset: 14432},
										name: "QuotedString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FromOp",
			pos:  position{line: 485, col: 1, offset: 14470},
			expr: &actionExpr{
				pos: position{line: 486, col: 5, offset: 14481},
				run: (*parser).callonFromOp1,
				expr: &labeledExpr{
					pos:   position{line: 486, col: 5, offset: 14481},
					label: "source",
					expr: &ruleRefExpr{
						pos:  position{line: 486, col: 12, offset: 14488},
						name: "FromAny",
					},
				},
			},
		},
		{
			name: "FromAny",
			pos:  position{line: 490, col: 1, offset: 14646},
			expr: &choiceExpr{
				pos: position{line: 491, col: 5, offset: 14658},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 491, col: 5, offset: 14658},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 492, col: 5, offset: 14667},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 493, col: 5, offset: 14675},
						name: "From",
					},
				},
			},
		},
		{
			name: "File",
			pos:  position{line: 495, col: 1, offset: 14681},
			expr: &actionExpr{
				pos: position{line: 496, col: 5, offset: 14690},
				run: (*parser).callonFile1,
				expr: &seqExpr{
					pos: position{line: 496, col: 5, offset: 14690},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 496, col: 5, offset: 14690},
							val:        "file",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 496, col: 12, offset: 14697},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 496, col: 14, offset: 14699},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 496, col: 19, offset: 14704},
								name: "Path",
							},
						},
						&labeledExpr{
							pos:   position{line: 496, col: 24, offset: 14709},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 496, col: 31, offset: 14716},
								expr: &ruleRefExpr{
									pos:  position{line: 496, col: 31, offset: 14716},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 496, col: 42, offset: 14727},
							label: "sort_key",
							expr: &zeroOrOneExpr{
								pos: position{line: 496, col: 51, offset: 14736},
								expr: &ruleRefExpr{
									pos:  position{line: 496, col: 51, offset: 14736},
									name: "SortKeyArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "From",
			pos:  position{line: 500, col: 1, offset: 14868},
			expr: &actionExpr{
				pos: position{line: 501, col: 5, offset: 14877},
				run: (*parser).callonFrom1,
				expr: &seqExpr{
					pos: position{line: 501, col: 5, offset: 14877},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 501, col: 5, offset: 14877},
							val:        "from",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 501, col: 12, offset: 14884},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 501, col: 14, offset: 14886},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 501, col: 19, offset: 14891},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "Pool",
			pos:  position{line: 503, col: 1, offset: 14922},
			expr: &actionExpr{
				pos: position{line: 504, col: 5, offset: 14931},
				run: (*parser).callonPool1,
				expr: &seqExpr{
					pos: position{line: 504, col: 5, offset: 14931},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 504, col: 5, offset: 14931},
							val:        "pool",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 504, col: 12, offset: 14938},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 504, col: 14, offset: 14940},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 504, col: 19, offset: 14945},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolBody",
			pos:  position{line: 506, col: 1, offset: 14976},
			expr: &actionExpr{
				pos: position{line: 507, col: 5, offset: 14989},
				run: (*parser).callonPoolBody1,
				expr: &seqExpr{
					pos: position{line: 507, col: 5, offset: 14989},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 507, col: 5, offset: 14989},
							label: "spec",
							expr: &ruleRefExpr{
								pos:  position{line: 507, col: 10, offset: 14994},
								name: "PoolSpec",
							},
						},
						&labeledExpr{
							pos:   position{line: 507, col: 19, offset: 15003},
							label: "at",
							expr: &zeroOrOneExpr{
								pos: position{line: 507, col: 22, offset: 15006},
								expr: &ruleRefExpr{
									pos:  position{line: 507, col: 22, offset: 15006},
									name: "PoolAt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Get",
			pos:  position{line: 511, col: 1, offset: 15104},
			expr: &actionExpr{
				pos: position{line: 512, col: 5, offset: 15112},
				run: (*parser).callonGet1,
				expr: &seqExpr{
					pos: position{line: 512, col: 5, offset: 15112},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 512, col: 5, offset: 15112},
							val:        "get",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 512, col: 11, offset: 15118},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 512, col: 13, offset: 15120},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 512, col: 17, offset: 15124},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 512, col: 21, offset: 15128},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 512, col: 28, offset: 15135},
								expr: &ruleRefExpr{
									pos:  position{line: 512, col: 28, offset: 15135},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 512, col: 39, offset: 15146},
							label: "sort_key",
							expr: &zeroOrOneExpr{
								pos: position{line: 512, col: 48, offset: 15155},
								expr: &ruleRefExpr{
									pos:  position{line: 512, col: 48, offset: 15155},
									name: "SortKeyArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 512, col: 60, offset: 15167},
							label: "method",
							expr: &zeroOrOneExpr{
								pos: position{line: 512, col: 67, offset: 15174},
								expr: &ruleRefExpr{
									pos:  position{line: 512, col: 67, offset: 15174},
									name: "MethodArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 512, col: 78, offset: 15185},
							label: "headers",
							expr: &zeroOrOneExpr{
								pos: position{line: 512, col: 86, offset: 15193},
								expr: &ruleRefExpr{
									pos:  position{line: 512, col: 86, offset: 15193},
									name: "HeadersArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 512, col: 98, offset: 15205},
							label: "body",
							expr: &zeroOrOneExpr{
								pos: position{line: 512, col: 103, offset: 15210},
								expr: &ruleRefExpr{
									pos:  position{line: 512, col: 103, offset: 15210},
									name: "BodyArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 531, col: 1, offset: 15500},
			expr: &actionExpr{
				pos: position{line: 531, col: 7, offset: 15506},
				run: (*parser).callonURL1,
				expr: &seqExpr{
					pos: position{line: 531, col: 7, offset: 15506},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 531, col: 8, offset: 15507},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 531, col: 8, offset: 15507},
									val:        "http:",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 531, col: 18, offset: 15517},
									val:        "https:",
									ignoreCase: false,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 531, col: 28, offset: 15527},
							name: "Path",
						},
					},
				},
			},
		},
		{
			name: "MethodArg",
			pos:  position{line: 533, col: 1, offset: 15564},
			expr: &actionExpr{
				pos: position{line: 533, col: 13, offset: 15576},
				run: (*parser).callonMethodArg1,
				expr: &seqExpr{
					pos: position{line: 533, col: 13, offset: 15576},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 533, col: 13, offset: 15576},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 533, col: 15, offset: 15578},
							val:        "method",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 533, col: 24, offset: 15587},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 533, col: 26, offset: 15589},
							label: "v",
							expr: &choiceExpr{
								pos: position{line: 533, col: 29, offset: 15592},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 533, col: 29, offset: 15592},
										name: "IdentifierName",
									},
									&ruleRefExpr{
										pos:  position{line: 533, col: 46, offset: 15609},
										name: "QuotedString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "HeadersArg",
			pos:  position{line: 535, col: 1, offset: 15642},
			expr: &actionExpr{
				pos: position{line: 535, col: 14, offset: 15655},
				run: (*parser).callonHeadersArg1,
				expr: &seqExpr{
					pos: position{line: 535, col: 14, offset: 15655},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 535, col: 14, offset: 15655},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 535, col: 16, offset: 15657},
							val:        "headers",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 535, col: 26, offset: 15667},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 535, col: 28, offset: 15669},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 535, col: 30, offset: 15671},
								name: "Record",
							},
						},
					},
				},
			},
		},
		{
			name: "BodyArg",
			pos:  position{line: 537, col: 1, offset: 15697},
			expr: &actionExpr{
				pos: position{line: 537, col: 11, offset: 15707},
				run: (*parser).callonBodyArg1,
				expr: &seqExpr{
					pos: position{line: 537, col: 11, offset: 15707},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 537, col: 11, offset: 15707},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 537, col: 13, offset: 15709},
							val:        "body",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 537, col: 20, offset: 15716},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 537, col: 22, offset: 15718},
							label: "v",
							expr: &choiceExpr{
								pos: position{line: 537, col: 25, offset: 15721},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 537, col: 25, offset: 15721},
										name: "IdentifierName",
									},
									&ruleRefExpr{
										pos:  position{line: 537, col: 42, offset: 15738},
										name: "QuotedString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Path",
			pos:  position{line: 539, col: 1, offset: 15771},
			expr: &choiceExpr{
				pos: position{line: 540, col: 5, offset: 15780},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 540, col: 5, offset: 15780},
						run: (*parser).callonPath2,
						expr: &labeledExpr{
							pos:   position{line: 540, col: 5, offset: 15780},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 540, col: 7, offset: 15782},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 541, col: 5, offset: 15817},
						run: (*parser).callonPath5,
						expr: &oneOrMoreExpr{
							pos: position{line: 541, col: 5, offset: 15817},
							expr: &charClassMatcher{
								pos:        position{line: 541, col: 5, offset: 15817},
								val:        "[0-9a-zA-Z!@$%^&*_=<>,./?:[\\]{}~+-]",
								chars:      []rune{'!', '@', '$', '%', '^', '&', '*', '_', '=', '<', '>', ',', '.', '/', '?', ':', '[', ']', '{', '}', '~', '+', '-'},
								ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PoolAt",
			pos:  position{line: 544, col: 1, offset: 15919},
			expr: &actionExpr{
				pos: position{line: 545, col: 5, offset: 15930},
				run: (*parser).callonPoolAt1,
				expr: &seqExpr{
					pos: position{line: 545, col: 5, offset: 15930},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 545, col: 5, offset: 15930},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 545, col: 7, offset: 15932},
							val:        "at",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 545, col: 12, offset: 15937},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 545, col: 14, offset: 15939},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 545, col: 17, offset: 15942},
								name: "KSUID",
							},
						},
					},
				},
			},
		},
		{
			name: "KSUID",
			pos:  position{line: 548, col: 1, offset: 16008},
			expr: &actionExpr{
				pos: position{line: 548, col: 9, offset: 16016},
				run: (*parser).callonKSUID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 548, col: 9, offset: 16016},
					expr: &charClassMatcher{
						pos:        position{line: 548, col: 10, offset: 16017},
						val:        "[0-9a-zA-Z]",
						ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "PoolSpec",
			pos:  position{line: 550, col: 1, offset: 16063},
			expr: &choiceExpr{
				pos: position{line: 551, col: 5, offset: 16076},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 551, col: 5, offset: 16076},
						run: (*parser).callonPoolSpec2,
						expr: &seqExpr{
							pos: position{line: 551, col: 5, offset: 16076},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 551, col: 5, offset: 16076},
									label: "pool",
									expr: &ruleRefExpr{
										pos:  position{line: 551, col: 10, offset: 16081},
										name: "PoolName",
									},
								},
								&labeledExpr{
									pos:   position{line: 551, col: 19, offset: 16090},
									label: "commit",
									expr: &zeroOrOneExpr{
										pos: position{line: 551, col: 26, offset: 16097},
										expr: &ruleRefExpr{
											pos:  position{line: 551, col: 26, offset: 16097},
											name: "PoolCommit",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 551, col: 38, offset: 16109},
									label: "meta",
									expr: &zeroOrOneExpr{
										pos: position{line: 551, col: 43, offset: 16114},
										expr: &ruleRefExpr{
											pos:  position{line: 551, col: 43, offset: 16114},
											name: "PoolMeta",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 551, col: 53, offset: 16124},
									label: "tap",
									expr: &ruleRefExpr{
										pos:  position{line: 551, col: 57, offset: 16128},
										name: "TapArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 554, col: 5, offset: 16246},
						run: (*parser).callonPoolSpec14,
						expr: &labeledExpr{
							pos:   position{line: 554, col: 5, offset: 16246},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 554, col: 10, offset: 16251},
								name: "PoolMeta",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolCommit",
			pos:  position{line: 558, col: 1, offset: 16352},
			expr: &actionExpr{
				pos: position{line: 559, col: 5, offset: 16367},
				run: (*parser).callonPoolCommit1,
				expr: &seqExpr{
					pos: position{line: 559, col: 5, offset: 16367},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 559, col: 5, offset: 16367},
							val:        "@",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 559, col: 9, offset: 16371},
							label: "commit",
							expr: &ruleRefExpr{
								pos:  position{line: 559, col: 16, offset: 16378},
								name: "PoolNameString",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolMeta",
			pos:  position{line: 561, col: 1, offset: 16417},
			expr: &actionExpr{
				pos: position{line: 562, col: 5, offset: 16430},
				run: (*parser).callonPoolMeta1,
				expr: &seqExpr{
					pos: position{line: 562, col: 5, offset: 16430},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 562, col: 5, offset: 16430},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 562, col: 9, offset: 16434},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 562, col: 14, offset: 16439},
								name: "PoolIdentifier",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolName",
			pos:  position{line: 564, col: 1, offset: 16476},
			expr: &choiceExpr{
				pos: position{line: 565, col: 5, offset: 16489},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 565, col: 5, offset: 16489},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 566, col: 5, offset: 16500},
						name: "Glob",
					},
					&actionExpr{
						pos: position{line: 567, col: 5, offset: 16509},
						run: (*parser).callonPoolName4,
						expr: &seqExpr{
							pos: position{line: 567, col: 5, offset: 16509},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 567, col: 5, offset: 16509},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 567, col: 9, offset: 16513},
									expr: &ruleRefExpr{
										pos:  position{line: 567, col: 10, offset: 16514},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 568, col: 5, offset: 16599},
						run: (*parser).callonPoolName9,
						expr: &labeledExpr{
							pos:   position{line: 568, col: 5, offset: 16599},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 568, col: 10, offset: 16604},
								name: "PoolNameString",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolNameString",
			pos:  position{line: 570, col: 1, offset: 16691},
			expr: &choiceExpr{
				pos: position{line: 571, col: 5, offset: 16710},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 571, col: 5, offset: 16710},
						name: "PoolIdentifier",
					},
					&ruleRefExpr{
						pos:  position{line: 572, col: 5, offset: 16729},
						name: "KSUID",
					},
					&ruleRefExpr{
						pos:  position{line: 573, col: 5, offset: 16739},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "PoolIdentifier",
			pos:  position{line: 575, col: 1, offset: 16753},
			expr: &actionExpr{
				pos: position{line: 576, col: 5, offset: 16772},
				run: (*parser).callonPoolIdentifier1,
				expr: &seqExpr{
					pos: position{line: 576, col: 5, offset: 16772},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 576, col: 6, offset: 16773},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 576, col: 6, offset: 16773},
									name: "IdentifierStart",
								},
								&litMatcher{
									pos:        position{line: 576, col: 24, offset: 16791},
									val:        ".",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 576, col: 29, offset: 16796},
							expr: &choiceExpr{
								pos: position{line: 576, col: 30, offset: 16797},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 576, col: 30, offset: 16797},
										name: "IdentifierRest",
									},
									&litMatcher{
										pos:        position{line: 576, col: 47, offset: 16814},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortKeyArg",
			pos:  position{line: 578, col: 1, offset: 16852},
			expr: &actionExpr{
				pos: position{line: 579, col: 5, offset: 16867},
				run: (*parser).callonSortKeyArg1,
				expr: &seqExpr{
					pos: position{line: 579, col: 5, offset: 16867},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 579, col: 5, offset: 16867},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 579, col: 7, offset: 16869},
							val:        "order",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 579, col: 15, offset: 16877},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 579, col: 17, offset: 16879},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 579, col: 22, offset: 16884},
								name: "FieldExprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 579, col: 33, offset: 16895},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 579, col: 39, offset: 16901},
								name: "OrderSuffix",
							},
						},
					},
				},
			},
		},
		{
			name: "TapArg",
			pos:  position{line: 583, col: 1, offset: 17012},
			expr: &choiceExpr{
				pos: position{line: 584, col: 5, offset: 17023},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 584, col: 5, offset: 17023},
						run: (*parser).callonTapArg2,
						expr: &seqExpr{
							pos: position{line: 584, col: 5, offset: 17023},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 584, col: 5, offset: 17023},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 584, col: 7, offset: 17025},
									val:        "tap",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 585, col: 5, offset: 17056},
						run: (*parser).callonTapArg6,
						expr: &litMatcher{
							pos:        position{line: 585, col: 5, offset: 17056},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FormatArg",
			pos:  position{line: 587, col: 1, offset: 17082},
			expr: &actionExpr{
				pos: position{line: 588, col: 5, offset: 17096},
				run: (*parser).callonFormatArg1,
				expr: &seqExpr{
					pos: position{line: 588, col: 5, offset: 17096},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 588, col: 5, offset: 17096},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 588, col: 7, offset: 17098},
							val:        "format",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 588, col: 16, offset: 17107},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 588, col: 18, offset: 17109},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 588, col: 22, offset: 17113},
								name: "IdentifierName",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderSuffix",
			pos:  position{line: 590, col: 1, offset: 17149},
			expr: &choiceExpr{
				pos: position{line: 591, col: 5, offset: 17165},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 591, col: 5, offset: 17165},
						run: (*parser).callonOrderSuffix2,
						expr: &litMatcher{
							pos:        position{line: 591, col: 5, offset: 17165},
							val:        ":asc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 592, col: 5, offset: 17199},
						run: (*parser).callonOrderSuffix4,
						expr: &litMatcher{
							pos:        position{line: 592, col: 5, offset: 17199},
							val:        ":desc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 593, col: 5, offset: 17234},
						run: (*parser).callonOrderSuffix6,
						expr: &litMatcher{
							pos:        position{line: 593, col: 5, offset: 17234},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PassOp",
			pos:  position{line: 595, col: 1, offset: 17265},
			expr: &actionExpr{
				pos: position{line: 596, col: 5, offset: 17276},
				run: (*parser).callonPassOp1,
				expr: &seqExpr{
					pos: position{line: 596, col: 5, offset: 17276},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 596, col: 5, offset: 17276},
							val:        "pass",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 596, col: 12, offset: 17283},
							expr: &ruleRefExpr{
								pos:  position{line: 596, col: 13, offset: 17284},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "ExplodeOp",
			pos:  position{line: 602, col: 1, offset: 17477},
			expr: &actionExpr{
				pos: position{line: 603, col: 5, offset: 17491},
				run: (*parser).callonExplodeOp1,
				expr: &seqExpr{
					pos: position{line: 603, col: 5, offset: 17491},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 603, col: 5, offset: 17491},
							val:        "explode",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 603, col: 15, offset: 17501},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 603, col: 17, offset: 17503},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 603, col: 22, offset: 17508},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 603, col: 28, offset: 17514},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 603, col: 32, offset: 17518},
								name: "TypeArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 603, col: 40, offset: 17526},
							label: "as",
							expr: &zeroOrOneExpr{
								pos: position{line: 603, col: 43, offset: 17529},
								expr: &ruleRefExpr{
									pos:  position{line: 603, col: 43, offset: 17529},
									name: "AsArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MergeOp",
			pos:  position{line: 607, col: 1, offset: 17642},
			expr: &actionExpr{
				pos: position{line: 608, col: 5, offset: 17654},
				run: (*parser).callonMergeOp1,
				expr: &seqExpr{
					pos: position{line: 608, col: 5, offset: 17654},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 608, col: 5, offset: 17654},
							val:        "merge",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 608, col: 13, offset: 17662},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 608, col: 15, offset: 17664},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 608, col: 20, offset: 17669},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "OverOp",
			pos:  position{line: 612, col: 1, offset: 17755},
			expr: &actionExpr{
				pos: position{line: 613, col: 5, offset: 17766},
				run: (*parser).callonOverOp1,
				expr: &seqExpr{
					pos: position{line: 613, col: 5, offset: 17766},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 613, col: 5, offset: 17766},
							val:        "over",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 613, col: 12, offset: 17773},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 613, col: 14, offset: 17775},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 613, col: 20, offset: 17781},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 613, col: 26, offset: 17787},
							label: "locals",
							expr: &zeroOrOneExpr{
								pos: position{line: 613, col: 33, offset: 17794},
								expr: &ruleRefExpr{
									pos:  position{line: 613, col: 33, offset: 17794},
									name: "Locals",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 613, col: 41, offset: 17802},
							label: "body",
							expr: &zeroOrOneExpr{
								pos: position{line: 613, col: 46, offset: 17807},
								expr: &ruleRefExpr{
									pos:  position{line: 613, col: 46, offset: 17807},
									name: "Lateral",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Lateral",
			pos:  position{line: 617, col: 1, offset: 17930},
			expr: &choiceExpr{
				pos: position{line: 618, col: 5, offset: 17942},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 618, col: 5, offset: 17942},
						run: (*parser).callonLateral2,
						expr: &seqExpr{
							pos: position{line: 618, col: 5, offset: 17942},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 618, col: 5, offset: 17942},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 618, col: 8, offset: 17945},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 618, col: 13, offset: 17950},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 618, col: 16, offset: 17953},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 618, col: 20, offset: 17957},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 618, col: 23, offset: 17960},
									label: "scope",
									expr: &ruleRefExpr{
										pos:  position{line: 618, col: 29, offset: 17966},
										name: "Scope",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 618, col: 35, offset: 17972},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 618, col: 38, offset: 17975},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 619, col: 5, offset: 18005},
						run: (*parser).callonLateral13,
						expr: &seqExpr{
							pos: position{line: 619, col: 5, offset: 18005},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 619, col: 5, offset: 18005},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 619, col: 8, offset: 18008},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 619, col: 13, offset: 18013},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 619, col: 16, offset: 18016},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 619, col: 20, offset: 18020},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 619, col: 23, offset: 18023},
									label: "seq",
									expr: &ruleRefExpr{
										pos:  position{line: 619, col: 27, offset: 18027},
										name: "Seq",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 619, col: 31, offset: 18031},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 619, col: 34, offset: 18034},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Locals",
			pos:  position{line: 621, col: 1, offset: 18059},
			expr: &actionExpr{
				pos: position{line: 622, col: 5, offset: 18070},
				run: (*parser).callonLocals1,
				expr: &seqExpr{
					pos: position{line: 622, col: 5, offset: 18070},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 622, col: 5, offset: 18070},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 622, col: 7, offset: 18072},
							val:        "with",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 622, col: 14, offset: 18079},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 622, col: 16, offset: 18081},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 622, col: 22, offset: 18087},
								name: "LocalsAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 622, col: 39, offset: 18104},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 622, col: 44, offset: 18109},
								expr: &actionExpr{
									pos: position{line: 622, col: 45, offset: 18110},
									run: (*parser).callonLocals10,
									expr: &seqExpr{
										pos: position{line: 622, col: 45, offset: 18110},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 622, col: 45, offset: 18110},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 622, col: 48, offset: 18113},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 622, col: 52, offset: 18117},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 622, col: 55, offset: 18120},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 622, col: 57, offset: 18122},
													name: "LocalsAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocalsAssignment",
			pos:  position{line: 626, col: 1, offset: 18243},
			expr: &actionExpr{
				pos: position{line: 627, col: 5, offset: 18264},
				run: (*parser).callonLocalsAssignment1,
				expr: &seqExpr{
					pos: position{line: 627, col: 5, offset: 18264},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 627, col: 5, offset: 18264},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 627, col: 10, offset: 18269},
								name: "IdentifierName",
							},
						},
						&labeledExpr{
							pos:   position{line: 627, col: 25, offset: 18284},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 627, col: 29, offset: 18288},
								expr: &seqExpr{
									pos: position{line: 627, col: 30, offset: 18289},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 627, col: 30, offset: 18289},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 627, col: 33, offset: 18292},
											val:        "=",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 627, col: 37, offset: 18296},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 627, col: 40, offset: 18299},
											name: "Expr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "YieldOp",
			pos:  position{line: 635, col: 1, offset: 18520},
			expr: &actionExpr{
				pos: position{line: 636, col: 5, offset: 18532},
				run: (*parser).callonYieldOp1,
				expr: &seqExpr{
					pos: position{line: 636, col: 5, offset: 18532},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 636, col: 5, offset: 18532},
							val:        "yield",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 636, col: 13, offset: 18540},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 636, col: 15, offset: 18542},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 636, col: 21, offset: 18548},
								name: "Exprs",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeArg",
			pos:  position{line: 640, col: 1, offset: 18637},
			expr: &actionExpr{
				pos: position{line: 641, col: 5, offset: 18649},
				run: (*parser).callonTypeArg1,
				expr: &seqExpr{
					pos: position{line: 641, col: 5, offset: 18649},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 641, col: 5, offset: 18649},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 641, col: 7, offset: 18651},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 641, col: 10, offset: 18654},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 641, col: 12, offset: 18656},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 641, col: 16, offset: 18660},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "AsArg",
			pos:  position{line: 643, col: 1, offset: 18686},
			expr: &actionExpr{
				pos: position{line: 644, col: 5, offset: 18696},
				run: (*parser).callonAsArg1,
				expr: &seqExpr{
					pos: position{line: 644, col: 5, offset: 18696},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 644, col: 5, offset: 18696},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 644, col: 7, offset: 18698},
							name: "AS",
						},
						&ruleRefExpr{
							pos:  position{line: 644, col: 10, offset: 18701},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 644, col: 12, offset: 18703},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 644, col: 16, offset: 18707},
								name: "Lval",
							},
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 648, col: 1, offset: 18758},
			expr: &ruleRefExpr{
				pos:  position{line: 648, col: 8, offset: 18765},
				name: "DerefExpr",
			},
		},
		{
			name: "Lvals",
			pos:  position{line: 650, col: 1, offset: 18776},
			expr: &actionExpr{
				pos: position{line: 651, col: 5, offset: 18786},
				run: (*parser).callonLvals1,
				expr: &seqExpr{
					pos: position{line: 651, col: 5, offset: 18786},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 651, col: 5, offset: 18786},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 651, col: 11, offset: 18792},
								name: "Lval",
							},
						},
						&labeledExpr{
							pos:   position{line: 651, col: 16, offset: 18797},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 651, col: 21, offset: 18802},
								expr: &actionExpr{
									pos: position{line: 651, col: 22, offset: 18803},
									run: (*parser).callonLvals7,
									expr: &seqExpr{
										pos: position{line: 651, col: 22, offset: 18803},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 651, col: 22, offset: 18803},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 651, col: 25, offset: 18806},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 651, col: 29, offset: 18810},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 651, col: 32, offset: 18813},
												label: "lval",
												expr: &ruleRefExpr{
													pos:  position{line: 651, col: 37, offset: 18818},
													name: "Lval",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 655, col: 1, offset: 18930},
			expr: &ruleRefExpr{
				pos:  position{line: 655, col: 13, offset: 18942},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 657, col: 1, offset: 18948},
			expr: &actionExpr{
				pos: position{line: 658, col: 5, offset: 18963},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 658, col: 5, offset: 18963},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 658, col: 5, offset: 18963},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 658, col: 11, offset: 18969},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 658, col: 21, offset: 18979},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 658, col: 26, offset: 18984},
								expr: &seqExpr{
									pos: position{line: 658, col: 27, offset: 18985},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 658, col: 27, offset: 18985},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 658, col: 30, offset: 18988},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 658, col: 34, offset: 18992},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 658, col: 37, offset: 18995},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignments",
			pos:  position{line: 668, col: 1, offset: 19194},
			expr: &actionExpr{
				pos: position{line: 669, col: 5, offset: 19210},
				run: (*parser).callonAssignments1,
				expr: &seqExpr{
					pos: position{line: 669, col: 5, offset: 19210},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 669, col: 5, offset: 19210},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 669, col: 11, offset: 19216},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 669, col: 22, offset: 19227},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 669, col: 27, offset: 19232},
								expr: &actionExpr{
									pos: position{line: 669, col: 28, offset: 19233},
									run: (*parser).callonAssignments7,
									expr: &seqExpr{
										pos: position{line: 669, col: 28, offset: 19233},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 669, col: 28, offset: 19233},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 669, col: 31, offset: 19236},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 669, col: 35, offset: 19240},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 669, col: 38, offset: 19243},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 669, col: 40, offset: 19245},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 673, col: 1, offset: 19356},
			expr: &actionExpr{
				pos: position{line: 674, col: 5, offset: 19371},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 674, col: 5, offset: 19371},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 674, col: 5, offset: 19371},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 674, col: 9, offset: 19375},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 674, col: 14, offset: 19380},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 674, col: 17, offset: 19383},
							val:        ":=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 674, col: 22, offset: 19388},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 674, col: 25, offset: 19391},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 674, col: 29, offset: 19395},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 676, col: 1, offset: 19486},
			expr: &ruleRefExpr{
				pos:  position{line: 676, col: 8, offset: 19493},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 678, col: 1, offset: 19510},
			expr: &actionExpr{
				pos: position{line: 679, col: 5, offset: 19530},
				run: (*parser).callonConditionalExpr1,
				expr: &seqExpr{
					pos: position{line: 679, col: 5, offset: 19530},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 679, col: 5, offset: 19530},
							label: "cond",
							expr: &ruleRefExpr{
								pos:  position{line: 679, col: 10, offset: 19535},
								name: "LogicalOrExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 679, col: 24, offset: 19549},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 679, col: 28, offset: 19553},
								expr: &seqExpr{
									pos: position{line: 679, col: 29, offset: 19554},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 679, col: 29, offset: 19554},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 679, col: 32, offset: 19557},
											val:        "?",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 679, col: 36, offset: 19561},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 679, col: 39, offset: 19564},
											name: "Expr",
										},
										&ruleRefExpr{
											pos:  position{line: 679, col: 44, offset: 19569},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 679, col: 47, offset: 19572},
											val:        ":",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 679, col: 51, offset: 19576},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 679, col: 54, offset: 19579},
											name: "Expr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 688, col: 1, offset: 19840},
			expr: &actionExpr{
				pos: position{line: 689, col: 5, offset: 19858},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 689, col: 5, offset: 19858},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 689, col: 5, offset: 19858},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 689, col: 11, offset: 19864},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 690, col: 5, offset: 19883},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 690, col: 10, offset: 19888},
								expr: &actionExpr{
									pos: position{line: 690, col: 11, offset: 19889},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 690, col: 11, offset: 19889},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 690, col: 11, offset: 19889},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 690, col: 14, offset: 19892},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 690, col: 17, offset: 19895},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 690, col: 25, offset: 19903},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 690, col: 28, offset: 19906},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 690, col: 33, offset: 19911},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 694, col: 1, offset: 20030},
			expr: &actionExpr{
				pos: position{line: 695, col: 5, offset: 20049},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 695, col: 5, offset: 20049},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 695, col: 5, offset: 20049},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 695, col: 11, offset: 20055},
								name: "ComparisonExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 696, col: 5, offset: 20074},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 696, col: 10, offset: 20079},
								expr: &actionExpr{
									pos: position{line: 696, col: 11, offset: 20080},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 696, col: 11, offset: 20080},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 696, col: 11, offset: 20080},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 696, col: 14, offset: 20083},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 696, col: 17, offset: 20086},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 696, col: 26, offset: 20095},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 696, col: 29, offset: 20098},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 696, col: 34, offset: 20103},
													name: "ComparisonExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ComparisonExpr",
			pos:  position{line: 700, col: 1, offset: 20222},
			expr: &actionExpr{
				pos: position{line: 701, col: 5, offset: 20241},
				run: (*parser).callonComparisonExpr1,
				expr: &seqExpr{
					pos: position{line: 701, col: 5, offset: 20241},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 701, col: 5, offset: 20241},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 701, col: 9, offset: 20245},
								name: "AdditiveExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 701, col: 22, offset: 20258},
							label: "opAndRHS",
							expr: &zeroOrOneExpr{
								pos: position{line: 701, col: 31, offset: 20267},
								expr: &choiceExpr{
									pos: position{line: 701, col: 32, offset: 20268},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 701, col: 32, offset: 20268},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 701, col: 32, offset: 20268},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 701, col: 35, offset: 20271},
													name: "Comparator",
												},
												&ruleRefExpr{
													pos:  position{line: 701, col: 46, offset: 20282},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 701, col: 49, offset: 20285},
													name: "AdditiveExpr",
												},
											},
										},
										&seqExpr{
											pos: position{line: 701, col: 64, offset: 20300},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 701, col: 64, offset: 20300},
													name: "__",
												},
												&actionExpr{
													pos: position{line: 701, col: 68, offset: 20304},
													run: (*parser).callonComparisonExpr15,
													expr: &litMatcher{
														pos:        position{line: 701, col: 68, offset: 20304},
														val:        "~",
														ignoreCase: false,
													},
												},
												&ruleRefExpr{
													pos:  position{line: 701, col: 104, offset: 20340},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 701, col: 107, offset: 20343},
													name: "Regexp",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 710, col: 1, offset: 20604},
			expr: &actionExpr{
				pos: position{line: 711, col: 5, offset: 20621},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 711, col: 5, offset: 20621},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 711, col: 5, offset: 20621},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 711, col: 11, offset: 20627},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 712, col: 5, offset: 20650},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 712, col: 10, offset: 20655},
								expr: &actionExpr{
									pos: position{line: 712, col: 11, offset: 20656},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 712, col: 11, offset: 20656},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 712, col: 11, offset: 20656},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 712, col: 14, offset: 20659},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 712, col: 17, offset: 20662},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 712, col: 34, offset: 20679},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 712, col: 37, offset: 20682},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 712, col: 42, offset: 20687},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 716, col: 1, offset: 20810},
			expr: &actionExpr{
				pos: position{line: 716, col: 20, offset: 20829},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 716, col: 21, offset: 20830},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 716, col: 21, offset: 20830},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 716, col: 27, offset: 20836},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 718, col: 1, offset: 20873},
			expr: &actionExpr{
				pos: position{line: 719, col: 5, offset: 20896},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 719, col: 5, offset: 20896},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 719, col: 5, offset: 20896},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 719, col: 11, offset: 20902},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 720, col: 5, offset: 20914},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 720, col: 10, offset: 20919},
								expr: &actionExpr{
									pos: position{line: 720, col: 11, offset: 20920},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 720, col: 11, offset: 20920},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 720, col: 11, offset: 20920},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 720, col: 14, offset: 20923},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 720, col: 17, offset: 20926},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 720, col: 40, offset: 20949},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 720, col: 43, offset: 20952},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 720, col: 48, offset: 20957},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 724, col: 1, offset: 21069},
			expr: &actionExpr{
				pos: position{line: 724, col: 26, offset: 21094},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 724, col: 27, offset: 21095},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 724, col: 27, offset: 21095},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 724, col: 33, offset: 21101},
							val:        "/",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 724, col: 39, offset: 21107},
							val:        "%",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 726, col: 1, offset: 21144},
			expr: &choiceExpr{
				pos: position{line: 727, col: 5, offset: 21156},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 727, col: 5, offset: 21156},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 727, col: 5, offset: 21156},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 727, col: 5, offset: 21156},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 727, col: 9, offset: 21160},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 727, col: 12, offset: 21163},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 727, col: 14, offset: 21165},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 730, col: 5, offset: 21274},
						name: "NegationExpr",
					},
				},
			},
		},
		{
			name: "NegationExpr",
			pos:  position{line: 732, col: 1, offset: 21288},
			expr: &choiceExpr{
				pos: position{line: 733, col: 5, offset: 21305},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 733, col: 5, offset: 21305},
						run: (*parser).callonNegationExpr2,
						expr: &seqExpr{
							pos: position{line: 733, col: 5, offset: 21305},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 733, col: 5, offset: 21305},
									expr: &ruleRefExpr{
										pos:  position{line: 733, col: 6, offset: 21306},
										name: "Literal",
									},
								},
								&litMatcher{
									pos:        position{line: 733, col: 14, offset: 21314},
									val:        "-",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 733, col: 18, offset: 21318},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 733, col: 21, offset: 21321},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 733, col: 23, offset: 21323},
										name: "FuncExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 736, col: 5, offset: 21433},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 738, col: 1, offset: 21443},
			expr: &choiceExpr{
				pos: position{line: 739, col: 5, offset: 21456},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 739, col: 5, offset: 21456},
						run: (*parser).callonFuncExpr2,
						expr: &seqExpr{
							pos: position{line: 739, col: 5, offset: 21456},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 739, col: 5, offset: 21456},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 739, col: 11, offset: 21462},
										name: "Cast",
									},
								},
								&labeledExpr{
									pos:   position{line: 739, col: 16, offset: 21467},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 739, col: 21, offset: 21472},
										expr: &ruleRefExpr{
											pos:  position{line: 739, col: 22, offset: 21473},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 742, col: 5, offset: 21544},
						run: (*parser).callonFuncExpr9,
						expr: &seqExpr{
							pos: position{line: 742, col: 5, offset: 21544},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 742, col: 5, offset: 21544},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 742, col: 11, offset: 21550},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 742, col: 20, offset: 21559},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 742, col: 25, offset: 21564},
										expr: &ruleRefExpr{
											pos:  position{line: 742, col: 26, offset: 21565},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 745, col: 5, offset: 21636},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 746, col: 5, offset: 21650},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FuncGuard",
			pos:  position{line: 748, col: 1, offset: 21659},
			expr: &seqExpr{
				pos: position{line: 748, col: 13, offset: 21671},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 748, col: 13, offset: 21671},
						name: "NotFuncs",
					},
					&ruleRefExpr{
						pos:  position{line: 748, col: 22, offset: 21680},
						name: "__",
					},
					&litMatcher{
						pos:        position{line: 748, col: 25, offset: 21683},
						val:        "(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "NotFuncs",
			pos:  position{line: 750, col: 1, offset: 21688},
			expr: &choiceExpr{
				pos: position{line: 751, col: 5, offset: 21701},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 751, col: 5, offset: 21701},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 752, col: 5, offset: 21711},
						val:        "select",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Cast",
			pos:  position{line: 754, col: 1, offset: 21721},
			expr: &actionExpr{
				pos: position{line: 755, col: 5, offset: 21730},
				run: (*parser).callonCast1,
				expr: &seqExpr{
					pos: position{line: 755, col: 5, offset: 21730},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 755, col: 5, offset: 21730},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 755, col: 9, offset: 21734},
								name: "CastType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 755, col: 18, offset: 21743},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 755, col: 21, offset: 21746},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 755, col: 25, offset: 21750},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 755, col: 28, offset: 21753},
							label: "expr",
							expr: &choiceExpr{
								pos: position{line: 755, col: 34, offset: 21759},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 755, col: 34, offset: 21759},
										name: "OverExpr",
									},
									&ruleRefExpr{
										pos:  position{line: 755, col: 45, offset: 21770},
										name: "Expr",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 755, col: 51, offset: 21776},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 755, col: 54, offset: 21779},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 759, col: 1, offset: 21876},
			expr: &choiceExpr{
				pos: position{line: 760, col: 5, offset: 21889},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 760, col: 5, offset: 21889},
						name: "Grep",
					},
					&actionExpr{
						pos: position{line: 762, col: 5, offset: 21976},
						run: (*parser).callonFunction3,
						expr: &seqExpr{
							pos: position{line: 762, col: 5, offset: 21976},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 762, col: 5, offset: 21976},
									val:        "regexp",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 762, col: 14, offset: 21985},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 762, col: 17, offset: 21988},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 762, col: 21, offset: 21992},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 762, col: 24, offset: 21995},
									label: "arg0Text",
									expr: &ruleRefExpr{
										pos:  position{line: 762, col: 33, offset: 22004},
										name: "RegexpPattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 762, col: 47, offset: 22018},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 762, col: 50, offset: 22021},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 762, col: 54, offset: 22025},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 762, col: 57, offset: 22028},
									label: "arg1",
									expr: &ruleRefExpr{
										pos:  position{line: 762, col: 62, offset: 22033},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 762, col: 67, offset: 22038},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 762, col: 70, offset: 22041},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 762, col: 74, offset: 22045},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 762, col: 80, offset: 22051},
										expr: &ruleRefExpr{
											pos:  position{line: 762, col: 80, offset: 22051},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 766, col: 5, offset: 22299},
						run: (*parser).callonFunction21,
						expr: &seqExpr{
							pos: position{line: 766, col: 5, offset: 22299},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 766, col: 5, offset: 22299},
									val:        "regexp_replace",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 766, col: 22, offset: 22316},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 766, col: 25, offset: 22319},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 766, col: 29, offset: 22323},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 766, col: 32, offset: 22326},
									label: "arg0",
									expr: &ruleRefExpr{
										pos:  position{line: 766, col: 37, offset: 22331},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 766, col: 42, offset: 22336},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 766, col: 45, offset: 22339},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 766, col: 49, offset: 22343},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 766, col: 52, offset: 22346},
									label: "arg1Text",
									expr: &ruleRefExpr{
										pos:  position{line: 766, col: 61, offset: 22355},
										name: "RegexpPattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 766, col: 75, offset: 22369},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 766, col: 78, offset: 22372},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 766, col: 82, offset: 22376},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 766, col: 85, offset: 22379},
									label: "arg2",
									expr: &ruleRefExpr{
										pos:  position{line: 766, col: 90, offset: 22384},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 766, col: 95, offset: 22389},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 766, col: 98, offset: 22392},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 766, col: 102, offset: 22396},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 766, col: 108, offset: 22402},
										expr: &ruleRefExpr{
											pos:  position{line: 766, col: 108, offset: 22402},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 770, col: 5, offset: 22664},
						run: (*parser).callonFunction44,
						expr: &seqExpr{
							pos: position{line: 770, col: 5, offset: 22664},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 770, col: 5, offset: 22664},
									expr: &ruleRefExpr{
										pos:  position{line: 770, col: 6, offset: 22665},
										name: "FuncGuard",
									},
								},
								&labeledExpr{
									pos:   position{line: 770, col: 16, offset: 22675},
									label: "fn",
									expr: &ruleRefExpr{
										pos:  position{line: 770, col: 19, offset: 22678},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 770, col: 34, offset: 22693},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 770, col: 37, offset: 22696},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 770, col: 41, offset: 22700},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 770, col: 44, offset: 22703},
									label: "args",
									expr: &ruleRefExpr{
										pos:  position{line: 770, col: 49, offset: 22708},
										name: "FunctionArgs",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 770, col: 62, offset: 22721},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 770, col: 65, offset: 22724},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 770, col: 69, offset: 22728},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 770, col: 75, offset: 22734},
										expr: &ruleRefExpr{
											pos:  position{line: 770, col: 75, offset: 22734},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FunctionArgs",
			pos:  position{line: 774, col: 1, offset: 22855},
			expr: &choiceExpr{
				pos: position{line: 775, col: 5, offset: 22872},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 775, col: 5, offset: 22872},
						run: (*parser).callonFunctionArgs2,
						expr: &labeledExpr{
							pos:   position{line: 775, col: 5, offset: 22872},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 775, col: 7, offset: 22874},
								name: "OverExpr",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 776, col: 5, offset: 22920},
						name: "OptionalExprs",
					},
				},
			},
		},
		{
			name: "Grep",
			pos:  position{line: 778, col: 1, offset: 22935},
			expr: &actionExpr{
				pos: position{line: 779, col: 5, offset: 22944},
				run: (*parser).callonGrep1,
				expr: &seqExpr{
					pos: position{line: 779, col: 5, offset: 22944},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 779, col: 5, offset: 22944},
							val:        "grep",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 779, col: 12, offset: 22951},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 779, col: 15, offset: 22954},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 779, col: 19, offset: 22958},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 779, col: 22, offset: 22961},
							label: "pattern",
							expr: &ruleRefExpr{
								pos:  position{line: 779, col: 30, offset: 22969},
								name: "Pattern",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 779, col: 38, offset: 22977},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 779, col: 41, offset: 22980},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 779, col: 45, offset: 22984},
								expr: &seqExpr{
									pos: position{line: 779, col: 46, offset: 22985},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 779, col: 46, offset: 22985},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 779, col: 50, offset: 22989},
											name: "__",
										},
										&choiceExpr{
											pos: position{line: 779, col: 54, offset: 22993},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 779, col: 54, offset: 22993},
													name: "OverExpr",
												},
												&ruleRefExpr{
													pos:  position{line: 779, col: 65, offset: 23004},
													name: "Expr",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 779, col: 71, offset: 23010},
											name: "__",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 779, col: 76, offset: 23015},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Pattern",
			pos:  position{line: 787, col: 1, offset: 23256},
			expr: &choiceExpr{
				pos: position{line: 788, col: 5, offset: 23268},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 788, col: 5, offset: 23268},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 789, col: 5, offset: 23279},
						name: "Glob",
					},
					&actionExpr{
						pos: position{line: 790, col: 5, offset: 23288},
						run: (*parser).callonPattern4,
						expr: &labeledExpr{
							pos:   position{line: 790, col: 5, offset: 23288},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 790, col: 7, offset: 23290},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "OptionalExprs",
			pos:  position{line: 794, col: 1, offset: 23382},
			expr: &choiceExpr{
				pos: position{line: 795, col: 5, offset: 23400},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 795, col: 5, offset: 23400},
						name: "Exprs",
					},
					&actionExpr{
						pos: position{line: 796, col: 5, offset: 23410},
						run: (*parser).callonOptionalExprs3,
						expr: &ruleRefExpr{
							pos:  position{line: 796, col: 5, offset: 23410},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 798, col: 1, offset: 23446},
			expr: &actionExpr{
				pos: position{line: 799, col: 5, offset: 23456},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 799, col: 5, offset: 23456},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 799, col: 5, offset: 23456},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 799, col: 11, offset: 23462},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 799, col: 16, offset: 23467},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 799, col: 21, offset: 23472},
								expr: &actionExpr{
									pos: position{line: 799, col: 22, offset: 23473},
									run: (*parser).callonExprs7,
									expr: &seqExpr{
										pos: position{line: 799, col: 22, offset: 23473},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 799, col: 22, offset: 23473},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 799, col: 25, offset: 23476},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 799, col: 29, offset: 23480},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 799, col: 32, offset: 23483},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 799, col: 34, offset: 23485},
													name: "Expr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 803, col: 1, offset: 23594},
			expr: &actionExpr{
				pos: position{line: 804, col: 5, offset: 23608},
				run: (*parser).callonDerefExpr1,
				expr: &seqExpr{
					pos: position{line: 804, col: 5, offset: 23608},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 804, col: 5, offset: 23608},
							expr: &ruleRefExpr{
								pos:  position{line: 804, col: 6, offset: 23609},
								name: "IP6",
							},
						},
						&labeledExpr{
							pos:   position{line: 804, col: 10, offset: 23613},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 804, col: 16, offset: 23619},
								name: "Identifier",
							},
						},
						&labeledExpr{
							pos:   position{line: 804, col: 27, offset: 23630},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 804, col: 32, offset: 23635},
								expr: &ruleRefExpr{
									pos:  position{line: 804, col: 33, offset: 23636},
									name: "Deref",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 808, col: 1, offset: 23704},
			expr: &choiceExpr{
				pos: position{line: 809, col: 5, offset: 23714},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 809, col: 5, offset: 23714},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 809, col: 5, offset: 23714},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 809, col: 5, offset: 23714},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 809, col: 9, offset: 23718},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 809, col: 14, offset: 23723},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 809, col: 27, offset: 23736},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 809, col: 30, offset: 23739},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 809, col: 34, offset: 23743},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 809, col: 37, offset: 23746},
									label: "to",
									expr: &zeroOrOneExpr{
										pos: position{line: 809, col: 40, offset: 23749},
										expr: &ruleRefExpr{
											pos:  position{line: 809, col: 40, offset: 23749},
											name: "AdditiveExpr",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 809, col: 54, offset: 23763},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 815, col: 5, offset: 23937},
						run: (*parser).callonDeref14,
						expr: &seqExpr{
							pos: position{line: 815, col: 5, offset: 23937},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 815, col: 5, offset: 23937},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 815, col: 9, offset: 23941},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 815, col: 12, offset: 23944},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 815, col: 16, offset: 23948},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 815, col: 19, offset: 23951},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 815, col: 22, offset: 23954},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 815, col: 35, offset: 23967},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 821, col: 5, offset: 24140},
						run: (*parser).callonDeref23,
						expr: &seqExpr{
							pos: position{line: 821, col: 5, offset: 24140},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 821, col: 5, offset: 24140},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 821, col: 9, offset: 24144},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 821, col: 14, offset: 24149},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 821, col: 19, offset: 24154},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 822, col: 5, offset: 24203},
						run: (*parser).callonDeref29,
						expr: &seqExpr{
							pos: position{line: 822, col: 5, offset: 24203},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 822, col: 5, offset: 24203},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 822, col: 9, offset: 24207},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 822, col: 12, offset: 24210},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 824, col: 1, offset: 24261},
			expr: &choiceExpr{
				pos: position{line: 825, col: 5, offset: 24273},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 825, col: 5, offset: 24273},
						name: "Record",
					},
					&ruleRefExpr{
						pos:  position{line: 826, col: 5, offset: 24284},
						name: "Array",
					},
					&ruleRefExpr{
						pos:  position{line: 827, col: 5, offset: 24294},
						name: "Set",
					},
					&ruleRefExpr{
						pos:  position{line: 828, col: 5, offset: 24302},
						name: "Map",
					},
					&ruleRefExpr{
						pos:  position{line: 829, col: 5, offset: 24310},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 830, col: 5, offset: 24322},
						run: (*parser).callonPrimary7,
						expr: &seqExpr{
							pos: position{line: 830, col: 5, offset: 24322},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 830, col: 5, offset: 24322},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 830, col: 9, offset: 24326},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 830, col: 12, offset: 24329},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 830, col: 17, offset: 24334},
										name: "OverExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 830, col: 26, offset: 24343},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 830, col: 29, offset: 24346},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 831, col: 5, offset: 24375},
						run: (*parser).callonPrimary15,
						expr: &seqExpr{
							pos: position{line: 831, col: 5, offset: 24375},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 831, col: 5, offset: 24375},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 831, col: 9, offset: 24379},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 831, col: 12, offset: 24382},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 831, col: 17, offset: 24387},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 831, col: 22, offset: 24392},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 831, col: 25, offset: 24395},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OverExpr",
			pos:  position{line: 833, col: 1, offset: 24421},
			expr: &actionExpr{
				pos: position{line: 834, col: 5, offset: 24434},
				run: (*parser).callonOverExpr1,
				expr: &seqExpr{
					pos: position{line: 834, col: 5, offset: 24434},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 834, col: 5, offset: 24434},
							val:        "over",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 834, col: 12, offset: 24441},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 834, col: 14, offset: 24443},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 834, col: 20, offset: 24449},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 834, col: 26, offset: 24455},
							label: "locals",
							expr: &zeroOrOneExpr{
								pos: position{line: 834, col: 33, offset: 24462},
								expr: &ruleRefExpr{
									pos:  position{line: 834, col: 33, offset: 24462},
									name: "Locals",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 834, col: 41, offset: 24470},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 834, col: 44, offset: 24473},
							val:        "|",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 834, col: 48, offset: 24477},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 834, col: 51, offset: 24480},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 834, col: 56, offset: 24485},
								name: "Seq",
							},
						},
					},
				},
			},
		},
		{
			name: "Record",
			pos:  position{line: 838, col: 1, offset: 24607},
			expr: &actionExpr{
				pos: position{line: 839, col: 5, offset: 24618},
				run: (*parser).callonRecord1,
				expr: &seqExpr{
					pos: position{line: 839, col: 5, offset: 24618},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 839, col: 5, offset: 24618},
							val:        "{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 839, col: 9, offset: 24622},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 839, col: 12, offset: 24625},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 839, col: 18, offset: 24631},
								name: "RecordElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 839, col: 30, offset: 24643},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 839, col: 33, offset: 24646},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RecordElems",
			pos:  position{line: 843, col: 1, offset: 24738},
			expr: &choiceExpr{
				pos: position{line: 844, col: 5, offset: 24754},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 844, col: 5, offset: 24754},
						run: (*parser).callonRecordElems2,
						expr: &seqExpr{
							pos: position{line: 844, col: 5, offset: 24754},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 844, col: 5, offset: 24754},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 844, col: 11, offset: 24760},
										name: "RecordElem",
									},
								},
								&labeledExpr{
									pos:   position{line: 844, col: 22, offset: 24771},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 844, col: 27, offset: 24776},
										expr: &ruleRefExpr{
											pos:  position{line: 844, col: 27, offset: 24776},
											name: "RecordElemTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 847, col: 5, offset: 24875},
						run: (*parser).callonRecordElems9,
						expr: &ruleRefExpr{
							pos:  position{line: 847, col: 5, offset: 24875},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "RecordElemTail",
			pos:  position{line: 849, col: 1, offset: 24911},
			expr: &actionExpr{
				pos: position{line: 849, col: 18, offset: 24928},
				run: (*parser).callonRecordElemTail1,
				expr: &seqExpr{
					pos: position{line: 849, col: 18, offset: 24928},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 849, col: 18, offset: 24928},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 849, col: 21, offset: 24931},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 849, col: 25, offset: 24935},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 849, col: 28, offset: 24938},
							label: "elem",
							expr: &ruleRefExpr{
								pos:  position{line: 849, col: 33, offset: 24943},
								name: "RecordElem",
							},
						},
					},
				},
			},
		},
		{
			name: "RecordElem",
			pos:  position{line: 851, col: 1, offset: 24976},
			expr: &choiceExpr{
				pos: position{line: 852, col: 5, offset: 24991},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 852, col: 5, offset: 24991},
						name: "Spread",
					},
					&ruleRefExpr{
						pos:  position{line: 853, col: 5, offset: 25002},
						name: "Field",
					},
					&ruleRefExpr{
						pos:  position{line: 854, col: 5, offset: 25012},
						name: "Identifier",
					},
				},
			},
		},
		{
			name: "Spread",
			pos:  position{line: 856, col: 1, offset: 25024},
			expr: &actionExpr{
				pos: position{line: 857, col: 5, offset: 25035},
				run: (*parser).callonSpread1,
				expr: &seqExpr{
					pos: position{line: 857, col: 5, offset: 25035},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 857, col: 5, offset: 25035},
							val:        "...",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 857, col: 11, offset: 25041},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 857, col: 14, offset: 25044},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 857, col: 19, offset: 25049},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 861, col: 1, offset: 25136},
			expr: &actionExpr{
				pos: position{line: 862, col: 5, offset: 25146},
				run: (*parser).callonField1,
				expr: &seqExpr{
					pos: position{line: 862, col: 5, offset: 25146},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 862, col: 5, offset: 25146},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 862, col: 10, offset: 25151},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 862, col: 20, offset: 25161},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 862, col: 23, offset: 25164},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 862, col: 27, offset: 25168},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 862, col: 30, offset: 25171},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 862, col: 36, offset: 25177},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Array",
			pos:  position{line: 866, col: 1, offset: 25279},
			expr: &actionExpr{
				pos: position{line: 867, col: 5, offset: 25289},
				run: (*parser).callonArray1,
				expr: &seqExpr{
					pos: position{line: 867, col: 5, offset: 25289},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 867, col: 5, offset: 25289},
							val:        "[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 867, col: 9, offset: 25293},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 867, col: 12, offset: 25296},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 867, col: 18, offset: 25302},
								name: "VectorElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 867, col: 30, offset: 25314},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 867, col: 33, offset: 25317},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Set",
			pos:  position{line: 871, col: 1, offset: 25408},
			expr: &actionExpr{
				pos: position{line: 872, col: 5, offset: 25416},
				run: (*parser).callonSet1,
				expr: &seqExpr{
					pos: position{line: 872, col: 5, offset: 25416},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 872, col: 5, offset: 25416},
							val:        "|[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 872, col: 10, offset: 25421},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 872, col: 13, offset: 25424},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 872, col: 19, offset: 25430},
								name: "VectorElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 872, col: 31, offset: 25442},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 872, col: 34, offset: 25445},
							val:        "]|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "VectorElems",
			pos:  position{line: 876, col: 1, offset: 25535},
			expr: &choiceExpr{
				pos: position{line: 877, col: 5, offset: 25551},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 877, col: 5, offset: 25551},
						run: (*parser).callonVectorElems2,
						expr: &seqExpr{
							pos: position{line: 877, col: 5, offset: 25551},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 877, col: 5, offset: 25551},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 877, col: 11, offset: 25557},
										name: "VectorElem",
									},
								},
								&labeledExpr{
									pos:   position{line: 877, col: 22, offset: 25568},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 877, col: 27, offset: 25573},
										expr: &actionExpr{
											pos: position{line: 877, col: 28, offset: 25574},
											run: (*parser).callonVectorElems8,
											expr: &seqExpr{
												pos: position{line: 877, col: 28, offset: 25574},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 877, col: 28, offset: 25574},
														name: "__",
													},
													&litMatcher{
														pos:        position{line: 877, col: 31, offset: 25577},
														val:        ",",
														ignoreCase: false,
													},
													&ruleRefExpr{
														pos:  position{line: 877, col: 35, offset: 25581},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 877, col: 38, offset: 25584},
														label: "e",
														expr: &ruleRefExpr{
															pos:  position{line: 877, col: 40, offset: 25586},
															name: "VectorElem",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 880, col: 5, offset: 25704},
						run: (*parser).callonVectorElems15,
						expr: &ruleRefExpr{
							pos:  position{line: 880, col: 5, offset: 25704},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "VectorElem",
			pos:  position{line: 882, col: 1, offset: 25740},
			expr: &choiceExpr{
				pos: position{line: 883, col: 5, offset: 25755},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 883, col: 5, offset: 25755},
						name: "Spread",
					},
					&actionExpr{
						pos: position{line: 884, col: 5, offset: 25766},
						run: (*parser).callonVectorElem3,
						expr: &labeledExpr{
							pos:   position{line: 884, col: 5, offset: 25766},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 884, col: 7, offset: 25768},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Map",
			pos:  position{line: 886, col: 1, offset: 25847},
			expr: &actionExpr{
				pos: position{line: 887, col: 5, offset: 25855},
				run: (*parser).callonMap1,
				expr: &seqExpr{
					pos: position{line: 887, col: 5, offset: 25855},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 887, col: 5, offset: 25855},
							val:        "|{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 887, col: 10, offset: 25860},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 887, col: 13, offset: 25863},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 887, col: 19, offset: 25869},
								name: "Entries",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 887, col: 27, offset: 25877},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 887, col: 30, offset: 25880},
							val:        "}|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Entries",
			pos:  position{line: 891, col: 1, offset: 25972},
			expr: &choiceExpr{
				pos: position{line: 892, col: 5, offset: 25984},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 892, col: 5, offset: 25984},
						run: (*parser).callonEntries2,
						expr: &seqExpr{
							pos: position{line: 892, col: 5, offset: 25984},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 892, col: 5, offset: 25984},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 892, col: 11, offset: 25990},
										name: "Entry",
									},
								},
								&labeledExpr{
									pos:   position{line: 892, col: 17, offset: 25996},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 892, col: 22, offset: 26001},
										expr: &ruleRefExpr{
											pos:  position{line: 892, col: 22, offset: 26001},
											name: "EntryTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 895, col: 5, offset: 26095},
						run: (*parser).callonEntries9,
						expr: &ruleRefExpr{
							pos:  position{line: 895, col: 5, offset: 26095},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "EntryTail",
			pos:  position{line: 898, col: 1, offset: 26132},
			expr: &actionExpr{
				pos: position{line: 898, col: 13, offset: 26144},
				run: (*parser).callonEntryTail1,
				expr: &seqExpr{
					pos: position{line: 898, col: 13, offset: 26144},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 898, col: 13, offset: 26144},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 898, col: 16, offset: 26147},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 898, col: 20, offset: 26151},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 898, col: 23, offset: 26154},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 898, col: 25, offset: 26156},
								name: "Entry",
							},
						},
					},
				},
			},
		},
		{
			name: "Entry",
			pos:  position{line: 900, col: 1, offset: 26181},
			expr: &actionExpr{
				pos: position{line: 901, col: 5, offset: 26191},
				run: (*parser).callonEntry1,
				expr: &seqExpr{
					pos: position{line: 901, col: 5, offset: 26191},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 901, col: 5, offset: 26191},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 901, col: 9, offset: 26195},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 901, col: 14, offset: 26200},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 901, col: 17, offset: 26203},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 901, col: 21, offset: 26207},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 901, col: 24, offset: 26210},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 901, col: 30, offset: 26216},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOp",
			pos:  position{line: 907, col: 1, offset: 26323},
			expr: &actionExpr{
				pos: position{line: 908, col: 5, offset: 26333},
				run: (*parser).callonSQLOp1,
				expr: &seqExpr{
					pos: position{line: 908, col: 5, offset: 26333},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 908, col: 5, offset: 26333},
							label: "selection",
							expr: &ruleRefExpr{
								pos:  position{line: 908, col: 15, offset: 26343},
								name: "SQLSelect",
							},
						},
						&labeledExpr{
							pos:   position{line: 909, col: 5, offset: 26357},
							label: "from",
							expr: &zeroOrOneExpr{
								pos: position{line: 909, col: 10, offset: 26362},
								expr: &ruleRefExpr{
									pos:  position{line: 909, col: 10, offset: 26362},
									name: "SQLFrom",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 910, col: 5, offset: 26375},
							label: "joins",
							expr: &zeroOrOneExpr{
								pos: position{line: 910, col: 11, offset: 26381},
								expr: &ruleRefExpr{
									pos:  position{line: 910, col: 11, offset: 26381},
									name: "SQLJoins",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 911, col: 5, offset: 26395},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 911, col: 11, offset: 26401},
								expr: &ruleRefExpr{
									pos:  position{line: 911, col: 11, offset: 26401},
									name: "SQLWhere",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 912, col: 5, offset: 26415},
							label: "groupby",
							expr: &zeroOrOneExpr{
								pos: position{line: 912, col: 13, offset: 26423},
								expr: &ruleRefExpr{
									pos:  position{line: 912, col: 13, offset: 26423},
									name: "SQLGroupBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 913, col: 5, offset: 26439},
							label: "having",
							expr: &zeroOrOneExpr{
								pos: position{line: 913, col: 12, offset: 26446},
								expr: &ruleRefExpr{
									pos:  position{line: 913, col: 12, offset: 26446},
									name: "SQLHaving",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 914, col: 5, offset: 26461},
							label: "orderby",
							expr: &zeroOrOneExpr{
								pos: position{line: 914, col: 13, offset: 26469},
								expr: &ruleRefExpr{
									pos:  position{line: 914, col: 13, offset: 26469},
									name: "SQLOrderBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 915, col: 5, offset: 26485},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 915, col: 11, offset: 26491},
								name: "SQLLimit",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLSelect",
			pos:  position{line: 939, col: 1, offset: 26857},
			expr: &choiceExpr{
				pos: position{line: 940, col: 5, offset: 26871},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 940, col: 5, offset: 26871},
						run: (*parser).callonSQLSelect2,
						expr: &seqExpr{
							pos: position{line: 940, col: 5, offset: 26871},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 940, col: 5, offset: 26871},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 940, col: 12, offset: 26878},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 940, col: 14, offset: 26880},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 941, col: 5, offset: 26908},
						run: (*parser).callonSQLSelect7,
						expr: &seqExpr{
							pos: position{line: 941, col: 5, offset: 26908},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 941, col: 5, offset: 26908},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 941, col: 12, offset: 26915},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 941, col: 14, offset: 26917},
									label: "assignments",
									expr: &ruleRefExpr{
										pos:  position{line: 941, col: 26, offset: 26929},
										name: "SQLAssignments",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignment",
			pos:  position{line: 943, col: 1, offset: 26973},
			expr: &actionExpr{
				pos: position{line: 944, col: 5, offset: 26991},
				run: (*parser).callonSQLAssignment1,
				expr: &seqExpr{
					pos: position{line: 944, col: 5, offset: 26991},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 944, col: 5, offset: 26991},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 944, col: 9, offset: 26995},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 944, col: 14, offset: 27000},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 944, col: 18, offset: 27004},
								expr: &seqExpr{
									pos: position{line: 944, col: 19, offset: 27005},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 944, col: 19, offset: 27005},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 944, col: 21, offset: 27007},
											name: "AS",
										},
										&ruleRefExpr{
											pos:  position{line: 944, col: 24, offset: 27010},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 944, col: 26, offset: 27012},
											name: "Lval",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignments",
			pos:  position{line: 952, col: 1, offset: 27203},
			expr: &actionExpr{
				pos: position{line: 953, col: 5, offset: 27222},
				run: (*parser).callonSQLAssignments1,
				expr: &seqExpr{
					pos: position{line: 953, col: 5, offset: 27222},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 953, col: 5, offset: 27222},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 953, col: 11, offset: 27228},
								name: "SQLAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 953, col: 25, offset: 27242},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 953, col: 30, offset: 27247},
								expr: &actionExpr{
									pos: position{line: 953, col: 31, offset: 27248},
									run: (*parser).callonSQLAssignments7,
									expr: &seqExpr{
										pos: position{line: 953, col: 31, offset: 27248},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 953, col: 31, offset: 27248},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 953, col: 34, offset: 27251},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 953, col: 38, offset: 27255},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 953, col: 41, offset: 27258},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 953, col: 46, offset: 27263},
													name: "SQLAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLFrom",
			pos:  position{line: 957, col: 1, offset: 27384},
			expr: &choiceExpr{
				pos: position{line: 958, col: 5, offset: 27396},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 958, col: 5, offset: 27396},
						run: (*parser).callonSQLFrom2,
						expr: &seqExpr{
							pos: position{line: 958, col: 5, offset: 27396},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 958, col: 5, offset: 27396},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 958, col: 7, offset: 27398},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 958, col: 12, offset: 27403},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 958, col: 14, offset: 27405},
									label: "table",
									expr: &ruleRefExpr{
										pos:  position{line: 958, col: 20, offset: 27411},
										name: "SQLTable",
									},
								},
								&labeledExpr{
									pos:   position{line: 958, col: 29, offset: 27420},
									label: "alias",
									expr: &zeroOrOneExpr{
										pos: position{line: 958, col: 35, offset: 27426},
										expr: &ruleRefExpr{
											pos:  position{line: 958, col: 35, offset: 27426},
											name: "SQLAlias",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 961, col: 5, offset: 27521},
						run: (*parser).callonSQLFrom12,
						expr: &seqExpr{
							pos: position{line: 961, col: 5, offset: 27521},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 961, col: 5, offset: 27521},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 961, col: 7, offset: 27523},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 961, col: 12, offset: 27528},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 961, col: 14, offset: 27530},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAlias",
			pos:  position{line: 963, col: 1, offset: 27555},
			expr: &choiceExpr{
				pos: position{line: 964, col: 5, offset: 27568},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 964, col: 5, offset: 27568},
						run: (*parser).callonSQLAlias2,
						expr: &seqExpr{
							pos: position{line: 964, col: 5, offset: 27568},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 964, col: 5, offset: 27568},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 964, col: 7, offset: 27570},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 964, col: 10, offset: 27573},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 964, col: 12, offset: 27575},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 964, col: 15, offset: 27578},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 965, col: 5, offset: 27606},
						run: (*parser).callonSQLAlias9,
						expr: &seqExpr{
							pos: position{line: 965, col: 5, offset: 27606},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 965, col: 5, offset: 27606},
									name: "_",
								},
								&notExpr{
									pos: position{line: 965, col: 7, offset: 27608},
									expr: &seqExpr{
										pos: position{line: 965, col: 9, offset: 27610},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 965, col: 9, offset: 27610},
												name: "SQLTokenSentinels",
											},
											&ruleRefExpr{
												pos:  position{line: 965, col: 27, offset: 27628},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 965, col: 30, offset: 27631},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 965, col: 33, offset: 27634},
										name: "Lval",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLTable",
			pos:  position{line: 967, col: 1, offset: 27659},
			expr: &ruleRefExpr{
				pos:  position{line: 968, col: 5, offset: 27672},
				name: "Expr",
			},
		},
		{
			name: "SQLJoins",
			pos:  position{line: 970, col: 1, offset: 27678},
			expr: &actionExpr{
				pos: position{line: 971, col: 5, offset: 27691},
				run: (*parser).callonSQLJoins1,
				expr: &seqExpr{
					pos: position{line: 971, col: 5, offset: 27691},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 971, col: 5, offset: 27691},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 971, col: 11, offset: 27697},
								name: "SQLJoin",
							},
						},
						&labeledExpr{
							pos:   position{line: 971, col: 19, offset: 27705},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 971, col: 24, offset: 27710},
								expr: &actionExpr{
									pos: position{line: 971, col: 25, offset: 27711},
									run: (*parser).callonSQLJoins7,
									expr: &labeledExpr{
										pos:   position{line: 971, col: 25, offset: 27711},
										label: "join",
										expr: &ruleRefExpr{
											pos:  position{line: 971, col: 30, offset: 27716},
											name: "SQLJoin",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoin",
			pos:  position{line: 975, col: 1, offset: 27831},
			expr: &actionExpr{
				pos: position{line: 976, col: 5, offset: 27843},
				run: (*parser).callonSQLJoin1,
				expr: &seqExpr{
					pos: position{line: 976, col: 5, offset: 27843},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 976, col: 5, offset: 27843},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 976, col: 11, offset: 27849},
								name: "SQLJoinStyle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 976, col: 24, offset: 27862},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 976, col: 26, offset: 27864},
							name: "JOIN",
						},
						&ruleRefExpr{
							pos:  position{line: 976, col: 31, offset: 27869},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 976, col: 33, offset: 27871},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 976, col: 39, offset: 27877},
								name: "SQLTable",
							},
						},
						&labeledExpr{
							pos:   position{line: 976, col: 48, offset: 27886},
							label: "alias",
							expr: &zeroOrOneExpr{
								pos: position{line: 976, col: 54, offset: 27892},
								expr: &ruleRefExpr{
									pos:  position{line: 976, col: 54, offset: 27892},
									name: "SQLAlias",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 976, col: 64, offset: 27902},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 976, col: 66, offset: 27904},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 976, col: 69, offset: 27907},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 976, col: 71, offset: 27909},
							label: "leftKey",
							expr: &ruleRefExpr{
								pos:  position{line: 976, col: 79, offset: 27917},
								name: "JoinKey",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 976, col: 87, offset: 27925},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 976, col: 90, offset: 27928},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 976, col: 94, offset: 27932},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 976, col: 97, offset: 27935},
							label: "rightKey",
							expr: &ruleRefExpr{
								pos:  position{line: 976, col: 106, offset: 27944},
								name: "JoinKey",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoinStyle",
			pos:  position{line: 991, col: 1, offset: 28175},
			expr: &choiceExpr{
				pos: position{line: 992, col: 5, offset: 28192},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 992, col: 5, offset: 28192},
						run: (*parser).callonSQLJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 992, col: 5, offset: 28192},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 992, col: 5, offset: 28192},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 992, col: 7, offset: 28194},
									label: "style",
									expr: &choiceExpr{
										pos: position{line: 992, col: 14, offset: 28201},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 992, col: 14, offset: 28201},
												name: "ANTI",
											},
											&ruleRefExpr{
												pos:  position{line: 992, col: 21, offset: 28208},
												name: "INNER",
											},
											&ruleRefExpr{
												pos:  position{line: 992, col: 29, offset: 28216},
												name: "LEFT",
											},
											&ruleRefExpr{
												pos:  position{line: 992, col: 36, offset: 28223},
												name: "RIGHT",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 993, col: 5, offset: 28256},
						run: (*parser).callonSQLJoinStyle11,
						expr: &litMatcher{
							pos:        position{line: 993, col: 5, offset: 28256},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLWhere",
			pos:  position{line: 995, col: 1, offset: 28284},
			expr: &actionExpr{
				pos: position{line: 996, col: 5, offset: 28297},
				run: (*parser).callonSQLWhere1,
				expr: &seqExpr{
					pos: position{line: 996, col: 5, offset: 28297},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 996, col: 5, offset: 28297},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 996, col: 7, offset: 28299},
							name: "WHERE",
						},
						&ruleRefExpr{
							pos:  position{line: 996, col: 13, offset: 28305},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 996, col: 15, offset: 28307},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 996, col: 20, offset: 28312},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLGroupBy",
			pos:  position{line: 998, col: 1, offset: 28348},
			expr: &actionExpr{
				pos: position{line: 999, col: 5, offset: 28363},
				run: (*parser).callonSQLGroupBy1,
				expr: &seqExpr{
					pos: position{line: 999, col: 5, offset: 28363},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 999, col: 5, offset: 28363},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 999, col: 7, offset: 28365},
							name: "GROUP",
						},
						&ruleRefExpr{
							pos:  position{line: 999, col: 13, offset: 28371},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 999, col: 15, offset: 28373},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 999, col: 18, offset: 28376},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 999, col: 20, offset: 28378},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 999, col: 28, offset: 28386},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLHaving",
			pos:  position{line: 1001, col: 1, offset: 28422},
			expr: &actionExpr{
				pos: position{line: 1002, col: 5, offset: 28436},
				run: (*parser).callonSQLHaving1,
				expr: &seqExpr{
					pos: position{line: 1002, col: 5, offset: 28436},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1002, col: 5, offset: 28436},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 1002, col: 7, offset: 28438},
							name: "HAVING",
						},
						&ruleRefExpr{
							pos:  position{line: 1002, col: 14, offset: 28445},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 1002, col: 16, offset: 28447},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 1002, col: 21, offset: 28452},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrderBy",
			pos:  position{line: 1004, col: 1, offset: 28488},
			expr: &actionExpr{
				pos: position{line: 1005, col: 5, offset: 28503},
				run: (*parser).callonSQLOrderBy1,
				expr: &seqExpr{
					pos: position{line: 1005, col: 5, offset: 28503},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1005, col: 5, offset: 28503},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 1005, col: 7, offset: 28505},
							name: "ORDER",
						},
						&ruleRefExpr{
							pos:  position{line: 1005, col: 13, offset: 28511},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 1005, col: 15, offset: 28513},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 1005, col: 18, offset: 28516},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 1005, col: 20, offset: 28518},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 1005, col: 25, offset: 28523},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 1005, col: 31, offset: 28529},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 1005, col: 37, offset: 28535},
								name: "SQLOrder",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrder",
			pos:  position{line: 1009, col: 1, offset: 28646},
			expr: &choiceExpr{
				pos: position{line: 1010, col: 5, offset: 28659},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1010, col: 5, offset: 28659},
						run: (*parser).callonSQLOrder2,
						expr: &seqExpr{
							pos: position{line: 1010, col: 5, offset: 28659},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1010, col: 5, offset: 28659},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 1010, col: 7, offset: 28661},
									label: "dir",
									expr: &choiceExpr{
										pos: position{line: 1010, col: 12, offset: 28666},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1010, col: 12, offset: 28666},
												name: "ASC",
											},
											&ruleRefExpr{
												pos:  position{line: 1010, col: 18, offset: 28672},
												name: "DESC",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1011, col: 5, offset: 28702},
						run: (*parser).callonSQLOrder9,
						expr: &litMatcher{
							pos:        position{line: 1011, col: 5, offset: 28702},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLLimit",
			pos:  position{line: 1013, col: 1, offset: 28728},
			expr: &choiceExpr{
				pos: position{line: 1014, col: 5, offset: 28741},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1014, col: 5, offset: 28741},
						run: (*parser).callonSQLLimit2,
						expr: &seqExpr{
							pos: position{line: 1014, col: 5, offset: 28741},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1014, col: 5, offset: 28741},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 1014, col: 7, offset: 28743},
									name: "LIMIT",
								},
								&ruleRefExpr{
									pos:  position{line: 1014, col: 13, offset: 28749},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 1014, col: 15, offset: 28751},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 1014, col: 21, offset: 28757},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1015, col: 5, offset: 28788},
						run: (*parser).callonSQLLimit9,
						expr: &litMatcher{
							pos:        position{line: 1015, col: 5, offset: 28788},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SELECT",
			pos:  position{line: 1017, col: 1, offset: 28810},
			expr: &actionExpr{
				pos: position{line: 1017, col: 10, offset: 28819},
				run: (*parser).callonSELECT1,
				expr: &litMatcher{
					pos:        position{line: 1017, col: 10, offset: 28819},
					val:        "select",
					ignoreCase: true,
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 1018, col: 1, offset: 28854},
			expr: &actionExpr{
				pos: position{line: 1018, col: 6, offset: 28859},
				run: (*parser).callonAS1,
				expr: &litMatcher{
					pos:        position{line: 1018, col: 6, offset: 28859},
					val:        "as",
					ignoreCase: true,
				},
			},
		},
		{
			name: "FROM",
			pos:  position{line: 1019, col: 1, offset: 28886},
			expr: &actionExpr{
				pos: position{line: 1019, col: 8, offset: 28893},
				run: (*parser).callonFROM1,
				expr: &litMatcher{
					pos:        position{line: 1019, col: 8, offset: 28893},
					val:        "from",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JOIN",
			pos:  position{line: 1020, col: 1, offset: 28924},
			expr: &actionExpr{
				pos: position{line: 1020, col: 8, offset: 28931},
				run: (*parser).callonJOIN1,
				expr: &litMatcher{
					pos:        position{line: 1020, col: 8, offset: 28931},
					val:        "join",
					ignoreCase: true,
				},
			},
		},
		{
			name: "WHERE",
			pos:  position{line: 1021, col: 1, offset: 28962},
			expr: &actionExpr{
				pos: position{line: 1021, col: 9, offset: 28970},
				run: (*parser).callonWHERE1,
				expr: &litMatcher{
					pos:        position{line: 1021, col: 9, offset: 28970},
					val:        "where",
					ignoreCase: true,
				},
			},
		},
		{
			name: "GROUP",
			pos:  position{line: 1022, col: 1, offset: 29003},
			expr: &actionExpr{
				pos: position{line: 1022, col: 9, offset: 29011},
				run: (*parser).callonGROUP1,
				expr: &litMatcher{
					pos:        position{line: 1022, col: 9, offset: 29011},
					val:        "group",
					ignoreCase: true,
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 1023, col: 1, offset: 29044},
			expr: &actionExpr{
				pos: position{line: 1023, col: 6, offset: 29049},
				run: (*parser).callonBY1,
				expr: &litMatcher{
					pos:        position{line: 1023, col: 6, offset: 29049},
					val:        "by",
					ignoreCase: true,
				},
			},
		},
		{
			name: "HAVING",
			pos:  position{line: 1024, col: 1, offset: 29076},
			expr: &actionExpr{
				pos: position{line: 1024, col: 10, offset: 29085},
				run: (*parser).callonHAVING1,
				expr: &litMatcher{
					pos:        position{line: 1024, col: 10, offset: 29085},
					val:        "having",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ORDER",
			pos:  position{line: 1025, col: 1, offset: 29120},
			expr: &actionExpr{
				pos: position{line: 1025, col: 9, offset: 29128},
				run: (*parser).callonORDER1,
				expr: &litMatcher{
					pos:        position{line: 1025, col: 9, offset: 29128},
					val:        "order",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ON",
			pos:  position{line: 1026, col: 1, offset: 29161},
			expr: &actionExpr{
				pos: position{line: 1026, col: 6, offset: 29166},
				run: (*parser).callonON1,
				expr: &litMatcher{
					pos:        position{line: 1026, col: 6, offset: 29166},
					val:        "on",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LIMIT",
			pos:  position{line: 1027, col: 1, offset: 29193},
			expr: &actionExpr{
				pos: position{line: 1027, col: 9, offset: 29201},
				run: (*parser).callonLIMIT1,
				expr: &litMatcher{
					pos:        position{line: 1027, col: 9, offset: 29201},
					val:        "limit",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ASC",
			pos:  position{line: 1028, col: 1, offset: 29234},
			expr: &actionExpr{
				pos: position{line: 1028, col: 7, offset: 29240},
				run: (*parser).callonASC1,
				expr: &litMatcher{
					pos:        position{line: 1028, col: 7, offset: 29240},
					val:        "asc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "DESC",
			pos:  position{line: 1029, col: 1, offset: 29269},
			expr: &actionExpr{
				pos: position{line: 1029, col: 8, offset: 29276},
				run: (*parser).callonDESC1,
				expr: &litMatcher{
					pos:        position{line: 1029, col: 8, offset: 29276},
					val:        "desc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ANTI",
			pos:  position{line: 1030, col: 1, offset: 29307},
			expr: &actionExpr{
				pos: position{line: 1030, col: 8, offset: 29314},
				run: (*parser).callonANTI1,
				expr: &litMatcher{
					pos:        position{line: 1030, col: 8, offset: 29314},
					val:        "anti",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LEFT",
			pos:  position{line: 1031, col: 1, offset: 29345},
			expr: &actionExpr{
				pos: position{line: 1031, col: 8, offset: 29352},
				run: (*parser).callonLEFT1,
				expr: &litMatcher{
					pos:        position{line: 1031, col: 8, offset: 29352},
					val:        "left",
					ignoreCase: true,
				},
			},
		},
		{
			name: "RIGHT",
			pos:  position{line: 1032, col: 1, offset: 29383},
			expr: &actionExpr{
				pos: position{line: 1032, col: 9, offset: 29391},
				run: (*parser).callonRIGHT1,
				expr: &litMatcher{
					pos:        position{line: 1032, col: 9, offset: 29391},
					val:        "right",
					ignoreCase: true,
				},
			},
		},
		{
			name: "INNER",
			pos:  position{line: 1033, col: 1, offset: 29424},
			expr: &actionExpr{
				pos: position{line: 1033, col: 9, offset: 29432},
				run: (*parser).callonINNER1,
				expr: &litMatcher{
					pos:        position{line: 1033, col: 9, offset: 29432},
					val:        "inner",
					ignoreCase: true,
				},
			},
		},
		{
			name: "SQLTokenSentinels",
			pos:  position{line: 1035, col: 1, offset: 29466},
			expr: &choiceExpr{
				pos: position{line: 1036, col: 5, offset: 29488},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1036, col: 5, offset: 29488},
						name: "SELECT",
					},
					&ruleRefExpr{
						pos:  position{line: 1036, col: 14, offset: 29497},
						name: "AS",
					},
					&ruleRefExpr{
						pos:  position{line: 1036, col: 19, offset: 29502},
						name: "FROM",
					},
					&ruleRefExpr{
						pos:  position{line: 1036, col: 26, offset: 29509},
						name: "JOIN",
					},
					&ruleRefExpr{
						pos:  position{line: 1036, col: 33, offset: 29516},
						name: "WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 1036, col: 41, offset: 29524},
						name: "GROUP",
					},
					&ruleRefExpr{
						pos:  position{line: 1036, col: 49, offset: 29532},
						name: "HAVING",
					},
					&ruleRefExpr{
						pos:  position{line: 1036, col: 58, offset: 29541},
						name: "ORDER",
					},
					&ruleRefExpr{
						pos:  position{line: 1036, col: 66, offset: 29549},
						name: "LIMIT",
					},
					&ruleRefExpr{
						pos:  position{line: 1036, col: 74, offset: 29557},
						name: "ON",
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 1040, col: 1, offset: 29583},
			expr: &choiceExpr{
				pos: position{line: 1041, col: 5, offset: 29595},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1041, col: 5, offset: 29595},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1042, col: 5, offset: 29611},
						name: "TemplateLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1043, col: 5, offset: 29631},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1044, col: 5, offset: 29649},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1045, col: 5, offset: 29668},
						name: "BytesLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1046, col: 5, offset: 29685},
						name: "Duration",
					},
					&ruleRefExpr{
						pos:  position{line: 1047, col: 5, offset: 29698},
						name: "Time",
					},
					&ruleRefExpr{
						pos:  position{line: 1048, col: 5, offset: 29707},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1049, col: 5, offset: 29724},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1050, col: 5, offset: 29743},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1051, col: 5, offset: 29762},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 1053, col: 1, offset: 29775},
			expr: &choiceExpr{
				pos: position{line: 1054, col: 5, offset: 29793},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1054, col: 5, offset: 29793},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 1054, col: 5, offset: 29793},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1054, col: 5, offset: 29793},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1054, col: 7, offset: 29795},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 1054, col: 14, offset: 29802},
									expr: &ruleRefExpr{
										pos:  position{line: 1054, col: 15, offset: 29803},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1057, col: 5, offset: 29918},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 1057, col: 5, offset: 29918},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1057, col: 7, offset: 29920},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 1061, col: 1, offset: 30024},
			expr: &choiceExpr{
				pos: position{line: 1062, col: 5, offset: 30043},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1062, col: 5, offset: 30043},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 1062, col: 5, offset: 30043},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1062, col: 5, offset: 30043},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1062, col: 7, offset: 30045},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 1062, col: 11, offset: 30049},
									expr: &ruleRefExpr{
										pos:  position{line: 1062, col: 12, offset: 30050},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1065, col: 5, offset: 30164},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 1065, col: 5, offset: 30164},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1065, col: 7, offset: 30166},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 1069, col: 1, offset: 30265},
			expr: &actionExpr{
				pos: position{line: 1070, col: 5, offset: 30282},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1070, col: 5, offset: 30282},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1070, col: 7, offset: 30284},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 1074, col: 1, offset: 30397},
			expr: &actionExpr{
				pos: position{line: 1075, col: 5, offset: 30416},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1075, col: 5, offset: 30416},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1075, col: 7, offset: 30418},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 1079, col: 1, offset: 30527},
			expr: &choiceExpr{
				pos: position{line: 1080, col: 5, offset: 30546},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1080, col: 5, offset: 30546},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 1080, col: 5, offset: 30546},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1081, col: 5, offset: 30650},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 1081, col: 5, offset: 30650},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 1083, col: 1, offset: 30752},
			expr: &actionExpr{
				pos: position{line: 1084, col: 5, offset: 30768},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 1084, col: 5, offset: 30768},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "BytesLiteral",
			pos:  position{line: 1086, col: 1, offset: 30864},
			expr: &actionExpr{
				pos: position{line: 1087, col: 5, offset: 30881},
				run: (*parser).callonBytesLiteral1,
				expr: &seqExpr{
					pos: position{line: 1087, col: 5, offset: 30881},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1087, col: 5, offset: 30881},
							val:        "0x",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1087, col: 10, offset: 30886},
							expr: &ruleRefExpr{
								pos:  position{line: 1087, col: 10, offset: 30886},
								name: "HexDigit",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeLiteral",
			pos:  position{line: 1091, col: 1, offset: 31001},
			expr: &actionExpr{
				pos: position{line: 1092, col: 5, offset: 31017},
				run: (*parser).callonTypeLiteral1,
				expr: &seqExpr{
					pos: position{line: 1092, col: 5, offset: 31017},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1092, col: 5, offset: 31017},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1092, col: 9, offset: 31021},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1092, col: 13, offset: 31025},
								name: "Type",
							},
						},
						&litMatcher{
							pos:        position{line: 1092, col: 18, offset: 31030},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "CastType",
			pos:  position{line: 1096, col: 1, offset: 31119},
			expr: &choiceExpr{
				pos: position{line: 1097, col: 5, offset: 31132},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1097, col: 5, offset: 31132},
						name: "TypeLiteral",
					},
					&actionExpr{
						pos: position{line: 1098, col: 5, offset: 31148},
						run: (*parser).callonCastType3,
						expr: &labeledExpr{
							pos:   position{line: 1098, col: 5, offset: 31148},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1098, col: 9, offset: 31152},
								name: "PrimitiveType",
							},
						},
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 1102, col: 1, offset: 31251},
			expr: &choiceExpr{
				pos: position{line: 1103, col: 5, offset: 31260},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1103, col: 5, offset: 31260},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1104, col: 5, offset: 31276},
						name: "AmbiguousType",
					},
					&ruleRefExpr{
						pos:  position{line: 1105, col: 5, offset: 31294},
						name: "ComplexType",
					},
				},
			},
		},
		{
			name: "AmbiguousType",
			pos:  position{line: 1107, col: 1, offset: 31307},
			expr: &choiceExpr{
				pos: position{line: 1108, col: 5, offset: 31325},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1108, col: 5, offset: 31325},
						run: (*parser).callonAmbiguousType2,
						expr: &seqExpr{
							pos: position{line: 1108, col: 5, offset: 31325},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1108, col: 5, offset: 31325},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1108, col: 10, offset: 31330},
										name: "PrimitiveType",
									},
								},
								&notExpr{
									pos: position{line: 1108, col: 24, offset: 31344},
									expr: &ruleRefExpr{
										pos:  position{line: 1108, col: 25, offset: 31345},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1109, col: 5, offset: 31385},
						run: (*parser).callonAmbiguousType8,
						expr: &seqExpr{
							pos: position{line: 1109, col: 5, offset: 31385},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1109, col: 5, offset: 31385},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1109, col: 10, offset: 31390},
										name: "IdentifierName",
									},
								},
								&labeledExpr{
									pos:   position{line: 1109, col: 25, offset: 31405},
									label: "opt",
									expr: &zeroOrOneExpr{
										pos: position{line: 1109, col: 29, offset: 31409},
										expr: &seqExpr{
											pos: position{line: 1109, col: 30, offset: 31410},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1109, col: 30, offset: 31410},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 1109, col: 33, offset: 31413},
													val:        "=",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 1109, col: 37, offset: 31417},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 1109, col: 40, offset: 31420},
													name: "Type",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1115, col: 5, offset: 31652},
						run: (*parser).callonAmbiguousType19,
						expr: &labeledExpr{
							pos:   position{line: 1115, col: 5, offset: 31652},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1115, col: 10, offset: 31657},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1118, col: 5, offset: 31757},
						run: (*parser).callonAmbiguousType22,
						expr: &seqExpr{
							pos: position{line: 1118, col: 5, offset: 31757},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1118, col: 5, offset: 31757},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1118, col: 9, offset: 31761},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1118, col: 12, offset: 31764},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 1118, col: 14, offset: 31766},
										name: "TypeUnion",
									},
								},
								&litMatcher{
									pos:        position{line: 1118, col: 24, offset: 31776},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeUnion",
			pos:  position{line: 1120, col: 1, offset: 31799},
			expr: &actionExpr{
				pos: position{line: 1121, col: 5, offset: 31813},
				run: (*parser).callonTypeUnion1,
				expr: &labeledExpr{
					pos:   position{line: 1121, col: 5, offset: 31813},
					label: "types",
					expr: &ruleRefExpr{
						pos:  position{line: 1121, col: 11, offset: 31819},
						name: "TypeList",
					},
				},
			},
		},
		{
			name: "TypeList",
			pos:  position{line: 1125, col: 1, offset: 31915},
			expr: &actionExpr{
				pos: position{line: 1126, col: 5, offset: 31928},
				run: (*parser).callonTypeList1,
				expr: &seqExpr{
					pos: position{line: 1126, col: 5, offset: 31928},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1126, col: 5, offset: 31928},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1126, col: 11, offset: 31934},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 1126, col: 16, offset: 31939},
							label: "rest",
							expr: &oneOrMoreExpr{
								pos: position{line: 1126, col: 21, offset: 31944},
								expr: &ruleRefExpr{
									pos:  position{line: 1126, col: 21, offset: 31944},
									name: "TypeListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeListTail",
			pos:  position{line: 1130, col: 1, offset: 32038},
			expr: &actionExpr{
				pos: position{line: 1130, col: 16, offset: 32053},
				run: (*parser).callonTypeListTail1,
				expr: &seqExpr{
					pos: position{line: 1130, col: 16, offset: 32053},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1130, col: 16, offset: 32053},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1130, col: 19, offset: 32056},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1130, col: 23, offset: 32060},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1130, col: 26, offset: 32063},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1130, col: 30, offset: 32067},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexType",
			pos:  position{line: 1132, col: 1, offset: 32093},
			expr: &choiceExpr{
				pos: position{line: 1133, col: 5, offset: 32109},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1133, col: 5, offset: 32109},
						run: (*parser).callonComplexType2,
						expr: &seqExpr{
							pos: position{line: 1133, col: 5, offset: 32109},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1133, col: 5, offset: 32109},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1133, col: 9, offset: 32113},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1133, col: 12, offset: 32116},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 1133, col: 19, offset: 32123},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1133, col: 33, offset: 32137},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1133, col: 36, offset: 32140},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1136, col: 5, offset: 32237},
						run: (*parser).callonComplexType10,
						expr: &seqExpr{
							pos: position{line: 1136, col: 5, offset: 32237},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1136, col: 5, offset: 32237},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1136, col: 9, offset: 32241},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1136, col: 12, offset: 32244},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1136, col: 16, offset: 32248},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1136, col: 21, offset: 32253},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1136, col: 24, offset: 32256},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1139, col: 5, offset: 32347},
						run: (*parser).callonComplexType18,
						expr: &seqExpr{
							pos: position{line: 1139, col: 5, offset: 32347},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1139, col: 5, offset: 32347},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1139, col: 10, offset: 32352},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1139, col: 13, offset: 32355},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1139, col: 17, offset: 32359},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1139, col: 22, offset: 32364},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1139, col: 25, offset: 32367},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1142, col: 5, offset: 32457},
						run: (*parser).callonComplexType26,
						expr: &seqExpr{
							pos: position{line: 1142, col: 5, offset: 32457},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1142, col: 5, offset: 32457},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1142, col: 10, offset: 32462},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1142, col: 13, offset: 32465},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 1142, col: 21, offset: 32473},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1142, col: 26, offset: 32478},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1142, col: 29, offset: 32481},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1142, col: 33, offset: 32485},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1142, col: 36, offset: 32488},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 1142, col: 44, offset: 32496},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1142, col: 49, offset: 32501},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1142, col: 52, offset: 32504},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateLiteral",
			pos:  position{line: 1146, col: 1, offset: 32620},
			expr: &actionExpr{
				pos: position{line: 1147, col: 5, offset: 32640},
				run: (*parser).callonTemplateLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1147, col: 5, offset: 32640},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1147, col: 7, offset: 32642},
						name: "TemplateLiteralParts",
					},
				},
			},
		},
		{
			name: "TemplateLiteralParts",
			pos:  position{line: 1154, col: 1, offset: 32858},
			expr: &choiceExpr{
				pos: position{line: 1155, col: 5, offset: 32883},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1155, col: 5, offset: 32883},
						run: (*parser).callonTemplateLiteralParts2,
						expr: &seqExpr{
							pos: position{line: 1155, col: 5, offset: 32883},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1155, col: 5, offset: 32883},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1155, col: 9, offset: 32887},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1155, col: 11, offset: 32889},
										expr: &ruleRefExpr{
											pos:  position{line: 1155, col: 11, offset: 32889},
											name: "TemplateDoubleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1155, col: 37, offset: 32915},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1156, col: 5, offset: 32941},
						run: (*parser).callonTemplateLiteralParts9,
						expr: &seqExpr{
							pos: position{line: 1156, col: 5, offset: 32941},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1156, col: 5, offset: 32941},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1156, col: 9, offset: 32945},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1156, col: 11, offset: 32947},
										expr: &ruleRefExpr{
											pos:  position{line: 1156, col: 11, offset: 32947},
											name: "TemplateSingleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1156, col: 37, offset: 32973},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedPart",
			pos:  position{line: 1158, col: 1, offset: 32996},
			expr: &choiceExpr{
				pos: position{line: 1159, col: 5, offset: 33025},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1159, col: 5, offset: 33025},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 1160, col: 5, offset: 33042},
						run: (*parser).callonTemplateDoubleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 1160, col: 5, offset: 33042},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1160, col: 7, offset: 33044},
								expr: &ruleRefExpr{
									pos:  position{line: 1160, col: 7, offset: 33044},
									name: "TemplateDoubleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedChar",
			pos:  position{line: 1164, col: 1, offset: 33181},
			expr: &choiceExpr{
				pos: position{line: 1165, col: 5, offset: 33210},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1165, col: 5, offset: 33210},
						run: (*parser).callonTemplateDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1165, col: 5, offset: 33210},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1165, col: 5, offset: 33210},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1165, col: 10, offset: 33215},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1165, col: 12, offset: 33217},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1166, col: 5, offset: 33244},
						run: (*parser).callonTemplateDoubleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1166, col: 5, offset: 33244},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1166, col: 5, offset: 33244},
									expr: &litMatcher{
										pos:        position{line: 1166, col: 7, offset: 33246},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1166, col: 13, offset: 33252},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1166, col: 15, offset: 33254},
										name: "DoubleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedPart",
			pos:  position{line: 1168, col: 1, offset: 33290},
			expr: &choiceExpr{
				pos: position{line: 1169, col: 5, offset: 33319},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1169, col: 5, offset: 33319},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 1170, col: 5, offset: 33336},
						run: (*parser).callonTemplateSingleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 1170, col: 5, offset: 33336},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1170, col: 7, offset: 33338},
								expr: &ruleRefExpr{
									pos:  position{line: 1170, col: 7, offset: 33338},
									name: "TemplateSingleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedChar",
			pos:  position{line: 1174, col: 1, offset: 33475},
			expr: &choiceExpr{
				pos: position{line: 1175, col: 5, offset: 33504},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1175, col: 5, offset: 33504},
						run: (*parser).callonTemplateSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1175, col: 5, offset: 33504},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1175, col: 5, offset: 33504},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1175, col: 10, offset: 33509},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1175, col: 12, offset: 33511},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1176, col: 5, offset: 33538},
						run: (*parser).callonTemplateSingleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1176, col: 5, offset: 33538},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1176, col: 5, offset: 33538},
									expr: &litMatcher{
										pos:        position{line: 1176, col: 7, offset: 33540},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1176, col: 13, offset: 33546},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1176, col: 15, offset: 33548},
										name: "SingleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateExpr",
			pos:  position{line: 1178, col: 1, offset: 33584},
			expr: &actionExpr{
				pos: position{line: 1179, col: 5, offset: 33601},
				run: (*parser).callonTemplateExpr1,
				expr: &seqExpr{
					pos: position{line: 1179, col: 5, offset: 33601},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1179, col: 5, offset: 33601},
							val:        "${",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1179, col: 10, offset: 33606},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1179, col: 13, offset: 33609},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 1179, col: 15, offset: 33611},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1179, col: 20, offset: 33616},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1179, col: 23, offset: 33619},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 1194, col: 1, offset: 33915},
			expr: &actionExpr{
				pos: position{line: 1195, col: 5, offset: 33933},
				run: (*parser).callonPrimitiveType1,
				expr: &choiceExpr{
					pos: position{line: 1195, col: 9, offset: 33937},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 1195, col: 9, offset: 33937},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1195, col: 19, offset: 33947},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1195, col: 30, offset: 33958},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1195, col: 41, offset: 33969},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1196, col: 9, offset: 33986},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1196, col: 18, offset: 33995},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1196, col: 28, offset: 34005},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1196, col: 38, offset: 34015},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1197, col: 9, offset: 34031},
							val:        "float16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1197, col: 21, offset: 34043},
							val:        "float32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1197, col: 33, offset: 34055},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1198, col: 9, offset: 34073},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1198, col: 18, offset: 34082},
							val:        "string",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1199, col: 9, offset: 34099},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1199, col: 22, offset: 34112},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1200, col: 9, offset: 34127},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1201, col: 9, offset: 34143},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1201, col: 16, offset: 34150},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1202, col: 9, offset: 34164},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1202, col: 18, offset: 34173},
							val:        "null",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldList",
			pos:  position{line: 1206, col: 1, offset: 34288},
			expr: &choiceExpr{
				pos: position{line: 1207, col: 5, offset: 34306},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1207, col: 5, offset: 34306},
						run: (*parser).callonTypeFieldList2,
						expr: &seqExpr{
							pos: position{line: 1207, col: 5, offset: 34306},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1207, col: 5, offset: 34306},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 1207, col: 11, offset: 34312},
										name: "TypeField",
									},
								},
								&labeledExpr{
									pos:   position{line: 1207, col: 21, offset: 34322},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1207, col: 26, offset: 34327},
										expr: &ruleRefExpr{
											pos:  position{line: 1207, col: 26, offset: 34327},
											name: "TypeFieldListTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1210, col: 5, offset: 34429},
						run: (*parser).callonTypeFieldList9,
						expr: &litMatcher{
							pos:        position{line: 1210, col: 5, offset: 34429},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTail",
			pos:  position{line: 1212, col: 1, offset: 34453},
			expr: &actionExpr{
				pos: position{line: 1212, col: 21, offset: 34473},
				run: (*parser).callonTypeFieldListTail1,
				expr: &seqExpr{
					pos: position{line: 1212, col: 21, offset: 34473},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1212, col: 21, offset: 34473},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1212, col: 24, offset: 34476},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1212, col: 28, offset: 34480},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1212, col: 31, offset: 34483},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1212, col: 35, offset: 34487},
								name: "TypeField",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeField",
			pos:  position{line: 1214, col: 1, offset: 34518},
			expr: &actionExpr{
				pos: position{line: 1215, col: 5, offset: 34532},
				run: (*parser).callonTypeField1,
				expr: &seqExpr{
					pos: position{line: 1215, col: 5, offset: 34532},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1215, col: 5, offset: 34532},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1215, col: 10, offset: 34537},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1215, col: 20, offset: 34547},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1215, col: 23, offset: 34550},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1215, col: 27, offset: 34554},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1215, col: 30, offset: 34557},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1215, col: 34, offset: 34561},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 1219, col: 1, offset: 34643},
			expr: &choiceExpr{
				pos: position{line: 1220, col: 5, offset: 34657},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1220, col: 5, offset: 34657},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 1221, col: 5, offset: 34676},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 1223, col: 1, offset: 34690},
			expr: &actionExpr{
				pos: position{line: 1223, col: 12, offset: 34701},
				run: (*parser).callonAndToken1,
				expr: &seqExpr{
					pos: position{line: 1223, col: 12, offset: 34701},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1223, col: 13, offset: 34702},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1223, col: 13, offset: 34702},
									val:        "and",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1223, col: 21, offset: 34710},
									val:        "AND",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1223, col: 28, offset: 34717},
							expr: &ruleRefExpr{
								pos:  position{line: 1223, col: 29, offset: 34718},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 1224, col: 1, offset: 34755},
			expr: &actionExpr{
				pos: position{line: 1224, col: 11, offset: 34765},
				run: (*parser).callonOrToken1,
				expr: &seqExpr{
					pos: position{line: 1224, col: 11, offset: 34765},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1224, col: 12, offset: 34766},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1224, col: 12, offset: 34766},
									val:        "or",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1224, col: 19, offset: 34773},
									val:        "OR",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1224, col: 25, offset: 34779},
							expr: &ruleRefExpr{
								pos:  position{line: 1224, col: 26, offset: 34780},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 1225, col: 1, offset: 34816},
			expr: &actionExpr{
				pos: position{line: 1225, col: 11, offset: 34826},
				run: (*parser).callonInToken1,
				expr: &seqExpr{
					pos: position{line: 1225, col: 11, offset: 34826},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1225, col: 11, offset: 34826},
							val:        "in",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1225, col: 16, offset: 34831},
							expr: &ruleRefExpr{
								pos:  position{line: 1225, col: 17, offset: 34832},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 1226, col: 1, offset: 34868},
			expr: &actionExpr{
				pos: position{line: 1226, col: 12, offset: 34879},
				run: (*parser).callonNotToken1,
				expr: &seqExpr{
					pos: position{line: 1226, col: 12, offset: 34879},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1226, col: 13, offset: 34880},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1226, col: 13, offset: 34880},
									val:        "not",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1226, col: 21, offset: 34888},
									val:        "NOT",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1226, col: 28, offset: 34895},
							expr: &ruleRefExpr{
								pos:  position{line: 1226, col: 29, offset: 34896},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 1227, col: 1, offset: 34933},
			expr: &actionExpr{
				pos: position{line: 1227, col: 11, offset: 34943},
				run: (*parser).callonByToken1,
				expr: &seqExpr{
					pos: position{line: 1227, col: 11, offset: 34943},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1227, col: 11, offset: 34943},
							val:        "by",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1227, col: 16, offset: 34948},
							expr: &ruleRefExpr{
								pos:  position{line: 1227, col: 17, offset: 34949},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 1229, col: 1, offset: 34986},
			expr: &charClassMatcher{
				pos:        position{line: 1229, col: 19, offset: 35004},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 1231, col: 1, offset: 35016},
			expr: &choiceExpr{
				pos: position{line: 1231, col: 18, offset: 35033},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1231, col: 18, offset: 35033},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 1231, col: 36, offset: 35051},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 1233, col: 1, offset: 35058},
			expr: &actionExpr{
				pos: position{line: 1234, col: 5, offset: 35073},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 1234, col: 5, offset: 35073},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 1234, col: 8, offset: 35076},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 1236, col: 1, offset: 35157},
			expr: &choiceExpr{
				pos: position{line: 1237, col: 5, offset: 35176},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1237, col: 5, offset: 35176},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 1237, col: 5, offset: 35176},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1237, col: 5, offset: 35176},
									expr: &seqExpr{
										pos: position{line: 1237, col: 7, offset: 35178},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1237, col: 7, offset: 35178},
												name: "IDGuard",
											},
											&notExpr{
												pos: position{line: 1237, col: 15, offset: 35186},
												expr: &ruleRefExpr{
													pos:  position{line: 1237, col: 16, offset: 35187},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1237, col: 32, offset: 35203},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1237, col: 48, offset: 35219},
									expr: &ruleRefExpr{
										pos:  position{line: 1237, col: 48, offset: 35219},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1238, col: 5, offset: 35270},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 1238, col: 5, offset: 35270},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1239, col: 5, offset: 35309},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 1239, col: 5, offset: 35309},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1239, col: 5, offset: 35309},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1239, col: 10, offset: 35314},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1239, col: 13, offset: 35317},
										name: "IDGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1241, col: 5, offset: 35408},
						run: (*parser).callonIdentifierName19,
						expr: &litMatcher{
							pos:        position{line: 1241, col: 5, offset: 35408},
							val:        "type",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1242, col: 5, offset: 35450},
						run: (*parser).callonIdentifierName21,
						expr: &seqExpr{
							pos: position{line: 1242, col: 5, offset: 35450},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1242, col: 5, offset: 35450},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1242, col: 8, offset: 35453},
										name: "SQLTokenSentinels",
									},
								},
								&andExpr{
									pos: position{line: 1242, col: 26, offset: 35471},
									expr: &seqExpr{
										pos: position{line: 1242, col: 28, offset: 35473},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1242, col: 28, offset: 35473},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1242, col: 31, offset: 35476},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierNames",
			pos:  position{line: 1244, col: 1, offset: 35501},
			expr: &actionExpr{
				pos: position{line: 1245, col: 5, offset: 35521},
				run: (*parser).callonIdentifierNames1,
				expr: &seqExpr{
					pos: position{line: 1245, col: 5, offset: 35521},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1245, col: 5, offset: 35521},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1245, col: 11, offset: 35527},
								name: "IdentifierName",
							},
						},
						&labeledExpr{
							pos:   position{line: 1245, col: 26, offset: 35542},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1245, col: 31, offset: 35547},
								expr: &actionExpr{
									pos: position{line: 1245, col: 32, offset: 35548},
									run: (*parser).callonIdentifierNames7,
									expr: &seqExpr{
										pos: position{line: 1245, col: 32, offset: 35548},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1245, col: 32, offset: 35548},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1245, col: 35, offset: 35551},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1245, col: 39, offset: 35555},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 1245, col: 42, offset: 35558},
												label: "id",
												expr: &ruleRefExpr{
													pos:  position{line: 1245, col: 45, offset: 35561},
													name: "IdentifierName",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IDGuard",
			pos:  position{line: 1249, col: 1, offset: 35677},
			expr: &choiceExpr{
				pos: position{line: 1250, col: 5, offset: 35689},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1250, col: 5, offset: 35689},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1251, col: 5, offset: 35708},
						name: "NullLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1252, col: 5, offset: 35724},
						name: "NaN",
					},
					&ruleRefExpr{
						pos:  position{line: 1253, col: 5, offset: 35732},
						name: "Infinity",
					},
				},
			},
		},
		{
			name: "Time",
			pos:  position{line: 1255, col: 1, offset: 35742},
			expr: &actionExpr{
				pos: position{line: 1256, col: 5, offset: 35751},
				run: (*parser).callonTime1,
				expr: &seqExpr{
					pos: position{line: 1256, col: 5, offset: 35751},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1256, col: 5, offset: 35751},
							name: "FullDate",
						},
						&litMatcher{
							pos:        position{line: 1256, col: 14, offset: 35760},
							val:        "T",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1256, col: 18, offset: 35764},
							name: "FullTime",
						},
					},
				},
			},
		},
		{
			name: "FullDate",
			pos:  position{line: 1260, col: 1, offset: 35884},
			expr: &seqExpr{
				pos: position{line: 1260, col: 12, offset: 35895},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1260, col: 12, offset: 35895},
						name: "D4",
					},
					&litMatcher{
						pos:        position{line: 1260, col: 15, offset: 35898},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1260, col: 19, offset: 35902},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1260, col: 22, offset: 35905},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1260, col: 26, offset: 35909},
						name: "D2",
					},
				},
			},
		},
		{
			name: "D4",
			pos:  position{line: 1262, col: 1, offset: 35913},
			expr: &seqExpr{
				pos: position{line: 1262, col: 6, offset: 35918},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1262, col: 6, offset: 35918},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1262, col: 11, offset: 35923},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1262, col: 16, offset: 35928},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1262, col: 21, offset: 35933},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "D2",
			pos:  position{line: 1263, col: 1, offset: 35939},
			expr: &seqExpr{
				pos: position{line: 1263, col: 6, offset: 35944},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1263, col: 6, offset: 35944},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1263, col: 11, offset: 35949},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "FullTime",
			pos:  position{line: 1265, col: 1, offset: 35956},
			expr: &seqExpr{
				pos: position{line: 1265, col: 12, offset: 35967},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1265, col: 12, offset: 35967},
						name: "PartialTime",
					},
					&ruleRefExpr{
						pos:  position{line: 1265, col: 24, offset: 35979},
						name: "TimeOffset",
					},
				},
			},
		},
		{
			name: "PartialTime",
			pos:  position{line: 1267, col: 1, offset: 35991},
			expr: &seqExpr{
				pos: position{line: 1267, col: 15, offset: 36005},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1267, col: 15, offset: 36005},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1267, col: 18, offset: 36008},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1267, col: 22, offset: 36012},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1267, col: 25, offset: 36015},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1267, col: 29, offset: 36019},
						name: "D2",
					},
					&zeroOrOneExpr{
						pos: position{line: 1267, col: 32, offset: 36022},
						expr: &seqExpr{
							pos: position{line: 1267, col: 33, offset: 36023},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1267, col: 33, offset: 36023},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1267, col: 37, offset: 36027},
									expr: &charClassMatcher{
										pos:        position{line: 1267, col: 37, offset: 36027},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeOffset",
			pos:  position{line: 1269, col: 1, offset: 36037},
			expr: &choiceExpr{
				pos: position{line: 1270, col: 5, offset: 36052},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1270, col: 5, offset: 36052},
						val:        "Z",
						ignoreCase: false,
					},
					&seqExpr{
						pos: position{line: 1271, col: 5, offset: 36060},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 1271, col: 6, offset: 36061},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1271, col: 6, offset: 36061},
										val:        "+",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 1271, col: 12, offset: 36067},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1271, col: 17, offset: 36072},
								name: "D2",
							},
							&litMatcher{
								pos:        position{line: 1271, col: 20, offset: 36075},
								val:        ":",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 1271, col: 24, offset: 36079},
								name: "D2",
							},
							&zeroOrOneExpr{
								pos: position{line: 1271, col: 27, offset: 36082},
								expr: &seqExpr{
									pos: position{line: 1271, col: 28, offset: 36083},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1271, col: 28, offset: 36083},
											val:        ".",
											ignoreCase: false,
										},
										&oneOrMoreExpr{
											pos: position{line: 1271, col: 32, offset: 36087},
											expr: &charClassMatcher{
												pos:        position{line: 1271, col: 32, offset: 36087},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 1273, col: 1, offset: 36097},
			expr: &actionExpr{
				pos: position{line: 1274, col: 5, offset: 36110},
				run: (*parser).callonDuration1,
				expr: &seqExpr{
					pos: position{line: 1274, col: 5, offset: 36110},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1274, col: 5, offset: 36110},
							expr: &litMatcher{
								pos:        position{line: 1274, col: 5, offset: 36110},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1274, col: 10, offset: 36115},
							expr: &seqExpr{
								pos: position{line: 1274, col: 11, offset: 36116},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1274, col: 11, offset: 36116},
										name: "Decimal",
									},
									&ruleRefExpr{
										pos:  position{line: 1274, col: 19, offset: 36124},
										name: "TimeUnit",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Decimal",
			pos:  position{line: 1278, col: 1, offset: 36250},
			expr: &seqExpr{
				pos: position{line: 1278, col: 11, offset: 36260},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1278, col: 11, offset: 36260},
						name: "UInt",
					},
					&zeroOrOneExpr{
						pos: position{line: 1278, col: 16, offset: 36265},
						expr: &seqExpr{
							pos: position{line: 1278, col: 17, offset: 36266},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1278, col: 17, offset: 36266},
									val:        ".",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1278, col: 21, offset: 36270},
									name: "UInt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeUnit",
			pos:  position{line: 1280, col: 1, offset: 36278},
			expr: &choiceExpr{
				pos: position{line: 1281, col: 5, offset: 36291},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1281, col: 5, offset: 36291},
						val:        "ns",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1282, col: 5, offset: 36300},
						val:        "us",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1283, col: 5, offset: 36309},
						val:        "ms",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1284, col: 5, offset: 36318},
						val:        "s",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1285, col: 5, offset: 36326},
						val:        "m",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1286, col: 5, offset: 36334},
						val:        "h",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1287, col: 5, offset: 36342},
						val:        "d",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1288, col: 5, offset: 36350},
						val:        "w",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1289, col: 5, offset: 36358},
						val:        "y",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 1291, col: 1, offset: 36363},
			expr: &actionExpr{
				pos: position{line: 1292, col: 5, offset: 36370},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 1292, col: 5, offset: 36370},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1292, col: 5, offset: 36370},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1292, col: 10, offset: 36375},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1292, col: 14, offset: 36379},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1292, col: 19, offset: 36384},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1292, col: 23, offset: 36388},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1292, col: 28, offset: 36393},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1292, col: 32, offset: 36397},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 1294, col: 1, offset: 36434},
			expr: &actionExpr{
				pos: position{line: 1295, col: 5, offset: 36442},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 1295, col: 5, offset: 36442},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1295, col: 5, offset: 36442},
							expr: &seqExpr{
								pos: position{line: 1295, col: 7, offset: 36444},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1295, col: 7, offset: 36444},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 1295, col: 11, offset: 36448},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 1295, col: 15, offset: 36452},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 1295, col: 19, offset: 36456},
										expr: &choiceExpr{
											pos: position{line: 1295, col: 21, offset: 36458},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1295, col: 21, offset: 36458},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 1295, col: 32, offset: 36469},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1295, col: 38, offset: 36475},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1295, col: 40, offset: 36477},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 1299, col: 1, offset: 36641},
			expr: &choiceExpr{
				pos: position{line: 1300, col: 5, offset: 36659},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1300, col: 5, offset: 36659},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 1300, col: 5, offset: 36659},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1300, col: 5, offset: 36659},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 1300, col: 7, offset: 36661},
										expr: &ruleRefExpr{
											pos:  position{line: 1300, col: 7, offset: 36661},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1300, col: 17, offset: 36671},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1300, col: 19, offset: 36673},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1303, col: 5, offset: 36737},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 1303, col: 5, offset: 36737},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1303, col: 5, offset: 36737},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1303, col: 7, offset: 36739},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1303, col: 11, offset: 36743},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1303, col: 13, offset: 36745},
										expr: &ruleRefExpr{
											pos:  position{line: 1303, col: 13, offset: 36745},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1303, col: 23, offset: 36755},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1303, col: 28, offset: 36760},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1303, col: 30, offset: 36762},
										expr: &ruleRefExpr{
											pos:  position{line: 1303, col: 30, offset: 36762},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1303, col: 40, offset: 36772},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 1303, col: 42, offset: 36774},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1306, col: 5, offset: 36873},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 1306, col: 5, offset: 36873},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1306, col: 5, offset: 36873},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1306, col: 10, offset: 36878},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1306, col: 12, offset: 36880},
										expr: &ruleRefExpr{
											pos:  position{line: 1306, col: 12, offset: 36880},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1306, col: 22, offset: 36890},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1306, col: 24, offset: 36892},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1309, col: 5, offset: 36963},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 1309, col: 5, offset: 36963},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1309, col: 5, offset: 36963},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1309, col: 7, offset: 36965},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1309, col: 11, offset: 36969},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1309, col: 13, offset: 36971},
										expr: &ruleRefExpr{
											pos:  position{line: 1309, col: 13, offset: 36971},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1309, col: 23, offset: 36981},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1312, col: 5, offset: 37049},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 1312, col: 5, offset: 37049},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 1316, col: 1, offset: 37086},
			expr: &choiceExpr{
				pos: position{line: 1317, col: 5, offset: 37098},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1317, col: 5, offset: 37098},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 1318, col: 5, offset: 37105},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 1320, col: 1, offset: 37110},
			expr: &actionExpr{
				pos: position{line: 1320, col: 12, offset: 37121},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 1320, col: 12, offset: 37121},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1320, col: 12, offset: 37121},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1320, col: 16, offset: 37125},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1320, col: 18, offset: 37127},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 1322, col: 1, offset: 37165},
			expr: &actionExpr{
				pos: position{line: 1322, col: 12, offset: 37176},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 1322, col: 12, offset: 37176},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1322, col: 12, offset: 37176},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1322, col: 14, offset: 37178},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 1322, col: 18, offset: 37182},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 1324, col: 1, offset: 37220},
			expr: &actionExpr{
				pos: position{line: 1325, col: 5, offset: 37231},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 1325, col: 5, offset: 37231},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1325, col: 5, offset: 37231},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1325, col: 7, offset: 37233},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 1325, col: 10, offset: 37236},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1325, col: 14, offset: 37240},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1325, col: 16, offset: 37242},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 1329, col: 1, offset: 37315},
			expr: &actionExpr{
				pos: position{line: 1330, col: 5, offset: 37326},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 1330, col: 5, offset: 37326},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1330, col: 5, offset: 37326},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1330, col: 7, offset: 37328},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 1330, col: 11, offset: 37332},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1330, col: 15, offset: 37336},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1330, col: 17, offset: 37338},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 1334, col: 1, offset: 37401},
			expr: &actionExpr{
				pos: position{line: 1335, col: 4, offset: 37409},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 1335, col: 4, offset: 37409},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 1335, col: 6, offset: 37411},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 1337, col: 1, offset: 37451},
			expr: &choiceExpr{
				pos: position{line: 1338, col: 5, offset: 37465},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1338, col: 5, offset: 37465},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 1339, col: 5, offset: 37480},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 1341, col: 1, offset: 37496},
			expr: &actionExpr{
				pos: position{line: 1341, col: 14, offset: 37509},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1341, col: 14, offset: 37509},
					expr: &charClassMatcher{
						pos:        position{line: 1341, col: 14, offset: 37509},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 1343, col: 1, offset: 37548},
			expr: &actionExpr{
				pos: position{line: 1344, col: 5, offset: 37567},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 1344, col: 5, offset: 37567},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1344, col: 5, offset: 37567},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1344, col: 9, offset: 37571},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 1346, col: 1, offset: 37614},
			expr: &choiceExpr{
				pos: position{line: 1347, col: 5, offset: 37630},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1347, col: 5, offset: 37630},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 1347, col: 5, offset: 37630},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1347, col: 5, offset: 37630},
									expr: &litMatcher{
										pos:        position{line: 1347, col: 5, offset: 37630},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1347, col: 10, offset: 37635},
									expr: &charClassMatcher{
										pos:        position{line: 1347, col: 10, offset: 37635},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 1347, col: 17, offset: 37642},
									val:        ".",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1347, col: 21, offset: 37646},
									expr: &charClassMatcher{
										pos:        position{line: 1347, col: 21, offset: 37646},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1347, col: 28, offset: 37653},
									expr: &ruleRefExpr{
										pos:  position{line: 1347, col: 28, offset: 37653},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1350, col: 5, offset: 37712},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 1350, col: 5, offset: 37712},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1350, col: 5, offset: 37712},
									expr: &litMatcher{
										pos:        position{line: 1350, col: 5, offset: 37712},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1350, col: 10, offset: 37717},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1350, col: 14, offset: 37721},
									expr: &charClassMatcher{
										pos:        position{line: 1350, col: 14, offset: 37721},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1350, col: 21, offset: 37728},
									expr: &ruleRefExpr{
										pos:  position{line: 1350, col: 21, offset: 37728},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1353, col: 5, offset: 37787},
						run: (*parser).callonFloatString22,
						expr: &choiceExpr{
							pos: position{line: 1353, col: 6, offset: 37788},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1353, col: 6, offset: 37788},
									name: "NaN",
								},
								&ruleRefExpr{
									pos:  position{line: 1353, col: 12, offset: 37794},
									name: "Infinity",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 1356, col: 1, offset: 37837},
			expr: &seqExpr{
				pos: position{line: 1356, col: 16, offset: 37852},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1356, col: 16, offset: 37852},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 1356, col: 21, offset: 37857},
						expr: &charClassMatcher{
							pos:        position{line: 1356, col: 21, offset: 37857},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1356, col: 27, offset: 37863},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "NaN",
			pos:  position{line: 1358, col: 1, offset: 37875},
			expr: &litMatcher{
				pos:        position{line: 1358, col: 7, offset: 37881},
				val:        "NaN",
				ignoreCase: false,
			},
		},
		{
			name: "Infinity",
			pos:  position{line: 1360, col: 1, offset: 37888},
			expr: &seqExpr{
				pos: position{line: 1360, col: 12, offset: 37899},
				exprs: []interface{}{
					&zeroOrOneExpr{
						pos: position{line: 1360, col: 12, offset: 37899},
						expr: &choiceExpr{
							pos: position{line: 1360, col: 13, offset: 37900},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1360, col: 13, offset: 37900},
									val:        "-",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1360, col: 19, offset: 37906},
									val:        "+",
									ignoreCase: false,
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1360, col: 25, offset: 37912},
						val:        "Inf",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 1362, col: 1, offset: 37919},
			expr: &actionExpr{
				pos: position{line: 1362, col: 7, offset: 37925},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1362, col: 7, offset: 37925},
					expr: &ruleRefExpr{
						pos:  position{line: 1362, col: 7, offset: 37925},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 1364, col: 1, offset: 37967},
			expr: &charClassMatcher{
				pos:        position{line: 1364, col: 12, offset: 37978},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1366, col: 1, offset: 37991},
			expr: &choiceExpr{
				pos: position{line: 1367, col: 5, offset: 38008},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1367, col: 5, offset: 38008},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 1367, col: 5, offset: 38008},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1367, col: 5, offset: 38008},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1367, col: 9, offset: 38012},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1367, col: 11, offset: 38014},
										expr: &ruleRefExpr{
											pos:  position{line: 1367, col: 11, offset: 38014},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1367, col: 29, offset: 38032},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1368, col: 5, offset: 38069},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 1368, col: 5, offset: 38069},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1368, col: 5, offset: 38069},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1368, col: 9, offset: 38073},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1368, col: 11, offset: 38075},
										expr: &ruleRefExpr{
											pos:  position{line: 1368, col: 11, offset: 38075},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1368, col: 29, offset: 38093},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 1370, col: 1, offset: 38127},
			expr: &choiceExpr{
				pos: position{line: 1371, col: 5, offset: 38148},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1371, col: 5, offset: 38148},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1371, col: 5, offset: 38148},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1371, col: 5, offset: 38148},
									expr: &choiceExpr{
										pos: position{line: 1371, col: 7, offset: 38150},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1371, col: 7, offset: 38150},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1371, col: 13, offset: 38156},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1371, col: 26, offset: 38169,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1372, col: 5, offset: 38206},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1372, col: 5, offset: 38206},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1372, col: 5, offset: 38206},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1372, col: 10, offset: 38211},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1372, col: 12, offset: 38213},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 1374, col: 1, offset: 38247},
			expr: &actionExpr{
				pos: position{line: 1375, col: 5, offset: 38259},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 1375, col: 5, offset: 38259},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1375, col: 5, offset: 38259},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1375, col: 10, offset: 38264},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1375, col: 23, offset: 38277},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1375, col: 28, offset: 38282},
								expr: &ruleRefExpr{
									pos:  position{line: 1375, col: 28, offset: 38282},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 1377, col: 1, offset: 38344},
			expr: &choiceExpr{
				pos: position{line: 1378, col: 5, offset: 38361},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1378, col: 5, offset: 38361},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1379, col: 5, offset: 38378},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordChars",
			pos:  position{line: 1381, col: 1, offset: 38390},
			expr: &actionExpr{
				pos: position{line: 1381, col: 16, offset: 38405},
				run: (*parser).callonKeyWordChars1,
				expr: &charClassMatcher{
					pos:        position{line: 1381, col: 16, offset: 38405},
					val:        "[a-zA-Z_.:/%#@~]",
					chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
					ranges:     []rune{'a', 'z', 'A', 'Z'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 1383, col: 1, offset: 38454},
			expr: &choiceExpr{
				pos: position{line: 1384, col: 5, offset: 38470},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1384, col: 5, offset: 38470},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 1385, col: 5, offset: 38487},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 1387, col: 1, offset: 38494},
			expr: &actionExpr{
				pos: position{line: 1387, col: 14, offset: 38507},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 1387, col: 14, offset: 38507},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1387, col: 14, offset: 38507},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1387, col: 19, offset: 38512},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1387, col: 22, offset: 38515},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1387, col: 22, offset: 38515},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1387, col: 38, offset: 38531},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobPattern",
			pos:  position{line: 1389, col: 1, offset: 38566},
			expr: &actionExpr{
				pos: position{line: 1390, col: 5, offset: 38582},
				run: (*parser).callonGlobPattern1,
				expr: &seqExpr{
					pos: position{line: 1390, col: 5, offset: 38582},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1390, col: 5, offset: 38582},
							expr: &ruleRefExpr{
								pos:  position{line: 1390, col: 6, offset: 38583},
								name: "GlobProperStart",
							},
						},
						&andExpr{
							pos: position{line: 1390, col: 22, offset: 38599},
							expr: &ruleRefExpr{
								pos:  position{line: 1390, col: 23, offset: 38600},
								name: "GlobHasStar",
							},
						},
						&labeledExpr{
							pos:   position{line: 1390, col: 35, offset: 38612},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1390, col: 40, offset: 38617},
								name: "GlobStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1390, col: 50, offset: 38627},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1390, col: 55, offset: 38632},
								expr: &ruleRefExpr{
									pos:  position{line: 1390, col: 55, offset: 38632},
									name: "GlobRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobProperStart",
			pos:  position{line: 1394, col: 1, offset: 38701},
			expr: &choiceExpr{
				pos: position{line: 1394, col: 19, offset: 38719},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1394, col: 19, offset: 38719},
						name: "KeyWordStart",
					},
					&seqExpr{
						pos: position{line: 1394, col: 34, offset: 38734},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1394, col: 34, offset: 38734},
								expr: &litMatcher{
									pos:        position{line: 1394, col: 34, offset: 38734},
									val:        "*",
									ignoreCase: false,
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1394, col: 39, offset: 38739},
								name: "KeyWordRest",
							},
						},
					},
				},
			},
		},
		{
			name: "GlobHasStar",
			pos:  position{line: 1395, col: 1, offset: 38751},
			expr: &seqExpr{
				pos: position{line: 1395, col: 15, offset: 38765},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1395, col: 15, offset: 38765},
						expr: &ruleRefExpr{
							pos:  position{line: 1395, col: 15, offset: 38765},
							name: "KeyWordRest",
						},
					},
					&litMatcher{
						pos:        position{line: 1395, col: 28, offset: 38778},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "GlobStart",
			pos:  position{line: 1397, col: 1, offset: 38783},
			expr: &choiceExpr{
				pos: position{line: 1398, col: 5, offset: 38797},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1398, col: 5, offset: 38797},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1399, col: 5, offset: 38814},
						name: "GlobEsc",
					},
					&actionExpr{
						pos: position{line: 1400, col: 5, offset: 38826},
						run: (*parser).callonGlobStart4,
						expr: &litMatcher{
							pos:        position{line: 1400, col: 5, offset: 38826},
							val:        "*",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GlobRest",
			pos:  position{line: 1402, col: 1, offset: 38851},
			expr: &choiceExpr{
				pos: position{line: 1403, col: 5, offset: 38864},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1403, col: 5, offset: 38864},
						name: "GlobStart",
					},
					&charClassMatcher{
						pos:        position{line: 1404, col: 5, offset: 38878},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "GlobEsc",
			pos:  position{line: 1406, col: 1, offset: 38885},
			expr: &actionExpr{
				pos: position{line: 1406, col: 11, offset: 38895},
				run: (*parser).callonGlobEsc1,
				expr: &seqExpr{
					pos: position{line: 1406, col: 11, offset: 38895},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1406, col: 11, offset: 38895},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1406, col: 16, offset: 38900},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1406, col: 19, offset: 38903},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1406, col: 19, offset: 38903},
										name: "GlobEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1406, col: 32, offset: 38916},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobEscape",
			pos:  position{line: 1408, col: 1, offset: 38951},
			expr: &choiceExpr{
				pos: position{line: 1409, col: 5, offset: 38966},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1409, col: 5, offset: 38966},
						run: (*parser).callonGlobEscape2,
						expr: &litMatcher{
							pos:        position{line: 1409, col: 5, offset: 38966},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1410, col: 5, offset: 38994},
						run: (*parser).callonGlobEscape4,
						expr: &litMatcher{
							pos:        position{line: 1410, col: 5, offset: 38994},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1411, col: 5, offset: 39024},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 1413, col: 1, offset: 39030},
			expr: &choiceExpr{
				pos: position{line: 1414, col: 5, offset: 39051},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1414, col: 5, offset: 39051},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1414, col: 5, offset: 39051},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1414, col: 5, offset: 39051},
									expr: &choiceExpr{
										pos: position{line: 1414, col: 7, offset: 39053},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1414, col: 7, offset: 39053},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1414, col: 13, offset: 39059},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1414, col: 26, offset: 39072,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1415, col: 5, offset: 39109},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1415, col: 5, offset: 39109},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1415, col: 5, offset: 39109},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1415, col: 10, offset: 39114},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1415, col: 12, offset: 39116},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 1417, col: 1, offset: 39150},
			expr: &choiceExpr{
				pos: position{line: 1418, col: 5, offset: 39169},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1418, col: 5, offset: 39169},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 1419, col: 5, offset: 39190},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 1421, col: 1, offset: 39205},
			expr: &choiceExpr{
				pos: position{line: 1422, col: 5, offset: 39226},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1422, col: 5, offset: 39226},
						val:        "'",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1423, col: 5, offset: 39234},
						run: (*parser).callonSingleCharEscape3,
						expr: &litMatcher{
							pos:        position{line: 1423, col: 5, offset: 39234},
							val:        "\"",
							ignoreCase: false,
						},
					},
					&litMatcher{
						pos:        position{line: 1424, col: 5, offset: 39274},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1425, col: 5, offset: 39283},
						run: (*parser).callonSingleCharEscape6,
						expr: &litMatcher{
							pos:        position{line: 1425, col: 5, offset: 39283},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1426, col: 5, offset: 39312},
						run: (*parser).callonSingleCharEscape8,
						expr: &litMatcher{
							pos:        position{line: 1426, col: 5, offset: 39312},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1427, col: 5, offset: 39341},
						run: (*parser).callonSingleCharEscape10,
						expr: &litMatcher{
							pos:        position{line: 1427, col: 5, offset: 39341},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1428, col: 5, offset: 39370},
						run: (*parser).callonSingleCharEscape12,
						expr: &litMatcher{
							pos:        position{line: 1428, col: 5, offset: 39370},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1429, col: 5, offset: 39399},
						run: (*parser).callonSingleCharEscape14,
						expr: &litMatcher{
							pos:        position{line: 1429, col: 5, offset: 39399},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1430, col: 5, offset: 39428},
						run: (*parser).callonSingleCharEscape16,
						expr: &litMatcher{
							pos:        position{line: 1430, col: 5, offset: 39428},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 1432, col: 1, offset: 39454},
			expr: &choiceExpr{
				pos: position{line: 1433, col: 5, offset: 39472},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1433, col: 5, offset: 39472},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 1433, col: 5, offset: 39472},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1434, col: 5, offset: 39500},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 1434, col: 5, offset: 39500},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1435, col: 5, offset: 39528},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 1437, col: 1, offset: 39534},
			expr: &choiceExpr{
				pos: position{line: 1438, col: 5, offset: 39552},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1438, col: 5, offset: 39552},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 1438, col: 5, offset: 39552},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1438, col: 5, offset: 39552},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1438, col: 9, offset: 39556},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1438, col: 16, offset: 39563},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1438, col: 16, offset: 39563},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1438, col: 25, offset: 39572},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1438, col: 34, offset: 39581},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1438, col: 43, offset: 39590},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1441, col: 5, offset: 39653},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 1441, col: 5, offset: 39653},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1441, col: 5, offset: 39653},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1441, col: 9, offset: 39657},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1441, col: 13, offset: 39661},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1441, col: 20, offset: 39668},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1441, col: 20, offset: 39668},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 1441, col: 29, offset: 39677},
												expr: &ruleRefExpr{
													pos:  position{line: 1441, col: 29, offset: 39677},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1441, col: 39, offset: 39687},
												expr: &ruleRefExpr{
													pos:  position{line: 1441, col: 39, offset: 39687},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1441, col: 49, offset: 39697},
												expr: &ruleRefExpr{
													pos:  position{line: 1441, col: 49, offset: 39697},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1441, col: 59, offset: 39707},
												expr: &ruleRefExpr{
													pos:  position{line: 1441, col: 59, offset: 39707},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1441, col: 69, offset: 39717},
												expr: &ruleRefExpr{
													pos:  position{line: 1441, col: 69, offset: 39717},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1441, col: 80, offset: 39728},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpPattern",
			pos:  position{line: 1445, col: 1, offset: 39782},
			expr: &actionExpr{
				pos: position{line: 1446, col: 5, offset: 39800},
				run: (*parser).callonRegexpPattern1,
				expr: &seqExpr{
					pos: position{line: 1446, col: 5, offset: 39800},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1446, col: 5, offset: 39800},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1446, col: 9, offset: 39804},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1446, col: 14, offset: 39809},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 1446, col: 25, offset: 39820},
							val:        "/",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1446, col: 29, offset: 39824},
							expr: &ruleRefExpr{
								pos:  position{line: 1446, col: 30, offset: 39825},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 1448, col: 1, offset: 39860},
			expr: &actionExpr{
				pos: position{line: 1449, col: 5, offset: 39875},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1449, col: 5, offset: 39875},
					expr: &choiceExpr{
						pos: position{line: 1449, col: 6, offset: 39876},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 1449, col: 6, offset: 39876},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&seqExpr{
								pos: position{line: 1449, col: 15, offset: 39885},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1449, col: 15, offset: 39885},
										val:        "\\",
										ignoreCase: false,
									},
									&anyMatcher{
										line: 1449, col: 20, offset: 39890,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 1451, col: 1, offset: 39926},
			expr: &charClassMatcher{
				pos:        position{line: 1452, col: 5, offset: 39942},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 1454, col: 1, offset: 39957},
			expr: &oneOrMoreExpr{
				pos: position{line: 1454, col: 5, offset: 39961},
				expr: &ruleRefExpr{
					pos:  position{line: 1454, col: 5, offset: 39961},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1456, col: 1, offset: 39972},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1456, col: 6, offset: 39977},
				expr: &ruleRefExpr{
					pos:  position{line: 1456, col: 6, offset: 39977},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 1458, col: 1, offset: 39988},
			expr: &choiceExpr{
				pos: position{line: 1459, col: 5, offset: 40001},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1459, col: 5, offset: 40001},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 1460, col: 5, offset: 40016},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 1461, col: 5, offset: 40035},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 1463, col: 1, offset: 40044},
			expr: &anyMatcher{
				line: 1464, col: 5, offset: 40064,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 1466, col: 1, offset: 40067},
			expr: &choiceExpr{
				pos: position{line: 1467, col: 5, offset: 40095},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1467, col: 5, offset: 40095},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1468, col: 5, offset: 40104},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1469, col: 5, offset: 40113},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1470, col: 5, offset: 40122},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1471, col: 5, offset: 40130},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1472, col: 5, offset: 40143},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 1474, col: 1, offset: 40153},
			expr: &charClassMatcher{
				pos:        position{line: 1475, col: 5, offset: 40172},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 1481, col: 1, offset: 40502},
			expr: &ruleRefExpr{
				pos:  position{line: 1484, col: 5, offset: 40573},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1486, col: 1, offset: 40592},
			expr: &seqExpr{
				pos: position{line: 1487, col: 5, offset: 40613},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1487, col: 5, offset: 40613},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1487, col: 10, offset: 40618},
						expr: &seqExpr{
							pos: position{line: 1487, col: 11, offset: 40619},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1487, col: 11, offset: 40619},
									expr: &litMatcher{
										pos:        position{line: 1487, col: 12, offset: 40620},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1487, col: 17, offset: 40625},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1487, col: 35, offset: 40643},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1489, col: 1, offset: 40649},
			expr: &seqExpr{
				pos: position{line: 1490, col: 5, offset: 40671},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1490, col: 5, offset: 40671},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1490, col: 10, offset: 40676},
						expr: &seqExpr{
							pos: position{line: 1490, col: 11, offset: 40677},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1490, col: 11, offset: 40677},
									expr: &ruleRefExpr{
										pos:  position{line: 1490, col: 12, offset: 40678},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1490, col: 27, offset: 40693},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1492, col: 1, offset: 40712},
			expr: &seqExpr{
				pos: position{line: 1492, col: 7, offset: 40718},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1492, col: 7, offset: 40718},
						expr: &ruleRefExpr{
							pos:  position{line: 1492, col: 7, offset: 40718},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1492, col: 19, offset: 40730},
						name: "LineTerminator",
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 1494, col: 1, offset: 40746},
			expr: &choiceExpr{
				pos: position{line: 1494, col: 7, offset: 40752},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1494, col: 7, offset: 40752},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 1494, col: 11, offset: 40756},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1496, col: 1, offset: 40761},
			expr: &notExpr{
				pos: position{line: 1496, col: 7, offset: 40767},
				expr: &anyMatcher{
					line: 1496, col: 8, offset: 40768,
				},
			},
		},
		{
			name: "EOKW",
			pos:  position{line: 1498, col: 1, offset: 40771},
			expr: &notExpr{
				pos: position{line: 1498, col: 8, offset: 40778},
				expr: &ruleRefExpr{
					pos:  position{line: 1498, col: 9, offset: 40779},
					name: "KeyWordChars",
				},
			},
		},
	},
}

func (c *current) onstart2(scope interface{}) (interface{}, error) {
	return []interface{}{scope}, nil
}

func (p *parser) callonstart2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart2(stack["scope"])
}

func (c *current) onstart9(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonstart9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart9(stack["seq"])
}

func (c *current) onScope1(decls, body interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Scope", "decls": decls, "body": body}, nil

}

func (p *parser) callonScope1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope1(stack["decls"], stack["body"])
}

func (c *current) onSeq1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSeq1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSeq1(stack["first"], stack["rest"])
}

func (c *current) onSeqTail1(o interface{}) (interface{}, error) {
	return o, nil
}

func (p *parser) callonSeqTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSeqTail1(stack["o"])
}

func (c *current) onDecl1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonDecl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDecl1(stack["v"])
}

func (c *current) onConstDecl2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ConstDecl", "name": id, "expr": expr}, nil

}

func (p *parser) callonConstDecl2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDecl2(stack["id"], stack["expr"])
}

func (c *current) onConstDecl13(id, typ interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "ConstDecl",

		"name": id,

		"expr": map[string]interface{}{"kind": "TypeValue", "value": map[string]interface{}{"kind": "TypeDef", "name": id, "type": typ}}}, nil

}

func (p *parser) callonConstDecl13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDecl13(stack["id"], stack["typ"])
}

func (c *current) onFuncDecl1(id, params, expr interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "FuncDecl",

		"name": id,

		"params": params,

		"expr": expr}, nil

}

func (p *parser) callonFuncDecl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncDecl1(stack["id"], stack["params"], stack["expr"])
}

func (c *current) onOpDecl1(name, params, body interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "OpDecl",

		"name": name,

		"params": params,

		"body": body}, nil

}

func (p *parser) callonOpDecl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpDecl1(stack["name"], stack["params"], stack["body"])
}

func (c *current) onParams7(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonParams7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParams7(stack["p"])
}

func (c *current) onParams1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonParams1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParams1(stack["first"], stack["rest"])
}

func (c *current) onParam2(id interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ConstParam", "name": id}, nil
}

func (p *parser) callonParam2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParam2(stack["id"])
}

func (c *current) onParam8() (interface{}, error) {
	return map[string]interface{}{"kind": "SpreadParam"}, nil
}

func (p *parser) callonParam8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParam8()
}

func (c *current) onParam10(id interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "NamedParam", "name": id}, nil
}

func (p *parser) callonParam10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParam10(stack["id"])
}

func (c *current) onOperation2(paths interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Parallel", "paths": paths}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["paths"])
}

func (c *current) onOperation12(expr, cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": expr, "cases": cases}, nil

}

func (p *parser) callonOperation12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation12(stack["expr"], stack["cases"])
}

func (c *current) onOperation25(cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": nil, "cases": cases}, nil

}

func (p *parser) callonOperation25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation25(stack["cases"])
}

func (c *current) onOperation35(trunks interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": trunks}, nil

}

func (p *parser) callonOperation35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation35(stack["trunks"])
}

func (c *current) onOperation45(scope interface{}) (interface{}, error) {
	return scope, nil
}

func (p *parser) callonOperation45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation45(stack["scope"])
}

func (c *current) onOperation55(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation55(stack["a"])
}

func (c *current) onOperation61(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation61(stack["a"])
}

func (c *current) onOperation71(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Search", "expr": expr}, nil

}

func (p *parser) callonOperation71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation71(stack["expr"])
}

func (c *current) onOperation77(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation77(stack["expr"])
}

func (c *current) onOperation80(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation80(stack["expr"])
}

func (c *current) onOperation83(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation83(stack["expr"])
}

func (c *current) onLeg1(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLeg1(stack["seq"])
}

func (c *current) onSwitchLeg1(expr, path interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": expr, "path": path}, nil

}

func (p *parser) callonSwitchLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchLeg1(stack["expr"], stack["path"])
}

func (c *current) onCase2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonCase2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase2(stack["expr"])
}

func (c *current) onCase8() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonCase8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase8()
}

func (c *current) onFromLeg1(source, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Trunk", "source": source, "seq": nil}
	if opt != nil {
		m["seq"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonFromLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromLeg1(stack["source"], stack["opt"])
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor13(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor13(stack["expr"])
}

func (c *current) onSearchExpr4(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Term", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonSearchExpr4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr4(stack["v"])
}

func (c *current) onSearchExpr15() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil

}

func (p *parser) callonSearchExpr15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr15()
}

func (c *current) onSearchPredicate2(lhs, op, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": op, "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonSearchPredicate2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPredicate2(stack["lhs"], stack["op"], stack["rhs"])
}

func (c *current) onSearchPredicate12(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchPredicate12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPredicate12(stack["first"], stack["rest"])
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onGlob1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Glob", "pattern": pattern}, nil

}

func (p *parser) callonGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlob1(stack["pattern"])
}

func (c *current) onRegexp1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Regexp", "pattern": pattern}, nil

}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["pattern"])
}

func (c *current) onAggregation2(keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Summarize", "keys": keys, "aggs": nil, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["keys"], stack["limit"])
}

func (c *current) onAggregation10(aggs, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"kind": "Summarize", "keys": nil, "aggs": aggs, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation10(stack["aggs"], stack["keys"], stack["limit"])
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAggAssignment2(lval, agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lval, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment2(stack["lval"], stack["agg"])
}

func (c *current) onAggAssignment11(agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment11(stack["agg"])
}

func (c *current) onAgg1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"kind": "Agg", "name": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonAgg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAgg1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onAggAssignments1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonAggAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssertOp6(e interface{}) (interface{}, error) {
	return []interface{}{e, string(c.text)}, nil
}

func (p *parser) callonAssertOp6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssertOp6(stack["e"])
}

func (c *current) onAssertOp1(expr interface{}) (interface{}, error) {
	// 'assert EXPR' is equivalent to
	// 'yield EXPR ? this : error({message: "assertion failed", "expr": EXPR_text, "on": this}'
	// where EXPR_text is the literal text of EXPR.
	return map[string]interface{}{"kind": "Yield", "exprs": []interface{}{map[string]interface{}{

		"kind": "Conditional",

		"cond": expr.([]interface{})[0],

		"then": map[string]interface{}{"kind": "ID", "name": "this"},

		"else": map[string]interface{}{

			"kind": "Call",

			"name": "error",

			"args": []interface{}{map[string]interface{}{"kind": "RecordExpr", "elems": []interface{}{

				map[string]interface{}{"kind": "Field", "name": "message", "value": map[string]interface{}{

					"kind": "Primitive", "text": "assertion failed", "type": "string"}},

				map[string]interface{}{"kind": "Field", "name": "expr", "value": map[string]interface{}{

					"kind": "Primitive", "text": expr.([]interface{})[1], "type": "string"}},

				map[string]interface{}{"kind": "Field", "name": "on", "value": map[string]interface{}{

					"kind": "ID", "name": "this"}}}}},

			"where": nil}}}}, nil

}

func (p *parser) callonAssertOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssertOp1(stack["expr"])
}

func (c *current) onSortOp10(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortOp10(stack["l"])
}

func (c *current) onSortOp1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var op = map[string]interface{}{"kind": "Sort", "args": list, "order": "asc", "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		op["order"] = "desc"
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			op["nullsfirst"] = true
		}
	}
	return op, nil

}

func (p *parser) callonSortOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortOp1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopOp8(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopOp8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp8(stack["n"])
}

func (c *current) onTopOp20(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopOp20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp20(stack["f"])
}

func (c *current) onTopOp1(limit, flush, fields interface{}) (interface{}, error) {
	var op = map[string]interface{}{"kind": "Top", "limit": 0, "args": nil, "flush": false}
	if limit != nil {
		op["limit"] = limit
	}
	if fields != nil {
		op["args"] = fields
	}
	if flush != nil {
		op["flush"] = true
	}
	return op, nil

}

func (p *parser) callonTopOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cut", "args": args}, nil

}

func (p *parser) callonCutOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutOp1(stack["args"])
}

func (c *current) onDropOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Drop", "args": args}, nil

}

func (p *parser) callonDropOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropOp1(stack["args"])
}

func (c *current) onHeadOp2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": count}, nil
}

func (p *parser) callonHeadOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOp2(stack["count"])
}

func (c *current) onHeadOp10() (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": map[string]interface{}{"kind": "Primitive", "type": "int64", "text": "1"}}, nil
}

func (p *parser) callonHeadOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOp10()
}

func (c *current) onTailOp2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": count}, nil
}

func (p *parser) callonTailOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailOp2(stack["count"])
}

func (c *current) onTailOp10() (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": map[string]interface{}{"kind": "Primitive", "type": "int64", "text": "1"}}, nil
}

func (p *parser) callonTailOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailOp10()
}

func (c *current) onWhereOp1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Where", "expr": expr}, nil

}

func (p *parser) callonWhereOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereOp1(stack["expr"])
}

func (c *current) onUniqOp2() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": true}, nil

}

func (p *parser) callonUniqOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqOp2()
}

func (c *current) onUniqOp7() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": false}, nil

}

func (p *parser) callonUniqOp7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqOp7()
}

func (c *current) onPutOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Put", "args": args}, nil

}

func (p *parser) callonPutOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutOp1(stack["args"])
}

func (c *current) onRenameOp9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameOp9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameOp9(stack["cl"])
}

func (c *current) onRenameOp1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Rename", "args": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameOp1(stack["first"], stack["rest"])
}

func (c *current) onFuseOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Fuse"}, nil

}

func (p *parser) callonFuseOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseOp1()
}

func (c *current) onShapeOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Shape"}, nil

}

func (p *parser) callonShapeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShapeOp1()
}

func (c *current) onJoinOp1(style, rightInput, key, optKey, optArgs interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Join", "style": style, "right_input": rightInput, "left_key": key, "right_key": key, "args": nil}
	if optKey != nil {
		m["right_key"] = optKey.([]interface{})[3]
	}
	if optArgs != nil {
		m["args"] = optArgs.([]interface{})[1]
	}
	return m, nil

}

func (p *parser) callonJoinOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinOp1(stack["style"], stack["rightInput"], stack["key"], stack["optKey"], stack["optArgs"])
}

func (c *current) onJoinStyle2() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle2()
}

func (c *current) onJoinStyle6() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle6()
}

func (c *current) onJoinStyle10() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle10()
}

func (c *current) onJoinStyle14() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonJoinStyle14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle14()
}

func (c *current) onJoinStyle18() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle18()
}

func (c *current) onJoinRightInput2(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonJoinRightInput2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinRightInput2(stack["s"])
}

func (c *current) onJoinRightInput12() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonJoinRightInput12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinRightInput12()
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onSampleOp1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sample", "expr": e}, nil
}

func (p *parser) callonSampleOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleOp1(stack["e"])
}

func (c *current) onOpAssignment1(a interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpAssignment", "assignments": a}, nil

}

func (p *parser) callonOpAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpAssignment1(stack["a"])
}

func (c *current) onSampleExpr2(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonSampleExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr2(stack["lval"])
}

func (c *current) onSampleExpr7() (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": "this"}, nil
}

func (p *parser) callonSampleExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr7()
}

func (c *current) onLoadOp1(pool, branch, author, message, meta interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Load", "pool": pool, "branch": branch, "author": author, "message": message, "meta": meta}, nil

}

func (p *parser) callonLoadOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLoadOp1(stack["pool"], stack["branch"], stack["author"], stack["message"], stack["meta"])
}

func (c *current) onAuthorArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonAuthorArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAuthorArg1(stack["val"])
}

func (c *current) onMessageArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonMessageArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMessageArg1(stack["val"])
}

func (c *current) onMetaArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonMetaArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMetaArg1(stack["val"])
}

func (c *current) onPoolBranch1(branch interface{}) (interface{}, error) {
	return branch, nil
}

func (p *parser) callonPoolBranch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBranch1(stack["branch"])
}

func (c *current) onFromOp1(source interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": []interface{}{map[string]interface{}{"kind": "Trunk", "source": source}}}, nil

}

func (p *parser) callonFromOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromOp1(stack["source"])
}

func (c *current) onFile1(path, format, sort_key interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "File", "path": path, "format": format, "sort_key": sort_key}, nil

}

func (p *parser) callonFile1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile1(stack["path"], stack["format"], stack["sort_key"])
}

func (c *current) onFrom1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonFrom1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrom1(stack["body"])
}

func (c *current) onPool1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonPool1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPool1(stack["body"])
}

func (c *current) onPoolBody1(spec, at interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pool", "spec": spec, "at": at}, nil

}

func (p *parser) callonPoolBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBody1(stack["spec"], stack["at"])
}

func (c *current) onGet1(url, format, sort_key, method, headers, body interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "HTTP",

		"url": url,

		"format": format,

		"sort_key": sort_key,

		"method": method,

		"headers": headers,

		"body": body}, nil

}

func (p *parser) callonGet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGet1(stack["url"], stack["format"], stack["sort_key"], stack["method"], stack["headers"], stack["body"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onMethodArg1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonMethodArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethodArg1(stack["v"])
}

func (c *current) onHeadersArg1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonHeadersArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadersArg1(stack["v"])
}

func (c *current) onBodyArg1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonBodyArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBodyArg1(stack["v"])
}

func (c *current) onPath2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonPath2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath2(stack["v"])
}

func (c *current) onPath5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPath5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath5()
}

func (c *current) onPoolAt1(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonPoolAt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolAt1(stack["id"])
}

func (c *current) onKSUID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKSUID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKSUID1()
}

func (c *current) onPoolSpec2(pool, commit, meta, tap interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": pool, "commit": commit, "meta": meta, "tap": tap}, nil

}

func (p *parser) callonPoolSpec2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec2(stack["pool"], stack["commit"], stack["meta"], stack["tap"])
}

func (c *current) onPoolSpec14(meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": nil, "commit": nil, "meta": meta}, nil

}

func (p *parser) callonPoolSpec14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec14(stack["meta"])
}

func (c *current) onPoolCommit1(commit interface{}) (interface{}, error) {
	return commit, nil
}

func (p *parser) callonPoolCommit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolCommit1(stack["commit"])
}

func (c *current) onPoolMeta1(meta interface{}) (interface{}, error) {
	return meta, nil
}

func (p *parser) callonPoolMeta1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolMeta1(stack["meta"])
}

func (c *current) onPoolName4() (interface{}, error) {
	return map[string]interface{}{"kind": "Glob", "pattern": "*"}, nil
}

func (p *parser) callonPoolName4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName4()
}

func (c *current) onPoolName9(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "String", "text": name}, nil
}

func (p *parser) callonPoolName9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName9(stack["name"])
}

func (c *current) onPoolIdentifier1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPoolIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolIdentifier1()
}

func (c *current) onSortKeyArg1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SortKey", "keys": keys, "order": order}, nil

}

func (p *parser) callonSortKeyArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortKeyArg1(stack["keys"], stack["order"])
}

func (c *current) onTapArg2() (interface{}, error) {
	return true, nil
}

func (p *parser) callonTapArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTapArg2()
}

func (c *current) onTapArg6() (interface{}, error) {
	return false, nil
}

func (p *parser) callonTapArg6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTapArg6()
}

func (c *current) onFormatArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonFormatArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArg1(stack["val"])
}

func (c *current) onOrderSuffix2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix2()
}

func (c *current) onOrderSuffix4() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderSuffix4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix4()
}

func (c *current) onOrderSuffix6() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix6()
}

func (c *current) onPassOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Pass"}, nil

}

func (p *parser) callonPassOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassOp1()
}

func (c *current) onExplodeOp1(args, typ, as interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Explode", "args": args, "as": as, "type": typ}, nil

}

func (p *parser) callonExplodeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplodeOp1(stack["args"], stack["typ"], stack["as"])
}

func (c *current) onMergeOp1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Merge", "expr": expr}, nil

}

func (p *parser) callonMergeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMergeOp1(stack["expr"])
}

func (c *current) onOverOp1(exprs, locals, body interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Over", "exprs": exprs, "locals": locals, "body": body}, nil

}

func (p *parser) callonOverOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverOp1(stack["exprs"], stack["locals"], stack["body"])
}

func (c *current) onLateral2(scope interface{}) (interface{}, error) {
	return scope, nil
}

func (p *parser) callonLateral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLateral2(stack["scope"])
}

func (c *current) onLateral13(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonLateral13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLateral13(stack["seq"])
}

func (c *current) onLocals10(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonLocals10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocals10(stack["a"])
}

func (c *current) onLocals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLocals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocals1(stack["first"], stack["rest"])
}

func (c *current) onLocalsAssignment1(name, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"name": name, "expr": map[string]interface{}{"kind": "ID", "name": name}}
	if opt != nil {
		m["expr"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonLocalsAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocalsAssignment1(stack["name"], stack["opt"])
}

func (c *current) onYieldOp1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Yield", "exprs": exprs}, nil

}

func (p *parser) callonYieldOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYieldOp1(stack["exprs"])
}

func (c *current) onTypeArg1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeArg1(stack["typ"])
}

func (c *current) onAsArg1(lhs interface{}) (interface{}, error) {
	return lhs, nil
}

func (p *parser) callonAsArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsArg1(stack["lhs"])
}

func (c *current) onLvals7(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonLvals7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals7(stack["lval"])
}

func (c *current) onLvals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLvals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals1(stack["first"], stack["rest"])
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignments7(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments7(stack["a"])
}

func (c *current) onAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr1(cond, opt interface{}) (interface{}, error) {
	if opt != nil {
		var Then = opt.([]interface{})[3]
		var Else = opt.([]interface{})[7]
		return map[string]interface{}{"kind": "Conditional", "cond": cond, "then": Then, "else": Else}, nil
	}
	return cond, nil

}

func (p *parser) callonConditionalExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr1(stack["cond"], stack["opt"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onComparisonExpr15() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparisonExpr15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr15()
}

func (c *current) onComparisonExpr1(lhs, opAndRHS interface{}) (interface{}, error) {
	if opAndRHS == nil {
		return lhs, nil
	}
	var op = opAndRHS.([]interface{})[1]
	var rhs = opAndRHS.([]interface{})[3]
	return map[string]interface{}{"kind": "BinaryExpr", "op": op, "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonComparisonExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr1(stack["lhs"], stack["opAndRHS"])
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onNegationExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "-", "operand": e}, nil

}

func (p *parser) callonNegationExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNegationExpr2(stack["e"])
}

func (c *current) onFuncExpr2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr2(stack["first"], stack["rest"])
}

func (c *current) onFuncExpr9(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr9(stack["first"], stack["rest"])
}

func (c *current) onCast1(typ, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": expr, "type": typ}, nil

}

func (p *parser) callonCast1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCast1(stack["typ"], stack["expr"])
}

func (c *current) onFunction3(arg0Text, arg1, where interface{}) (interface{}, error) {
	var arg0 = map[string]interface{}{"kind": "Primitive", "type": "string", "text": arg0Text}
	return map[string]interface{}{"kind": "Call", "name": "regexp", "args": []interface{}{arg0, arg1}, "where": where}, nil

}

func (p *parser) callonFunction3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction3(stack["arg0Text"], stack["arg1"], stack["where"])
}

func (c *current) onFunction21(arg0, arg1Text, arg2, where interface{}) (interface{}, error) {
	var arg1 = map[string]interface{}{"kind": "Primitive", "type": "string", "text": arg1Text}
	return map[string]interface{}{"kind": "Call", "name": "regexp_replace", "args": []interface{}{arg0, arg1, arg2}, "where": where}, nil

}

func (p *parser) callonFunction21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction21(stack["arg0"], stack["arg1Text"], stack["arg2"], stack["where"])
}

func (c *current) onFunction44(fn, args, where interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": fn, "args": args, "where": where}, nil

}

func (p *parser) callonFunction44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction44(stack["fn"], stack["args"], stack["where"])
}

func (c *current) onFunctionArgs2(o interface{}) (interface{}, error) {
	return []interface{}{o}, nil
}

func (p *parser) callonFunctionArgs2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunctionArgs2(stack["o"])
}

func (c *current) onGrep1(pattern, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Grep", "pattern": pattern, "expr": map[string]interface{}{"kind": "ID", "name": "this"}}
	if opt != nil {
		m["expr"] = opt.([]interface{})[2]
	}
	return m, nil

}

func (p *parser) callonGrep1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrep1(stack["pattern"], stack["opt"])
}

func (c *current) onPattern4(s interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "String", "text": s}, nil

}

func (p *parser) callonPattern4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPattern4(stack["s"])
}

func (c *current) onOptionalExprs3() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonOptionalExprs3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalExprs3()
}

func (c *current) onExprs7(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonExprs7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs7(stack["e"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr1(stack["first"], stack["rest"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref14(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": nil, "rhs": to}}, nil

}

func (p *parser) callonDeref14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref14(stack["to"])
}

func (c *current) onDeref23(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref23(stack["expr"])
}

func (c *current) onDeref29(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref29(stack["id"])
}

func (c *current) onPrimary7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary7(stack["expr"])
}

func (c *current) onPrimary15(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary15(stack["expr"])
}

func (c *current) onOverExpr1(exprs, locals, body interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OverExpr", "locals": locals, "exprs": exprs, "body": body}, nil

}

func (p *parser) callonOverExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverExpr1(stack["exprs"], stack["locals"], stack["body"])
}

func (c *current) onRecord1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RecordExpr", "elems": elems}, nil

}

func (p *parser) callonRecord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecord1(stack["elems"])
}

func (c *current) onRecordElems2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonRecordElems2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems2(stack["first"], stack["rest"])
}

func (c *current) onRecordElems9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonRecordElems9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems9()
}

func (c *current) onRecordElemTail1(elem interface{}) (interface{}, error) {
	return elem, nil
}

func (p *parser) callonRecordElemTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElemTail1(stack["elem"])
}

func (c *current) onSpread1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Spread", "expr": expr}, nil

}

func (p *parser) callonSpread1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpread1(stack["expr"])
}

func (c *current) onField1(name, value interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Field", "name": name, "value": value}, nil

}

func (p *parser) callonField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField1(stack["name"], stack["value"])
}

func (c *current) onArray1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ArrayExpr", "elems": elems}, nil

}

func (p *parser) callonArray1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArray1(stack["elems"])
}

func (c *current) onSet1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SetExpr", "elems": elems}, nil

}

func (p *parser) callonSet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSet1(stack["elems"])
}

func (c *current) onVectorElems8(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonVectorElems8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems8(stack["e"])
}

func (c *current) onVectorElems2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonVectorElems2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems2(stack["first"], stack["rest"])
}

func (c *current) onVectorElems15() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonVectorElems15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems15()
}

func (c *current) onVectorElem3(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "VectorValue", "expr": e}, nil
}

func (p *parser) callonVectorElem3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElem3(stack["e"])
}

func (c *current) onMap1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "MapExpr", "entries": exprs}, nil

}

func (p *parser) callonMap1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMap1(stack["exprs"])
}

func (c *current) onEntries2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonEntries2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries2(stack["first"], stack["rest"])
}

func (c *current) onEntries9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonEntries9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries9()
}

func (c *current) onEntryTail1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonEntryTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntryTail1(stack["e"])
}

func (c *current) onEntry1(key, value interface{}) (interface{}, error) {
	return map[string]interface{}{"key": key, "value": value}, nil

}

func (p *parser) callonEntry1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntry1(stack["key"], stack["value"])
}

func (c *current) onSQLOp1(selection, from, joins, where, groupby, having, orderby, limit interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "SQLExpr",

		"select": selection,

		"from": from,

		"joins": joins,

		"where": where,

		"group_by": groupby,

		"having": having,

		"order_by": orderby,

		"limit": limit}, nil

}

func (p *parser) callonSQLOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOp1(stack["selection"], stack["from"], stack["joins"], stack["where"], stack["groupby"], stack["having"], stack["orderby"], stack["limit"])
}

func (c *current) onSQLSelect2() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLSelect2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect2()
}

func (c *current) onSQLSelect7(assignments interface{}) (interface{}, error) {
	return assignments, nil
}

func (p *parser) callonSQLSelect7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect7(stack["assignments"])
}

func (c *current) onSQLAssignment1(rhs, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": rhs}
	if opt != nil {
		m["lhs"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonSQLAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment1(stack["rhs"], stack["opt"])
}

func (c *current) onSQLAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments7(stack["expr"])
}

func (c *current) onSQLAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSQLFrom2(table, alias interface{}) (interface{}, error) {
	return map[string]interface{}{"table": table, "alias": alias}, nil

}

func (p *parser) callonSQLFrom2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom2(stack["table"], stack["alias"])
}

func (c *current) onSQLFrom12() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLFrom12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom12()
}

func (c *current) onSQLAlias2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias2(stack["id"])
}

func (c *current) onSQLAlias9(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias9(stack["id"])
}

func (c *current) onSQLJoins7(join interface{}) (interface{}, error) {
	return join, nil
}

func (p *parser) callonSQLJoins7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins7(stack["join"])
}

func (c *current) onSQLJoins1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLJoins1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins1(stack["first"], stack["rest"])
}

func (c *current) onSQLJoin1(style, table, alias, leftKey, rightKey interface{}) (interface{}, error) {
	return map[string]interface{}{

		"table": table,

		"style": style,

		"left_key": leftKey,

		"right_key": rightKey,

		"alias": alias}, nil

}

func (p *parser) callonSQLJoin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoin1(stack["style"], stack["table"], stack["alias"], stack["leftKey"], stack["rightKey"])
}

func (c *current) onSQLJoinStyle2(style interface{}) (interface{}, error) {
	return style, nil
}

func (p *parser) callonSQLJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle2(stack["style"])
}

func (c *current) onSQLJoinStyle11() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonSQLJoinStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle11()
}

func (c *current) onSQLWhere1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLWhere1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLWhere1(stack["expr"])
}

func (c *current) onSQLGroupBy1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonSQLGroupBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLGroupBy1(stack["columns"])
}

func (c *current) onSQLHaving1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLHaving1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLHaving1(stack["expr"])
}

func (c *current) onSQLOrderBy1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SQLOrderBy", "keys": keys, "order": order}, nil

}

func (p *parser) callonSQLOrderBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrderBy1(stack["keys"], stack["order"])
}

func (c *current) onSQLOrder2(dir interface{}) (interface{}, error) {
	return dir, nil
}

func (p *parser) callonSQLOrder2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder2(stack["dir"])
}

func (c *current) onSQLOrder9() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonSQLOrder9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder9()
}

func (c *current) onSQLLimit2(count interface{}) (interface{}, error) {
	return count, nil
}

func (p *parser) callonSQLLimit2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit2(stack["count"])
}

func (c *current) onSQLLimit9() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonSQLLimit9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit9()
}

func (c *current) onSELECT1() (interface{}, error) {
	return "select", nil
}

func (p *parser) callonSELECT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSELECT1()
}

func (c *current) onAS1() (interface{}, error) {
	return "as", nil
}

func (p *parser) callonAS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAS1()
}

func (c *current) onFROM1() (interface{}, error) {
	return "from", nil
}

func (p *parser) callonFROM1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFROM1()
}

func (c *current) onJOIN1() (interface{}, error) {
	return "join", nil
}

func (p *parser) callonJOIN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJOIN1()
}

func (c *current) onWHERE1() (interface{}, error) {
	return "where", nil
}

func (p *parser) callonWHERE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWHERE1()
}

func (c *current) onGROUP1() (interface{}, error) {
	return "group", nil
}

func (p *parser) callonGROUP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGROUP1()
}

func (c *current) onBY1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonBY1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBY1()
}

func (c *current) onHAVING1() (interface{}, error) {
	return "having", nil
}

func (p *parser) callonHAVING1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHAVING1()
}

func (c *current) onORDER1() (interface{}, error) {
	return "order", nil
}

func (p *parser) callonORDER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onORDER1()
}

func (c *current) onON1() (interface{}, error) {
	return "on", nil
}

func (p *parser) callonON1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onON1()
}

func (c *current) onLIMIT1() (interface{}, error) {
	return "limit", nil
}

func (p *parser) callonLIMIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIMIT1()
}

func (c *current) onASC1() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonASC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onASC1()
}

func (c *current) onDESC1() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonDESC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDESC1()
}

func (c *current) onANTI1() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonANTI1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onANTI1()
}

func (c *current) onLEFT1() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonLEFT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLEFT1()
}

func (c *current) onRIGHT1() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonRIGHT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRIGHT1()
}

func (c *current) onINNER1() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonINNER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINNER1()
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "float64", "text": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "int64", "text": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "null", "text": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onBytesLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bytes", "text": string(c.text)}, nil

}

func (p *parser) callonBytesLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBytesLiteral1()
}

func (c *current) onTypeLiteral1(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonTypeLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeLiteral1(stack["typ"])
}

func (c *current) onCastType3(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonCastType3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCastType3(stack["typ"])
}

func (c *current) onAmbiguousType2(name interface{}) (interface{}, error) {
	return name, nil
}

func (p *parser) callonAmbiguousType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType2(stack["name"])
}

func (c *current) onAmbiguousType8(name, opt interface{}) (interface{}, error) {
	if opt != nil {
		return map[string]interface{}{"kind": "TypeDef", "name": name, "type": opt.([]interface{})[3]}, nil
	}
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType8(stack["name"], stack["opt"])
}

func (c *current) onAmbiguousType19(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType19(stack["name"])
}

func (c *current) onAmbiguousType22(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonAmbiguousType22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType22(stack["u"])
}

func (c *current) onTypeUnion1(types interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeUnion", "types": types}, nil

}

func (p *parser) callonTypeUnion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeUnion1(stack["types"])
}

func (c *current) onTypeList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeList1(stack["first"], stack["rest"])
}

func (c *current) onTypeListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeListTail1(stack["typ"])
}

func (c *current) onComplexType2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType2(stack["fields"])
}

func (c *current) onComplexType10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexType10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType10(stack["typ"])
}

func (c *current) onComplexType18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexType18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType18(stack["typ"])
}

func (c *current) onComplexType26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexType26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType26(stack["keyType"], stack["valType"])
}

func (c *current) onTemplateLiteral1(v interface{}) (interface{}, error) {
	if len(v.([]interface{})) == 0 {
		return map[string]interface{}{"kind": "Primitive", "type": "string", "text": ""}, nil
	}
	return makeTemplateExprChain(v), nil

}

func (p *parser) callonTemplateLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteral1(stack["v"])
}

func (c *current) onTemplateLiteralParts2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts2(stack["v"])
}

func (c *current) onTemplateLiteralParts9(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts9(stack["v"])
}

func (c *current) onTemplateDoubleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateDoubleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedPart3(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar2(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar7(stack["v"])
}

func (c *current) onTemplateSingleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateSingleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedPart3(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar2(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar7(stack["v"])
}

func (c *current) onTemplateExpr1(e interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "Cast",

		"expr": e,

		"type": map[string]interface{}{

			"kind": "TypeValue",

			"value": map[string]interface{}{"kind": "TypePrimitive", "name": "string"}}}, nil

}

func (p *parser) callonTemplateExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateExpr1(stack["e"])
}

func (c *current) onPrimitiveType1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveType1()
}

func (c *current) onTypeFieldList2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList2(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldList9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonTypeFieldList9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList9()
}

func (c *current) onTypeFieldListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTail1(stack["typ"])
}

func (c *current) onTypeField1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeField1(stack["name"], stack["typ"])
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return "in", nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onIdentifierName19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName19()
}

func (c *current) onIdentifierName21(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName21(stack["id"])
}

func (c *current) onIdentifierNames7(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierNames7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierNames7(stack["id"])
}

func (c *current) onIdentifierNames1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonIdentifierNames1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierNames1(stack["first"], stack["rest"])
}

func (c *current) onTime1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "time", "text": string(c.text)}, nil

}

func (p *parser) callonTime1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTime1()
}

func (c *current) onDuration1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "duration", "text": string(c.text)}, nil

}

func (p *parser) callonDuration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDuration1()
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onFloatString22() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFloatString22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString22()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordChars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordChars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordChars1()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onGlobPattern1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil

}

func (p *parser) callonGlobPattern1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobPattern1(stack["head"], stack["tail"])
}

func (c *current) onGlobStart4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonGlobStart4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobStart4()
}

func (c *current) onGlobEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonGlobEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEsc1(stack["s"])
}

func (c *current) onGlobEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonGlobEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape2()
}

func (c *current) onGlobEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonGlobEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape4()
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onSingleCharEscape3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleCharEscape3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape3()
}

func (c *current) onSingleCharEscape6() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape6()
}

func (c *current) onSingleCharEscape8() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape8()
}

func (c *current) onSingleCharEscape10() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape10()
}

func (c *current) onSingleCharEscape12() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape12()
}

func (c *current) onSingleCharEscape14() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape14()
}

func (c *current) onSingleCharEscape16() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape16()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexpPattern1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexpPattern1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpPattern1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
