// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/brimdata/zed/reglob"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 7, col: 1, offset: 26},
			expr: &actionExpr{
				pos: position{line: 7, col: 9, offset: 34},
				run: (*parser).callonstart1,
				expr: &seqExpr{
					pos: position{line: 7, col: 9, offset: 34},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 7, col: 9, offset: 34},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 7, col: 12, offset: 37},
							label: "ast",
							expr: &ruleRefExpr{
								pos:  position{line: 7, col: 16, offset: 41},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 27, offset: 52},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 30, offset: 55},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Sequential",
			pos:  position{line: 9, col: 1, offset: 80},
			expr: &choiceExpr{
				pos: position{line: 10, col: 5, offset: 95},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 10, col: 5, offset: 95},
						run: (*parser).callonSequential2,
						expr: &seqExpr{
							pos: position{line: 10, col: 5, offset: 95},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 10, col: 5, offset: 95},
									label: "consts",
									expr: &ruleRefExpr{
										pos:  position{line: 10, col: 12, offset: 102},
										name: "Consts",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 10, col: 19, offset: 109},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 10, col: 22, offset: 112},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 10, col: 28, offset: 118},
										name: "Operation",
									},
								},
								&labeledExpr{
									pos:   position{line: 10, col: 38, offset: 128},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 10, col: 43, offset: 133},
										expr: &ruleRefExpr{
											pos:  position{line: 10, col: 43, offset: 133},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 13, col: 5, offset: 308},
						run: (*parser).callonSequential12,
						expr: &seqExpr{
							pos: position{line: 13, col: 5, offset: 308},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 13, col: 5, offset: 308},
									label: "consts",
									expr: &ruleRefExpr{
										pos:  position{line: 13, col: 12, offset: 315},
										name: "Consts",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 13, col: 19, offset: 322},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 13, col: 22, offset: 325},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 13, col: 25, offset: 328},
										name: "Operation",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SequentialTail",
			pos:  position{line: 17, col: 1, offset: 455},
			expr: &actionExpr{
				pos: position{line: 17, col: 18, offset: 472},
				run: (*parser).callonSequentialTail1,
				expr: &seqExpr{
					pos: position{line: 17, col: 18, offset: 472},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 17, col: 18, offset: 472},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 21, offset: 475},
							name: "Pipe",
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 26, offset: 480},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 17, col: 29, offset: 483},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 31, offset: 485},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Consts",
			pos:  position{line: 19, col: 1, offset: 514},
			expr: &choiceExpr{
				pos: position{line: 20, col: 5, offset: 525},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 20, col: 5, offset: 525},
						expr: &ruleRefExpr{
							pos:  position{line: 20, col: 5, offset: 525},
							name: "Const",
						},
					},
					&actionExpr{
						pos: position{line: 21, col: 5, offset: 536},
						run: (*parser).callonConsts4,
						expr: &ruleRefExpr{
							pos:  position{line: 21, col: 5, offset: 536},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Const",
			pos:  position{line: 23, col: 1, offset: 572},
			expr: &actionExpr{
				pos: position{line: 23, col: 9, offset: 580},
				run: (*parser).callonConst1,
				expr: &seqExpr{
					pos: position{line: 23, col: 9, offset: 580},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 23, col: 9, offset: 580},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 23, col: 12, offset: 583},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 23, col: 14, offset: 585},
								name: "ConstDef",
							},
						},
					},
				},
			},
		},
		{
			name: "ConstDef",
			pos:  position{line: 25, col: 1, offset: 613},
			expr: &choiceExpr{
				pos: position{line: 26, col: 5, offset: 626},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 26, col: 5, offset: 626},
						run: (*parser).callonConstDef2,
						expr: &seqExpr{
							pos: position{line: 26, col: 5, offset: 626},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 26, col: 5, offset: 626},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 26, col: 13, offset: 634},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 26, col: 15, offset: 636},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 26, col: 18, offset: 639},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 26, col: 33, offset: 654},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 26, col: 36, offset: 657},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 26, col: 40, offset: 661},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 26, col: 43, offset: 664},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 26, col: 48, offset: 669},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 29, col: 5, offset: 751},
						run: (*parser).callonConstDef13,
						expr: &seqExpr{
							pos: position{line: 29, col: 5, offset: 751},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 29, col: 5, offset: 751},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 29, col: 12, offset: 758},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 29, col: 14, offset: 760},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 29, col: 17, offset: 763},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 29, col: 32, offset: 778},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 29, col: 35, offset: 781},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 29, col: 39, offset: 785},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 29, col: 42, offset: 788},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 29, col: 46, offset: 792},
										name: "Type",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operation",
			pos:  position{line: 39, col: 1, offset: 1016},
			expr: &choiceExpr{
				pos: position{line: 40, col: 5, offset: 1030},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 40, col: 5, offset: 1030},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 40, col: 5, offset: 1030},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 40, col: 5, offset: 1030},
									val:        "fork",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 40, col: 12, offset: 1037},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 40, col: 15, offset: 1040},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 40, col: 19, offset: 1044},
									label: "procArray",
									expr: &oneOrMoreExpr{
										pos: position{line: 40, col: 29, offset: 1054},
										expr: &ruleRefExpr{
											pos:  position{line: 40, col: 29, offset: 1054},
											name: "Leg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 40, col: 34, offset: 1059},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 40, col: 37, offset: 1062},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 43, col: 5, offset: 1159},
						run: (*parser).callonOperation12,
						expr: &seqExpr{
							pos: position{line: 43, col: 5, offset: 1159},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 43, col: 5, offset: 1159},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 43, col: 14, offset: 1168},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 43, col: 16, offset: 1170},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 43, col: 21, offset: 1175},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 43, col: 26, offset: 1180},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 43, col: 28, offset: 1182},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 43, col: 32, offset: 1186},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 43, col: 38, offset: 1192},
										expr: &ruleRefExpr{
											pos:  position{line: 43, col: 38, offset: 1192},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 43, col: 49, offset: 1203},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 43, col: 52, offset: 1206},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 46, col: 5, offset: 1311},
						run: (*parser).callonOperation25,
						expr: &seqExpr{
							pos: position{line: 46, col: 5, offset: 1311},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 46, col: 5, offset: 1311},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 46, col: 14, offset: 1320},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 46, col: 17, offset: 1323},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 46, col: 21, offset: 1327},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 46, col: 27, offset: 1333},
										expr: &ruleRefExpr{
											pos:  position{line: 46, col: 27, offset: 1333},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 46, col: 38, offset: 1344},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 46, col: 41, offset: 1347},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 49, col: 5, offset: 1451},
						run: (*parser).callonOperation35,
						expr: &seqExpr{
							pos: position{line: 49, col: 5, offset: 1451},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 49, col: 5, offset: 1451},
									val:        "from",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 49, col: 12, offset: 1458},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 49, col: 15, offset: 1461},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 49, col: 19, offset: 1465},
									label: "trunks",
									expr: &oneOrMoreExpr{
										pos: position{line: 49, col: 26, offset: 1472},
										expr: &ruleRefExpr{
											pos:  position{line: 49, col: 26, offset: 1472},
											name: "FromLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 49, col: 35, offset: 1481},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 49, col: 38, offset: 1484},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&labeledExpr{
						pos:   position{line: 52, col: 5, offset: 1575},
						label: "op",
						expr: &ruleRefExpr{
							pos:  position{line: 52, col: 8, offset: 1578},
							name: "Operator",
						},
					},
					&actionExpr{
						pos: position{line: 53, col: 5, offset: 1591},
						run: (*parser).callonOperation47,
						expr: &seqExpr{
							pos: position{line: 53, col: 5, offset: 1591},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 53, col: 5, offset: 1591},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 53, col: 7, offset: 1593},
										name: "OpAssignment",
									},
								},
								&andExpr{
									pos: position{line: 53, col: 20, offset: 1606},
									expr: &ruleRefExpr{
										pos:  position{line: 53, col: 21, offset: 1607},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 54, col: 5, offset: 1637},
						run: (*parser).callonOperation53,
						expr: &seqExpr{
							pos: position{line: 54, col: 5, offset: 1637},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 54, col: 5, offset: 1637},
									expr: &seqExpr{
										pos: position{line: 54, col: 7, offset: 1639},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 54, col: 7, offset: 1639},
												name: "Function",
											},
											&ruleRefExpr{
												pos:  position{line: 54, col: 16, offset: 1648},
												name: "EndOfOp",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 54, col: 25, offset: 1657},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 54, col: 27, offset: 1659},
										name: "Aggregation",
									},
								},
								&andExpr{
									pos: position{line: 54, col: 39, offset: 1671},
									expr: &ruleRefExpr{
										pos:  position{line: 54, col: 40, offset: 1672},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 55, col: 5, offset: 1703},
						run: (*parser).callonOperation63,
						expr: &seqExpr{
							pos: position{line: 55, col: 5, offset: 1703},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 55, col: 5, offset: 1703},
									val:        "search",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 55, col: 14, offset: 1712},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 55, col: 16, offset: 1714},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 55, col: 21, offset: 1719},
										name: "SearchBoolean",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 58, col: 5, offset: 1817},
						run: (*parser).callonOperation69,
						expr: &labeledExpr{
							pos:   position{line: 58, col: 5, offset: 1817},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 58, col: 10, offset: 1822},
								name: "SearchBoolean",
							},
						},
					},
					&actionExpr{
						pos: position{line: 61, col: 5, offset: 1921},
						run: (*parser).callonOperation72,
						expr: &labeledExpr{
							pos:   position{line: 61, col: 5, offset: 1921},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 61, col: 10, offset: 1926},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "EndOfOp",
			pos:  position{line: 65, col: 1, offset: 2013},
			expr: &seqExpr{
				pos: position{line: 65, col: 11, offset: 2023},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 65, col: 11, offset: 2023},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 65, col: 15, offset: 2027},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 65, col: 15, offset: 2027},
								name: "Pipe",
							},
							&ruleRefExpr{
								pos:  position{line: 65, col: 22, offset: 2034},
								name: "SearchKeywordGuard",
							},
							&litMatcher{
								pos:        position{line: 65, col: 43, offset: 2055},
								val:        "=>",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 65, col: 50, offset: 2062},
								val:        ")",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 65, col: 56, offset: 2068},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "Pipe",
			pos:  position{line: 66, col: 1, offset: 2073},
			expr: &seqExpr{
				pos: position{line: 66, col: 8, offset: 2080},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 66, col: 8, offset: 2080},
						val:        "|",
						ignoreCase: false,
					},
					&notExpr{
						pos: position{line: 66, col: 12, offset: 2084},
						expr: &choiceExpr{
							pos: position{line: 66, col: 14, offset: 2086},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 66, col: 14, offset: 2086},
									val:        "{",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 66, col: 20, offset: 2092},
									val:        "[",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Leg",
			pos:  position{line: 68, col: 1, offset: 2098},
			expr: &actionExpr{
				pos: position{line: 69, col: 5, offset: 2106},
				run: (*parser).callonLeg1,
				expr: &seqExpr{
					pos: position{line: 69, col: 5, offset: 2106},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 69, col: 5, offset: 2106},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 69, col: 8, offset: 2109},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 69, col: 13, offset: 2114},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 69, col: 16, offset: 2117},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 69, col: 18, offset: 2119},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchLeg",
			pos:  position{line: 71, col: 1, offset: 2149},
			expr: &actionExpr{
				pos: position{line: 72, col: 5, offset: 2163},
				run: (*parser).callonSwitchLeg1,
				expr: &seqExpr{
					pos: position{line: 72, col: 5, offset: 2163},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 72, col: 5, offset: 2163},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 72, col: 8, offset: 2166},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 72, col: 13, offset: 2171},
								name: "Case",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 72, col: 18, offset: 2176},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 72, col: 21, offset: 2179},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 72, col: 26, offset: 2184},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 72, col: 29, offset: 2187},
							label: "proc",
							expr: &ruleRefExpr{
								pos:  position{line: 72, col: 34, offset: 2192},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "Case",
			pos:  position{line: 76, col: 1, offset: 2281},
			expr: &choiceExpr{
				pos: position{line: 77, col: 5, offset: 2290},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 77, col: 5, offset: 2290},
						run: (*parser).callonCase2,
						expr: &seqExpr{
							pos: position{line: 77, col: 5, offset: 2290},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 77, col: 5, offset: 2290},
									val:        "case",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 77, col: 12, offset: 2297},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 77, col: 14, offset: 2299},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 77, col: 19, offset: 2304},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 78, col: 5, offset: 2334},
						run: (*parser).callonCase8,
						expr: &litMatcher{
							pos:        position{line: 78, col: 5, offset: 2334},
							val:        "default",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromLeg",
			pos:  position{line: 80, col: 1, offset: 2365},
			expr: &choiceExpr{
				pos: position{line: 81, col: 5, offset: 2377},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 81, col: 5, offset: 2377},
						run: (*parser).callonFromLeg2,
						expr: &seqExpr{
							pos: position{line: 81, col: 5, offset: 2377},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 81, col: 5, offset: 2377},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 81, col: 8, offset: 2380},
									label: "source",
									expr: &ruleRefExpr{
										pos:  position{line: 81, col: 15, offset: 2387},
										name: "FromHead",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 81, col: 24, offset: 2396},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 81, col: 28, offset: 2400},
									label: "seq",
									expr: &ruleRefExpr{
										pos:  position{line: 81, col: 32, offset: 2404},
										name: "Sequential",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 84, col: 5, offset: 2515},
						run: (*parser).callonFromLeg10,
						expr: &seqExpr{
							pos: position{line: 84, col: 5, offset: 2515},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 84, col: 5, offset: 2515},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 84, col: 8, offset: 2518},
									label: "source",
									expr: &ruleRefExpr{
										pos:  position{line: 84, col: 15, offset: 2525},
										name: "FromSource",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FromHead",
			pos:  position{line: 88, col: 1, offset: 2633},
			expr: &actionExpr{
				pos: position{line: 89, col: 5, offset: 2646},
				run: (*parser).callonFromHead1,
				expr: &seqExpr{
					pos: position{line: 89, col: 5, offset: 2646},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 89, col: 5, offset: 2646},
							label: "src",
							expr: &ruleRefExpr{
								pos:  position{line: 89, col: 9, offset: 2650},
								name: "FromSource",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 89, col: 20, offset: 2661},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 89, col: 23, offset: 2664},
							val:        "=>",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromSource",
			pos:  position{line: 91, col: 1, offset: 2690},
			expr: &choiceExpr{
				pos: position{line: 92, col: 5, offset: 2705},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 92, col: 5, offset: 2705},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 93, col: 5, offset: 2714},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 94, col: 5, offset: 2722},
						name: "Pool",
					},
					&ruleRefExpr{
						pos:  position{line: 95, col: 5, offset: 2731},
						name: "PassProc",
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 97, col: 1, offset: 2741},
			expr: &seqExpr{
				pos: position{line: 97, col: 13, offset: 2753},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 97, col: 13, offset: 2753},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 97, col: 17, offset: 2757},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 97, col: 18, offset: 2758},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 97, col: 18, offset: 2758},
										expr: &litMatcher{
											pos:        position{line: 97, col: 19, offset: 2759},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 97, col: 24, offset: 2764},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 97, col: 38, offset: 2778},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 97, col: 57, offset: 2797},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 97, col: 82, offset: 2822},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 97, col: 88, offset: 2828},
								val:        "(",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 97, col: 94, offset: 2834},
								val:        "[",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 97, col: 100, offset: 2840},
								val:        "matches",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 99, col: 1, offset: 2852},
			expr: &actionExpr{
				pos: position{line: 99, col: 14, offset: 2865},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 99, col: 15, offset: 2866},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 99, col: 15, offset: 2866},
							val:        "==",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 99, col: 22, offset: 2873},
							val:        "!=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 99, col: 29, offset: 2880},
							val:        "in",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 99, col: 36, offset: 2887},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 99, col: 43, offset: 2894},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 99, col: 49, offset: 2900},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 99, col: 56, offset: 2907},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 101, col: 1, offset: 2944},
			expr: &actionExpr{
				pos: position{line: 102, col: 5, offset: 2962},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 102, col: 5, offset: 2962},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 102, col: 5, offset: 2962},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 102, col: 11, offset: 2968},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 102, col: 21, offset: 2978},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 102, col: 26, offset: 2983},
								expr: &ruleRefExpr{
									pos:  position{line: 102, col: 26, offset: 2983},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 106, col: 1, offset: 3057},
			expr: &actionExpr{
				pos: position{line: 106, col: 16, offset: 3072},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 106, col: 16, offset: 3072},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 106, col: 16, offset: 3072},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 106, col: 18, offset: 3074},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 106, col: 26, offset: 3082},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 106, col: 28, offset: 3084},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 106, col: 30, offset: 3086},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 108, col: 1, offset: 3136},
			expr: &actionExpr{
				pos: position{line: 109, col: 5, offset: 3150},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 109, col: 5, offset: 3150},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 109, col: 5, offset: 3150},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 109, col: 11, offset: 3156},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 110, col: 5, offset: 3173},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 110, col: 10, offset: 3178},
								expr: &actionExpr{
									pos: position{line: 110, col: 11, offset: 3179},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 110, col: 11, offset: 3179},
										exprs: []interface{}{
											&zeroOrOneExpr{
												pos: position{line: 110, col: 11, offset: 3179},
												expr: &seqExpr{
													pos: position{line: 110, col: 12, offset: 3180},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 110, col: 12, offset: 3180},
															name: "_",
														},
														&ruleRefExpr{
															pos:  position{line: 110, col: 14, offset: 3182},
															name: "AndToken",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 110, col: 25, offset: 3193},
												name: "_",
											},
											&notExpr{
												pos: position{line: 110, col: 27, offset: 3195},
												expr: &choiceExpr{
													pos: position{line: 110, col: 29, offset: 3197},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 110, col: 29, offset: 3197},
															name: "OrToken",
														},
														&ruleRefExpr{
															pos:  position{line: 110, col: 39, offset: 3207},
															name: "SearchKeywordGuard",
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 110, col: 59, offset: 3227},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 110, col: 64, offset: 3232},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchKeywordGuard",
			pos:  position{line: 114, col: 1, offset: 3348},
			expr: &choiceExpr{
				pos: position{line: 115, col: 5, offset: 3371},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 115, col: 5, offset: 3371},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 115, col: 5, offset: 3371},
								name: "FromHead",
							},
							&ruleRefExpr{
								pos:  position{line: 115, col: 14, offset: 3380},
								name: "__",
							},
						},
					},
					&seqExpr{
						pos: position{line: 116, col: 5, offset: 3387},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 116, col: 5, offset: 3387},
								name: "Case",
							},
							&ruleRefExpr{
								pos:  position{line: 116, col: 10, offset: 3392},
								name: "__",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 118, col: 1, offset: 3396},
			expr: &choiceExpr{
				pos: position{line: 119, col: 5, offset: 3413},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 119, col: 5, offset: 3413},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 119, col: 5, offset: 3413},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 119, col: 6, offset: 3414},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 119, col: 6, offset: 3414},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 119, col: 6, offset: 3414},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 119, col: 15, offset: 3423},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 119, col: 19, offset: 3427},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 119, col: 19, offset: 3427},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 119, col: 23, offset: 3431},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 119, col: 27, offset: 3435},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 119, col: 29, offset: 3437},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 122, col: 5, offset: 3549},
						run: (*parser).callonSearchFactor13,
						expr: &seqExpr{
							pos: position{line: 122, col: 5, offset: 3549},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 122, col: 5, offset: 3549},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 122, col: 9, offset: 3553},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 122, col: 12, offset: 3556},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 122, col: 17, offset: 3561},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 122, col: 31, offset: 3575},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 122, col: 34, offset: 3578},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 123, col: 5, offset: 3607},
						name: "SearchExpr",
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 125, col: 1, offset: 3619},
			expr: &choiceExpr{
				pos: position{line: 126, col: 5, offset: 3634},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 126, col: 5, offset: 3634},
						run: (*parser).callonSearchExpr2,
						expr: &labeledExpr{
							pos:   position{line: 126, col: 5, offset: 3634},
							label: "search",
							expr: &ruleRefExpr{
								pos:  position{line: 126, col: 12, offset: 3641},
								name: "PatternSearch",
							},
						},
					},
					&actionExpr{
						pos: position{line: 127, col: 5, offset: 3682},
						run: (*parser).callonSearchExpr5,
						expr: &seqExpr{
							pos: position{line: 127, col: 5, offset: 3682},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 127, col: 5, offset: 3682},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 127, col: 7, offset: 3684},
										name: "SearchValue",
									},
								},
								&notExpr{
									pos: position{line: 127, col: 19, offset: 3696},
									expr: &ruleRefExpr{
										pos:  position{line: 127, col: 20, offset: 3697},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 130, col: 5, offset: 3814},
						run: (*parser).callonSearchExpr11,
						expr: &seqExpr{
							pos: position{line: 130, col: 5, offset: 3814},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 130, col: 5, offset: 3814},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 130, col: 9, offset: 3818},
									expr: &ruleRefExpr{
										pos:  position{line: 130, col: 10, offset: 3819},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 133, col: 5, offset: 3935},
						name: "EqualityCompareExpr",
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 135, col: 1, offset: 3956},
			expr: &choiceExpr{
				pos: position{line: 136, col: 5, offset: 3972},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 136, col: 5, offset: 3972},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 137, col: 5, offset: 3984},
						run: (*parser).callonSearchValue3,
						expr: &seqExpr{
							pos: position{line: 137, col: 5, offset: 3984},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 137, col: 5, offset: 3984},
									expr: &ruleRefExpr{
										pos:  position{line: 137, col: 6, offset: 3985},
										name: "Regexp",
									},
								},
								&labeledExpr{
									pos:   position{line: 137, col: 13, offset: 3992},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 137, col: 15, offset: 3994},
										name: "KeyWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PatternSearch",
			pos:  position{line: 141, col: 1, offset: 4102},
			expr: &actionExpr{
				pos: position{line: 142, col: 5, offset: 4120},
				run: (*parser).callonPatternSearch1,
				expr: &labeledExpr{
					pos:   position{line: 142, col: 5, offset: 4120},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 142, col: 13, offset: 4128},
						name: "Pattern",
					},
				},
			},
		},
		{
			name: "PatternMatch",
			pos:  position{line: 146, col: 1, offset: 4230},
			expr: &actionExpr{
				pos: position{line: 147, col: 5, offset: 4247},
				run: (*parser).callonPatternMatch1,
				expr: &seqExpr{
					pos: position{line: 147, col: 5, offset: 4247},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 147, col: 5, offset: 4247},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 147, col: 7, offset: 4249},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 147, col: 12, offset: 4254},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 147, col: 14, offset: 4256},
							val:        "matches",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 147, col: 24, offset: 4266},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 147, col: 27, offset: 4269},
							label: "pattern",
							expr: &ruleRefExpr{
								pos:  position{line: 147, col: 35, offset: 4277},
								name: "Pattern",
							},
						},
					},
				},
			},
		},
		{
			name: "Pattern",
			pos:  position{line: 151, col: 1, offset: 4389},
			expr: &choiceExpr{
				pos: position{line: 151, col: 11, offset: 4399},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 151, col: 11, offset: 4399},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 151, col: 20, offset: 4408},
						name: "Glob",
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 155, col: 1, offset: 4440},
			expr: &choiceExpr{
				pos: position{line: 156, col: 5, offset: 4456},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 156, col: 5, offset: 4456},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 156, col: 5, offset: 4456},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 156, col: 5, offset: 4456},
									expr: &ruleRefExpr{
										pos:  position{line: 156, col: 5, offset: 4456},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 156, col: 16, offset: 4467},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 156, col: 21, offset: 4472},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 156, col: 33, offset: 4484},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 156, col: 39, offset: 4490},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 159, col: 5, offset: 4616},
						run: (*parser).callonAggregation10,
						expr: &seqExpr{
							pos: position{line: 159, col: 5, offset: 4616},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 159, col: 5, offset: 4616},
									expr: &ruleRefExpr{
										pos:  position{line: 159, col: 5, offset: 4616},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 159, col: 16, offset: 4627},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 159, col: 21, offset: 4632},
										name: "AggAssignments",
									},
								},
								&labeledExpr{
									pos:   position{line: 159, col: 36, offset: 4647},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 159, col: 41, offset: 4652},
										expr: &seqExpr{
											pos: position{line: 159, col: 42, offset: 4653},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 159, col: 42, offset: 4653},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 159, col: 44, offset: 4655},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 159, col: 58, offset: 4669},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 159, col: 64, offset: 4675},
										name: "LimitArg",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Summarize",
			pos:  position{line: 167, col: 1, offset: 4889},
			expr: &seqExpr{
				pos: position{line: 167, col: 13, offset: 4901},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 167, col: 13, offset: 4901},
						val:        "summarize",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 167, col: 25, offset: 4913},
						name: "_",
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 169, col: 1, offset: 4916},
			expr: &actionExpr{
				pos: position{line: 170, col: 5, offset: 4932},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 170, col: 5, offset: 4932},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 170, col: 5, offset: 4932},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 170, col: 13, offset: 4940},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 170, col: 15, offset: 4942},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 170, col: 23, offset: 4950},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 172, col: 1, offset: 4991},
			expr: &choiceExpr{
				pos: position{line: 173, col: 5, offset: 5004},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 173, col: 5, offset: 5004},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 173, col: 5, offset: 5004},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 173, col: 5, offset: 5004},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 173, col: 7, offset: 5006},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 173, col: 14, offset: 5013},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 173, col: 16, offset: 5015},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 173, col: 25, offset: 5024},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 173, col: 27, offset: 5026},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 173, col: 33, offset: 5032},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 174, col: 5, offset: 5063},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 174, col: 5, offset: 5063},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 179, col: 1, offset: 5323},
			expr: &choiceExpr{
				pos: position{line: 180, col: 5, offset: 5342},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 180, col: 5, offset: 5342},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 181, col: 5, offset: 5357},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 181, col: 5, offset: 5357},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 181, col: 10, offset: 5362},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 183, col: 1, offset: 5454},
			expr: &actionExpr{
				pos: position{line: 184, col: 5, offset: 5474},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 184, col: 5, offset: 5474},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 184, col: 5, offset: 5474},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 184, col: 11, offset: 5480},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 184, col: 26, offset: 5495},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 184, col: 31, offset: 5500},
								expr: &actionExpr{
									pos: position{line: 184, col: 32, offset: 5501},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 184, col: 32, offset: 5501},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 184, col: 32, offset: 5501},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 184, col: 35, offset: 5504},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 184, col: 39, offset: 5508},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 184, col: 42, offset: 5511},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 184, col: 47, offset: 5516},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignment",
			pos:  position{line: 188, col: 1, offset: 5638},
			expr: &choiceExpr{
				pos: position{line: 189, col: 5, offset: 5656},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 189, col: 5, offset: 5656},
						run: (*parser).callonAggAssignment2,
						expr: &seqExpr{
							pos: position{line: 189, col: 5, offset: 5656},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 189, col: 5, offset: 5656},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 189, col: 10, offset: 5661},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 189, col: 15, offset: 5666},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 189, col: 18, offset: 5669},
									val:        ":=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 189, col: 23, offset: 5674},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 189, col: 26, offset: 5677},
									label: "agg",
									expr: &ruleRefExpr{
										pos:  position{line: 189, col: 30, offset: 5681},
										name: "Agg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 192, col: 5, offset: 5785},
						run: (*parser).callonAggAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 192, col: 5, offset: 5785},
							label: "agg",
							expr: &ruleRefExpr{
								pos:  position{line: 192, col: 9, offset: 5789},
								name: "Agg",
							},
						},
					},
				},
			},
		},
		{
			name: "Agg",
			pos:  position{line: 196, col: 1, offset: 5889},
			expr: &actionExpr{
				pos: position{line: 197, col: 5, offset: 5897},
				run: (*parser).callonAgg1,
				expr: &seqExpr{
					pos: position{line: 197, col: 5, offset: 5897},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 197, col: 5, offset: 5897},
							expr: &ruleRefExpr{
								pos:  position{line: 197, col: 6, offset: 5898},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 197, col: 16, offset: 5908},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 197, col: 19, offset: 5911},
								name: "AggName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 197, col: 27, offset: 5919},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 197, col: 30, offset: 5922},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 197, col: 34, offset: 5926},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 197, col: 37, offset: 5929},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 197, col: 42, offset: 5934},
								expr: &ruleRefExpr{
									pos:  position{line: 197, col: 42, offset: 5934},
									name: "Expr",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 197, col: 49, offset: 5941},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 197, col: 52, offset: 5944},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 197, col: 56, offset: 5948},
							expr: &seqExpr{
								pos: position{line: 197, col: 58, offset: 5950},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 197, col: 58, offset: 5950},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 197, col: 61, offset: 5953},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 197, col: 66, offset: 5958},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 197, col: 72, offset: 5964},
								expr: &ruleRefExpr{
									pos:  position{line: 197, col: 72, offset: 5964},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggName",
			pos:  position{line: 205, col: 1, offset: 6154},
			expr: &choiceExpr{
				pos: position{line: 206, col: 5, offset: 6166},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 206, col: 5, offset: 6166},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 207, col: 5, offset: 6185},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 208, col: 5, offset: 6198},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 210, col: 1, offset: 6207},
			expr: &actionExpr{
				pos: position{line: 210, col: 15, offset: 6221},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 210, col: 15, offset: 6221},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 210, col: 15, offset: 6221},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 210, col: 17, offset: 6223},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 210, col: 25, offset: 6231},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 210, col: 27, offset: 6233},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 210, col: 32, offset: 6238},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignments",
			pos:  position{line: 212, col: 1, offset: 6274},
			expr: &actionExpr{
				pos: position{line: 213, col: 5, offset: 6293},
				run: (*parser).callonAggAssignments1,
				expr: &seqExpr{
					pos: position{line: 213, col: 5, offset: 6293},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 213, col: 5, offset: 6293},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 213, col: 11, offset: 6299},
								name: "AggAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 213, col: 25, offset: 6313},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 213, col: 30, offset: 6318},
								expr: &seqExpr{
									pos: position{line: 213, col: 31, offset: 6319},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 213, col: 31, offset: 6319},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 213, col: 34, offset: 6322},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 213, col: 38, offset: 6326},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 213, col: 41, offset: 6329},
											name: "AggAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 223, col: 1, offset: 6565},
			expr: &choiceExpr{
				pos: position{line: 224, col: 5, offset: 6578},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 224, col: 5, offset: 6578},
						name: "SortProc",
					},
					&ruleRefExpr{
						pos:  position{line: 225, col: 5, offset: 6591},
						name: "TopProc",
					},
					&ruleRefExpr{
						pos:  position{line: 226, col: 5, offset: 6603},
						name: "CutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 227, col: 5, offset: 6615},
						name: "DropProc",
					},
					&ruleRefExpr{
						pos:  position{line: 228, col: 5, offset: 6628},
						name: "HeadProc",
					},
					&ruleRefExpr{
						pos:  position{line: 229, col: 5, offset: 6641},
						name: "TailProc",
					},
					&ruleRefExpr{
						pos:  position{line: 230, col: 5, offset: 6654},
						name: "WhereProc",
					},
					&ruleRefExpr{
						pos:  position{line: 231, col: 5, offset: 6668},
						name: "UniqProc",
					},
					&ruleRefExpr{
						pos:  position{line: 232, col: 5, offset: 6681},
						name: "PutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 233, col: 5, offset: 6693},
						name: "RenameProc",
					},
					&ruleRefExpr{
						pos:  position{line: 234, col: 5, offset: 6708},
						name: "FuseProc",
					},
					&ruleRefExpr{
						pos:  position{line: 235, col: 5, offset: 6721},
						name: "ShapeProc",
					},
					&ruleRefExpr{
						pos:  position{line: 236, col: 5, offset: 6735},
						name: "JoinProc",
					},
					&ruleRefExpr{
						pos:  position{line: 237, col: 5, offset: 6748},
						name: "SampleProc",
					},
					&ruleRefExpr{
						pos:  position{line: 238, col: 5, offset: 6763},
						name: "SQLProc",
					},
					&ruleRefExpr{
						pos:  position{line: 239, col: 5, offset: 6775},
						name: "FromProc",
					},
					&ruleRefExpr{
						pos:  position{line: 240, col: 5, offset: 6788},
						name: "PassProc",
					},
					&ruleRefExpr{
						pos:  position{line: 241, col: 5, offset: 6801},
						name: "ExplodeProc",
					},
					&ruleRefExpr{
						pos:  position{line: 242, col: 5, offset: 6817},
						name: "LetProc",
					},
					&ruleRefExpr{
						pos:  position{line: 243, col: 5, offset: 6829},
						name: "MergeProc",
					},
					&ruleRefExpr{
						pos:  position{line: 244, col: 5, offset: 6843},
						name: "OverProc",
					},
					&ruleRefExpr{
						pos:  position{line: 245, col: 5, offset: 6856},
						name: "YieldProc",
					},
				},
			},
		},
		{
			name: "SortProc",
			pos:  position{line: 247, col: 1, offset: 6867},
			expr: &actionExpr{
				pos: position{line: 248, col: 5, offset: 6880},
				run: (*parser).callonSortProc1,
				expr: &seqExpr{
					pos: position{line: 248, col: 5, offset: 6880},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 248, col: 5, offset: 6880},
							val:        "sort",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 248, col: 12, offset: 6887},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 248, col: 17, offset: 6892},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 248, col: 26, offset: 6901},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 248, col: 31, offset: 6906},
								expr: &actionExpr{
									pos: position{line: 248, col: 32, offset: 6907},
									run: (*parser).callonSortProc8,
									expr: &seqExpr{
										pos: position{line: 248, col: 32, offset: 6907},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 248, col: 32, offset: 6907},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 248, col: 34, offset: 6909},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 248, col: 36, offset: 6911},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 262, col: 1, offset: 7330},
			expr: &actionExpr{
				pos: position{line: 262, col: 12, offset: 7341},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 262, col: 12, offset: 7341},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 262, col: 17, offset: 7346},
						expr: &actionExpr{
							pos: position{line: 262, col: 18, offset: 7347},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 262, col: 18, offset: 7347},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 262, col: 18, offset: 7347},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 262, col: 20, offset: 7349},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 262, col: 22, offset: 7351},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 264, col: 1, offset: 7407},
			expr: &choiceExpr{
				pos: position{line: 265, col: 5, offset: 7419},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 265, col: 5, offset: 7419},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 265, col: 5, offset: 7419},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 266, col: 5, offset: 7494},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 266, col: 5, offset: 7494},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 266, col: 5, offset: 7494},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 266, col: 14, offset: 7503},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 266, col: 16, offset: 7505},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 266, col: 23, offset: 7512},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 266, col: 24, offset: 7513},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 266, col: 24, offset: 7513},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 266, col: 34, offset: 7523},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopProc",
			pos:  position{line: 268, col: 1, offset: 7637},
			expr: &actionExpr{
				pos: position{line: 269, col: 5, offset: 7649},
				run: (*parser).callonTopProc1,
				expr: &seqExpr{
					pos: position{line: 269, col: 5, offset: 7649},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 269, col: 5, offset: 7649},
							val:        "top",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 269, col: 11, offset: 7655},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 269, col: 17, offset: 7661},
								expr: &actionExpr{
									pos: position{line: 269, col: 18, offset: 7662},
									run: (*parser).callonTopProc6,
									expr: &seqExpr{
										pos: position{line: 269, col: 18, offset: 7662},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 269, col: 18, offset: 7662},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 269, col: 20, offset: 7664},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 269, col: 22, offset: 7666},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 269, col: 46, offset: 7690},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 269, col: 52, offset: 7696},
								expr: &seqExpr{
									pos: position{line: 269, col: 53, offset: 7697},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 269, col: 53, offset: 7697},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 269, col: 55, offset: 7699},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 269, col: 66, offset: 7710},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 269, col: 73, offset: 7717},
								expr: &actionExpr{
									pos: position{line: 269, col: 74, offset: 7718},
									run: (*parser).callonTopProc18,
									expr: &seqExpr{
										pos: position{line: 269, col: 74, offset: 7718},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 269, col: 74, offset: 7718},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 269, col: 76, offset: 7720},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 269, col: 78, offset: 7722},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutProc",
			pos:  position{line: 283, col: 1, offset: 8067},
			expr: &actionExpr{
				pos: position{line: 284, col: 5, offset: 8079},
				run: (*parser).callonCutProc1,
				expr: &seqExpr{
					pos: position{line: 284, col: 5, offset: 8079},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 284, col: 5, offset: 8079},
							val:        "cut",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 284, col: 11, offset: 8085},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 284, col: 13, offset: 8087},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 284, col: 18, offset: 8092},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropProc",
			pos:  position{line: 288, col: 1, offset: 8187},
			expr: &actionExpr{
				pos: position{line: 289, col: 5, offset: 8200},
				run: (*parser).callonDropProc1,
				expr: &seqExpr{
					pos: position{line: 289, col: 5, offset: 8200},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 289, col: 5, offset: 8200},
							val:        "drop",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 289, col: 12, offset: 8207},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 289, col: 14, offset: 8209},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 289, col: 19, offset: 8214},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadProc",
			pos:  position{line: 293, col: 1, offset: 8305},
			expr: &choiceExpr{
				pos: position{line: 294, col: 5, offset: 8318},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 294, col: 5, offset: 8318},
						run: (*parser).callonHeadProc2,
						expr: &seqExpr{
							pos: position{line: 294, col: 5, offset: 8318},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 294, col: 5, offset: 8318},
									val:        "head",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 294, col: 12, offset: 8325},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 294, col: 14, offset: 8327},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 294, col: 20, offset: 8333},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 295, col: 5, offset: 8413},
						run: (*parser).callonHeadProc8,
						expr: &litMatcher{
							pos:        position{line: 295, col: 5, offset: 8413},
							val:        "head",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TailProc",
			pos:  position{line: 297, col: 1, offset: 8488},
			expr: &choiceExpr{
				pos: position{line: 298, col: 5, offset: 8501},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 298, col: 5, offset: 8501},
						run: (*parser).callonTailProc2,
						expr: &seqExpr{
							pos: position{line: 298, col: 5, offset: 8501},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 298, col: 5, offset: 8501},
									val:        "tail",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 298, col: 12, offset: 8508},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 298, col: 14, offset: 8510},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 298, col: 20, offset: 8516},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 299, col: 5, offset: 8596},
						run: (*parser).callonTailProc8,
						expr: &litMatcher{
							pos:        position{line: 299, col: 5, offset: 8596},
							val:        "tail",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "WhereProc",
			pos:  position{line: 301, col: 1, offset: 8671},
			expr: &actionExpr{
				pos: position{line: 302, col: 5, offset: 8685},
				run: (*parser).callonWhereProc1,
				expr: &seqExpr{
					pos: position{line: 302, col: 5, offset: 8685},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 302, col: 5, offset: 8685},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 302, col: 13, offset: 8693},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 302, col: 15, offset: 8695},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 302, col: 20, offset: 8700},
								name: "SearchBoolean",
							},
						},
					},
				},
			},
		},
		{
			name: "UniqProc",
			pos:  position{line: 306, col: 1, offset: 8795},
			expr: &choiceExpr{
				pos: position{line: 307, col: 5, offset: 8808},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 307, col: 5, offset: 8808},
						run: (*parser).callonUniqProc2,
						expr: &seqExpr{
							pos: position{line: 307, col: 5, offset: 8808},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 307, col: 5, offset: 8808},
									val:        "uniq",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 307, col: 12, offset: 8815},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 307, col: 14, offset: 8817},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 310, col: 5, offset: 8906},
						run: (*parser).callonUniqProc7,
						expr: &litMatcher{
							pos:        position{line: 310, col: 5, offset: 8906},
							val:        "uniq",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PutProc",
			pos:  position{line: 314, col: 1, offset: 8995},
			expr: &actionExpr{
				pos: position{line: 315, col: 5, offset: 9007},
				run: (*parser).callonPutProc1,
				expr: &seqExpr{
					pos: position{line: 315, col: 5, offset: 9007},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 315, col: 5, offset: 9007},
							val:        "put",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 315, col: 11, offset: 9013},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 315, col: 13, offset: 9015},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 315, col: 18, offset: 9020},
								name: "Assignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameProc",
			pos:  position{line: 319, col: 1, offset: 9111},
			expr: &actionExpr{
				pos: position{line: 320, col: 5, offset: 9126},
				run: (*parser).callonRenameProc1,
				expr: &seqExpr{
					pos: position{line: 320, col: 5, offset: 9126},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 320, col: 5, offset: 9126},
							val:        "rename",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 320, col: 14, offset: 9135},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 320, col: 16, offset: 9137},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 320, col: 22, offset: 9143},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 320, col: 33, offset: 9154},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 320, col: 38, offset: 9159},
								expr: &actionExpr{
									pos: position{line: 320, col: 39, offset: 9160},
									run: (*parser).callonRenameProc9,
									expr: &seqExpr{
										pos: position{line: 320, col: 39, offset: 9160},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 320, col: 39, offset: 9160},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 320, col: 42, offset: 9163},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 320, col: 46, offset: 9167},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 320, col: 49, offset: 9170},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 320, col: 52, offset: 9173},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseProc",
			pos:  position{line: 328, col: 1, offset: 9582},
			expr: &actionExpr{
				pos: position{line: 329, col: 5, offset: 9595},
				run: (*parser).callonFuseProc1,
				expr: &seqExpr{
					pos: position{line: 329, col: 5, offset: 9595},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 329, col: 5, offset: 9595},
							val:        "fuse",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 329, col: 12, offset: 9602},
							expr: &seqExpr{
								pos: position{line: 329, col: 14, offset: 9604},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 329, col: 14, offset: 9604},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 329, col: 17, offset: 9607},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShapeProc",
			pos:  position{line: 333, col: 1, offset: 9678},
			expr: &actionExpr{
				pos: position{line: 334, col: 5, offset: 9692},
				run: (*parser).callonShapeProc1,
				expr: &litMatcher{
					pos:        position{line: 334, col: 5, offset: 9692},
					val:        "shape",
					ignoreCase: false,
				},
			},
		},
		{
			name: "JoinProc",
			pos:  position{line: 338, col: 1, offset: 9767},
			expr: &choiceExpr{
				pos: position{line: 339, col: 5, offset: 9780},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 339, col: 5, offset: 9780},
						run: (*parser).callonJoinProc2,
						expr: &seqExpr{
							pos: position{line: 339, col: 5, offset: 9780},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 339, col: 5, offset: 9780},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 339, col: 11, offset: 9786},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 339, col: 21, offset: 9796},
									val:        "join",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 339, col: 28, offset: 9803},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 339, col: 30, offset: 9805},
									name: "ON",
								},
								&ruleRefExpr{
									pos:  position{line: 339, col: 33, offset: 9808},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 339, col: 35, offset: 9810},
									label: "leftKey",
									expr: &ruleRefExpr{
										pos:  position{line: 339, col: 43, offset: 9818},
										name: "JoinKey",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 339, col: 51, offset: 9826},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 339, col: 54, offset: 9829},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 339, col: 58, offset: 9833},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 339, col: 61, offset: 9836},
									label: "rightKey",
									expr: &ruleRefExpr{
										pos:  position{line: 339, col: 70, offset: 9845},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 339, col: 78, offset: 9853},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 339, col: 86, offset: 9861},
										expr: &seqExpr{
											pos: position{line: 339, col: 87, offset: 9862},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 339, col: 87, offset: 9862},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 339, col: 89, offset: 9864},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 346, col: 5, offset: 10130},
						run: (*parser).callonJoinProc22,
						expr: &seqExpr{
							pos: position{line: 346, col: 5, offset: 10130},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 346, col: 5, offset: 10130},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 346, col: 11, offset: 10136},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 346, col: 22, offset: 10147},
									val:        "join",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 346, col: 29, offset: 10154},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 346, col: 31, offset: 10156},
									name: "ON",
								},
								&ruleRefExpr{
									pos:  position{line: 346, col: 34, offset: 10159},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 346, col: 36, offset: 10161},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 346, col: 40, offset: 10165},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 346, col: 48, offset: 10173},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 346, col: 56, offset: 10181},
										expr: &seqExpr{
											pos: position{line: 346, col: 57, offset: 10182},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 346, col: 57, offset: 10182},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 346, col: 59, offset: 10184},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinStyle",
			pos:  position{line: 354, col: 1, offset: 10438},
			expr: &choiceExpr{
				pos: position{line: 355, col: 5, offset: 10452},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 355, col: 5, offset: 10452},
						run: (*parser).callonJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 355, col: 5, offset: 10452},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 355, col: 5, offset: 10452},
									val:        "anti",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 355, col: 12, offset: 10459},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 356, col: 5, offset: 10489},
						run: (*parser).callonJoinStyle6,
						expr: &seqExpr{
							pos: position{line: 356, col: 5, offset: 10489},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 356, col: 5, offset: 10489},
									val:        "inner",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 356, col: 13, offset: 10497},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 357, col: 5, offset: 10527},
						run: (*parser).callonJoinStyle10,
						expr: &seqExpr{
							pos: position{line: 357, col: 5, offset: 10527},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 357, col: 5, offset: 10527},
									val:        "left",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 357, col: 13, offset: 10535},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 358, col: 5, offset: 10564},
						run: (*parser).callonJoinStyle14,
						expr: &seqExpr{
							pos: position{line: 358, col: 5, offset: 10564},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 358, col: 5, offset: 10564},
									val:        "right",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 358, col: 13, offset: 10572},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 359, col: 5, offset: 10602},
						run: (*parser).callonJoinStyle18,
						expr: &litMatcher{
							pos:        position{line: 359, col: 5, offset: 10602},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 361, col: 1, offset: 10638},
			expr: &choiceExpr{
				pos: position{line: 362, col: 5, offset: 10650},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 362, col: 5, offset: 10650},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 363, col: 5, offset: 10659},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 363, col: 5, offset: 10659},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 363, col: 5, offset: 10659},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 363, col: 9, offset: 10663},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 363, col: 14, offset: 10668},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 363, col: 19, offset: 10673},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SampleProc",
			pos:  position{line: 365, col: 1, offset: 10699},
			expr: &actionExpr{
				pos: position{line: 366, col: 5, offset: 10714},
				run: (*parser).callonSampleProc1,
				expr: &seqExpr{
					pos: position{line: 366, col: 5, offset: 10714},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 366, col: 5, offset: 10714},
							val:        "sample",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 366, col: 14, offset: 10723},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 366, col: 16, offset: 10725},
								name: "SampleExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "OpAssignment",
			pos:  position{line: 410, col: 1, offset: 12341},
			expr: &actionExpr{
				pos: position{line: 411, col: 5, offset: 12358},
				run: (*parser).callonOpAssignment1,
				expr: &labeledExpr{
					pos:   position{line: 411, col: 5, offset: 12358},
					label: "a",
					expr: &ruleRefExpr{
						pos:  position{line: 411, col: 7, offset: 12360},
						name: "Assignments",
					},
				},
			},
		},
		{
			name: "SampleExpr",
			pos:  position{line: 415, col: 1, offset: 12460},
			expr: &choiceExpr{
				pos: position{line: 416, col: 5, offset: 12475},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 416, col: 5, offset: 12475},
						run: (*parser).callonSampleExpr2,
						expr: &seqExpr{
							pos: position{line: 416, col: 5, offset: 12475},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 416, col: 5, offset: 12475},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 416, col: 7, offset: 12477},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 416, col: 12, offset: 12482},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 417, col: 5, offset: 12511},
						run: (*parser).callonSampleExpr7,
						expr: &litMatcher{
							pos:        position{line: 417, col: 5, offset: 12511},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromProc",
			pos:  position{line: 419, col: 1, offset: 12582},
			expr: &actionExpr{
				pos: position{line: 420, col: 5, offset: 12595},
				run: (*parser).callonFromProc1,
				expr: &labeledExpr{
					pos:   position{line: 420, col: 5, offset: 12595},
					label: "source",
					expr: &ruleRefExpr{
						pos:  position{line: 420, col: 12, offset: 12602},
						name: "FromAny",
					},
				},
			},
		},
		{
			name: "FromAny",
			pos:  position{line: 424, col: 1, offset: 12758},
			expr: &choiceExpr{
				pos: position{line: 425, col: 5, offset: 12770},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 425, col: 5, offset: 12770},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 426, col: 5, offset: 12779},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 427, col: 5, offset: 12787},
						name: "From",
					},
				},
			},
		},
		{
			name: "File",
			pos:  position{line: 429, col: 1, offset: 12793},
			expr: &actionExpr{
				pos: position{line: 430, col: 5, offset: 12802},
				run: (*parser).callonFile1,
				expr: &seqExpr{
					pos: position{line: 430, col: 5, offset: 12802},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 430, col: 5, offset: 12802},
							val:        "file",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 430, col: 12, offset: 12809},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 430, col: 14, offset: 12811},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 430, col: 19, offset: 12816},
								name: "Path",
							},
						},
						&labeledExpr{
							pos:   position{line: 430, col: 24, offset: 12821},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 430, col: 31, offset: 12828},
								expr: &ruleRefExpr{
									pos:  position{line: 430, col: 31, offset: 12828},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 430, col: 42, offset: 12839},
							label: "layout",
							expr: &zeroOrOneExpr{
								pos: position{line: 430, col: 49, offset: 12846},
								expr: &ruleRefExpr{
									pos:  position{line: 430, col: 49, offset: 12846},
									name: "LayoutArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "From",
			pos:  position{line: 434, col: 1, offset: 12975},
			expr: &actionExpr{
				pos: position{line: 435, col: 5, offset: 12984},
				run: (*parser).callonFrom1,
				expr: &seqExpr{
					pos: position{line: 435, col: 5, offset: 12984},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 435, col: 5, offset: 12984},
							val:        "from",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 435, col: 12, offset: 12991},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 435, col: 14, offset: 12993},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 435, col: 19, offset: 12998},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "Pool",
			pos:  position{line: 437, col: 1, offset: 13029},
			expr: &actionExpr{
				pos: position{line: 438, col: 5, offset: 13038},
				run: (*parser).callonPool1,
				expr: &seqExpr{
					pos: position{line: 438, col: 5, offset: 13038},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 438, col: 5, offset: 13038},
							val:        "pool",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 438, col: 12, offset: 13045},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 438, col: 14, offset: 13047},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 438, col: 19, offset: 13052},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolBody",
			pos:  position{line: 440, col: 1, offset: 13083},
			expr: &actionExpr{
				pos: position{line: 441, col: 5, offset: 13096},
				run: (*parser).callonPoolBody1,
				expr: &seqExpr{
					pos: position{line: 441, col: 5, offset: 13096},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 441, col: 5, offset: 13096},
							label: "spec",
							expr: &ruleRefExpr{
								pos:  position{line: 441, col: 10, offset: 13101},
								name: "PoolSpec",
							},
						},
						&labeledExpr{
							pos:   position{line: 441, col: 19, offset: 13110},
							label: "at",
							expr: &zeroOrOneExpr{
								pos: position{line: 441, col: 22, offset: 13113},
								expr: &ruleRefExpr{
									pos:  position{line: 441, col: 22, offset: 13113},
									name: "PoolAt",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 441, col: 30, offset: 13121},
							label: "over",
							expr: &zeroOrOneExpr{
								pos: position{line: 441, col: 35, offset: 13126},
								expr: &ruleRefExpr{
									pos:  position{line: 441, col: 35, offset: 13126},
									name: "PoolRange",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 441, col: 46, offset: 13137},
							label: "order",
							expr: &zeroOrOneExpr{
								pos: position{line: 441, col: 52, offset: 13143},
								expr: &ruleRefExpr{
									pos:  position{line: 441, col: 52, offset: 13143},
									name: "OrderArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Get",
			pos:  position{line: 445, col: 1, offset: 13279},
			expr: &actionExpr{
				pos: position{line: 446, col: 5, offset: 13287},
				run: (*parser).callonGet1,
				expr: &seqExpr{
					pos: position{line: 446, col: 5, offset: 13287},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 446, col: 5, offset: 13287},
							val:        "get",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 446, col: 11, offset: 13293},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 446, col: 13, offset: 13295},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 446, col: 17, offset: 13299},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 446, col: 21, offset: 13303},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 446, col: 28, offset: 13310},
								expr: &ruleRefExpr{
									pos:  position{line: 446, col: 28, offset: 13310},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 446, col: 39, offset: 13321},
							label: "layout",
							expr: &zeroOrOneExpr{
								pos: position{line: 446, col: 46, offset: 13328},
								expr: &ruleRefExpr{
									pos:  position{line: 446, col: 46, offset: 13328},
									name: "LayoutArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 450, col: 1, offset: 13454},
			expr: &actionExpr{
				pos: position{line: 450, col: 7, offset: 13460},
				run: (*parser).callonURL1,
				expr: &seqExpr{
					pos: position{line: 450, col: 7, offset: 13460},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 450, col: 8, offset: 13461},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 450, col: 8, offset: 13461},
									val:        "http:",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 450, col: 18, offset: 13471},
									val:        "https:",
									ignoreCase: false,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 450, col: 28, offset: 13481},
							name: "Path",
						},
					},
				},
			},
		},
		{
			name: "Path",
			pos:  position{line: 452, col: 1, offset: 13518},
			expr: &choiceExpr{
				pos: position{line: 453, col: 5, offset: 13527},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 453, col: 5, offset: 13527},
						run: (*parser).callonPath2,
						expr: &labeledExpr{
							pos:   position{line: 453, col: 5, offset: 13527},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 453, col: 7, offset: 13529},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 454, col: 5, offset: 13564},
						run: (*parser).callonPath5,
						expr: &oneOrMoreExpr{
							pos: position{line: 454, col: 5, offset: 13564},
							expr: &charClassMatcher{
								pos:        position{line: 454, col: 5, offset: 13564},
								val:        "[0-9a-zA-Z!@$%^&*()_=<>,./?:[\\]{}~|+-]",
								chars:      []rune{'!', '@', '$', '%', '^', '&', '*', '(', ')', '_', '=', '<', '>', ',', '.', '/', '?', ':', '[', ']', '{', '}', '~', '|', '+', '-'},
								ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PoolAt",
			pos:  position{line: 457, col: 1, offset: 13669},
			expr: &actionExpr{
				pos: position{line: 458, col: 5, offset: 13680},
				run: (*parser).callonPoolAt1,
				expr: &seqExpr{
					pos: position{line: 458, col: 5, offset: 13680},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 458, col: 5, offset: 13680},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 458, col: 7, offset: 13682},
							val:        "at",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 458, col: 12, offset: 13687},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 458, col: 14, offset: 13689},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 458, col: 17, offset: 13692},
								name: "KSUID",
							},
						},
					},
				},
			},
		},
		{
			name: "KSUID",
			pos:  position{line: 461, col: 1, offset: 13758},
			expr: &actionExpr{
				pos: position{line: 461, col: 9, offset: 13766},
				run: (*parser).callonKSUID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 461, col: 9, offset: 13766},
					expr: &charClassMatcher{
						pos:        position{line: 461, col: 10, offset: 13767},
						val:        "[0-9a-zA-Z]",
						ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "PoolRange",
			pos:  position{line: 463, col: 1, offset: 13813},
			expr: &actionExpr{
				pos: position{line: 464, col: 5, offset: 13827},
				run: (*parser).callonPoolRange1,
				expr: &seqExpr{
					pos: position{line: 464, col: 5, offset: 13827},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 464, col: 5, offset: 13827},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 464, col: 7, offset: 13829},
							val:        "range",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 464, col: 15, offset: 13837},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 464, col: 17, offset: 13839},
							label: "lower",
							expr: &ruleRefExpr{
								pos:  position{line: 464, col: 23, offset: 13845},
								name: "Literal",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 464, col: 31, offset: 13853},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 464, col: 33, offset: 13855},
							val:        "to",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 464, col: 38, offset: 13860},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 464, col: 40, offset: 13862},
							label: "upper",
							expr: &ruleRefExpr{
								pos:  position{line: 464, col: 46, offset: 13868},
								name: "Literal",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolSpec",
			pos:  position{line: 468, col: 1, offset: 13973},
			expr: &choiceExpr{
				pos: position{line: 469, col: 5, offset: 13986},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 469, col: 5, offset: 13986},
						run: (*parser).callonPoolSpec2,
						expr: &seqExpr{
							pos: position{line: 469, col: 5, offset: 13986},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 469, col: 5, offset: 13986},
									label: "pool",
									expr: &ruleRefExpr{
										pos:  position{line: 469, col: 10, offset: 13991},
										name: "PoolName",
									},
								},
								&labeledExpr{
									pos:   position{line: 469, col: 19, offset: 14000},
									label: "commit",
									expr: &zeroOrOneExpr{
										pos: position{line: 469, col: 26, offset: 14007},
										expr: &ruleRefExpr{
											pos:  position{line: 469, col: 26, offset: 14007},
											name: "PoolCommit",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 469, col: 38, offset: 14019},
									label: "meta",
									expr: &zeroOrOneExpr{
										pos: position{line: 469, col: 43, offset: 14024},
										expr: &ruleRefExpr{
											pos:  position{line: 469, col: 43, offset: 14024},
											name: "PoolMeta",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 472, col: 5, offset: 14133},
						run: (*parser).callonPoolSpec12,
						expr: &labeledExpr{
							pos:   position{line: 472, col: 5, offset: 14133},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 472, col: 10, offset: 14138},
								name: "PoolMeta",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolCommit",
			pos:  position{line: 476, col: 1, offset: 14239},
			expr: &actionExpr{
				pos: position{line: 477, col: 5, offset: 14254},
				run: (*parser).callonPoolCommit1,
				expr: &seqExpr{
					pos: position{line: 477, col: 5, offset: 14254},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 477, col: 5, offset: 14254},
							val:        "@",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 477, col: 9, offset: 14258},
							label: "commit",
							expr: &ruleRefExpr{
								pos:  position{line: 477, col: 16, offset: 14265},
								name: "PoolName",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolMeta",
			pos:  position{line: 479, col: 1, offset: 14298},
			expr: &actionExpr{
				pos: position{line: 480, col: 5, offset: 14311},
				run: (*parser).callonPoolMeta1,
				expr: &seqExpr{
					pos: position{line: 480, col: 5, offset: 14311},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 480, col: 5, offset: 14311},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 480, col: 9, offset: 14315},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 480, col: 14, offset: 14320},
								name: "PoolIdentifier",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolName",
			pos:  position{line: 482, col: 1, offset: 14357},
			expr: &choiceExpr{
				pos: position{line: 483, col: 5, offset: 14370},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 483, col: 5, offset: 14370},
						name: "PoolIdentifier",
					},
					&ruleRefExpr{
						pos:  position{line: 484, col: 5, offset: 14389},
						name: "KSUID",
					},
					&ruleRefExpr{
						pos:  position{line: 485, col: 5, offset: 14399},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "PoolIdentifier",
			pos:  position{line: 487, col: 1, offset: 14413},
			expr: &actionExpr{
				pos: position{line: 488, col: 5, offset: 14432},
				run: (*parser).callonPoolIdentifier1,
				expr: &seqExpr{
					pos: position{line: 488, col: 5, offset: 14432},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 488, col: 6, offset: 14433},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 488, col: 6, offset: 14433},
									name: "IdentifierStart",
								},
								&litMatcher{
									pos:        position{line: 488, col: 24, offset: 14451},
									val:        ".",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 488, col: 29, offset: 14456},
							expr: &choiceExpr{
								pos: position{line: 488, col: 30, offset: 14457},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 488, col: 30, offset: 14457},
										name: "IdentifierRest",
									},
									&litMatcher{
										pos:        position{line: 488, col: 47, offset: 14474},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LayoutArg",
			pos:  position{line: 490, col: 1, offset: 14513},
			expr: &actionExpr{
				pos: position{line: 491, col: 5, offset: 14527},
				run: (*parser).callonLayoutArg1,
				expr: &seqExpr{
					pos: position{line: 491, col: 5, offset: 14527},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 491, col: 5, offset: 14527},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 491, col: 7, offset: 14529},
							val:        "order",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 491, col: 15, offset: 14537},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 491, col: 17, offset: 14539},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 491, col: 22, offset: 14544},
								name: "FieldExprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 491, col: 33, offset: 14555},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 491, col: 39, offset: 14561},
								name: "OrderSuffix",
							},
						},
					},
				},
			},
		},
		{
			name: "FormatArg",
			pos:  position{line: 495, col: 1, offset: 14671},
			expr: &actionExpr{
				pos: position{line: 496, col: 5, offset: 14685},
				run: (*parser).callonFormatArg1,
				expr: &seqExpr{
					pos: position{line: 496, col: 5, offset: 14685},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 496, col: 5, offset: 14685},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 496, col: 7, offset: 14687},
							val:        "format",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 496, col: 16, offset: 14696},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 496, col: 18, offset: 14698},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 496, col: 22, offset: 14702},
								name: "IdentifierName",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderSuffix",
			pos:  position{line: 498, col: 1, offset: 14738},
			expr: &choiceExpr{
				pos: position{line: 499, col: 5, offset: 14754},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 499, col: 5, offset: 14754},
						run: (*parser).callonOrderSuffix2,
						expr: &litMatcher{
							pos:        position{line: 499, col: 5, offset: 14754},
							val:        ":asc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 500, col: 5, offset: 14788},
						run: (*parser).callonOrderSuffix4,
						expr: &litMatcher{
							pos:        position{line: 500, col: 5, offset: 14788},
							val:        ":desc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 501, col: 5, offset: 14824},
						run: (*parser).callonOrderSuffix6,
						expr: &litMatcher{
							pos:        position{line: 501, col: 5, offset: 14824},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OrderArg",
			pos:  position{line: 503, col: 1, offset: 14850},
			expr: &choiceExpr{
				pos: position{line: 504, col: 5, offset: 14863},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 504, col: 5, offset: 14863},
						run: (*parser).callonOrderArg2,
						expr: &seqExpr{
							pos: position{line: 504, col: 5, offset: 14863},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 504, col: 5, offset: 14863},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 504, col: 7, offset: 14865},
									val:        "order",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 504, col: 15, offset: 14873},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 504, col: 17, offset: 14875},
									val:        "asc",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 505, col: 5, offset: 14908},
						run: (*parser).callonOrderArg8,
						expr: &seqExpr{
							pos: position{line: 505, col: 5, offset: 14908},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 505, col: 5, offset: 14908},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 505, col: 7, offset: 14910},
									val:        "order",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 505, col: 15, offset: 14918},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 505, col: 17, offset: 14920},
									val:        "desc",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassProc",
			pos:  position{line: 507, col: 1, offset: 14952},
			expr: &actionExpr{
				pos: position{line: 508, col: 5, offset: 14965},
				run: (*parser).callonPassProc1,
				expr: &litMatcher{
					pos:        position{line: 508, col: 5, offset: 14965},
					val:        "pass",
					ignoreCase: false,
				},
			},
		},
		{
			name: "ExplodeProc",
			pos:  position{line: 514, col: 1, offset: 15159},
			expr: &actionExpr{
				pos: position{line: 515, col: 5, offset: 15175},
				run: (*parser).callonExplodeProc1,
				expr: &seqExpr{
					pos: position{line: 515, col: 5, offset: 15175},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 515, col: 5, offset: 15175},
							val:        "explode",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 515, col: 15, offset: 15185},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 515, col: 17, offset: 15187},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 515, col: 22, offset: 15192},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 515, col: 28, offset: 15198},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 515, col: 32, offset: 15202},
								name: "TypeArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 515, col: 40, offset: 15210},
							label: "as",
							expr: &zeroOrOneExpr{
								pos: position{line: 515, col: 43, offset: 15213},
								expr: &ruleRefExpr{
									pos:  position{line: 515, col: 43, offset: 15213},
									name: "AsArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MergeProc",
			pos:  position{line: 519, col: 1, offset: 15325},
			expr: &actionExpr{
				pos: position{line: 520, col: 5, offset: 15339},
				run: (*parser).callonMergeProc1,
				expr: &seqExpr{
					pos: position{line: 520, col: 5, offset: 15339},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 520, col: 5, offset: 15339},
							val:        "merge",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 520, col: 13, offset: 15347},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 520, col: 15, offset: 15349},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 520, col: 21, offset: 15355},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "OverProc",
			pos:  position{line: 524, col: 1, offset: 15438},
			expr: &choiceExpr{
				pos: position{line: 525, col: 5, offset: 15451},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 525, col: 5, offset: 15451},
						run: (*parser).callonOverProc2,
						expr: &labeledExpr{
							pos:   position{line: 525, col: 5, offset: 15451},
							label: "over",
							expr: &ruleRefExpr{
								pos:  position{line: 525, col: 10, offset: 15456},
								name: "ScopedOver",
							},
						},
					},
					&actionExpr{
						pos: position{line: 528, col: 5, offset: 15561},
						run: (*parser).callonOverProc5,
						expr: &seqExpr{
							pos: position{line: 528, col: 5, offset: 15561},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 528, col: 5, offset: 15561},
									val:        "over",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 528, col: 12, offset: 15568},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 528, col: 14, offset: 15570},
									label: "exprs",
									expr: &ruleRefExpr{
										pos:  position{line: 528, col: 20, offset: 15576},
										name: "Exprs",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ScopedOver",
			pos:  position{line: 532, col: 1, offset: 15684},
			expr: &actionExpr{
				pos: position{line: 533, col: 5, offset: 15699},
				run: (*parser).callonScopedOver1,
				expr: &seqExpr{
					pos: position{line: 533, col: 5, offset: 15699},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 533, col: 5, offset: 15699},
							val:        "over",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 533, col: 12, offset: 15706},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 533, col: 14, offset: 15708},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 533, col: 20, offset: 15714},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 533, col: 26, offset: 15720},
							label: "as",
							expr: &ruleRefExpr{
								pos:  position{line: 533, col: 29, offset: 15723},
								name: "As",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 533, col: 32, offset: 15726},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 533, col: 35, offset: 15729},
							label: "scope",
							expr: &ruleRefExpr{
								pos:  position{line: 533, col: 41, offset: 15735},
								name: "Scope",
							},
						},
					},
				},
			},
		},
		{
			name: "OverWith",
			pos:  position{line: 537, col: 1, offset: 15845},
			expr: &actionExpr{
				pos: position{line: 538, col: 5, offset: 15858},
				run: (*parser).callonOverWith1,
				expr: &seqExpr{
					pos: position{line: 538, col: 5, offset: 15858},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 538, col: 5, offset: 15858},
							val:        "over",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 538, col: 12, offset: 15865},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 538, col: 14, offset: 15867},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 538, col: 20, offset: 15873},
								name: "Exprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 538, col: 26, offset: 15879},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 538, col: 28, offset: 15881},
							val:        "with",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 538, col: 35, offset: 15888},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 538, col: 37, offset: 15890},
							label: "locals",
							expr: &ruleRefExpr{
								pos:  position{line: 538, col: 44, offset: 15897},
								name: "LetAssignments",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 538, col: 59, offset: 15912},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 538, col: 62, offset: 15915},
							label: "scope",
							expr: &ruleRefExpr{
								pos:  position{line: 538, col: 68, offset: 15921},
								name: "Scope",
							},
						},
					},
				},
			},
		},
		{
			name: "As",
			pos:  position{line: 542, col: 1, offset: 16093},
			expr: &choiceExpr{
				pos: position{line: 543, col: 5, offset: 16100},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 543, col: 5, offset: 16100},
						run: (*parser).callonAs2,
						expr: &seqExpr{
							pos: position{line: 543, col: 5, offset: 16100},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 543, col: 5, offset: 16100},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 543, col: 7, offset: 16102},
									val:        "as",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 543, col: 12, offset: 16107},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 543, col: 14, offset: 16109},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 543, col: 17, offset: 16112},
										name: "IdentifierName",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 544, col: 5, offset: 16150},
						run: (*parser).callonAs9,
						expr: &litMatcher{
							pos:        position{line: 544, col: 5, offset: 16150},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LetProc",
			pos:  position{line: 546, col: 1, offset: 16173},
			expr: &choiceExpr{
				pos: position{line: 547, col: 5, offset: 16185},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 547, col: 5, offset: 16185},
						run: (*parser).callonLetProc2,
						expr: &seqExpr{
							pos: position{line: 547, col: 5, offset: 16185},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 547, col: 5, offset: 16185},
									val:        "let",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 547, col: 11, offset: 16191},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 547, col: 13, offset: 16193},
									label: "locals",
									expr: &ruleRefExpr{
										pos:  position{line: 547, col: 20, offset: 16200},
										name: "LetAssignments",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 547, col: 35, offset: 16215},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 547, col: 38, offset: 16218},
									label: "over",
									expr: &ruleRefExpr{
										pos:  position{line: 547, col: 43, offset: 16223},
										name: "ScopedOver",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 550, col: 5, offset: 16331},
						name: "OverWith",
					},
				},
			},
		},
		{
			name: "Scope",
			pos:  position{line: 552, col: 1, offset: 16341},
			expr: &actionExpr{
				pos: position{line: 552, col: 9, offset: 16349},
				run: (*parser).callonScope1,
				expr: &seqExpr{
					pos: position{line: 552, col: 9, offset: 16349},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 552, col: 9, offset: 16349},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 552, col: 14, offset: 16354},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 552, col: 17, offset: 16357},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 552, col: 21, offset: 16361},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 552, col: 24, offset: 16364},
							label: "seq",
							expr: &ruleRefExpr{
								pos:  position{line: 552, col: 28, offset: 16368},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 552, col: 39, offset: 16379},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 552, col: 42, offset: 16382},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LetAssignments",
			pos:  position{line: 554, col: 1, offset: 16407},
			expr: &actionExpr{
				pos: position{line: 555, col: 5, offset: 16426},
				run: (*parser).callonLetAssignments1,
				expr: &seqExpr{
					pos: position{line: 555, col: 5, offset: 16426},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 555, col: 5, offset: 16426},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 555, col: 11, offset: 16432},
								name: "LetAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 555, col: 25, offset: 16446},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 555, col: 30, offset: 16451},
								expr: &actionExpr{
									pos: position{line: 555, col: 31, offset: 16452},
									run: (*parser).callonLetAssignments7,
									expr: &seqExpr{
										pos: position{line: 555, col: 31, offset: 16452},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 555, col: 31, offset: 16452},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 555, col: 34, offset: 16455},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 555, col: 38, offset: 16459},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 555, col: 41, offset: 16462},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 555, col: 43, offset: 16464},
													name: "LetAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LetAssignment",
			pos:  position{line: 559, col: 1, offset: 16582},
			expr: &choiceExpr{
				pos: position{line: 560, col: 5, offset: 16600},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 560, col: 5, offset: 16600},
						run: (*parser).callonLetAssignment2,
						expr: &seqExpr{
							pos: position{line: 560, col: 5, offset: 16600},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 560, col: 5, offset: 16600},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 560, col: 8, offset: 16603},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 560, col: 23, offset: 16618},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 560, col: 26, offset: 16621},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 560, col: 30, offset: 16625},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 560, col: 33, offset: 16628},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 560, col: 38, offset: 16633},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 563, col: 5, offset: 16715},
						run: (*parser).callonLetAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 563, col: 5, offset: 16715},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 563, col: 8, offset: 16718},
								name: "IdentifierName",
							},
						},
					},
				},
			},
		},
		{
			name: "YieldProc",
			pos:  position{line: 567, col: 1, offset: 16848},
			expr: &actionExpr{
				pos: position{line: 568, col: 5, offset: 16862},
				run: (*parser).callonYieldProc1,
				expr: &seqExpr{
					pos: position{line: 568, col: 5, offset: 16862},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 568, col: 5, offset: 16862},
							val:        "yield",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 568, col: 13, offset: 16870},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 568, col: 15, offset: 16872},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 568, col: 21, offset: 16878},
								name: "Exprs",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeArg",
			pos:  position{line: 572, col: 1, offset: 16962},
			expr: &actionExpr{
				pos: position{line: 573, col: 5, offset: 16974},
				run: (*parser).callonTypeArg1,
				expr: &seqExpr{
					pos: position{line: 573, col: 5, offset: 16974},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 573, col: 5, offset: 16974},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 573, col: 7, offset: 16976},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 573, col: 10, offset: 16979},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 573, col: 12, offset: 16981},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 573, col: 16, offset: 16985},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "AsArg",
			pos:  position{line: 575, col: 1, offset: 17010},
			expr: &actionExpr{
				pos: position{line: 576, col: 5, offset: 17020},
				run: (*parser).callonAsArg1,
				expr: &seqExpr{
					pos: position{line: 576, col: 5, offset: 17020},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 576, col: 5, offset: 17020},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 576, col: 7, offset: 17022},
							name: "AS",
						},
						&ruleRefExpr{
							pos:  position{line: 576, col: 10, offset: 17025},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 576, col: 12, offset: 17027},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 576, col: 16, offset: 17031},
								name: "Lval",
							},
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 580, col: 1, offset: 17082},
			expr: &ruleRefExpr{
				pos:  position{line: 580, col: 8, offset: 17089},
				name: "DerefExpr",
			},
		},
		{
			name: "Lvals",
			pos:  position{line: 582, col: 1, offset: 17100},
			expr: &actionExpr{
				pos: position{line: 583, col: 5, offset: 17110},
				run: (*parser).callonLvals1,
				expr: &seqExpr{
					pos: position{line: 583, col: 5, offset: 17110},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 583, col: 5, offset: 17110},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 583, col: 11, offset: 17116},
								name: "Lval",
							},
						},
						&labeledExpr{
							pos:   position{line: 583, col: 16, offset: 17121},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 583, col: 21, offset: 17126},
								expr: &actionExpr{
									pos: position{line: 583, col: 22, offset: 17127},
									run: (*parser).callonLvals7,
									expr: &seqExpr{
										pos: position{line: 583, col: 22, offset: 17127},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 583, col: 22, offset: 17127},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 583, col: 25, offset: 17130},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 583, col: 29, offset: 17134},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 583, col: 32, offset: 17137},
												label: "lval",
												expr: &ruleRefExpr{
													pos:  position{line: 583, col: 37, offset: 17142},
													name: "Lval",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 587, col: 1, offset: 17254},
			expr: &ruleRefExpr{
				pos:  position{line: 587, col: 13, offset: 17266},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 589, col: 1, offset: 17272},
			expr: &actionExpr{
				pos: position{line: 590, col: 5, offset: 17287},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 590, col: 5, offset: 17287},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 590, col: 5, offset: 17287},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 590, col: 11, offset: 17293},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 590, col: 21, offset: 17303},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 590, col: 26, offset: 17308},
								expr: &seqExpr{
									pos: position{line: 590, col: 27, offset: 17309},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 590, col: 27, offset: 17309},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 590, col: 30, offset: 17312},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 590, col: 34, offset: 17316},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 590, col: 37, offset: 17319},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignments",
			pos:  position{line: 600, col: 1, offset: 17518},
			expr: &actionExpr{
				pos: position{line: 601, col: 5, offset: 17534},
				run: (*parser).callonAssignments1,
				expr: &seqExpr{
					pos: position{line: 601, col: 5, offset: 17534},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 601, col: 5, offset: 17534},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 601, col: 11, offset: 17540},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 601, col: 22, offset: 17551},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 601, col: 27, offset: 17556},
								expr: &actionExpr{
									pos: position{line: 601, col: 28, offset: 17557},
									run: (*parser).callonAssignments7,
									expr: &seqExpr{
										pos: position{line: 601, col: 28, offset: 17557},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 601, col: 28, offset: 17557},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 601, col: 31, offset: 17560},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 601, col: 35, offset: 17564},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 601, col: 38, offset: 17567},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 601, col: 40, offset: 17569},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 605, col: 1, offset: 17680},
			expr: &actionExpr{
				pos: position{line: 606, col: 5, offset: 17695},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 606, col: 5, offset: 17695},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 606, col: 5, offset: 17695},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 606, col: 9, offset: 17699},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 606, col: 14, offset: 17704},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 606, col: 17, offset: 17707},
							val:        ":=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 606, col: 22, offset: 17712},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 606, col: 25, offset: 17715},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 606, col: 29, offset: 17719},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 608, col: 1, offset: 17810},
			expr: &ruleRefExpr{
				pos:  position{line: 608, col: 8, offset: 17817},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 610, col: 1, offset: 17834},
			expr: &choiceExpr{
				pos: position{line: 611, col: 5, offset: 17854},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 611, col: 5, offset: 17854},
						run: (*parser).callonConditionalExpr2,
						expr: &seqExpr{
							pos: position{line: 611, col: 5, offset: 17854},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 611, col: 5, offset: 17854},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 611, col: 15, offset: 17864},
										name: "LogicalOrExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 611, col: 29, offset: 17878},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 611, col: 32, offset: 17881},
									val:        "?",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 611, col: 36, offset: 17885},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 611, col: 39, offset: 17888},
									label: "thenClause",
									expr: &ruleRefExpr{
										pos:  position{line: 611, col: 50, offset: 17899},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 611, col: 55, offset: 17904},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 611, col: 58, offset: 17907},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 611, col: 62, offset: 17911},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 611, col: 65, offset: 17914},
									label: "elseClause",
									expr: &ruleRefExpr{
										pos:  position{line: 611, col: 76, offset: 17925},
										name: "Expr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 614, col: 5, offset: 18065},
						name: "LogicalOrExpr",
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 616, col: 1, offset: 18080},
			expr: &actionExpr{
				pos: position{line: 617, col: 5, offset: 18098},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 617, col: 5, offset: 18098},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 617, col: 5, offset: 18098},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 617, col: 11, offset: 18104},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 618, col: 5, offset: 18123},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 618, col: 10, offset: 18128},
								expr: &actionExpr{
									pos: position{line: 618, col: 11, offset: 18129},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 618, col: 11, offset: 18129},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 618, col: 11, offset: 18129},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 618, col: 14, offset: 18132},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 618, col: 17, offset: 18135},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 618, col: 25, offset: 18143},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 618, col: 28, offset: 18146},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 618, col: 33, offset: 18151},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 622, col: 1, offset: 18269},
			expr: &actionExpr{
				pos: position{line: 623, col: 5, offset: 18288},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 623, col: 5, offset: 18288},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 623, col: 5, offset: 18288},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 623, col: 11, offset: 18294},
								name: "EqualityCompareExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 624, col: 5, offset: 18318},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 624, col: 10, offset: 18323},
								expr: &actionExpr{
									pos: position{line: 624, col: 11, offset: 18324},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 624, col: 11, offset: 18324},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 624, col: 11, offset: 18324},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 624, col: 14, offset: 18327},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 624, col: 17, offset: 18330},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 624, col: 26, offset: 18339},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 624, col: 29, offset: 18342},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 624, col: 34, offset: 18347},
													name: "EqualityCompareExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityCompareExpr",
			pos:  position{line: 628, col: 1, offset: 18470},
			expr: &choiceExpr{
				pos: position{line: 629, col: 5, offset: 18494},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 629, col: 5, offset: 18494},
						name: "PatternMatch",
					},
					&actionExpr{
						pos: position{line: 630, col: 5, offset: 18511},
						run: (*parser).callonEqualityCompareExpr3,
						expr: &seqExpr{
							pos: position{line: 630, col: 5, offset: 18511},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 630, col: 5, offset: 18511},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 630, col: 11, offset: 18517},
										name: "RelativeExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 631, col: 5, offset: 18534},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 631, col: 10, offset: 18539},
										expr: &actionExpr{
											pos: position{line: 631, col: 11, offset: 18540},
											run: (*parser).callonEqualityCompareExpr9,
											expr: &seqExpr{
												pos: position{line: 631, col: 11, offset: 18540},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 631, col: 11, offset: 18540},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 631, col: 14, offset: 18543},
														label: "comp",
														expr: &ruleRefExpr{
															pos:  position{line: 631, col: 19, offset: 18548},
															name: "EqualityComparator",
														},
													},
													&ruleRefExpr{
														pos:  position{line: 631, col: 38, offset: 18567},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 631, col: 41, offset: 18570},
														label: "expr",
														expr: &ruleRefExpr{
															pos:  position{line: 631, col: 46, offset: 18575},
															name: "RelativeExpr",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityOperator",
			pos:  position{line: 635, col: 1, offset: 18693},
			expr: &choiceExpr{
				pos: position{line: 636, col: 5, offset: 18714},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 636, col: 5, offset: 18714},
						run: (*parser).callonEqualityOperator2,
						expr: &litMatcher{
							pos:        position{line: 636, col: 5, offset: 18714},
							val:        "==",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 637, col: 5, offset: 18743},
						run: (*parser).callonEqualityOperator4,
						expr: &litMatcher{
							pos:        position{line: 637, col: 5, offset: 18743},
							val:        "!=",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "EqualityComparator",
			pos:  position{line: 639, col: 1, offset: 18780},
			expr: &choiceExpr{
				pos: position{line: 640, col: 5, offset: 18803},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 640, col: 5, offset: 18803},
						name: "EqualityOperator",
					},
					&actionExpr{
						pos: position{line: 641, col: 5, offset: 18824},
						run: (*parser).callonEqualityComparator3,
						expr: &seqExpr{
							pos: position{line: 641, col: 5, offset: 18824},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 641, col: 5, offset: 18824},
									val:        "in",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 641, col: 10, offset: 18829},
									expr: &ruleRefExpr{
										pos:  position{line: 641, col: 11, offset: 18830},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeExpr",
			pos:  position{line: 643, col: 1, offset: 18877},
			expr: &actionExpr{
				pos: position{line: 644, col: 5, offset: 18894},
				run: (*parser).callonRelativeExpr1,
				expr: &seqExpr{
					pos: position{line: 644, col: 5, offset: 18894},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 644, col: 5, offset: 18894},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 644, col: 11, offset: 18900},
								name: "AdditiveExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 645, col: 5, offset: 18917},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 645, col: 10, offset: 18922},
								expr: &actionExpr{
									pos: position{line: 645, col: 11, offset: 18923},
									run: (*parser).callonRelativeExpr7,
									expr: &seqExpr{
										pos: position{line: 645, col: 11, offset: 18923},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 645, col: 11, offset: 18923},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 645, col: 14, offset: 18926},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 645, col: 17, offset: 18929},
													name: "RelativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 645, col: 34, offset: 18946},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 645, col: 37, offset: 18949},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 645, col: 42, offset: 18954},
													name: "AdditiveExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeOperator",
			pos:  position{line: 649, col: 1, offset: 19070},
			expr: &actionExpr{
				pos: position{line: 649, col: 20, offset: 19089},
				run: (*parser).callonRelativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 649, col: 21, offset: 19090},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 649, col: 21, offset: 19090},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 649, col: 28, offset: 19097},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 649, col: 34, offset: 19103},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 649, col: 41, offset: 19110},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 651, col: 1, offset: 19147},
			expr: &actionExpr{
				pos: position{line: 652, col: 5, offset: 19164},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 652, col: 5, offset: 19164},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 652, col: 5, offset: 19164},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 652, col: 11, offset: 19170},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 653, col: 5, offset: 19193},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 653, col: 10, offset: 19198},
								expr: &actionExpr{
									pos: position{line: 653, col: 11, offset: 19199},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 653, col: 11, offset: 19199},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 653, col: 11, offset: 19199},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 653, col: 14, offset: 19202},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 653, col: 17, offset: 19205},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 653, col: 34, offset: 19222},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 653, col: 37, offset: 19225},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 653, col: 42, offset: 19230},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 657, col: 1, offset: 19352},
			expr: &actionExpr{
				pos: position{line: 657, col: 20, offset: 19371},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 657, col: 21, offset: 19372},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 657, col: 21, offset: 19372},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 657, col: 27, offset: 19378},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 659, col: 1, offset: 19415},
			expr: &actionExpr{
				pos: position{line: 660, col: 5, offset: 19438},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 660, col: 5, offset: 19438},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 660, col: 5, offset: 19438},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 660, col: 11, offset: 19444},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 661, col: 5, offset: 19456},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 661, col: 10, offset: 19461},
								expr: &actionExpr{
									pos: position{line: 661, col: 11, offset: 19462},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 661, col: 11, offset: 19462},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 661, col: 11, offset: 19462},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 661, col: 14, offset: 19465},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 661, col: 17, offset: 19468},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 661, col: 40, offset: 19491},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 661, col: 43, offset: 19494},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 661, col: 48, offset: 19499},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 665, col: 1, offset: 19610},
			expr: &actionExpr{
				pos: position{line: 665, col: 26, offset: 19635},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 665, col: 27, offset: 19636},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 665, col: 27, offset: 19636},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 665, col: 33, offset: 19642},
							val:        "/",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 665, col: 39, offset: 19648},
							val:        "%",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 667, col: 1, offset: 19685},
			expr: &choiceExpr{
				pos: position{line: 668, col: 5, offset: 19697},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 668, col: 5, offset: 19697},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 668, col: 5, offset: 19697},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 668, col: 5, offset: 19697},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 668, col: 9, offset: 19701},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 668, col: 12, offset: 19704},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 668, col: 14, offset: 19706},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 671, col: 5, offset: 19815},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 673, col: 1, offset: 19825},
			expr: &choiceExpr{
				pos: position{line: 674, col: 5, offset: 19838},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 674, col: 5, offset: 19838},
						name: "MatchExpr",
					},
					&actionExpr{
						pos: position{line: 675, col: 5, offset: 19852},
						run: (*parser).callonFuncExpr3,
						expr: &seqExpr{
							pos: position{line: 675, col: 5, offset: 19852},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 675, col: 5, offset: 19852},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 675, col: 11, offset: 19858},
										name: "Cast",
									},
								},
								&labeledExpr{
									pos:   position{line: 675, col: 16, offset: 19863},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 675, col: 21, offset: 19868},
										expr: &ruleRefExpr{
											pos:  position{line: 675, col: 22, offset: 19869},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 678, col: 5, offset: 19940},
						run: (*parser).callonFuncExpr10,
						expr: &seqExpr{
							pos: position{line: 678, col: 5, offset: 19940},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 678, col: 5, offset: 19940},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 678, col: 11, offset: 19946},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 678, col: 20, offset: 19955},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 678, col: 25, offset: 19960},
										expr: &ruleRefExpr{
											pos:  position{line: 678, col: 26, offset: 19961},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 681, col: 5, offset: 20032},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 682, col: 5, offset: 20046},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FuncGuard",
			pos:  position{line: 684, col: 1, offset: 20055},
			expr: &seqExpr{
				pos: position{line: 684, col: 13, offset: 20067},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 684, col: 13, offset: 20067},
						name: "NotFuncs",
					},
					&ruleRefExpr{
						pos:  position{line: 684, col: 22, offset: 20076},
						name: "__",
					},
					&litMatcher{
						pos:        position{line: 684, col: 25, offset: 20079},
						val:        "(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "NotFuncs",
			pos:  position{line: 686, col: 1, offset: 20084},
			expr: &choiceExpr{
				pos: position{line: 687, col: 5, offset: 20097},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 687, col: 5, offset: 20097},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 688, col: 5, offset: 20107},
						val:        "search",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 689, col: 5, offset: 20120},
						val:        "select",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 690, col: 5, offset: 20133},
						val:        "type",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "MatchExpr",
			pos:  position{line: 692, col: 1, offset: 20141},
			expr: &actionExpr{
				pos: position{line: 693, col: 5, offset: 20155},
				run: (*parser).callonMatchExpr1,
				expr: &seqExpr{
					pos: position{line: 693, col: 5, offset: 20155},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 693, col: 5, offset: 20155},
							val:        "search",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 693, col: 14, offset: 20164},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 693, col: 17, offset: 20167},
							val:        "(",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 693, col: 21, offset: 20171},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 693, col: 26, offset: 20176},
								name: "SearchBoolean",
							},
						},
						&litMatcher{
							pos:        position{line: 693, col: 40, offset: 20190},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Cast",
			pos:  position{line: 695, col: 1, offset: 20216},
			expr: &actionExpr{
				pos: position{line: 696, col: 5, offset: 20225},
				run: (*parser).callonCast1,
				expr: &seqExpr{
					pos: position{line: 696, col: 5, offset: 20225},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 696, col: 5, offset: 20225},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 696, col: 9, offset: 20229},
								name: "CastType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 696, col: 18, offset: 20238},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 696, col: 21, offset: 20241},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 696, col: 25, offset: 20245},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 696, col: 28, offset: 20248},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 696, col: 33, offset: 20253},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 696, col: 38, offset: 20258},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 696, col: 41, offset: 20261},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 700, col: 1, offset: 20358},
			expr: &actionExpr{
				pos: position{line: 701, col: 5, offset: 20371},
				run: (*parser).callonFunction1,
				expr: &seqExpr{
					pos: position{line: 701, col: 5, offset: 20371},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 701, col: 5, offset: 20371},
							expr: &ruleRefExpr{
								pos:  position{line: 701, col: 6, offset: 20372},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 701, col: 16, offset: 20382},
							label: "fn",
							expr: &ruleRefExpr{
								pos:  position{line: 701, col: 19, offset: 20385},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 701, col: 34, offset: 20400},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 701, col: 37, offset: 20403},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 701, col: 41, offset: 20407},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 701, col: 44, offset: 20410},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 701, col: 49, offset: 20415},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 701, col: 63, offset: 20429},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 701, col: 66, offset: 20432},
							val:        ")",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 701, col: 70, offset: 20436},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 701, col: 76, offset: 20442},
								expr: &ruleRefExpr{
									pos:  position{line: 701, col: 76, offset: 20442},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OptionalExprs",
			pos:  position{line: 705, col: 1, offset: 20563},
			expr: &choiceExpr{
				pos: position{line: 706, col: 5, offset: 20581},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 706, col: 5, offset: 20581},
						name: "Exprs",
					},
					&actionExpr{
						pos: position{line: 707, col: 5, offset: 20591},
						run: (*parser).callonOptionalExprs3,
						expr: &ruleRefExpr{
							pos:  position{line: 707, col: 5, offset: 20591},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 709, col: 1, offset: 20627},
			expr: &actionExpr{
				pos: position{line: 710, col: 5, offset: 20637},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 710, col: 5, offset: 20637},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 710, col: 5, offset: 20637},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 710, col: 11, offset: 20643},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 710, col: 16, offset: 20648},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 710, col: 21, offset: 20653},
								expr: &actionExpr{
									pos: position{line: 710, col: 22, offset: 20654},
									run: (*parser).callonExprs7,
									expr: &seqExpr{
										pos: position{line: 710, col: 22, offset: 20654},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 710, col: 22, offset: 20654},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 710, col: 25, offset: 20657},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 710, col: 29, offset: 20661},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 710, col: 32, offset: 20664},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 710, col: 34, offset: 20666},
													name: "Expr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 714, col: 1, offset: 20775},
			expr: &actionExpr{
				pos: position{line: 715, col: 5, offset: 20789},
				run: (*parser).callonDerefExpr1,
				expr: &seqExpr{
					pos: position{line: 715, col: 5, offset: 20789},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 715, col: 5, offset: 20789},
							expr: &ruleRefExpr{
								pos:  position{line: 715, col: 6, offset: 20790},
								name: "IP6",
							},
						},
						&labeledExpr{
							pos:   position{line: 715, col: 10, offset: 20794},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 715, col: 16, offset: 20800},
								name: "Identifier",
							},
						},
						&labeledExpr{
							pos:   position{line: 715, col: 27, offset: 20811},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 715, col: 32, offset: 20816},
								expr: &ruleRefExpr{
									pos:  position{line: 715, col: 33, offset: 20817},
									name: "Deref",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 719, col: 1, offset: 20885},
			expr: &choiceExpr{
				pos: position{line: 720, col: 5, offset: 20895},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 720, col: 5, offset: 20895},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 720, col: 5, offset: 20895},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 720, col: 5, offset: 20895},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 720, col: 9, offset: 20899},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 720, col: 14, offset: 20904},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 720, col: 27, offset: 20917},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 720, col: 30, offset: 20920},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 720, col: 34, offset: 20924},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 720, col: 37, offset: 20927},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 720, col: 40, offset: 20930},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 720, col: 53, offset: 20943},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 726, col: 5, offset: 21114},
						run: (*parser).callonDeref13,
						expr: &seqExpr{
							pos: position{line: 726, col: 5, offset: 21114},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 726, col: 5, offset: 21114},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 726, col: 9, offset: 21118},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 726, col: 12, offset: 21121},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 726, col: 16, offset: 21125},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 726, col: 19, offset: 21128},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 726, col: 22, offset: 21131},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 726, col: 35, offset: 21144},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 732, col: 5, offset: 21315},
						run: (*parser).callonDeref22,
						expr: &seqExpr{
							pos: position{line: 732, col: 5, offset: 21315},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 732, col: 5, offset: 21315},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 732, col: 9, offset: 21319},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 732, col: 14, offset: 21324},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 732, col: 27, offset: 21337},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 732, col: 30, offset: 21340},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 732, col: 34, offset: 21344},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 732, col: 37, offset: 21347},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 738, col: 5, offset: 21520},
						run: (*parser).callonDeref31,
						expr: &seqExpr{
							pos: position{line: 738, col: 5, offset: 21520},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 738, col: 5, offset: 21520},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 738, col: 9, offset: 21524},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 738, col: 14, offset: 21529},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 738, col: 19, offset: 21534},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 739, col: 5, offset: 21583},
						run: (*parser).callonDeref37,
						expr: &seqExpr{
							pos: position{line: 739, col: 5, offset: 21583},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 739, col: 5, offset: 21583},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 739, col: 9, offset: 21587},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 739, col: 12, offset: 21590},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 741, col: 1, offset: 21641},
			expr: &choiceExpr{
				pos: position{line: 742, col: 5, offset: 21653},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 742, col: 5, offset: 21653},
						name: "Record",
					},
					&ruleRefExpr{
						pos:  position{line: 743, col: 5, offset: 21664},
						name: "Array",
					},
					&ruleRefExpr{
						pos:  position{line: 744, col: 5, offset: 21674},
						name: "Set",
					},
					&ruleRefExpr{
						pos:  position{line: 745, col: 5, offset: 21682},
						name: "Map",
					},
					&ruleRefExpr{
						pos:  position{line: 746, col: 5, offset: 21690},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 747, col: 5, offset: 21702},
						run: (*parser).callonPrimary7,
						expr: &seqExpr{
							pos: position{line: 747, col: 5, offset: 21702},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 747, col: 5, offset: 21702},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 747, col: 9, offset: 21706},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 747, col: 12, offset: 21709},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 747, col: 17, offset: 21714},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 747, col: 22, offset: 21719},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 747, col: 25, offset: 21722},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Record",
			pos:  position{line: 749, col: 1, offset: 21748},
			expr: &actionExpr{
				pos: position{line: 750, col: 5, offset: 21759},
				run: (*parser).callonRecord1,
				expr: &seqExpr{
					pos: position{line: 750, col: 5, offset: 21759},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 750, col: 5, offset: 21759},
							val:        "{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 750, col: 9, offset: 21763},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 750, col: 12, offset: 21766},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 750, col: 18, offset: 21772},
								name: "RecordElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 750, col: 30, offset: 21784},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 750, col: 33, offset: 21787},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RecordElems",
			pos:  position{line: 754, col: 1, offset: 21877},
			expr: &choiceExpr{
				pos: position{line: 755, col: 5, offset: 21893},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 755, col: 5, offset: 21893},
						run: (*parser).callonRecordElems2,
						expr: &seqExpr{
							pos: position{line: 755, col: 5, offset: 21893},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 755, col: 5, offset: 21893},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 755, col: 11, offset: 21899},
										name: "RecordElem",
									},
								},
								&labeledExpr{
									pos:   position{line: 755, col: 22, offset: 21910},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 755, col: 27, offset: 21915},
										expr: &ruleRefExpr{
											pos:  position{line: 755, col: 27, offset: 21915},
											name: "RecordElemTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 758, col: 5, offset: 22014},
						run: (*parser).callonRecordElems9,
						expr: &ruleRefExpr{
							pos:  position{line: 758, col: 5, offset: 22014},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "RecordElemTail",
			pos:  position{line: 760, col: 1, offset: 22050},
			expr: &actionExpr{
				pos: position{line: 760, col: 18, offset: 22067},
				run: (*parser).callonRecordElemTail1,
				expr: &seqExpr{
					pos: position{line: 760, col: 18, offset: 22067},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 760, col: 18, offset: 22067},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 760, col: 21, offset: 22070},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 760, col: 25, offset: 22074},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 760, col: 28, offset: 22077},
							label: "elem",
							expr: &ruleRefExpr{
								pos:  position{line: 760, col: 33, offset: 22082},
								name: "RecordElem",
							},
						},
					},
				},
			},
		},
		{
			name: "RecordElem",
			pos:  position{line: 762, col: 1, offset: 22115},
			expr: &choiceExpr{
				pos: position{line: 763, col: 5, offset: 22130},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 763, col: 5, offset: 22130},
						name: "Spread",
					},
					&ruleRefExpr{
						pos:  position{line: 764, col: 5, offset: 22141},
						name: "Field",
					},
					&ruleRefExpr{
						pos:  position{line: 765, col: 5, offset: 22151},
						name: "Identifier",
					},
				},
			},
		},
		{
			name: "Spread",
			pos:  position{line: 767, col: 1, offset: 22163},
			expr: &actionExpr{
				pos: position{line: 768, col: 5, offset: 22174},
				run: (*parser).callonSpread1,
				expr: &seqExpr{
					pos: position{line: 768, col: 5, offset: 22174},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 768, col: 5, offset: 22174},
							val:        "...",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 768, col: 11, offset: 22180},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 768, col: 14, offset: 22183},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 768, col: 19, offset: 22188},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 772, col: 1, offset: 22274},
			expr: &actionExpr{
				pos: position{line: 773, col: 5, offset: 22284},
				run: (*parser).callonField1,
				expr: &seqExpr{
					pos: position{line: 773, col: 5, offset: 22284},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 773, col: 5, offset: 22284},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 773, col: 10, offset: 22289},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 773, col: 20, offset: 22299},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 773, col: 23, offset: 22302},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 773, col: 27, offset: 22306},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 773, col: 30, offset: 22309},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 773, col: 36, offset: 22315},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Array",
			pos:  position{line: 777, col: 1, offset: 22415},
			expr: &actionExpr{
				pos: position{line: 778, col: 5, offset: 22425},
				run: (*parser).callonArray1,
				expr: &seqExpr{
					pos: position{line: 778, col: 5, offset: 22425},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 778, col: 5, offset: 22425},
							val:        "[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 778, col: 9, offset: 22429},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 778, col: 12, offset: 22432},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 778, col: 18, offset: 22438},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 778, col: 32, offset: 22452},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 778, col: 35, offset: 22455},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Set",
			pos:  position{line: 782, col: 1, offset: 22545},
			expr: &actionExpr{
				pos: position{line: 783, col: 5, offset: 22553},
				run: (*parser).callonSet1,
				expr: &seqExpr{
					pos: position{line: 783, col: 5, offset: 22553},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 783, col: 5, offset: 22553},
							val:        "|[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 783, col: 10, offset: 22558},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 783, col: 13, offset: 22561},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 783, col: 19, offset: 22567},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 783, col: 33, offset: 22581},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 783, col: 36, offset: 22584},
							val:        "]|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Map",
			pos:  position{line: 787, col: 1, offset: 22673},
			expr: &actionExpr{
				pos: position{line: 788, col: 5, offset: 22681},
				run: (*parser).callonMap1,
				expr: &seqExpr{
					pos: position{line: 788, col: 5, offset: 22681},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 788, col: 5, offset: 22681},
							val:        "|{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 788, col: 10, offset: 22686},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 788, col: 13, offset: 22689},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 788, col: 19, offset: 22695},
								name: "Entries",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 788, col: 27, offset: 22703},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 788, col: 30, offset: 22706},
							val:        "}|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Entries",
			pos:  position{line: 792, col: 1, offset: 22797},
			expr: &choiceExpr{
				pos: position{line: 793, col: 5, offset: 22809},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 793, col: 5, offset: 22809},
						run: (*parser).callonEntries2,
						expr: &seqExpr{
							pos: position{line: 793, col: 5, offset: 22809},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 793, col: 5, offset: 22809},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 793, col: 11, offset: 22815},
										name: "Entry",
									},
								},
								&labeledExpr{
									pos:   position{line: 793, col: 17, offset: 22821},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 793, col: 22, offset: 22826},
										expr: &ruleRefExpr{
											pos:  position{line: 793, col: 22, offset: 22826},
											name: "EntryTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 796, col: 5, offset: 22920},
						run: (*parser).callonEntries9,
						expr: &ruleRefExpr{
							pos:  position{line: 796, col: 5, offset: 22920},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "EntryTail",
			pos:  position{line: 799, col: 1, offset: 22957},
			expr: &actionExpr{
				pos: position{line: 799, col: 13, offset: 22969},
				run: (*parser).callonEntryTail1,
				expr: &seqExpr{
					pos: position{line: 799, col: 13, offset: 22969},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 799, col: 13, offset: 22969},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 799, col: 16, offset: 22972},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 799, col: 20, offset: 22976},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 799, col: 23, offset: 22979},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 799, col: 25, offset: 22981},
								name: "Entry",
							},
						},
					},
				},
			},
		},
		{
			name: "Entry",
			pos:  position{line: 801, col: 1, offset: 23006},
			expr: &actionExpr{
				pos: position{line: 802, col: 5, offset: 23016},
				run: (*parser).callonEntry1,
				expr: &seqExpr{
					pos: position{line: 802, col: 5, offset: 23016},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 802, col: 5, offset: 23016},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 802, col: 9, offset: 23020},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 802, col: 14, offset: 23025},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 802, col: 17, offset: 23028},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 802, col: 21, offset: 23032},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 802, col: 24, offset: 23035},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 802, col: 30, offset: 23041},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLProc",
			pos:  position{line: 808, col: 1, offset: 23148},
			expr: &actionExpr{
				pos: position{line: 809, col: 5, offset: 23160},
				run: (*parser).callonSQLProc1,
				expr: &seqExpr{
					pos: position{line: 809, col: 5, offset: 23160},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 809, col: 5, offset: 23160},
							label: "selection",
							expr: &ruleRefExpr{
								pos:  position{line: 809, col: 15, offset: 23170},
								name: "SQLSelect",
							},
						},
						&labeledExpr{
							pos:   position{line: 810, col: 5, offset: 23184},
							label: "from",
							expr: &zeroOrOneExpr{
								pos: position{line: 810, col: 10, offset: 23189},
								expr: &ruleRefExpr{
									pos:  position{line: 810, col: 10, offset: 23189},
									name: "SQLFrom",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 811, col: 5, offset: 23202},
							label: "joins",
							expr: &zeroOrOneExpr{
								pos: position{line: 811, col: 11, offset: 23208},
								expr: &ruleRefExpr{
									pos:  position{line: 811, col: 11, offset: 23208},
									name: "SQLJoins",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 812, col: 5, offset: 23222},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 812, col: 11, offset: 23228},
								expr: &ruleRefExpr{
									pos:  position{line: 812, col: 11, offset: 23228},
									name: "SQLWhere",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 813, col: 5, offset: 23242},
							label: "groupby",
							expr: &zeroOrOneExpr{
								pos: position{line: 813, col: 13, offset: 23250},
								expr: &ruleRefExpr{
									pos:  position{line: 813, col: 13, offset: 23250},
									name: "SQLGroupBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 814, col: 5, offset: 23266},
							label: "having",
							expr: &zeroOrOneExpr{
								pos: position{line: 814, col: 12, offset: 23273},
								expr: &ruleRefExpr{
									pos:  position{line: 814, col: 12, offset: 23273},
									name: "SQLHaving",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 815, col: 5, offset: 23288},
							label: "orderby",
							expr: &zeroOrOneExpr{
								pos: position{line: 815, col: 13, offset: 23296},
								expr: &ruleRefExpr{
									pos:  position{line: 815, col: 13, offset: 23296},
									name: "SQLOrderBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 816, col: 5, offset: 23312},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 816, col: 11, offset: 23318},
								name: "SQLLimit",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLSelect",
			pos:  position{line: 840, col: 1, offset: 23685},
			expr: &choiceExpr{
				pos: position{line: 841, col: 5, offset: 23699},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 841, col: 5, offset: 23699},
						run: (*parser).callonSQLSelect2,
						expr: &seqExpr{
							pos: position{line: 841, col: 5, offset: 23699},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 841, col: 5, offset: 23699},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 841, col: 12, offset: 23706},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 841, col: 14, offset: 23708},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 842, col: 5, offset: 23736},
						run: (*parser).callonSQLSelect7,
						expr: &seqExpr{
							pos: position{line: 842, col: 5, offset: 23736},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 842, col: 5, offset: 23736},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 842, col: 12, offset: 23743},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 842, col: 14, offset: 23745},
									label: "assignments",
									expr: &ruleRefExpr{
										pos:  position{line: 842, col: 26, offset: 23757},
										name: "SQLAssignments",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignment",
			pos:  position{line: 844, col: 1, offset: 23801},
			expr: &choiceExpr{
				pos: position{line: 845, col: 5, offset: 23819},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 845, col: 5, offset: 23819},
						run: (*parser).callonSQLAssignment2,
						expr: &seqExpr{
							pos: position{line: 845, col: 5, offset: 23819},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 845, col: 5, offset: 23819},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 845, col: 9, offset: 23823},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 845, col: 14, offset: 23828},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 845, col: 16, offset: 23830},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 845, col: 19, offset: 23833},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 845, col: 21, offset: 23835},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 845, col: 25, offset: 23839},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 846, col: 5, offset: 23933},
						run: (*parser).callonSQLAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 846, col: 5, offset: 23933},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 846, col: 10, offset: 23938},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignments",
			pos:  position{line: 848, col: 1, offset: 24030},
			expr: &actionExpr{
				pos: position{line: 849, col: 5, offset: 24049},
				run: (*parser).callonSQLAssignments1,
				expr: &seqExpr{
					pos: position{line: 849, col: 5, offset: 24049},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 849, col: 5, offset: 24049},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 849, col: 11, offset: 24055},
								name: "SQLAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 849, col: 25, offset: 24069},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 849, col: 30, offset: 24074},
								expr: &actionExpr{
									pos: position{line: 849, col: 31, offset: 24075},
									run: (*parser).callonSQLAssignments7,
									expr: &seqExpr{
										pos: position{line: 849, col: 31, offset: 24075},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 849, col: 31, offset: 24075},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 849, col: 34, offset: 24078},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 849, col: 38, offset: 24082},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 849, col: 41, offset: 24085},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 849, col: 46, offset: 24090},
													name: "SQLAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLFrom",
			pos:  position{line: 853, col: 1, offset: 24211},
			expr: &choiceExpr{
				pos: position{line: 854, col: 5, offset: 24223},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 854, col: 5, offset: 24223},
						run: (*parser).callonSQLFrom2,
						expr: &seqExpr{
							pos: position{line: 854, col: 5, offset: 24223},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 854, col: 5, offset: 24223},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 854, col: 7, offset: 24225},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 854, col: 12, offset: 24230},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 854, col: 14, offset: 24232},
									label: "table",
									expr: &ruleRefExpr{
										pos:  position{line: 854, col: 20, offset: 24238},
										name: "SQLTable",
									},
								},
								&labeledExpr{
									pos:   position{line: 854, col: 29, offset: 24247},
									label: "alias",
									expr: &zeroOrOneExpr{
										pos: position{line: 854, col: 35, offset: 24253},
										expr: &ruleRefExpr{
											pos:  position{line: 854, col: 35, offset: 24253},
											name: "SQLAlias",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 857, col: 5, offset: 24348},
						run: (*parser).callonSQLFrom12,
						expr: &seqExpr{
							pos: position{line: 857, col: 5, offset: 24348},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 857, col: 5, offset: 24348},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 857, col: 7, offset: 24350},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 857, col: 12, offset: 24355},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 857, col: 14, offset: 24357},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAlias",
			pos:  position{line: 859, col: 1, offset: 24382},
			expr: &choiceExpr{
				pos: position{line: 860, col: 5, offset: 24395},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 860, col: 5, offset: 24395},
						run: (*parser).callonSQLAlias2,
						expr: &seqExpr{
							pos: position{line: 860, col: 5, offset: 24395},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 860, col: 5, offset: 24395},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 860, col: 7, offset: 24397},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 860, col: 10, offset: 24400},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 860, col: 12, offset: 24402},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 860, col: 15, offset: 24405},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 861, col: 5, offset: 24433},
						run: (*parser).callonSQLAlias9,
						expr: &seqExpr{
							pos: position{line: 861, col: 5, offset: 24433},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 861, col: 5, offset: 24433},
									name: "_",
								},
								&notExpr{
									pos: position{line: 861, col: 7, offset: 24435},
									expr: &seqExpr{
										pos: position{line: 861, col: 9, offset: 24437},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 861, col: 9, offset: 24437},
												name: "SQLTokenSentinels",
											},
											&ruleRefExpr{
												pos:  position{line: 861, col: 27, offset: 24455},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 861, col: 30, offset: 24458},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 861, col: 33, offset: 24461},
										name: "Lval",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLTable",
			pos:  position{line: 863, col: 1, offset: 24486},
			expr: &ruleRefExpr{
				pos:  position{line: 864, col: 5, offset: 24499},
				name: "Expr",
			},
		},
		{
			name: "SQLJoins",
			pos:  position{line: 866, col: 1, offset: 24505},
			expr: &actionExpr{
				pos: position{line: 867, col: 5, offset: 24518},
				run: (*parser).callonSQLJoins1,
				expr: &seqExpr{
					pos: position{line: 867, col: 5, offset: 24518},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 867, col: 5, offset: 24518},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 867, col: 11, offset: 24524},
								name: "SQLJoin",
							},
						},
						&labeledExpr{
							pos:   position{line: 867, col: 19, offset: 24532},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 867, col: 24, offset: 24537},
								expr: &actionExpr{
									pos: position{line: 867, col: 25, offset: 24538},
									run: (*parser).callonSQLJoins7,
									expr: &labeledExpr{
										pos:   position{line: 867, col: 25, offset: 24538},
										label: "join",
										expr: &ruleRefExpr{
											pos:  position{line: 867, col: 30, offset: 24543},
											name: "SQLJoin",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoin",
			pos:  position{line: 871, col: 1, offset: 24658},
			expr: &actionExpr{
				pos: position{line: 872, col: 5, offset: 24670},
				run: (*parser).callonSQLJoin1,
				expr: &seqExpr{
					pos: position{line: 872, col: 5, offset: 24670},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 872, col: 5, offset: 24670},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 872, col: 11, offset: 24676},
								name: "SQLJoinStyle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 872, col: 24, offset: 24689},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 872, col: 26, offset: 24691},
							name: "JOIN",
						},
						&ruleRefExpr{
							pos:  position{line: 872, col: 31, offset: 24696},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 872, col: 33, offset: 24698},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 872, col: 39, offset: 24704},
								name: "SQLTable",
							},
						},
						&labeledExpr{
							pos:   position{line: 872, col: 48, offset: 24713},
							label: "alias",
							expr: &zeroOrOneExpr{
								pos: position{line: 872, col: 54, offset: 24719},
								expr: &ruleRefExpr{
									pos:  position{line: 872, col: 54, offset: 24719},
									name: "SQLAlias",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 872, col: 64, offset: 24729},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 872, col: 66, offset: 24731},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 872, col: 69, offset: 24734},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 872, col: 71, offset: 24736},
							label: "leftKey",
							expr: &ruleRefExpr{
								pos:  position{line: 872, col: 79, offset: 24744},
								name: "JoinKey",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 872, col: 87, offset: 24752},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 872, col: 90, offset: 24755},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 872, col: 94, offset: 24759},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 872, col: 97, offset: 24762},
							label: "rightKey",
							expr: &ruleRefExpr{
								pos:  position{line: 872, col: 106, offset: 24771},
								name: "JoinKey",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoinStyle",
			pos:  position{line: 891, col: 1, offset: 25006},
			expr: &choiceExpr{
				pos: position{line: 892, col: 5, offset: 25023},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 892, col: 5, offset: 25023},
						run: (*parser).callonSQLJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 892, col: 5, offset: 25023},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 892, col: 5, offset: 25023},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 892, col: 7, offset: 25025},
									label: "style",
									expr: &choiceExpr{
										pos: position{line: 892, col: 14, offset: 25032},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 892, col: 14, offset: 25032},
												name: "ANTI",
											},
											&ruleRefExpr{
												pos:  position{line: 892, col: 21, offset: 25039},
												name: "INNER",
											},
											&ruleRefExpr{
												pos:  position{line: 892, col: 29, offset: 25047},
												name: "LEFT",
											},
											&ruleRefExpr{
												pos:  position{line: 892, col: 36, offset: 25054},
												name: "RIGHT",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 893, col: 5, offset: 25087},
						run: (*parser).callonSQLJoinStyle11,
						expr: &litMatcher{
							pos:        position{line: 893, col: 5, offset: 25087},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLWhere",
			pos:  position{line: 895, col: 1, offset: 25115},
			expr: &actionExpr{
				pos: position{line: 896, col: 5, offset: 25128},
				run: (*parser).callonSQLWhere1,
				expr: &seqExpr{
					pos: position{line: 896, col: 5, offset: 25128},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 896, col: 5, offset: 25128},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 896, col: 7, offset: 25130},
							name: "WHERE",
						},
						&ruleRefExpr{
							pos:  position{line: 896, col: 13, offset: 25136},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 896, col: 15, offset: 25138},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 896, col: 20, offset: 25143},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLGroupBy",
			pos:  position{line: 898, col: 1, offset: 25179},
			expr: &actionExpr{
				pos: position{line: 899, col: 5, offset: 25194},
				run: (*parser).callonSQLGroupBy1,
				expr: &seqExpr{
					pos: position{line: 899, col: 5, offset: 25194},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 899, col: 5, offset: 25194},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 899, col: 7, offset: 25196},
							name: "GROUP",
						},
						&ruleRefExpr{
							pos:  position{line: 899, col: 13, offset: 25202},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 899, col: 15, offset: 25204},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 899, col: 18, offset: 25207},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 899, col: 20, offset: 25209},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 899, col: 28, offset: 25217},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLHaving",
			pos:  position{line: 901, col: 1, offset: 25253},
			expr: &actionExpr{
				pos: position{line: 902, col: 5, offset: 25267},
				run: (*parser).callonSQLHaving1,
				expr: &seqExpr{
					pos: position{line: 902, col: 5, offset: 25267},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 902, col: 5, offset: 25267},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 902, col: 7, offset: 25269},
							name: "HAVING",
						},
						&ruleRefExpr{
							pos:  position{line: 902, col: 14, offset: 25276},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 902, col: 16, offset: 25278},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 902, col: 21, offset: 25283},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrderBy",
			pos:  position{line: 904, col: 1, offset: 25319},
			expr: &actionExpr{
				pos: position{line: 905, col: 5, offset: 25334},
				run: (*parser).callonSQLOrderBy1,
				expr: &seqExpr{
					pos: position{line: 905, col: 5, offset: 25334},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 905, col: 5, offset: 25334},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 905, col: 7, offset: 25336},
							name: "ORDER",
						},
						&ruleRefExpr{
							pos:  position{line: 905, col: 13, offset: 25342},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 905, col: 15, offset: 25344},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 905, col: 18, offset: 25347},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 905, col: 20, offset: 25349},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 905, col: 25, offset: 25354},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 905, col: 31, offset: 25360},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 905, col: 37, offset: 25366},
								name: "SQLOrder",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrder",
			pos:  position{line: 909, col: 1, offset: 25476},
			expr: &choiceExpr{
				pos: position{line: 910, col: 5, offset: 25489},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 910, col: 5, offset: 25489},
						run: (*parser).callonSQLOrder2,
						expr: &seqExpr{
							pos: position{line: 910, col: 5, offset: 25489},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 910, col: 5, offset: 25489},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 910, col: 7, offset: 25491},
									label: "dir",
									expr: &choiceExpr{
										pos: position{line: 910, col: 12, offset: 25496},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 910, col: 12, offset: 25496},
												name: "ASC",
											},
											&ruleRefExpr{
												pos:  position{line: 910, col: 18, offset: 25502},
												name: "DESC",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 911, col: 5, offset: 25532},
						run: (*parser).callonSQLOrder9,
						expr: &litMatcher{
							pos:        position{line: 911, col: 5, offset: 25532},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLLimit",
			pos:  position{line: 913, col: 1, offset: 25558},
			expr: &choiceExpr{
				pos: position{line: 914, col: 5, offset: 25571},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 914, col: 5, offset: 25571},
						run: (*parser).callonSQLLimit2,
						expr: &seqExpr{
							pos: position{line: 914, col: 5, offset: 25571},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 914, col: 5, offset: 25571},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 914, col: 7, offset: 25573},
									name: "LIMIT",
								},
								&ruleRefExpr{
									pos:  position{line: 914, col: 13, offset: 25579},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 914, col: 15, offset: 25581},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 914, col: 21, offset: 25587},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 915, col: 5, offset: 25618},
						run: (*parser).callonSQLLimit9,
						expr: &litMatcher{
							pos:        position{line: 915, col: 5, offset: 25618},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SELECT",
			pos:  position{line: 917, col: 1, offset: 25640},
			expr: &actionExpr{
				pos: position{line: 917, col: 10, offset: 25649},
				run: (*parser).callonSELECT1,
				expr: &litMatcher{
					pos:        position{line: 917, col: 10, offset: 25649},
					val:        "select",
					ignoreCase: true,
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 918, col: 1, offset: 25684},
			expr: &actionExpr{
				pos: position{line: 918, col: 6, offset: 25689},
				run: (*parser).callonAS1,
				expr: &litMatcher{
					pos:        position{line: 918, col: 6, offset: 25689},
					val:        "as",
					ignoreCase: true,
				},
			},
		},
		{
			name: "FROM",
			pos:  position{line: 919, col: 1, offset: 25716},
			expr: &actionExpr{
				pos: position{line: 919, col: 8, offset: 25723},
				run: (*parser).callonFROM1,
				expr: &litMatcher{
					pos:        position{line: 919, col: 8, offset: 25723},
					val:        "from",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JOIN",
			pos:  position{line: 920, col: 1, offset: 25754},
			expr: &actionExpr{
				pos: position{line: 920, col: 8, offset: 25761},
				run: (*parser).callonJOIN1,
				expr: &litMatcher{
					pos:        position{line: 920, col: 8, offset: 25761},
					val:        "join",
					ignoreCase: true,
				},
			},
		},
		{
			name: "WHERE",
			pos:  position{line: 921, col: 1, offset: 25792},
			expr: &actionExpr{
				pos: position{line: 921, col: 9, offset: 25800},
				run: (*parser).callonWHERE1,
				expr: &litMatcher{
					pos:        position{line: 921, col: 9, offset: 25800},
					val:        "where",
					ignoreCase: true,
				},
			},
		},
		{
			name: "GROUP",
			pos:  position{line: 922, col: 1, offset: 25833},
			expr: &actionExpr{
				pos: position{line: 922, col: 9, offset: 25841},
				run: (*parser).callonGROUP1,
				expr: &litMatcher{
					pos:        position{line: 922, col: 9, offset: 25841},
					val:        "group",
					ignoreCase: true,
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 923, col: 1, offset: 25874},
			expr: &actionExpr{
				pos: position{line: 923, col: 6, offset: 25879},
				run: (*parser).callonBY1,
				expr: &litMatcher{
					pos:        position{line: 923, col: 6, offset: 25879},
					val:        "by",
					ignoreCase: true,
				},
			},
		},
		{
			name: "HAVING",
			pos:  position{line: 924, col: 1, offset: 25906},
			expr: &actionExpr{
				pos: position{line: 924, col: 10, offset: 25915},
				run: (*parser).callonHAVING1,
				expr: &litMatcher{
					pos:        position{line: 924, col: 10, offset: 25915},
					val:        "having",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ORDER",
			pos:  position{line: 925, col: 1, offset: 25950},
			expr: &actionExpr{
				pos: position{line: 925, col: 9, offset: 25958},
				run: (*parser).callonORDER1,
				expr: &litMatcher{
					pos:        position{line: 925, col: 9, offset: 25958},
					val:        "order",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ON",
			pos:  position{line: 926, col: 1, offset: 25991},
			expr: &actionExpr{
				pos: position{line: 926, col: 6, offset: 25996},
				run: (*parser).callonON1,
				expr: &litMatcher{
					pos:        position{line: 926, col: 6, offset: 25996},
					val:        "on",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LIMIT",
			pos:  position{line: 927, col: 1, offset: 26023},
			expr: &actionExpr{
				pos: position{line: 927, col: 9, offset: 26031},
				run: (*parser).callonLIMIT1,
				expr: &litMatcher{
					pos:        position{line: 927, col: 9, offset: 26031},
					val:        "limit",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ASC",
			pos:  position{line: 928, col: 1, offset: 26064},
			expr: &actionExpr{
				pos: position{line: 928, col: 7, offset: 26070},
				run: (*parser).callonASC1,
				expr: &litMatcher{
					pos:        position{line: 928, col: 7, offset: 26070},
					val:        "asc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "DESC",
			pos:  position{line: 929, col: 1, offset: 26099},
			expr: &actionExpr{
				pos: position{line: 929, col: 8, offset: 26106},
				run: (*parser).callonDESC1,
				expr: &litMatcher{
					pos:        position{line: 929, col: 8, offset: 26106},
					val:        "desc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ANTI",
			pos:  position{line: 930, col: 1, offset: 26137},
			expr: &actionExpr{
				pos: position{line: 930, col: 8, offset: 26144},
				run: (*parser).callonANTI1,
				expr: &litMatcher{
					pos:        position{line: 930, col: 8, offset: 26144},
					val:        "anti",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LEFT",
			pos:  position{line: 931, col: 1, offset: 26175},
			expr: &actionExpr{
				pos: position{line: 931, col: 8, offset: 26182},
				run: (*parser).callonLEFT1,
				expr: &litMatcher{
					pos:        position{line: 931, col: 8, offset: 26182},
					val:        "left",
					ignoreCase: true,
				},
			},
		},
		{
			name: "RIGHT",
			pos:  position{line: 932, col: 1, offset: 26213},
			expr: &actionExpr{
				pos: position{line: 932, col: 9, offset: 26221},
				run: (*parser).callonRIGHT1,
				expr: &litMatcher{
					pos:        position{line: 932, col: 9, offset: 26221},
					val:        "right",
					ignoreCase: true,
				},
			},
		},
		{
			name: "INNER",
			pos:  position{line: 933, col: 1, offset: 26254},
			expr: &actionExpr{
				pos: position{line: 933, col: 9, offset: 26262},
				run: (*parser).callonINNER1,
				expr: &litMatcher{
					pos:        position{line: 933, col: 9, offset: 26262},
					val:        "inner",
					ignoreCase: true,
				},
			},
		},
		{
			name: "SQLTokenSentinels",
			pos:  position{line: 935, col: 1, offset: 26296},
			expr: &choiceExpr{
				pos: position{line: 936, col: 5, offset: 26318},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 936, col: 5, offset: 26318},
						name: "SELECT",
					},
					&ruleRefExpr{
						pos:  position{line: 936, col: 14, offset: 26327},
						name: "AS",
					},
					&ruleRefExpr{
						pos:  position{line: 936, col: 19, offset: 26332},
						name: "FROM",
					},
					&ruleRefExpr{
						pos:  position{line: 936, col: 27, offset: 26340},
						name: "JOIN",
					},
					&ruleRefExpr{
						pos:  position{line: 936, col: 34, offset: 26347},
						name: "WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 936, col: 42, offset: 26355},
						name: "GROUP",
					},
					&ruleRefExpr{
						pos:  position{line: 936, col: 50, offset: 26363},
						name: "HAVING",
					},
					&ruleRefExpr{
						pos:  position{line: 936, col: 59, offset: 26372},
						name: "ORDER",
					},
					&ruleRefExpr{
						pos:  position{line: 936, col: 67, offset: 26380},
						name: "LIMIT",
					},
					&ruleRefExpr{
						pos:  position{line: 936, col: 75, offset: 26388},
						name: "ON",
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 940, col: 1, offset: 26414},
			expr: &choiceExpr{
				pos: position{line: 941, col: 5, offset: 26426},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 941, col: 5, offset: 26426},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 942, col: 5, offset: 26442},
						name: "TemplateLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 943, col: 5, offset: 26462},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 944, col: 5, offset: 26480},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 945, col: 5, offset: 26499},
						name: "BytesLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 946, col: 5, offset: 26516},
						name: "Duration",
					},
					&ruleRefExpr{
						pos:  position{line: 947, col: 5, offset: 26529},
						name: "Time",
					},
					&ruleRefExpr{
						pos:  position{line: 948, col: 5, offset: 26538},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 949, col: 5, offset: 26555},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 950, col: 5, offset: 26574},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 951, col: 5, offset: 26593},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 953, col: 1, offset: 26606},
			expr: &choiceExpr{
				pos: position{line: 954, col: 5, offset: 26624},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 954, col: 5, offset: 26624},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 954, col: 5, offset: 26624},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 954, col: 5, offset: 26624},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 954, col: 7, offset: 26626},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 954, col: 14, offset: 26633},
									expr: &ruleRefExpr{
										pos:  position{line: 954, col: 15, offset: 26634},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 957, col: 5, offset: 26749},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 957, col: 5, offset: 26749},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 957, col: 7, offset: 26751},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 961, col: 1, offset: 26855},
			expr: &choiceExpr{
				pos: position{line: 962, col: 5, offset: 26874},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 962, col: 5, offset: 26874},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 962, col: 5, offset: 26874},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 962, col: 5, offset: 26874},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 962, col: 7, offset: 26876},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 962, col: 11, offset: 26880},
									expr: &ruleRefExpr{
										pos:  position{line: 962, col: 12, offset: 26881},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 965, col: 5, offset: 26995},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 965, col: 5, offset: 26995},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 965, col: 7, offset: 26997},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 969, col: 1, offset: 27096},
			expr: &actionExpr{
				pos: position{line: 970, col: 5, offset: 27113},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 970, col: 5, offset: 27113},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 970, col: 7, offset: 27115},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 974, col: 1, offset: 27228},
			expr: &actionExpr{
				pos: position{line: 975, col: 5, offset: 27247},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 975, col: 5, offset: 27247},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 975, col: 7, offset: 27249},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 979, col: 1, offset: 27358},
			expr: &choiceExpr{
				pos: position{line: 980, col: 5, offset: 27377},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 980, col: 5, offset: 27377},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 980, col: 5, offset: 27377},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 981, col: 5, offset: 27490},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 981, col: 5, offset: 27490},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 983, col: 1, offset: 27601},
			expr: &actionExpr{
				pos: position{line: 984, col: 5, offset: 27617},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 984, col: 5, offset: 27617},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "BytesLiteral",
			pos:  position{line: 986, col: 1, offset: 27723},
			expr: &actionExpr{
				pos: position{line: 987, col: 5, offset: 27740},
				run: (*parser).callonBytesLiteral1,
				expr: &seqExpr{
					pos: position{line: 987, col: 5, offset: 27740},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 987, col: 5, offset: 27740},
							val:        "0x",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 987, col: 10, offset: 27745},
							expr: &ruleRefExpr{
								pos:  position{line: 987, col: 10, offset: 27745},
								name: "HexDigit",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeLiteral",
			pos:  position{line: 991, col: 1, offset: 27860},
			expr: &actionExpr{
				pos: position{line: 992, col: 5, offset: 27876},
				run: (*parser).callonTypeLiteral1,
				expr: &seqExpr{
					pos: position{line: 992, col: 5, offset: 27876},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 992, col: 5, offset: 27876},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 992, col: 9, offset: 27880},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 992, col: 13, offset: 27884},
								name: "Type",
							},
						},
						&litMatcher{
							pos:        position{line: 992, col: 18, offset: 27889},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "CastType",
			pos:  position{line: 996, col: 1, offset: 27978},
			expr: &choiceExpr{
				pos: position{line: 997, col: 5, offset: 27991},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 997, col: 5, offset: 27991},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 998, col: 5, offset: 28007},
						name: "PrimitiveType",
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 1000, col: 1, offset: 28022},
			expr: &choiceExpr{
				pos: position{line: 1001, col: 5, offset: 28031},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1001, col: 5, offset: 28031},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1002, col: 5, offset: 28047},
						name: "AmbiguousType",
					},
					&ruleRefExpr{
						pos:  position{line: 1003, col: 5, offset: 28065},
						name: "ComplexType",
					},
				},
			},
		},
		{
			name: "AmbiguousType",
			pos:  position{line: 1005, col: 1, offset: 28078},
			expr: &choiceExpr{
				pos: position{line: 1006, col: 5, offset: 28096},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1006, col: 5, offset: 28096},
						run: (*parser).callonAmbiguousType2,
						expr: &seqExpr{
							pos: position{line: 1006, col: 5, offset: 28096},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1006, col: 5, offset: 28096},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1006, col: 10, offset: 28101},
										name: "PrimitiveType",
									},
								},
								&notExpr{
									pos: position{line: 1006, col: 24, offset: 28115},
									expr: &ruleRefExpr{
										pos:  position{line: 1006, col: 25, offset: 28116},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1007, col: 5, offset: 28156},
						run: (*parser).callonAmbiguousType8,
						expr: &seqExpr{
							pos: position{line: 1007, col: 5, offset: 28156},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1007, col: 5, offset: 28156},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1007, col: 10, offset: 28161},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1007, col: 25, offset: 28176},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1007, col: 28, offset: 28179},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1007, col: 32, offset: 28183},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1007, col: 35, offset: 28186},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1007, col: 39, offset: 28190},
										name: "Type",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1010, col: 5, offset: 28292},
						run: (*parser).callonAmbiguousType17,
						expr: &labeledExpr{
							pos:   position{line: 1010, col: 5, offset: 28292},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1010, col: 10, offset: 28297},
								name: "IdentifierName",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1013, col: 5, offset: 28399},
						run: (*parser).callonAmbiguousType20,
						expr: &seqExpr{
							pos: position{line: 1013, col: 5, offset: 28399},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1013, col: 5, offset: 28399},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1013, col: 9, offset: 28403},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1013, col: 12, offset: 28406},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 1013, col: 14, offset: 28408},
										name: "TypeUnion",
									},
								},
								&litMatcher{
									pos:        position{line: 1013, col: 25, offset: 28419},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeUnion",
			pos:  position{line: 1015, col: 1, offset: 28442},
			expr: &actionExpr{
				pos: position{line: 1016, col: 5, offset: 28456},
				run: (*parser).callonTypeUnion1,
				expr: &labeledExpr{
					pos:   position{line: 1016, col: 5, offset: 28456},
					label: "types",
					expr: &ruleRefExpr{
						pos:  position{line: 1016, col: 11, offset: 28462},
						name: "TypeList",
					},
				},
			},
		},
		{
			name: "TypeList",
			pos:  position{line: 1020, col: 1, offset: 28558},
			expr: &actionExpr{
				pos: position{line: 1021, col: 5, offset: 28571},
				run: (*parser).callonTypeList1,
				expr: &seqExpr{
					pos: position{line: 1021, col: 5, offset: 28571},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1021, col: 5, offset: 28571},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1021, col: 11, offset: 28577},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 1021, col: 16, offset: 28582},
							label: "rest",
							expr: &oneOrMoreExpr{
								pos: position{line: 1021, col: 21, offset: 28587},
								expr: &ruleRefExpr{
									pos:  position{line: 1021, col: 21, offset: 28587},
									name: "TypeListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeListTail",
			pos:  position{line: 1025, col: 1, offset: 28681},
			expr: &actionExpr{
				pos: position{line: 1025, col: 16, offset: 28696},
				run: (*parser).callonTypeListTail1,
				expr: &seqExpr{
					pos: position{line: 1025, col: 16, offset: 28696},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1025, col: 16, offset: 28696},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1025, col: 19, offset: 28699},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1025, col: 23, offset: 28703},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1025, col: 26, offset: 28706},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1025, col: 30, offset: 28710},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexType",
			pos:  position{line: 1027, col: 1, offset: 28736},
			expr: &choiceExpr{
				pos: position{line: 1028, col: 5, offset: 28752},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1028, col: 5, offset: 28752},
						run: (*parser).callonComplexType2,
						expr: &seqExpr{
							pos: position{line: 1028, col: 5, offset: 28752},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1028, col: 5, offset: 28752},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1028, col: 9, offset: 28756},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1028, col: 12, offset: 28759},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 1028, col: 19, offset: 28766},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1028, col: 33, offset: 28780},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1028, col: 36, offset: 28783},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1031, col: 5, offset: 28878},
						run: (*parser).callonComplexType10,
						expr: &seqExpr{
							pos: position{line: 1031, col: 5, offset: 28878},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1031, col: 5, offset: 28878},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1031, col: 9, offset: 28882},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1031, col: 12, offset: 28885},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1031, col: 16, offset: 28889},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1031, col: 21, offset: 28894},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1031, col: 24, offset: 28897},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1034, col: 5, offset: 28986},
						run: (*parser).callonComplexType18,
						expr: &seqExpr{
							pos: position{line: 1034, col: 5, offset: 28986},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1034, col: 5, offset: 28986},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1034, col: 10, offset: 28991},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1034, col: 14, offset: 28995},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1034, col: 18, offset: 28999},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1034, col: 23, offset: 29004},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1034, col: 26, offset: 29007},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1037, col: 5, offset: 29095},
						run: (*parser).callonComplexType26,
						expr: &seqExpr{
							pos: position{line: 1037, col: 5, offset: 29095},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1037, col: 5, offset: 29095},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1037, col: 10, offset: 29100},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1037, col: 13, offset: 29103},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 1037, col: 21, offset: 29111},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1037, col: 26, offset: 29116},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1037, col: 29, offset: 29119},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1037, col: 33, offset: 29123},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1037, col: 36, offset: 29126},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 1037, col: 44, offset: 29134},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1037, col: 49, offset: 29139},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1037, col: 52, offset: 29142},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateLiteral",
			pos:  position{line: 1041, col: 1, offset: 29256},
			expr: &actionExpr{
				pos: position{line: 1042, col: 5, offset: 29276},
				run: (*parser).callonTemplateLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1042, col: 5, offset: 29276},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1042, col: 7, offset: 29278},
						name: "TemplateLiteralParts",
					},
				},
			},
		},
		{
			name: "TemplateLiteralParts",
			pos:  position{line: 1049, col: 1, offset: 29494},
			expr: &choiceExpr{
				pos: position{line: 1050, col: 5, offset: 29519},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1050, col: 5, offset: 29519},
						run: (*parser).callonTemplateLiteralParts2,
						expr: &seqExpr{
							pos: position{line: 1050, col: 5, offset: 29519},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1050, col: 5, offset: 29519},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1050, col: 9, offset: 29523},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1050, col: 11, offset: 29525},
										expr: &ruleRefExpr{
											pos:  position{line: 1050, col: 11, offset: 29525},
											name: "TemplateDoubleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1050, col: 37, offset: 29551},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1051, col: 5, offset: 29577},
						run: (*parser).callonTemplateLiteralParts9,
						expr: &seqExpr{
							pos: position{line: 1051, col: 5, offset: 29577},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1051, col: 5, offset: 29577},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1051, col: 9, offset: 29581},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1051, col: 11, offset: 29583},
										expr: &ruleRefExpr{
											pos:  position{line: 1051, col: 11, offset: 29583},
											name: "TemplateSingleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1051, col: 37, offset: 29609},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedPart",
			pos:  position{line: 1053, col: 1, offset: 29632},
			expr: &choiceExpr{
				pos: position{line: 1054, col: 5, offset: 29661},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1054, col: 5, offset: 29661},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 1055, col: 5, offset: 29678},
						run: (*parser).callonTemplateDoubleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 1055, col: 5, offset: 29678},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1055, col: 7, offset: 29680},
								expr: &ruleRefExpr{
									pos:  position{line: 1055, col: 7, offset: 29680},
									name: "TemplateDoubleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedChar",
			pos:  position{line: 1059, col: 1, offset: 29817},
			expr: &choiceExpr{
				pos: position{line: 1060, col: 5, offset: 29846},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1060, col: 5, offset: 29846},
						run: (*parser).callonTemplateDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1060, col: 5, offset: 29846},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1060, col: 5, offset: 29846},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1060, col: 10, offset: 29851},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1060, col: 12, offset: 29853},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1061, col: 5, offset: 29880},
						run: (*parser).callonTemplateDoubleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1061, col: 5, offset: 29880},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1061, col: 5, offset: 29880},
									expr: &litMatcher{
										pos:        position{line: 1061, col: 8, offset: 29883},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1061, col: 15, offset: 29890},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1061, col: 17, offset: 29892},
										name: "DoubleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedPart",
			pos:  position{line: 1063, col: 1, offset: 29928},
			expr: &choiceExpr{
				pos: position{line: 1064, col: 5, offset: 29957},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1064, col: 5, offset: 29957},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 1065, col: 5, offset: 29974},
						run: (*parser).callonTemplateSingleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 1065, col: 5, offset: 29974},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1065, col: 7, offset: 29976},
								expr: &ruleRefExpr{
									pos:  position{line: 1065, col: 7, offset: 29976},
									name: "TemplateSingleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedChar",
			pos:  position{line: 1069, col: 1, offset: 30113},
			expr: &choiceExpr{
				pos: position{line: 1070, col: 5, offset: 30142},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1070, col: 5, offset: 30142},
						run: (*parser).callonTemplateSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1070, col: 5, offset: 30142},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1070, col: 5, offset: 30142},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1070, col: 10, offset: 30147},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1070, col: 12, offset: 30149},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1071, col: 5, offset: 30176},
						run: (*parser).callonTemplateSingleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1071, col: 5, offset: 30176},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1071, col: 5, offset: 30176},
									expr: &litMatcher{
										pos:        position{line: 1071, col: 8, offset: 30179},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1071, col: 15, offset: 30186},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1071, col: 17, offset: 30188},
										name: "SingleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateExpr",
			pos:  position{line: 1073, col: 1, offset: 30224},
			expr: &actionExpr{
				pos: position{line: 1074, col: 5, offset: 30241},
				run: (*parser).callonTemplateExpr1,
				expr: &seqExpr{
					pos: position{line: 1074, col: 5, offset: 30241},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1074, col: 5, offset: 30241},
							val:        "${",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1074, col: 10, offset: 30246},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1074, col: 13, offset: 30249},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 1074, col: 15, offset: 30251},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1074, col: 20, offset: 30256},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1074, col: 23, offset: 30259},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 1076, col: 1, offset: 30282},
			expr: &actionExpr{
				pos: position{line: 1077, col: 5, offset: 30300},
				run: (*parser).callonPrimitiveType1,
				expr: &choiceExpr{
					pos: position{line: 1077, col: 9, offset: 30304},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 1077, col: 9, offset: 30304},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1077, col: 19, offset: 30314},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1077, col: 30, offset: 30325},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1077, col: 41, offset: 30336},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1078, col: 9, offset: 30353},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1078, col: 18, offset: 30362},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1078, col: 28, offset: 30372},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1078, col: 38, offset: 30382},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1079, col: 9, offset: 30398},
							val:        "float32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1079, col: 21, offset: 30410},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1080, col: 9, offset: 30428},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1080, col: 18, offset: 30437},
							val:        "string",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1081, col: 9, offset: 30454},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1081, col: 22, offset: 30467},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1082, col: 9, offset: 30482},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1083, col: 9, offset: 30498},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1083, col: 16, offset: 30505},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1084, col: 9, offset: 30519},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1084, col: 18, offset: 30528},
							val:        "null",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldList",
			pos:  position{line: 1088, col: 1, offset: 30644},
			expr: &actionExpr{
				pos: position{line: 1089, col: 5, offset: 30662},
				run: (*parser).callonTypeFieldList1,
				expr: &seqExpr{
					pos: position{line: 1089, col: 5, offset: 30662},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1089, col: 5, offset: 30662},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1089, col: 11, offset: 30668},
								name: "TypeField",
							},
						},
						&labeledExpr{
							pos:   position{line: 1089, col: 21, offset: 30678},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1089, col: 26, offset: 30683},
								expr: &ruleRefExpr{
									pos:  position{line: 1089, col: 26, offset: 30683},
									name: "TypeFieldListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTail",
			pos:  position{line: 1093, col: 1, offset: 30782},
			expr: &actionExpr{
				pos: position{line: 1093, col: 21, offset: 30802},
				run: (*parser).callonTypeFieldListTail1,
				expr: &seqExpr{
					pos: position{line: 1093, col: 21, offset: 30802},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1093, col: 21, offset: 30802},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1093, col: 24, offset: 30805},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1093, col: 28, offset: 30809},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1093, col: 31, offset: 30812},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1093, col: 35, offset: 30816},
								name: "TypeField",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeField",
			pos:  position{line: 1095, col: 1, offset: 30847},
			expr: &actionExpr{
				pos: position{line: 1096, col: 5, offset: 30861},
				run: (*parser).callonTypeField1,
				expr: &seqExpr{
					pos: position{line: 1096, col: 5, offset: 30861},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1096, col: 5, offset: 30861},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1096, col: 10, offset: 30866},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1096, col: 20, offset: 30876},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1096, col: 23, offset: 30879},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1096, col: 27, offset: 30883},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1096, col: 30, offset: 30886},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1096, col: 34, offset: 30890},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 1100, col: 1, offset: 30972},
			expr: &choiceExpr{
				pos: position{line: 1101, col: 5, offset: 30986},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1101, col: 5, offset: 30986},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 1102, col: 5, offset: 31005},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "EqualityToken",
			pos:  position{line: 1104, col: 1, offset: 31019},
			expr: &choiceExpr{
				pos: position{line: 1105, col: 5, offset: 31037},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1105, col: 5, offset: 31037},
						name: "EqualityOperator",
					},
					&ruleRefExpr{
						pos:  position{line: 1105, col: 24, offset: 31056},
						name: "RelativeOperator",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 1107, col: 1, offset: 31074},
			expr: &actionExpr{
				pos: position{line: 1107, col: 12, offset: 31085},
				run: (*parser).callonAndToken1,
				expr: &seqExpr{
					pos: position{line: 1107, col: 12, offset: 31085},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1107, col: 13, offset: 31086},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1107, col: 13, offset: 31086},
									val:        "and",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1107, col: 21, offset: 31094},
									val:        "AND",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1107, col: 28, offset: 31101},
							expr: &ruleRefExpr{
								pos:  position{line: 1107, col: 29, offset: 31102},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 1108, col: 1, offset: 31139},
			expr: &actionExpr{
				pos: position{line: 1108, col: 11, offset: 31149},
				run: (*parser).callonOrToken1,
				expr: &seqExpr{
					pos: position{line: 1108, col: 11, offset: 31149},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1108, col: 12, offset: 31150},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1108, col: 12, offset: 31150},
									val:        "or",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1108, col: 19, offset: 31157},
									val:        "OR",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1108, col: 25, offset: 31163},
							expr: &ruleRefExpr{
								pos:  position{line: 1108, col: 26, offset: 31164},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 1109, col: 1, offset: 31200},
			expr: &actionExpr{
				pos: position{line: 1109, col: 11, offset: 31210},
				run: (*parser).callonInToken1,
				expr: &seqExpr{
					pos: position{line: 1109, col: 11, offset: 31210},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1109, col: 11, offset: 31210},
							val:        "in",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1109, col: 16, offset: 31215},
							expr: &ruleRefExpr{
								pos:  position{line: 1109, col: 17, offset: 31216},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 1110, col: 1, offset: 31252},
			expr: &actionExpr{
				pos: position{line: 1110, col: 12, offset: 31263},
				run: (*parser).callonNotToken1,
				expr: &seqExpr{
					pos: position{line: 1110, col: 12, offset: 31263},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1110, col: 13, offset: 31264},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1110, col: 13, offset: 31264},
									val:        "not",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1110, col: 21, offset: 31272},
									val:        "NOT",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1110, col: 28, offset: 31279},
							expr: &ruleRefExpr{
								pos:  position{line: 1110, col: 29, offset: 31280},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 1111, col: 1, offset: 31317},
			expr: &actionExpr{
				pos: position{line: 1111, col: 11, offset: 31327},
				run: (*parser).callonByToken1,
				expr: &seqExpr{
					pos: position{line: 1111, col: 11, offset: 31327},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1111, col: 11, offset: 31327},
							val:        "by",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1111, col: 16, offset: 31332},
							expr: &ruleRefExpr{
								pos:  position{line: 1111, col: 17, offset: 31333},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 1113, col: 1, offset: 31370},
			expr: &charClassMatcher{
				pos:        position{line: 1113, col: 19, offset: 31388},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 1115, col: 1, offset: 31400},
			expr: &choiceExpr{
				pos: position{line: 1115, col: 18, offset: 31417},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1115, col: 18, offset: 31417},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 1115, col: 36, offset: 31435},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 1117, col: 1, offset: 31442},
			expr: &actionExpr{
				pos: position{line: 1118, col: 5, offset: 31457},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 1118, col: 5, offset: 31457},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 1118, col: 8, offset: 31460},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 1120, col: 1, offset: 31541},
			expr: &choiceExpr{
				pos: position{line: 1121, col: 5, offset: 31560},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1121, col: 5, offset: 31560},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 1121, col: 5, offset: 31560},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1121, col: 5, offset: 31560},
									expr: &seqExpr{
										pos: position{line: 1121, col: 7, offset: 31562},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1121, col: 7, offset: 31562},
												name: "IDGuard",
											},
											&notExpr{
												pos: position{line: 1121, col: 15, offset: 31570},
												expr: &ruleRefExpr{
													pos:  position{line: 1121, col: 16, offset: 31571},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1121, col: 32, offset: 31587},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1121, col: 48, offset: 31603},
									expr: &ruleRefExpr{
										pos:  position{line: 1121, col: 48, offset: 31603},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1122, col: 5, offset: 31655},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 1122, col: 5, offset: 31655},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1123, col: 5, offset: 31694},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 1123, col: 5, offset: 31694},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1123, col: 5, offset: 31694},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1123, col: 10, offset: 31699},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1123, col: 13, offset: 31702},
										name: "IDGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1125, col: 5, offset: 31793},
						run: (*parser).callonIdentifierName19,
						expr: &litMatcher{
							pos:        position{line: 1125, col: 5, offset: 31793},
							val:        "type",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1126, col: 5, offset: 31835},
						run: (*parser).callonIdentifierName21,
						expr: &seqExpr{
							pos: position{line: 1126, col: 5, offset: 31835},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1126, col: 5, offset: 31835},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1126, col: 8, offset: 31838},
										name: "SQLTokenSentinels",
									},
								},
								&andExpr{
									pos: position{line: 1126, col: 26, offset: 31856},
									expr: &seqExpr{
										pos: position{line: 1126, col: 28, offset: 31858},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1126, col: 28, offset: 31858},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1126, col: 31, offset: 31861},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IDGuard",
			pos:  position{line: 1128, col: 1, offset: 31886},
			expr: &choiceExpr{
				pos: position{line: 1129, col: 5, offset: 31898},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1129, col: 5, offset: 31898},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1130, col: 5, offset: 31917},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "Time",
			pos:  position{line: 1132, col: 1, offset: 31930},
			expr: &actionExpr{
				pos: position{line: 1133, col: 5, offset: 31939},
				run: (*parser).callonTime1,
				expr: &seqExpr{
					pos: position{line: 1133, col: 5, offset: 31939},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1133, col: 5, offset: 31939},
							name: "FullDate",
						},
						&litMatcher{
							pos:        position{line: 1133, col: 14, offset: 31948},
							val:        "T",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1133, col: 18, offset: 31952},
							name: "FullTime",
						},
					},
				},
			},
		},
		{
			name: "FullDate",
			pos:  position{line: 1137, col: 1, offset: 32072},
			expr: &seqExpr{
				pos: position{line: 1137, col: 12, offset: 32083},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1137, col: 12, offset: 32083},
						name: "D4",
					},
					&litMatcher{
						pos:        position{line: 1137, col: 15, offset: 32086},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1137, col: 19, offset: 32090},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1137, col: 22, offset: 32093},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1137, col: 26, offset: 32097},
						name: "D2",
					},
				},
			},
		},
		{
			name: "D4",
			pos:  position{line: 1139, col: 1, offset: 32101},
			expr: &seqExpr{
				pos: position{line: 1139, col: 6, offset: 32106},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1139, col: 6, offset: 32106},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1139, col: 11, offset: 32111},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1139, col: 16, offset: 32116},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1139, col: 21, offset: 32121},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "D2",
			pos:  position{line: 1140, col: 1, offset: 32127},
			expr: &seqExpr{
				pos: position{line: 1140, col: 6, offset: 32132},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1140, col: 6, offset: 32132},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1140, col: 11, offset: 32137},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "FullTime",
			pos:  position{line: 1142, col: 1, offset: 32144},
			expr: &seqExpr{
				pos: position{line: 1142, col: 12, offset: 32155},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1142, col: 12, offset: 32155},
						name: "PartialTime",
					},
					&ruleRefExpr{
						pos:  position{line: 1142, col: 24, offset: 32167},
						name: "TimeOffset",
					},
				},
			},
		},
		{
			name: "PartialTime",
			pos:  position{line: 1144, col: 1, offset: 32179},
			expr: &seqExpr{
				pos: position{line: 1144, col: 15, offset: 32193},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1144, col: 15, offset: 32193},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1144, col: 18, offset: 32196},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1144, col: 22, offset: 32200},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1144, col: 25, offset: 32203},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1144, col: 29, offset: 32207},
						name: "D2",
					},
					&zeroOrOneExpr{
						pos: position{line: 1144, col: 32, offset: 32210},
						expr: &seqExpr{
							pos: position{line: 1144, col: 33, offset: 32211},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1144, col: 33, offset: 32211},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1144, col: 37, offset: 32215},
									expr: &charClassMatcher{
										pos:        position{line: 1144, col: 37, offset: 32215},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeOffset",
			pos:  position{line: 1146, col: 1, offset: 32225},
			expr: &choiceExpr{
				pos: position{line: 1147, col: 5, offset: 32240},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1147, col: 5, offset: 32240},
						val:        "Z",
						ignoreCase: false,
					},
					&seqExpr{
						pos: position{line: 1148, col: 5, offset: 32248},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 1148, col: 6, offset: 32249},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1148, col: 6, offset: 32249},
										val:        "+",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 1148, col: 12, offset: 32255},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1148, col: 17, offset: 32260},
								name: "D2",
							},
							&litMatcher{
								pos:        position{line: 1148, col: 20, offset: 32263},
								val:        ":",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 1148, col: 24, offset: 32267},
								name: "D2",
							},
							&zeroOrOneExpr{
								pos: position{line: 1148, col: 27, offset: 32270},
								expr: &seqExpr{
									pos: position{line: 1148, col: 28, offset: 32271},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1148, col: 28, offset: 32271},
											val:        ".",
											ignoreCase: false,
										},
										&oneOrMoreExpr{
											pos: position{line: 1148, col: 32, offset: 32275},
											expr: &charClassMatcher{
												pos:        position{line: 1148, col: 32, offset: 32275},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 1150, col: 1, offset: 32285},
			expr: &actionExpr{
				pos: position{line: 1151, col: 5, offset: 32298},
				run: (*parser).callonDuration1,
				expr: &seqExpr{
					pos: position{line: 1151, col: 5, offset: 32298},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1151, col: 5, offset: 32298},
							expr: &litMatcher{
								pos:        position{line: 1151, col: 5, offset: 32298},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1151, col: 10, offset: 32303},
							expr: &seqExpr{
								pos: position{line: 1151, col: 11, offset: 32304},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1151, col: 11, offset: 32304},
										name: "Decimal",
									},
									&ruleRefExpr{
										pos:  position{line: 1151, col: 19, offset: 32312},
										name: "TimeUnit",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Decimal",
			pos:  position{line: 1155, col: 1, offset: 32438},
			expr: &seqExpr{
				pos: position{line: 1155, col: 11, offset: 32448},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1155, col: 11, offset: 32448},
						name: "UInt",
					},
					&zeroOrOneExpr{
						pos: position{line: 1155, col: 16, offset: 32453},
						expr: &seqExpr{
							pos: position{line: 1155, col: 17, offset: 32454},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1155, col: 17, offset: 32454},
									val:        ".",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1155, col: 21, offset: 32458},
									name: "UInt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeUnit",
			pos:  position{line: 1157, col: 1, offset: 32466},
			expr: &choiceExpr{
				pos: position{line: 1158, col: 5, offset: 32479},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1158, col: 5, offset: 32479},
						val:        "ns",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1159, col: 5, offset: 32488},
						val:        "us",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1160, col: 5, offset: 32497},
						val:        "ms",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1161, col: 5, offset: 32506},
						val:        "s",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1162, col: 5, offset: 32514},
						val:        "m",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1163, col: 5, offset: 32522},
						val:        "h",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1164, col: 5, offset: 32530},
						val:        "d",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1165, col: 5, offset: 32538},
						val:        "w",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1166, col: 5, offset: 32546},
						val:        "y",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 1168, col: 1, offset: 32551},
			expr: &actionExpr{
				pos: position{line: 1169, col: 5, offset: 32558},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 1169, col: 5, offset: 32558},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1169, col: 5, offset: 32558},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1169, col: 10, offset: 32563},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1169, col: 14, offset: 32567},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1169, col: 19, offset: 32572},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1169, col: 23, offset: 32576},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1169, col: 28, offset: 32581},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1169, col: 32, offset: 32585},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 1171, col: 1, offset: 32622},
			expr: &actionExpr{
				pos: position{line: 1172, col: 5, offset: 32630},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 1172, col: 5, offset: 32630},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1172, col: 5, offset: 32630},
							expr: &seqExpr{
								pos: position{line: 1172, col: 8, offset: 32633},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1172, col: 8, offset: 32633},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 1172, col: 12, offset: 32637},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 1172, col: 16, offset: 32641},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 1172, col: 20, offset: 32645},
										expr: &choiceExpr{
											pos: position{line: 1172, col: 22, offset: 32647},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1172, col: 22, offset: 32647},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 1172, col: 33, offset: 32658},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1172, col: 39, offset: 32664},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1172, col: 41, offset: 32666},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 1176, col: 1, offset: 32830},
			expr: &choiceExpr{
				pos: position{line: 1177, col: 5, offset: 32848},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1177, col: 5, offset: 32848},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 1177, col: 5, offset: 32848},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1177, col: 5, offset: 32848},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 1177, col: 7, offset: 32850},
										expr: &ruleRefExpr{
											pos:  position{line: 1177, col: 7, offset: 32850},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1177, col: 17, offset: 32860},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1177, col: 19, offset: 32862},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1180, col: 5, offset: 32926},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 1180, col: 5, offset: 32926},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1180, col: 5, offset: 32926},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1180, col: 7, offset: 32928},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1180, col: 11, offset: 32932},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1180, col: 13, offset: 32934},
										expr: &ruleRefExpr{
											pos:  position{line: 1180, col: 13, offset: 32934},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1180, col: 23, offset: 32944},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1180, col: 28, offset: 32949},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1180, col: 30, offset: 32951},
										expr: &ruleRefExpr{
											pos:  position{line: 1180, col: 30, offset: 32951},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1180, col: 40, offset: 32961},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 1180, col: 42, offset: 32963},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1183, col: 5, offset: 33062},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 1183, col: 5, offset: 33062},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1183, col: 5, offset: 33062},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1183, col: 10, offset: 33067},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1183, col: 12, offset: 33069},
										expr: &ruleRefExpr{
											pos:  position{line: 1183, col: 12, offset: 33069},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1183, col: 22, offset: 33079},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1183, col: 24, offset: 33081},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1186, col: 5, offset: 33152},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 1186, col: 5, offset: 33152},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1186, col: 5, offset: 33152},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1186, col: 7, offset: 33154},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1186, col: 11, offset: 33158},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1186, col: 13, offset: 33160},
										expr: &ruleRefExpr{
											pos:  position{line: 1186, col: 13, offset: 33160},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1186, col: 23, offset: 33170},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1189, col: 5, offset: 33238},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 1189, col: 5, offset: 33238},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 1193, col: 1, offset: 33275},
			expr: &choiceExpr{
				pos: position{line: 1194, col: 5, offset: 33287},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1194, col: 5, offset: 33287},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 1195, col: 5, offset: 33294},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 1197, col: 1, offset: 33299},
			expr: &actionExpr{
				pos: position{line: 1197, col: 12, offset: 33310},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 1197, col: 12, offset: 33310},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1197, col: 12, offset: 33310},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1197, col: 16, offset: 33314},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1197, col: 18, offset: 33316},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 1199, col: 1, offset: 33354},
			expr: &actionExpr{
				pos: position{line: 1199, col: 12, offset: 33365},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 1199, col: 12, offset: 33365},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1199, col: 12, offset: 33365},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1199, col: 14, offset: 33367},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 1199, col: 18, offset: 33371},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 1201, col: 1, offset: 33409},
			expr: &actionExpr{
				pos: position{line: 1202, col: 5, offset: 33420},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 1202, col: 5, offset: 33420},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1202, col: 5, offset: 33420},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1202, col: 7, offset: 33422},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 1202, col: 10, offset: 33425},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1202, col: 14, offset: 33429},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1202, col: 16, offset: 33431},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 1206, col: 1, offset: 33504},
			expr: &actionExpr{
				pos: position{line: 1207, col: 5, offset: 33515},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 1207, col: 5, offset: 33515},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1207, col: 5, offset: 33515},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1207, col: 7, offset: 33517},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 1207, col: 11, offset: 33521},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1207, col: 15, offset: 33525},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1207, col: 17, offset: 33527},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 1211, col: 1, offset: 33590},
			expr: &actionExpr{
				pos: position{line: 1212, col: 4, offset: 33598},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 1212, col: 4, offset: 33598},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 1212, col: 6, offset: 33600},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 1214, col: 1, offset: 33640},
			expr: &choiceExpr{
				pos: position{line: 1215, col: 5, offset: 33654},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1215, col: 5, offset: 33654},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 1216, col: 5, offset: 33669},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 1218, col: 1, offset: 33685},
			expr: &actionExpr{
				pos: position{line: 1218, col: 14, offset: 33698},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1218, col: 14, offset: 33698},
					expr: &charClassMatcher{
						pos:        position{line: 1218, col: 14, offset: 33698},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 1220, col: 1, offset: 33737},
			expr: &actionExpr{
				pos: position{line: 1221, col: 5, offset: 33756},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 1221, col: 5, offset: 33756},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1221, col: 5, offset: 33756},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1221, col: 9, offset: 33760},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 1223, col: 1, offset: 33803},
			expr: &choiceExpr{
				pos: position{line: 1224, col: 5, offset: 33819},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1224, col: 5, offset: 33819},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 1224, col: 5, offset: 33819},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1224, col: 5, offset: 33819},
									expr: &litMatcher{
										pos:        position{line: 1224, col: 5, offset: 33819},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1224, col: 10, offset: 33824},
									expr: &charClassMatcher{
										pos:        position{line: 1224, col: 10, offset: 33824},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 1224, col: 17, offset: 33831},
									val:        ".",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1224, col: 21, offset: 33835},
									expr: &charClassMatcher{
										pos:        position{line: 1224, col: 21, offset: 33835},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1224, col: 28, offset: 33842},
									expr: &ruleRefExpr{
										pos:  position{line: 1224, col: 28, offset: 33842},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1227, col: 5, offset: 33901},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 1227, col: 5, offset: 33901},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1227, col: 5, offset: 33901},
									expr: &litMatcher{
										pos:        position{line: 1227, col: 5, offset: 33901},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1227, col: 10, offset: 33906},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1227, col: 14, offset: 33910},
									expr: &charClassMatcher{
										pos:        position{line: 1227, col: 14, offset: 33910},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1227, col: 21, offset: 33917},
									expr: &ruleRefExpr{
										pos:  position{line: 1227, col: 21, offset: 33917},
										name: "ExponentPart",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 1231, col: 1, offset: 33973},
			expr: &seqExpr{
				pos: position{line: 1231, col: 16, offset: 33988},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1231, col: 16, offset: 33988},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 1231, col: 21, offset: 33993},
						expr: &charClassMatcher{
							pos:        position{line: 1231, col: 21, offset: 33993},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1231, col: 27, offset: 33999},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 1233, col: 1, offset: 34011},
			expr: &actionExpr{
				pos: position{line: 1233, col: 7, offset: 34017},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1233, col: 7, offset: 34017},
					expr: &ruleRefExpr{
						pos:  position{line: 1233, col: 7, offset: 34017},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 1235, col: 1, offset: 34059},
			expr: &charClassMatcher{
				pos:        position{line: 1235, col: 12, offset: 34070},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1237, col: 1, offset: 34083},
			expr: &choiceExpr{
				pos: position{line: 1238, col: 5, offset: 34100},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1238, col: 5, offset: 34100},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 1238, col: 5, offset: 34100},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1238, col: 5, offset: 34100},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1238, col: 9, offset: 34104},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1238, col: 11, offset: 34106},
										expr: &ruleRefExpr{
											pos:  position{line: 1238, col: 11, offset: 34106},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1238, col: 29, offset: 34124},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1239, col: 5, offset: 34161},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 1239, col: 5, offset: 34161},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1239, col: 5, offset: 34161},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1239, col: 9, offset: 34165},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1239, col: 11, offset: 34167},
										expr: &ruleRefExpr{
											pos:  position{line: 1239, col: 11, offset: 34167},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1239, col: 29, offset: 34185},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 1241, col: 1, offset: 34219},
			expr: &choiceExpr{
				pos: position{line: 1242, col: 5, offset: 34240},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1242, col: 5, offset: 34240},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1242, col: 5, offset: 34240},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1242, col: 5, offset: 34240},
									expr: &choiceExpr{
										pos: position{line: 1242, col: 7, offset: 34242},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1242, col: 7, offset: 34242},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1242, col: 13, offset: 34248},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1242, col: 26, offset: 34261,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1243, col: 5, offset: 34298},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1243, col: 5, offset: 34298},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1243, col: 5, offset: 34298},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1243, col: 10, offset: 34303},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1243, col: 12, offset: 34305},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 1245, col: 1, offset: 34339},
			expr: &actionExpr{
				pos: position{line: 1246, col: 5, offset: 34351},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 1246, col: 5, offset: 34351},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1246, col: 5, offset: 34351},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1246, col: 10, offset: 34356},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1246, col: 23, offset: 34369},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1246, col: 28, offset: 34374},
								expr: &ruleRefExpr{
									pos:  position{line: 1246, col: 28, offset: 34374},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 1248, col: 1, offset: 34436},
			expr: &choiceExpr{
				pos: position{line: 1249, col: 5, offset: 34453},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1249, col: 5, offset: 34453},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1250, col: 5, offset: 34470},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordChars",
			pos:  position{line: 1252, col: 1, offset: 34482},
			expr: &actionExpr{
				pos: position{line: 1252, col: 16, offset: 34497},
				run: (*parser).callonKeyWordChars1,
				expr: &charClassMatcher{
					pos:        position{line: 1252, col: 16, offset: 34497},
					val:        "[a-zA-Z_.:/%#@~]",
					chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
					ranges:     []rune{'a', 'z', 'A', 'Z'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 1254, col: 1, offset: 34546},
			expr: &choiceExpr{
				pos: position{line: 1255, col: 5, offset: 34562},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1255, col: 5, offset: 34562},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 1256, col: 5, offset: 34579},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 1258, col: 1, offset: 34586},
			expr: &actionExpr{
				pos: position{line: 1258, col: 14, offset: 34599},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 1258, col: 14, offset: 34599},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1258, col: 14, offset: 34599},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1258, col: 19, offset: 34604},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1258, col: 22, offset: 34607},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1258, col: 22, offset: 34607},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1258, col: 38, offset: 34623},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Glob",
			pos:  position{line: 1260, col: 1, offset: 34659},
			expr: &actionExpr{
				pos: position{line: 1261, col: 5, offset: 34668},
				run: (*parser).callonGlob1,
				expr: &seqExpr{
					pos: position{line: 1261, col: 5, offset: 34668},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1261, col: 5, offset: 34668},
							expr: &ruleRefExpr{
								pos:  position{line: 1261, col: 6, offset: 34669},
								name: "GlobProperStart",
							},
						},
						&andExpr{
							pos: position{line: 1261, col: 22, offset: 34685},
							expr: &ruleRefExpr{
								pos:  position{line: 1261, col: 23, offset: 34686},
								name: "GlobHasStar",
							},
						},
						&labeledExpr{
							pos:   position{line: 1261, col: 35, offset: 34698},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1261, col: 40, offset: 34703},
								name: "GlobStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1261, col: 50, offset: 34713},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1261, col: 55, offset: 34718},
								expr: &ruleRefExpr{
									pos:  position{line: 1261, col: 55, offset: 34718},
									name: "GlobRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobProperStart",
			pos:  position{line: 1265, col: 1, offset: 34802},
			expr: &seqExpr{
				pos: position{line: 1265, col: 19, offset: 34820},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1265, col: 19, offset: 34820},
						expr: &litMatcher{
							pos:        position{line: 1265, col: 19, offset: 34820},
							val:        "*",
							ignoreCase: false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1265, col: 24, offset: 34825},
						name: "KeyWordStart",
					},
				},
			},
		},
		{
			name: "GlobHasStar",
			pos:  position{line: 1266, col: 1, offset: 34838},
			expr: &seqExpr{
				pos: position{line: 1266, col: 15, offset: 34852},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1266, col: 15, offset: 34852},
						expr: &ruleRefExpr{
							pos:  position{line: 1266, col: 15, offset: 34852},
							name: "KeyWordRest",
						},
					},
					&litMatcher{
						pos:        position{line: 1266, col: 28, offset: 34865},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "GlobStart",
			pos:  position{line: 1268, col: 1, offset: 34870},
			expr: &choiceExpr{
				pos: position{line: 1269, col: 5, offset: 34884},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1269, col: 5, offset: 34884},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1270, col: 5, offset: 34901},
						name: "GlobEsc",
					},
					&actionExpr{
						pos: position{line: 1271, col: 5, offset: 34913},
						run: (*parser).callonGlobStart4,
						expr: &litMatcher{
							pos:        position{line: 1271, col: 5, offset: 34913},
							val:        "*",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GlobRest",
			pos:  position{line: 1273, col: 1, offset: 34937},
			expr: &choiceExpr{
				pos: position{line: 1274, col: 5, offset: 34950},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1274, col: 5, offset: 34950},
						name: "GlobStart",
					},
					&charClassMatcher{
						pos:        position{line: 1275, col: 5, offset: 34964},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "GlobEsc",
			pos:  position{line: 1277, col: 1, offset: 34971},
			expr: &actionExpr{
				pos: position{line: 1277, col: 11, offset: 34981},
				run: (*parser).callonGlobEsc1,
				expr: &seqExpr{
					pos: position{line: 1277, col: 11, offset: 34981},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1277, col: 11, offset: 34981},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1277, col: 16, offset: 34986},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1277, col: 19, offset: 34989},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1277, col: 19, offset: 34989},
										name: "GlobEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1277, col: 32, offset: 35002},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobEscape",
			pos:  position{line: 1279, col: 1, offset: 35038},
			expr: &choiceExpr{
				pos: position{line: 1280, col: 5, offset: 35053},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1280, col: 5, offset: 35053},
						run: (*parser).callonGlobEscape2,
						expr: &litMatcher{
							pos:        position{line: 1280, col: 5, offset: 35053},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1281, col: 5, offset: 35081},
						run: (*parser).callonGlobEscape4,
						expr: &litMatcher{
							pos:        position{line: 1281, col: 5, offset: 35081},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1282, col: 5, offset: 35111},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 1285, col: 1, offset: 35118},
			expr: &choiceExpr{
				pos: position{line: 1286, col: 5, offset: 35139},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1286, col: 5, offset: 35139},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1286, col: 5, offset: 35139},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1286, col: 5, offset: 35139},
									expr: &choiceExpr{
										pos: position{line: 1286, col: 7, offset: 35141},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1286, col: 7, offset: 35141},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1286, col: 13, offset: 35147},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1286, col: 26, offset: 35160,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1287, col: 5, offset: 35197},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1287, col: 5, offset: 35197},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1287, col: 5, offset: 35197},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1287, col: 10, offset: 35202},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1287, col: 12, offset: 35204},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 1289, col: 1, offset: 35238},
			expr: &choiceExpr{
				pos: position{line: 1290, col: 5, offset: 35257},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1290, col: 5, offset: 35257},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 1291, col: 5, offset: 35278},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 1293, col: 1, offset: 35293},
			expr: &choiceExpr{
				pos: position{line: 1294, col: 5, offset: 35314},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1294, col: 5, offset: 35314},
						val:        "'",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1295, col: 5, offset: 35322},
						run: (*parser).callonSingleCharEscape3,
						expr: &litMatcher{
							pos:        position{line: 1295, col: 5, offset: 35322},
							val:        "\"",
							ignoreCase: false,
						},
					},
					&litMatcher{
						pos:        position{line: 1296, col: 5, offset: 35362},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1297, col: 5, offset: 35371},
						run: (*parser).callonSingleCharEscape6,
						expr: &litMatcher{
							pos:        position{line: 1297, col: 5, offset: 35371},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1298, col: 5, offset: 35400},
						run: (*parser).callonSingleCharEscape8,
						expr: &litMatcher{
							pos:        position{line: 1298, col: 5, offset: 35400},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1299, col: 5, offset: 35429},
						run: (*parser).callonSingleCharEscape10,
						expr: &litMatcher{
							pos:        position{line: 1299, col: 5, offset: 35429},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1300, col: 5, offset: 35458},
						run: (*parser).callonSingleCharEscape12,
						expr: &litMatcher{
							pos:        position{line: 1300, col: 5, offset: 35458},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1301, col: 5, offset: 35487},
						run: (*parser).callonSingleCharEscape14,
						expr: &litMatcher{
							pos:        position{line: 1301, col: 5, offset: 35487},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1302, col: 5, offset: 35516},
						run: (*parser).callonSingleCharEscape16,
						expr: &litMatcher{
							pos:        position{line: 1302, col: 5, offset: 35516},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 1304, col: 1, offset: 35542},
			expr: &choiceExpr{
				pos: position{line: 1305, col: 5, offset: 35560},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1305, col: 5, offset: 35560},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 1305, col: 5, offset: 35560},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1306, col: 5, offset: 35588},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 1306, col: 5, offset: 35588},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1307, col: 5, offset: 35616},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 1309, col: 1, offset: 35622},
			expr: &choiceExpr{
				pos: position{line: 1310, col: 5, offset: 35640},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1310, col: 5, offset: 35640},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 1310, col: 5, offset: 35640},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1310, col: 5, offset: 35640},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1310, col: 9, offset: 35644},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1310, col: 16, offset: 35651},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1310, col: 16, offset: 35651},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1310, col: 25, offset: 35660},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1310, col: 34, offset: 35669},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1310, col: 43, offset: 35678},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1313, col: 5, offset: 35741},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 1313, col: 5, offset: 35741},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1313, col: 5, offset: 35741},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1313, col: 9, offset: 35745},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1313, col: 13, offset: 35749},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1313, col: 20, offset: 35756},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1313, col: 20, offset: 35756},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 1313, col: 29, offset: 35765},
												expr: &ruleRefExpr{
													pos:  position{line: 1313, col: 29, offset: 35765},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1313, col: 39, offset: 35775},
												expr: &ruleRefExpr{
													pos:  position{line: 1313, col: 39, offset: 35775},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1313, col: 49, offset: 35785},
												expr: &ruleRefExpr{
													pos:  position{line: 1313, col: 49, offset: 35785},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1313, col: 59, offset: 35795},
												expr: &ruleRefExpr{
													pos:  position{line: 1313, col: 59, offset: 35795},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1313, col: 69, offset: 35805},
												expr: &ruleRefExpr{
													pos:  position{line: 1313, col: 69, offset: 35805},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1313, col: 80, offset: 35816},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 1317, col: 1, offset: 35870},
			expr: &actionExpr{
				pos: position{line: 1318, col: 5, offset: 35881},
				run: (*parser).callonRegexp1,
				expr: &seqExpr{
					pos: position{line: 1318, col: 5, offset: 35881},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1318, col: 5, offset: 35881},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1318, col: 9, offset: 35885},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1318, col: 14, offset: 35890},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 1318, col: 25, offset: 35901},
							val:        "/",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1318, col: 29, offset: 35905},
							expr: &ruleRefExpr{
								pos:  position{line: 1318, col: 30, offset: 35906},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 1320, col: 1, offset: 35941},
			expr: &actionExpr{
				pos: position{line: 1321, col: 5, offset: 35956},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1321, col: 5, offset: 35956},
					expr: &choiceExpr{
						pos: position{line: 1321, col: 6, offset: 35957},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 1321, col: 6, offset: 35957},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&seqExpr{
								pos: position{line: 1321, col: 15, offset: 35966},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1321, col: 15, offset: 35966},
										val:        "\\",
										ignoreCase: false,
									},
									&anyMatcher{
										line: 1321, col: 20, offset: 35971,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 1323, col: 1, offset: 36007},
			expr: &charClassMatcher{
				pos:        position{line: 1324, col: 5, offset: 36023},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 1326, col: 1, offset: 36038},
			expr: &oneOrMoreExpr{
				pos: position{line: 1326, col: 6, offset: 36043},
				expr: &ruleRefExpr{
					pos:  position{line: 1326, col: 6, offset: 36043},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1328, col: 1, offset: 36054},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1328, col: 6, offset: 36059},
				expr: &ruleRefExpr{
					pos:  position{line: 1328, col: 6, offset: 36059},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 1330, col: 1, offset: 36070},
			expr: &choiceExpr{
				pos: position{line: 1331, col: 5, offset: 36083},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1331, col: 5, offset: 36083},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 1332, col: 5, offset: 36098},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 1333, col: 5, offset: 36117},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 1335, col: 1, offset: 36126},
			expr: &anyMatcher{
				line: 1336, col: 5, offset: 36146,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 1338, col: 1, offset: 36149},
			expr: &choiceExpr{
				pos: position{line: 1339, col: 5, offset: 36177},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1339, col: 5, offset: 36177},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1340, col: 5, offset: 36186},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1341, col: 5, offset: 36195},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1342, col: 5, offset: 36204},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1343, col: 5, offset: 36212},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1344, col: 5, offset: 36225},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 1346, col: 1, offset: 36235},
			expr: &charClassMatcher{
				pos:        position{line: 1347, col: 5, offset: 36254},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 1353, col: 1, offset: 36584},
			expr: &ruleRefExpr{
				pos:  position{line: 1356, col: 5, offset: 36655},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1358, col: 1, offset: 36674},
			expr: &seqExpr{
				pos: position{line: 1359, col: 5, offset: 36695},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1359, col: 5, offset: 36695},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1359, col: 10, offset: 36700},
						expr: &seqExpr{
							pos: position{line: 1359, col: 11, offset: 36701},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1359, col: 11, offset: 36701},
									expr: &litMatcher{
										pos:        position{line: 1359, col: 12, offset: 36702},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1359, col: 17, offset: 36707},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1359, col: 35, offset: 36725},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1361, col: 1, offset: 36731},
			expr: &seqExpr{
				pos: position{line: 1362, col: 5, offset: 36753},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1362, col: 5, offset: 36753},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1362, col: 10, offset: 36758},
						expr: &seqExpr{
							pos: position{line: 1362, col: 11, offset: 36759},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1362, col: 11, offset: 36759},
									expr: &ruleRefExpr{
										pos:  position{line: 1362, col: 12, offset: 36760},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1362, col: 27, offset: 36775},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1364, col: 1, offset: 36794},
			expr: &seqExpr{
				pos: position{line: 1364, col: 7, offset: 36800},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1364, col: 7, offset: 36800},
						expr: &ruleRefExpr{
							pos:  position{line: 1364, col: 7, offset: 36800},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1364, col: 19, offset: 36812},
						name: "LineTerminator",
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 1366, col: 1, offset: 36828},
			expr: &choiceExpr{
				pos: position{line: 1366, col: 7, offset: 36834},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1366, col: 7, offset: 36834},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 1366, col: 11, offset: 36838},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1368, col: 1, offset: 36843},
			expr: &notExpr{
				pos: position{line: 1368, col: 7, offset: 36849},
				expr: &anyMatcher{
					line: 1368, col: 8, offset: 36850,
				},
			},
		},
	},
}

func (c *current) onstart1(ast interface{}) (interface{}, error) {
	return ast, nil
}

func (p *parser) callonstart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart1(stack["ast"])
}

func (c *current) onSequential2(consts, first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": append([]interface{}{first}, (rest.([]interface{}))...), "consts": consts}, nil

}

func (p *parser) callonSequential2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential2(stack["consts"], stack["first"], stack["rest"])
}

func (c *current) onSequential12(consts, op interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": []interface{}{op}, "consts": consts}, nil

}

func (p *parser) callonSequential12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential12(stack["consts"], stack["op"])
}

func (c *current) onSequentialTail1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonSequentialTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequentialTail1(stack["p"])
}

func (c *current) onConsts4() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonConsts4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConsts4()
}

func (c *current) onConst1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonConst1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConst1(stack["v"])
}

func (c *current) onConstDef2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"name": id, "expr": expr}, nil

}

func (p *parser) callonConstDef2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDef2(stack["id"], stack["expr"])
}

func (c *current) onConstDef13(id, typ interface{}) (interface{}, error) {
	return map[string]interface{}{

		"name": id,

		"expr": map[string]interface{}{"kind": "TypeValue", "value": map[string]interface{}{"kind": "TypeDef", "name": id, "type": typ}}}, nil

}

func (p *parser) callonConstDef13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDef13(stack["id"], stack["typ"])
}

func (c *current) onOperation2(procArray interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Parallel", "procs": procArray}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["procArray"])
}

func (c *current) onOperation12(expr, cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": expr, "cases": cases}, nil

}

func (p *parser) callonOperation12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation12(stack["expr"], stack["cases"])
}

func (c *current) onOperation25(cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": nil, "cases": cases}, nil

}

func (p *parser) callonOperation25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation25(stack["cases"])
}

func (c *current) onOperation35(trunks interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": trunks}, nil

}

func (p *parser) callonOperation35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation35(stack["trunks"])
}

func (c *current) onOperation47(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation47(stack["a"])
}

func (c *current) onOperation53(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation53(stack["a"])
}

func (c *current) onOperation63(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Where", "expr": expr}, nil

}

func (p *parser) callonOperation63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation63(stack["expr"])
}

func (c *current) onOperation69(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation69(stack["expr"])
}

func (c *current) onOperation72(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation72(stack["expr"])
}

func (c *current) onLeg1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLeg1(stack["s"])
}

func (c *current) onSwitchLeg1(expr, proc interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": expr, "proc": proc}, nil

}

func (p *parser) callonSwitchLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchLeg1(stack["expr"], stack["proc"])
}

func (c *current) onCase2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonCase2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase2(stack["expr"])
}

func (c *current) onCase8() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonCase8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase8()
}

func (c *current) onFromLeg2(source, seq interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Trunk", "source": source, "seq": seq}, nil

}

func (p *parser) callonFromLeg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromLeg2(stack["source"], stack["seq"])
}

func (c *current) onFromLeg10(source interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Trunk", "source": source, "seq": nil}, nil

}

func (p *parser) callonFromLeg10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromLeg10(stack["source"])
}

func (c *current) onFromHead1(src interface{}) (interface{}, error) {
	return src, nil
}

func (p *parser) callonFromHead1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromHead1(stack["src"])
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor13(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor13(stack["expr"])
}

func (c *current) onSearchExpr2(search interface{}) (interface{}, error) {
	return search, nil
}

func (p *parser) callonSearchExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr2(stack["search"])
}

func (c *current) onSearchExpr5(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Search", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonSearchExpr5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr5(stack["v"])
}

func (c *current) onSearchExpr11() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil

}

func (p *parser) callonSearchExpr11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr11()
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onPatternSearch1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RegexpSearch", "pattern": pattern}, nil

}

func (p *parser) callonPatternSearch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternSearch1(stack["pattern"])
}

func (c *current) onPatternMatch1(f, pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RegexpMatch", "pattern": pattern, "expr": f}, nil

}

func (p *parser) callonPatternMatch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternMatch1(stack["f"], stack["pattern"])
}

func (c *current) onAggregation2(keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Summarize", "keys": keys, "aggs": nil, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["keys"], stack["limit"])
}

func (c *current) onAggregation10(aggs, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"kind": "Summarize", "keys": nil, "aggs": aggs, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation10(stack["aggs"], stack["keys"], stack["limit"])
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAggAssignment2(lval, agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lval, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment2(stack["lval"], stack["agg"])
}

func (c *current) onAggAssignment11(agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment11(stack["agg"])
}

func (c *current) onAgg1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"kind": "Agg", "name": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonAgg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAgg1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onAggAssignments1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonAggAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSortProc8(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc8(stack["l"])
}

func (c *current) onSortProc1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var proc = map[string]interface{}{"kind": "Sort", "args": list, "order": "asc", "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		proc["order"] = "desc"
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			proc["nullsfirst"] = true
		}
	}
	return proc, nil

}

func (p *parser) callonSortProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopProc6(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopProc6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc6(stack["n"])
}

func (c *current) onTopProc18(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopProc18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc18(stack["f"])
}

func (c *current) onTopProc1(limit, flush, fields interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Top", "limit": 0, "args": nil, "flush": false}
	if limit != nil {
		proc["limit"] = limit
	}
	if fields != nil {
		proc["args"] = fields
	}
	if flush != nil {
		proc["flush"] = true
	}
	return proc, nil

}

func (p *parser) callonTopProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cut", "args": args}, nil

}

func (p *parser) callonCutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutProc1(stack["args"])
}

func (c *current) onDropProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Drop", "args": args}, nil

}

func (p *parser) callonDropProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropProc1(stack["args"])
}

func (c *current) onHeadProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": count}, nil
}

func (p *parser) callonHeadProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc2(stack["count"])
}

func (c *current) onHeadProc8() (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": 1}, nil
}

func (p *parser) callonHeadProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc8()
}

func (c *current) onTailProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": count}, nil
}

func (p *parser) callonTailProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc2(stack["count"])
}

func (c *current) onTailProc8() (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": 1}, nil
}

func (p *parser) callonTailProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc8()
}

func (c *current) onWhereProc1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Where", "expr": expr}, nil

}

func (p *parser) callonWhereProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereProc1(stack["expr"])
}

func (c *current) onUniqProc2() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": true}, nil

}

func (p *parser) callonUniqProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc2()
}

func (c *current) onUniqProc7() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": false}, nil

}

func (p *parser) callonUniqProc7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc7()
}

func (c *current) onPutProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Put", "args": args}, nil

}

func (p *parser) callonPutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutProc1(stack["args"])
}

func (c *current) onRenameProc9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameProc9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc9(stack["cl"])
}

func (c *current) onRenameProc1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Rename", "args": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc1(stack["first"], stack["rest"])
}

func (c *current) onFuseProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Fuse"}, nil

}

func (p *parser) callonFuseProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseProc1()
}

func (c *current) onShapeProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Shape"}, nil

}

func (p *parser) callonShapeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShapeProc1()
}

func (c *current) onJoinProc2(style, leftKey, rightKey, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Join", "style": style, "left_key": leftKey, "right_key": rightKey, "args": nil}
	if columns != nil {
		proc["args"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc2(stack["style"], stack["leftKey"], stack["rightKey"], stack["columns"])
}

func (c *current) onJoinProc22(style, key, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Join", "style": style, "left_key": key, "right_key": key, "args": nil}
	if columns != nil {
		proc["args"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc22(stack["style"], stack["key"], stack["columns"])
}

func (c *current) onJoinStyle2() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle2()
}

func (c *current) onJoinStyle6() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle6()
}

func (c *current) onJoinStyle10() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle10()
}

func (c *current) onJoinStyle14() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonJoinStyle14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle14()
}

func (c *current) onJoinStyle18() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle18()
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onSampleProc1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "consts": []interface{}{}, "procs": []interface{}{

		map[string]interface{}{"kind": "Summarize",

			"keys": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "shape"},

				"rhs": map[string]interface{}{"kind": "Call", "name": "typeof",

					"args": []interface{}{e},

					"where": nil}}},

			"aggs": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "sample"},

				"rhs": map[string]interface{}{"kind": "Agg",

					"name": "any",

					"expr": e,

					"where": nil}}},

			"limit": 0},

		map[string]interface{}{"kind": "Cut",

			"args": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": nil,

				"rhs": map[string]interface{}{"kind": "ID", "name": "sample"}}}}}}, nil

}

func (p *parser) callonSampleProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleProc1(stack["e"])
}

func (c *current) onOpAssignment1(a interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpAssignment", "assignments": a}, nil

}

func (p *parser) callonOpAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpAssignment1(stack["a"])
}

func (c *current) onSampleExpr2(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonSampleExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr2(stack["lval"])
}

func (c *current) onSampleExpr7() (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": "this"}, nil
}

func (p *parser) callonSampleExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr7()
}

func (c *current) onFromProc1(source interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": []interface{}{map[string]interface{}{"kind": "Trunk", "source": source}}}, nil

}

func (p *parser) callonFromProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromProc1(stack["source"])
}

func (c *current) onFile1(path, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "File", "path": path, "format": format, "layout": layout}, nil

}

func (p *parser) callonFile1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile1(stack["path"], stack["format"], stack["layout"])
}

func (c *current) onFrom1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonFrom1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrom1(stack["body"])
}

func (c *current) onPool1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonPool1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPool1(stack["body"])
}

func (c *current) onPoolBody1(spec, at, over, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pool", "spec": spec, "at": at, "range": over, "scan_order": order}, nil

}

func (p *parser) callonPoolBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBody1(stack["spec"], stack["at"], stack["over"], stack["order"])
}

func (c *current) onGet1(url, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "HTTP", "url": url, "format": format, "layout": layout}, nil

}

func (p *parser) callonGet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGet1(stack["url"], stack["format"], stack["layout"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onPath2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonPath2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath2(stack["v"])
}

func (c *current) onPath5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPath5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath5()
}

func (c *current) onPoolAt1(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonPoolAt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolAt1(stack["id"])
}

func (c *current) onKSUID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKSUID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKSUID1()
}

func (c *current) onPoolRange1(lower, upper interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Range", "lower": lower, "upper": upper}, nil

}

func (p *parser) callonPoolRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolRange1(stack["lower"], stack["upper"])
}

func (c *current) onPoolSpec2(pool, commit, meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": pool, "commit": commit, "meta": meta}, nil

}

func (p *parser) callonPoolSpec2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec2(stack["pool"], stack["commit"], stack["meta"])
}

func (c *current) onPoolSpec12(meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": nil, "commit": nil, "meta": meta}, nil

}

func (p *parser) callonPoolSpec12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec12(stack["meta"])
}

func (c *current) onPoolCommit1(commit interface{}) (interface{}, error) {
	return commit, nil
}

func (p *parser) callonPoolCommit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolCommit1(stack["commit"])
}

func (c *current) onPoolMeta1(meta interface{}) (interface{}, error) {
	return meta, nil
}

func (p *parser) callonPoolMeta1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolMeta1(stack["meta"])
}

func (c *current) onPoolIdentifier1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPoolIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolIdentifier1()
}

func (c *current) onLayoutArg1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Layout", "keys": keys, "order": order}, nil

}

func (p *parser) callonLayoutArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLayoutArg1(stack["keys"], stack["order"])
}

func (c *current) onFormatArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonFormatArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArg1(stack["val"])
}

func (c *current) onOrderSuffix2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix2()
}

func (c *current) onOrderSuffix4() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderSuffix4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix4()
}

func (c *current) onOrderSuffix6() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix6()
}

func (c *current) onOrderArg2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg2()
}

func (c *current) onOrderArg8() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderArg8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg8()
}

func (c *current) onPassProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Pass"}, nil

}

func (p *parser) callonPassProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassProc1()
}

func (c *current) onExplodeProc1(args, typ, as interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Explode", "args": args, "as": as, "type": typ}, nil

}

func (p *parser) callonExplodeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplodeProc1(stack["args"], stack["typ"], stack["as"])
}

func (c *current) onMergeProc1(field interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Merge", "field": field}, nil

}

func (p *parser) callonMergeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMergeProc1(stack["field"])
}

func (c *current) onOverProc2(over interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Let", "locals": nil, "over": over}, nil

}

func (p *parser) callonOverProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverProc2(stack["over"])
}

func (c *current) onOverProc5(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Over", "exprs": exprs, "scope": nil, "as": ""}, nil

}

func (p *parser) callonOverProc5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverProc5(stack["exprs"])
}

func (c *current) onScopedOver1(exprs, as, scope interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Over", "exprs": exprs, "scope": scope, "as": as}, nil

}

func (p *parser) callonScopedOver1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScopedOver1(stack["exprs"], stack["as"], stack["scope"])
}

func (c *current) onOverWith1(exprs, locals, scope interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Let", "locals": locals, "over": map[string]interface{}{"kind": "Over", "exprs": exprs, "scope": scope, "as": ""}}, nil

}

func (p *parser) callonOverWith1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverWith1(stack["exprs"], stack["locals"], stack["scope"])
}

func (c *current) onAs2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonAs2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAs2(stack["id"])
}

func (c *current) onAs9() (interface{}, error) {
	return "", nil
}

func (p *parser) callonAs9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAs9()
}

func (c *current) onLetProc2(locals, over interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Let", "locals": locals, "over": over}, nil

}

func (p *parser) callonLetProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetProc2(stack["locals"], stack["over"])
}

func (c *current) onScope1(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonScope1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope1(stack["seq"])
}

func (c *current) onLetAssignments7(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonLetAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetAssignments7(stack["a"])
}

func (c *current) onLetAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLetAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetAssignments1(stack["first"], stack["rest"])
}

func (c *current) onLetAssignment2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"name": id, "expr": expr}, nil

}

func (p *parser) callonLetAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetAssignment2(stack["id"], stack["expr"])
}

func (c *current) onLetAssignment11(id interface{}) (interface{}, error) {
	return map[string]interface{}{"name": id, "expr": map[string]interface{}{"kind": "ID", "name": id}}, nil

}

func (p *parser) callonLetAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetAssignment11(stack["id"])
}

func (c *current) onYieldProc1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Yield", "exprs": exprs}, nil

}

func (p *parser) callonYieldProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYieldProc1(stack["exprs"])
}

func (c *current) onTypeArg1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeArg1(stack["typ"])
}

func (c *current) onAsArg1(lhs interface{}) (interface{}, error) {
	return lhs, nil
}

func (p *parser) callonAsArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsArg1(stack["lhs"])
}

func (c *current) onLvals7(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonLvals7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals7(stack["lval"])
}

func (c *current) onLvals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLvals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals1(stack["first"], stack["rest"])
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignments7(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments7(stack["a"])
}

func (c *current) onAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr2(condition, thenClause, elseClause interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Conditional", "cond": condition, "then": thenClause, "else": elseClause}, nil

}

func (p *parser) callonConditionalExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr2(stack["condition"], stack["thenClause"], stack["elseClause"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onEqualityCompareExpr9(comp, expr interface{}) (interface{}, error) {
	return []interface{}{comp, expr}, nil
}

func (p *parser) callonEqualityCompareExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr9(stack["comp"], stack["expr"])
}

func (c *current) onEqualityCompareExpr3(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonEqualityCompareExpr3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr3(stack["first"], stack["rest"])
}

func (c *current) onEqualityOperator2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonEqualityOperator2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator2()
}

func (c *current) onEqualityOperator4() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityOperator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator4()
}

func (c *current) onEqualityComparator3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityComparator3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityComparator3()
}

func (c *current) onRelativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonRelativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onRelativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonRelativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onRelativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeOperator1()
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onFuncExpr3(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr3(stack["first"], stack["rest"])
}

func (c *current) onFuncExpr10(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr10(stack["first"], stack["rest"])
}

func (c *current) onMatchExpr1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonMatchExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchExpr1(stack["expr"])
}

func (c *current) onCast1(typ, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": expr, "type": typ}, nil

}

func (p *parser) callonCast1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCast1(stack["typ"], stack["expr"])
}

func (c *current) onFunction1(fn, args, where interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": fn, "args": args, "where": where}, nil

}

func (p *parser) callonFunction1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction1(stack["fn"], stack["args"], stack["where"])
}

func (c *current) onOptionalExprs3() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonOptionalExprs3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalExprs3()
}

func (c *current) onExprs7(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonExprs7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs7(stack["e"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr1(stack["first"], stack["rest"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref13(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": nil, "rhs": to}}, nil

}

func (p *parser) callonDeref13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref13(stack["to"])
}

func (c *current) onDeref22(from interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": nil}}, nil

}

func (p *parser) callonDeref22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref22(stack["from"])
}

func (c *current) onDeref31(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref31(stack["expr"])
}

func (c *current) onDeref37(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref37(stack["id"])
}

func (c *current) onPrimary7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary7(stack["expr"])
}

func (c *current) onRecord1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RecordExpr", "elems": elems}, nil

}

func (p *parser) callonRecord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecord1(stack["elems"])
}

func (c *current) onRecordElems2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonRecordElems2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems2(stack["first"], stack["rest"])
}

func (c *current) onRecordElems9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonRecordElems9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems9()
}

func (c *current) onRecordElemTail1(elem interface{}) (interface{}, error) {
	return elem, nil
}

func (p *parser) callonRecordElemTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElemTail1(stack["elem"])
}

func (c *current) onSpread1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Spread", "expr": expr}, nil

}

func (p *parser) callonSpread1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpread1(stack["expr"])
}

func (c *current) onField1(name, value interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Field", "name": name, "value": value}, nil

}

func (p *parser) callonField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField1(stack["name"], stack["value"])
}

func (c *current) onArray1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ArrayExpr", "exprs": exprs}, nil

}

func (p *parser) callonArray1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArray1(stack["exprs"])
}

func (c *current) onSet1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SetExpr", "exprs": exprs}, nil

}

func (p *parser) callonSet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSet1(stack["exprs"])
}

func (c *current) onMap1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "MapExpr", "entries": exprs}, nil

}

func (p *parser) callonMap1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMap1(stack["exprs"])
}

func (c *current) onEntries2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonEntries2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries2(stack["first"], stack["rest"])
}

func (c *current) onEntries9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonEntries9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries9()
}

func (c *current) onEntryTail1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonEntryTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntryTail1(stack["e"])
}

func (c *current) onEntry1(key, value interface{}) (interface{}, error) {
	return map[string]interface{}{"key": key, "value": value}, nil

}

func (p *parser) callonEntry1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntry1(stack["key"], stack["value"])
}

func (c *current) onSQLProc1(selection, from, joins, where, groupby, having, orderby, limit interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "SQLExpr",

		"select": selection,

		"from": from,

		"joins": joins,

		"where": where,

		"group_by": groupby,

		"having": having,

		"order_by": orderby,

		"limit": limit}, nil

}

func (p *parser) callonSQLProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLProc1(stack["selection"], stack["from"], stack["joins"], stack["where"], stack["groupby"], stack["having"], stack["orderby"], stack["limit"])
}

func (c *current) onSQLSelect2() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLSelect2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect2()
}

func (c *current) onSQLSelect7(assignments interface{}) (interface{}, error) {
	return assignments, nil
}

func (p *parser) callonSQLSelect7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect7(stack["assignments"])
}

func (c *current) onSQLAssignment2(rhs, lhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonSQLAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment2(stack["rhs"], stack["lhs"])
}

func (c *current) onSQLAssignment11(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonSQLAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment11(stack["expr"])
}

func (c *current) onSQLAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments7(stack["expr"])
}

func (c *current) onSQLAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSQLFrom2(table, alias interface{}) (interface{}, error) {
	return map[string]interface{}{"table": table, "alias": alias}, nil

}

func (p *parser) callonSQLFrom2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom2(stack["table"], stack["alias"])
}

func (c *current) onSQLFrom12() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLFrom12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom12()
}

func (c *current) onSQLAlias2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias2(stack["id"])
}

func (c *current) onSQLAlias9(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias9(stack["id"])
}

func (c *current) onSQLJoins7(join interface{}) (interface{}, error) {
	return join, nil
}

func (p *parser) callonSQLJoins7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins7(stack["join"])
}

func (c *current) onSQLJoins1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLJoins1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins1(stack["first"], stack["rest"])
}

func (c *current) onSQLJoin1(style, table, alias, leftKey, rightKey interface{}) (interface{}, error) {
	return map[string]interface{}{

		"table": table,

		"style": style,

		"left_key": leftKey,

		"right_key": rightKey,

		"alias": alias}, nil

}

func (p *parser) callonSQLJoin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoin1(stack["style"], stack["table"], stack["alias"], stack["leftKey"], stack["rightKey"])
}

func (c *current) onSQLJoinStyle2(style interface{}) (interface{}, error) {
	return style, nil
}

func (p *parser) callonSQLJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle2(stack["style"])
}

func (c *current) onSQLJoinStyle11() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonSQLJoinStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle11()
}

func (c *current) onSQLWhere1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLWhere1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLWhere1(stack["expr"])
}

func (c *current) onSQLGroupBy1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonSQLGroupBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLGroupBy1(stack["columns"])
}

func (c *current) onSQLHaving1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLHaving1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLHaving1(stack["expr"])
}

func (c *current) onSQLOrderBy1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SQLOrderBy", "keys": keys, "order": order}, nil

}

func (p *parser) callonSQLOrderBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrderBy1(stack["keys"], stack["order"])
}

func (c *current) onSQLOrder2(dir interface{}) (interface{}, error) {
	return dir, nil
}

func (p *parser) callonSQLOrder2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder2(stack["dir"])
}

func (c *current) onSQLOrder9() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonSQLOrder9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder9()
}

func (c *current) onSQLLimit2(count interface{}) (interface{}, error) {
	return count, nil
}

func (p *parser) callonSQLLimit2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit2(stack["count"])
}

func (c *current) onSQLLimit9() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonSQLLimit9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit9()
}

func (c *current) onSELECT1() (interface{}, error) {
	return "select", nil
}

func (p *parser) callonSELECT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSELECT1()
}

func (c *current) onAS1() (interface{}, error) {
	return "as", nil
}

func (p *parser) callonAS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAS1()
}

func (c *current) onFROM1() (interface{}, error) {
	return "from", nil
}

func (p *parser) callonFROM1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFROM1()
}

func (c *current) onJOIN1() (interface{}, error) {
	return "join", nil
}

func (p *parser) callonJOIN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJOIN1()
}

func (c *current) onWHERE1() (interface{}, error) {
	return "where", nil
}

func (p *parser) callonWHERE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWHERE1()
}

func (c *current) onGROUP1() (interface{}, error) {
	return "group", nil
}

func (p *parser) callonGROUP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGROUP1()
}

func (c *current) onBY1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonBY1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBY1()
}

func (c *current) onHAVING1() (interface{}, error) {
	return "having", nil
}

func (p *parser) callonHAVING1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHAVING1()
}

func (c *current) onORDER1() (interface{}, error) {
	return "order", nil
}

func (p *parser) callonORDER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onORDER1()
}

func (c *current) onON1() (interface{}, error) {
	return "on", nil
}

func (p *parser) callonON1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onON1()
}

func (c *current) onLIMIT1() (interface{}, error) {
	return "limit", nil
}

func (p *parser) callonLIMIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIMIT1()
}

func (c *current) onASC1() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonASC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onASC1()
}

func (c *current) onDESC1() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonDESC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDESC1()
}

func (c *current) onANTI1() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonANTI1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onANTI1()
}

func (c *current) onLEFT1() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonLEFT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLEFT1()
}

func (c *current) onRIGHT1() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonRIGHT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRIGHT1()
}

func (c *current) onINNER1() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonINNER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINNER1()
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "float64", "text": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "int64", "text": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "null", "text": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onBytesLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bytes", "text": string(c.text)}, nil

}

func (p *parser) callonBytesLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBytesLiteral1()
}

func (c *current) onTypeLiteral1(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonTypeLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeLiteral1(stack["typ"])
}

func (c *current) onAmbiguousType2(name interface{}) (interface{}, error) {
	return name, nil
}

func (p *parser) callonAmbiguousType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType2(stack["name"])
}

func (c *current) onAmbiguousType8(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeDef", "name": name, "type": typ}, nil

}

func (p *parser) callonAmbiguousType8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType8(stack["name"], stack["typ"])
}

func (c *current) onAmbiguousType17(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType17(stack["name"])
}

func (c *current) onAmbiguousType20(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonAmbiguousType20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType20(stack["u"])
}

func (c *current) onTypeUnion1(types interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeUnion", "types": types}, nil

}

func (p *parser) callonTypeUnion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeUnion1(stack["types"])
}

func (c *current) onTypeList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeList1(stack["first"], stack["rest"])
}

func (c *current) onTypeListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeListTail1(stack["typ"])
}

func (c *current) onComplexType2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType2(stack["fields"])
}

func (c *current) onComplexType10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexType10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType10(stack["typ"])
}

func (c *current) onComplexType18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexType18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType18(stack["typ"])
}

func (c *current) onComplexType26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexType26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType26(stack["keyType"], stack["valType"])
}

func (c *current) onTemplateLiteral1(v interface{}) (interface{}, error) {
	if len(v.([]interface{})) == 0 {
		return map[string]interface{}{"kind": "Primitive", "type": "string", "text": ""}, nil
	}
	return makeTemplateExprChain(v), nil

}

func (p *parser) callonTemplateLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteral1(stack["v"])
}

func (c *current) onTemplateLiteralParts2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts2(stack["v"])
}

func (c *current) onTemplateLiteralParts9(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts9(stack["v"])
}

func (c *current) onTemplateDoubleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateDoubleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedPart3(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar2(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar7(stack["v"])
}

func (c *current) onTemplateSingleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateSingleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedPart3(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar2(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar7(stack["v"])
}

func (c *current) onTemplateExpr1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonTemplateExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateExpr1(stack["e"])
}

func (c *current) onPrimitiveType1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveType1()
}

func (c *current) onTypeFieldList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList1(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTail1(stack["typ"])
}

func (c *current) onTypeField1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeField1(stack["name"], stack["typ"])
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return "in", nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onIdentifierName19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName19()
}

func (c *current) onIdentifierName21(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName21(stack["id"])
}

func (c *current) onTime1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "time", "text": string(c.text)}, nil

}

func (p *parser) callonTime1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTime1()
}

func (c *current) onDuration1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "duration", "text": string(c.text)}, nil

}

func (p *parser) callonDuration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDuration1()
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordChars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordChars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordChars1()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onGlob1(head, tail interface{}) (interface{}, error) {
	return reglob.Reglob(head.(string) + joinChars(tail)), nil

}

func (p *parser) callonGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlob1(stack["head"], stack["tail"])
}

func (c *current) onGlobStart4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonGlobStart4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobStart4()
}

func (c *current) onGlobEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonGlobEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEsc1(stack["s"])
}

func (c *current) onGlobEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonGlobEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape2()
}

func (c *current) onGlobEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonGlobEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape4()
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onSingleCharEscape3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleCharEscape3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape3()
}

func (c *current) onSingleCharEscape6() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape6()
}

func (c *current) onSingleCharEscape8() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape8()
}

func (c *current) onSingleCharEscape10() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape10()
}

func (c *current) onSingleCharEscape12() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape12()
}

func (c *current) onSingleCharEscape14() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape14()
}

func (c *current) onSingleCharEscape16() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape16()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexp1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
