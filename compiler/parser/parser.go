// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 4, col: 1, offset: 23},
			expr: &choiceExpr{
				pos: position{line: 5, col: 5, offset: 33},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 5, col: 5, offset: 33},
						run: (*parser).callonstart2,
						expr: &seqExpr{
							pos: position{line: 5, col: 5, offset: 33},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 5, col: 5, offset: 33},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 5, col: 8, offset: 36},
									label: "scope",
									expr: &ruleRefExpr{
										pos:  position{line: 5, col: 14, offset: 42},
										name: "Scope",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 5, col: 20, offset: 48},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 5, col: 23, offset: 51},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 6, col: 5, offset: 96},
						run: (*parser).callonstart9,
						expr: &seqExpr{
							pos: position{line: 6, col: 5, offset: 96},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 6, col: 5, offset: 96},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 6, col: 8, offset: 99},
									label: "seq",
									expr: &ruleRefExpr{
										pos:  position{line: 6, col: 12, offset: 103},
										name: "Seq",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 6, col: 16, offset: 107},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 6, col: 19, offset: 110},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Scope",
			pos:  position{line: 7, col: 1, offset: 134},
			expr: &actionExpr{
				pos: position{line: 8, col: 5, offset: 144},
				run: (*parser).callonScope1,
				expr: &seqExpr{
					pos: position{line: 8, col: 5, offset: 144},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 8, col: 5, offset: 144},
							label: "decls",
							expr: &oneOrMoreExpr{
								pos: position{line: 8, col: 11, offset: 150},
								expr: &ruleRefExpr{
									pos:  position{line: 8, col: 11, offset: 150},
									name: "Decl",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 8, col: 17, offset: 156},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 8, col: 22, offset: 161},
								name: "Seq",
							},
						},
					},
				},
			},
		},
		{
			name: "Seq",
			pos:  position{line: 11, col: 1, offset: 261},
			expr: &actionExpr{
				pos: position{line: 12, col: 5, offset: 269},
				run: (*parser).callonSeq1,
				expr: &seqExpr{
					pos: position{line: 12, col: 5, offset: 269},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 12, col: 5, offset: 269},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 12, col: 11, offset: 275},
								name: "Operation",
							},
						},
						&labeledExpr{
							pos:   position{line: 12, col: 21, offset: 285},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 12, col: 26, offset: 290},
								expr: &ruleRefExpr{
									pos:  position{line: 12, col: 26, offset: 290},
									name: "SeqTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SeqTail",
			pos:  position{line: 15, col: 1, offset: 381},
			expr: &actionExpr{
				pos: position{line: 15, col: 11, offset: 391},
				run: (*parser).callonSeqTail1,
				expr: &seqExpr{
					pos: position{line: 15, col: 11, offset: 391},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 15, col: 11, offset: 391},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 15, col: 14, offset: 394},
							name: "Pipe",
						},
						&ruleRefExpr{
							pos:  position{line: 15, col: 19, offset: 399},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 15, col: 22, offset: 402},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 15, col: 24, offset: 404},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Decl",
			pos:  position{line: 16, col: 1, offset: 432},
			expr: &actionExpr{
				pos: position{line: 17, col: 5, offset: 441},
				run: (*parser).callonDecl1,
				expr: &seqExpr{
					pos: position{line: 17, col: 5, offset: 441},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 5, offset: 441},
							label: "v",
							expr: &choiceExpr{
								pos: position{line: 17, col: 8, offset: 444},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 17, col: 8, offset: 444},
										name: "ConstDecl",
									},
									&ruleRefExpr{
										pos:  position{line: 17, col: 20, offset: 456},
										name: "FuncDecl",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 30, offset: 466},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "ConstDecl",
			pos:  position{line: 18, col: 1, offset: 486},
			expr: &choiceExpr{
				pos: position{line: 19, col: 5, offset: 500},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 19, col: 5, offset: 500},
						run: (*parser).callonConstDecl2,
						expr: &seqExpr{
							pos: position{line: 19, col: 5, offset: 500},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 19, col: 5, offset: 500},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 19, col: 13, offset: 508},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 19, col: 15, offset: 510},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 19, col: 18, offset: 513},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 19, col: 33, offset: 528},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 19, col: 36, offset: 531},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 19, col: 40, offset: 535},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 19, col: 43, offset: 538},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 19, col: 48, offset: 543},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 22, col: 5, offset: 648},
						run: (*parser).callonConstDecl13,
						expr: &seqExpr{
							pos: position{line: 22, col: 5, offset: 648},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 22, col: 5, offset: 648},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 22, col: 12, offset: 655},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 22, col: 14, offset: 657},
									label: "id",
									expr: &choiceExpr{
										pos: position{line: 22, col: 18, offset: 661},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 22, col: 18, offset: 661},
												name: "IdentifierName",
											},
											&ruleRefExpr{
												pos:  position{line: 22, col: 35, offset: 678},
												name: "QuotedString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 22, col: 49, offset: 692},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 22, col: 52, offset: 695},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 22, col: 56, offset: 699},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 22, col: 59, offset: 702},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 22, col: 63, offset: 706},
										name: "Type",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuncDecl",
			pos:  position{line: 25, col: 1, offset: 923},
			expr: &actionExpr{
				pos: position{line: 26, col: 5, offset: 936},
				run: (*parser).callonFuncDecl1,
				expr: &seqExpr{
					pos: position{line: 26, col: 5, offset: 936},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 26, col: 5, offset: 936},
							val:        "func",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 26, col: 12, offset: 943},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 26, col: 14, offset: 945},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 26, col: 17, offset: 948},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 26, col: 32, offset: 963},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 26, col: 35, offset: 966},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 26, col: 39, offset: 970},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 26, col: 42, offset: 973},
							label: "params",
							expr: &ruleRefExpr{
								pos:  position{line: 26, col: 49, offset: 980},
								name: "IdentifierNames",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 26, col: 65, offset: 996},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 26, col: 68, offset: 999},
							val:        ")",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 26, col: 72, offset: 1003},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 26, col: 75, offset: 1006},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 26, col: 79, offset: 1010},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 26, col: 82, offset: 1013},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 26, col: 86, offset: 1017},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 26, col: 89, offset: 1020},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 26, col: 94, offset: 1025},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 26, col: 99, offset: 1030},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 26, col: 102, offset: 1033},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Operation",
			pos:  position{line: 29, col: 1, offset: 1150},
			expr: &choiceExpr{
				pos: position{line: 30, col: 5, offset: 1164},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 30, col: 5, offset: 1164},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 30, col: 5, offset: 1164},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 30, col: 5, offset: 1164},
									val:        "fork",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 12, offset: 1171},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 30, col: 15, offset: 1174},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 30, col: 19, offset: 1178},
									label: "paths",
									expr: &oneOrMoreExpr{
										pos: position{line: 30, col: 25, offset: 1184},
										expr: &ruleRefExpr{
											pos:  position{line: 30, col: 25, offset: 1184},
											name: "Leg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 30, offset: 1189},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 30, col: 33, offset: 1192},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 33, col: 5, offset: 1285},
						run: (*parser).callonOperation12,
						expr: &seqExpr{
							pos: position{line: 33, col: 5, offset: 1285},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 33, col: 5, offset: 1285},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 33, col: 14, offset: 1294},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 33, col: 16, offset: 1296},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 33, col: 21, offset: 1301},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 33, col: 26, offset: 1306},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 33, col: 28, offset: 1308},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 33, col: 32, offset: 1312},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 33, col: 38, offset: 1318},
										expr: &ruleRefExpr{
											pos:  position{line: 33, col: 38, offset: 1318},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 33, col: 49, offset: 1329},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 33, col: 52, offset: 1332},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 36, col: 5, offset: 1437},
						run: (*parser).callonOperation25,
						expr: &seqExpr{
							pos: position{line: 36, col: 5, offset: 1437},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 36, col: 5, offset: 1437},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 36, col: 14, offset: 1446},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 36, col: 17, offset: 1449},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 36, col: 21, offset: 1453},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 36, col: 27, offset: 1459},
										expr: &ruleRefExpr{
											pos:  position{line: 36, col: 27, offset: 1459},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 36, col: 38, offset: 1470},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 36, col: 41, offset: 1473},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 39, col: 5, offset: 1577},
						run: (*parser).callonOperation35,
						expr: &seqExpr{
							pos: position{line: 39, col: 5, offset: 1577},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 39, col: 5, offset: 1577},
									val:        "from",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 39, col: 12, offset: 1584},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 39, col: 15, offset: 1587},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 39, col: 19, offset: 1591},
									label: "trunks",
									expr: &oneOrMoreExpr{
										pos: position{line: 39, col: 26, offset: 1598},
										expr: &ruleRefExpr{
											pos:  position{line: 39, col: 26, offset: 1598},
											name: "FromLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 39, col: 35, offset: 1607},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 39, col: 38, offset: 1610},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 42, col: 5, offset: 1701},
						run: (*parser).callonOperation45,
						expr: &seqExpr{
							pos: position{line: 42, col: 5, offset: 1701},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 42, col: 5, offset: 1701},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 42, col: 9, offset: 1705},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 42, col: 12, offset: 1708},
									label: "scope",
									expr: &ruleRefExpr{
										pos:  position{line: 42, col: 18, offset: 1714},
										name: "Scope",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 42, col: 24, offset: 1720},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 42, col: 27, offset: 1723},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&labeledExpr{
						pos:   position{line: 43, col: 5, offset: 1753},
						label: "op",
						expr: &ruleRefExpr{
							pos:  position{line: 43, col: 8, offset: 1756},
							name: "Operator",
						},
					},
					&actionExpr{
						pos: position{line: 44, col: 5, offset: 1769},
						run: (*parser).callonOperation55,
						expr: &seqExpr{
							pos: position{line: 44, col: 5, offset: 1769},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 44, col: 5, offset: 1769},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 44, col: 7, offset: 1771},
										name: "OpAssignment",
									},
								},
								&andExpr{
									pos: position{line: 44, col: 20, offset: 1784},
									expr: &ruleRefExpr{
										pos:  position{line: 44, col: 21, offset: 1785},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 45, col: 5, offset: 1815},
						run: (*parser).callonOperation61,
						expr: &seqExpr{
							pos: position{line: 45, col: 5, offset: 1815},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 45, col: 5, offset: 1815},
									expr: &seqExpr{
										pos: position{line: 45, col: 7, offset: 1817},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 45, col: 7, offset: 1817},
												name: "Function",
											},
											&ruleRefExpr{
												pos:  position{line: 45, col: 16, offset: 1826},
												name: "EndOfOp",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 45, col: 25, offset: 1835},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 45, col: 27, offset: 1837},
										name: "Aggregation",
									},
								},
								&andExpr{
									pos: position{line: 45, col: 39, offset: 1849},
									expr: &ruleRefExpr{
										pos:  position{line: 45, col: 40, offset: 1850},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 46, col: 5, offset: 1880},
						run: (*parser).callonOperation71,
						expr: &seqExpr{
							pos: position{line: 46, col: 5, offset: 1880},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 46, col: 5, offset: 1880},
									val:        "search",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 46, col: 14, offset: 1889},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 46, col: 16, offset: 1891},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 46, col: 21, offset: 1896},
										name: "SearchBoolean",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 49, col: 5, offset: 1995},
						run: (*parser).callonOperation77,
						expr: &labeledExpr{
							pos:   position{line: 49, col: 5, offset: 1995},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 49, col: 10, offset: 2000},
								name: "SearchBoolean",
							},
						},
					},
					&actionExpr{
						pos: position{line: 52, col: 5, offset: 2099},
						run: (*parser).callonOperation80,
						expr: &labeledExpr{
							pos:   position{line: 52, col: 5, offset: 2099},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 52, col: 10, offset: 2104},
								name: "Cast",
							},
						},
					},
					&actionExpr{
						pos: position{line: 55, col: 5, offset: 2192},
						run: (*parser).callonOperation83,
						expr: &labeledExpr{
							pos:   position{line: 55, col: 5, offset: 2192},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 55, col: 10, offset: 2197},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "EndOfOp",
			pos:  position{line: 58, col: 1, offset: 2283},
			expr: &seqExpr{
				pos: position{line: 58, col: 11, offset: 2293},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 58, col: 11, offset: 2293},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 58, col: 15, offset: 2297},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 58, col: 15, offset: 2297},
								name: "Pipe",
							},
							&ruleRefExpr{
								pos:  position{line: 58, col: 22, offset: 2304},
								name: "SearchKeywordGuard",
							},
							&litMatcher{
								pos:        position{line: 58, col: 43, offset: 2325},
								val:        "=>",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 58, col: 50, offset: 2332},
								val:        ")",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 58, col: 56, offset: 2338},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "Pipe",
			pos:  position{line: 59, col: 1, offset: 2343},
			expr: &seqExpr{
				pos: position{line: 59, col: 8, offset: 2350},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 59, col: 8, offset: 2350},
						val:        "|",
						ignoreCase: false,
					},
					&notExpr{
						pos: position{line: 59, col: 12, offset: 2354},
						expr: &choiceExpr{
							pos: position{line: 59, col: 14, offset: 2356},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 59, col: 14, offset: 2356},
									val:        "{",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 59, col: 20, offset: 2362},
									val:        "[",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Leg",
			pos:  position{line: 60, col: 1, offset: 2367},
			expr: &actionExpr{
				pos: position{line: 60, col: 7, offset: 2373},
				run: (*parser).callonLeg1,
				expr: &seqExpr{
					pos: position{line: 60, col: 7, offset: 2373},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 60, col: 7, offset: 2373},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 60, col: 10, offset: 2376},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 60, col: 15, offset: 2381},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 60, col: 18, offset: 2384},
							label: "seq",
							expr: &ruleRefExpr{
								pos:  position{line: 60, col: 22, offset: 2388},
								name: "Seq",
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchLeg",
			pos:  position{line: 61, col: 1, offset: 2412},
			expr: &actionExpr{
				pos: position{line: 62, col: 5, offset: 2426},
				run: (*parser).callonSwitchLeg1,
				expr: &seqExpr{
					pos: position{line: 62, col: 5, offset: 2426},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 62, col: 5, offset: 2426},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 62, col: 8, offset: 2429},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 62, col: 13, offset: 2434},
								name: "Case",
							},
						},
						&labeledExpr{
							pos:   position{line: 62, col: 18, offset: 2439},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 62, col: 23, offset: 2444},
								name: "Leg",
							},
						},
					},
				},
			},
		},
		{
			name: "Case",
			pos:  position{line: 65, col: 1, offset: 2525},
			expr: &choiceExpr{
				pos: position{line: 66, col: 5, offset: 2534},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 66, col: 5, offset: 2534},
						run: (*parser).callonCase2,
						expr: &seqExpr{
							pos: position{line: 66, col: 5, offset: 2534},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 66, col: 5, offset: 2534},
									val:        "case",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 66, col: 12, offset: 2541},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 66, col: 14, offset: 2543},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 66, col: 19, offset: 2548},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 67, col: 5, offset: 2578},
						run: (*parser).callonCase8,
						expr: &litMatcher{
							pos:        position{line: 67, col: 5, offset: 2578},
							val:        "default",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromLeg",
			pos:  position{line: 68, col: 1, offset: 2608},
			expr: &actionExpr{
				pos: position{line: 69, col: 5, offset: 2620},
				run: (*parser).callonFromLeg1,
				expr: &seqExpr{
					pos: position{line: 69, col: 5, offset: 2620},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 69, col: 5, offset: 2620},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 69, col: 8, offset: 2623},
							label: "source",
							expr: &ruleRefExpr{
								pos:  position{line: 69, col: 15, offset: 2630},
								name: "FromSource",
							},
						},
						&labeledExpr{
							pos:   position{line: 69, col: 26, offset: 2641},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 69, col: 30, offset: 2645},
								expr: &seqExpr{
									pos: position{line: 69, col: 31, offset: 2646},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 69, col: 31, offset: 2646},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 69, col: 34, offset: 2649},
											val:        "=>",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 69, col: 39, offset: 2654},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 69, col: 42, offset: 2657},
											name: "Seq",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FromSource",
			pos:  position{line: 76, col: 1, offset: 2847},
			expr: &choiceExpr{
				pos: position{line: 77, col: 5, offset: 2862},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 77, col: 5, offset: 2862},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 78, col: 5, offset: 2871},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 79, col: 5, offset: 2879},
						name: "Pool",
					},
					&ruleRefExpr{
						pos:  position{line: 80, col: 5, offset: 2888},
						name: "PassOp",
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 81, col: 1, offset: 2895},
			expr: &seqExpr{
				pos: position{line: 81, col: 13, offset: 2907},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 81, col: 13, offset: 2907},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 81, col: 17, offset: 2911},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 81, col: 18, offset: 2912},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 81, col: 18, offset: 2912},
										expr: &litMatcher{
											pos:        position{line: 81, col: 19, offset: 2913},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 81, col: 24, offset: 2918},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 81, col: 38, offset: 2932},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 81, col: 57, offset: 2951},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 81, col: 82, offset: 2976},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 81, col: 88, offset: 2982},
								val:        "(",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 81, col: 94, offset: 2988},
								val:        "[",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 81, col: 100, offset: 2994},
								val:        "~",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 82, col: 1, offset: 2999},
			expr: &actionExpr{
				pos: position{line: 82, col: 14, offset: 3012},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 82, col: 15, offset: 3013},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 82, col: 15, offset: 3013},
							val:        "==",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 82, col: 22, offset: 3020},
							val:        "!=",
							ignoreCase: false,
						},
						&seqExpr{
							pos: position{line: 82, col: 30, offset: 3028},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 82, col: 30, offset: 3028},
									val:        "in",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 82, col: 35, offset: 3033},
									expr: &ruleRefExpr{
										pos:  position{line: 82, col: 36, offset: 3034},
										name: "IdentifierRest",
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 82, col: 54, offset: 3052},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 82, col: 61, offset: 3059},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 82, col: 67, offset: 3065},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 82, col: 74, offset: 3072},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 83, col: 1, offset: 3108},
			expr: &actionExpr{
				pos: position{line: 84, col: 5, offset: 3126},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 84, col: 5, offset: 3126},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 84, col: 5, offset: 3126},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 84, col: 11, offset: 3132},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 84, col: 21, offset: 3142},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 84, col: 26, offset: 3147},
								expr: &ruleRefExpr{
									pos:  position{line: 84, col: 26, offset: 3147},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 87, col: 1, offset: 3220},
			expr: &actionExpr{
				pos: position{line: 87, col: 16, offset: 3235},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 87, col: 16, offset: 3235},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 87, col: 16, offset: 3235},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 87, col: 18, offset: 3237},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 87, col: 26, offset: 3245},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 87, col: 28, offset: 3247},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 87, col: 30, offset: 3249},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 88, col: 1, offset: 3298},
			expr: &actionExpr{
				pos: position{line: 89, col: 5, offset: 3312},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 89, col: 5, offset: 3312},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 89, col: 5, offset: 3312},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 89, col: 11, offset: 3318},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 90, col: 5, offset: 3335},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 90, col: 10, offset: 3340},
								expr: &actionExpr{
									pos: position{line: 90, col: 11, offset: 3341},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 90, col: 11, offset: 3341},
										exprs: []interface{}{
											&zeroOrOneExpr{
												pos: position{line: 90, col: 11, offset: 3341},
												expr: &seqExpr{
													pos: position{line: 90, col: 12, offset: 3342},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 90, col: 12, offset: 3342},
															name: "_",
														},
														&ruleRefExpr{
															pos:  position{line: 90, col: 14, offset: 3344},
															name: "AndToken",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 90, col: 25, offset: 3355},
												name: "_",
											},
											&notExpr{
												pos: position{line: 90, col: 27, offset: 3357},
												expr: &choiceExpr{
													pos: position{line: 90, col: 29, offset: 3359},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 90, col: 29, offset: 3359},
															name: "OrToken",
														},
														&ruleRefExpr{
															pos:  position{line: 90, col: 39, offset: 3369},
															name: "SearchKeywordGuard",
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 90, col: 59, offset: 3389},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 90, col: 64, offset: 3394},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchKeywordGuard",
			pos:  position{line: 93, col: 1, offset: 3511},
			expr: &choiceExpr{
				pos: position{line: 94, col: 5, offset: 3534},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 94, col: 5, offset: 3534},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 94, col: 5, offset: 3534},
								name: "FromSource",
							},
							&ruleRefExpr{
								pos:  position{line: 94, col: 16, offset: 3545},
								name: "__",
							},
							&litMatcher{
								pos:        position{line: 94, col: 19, offset: 3548},
								val:        "=>",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 94, col: 24, offset: 3553},
								name: "__",
							},
						},
					},
					&seqExpr{
						pos: position{line: 95, col: 5, offset: 3560},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 95, col: 5, offset: 3560},
								name: "Case",
							},
							&ruleRefExpr{
								pos:  position{line: 95, col: 10, offset: 3565},
								name: "__",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 96, col: 1, offset: 3568},
			expr: &choiceExpr{
				pos: position{line: 97, col: 5, offset: 3585},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 97, col: 5, offset: 3585},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 97, col: 5, offset: 3585},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 97, col: 6, offset: 3586},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 97, col: 6, offset: 3586},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 97, col: 6, offset: 3586},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 97, col: 15, offset: 3595},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 97, col: 19, offset: 3599},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 97, col: 19, offset: 3599},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 97, col: 23, offset: 3603},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 97, col: 27, offset: 3607},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 97, col: 29, offset: 3609},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 100, col: 5, offset: 3721},
						run: (*parser).callonSearchFactor13,
						expr: &seqExpr{
							pos: position{line: 100, col: 5, offset: 3721},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 100, col: 5, offset: 3721},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 100, col: 9, offset: 3725},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 100, col: 12, offset: 3728},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 100, col: 17, offset: 3733},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 100, col: 31, offset: 3747},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 100, col: 34, offset: 3750},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 101, col: 5, offset: 3779},
						name: "SearchExpr",
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 102, col: 1, offset: 3790},
			expr: &choiceExpr{
				pos: position{line: 103, col: 5, offset: 3805},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 103, col: 5, offset: 3805},
						name: "Glob",
					},
					&ruleRefExpr{
						pos:  position{line: 104, col: 5, offset: 3814},
						name: "Regexp",
					},
					&actionExpr{
						pos: position{line: 105, col: 5, offset: 3825},
						run: (*parser).callonSearchExpr4,
						expr: &seqExpr{
							pos: position{line: 105, col: 5, offset: 3825},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 105, col: 5, offset: 3825},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 105, col: 7, offset: 3827},
										name: "SearchValue",
									},
								},
								&choiceExpr{
									pos: position{line: 105, col: 20, offset: 3840},
									alternatives: []interface{}{
										&notExpr{
											pos: position{line: 105, col: 20, offset: 3840},
											expr: &ruleRefExpr{
												pos:  position{line: 105, col: 21, offset: 3841},
												name: "ExprGuard",
											},
										},
										&andExpr{
											pos: position{line: 105, col: 33, offset: 3853},
											expr: &seqExpr{
												pos: position{line: 105, col: 35, offset: 3855},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 105, col: 35, offset: 3855},
														name: "_",
													},
													&ruleRefExpr{
														pos:  position{line: 105, col: 37, offset: 3857},
														name: "Glob",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 108, col: 5, offset: 3969},
						run: (*parser).callonSearchExpr15,
						expr: &seqExpr{
							pos: position{line: 108, col: 5, offset: 3969},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 108, col: 5, offset: 3969},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 108, col: 9, offset: 3973},
									expr: &ruleRefExpr{
										pos:  position{line: 108, col: 10, offset: 3974},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 111, col: 5, offset: 4090},
						name: "SearchPredicate",
					},
				},
			},
		},
		{
			name: "SearchPredicate",
			pos:  position{line: 112, col: 1, offset: 4106},
			expr: &choiceExpr{
				pos: position{line: 113, col: 5, offset: 4126},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 113, col: 5, offset: 4126},
						run: (*parser).callonSearchPredicate2,
						expr: &seqExpr{
							pos: position{line: 113, col: 5, offset: 4126},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 113, col: 5, offset: 4126},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 113, col: 9, offset: 4130},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 113, col: 22, offset: 4143},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 113, col: 25, offset: 4146},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 113, col: 28, offset: 4149},
										name: "Comparator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 113, col: 39, offset: 4160},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 113, col: 42, offset: 4163},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 113, col: 46, offset: 4167},
										name: "AdditiveExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 116, col: 6, offset: 4290},
						run: (*parser).callonSearchPredicate12,
						expr: &seqExpr{
							pos: position{line: 116, col: 6, offset: 4290},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 116, col: 6, offset: 4290},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 116, col: 12, offset: 4296},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 116, col: 21, offset: 4305},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 116, col: 26, offset: 4310},
										expr: &ruleRefExpr{
											pos:  position{line: 116, col: 27, offset: 4311},
											name: "Deref",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 119, col: 1, offset: 4382},
			expr: &choiceExpr{
				pos: position{line: 120, col: 5, offset: 4398},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 120, col: 5, offset: 4398},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 121, col: 5, offset: 4410},
						run: (*parser).callonSearchValue3,
						expr: &seqExpr{
							pos: position{line: 121, col: 5, offset: 4410},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 121, col: 5, offset: 4410},
									expr: &ruleRefExpr{
										pos:  position{line: 121, col: 6, offset: 4411},
										name: "RegexpPattern",
									},
								},
								&labeledExpr{
									pos:   position{line: 121, col: 20, offset: 4425},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 121, col: 22, offset: 4427},
										name: "KeyWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Glob",
			pos:  position{line: 124, col: 1, offset: 4534},
			expr: &actionExpr{
				pos: position{line: 125, col: 5, offset: 4543},
				run: (*parser).callonGlob1,
				expr: &labeledExpr{
					pos:   position{line: 125, col: 5, offset: 4543},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 125, col: 13, offset: 4551},
						name: "GlobPattern",
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 128, col: 1, offset: 4646},
			expr: &actionExpr{
				pos: position{line: 129, col: 5, offset: 4657},
				run: (*parser).callonRegexp1,
				expr: &labeledExpr{
					pos:   position{line: 129, col: 5, offset: 4657},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 129, col: 13, offset: 4665},
						name: "RegexpPattern",
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 132, col: 1, offset: 4764},
			expr: &choiceExpr{
				pos: position{line: 133, col: 5, offset: 4780},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 133, col: 5, offset: 4780},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 133, col: 5, offset: 4780},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 133, col: 5, offset: 4780},
									expr: &ruleRefExpr{
										pos:  position{line: 133, col: 5, offset: 4780},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 133, col: 16, offset: 4791},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 133, col: 21, offset: 4796},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 133, col: 33, offset: 4808},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 133, col: 39, offset: 4814},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 136, col: 5, offset: 4940},
						run: (*parser).callonAggregation10,
						expr: &seqExpr{
							pos: position{line: 136, col: 5, offset: 4940},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 136, col: 5, offset: 4940},
									expr: &ruleRefExpr{
										pos:  position{line: 136, col: 5, offset: 4940},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 136, col: 16, offset: 4951},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 136, col: 21, offset: 4956},
										name: "AggAssignments",
									},
								},
								&labeledExpr{
									pos:   position{line: 136, col: 36, offset: 4971},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 136, col: 41, offset: 4976},
										expr: &seqExpr{
											pos: position{line: 136, col: 42, offset: 4977},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 136, col: 42, offset: 4977},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 136, col: 44, offset: 4979},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 136, col: 58, offset: 4993},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 136, col: 64, offset: 4999},
										name: "LimitArg",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Summarize",
			pos:  position{line: 143, col: 1, offset: 5212},
			expr: &seqExpr{
				pos: position{line: 143, col: 13, offset: 5224},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 143, col: 13, offset: 5224},
						val:        "summarize",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 143, col: 25, offset: 5236},
						name: "_",
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 144, col: 1, offset: 5238},
			expr: &actionExpr{
				pos: position{line: 145, col: 5, offset: 5254},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 145, col: 5, offset: 5254},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 145, col: 5, offset: 5254},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 145, col: 13, offset: 5262},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 145, col: 15, offset: 5264},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 145, col: 23, offset: 5272},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 146, col: 1, offset: 5312},
			expr: &choiceExpr{
				pos: position{line: 147, col: 5, offset: 5325},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 147, col: 5, offset: 5325},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 147, col: 5, offset: 5325},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 147, col: 5, offset: 5325},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 147, col: 7, offset: 5327},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 147, col: 14, offset: 5334},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 147, col: 16, offset: 5336},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 147, col: 25, offset: 5345},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 147, col: 27, offset: 5347},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 147, col: 33, offset: 5353},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 148, col: 5, offset: 5384},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 148, col: 5, offset: 5384},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 149, col: 1, offset: 5405},
			expr: &choiceExpr{
				pos: position{line: 150, col: 5, offset: 5424},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 150, col: 5, offset: 5424},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 151, col: 5, offset: 5439},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 151, col: 5, offset: 5439},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 151, col: 10, offset: 5444},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 152, col: 1, offset: 5535},
			expr: &actionExpr{
				pos: position{line: 153, col: 5, offset: 5555},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 153, col: 5, offset: 5555},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 153, col: 5, offset: 5555},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 153, col: 11, offset: 5561},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 153, col: 26, offset: 5576},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 153, col: 31, offset: 5581},
								expr: &actionExpr{
									pos: position{line: 153, col: 32, offset: 5582},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 153, col: 32, offset: 5582},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 153, col: 32, offset: 5582},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 153, col: 35, offset: 5585},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 153, col: 39, offset: 5589},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 153, col: 42, offset: 5592},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 153, col: 47, offset: 5597},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignment",
			pos:  position{line: 156, col: 1, offset: 5717},
			expr: &choiceExpr{
				pos: position{line: 157, col: 5, offset: 5735},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 157, col: 5, offset: 5735},
						run: (*parser).callonAggAssignment2,
						expr: &seqExpr{
							pos: position{line: 157, col: 5, offset: 5735},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 157, col: 5, offset: 5735},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 157, col: 10, offset: 5740},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 157, col: 15, offset: 5745},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 157, col: 18, offset: 5748},
									val:        ":=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 157, col: 23, offset: 5753},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 157, col: 26, offset: 5756},
									label: "agg",
									expr: &ruleRefExpr{
										pos:  position{line: 157, col: 30, offset: 5760},
										name: "Agg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 160, col: 5, offset: 5864},
						run: (*parser).callonAggAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 160, col: 5, offset: 5864},
							label: "agg",
							expr: &ruleRefExpr{
								pos:  position{line: 160, col: 9, offset: 5868},
								name: "Agg",
							},
						},
					},
				},
			},
		},
		{
			name: "Agg",
			pos:  position{line: 163, col: 1, offset: 5967},
			expr: &actionExpr{
				pos: position{line: 164, col: 5, offset: 5975},
				run: (*parser).callonAgg1,
				expr: &seqExpr{
					pos: position{line: 164, col: 5, offset: 5975},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 164, col: 5, offset: 5975},
							expr: &ruleRefExpr{
								pos:  position{line: 164, col: 6, offset: 5976},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 164, col: 16, offset: 5986},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 164, col: 19, offset: 5989},
								name: "AggName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 164, col: 27, offset: 5997},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 164, col: 30, offset: 6000},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 164, col: 34, offset: 6004},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 164, col: 37, offset: 6007},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 164, col: 42, offset: 6012},
								expr: &choiceExpr{
									pos: position{line: 164, col: 43, offset: 6013},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 164, col: 43, offset: 6013},
											name: "OverExpr",
										},
										&ruleRefExpr{
											pos:  position{line: 164, col: 54, offset: 6024},
											name: "Expr",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 164, col: 61, offset: 6031},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 164, col: 64, offset: 6034},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 164, col: 68, offset: 6038},
							expr: &seqExpr{
								pos: position{line: 164, col: 70, offset: 6040},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 164, col: 70, offset: 6040},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 164, col: 73, offset: 6043},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 164, col: 78, offset: 6048},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 164, col: 84, offset: 6054},
								expr: &ruleRefExpr{
									pos:  position{line: 164, col: 84, offset: 6054},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggName",
			pos:  position{line: 171, col: 1, offset: 6244},
			expr: &choiceExpr{
				pos: position{line: 172, col: 5, offset: 6256},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 172, col: 5, offset: 6256},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 173, col: 5, offset: 6275},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 174, col: 5, offset: 6288},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 175, col: 1, offset: 6296},
			expr: &actionExpr{
				pos: position{line: 175, col: 15, offset: 6310},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 175, col: 15, offset: 6310},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 175, col: 15, offset: 6310},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 175, col: 17, offset: 6312},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 175, col: 25, offset: 6320},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 175, col: 27, offset: 6322},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 175, col: 32, offset: 6327},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignments",
			pos:  position{line: 176, col: 1, offset: 6362},
			expr: &actionExpr{
				pos: position{line: 177, col: 5, offset: 6381},
				run: (*parser).callonAggAssignments1,
				expr: &seqExpr{
					pos: position{line: 177, col: 5, offset: 6381},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 177, col: 5, offset: 6381},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 177, col: 11, offset: 6387},
								name: "AggAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 177, col: 25, offset: 6401},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 177, col: 30, offset: 6406},
								expr: &seqExpr{
									pos: position{line: 177, col: 31, offset: 6407},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 177, col: 31, offset: 6407},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 177, col: 34, offset: 6410},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 177, col: 38, offset: 6414},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 177, col: 41, offset: 6417},
											name: "AggAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 184, col: 1, offset: 6615},
			expr: &choiceExpr{
				pos: position{line: 185, col: 5, offset: 6628},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 185, col: 5, offset: 6628},
						name: "AssertOp",
					},
					&ruleRefExpr{
						pos:  position{line: 186, col: 5, offset: 6641},
						name: "SortOp",
					},
					&ruleRefExpr{
						pos:  position{line: 187, col: 5, offset: 6652},
						name: "TopOp",
					},
					&ruleRefExpr{
						pos:  position{line: 188, col: 5, offset: 6662},
						name: "CutOp",
					},
					&ruleRefExpr{
						pos:  position{line: 189, col: 5, offset: 6672},
						name: "DropOp",
					},
					&ruleRefExpr{
						pos:  position{line: 190, col: 5, offset: 6683},
						name: "HeadOp",
					},
					&ruleRefExpr{
						pos:  position{line: 191, col: 5, offset: 6694},
						name: "TailOp",
					},
					&ruleRefExpr{
						pos:  position{line: 192, col: 5, offset: 6705},
						name: "WhereOp",
					},
					&ruleRefExpr{
						pos:  position{line: 193, col: 5, offset: 6717},
						name: "UniqOp",
					},
					&ruleRefExpr{
						pos:  position{line: 194, col: 5, offset: 6728},
						name: "PutOp",
					},
					&ruleRefExpr{
						pos:  position{line: 195, col: 5, offset: 6738},
						name: "RenameOp",
					},
					&ruleRefExpr{
						pos:  position{line: 196, col: 5, offset: 6751},
						name: "FuseOp",
					},
					&ruleRefExpr{
						pos:  position{line: 197, col: 5, offset: 6762},
						name: "ShapeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 198, col: 5, offset: 6774},
						name: "JoinOp",
					},
					&ruleRefExpr{
						pos:  position{line: 199, col: 5, offset: 6785},
						name: "SampleOp",
					},
					&ruleRefExpr{
						pos:  position{line: 200, col: 5, offset: 6798},
						name: "SQLOp",
					},
					&ruleRefExpr{
						pos:  position{line: 201, col: 5, offset: 6808},
						name: "FromOp",
					},
					&ruleRefExpr{
						pos:  position{line: 202, col: 5, offset: 6819},
						name: "PassOp",
					},
					&ruleRefExpr{
						pos:  position{line: 203, col: 5, offset: 6830},
						name: "ExplodeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 204, col: 5, offset: 6844},
						name: "MergeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 205, col: 5, offset: 6856},
						name: "OverOp",
					},
					&ruleRefExpr{
						pos:  position{line: 206, col: 5, offset: 6867},
						name: "YieldOp",
					},
					&ruleRefExpr{
						pos:  position{line: 207, col: 5, offset: 6879},
						name: "LoadOp",
					},
				},
			},
		},
		{
			name: "AssertOp",
			pos:  position{line: 208, col: 1, offset: 6886},
			expr: &actionExpr{
				pos: position{line: 209, col: 5, offset: 6899},
				run: (*parser).callonAssertOp1,
				expr: &seqExpr{
					pos: position{line: 209, col: 5, offset: 6899},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 209, col: 5, offset: 6899},
							val:        "assert",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 209, col: 14, offset: 6908},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 209, col: 16, offset: 6910},
							label: "expr",
							expr: &actionExpr{
								pos: position{line: 209, col: 22, offset: 6916},
								run: (*parser).callonAssertOp6,
								expr: &labeledExpr{
									pos:   position{line: 209, col: 22, offset: 6916},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 209, col: 24, offset: 6918},
										name: "Expr",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortOp",
			pos:  position{line: 212, col: 1, offset: 7817},
			expr: &actionExpr{
				pos: position{line: 213, col: 5, offset: 7828},
				run: (*parser).callonSortOp1,
				expr: &seqExpr{
					pos: position{line: 213, col: 5, offset: 7828},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 213, col: 5, offset: 7828},
							val:        "sort",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 213, col: 12, offset: 7835},
							expr: &ruleRefExpr{
								pos:  position{line: 213, col: 13, offset: 7836},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 213, col: 18, offset: 7841},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 213, col: 23, offset: 7846},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 213, col: 32, offset: 7855},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 213, col: 37, offset: 7860},
								expr: &actionExpr{
									pos: position{line: 213, col: 38, offset: 7861},
									run: (*parser).callonSortOp10,
									expr: &seqExpr{
										pos: position{line: 213, col: 38, offset: 7861},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 213, col: 38, offset: 7861},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 213, col: 40, offset: 7863},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 213, col: 42, offset: 7865},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 226, col: 1, offset: 8273},
			expr: &actionExpr{
				pos: position{line: 226, col: 12, offset: 8284},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 226, col: 12, offset: 8284},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 226, col: 17, offset: 8289},
						expr: &actionExpr{
							pos: position{line: 226, col: 18, offset: 8290},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 226, col: 18, offset: 8290},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 226, col: 18, offset: 8290},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 226, col: 20, offset: 8292},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 226, col: 22, offset: 8294},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 227, col: 1, offset: 8350},
			expr: &choiceExpr{
				pos: position{line: 228, col: 5, offset: 8362},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 228, col: 5, offset: 8362},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 228, col: 5, offset: 8362},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 229, col: 5, offset: 8437},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 229, col: 5, offset: 8437},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 229, col: 5, offset: 8437},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 229, col: 14, offset: 8446},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 229, col: 16, offset: 8448},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 229, col: 23, offset: 8455},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 229, col: 24, offset: 8456},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 229, col: 24, offset: 8456},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 229, col: 34, offset: 8466},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopOp",
			pos:  position{line: 230, col: 1, offset: 8578},
			expr: &actionExpr{
				pos: position{line: 231, col: 5, offset: 8588},
				run: (*parser).callonTopOp1,
				expr: &seqExpr{
					pos: position{line: 231, col: 5, offset: 8588},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 231, col: 5, offset: 8588},
							val:        "top",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 231, col: 11, offset: 8594},
							expr: &ruleRefExpr{
								pos:  position{line: 231, col: 12, offset: 8595},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 231, col: 17, offset: 8600},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 231, col: 23, offset: 8606},
								expr: &actionExpr{
									pos: position{line: 231, col: 24, offset: 8607},
									run: (*parser).callonTopOp8,
									expr: &seqExpr{
										pos: position{line: 231, col: 24, offset: 8607},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 231, col: 24, offset: 8607},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 231, col: 26, offset: 8609},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 231, col: 28, offset: 8611},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 231, col: 53, offset: 8636},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 231, col: 59, offset: 8642},
								expr: &seqExpr{
									pos: position{line: 231, col: 60, offset: 8643},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 231, col: 60, offset: 8643},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 231, col: 62, offset: 8645},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 231, col: 73, offset: 8656},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 231, col: 80, offset: 8663},
								expr: &actionExpr{
									pos: position{line: 231, col: 81, offset: 8664},
									run: (*parser).callonTopOp20,
									expr: &seqExpr{
										pos: position{line: 231, col: 81, offset: 8664},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 231, col: 81, offset: 8664},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 231, col: 83, offset: 8666},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 231, col: 85, offset: 8668},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutOp",
			pos:  position{line: 244, col: 1, offset: 9002},
			expr: &actionExpr{
				pos: position{line: 245, col: 5, offset: 9012},
				run: (*parser).callonCutOp1,
				expr: &seqExpr{
					pos: position{line: 245, col: 5, offset: 9012},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 245, col: 5, offset: 9012},
							val:        "cut",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 245, col: 11, offset: 9018},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 245, col: 13, offset: 9020},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 245, col: 18, offset: 9025},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropOp",
			pos:  position{line: 248, col: 1, offset: 9119},
			expr: &actionExpr{
				pos: position{line: 249, col: 5, offset: 9130},
				run: (*parser).callonDropOp1,
				expr: &seqExpr{
					pos: position{line: 249, col: 5, offset: 9130},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 249, col: 5, offset: 9130},
							val:        "drop",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 249, col: 12, offset: 9137},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 249, col: 14, offset: 9139},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 249, col: 19, offset: 9144},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadOp",
			pos:  position{line: 252, col: 1, offset: 9234},
			expr: &choiceExpr{
				pos: position{line: 253, col: 5, offset: 9245},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 253, col: 5, offset: 9245},
						run: (*parser).callonHeadOp2,
						expr: &seqExpr{
							pos: position{line: 253, col: 5, offset: 9245},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 253, col: 5, offset: 9245},
									val:        "head",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 253, col: 12, offset: 9252},
									name: "_",
								},
								&notExpr{
									pos: position{line: 253, col: 14, offset: 9254},
									expr: &ruleRefExpr{
										pos:  position{line: 253, col: 15, offset: 9255},
										name: "EndOfOp",
									},
								},
								&labeledExpr{
									pos:   position{line: 253, col: 23, offset: 9263},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 253, col: 29, offset: 9269},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 254, col: 5, offset: 9349},
						run: (*parser).callonHeadOp10,
						expr: &litMatcher{
							pos:        position{line: 254, col: 5, offset: 9349},
							val:        "head",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TailOp",
			pos:  position{line: 255, col: 1, offset: 9495},
			expr: &choiceExpr{
				pos: position{line: 256, col: 5, offset: 9506},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 256, col: 5, offset: 9506},
						run: (*parser).callonTailOp2,
						expr: &seqExpr{
							pos: position{line: 256, col: 5, offset: 9506},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 256, col: 5, offset: 9506},
									val:        "tail",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 256, col: 12, offset: 9513},
									name: "_",
								},
								&notExpr{
									pos: position{line: 256, col: 14, offset: 9515},
									expr: &ruleRefExpr{
										pos:  position{line: 256, col: 15, offset: 9516},
										name: "EndOfOp",
									},
								},
								&labeledExpr{
									pos:   position{line: 256, col: 23, offset: 9524},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 256, col: 29, offset: 9530},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 257, col: 5, offset: 9610},
						run: (*parser).callonTailOp10,
						expr: &litMatcher{
							pos:        position{line: 257, col: 5, offset: 9610},
							val:        "tail",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "WhereOp",
			pos:  position{line: 258, col: 1, offset: 9756},
			expr: &actionExpr{
				pos: position{line: 259, col: 5, offset: 9768},
				run: (*parser).callonWhereOp1,
				expr: &seqExpr{
					pos: position{line: 259, col: 5, offset: 9768},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 259, col: 5, offset: 9768},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 259, col: 13, offset: 9776},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 259, col: 15, offset: 9778},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 259, col: 20, offset: 9783},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "UniqOp",
			pos:  position{line: 262, col: 1, offset: 9868},
			expr: &choiceExpr{
				pos: position{line: 263, col: 5, offset: 9879},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 263, col: 5, offset: 9879},
						run: (*parser).callonUniqOp2,
						expr: &seqExpr{
							pos: position{line: 263, col: 5, offset: 9879},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 263, col: 5, offset: 9879},
									val:        "uniq",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 263, col: 12, offset: 9886},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 263, col: 14, offset: 9888},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 266, col: 5, offset: 9977},
						run: (*parser).callonUniqOp7,
						expr: &litMatcher{
							pos:        position{line: 266, col: 5, offset: 9977},
							val:        "uniq",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PutOp",
			pos:  position{line: 269, col: 1, offset: 10065},
			expr: &actionExpr{
				pos: position{line: 270, col: 5, offset: 10075},
				run: (*parser).callonPutOp1,
				expr: &seqExpr{
					pos: position{line: 270, col: 5, offset: 10075},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 270, col: 5, offset: 10075},
							val:        "put",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 270, col: 11, offset: 10081},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 270, col: 13, offset: 10083},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 270, col: 18, offset: 10088},
								name: "Assignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameOp",
			pos:  position{line: 273, col: 1, offset: 10178},
			expr: &actionExpr{
				pos: position{line: 274, col: 5, offset: 10191},
				run: (*parser).callonRenameOp1,
				expr: &seqExpr{
					pos: position{line: 274, col: 5, offset: 10191},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 274, col: 5, offset: 10191},
							val:        "rename",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 274, col: 14, offset: 10200},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 274, col: 16, offset: 10202},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 274, col: 22, offset: 10208},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 274, col: 33, offset: 10219},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 274, col: 38, offset: 10224},
								expr: &actionExpr{
									pos: position{line: 274, col: 39, offset: 10225},
									run: (*parser).callonRenameOp9,
									expr: &seqExpr{
										pos: position{line: 274, col: 39, offset: 10225},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 274, col: 39, offset: 10225},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 274, col: 42, offset: 10228},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 274, col: 46, offset: 10232},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 274, col: 49, offset: 10235},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 274, col: 52, offset: 10238},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseOp",
			pos:  position{line: 277, col: 1, offset: 10402},
			expr: &actionExpr{
				pos: position{line: 278, col: 5, offset: 10413},
				run: (*parser).callonFuseOp1,
				expr: &seqExpr{
					pos: position{line: 278, col: 5, offset: 10413},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 278, col: 5, offset: 10413},
							val:        "fuse",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 278, col: 12, offset: 10420},
							expr: &seqExpr{
								pos: position{line: 278, col: 14, offset: 10422},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 278, col: 14, offset: 10422},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 278, col: 17, offset: 10425},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 278, col: 22, offset: 10430},
							expr: &ruleRefExpr{
								pos:  position{line: 278, col: 23, offset: 10431},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "ShapeOp",
			pos:  position{line: 281, col: 1, offset: 10501},
			expr: &actionExpr{
				pos: position{line: 282, col: 5, offset: 10513},
				run: (*parser).callonShapeOp1,
				expr: &seqExpr{
					pos: position{line: 282, col: 5, offset: 10513},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 282, col: 5, offset: 10513},
							val:        "shape",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 282, col: 13, offset: 10521},
							expr: &seqExpr{
								pos: position{line: 282, col: 15, offset: 10523},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 282, col: 15, offset: 10523},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 282, col: 18, offset: 10526},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 282, col: 23, offset: 10531},
							expr: &ruleRefExpr{
								pos:  position{line: 282, col: 24, offset: 10532},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "JoinOp",
			pos:  position{line: 285, col: 1, offset: 10603},
			expr: &actionExpr{
				pos: position{line: 286, col: 5, offset: 10614},
				run: (*parser).callonJoinOp1,
				expr: &seqExpr{
					pos: position{line: 286, col: 5, offset: 10614},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 286, col: 5, offset: 10614},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 286, col: 11, offset: 10620},
								name: "JoinStyle",
							},
						},
						&litMatcher{
							pos:        position{line: 286, col: 21, offset: 10630},
							val:        "join",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 286, col: 28, offset: 10637},
							label: "rightInput",
							expr: &ruleRefExpr{
								pos:  position{line: 286, col: 39, offset: 10648},
								name: "JoinRightInput",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 286, col: 54, offset: 10663},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 286, col: 57, offset: 10666},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 286, col: 59, offset: 10668},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 286, col: 63, offset: 10672},
								name: "JoinKey",
							},
						},
						&labeledExpr{
							pos:   position{line: 286, col: 71, offset: 10680},
							label: "optKey",
							expr: &zeroOrOneExpr{
								pos: position{line: 286, col: 78, offset: 10687},
								expr: &seqExpr{
									pos: position{line: 286, col: 79, offset: 10688},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 286, col: 79, offset: 10688},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 286, col: 82, offset: 10691},
											val:        "=",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 286, col: 86, offset: 10695},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 286, col: 89, offset: 10698},
											name: "JoinKey",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 286, col: 99, offset: 10708},
							label: "optArgs",
							expr: &zeroOrOneExpr{
								pos: position{line: 286, col: 107, offset: 10716},
								expr: &seqExpr{
									pos: position{line: 286, col: 108, offset: 10717},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 286, col: 108, offset: 10717},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 286, col: 110, offset: 10719},
											name: "FlexAssignments",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinStyle",
			pos:  position{line: 296, col: 1, offset: 11074},
			expr: &choiceExpr{
				pos: position{line: 297, col: 5, offset: 11088},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 297, col: 5, offset: 11088},
						run: (*parser).callonJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 297, col: 5, offset: 11088},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 297, col: 5, offset: 11088},
									val:        "anti",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 297, col: 12, offset: 11095},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 298, col: 5, offset: 11124},
						run: (*parser).callonJoinStyle6,
						expr: &seqExpr{
							pos: position{line: 298, col: 5, offset: 11124},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 298, col: 5, offset: 11124},
									val:        "inner",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 298, col: 13, offset: 11132},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 299, col: 5, offset: 11162},
						run: (*parser).callonJoinStyle10,
						expr: &seqExpr{
							pos: position{line: 299, col: 5, offset: 11162},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 299, col: 5, offset: 11162},
									val:        "left",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 299, col: 12, offset: 11169},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 300, col: 5, offset: 11198},
						run: (*parser).callonJoinStyle14,
						expr: &seqExpr{
							pos: position{line: 300, col: 5, offset: 11198},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 300, col: 5, offset: 11198},
									val:        "right",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 300, col: 13, offset: 11206},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 301, col: 5, offset: 11236},
						run: (*parser).callonJoinStyle18,
						expr: &litMatcher{
							pos:        position{line: 301, col: 5, offset: 11236},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "JoinRightInput",
			pos:  position{line: 302, col: 1, offset: 11263},
			expr: &choiceExpr{
				pos: position{line: 303, col: 5, offset: 11282},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 303, col: 5, offset: 11282},
						run: (*parser).callonJoinRightInput2,
						expr: &seqExpr{
							pos: position{line: 303, col: 5, offset: 11282},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 303, col: 5, offset: 11282},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 303, col: 8, offset: 11285},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 303, col: 12, offset: 11289},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 303, col: 15, offset: 11292},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 303, col: 17, offset: 11294},
										name: "Seq",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 303, col: 21, offset: 11298},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 303, col: 24, offset: 11301},
									val:        ")",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 303, col: 28, offset: 11305},
									name: "__",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 304, col: 5, offset: 11330},
						run: (*parser).callonJoinRightInput12,
						expr: &ruleRefExpr{
							pos:  position{line: 304, col: 5, offset: 11330},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 305, col: 1, offset: 11352},
			expr: &choiceExpr{
				pos: position{line: 306, col: 5, offset: 11364},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 306, col: 5, offset: 11364},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 307, col: 5, offset: 11373},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 307, col: 5, offset: 11373},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 307, col: 5, offset: 11373},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 307, col: 9, offset: 11377},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 307, col: 14, offset: 11382},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 307, col: 19, offset: 11387},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SampleOp",
			pos:  position{line: 308, col: 1, offset: 11412},
			expr: &actionExpr{
				pos: position{line: 309, col: 5, offset: 11425},
				run: (*parser).callonSampleOp1,
				expr: &seqExpr{
					pos: position{line: 309, col: 5, offset: 11425},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 309, col: 5, offset: 11425},
							val:        "sample",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 309, col: 14, offset: 11434},
							expr: &ruleRefExpr{
								pos:  position{line: 309, col: 15, offset: 11435},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 309, col: 20, offset: 11440},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 309, col: 22, offset: 11442},
								name: "SampleExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "OpAssignment",
			pos:  position{line: 310, col: 1, offset: 11521},
			expr: &actionExpr{
				pos: position{line: 311, col: 5, offset: 11538},
				run: (*parser).callonOpAssignment1,
				expr: &labeledExpr{
					pos:   position{line: 311, col: 5, offset: 11538},
					label: "a",
					expr: &ruleRefExpr{
						pos:  position{line: 311, col: 7, offset: 11540},
						name: "Assignments",
					},
				},
			},
		},
		{
			name: "SampleExpr",
			pos:  position{line: 314, col: 1, offset: 11639},
			expr: &choiceExpr{
				pos: position{line: 315, col: 5, offset: 11654},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 315, col: 5, offset: 11654},
						run: (*parser).callonSampleExpr2,
						expr: &seqExpr{
							pos: position{line: 315, col: 5, offset: 11654},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 315, col: 5, offset: 11654},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 315, col: 7, offset: 11656},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 315, col: 12, offset: 11661},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 316, col: 5, offset: 11691},
						run: (*parser).callonSampleExpr7,
						expr: &litMatcher{
							pos:        position{line: 316, col: 5, offset: 11691},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LoadOp",
			pos:  position{line: 317, col: 1, offset: 11763},
			expr: &actionExpr{
				pos: position{line: 318, col: 5, offset: 11774},
				run: (*parser).callonLoadOp1,
				expr: &seqExpr{
					pos: position{line: 318, col: 5, offset: 11774},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 318, col: 5, offset: 11774},
							val:        "load",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 318, col: 12, offset: 11781},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 318, col: 14, offset: 11783},
							label: "pool",
							expr: &ruleRefExpr{
								pos:  position{line: 318, col: 19, offset: 11788},
								name: "PoolNameString",
							},
						},
						&labeledExpr{
							pos:   position{line: 318, col: 34, offset: 11803},
							label: "branch",
							expr: &zeroOrOneExpr{
								pos: position{line: 318, col: 41, offset: 11810},
								expr: &ruleRefExpr{
									pos:  position{line: 318, col: 41, offset: 11810},
									name: "PoolBranch",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 318, col: 53, offset: 11822},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 318, col: 60, offset: 11829},
								expr: &ruleRefExpr{
									pos:  position{line: 318, col: 60, offset: 11829},
									name: "AuthorArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 318, col: 71, offset: 11840},
							label: "message",
							expr: &zeroOrOneExpr{
								pos: position{line: 318, col: 79, offset: 11848},
								expr: &ruleRefExpr{
									pos:  position{line: 318, col: 79, offset: 11848},
									name: "MessageArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 318, col: 91, offset: 11860},
							label: "meta",
							expr: &zeroOrOneExpr{
								pos: position{line: 318, col: 96, offset: 11865},
								expr: &ruleRefExpr{
									pos:  position{line: 318, col: 96, offset: 11865},
									name: "MetaArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AuthorArg",
			pos:  position{line: 321, col: 1, offset: 12023},
			expr: &actionExpr{
				pos: position{line: 322, col: 5, offset: 12037},
				run: (*parser).callonAuthorArg1,
				expr: &seqExpr{
					pos: position{line: 322, col: 5, offset: 12037},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 322, col: 5, offset: 12037},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 322, col: 7, offset: 12039},
							val:        "author",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 322, col: 16, offset: 12048},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 322, col: 18, offset: 12050},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 322, col: 22, offset: 12054},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "MessageArg",
			pos:  position{line: 323, col: 1, offset: 12087},
			expr: &actionExpr{
				pos: position{line: 324, col: 5, offset: 12102},
				run: (*parser).callonMessageArg1,
				expr: &seqExpr{
					pos: position{line: 324, col: 5, offset: 12102},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 324, col: 5, offset: 12102},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 324, col: 7, offset: 12104},
							val:        "message",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 324, col: 17, offset: 12114},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 324, col: 19, offset: 12116},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 324, col: 23, offset: 12120},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "MetaArg",
			pos:  position{line: 325, col: 1, offset: 12153},
			expr: &actionExpr{
				pos: position{line: 326, col: 5, offset: 12165},
				run: (*parser).callonMetaArg1,
				expr: &seqExpr{
					pos: position{line: 326, col: 5, offset: 12165},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 326, col: 5, offset: 12165},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 326, col: 7, offset: 12167},
							val:        "meta",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 326, col: 14, offset: 12174},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 326, col: 16, offset: 12176},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 326, col: 20, offset: 12180},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolBranch",
			pos:  position{line: 327, col: 1, offset: 12213},
			expr: &actionExpr{
				pos: position{line: 328, col: 5, offset: 12228},
				run: (*parser).callonPoolBranch1,
				expr: &seqExpr{
					pos: position{line: 328, col: 5, offset: 12228},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 328, col: 5, offset: 12228},
							val:        "@",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 328, col: 9, offset: 12232},
							label: "branch",
							expr: &choiceExpr{
								pos: position{line: 328, col: 17, offset: 12240},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 328, col: 17, offset: 12240},
										name: "PoolIdentifier",
									},
									&ruleRefExpr{
										pos:  position{line: 328, col: 34, offset: 12257},
										name: "QuotedString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FromOp",
			pos:  position{line: 329, col: 1, offset: 12294},
			expr: &actionExpr{
				pos: position{line: 330, col: 5, offset: 12305},
				run: (*parser).callonFromOp1,
				expr: &labeledExpr{
					pos:   position{line: 330, col: 5, offset: 12305},
					label: "source",
					expr: &ruleRefExpr{
						pos:  position{line: 330, col: 12, offset: 12312},
						name: "FromAny",
					},
				},
			},
		},
		{
			name: "FromAny",
			pos:  position{line: 333, col: 1, offset: 12469},
			expr: &choiceExpr{
				pos: position{line: 334, col: 5, offset: 12481},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 334, col: 5, offset: 12481},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 335, col: 5, offset: 12490},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 336, col: 5, offset: 12498},
						name: "From",
					},
				},
			},
		},
		{
			name: "File",
			pos:  position{line: 337, col: 1, offset: 12503},
			expr: &actionExpr{
				pos: position{line: 338, col: 5, offset: 12512},
				run: (*parser).callonFile1,
				expr: &seqExpr{
					pos: position{line: 338, col: 5, offset: 12512},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 338, col: 5, offset: 12512},
							val:        "file",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 338, col: 12, offset: 12519},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 338, col: 14, offset: 12521},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 338, col: 19, offset: 12526},
								name: "Path",
							},
						},
						&labeledExpr{
							pos:   position{line: 338, col: 24, offset: 12531},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 338, col: 31, offset: 12538},
								expr: &ruleRefExpr{
									pos:  position{line: 338, col: 31, offset: 12538},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 338, col: 42, offset: 12549},
							label: "sort_key",
							expr: &zeroOrOneExpr{
								pos: position{line: 338, col: 51, offset: 12558},
								expr: &ruleRefExpr{
									pos:  position{line: 338, col: 51, offset: 12558},
									name: "SortKeyArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "From",
			pos:  position{line: 341, col: 1, offset: 12689},
			expr: &actionExpr{
				pos: position{line: 342, col: 5, offset: 12698},
				run: (*parser).callonFrom1,
				expr: &seqExpr{
					pos: position{line: 342, col: 5, offset: 12698},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 342, col: 5, offset: 12698},
							val:        "from",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 342, col: 12, offset: 12705},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 342, col: 14, offset: 12707},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 342, col: 19, offset: 12712},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "Pool",
			pos:  position{line: 343, col: 1, offset: 12742},
			expr: &actionExpr{
				pos: position{line: 344, col: 5, offset: 12751},
				run: (*parser).callonPool1,
				expr: &seqExpr{
					pos: position{line: 344, col: 5, offset: 12751},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 344, col: 5, offset: 12751},
							val:        "pool",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 344, col: 12, offset: 12758},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 344, col: 14, offset: 12760},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 344, col: 19, offset: 12765},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolBody",
			pos:  position{line: 345, col: 1, offset: 12795},
			expr: &actionExpr{
				pos: position{line: 346, col: 5, offset: 12808},
				run: (*parser).callonPoolBody1,
				expr: &seqExpr{
					pos: position{line: 346, col: 5, offset: 12808},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 346, col: 5, offset: 12808},
							label: "spec",
							expr: &ruleRefExpr{
								pos:  position{line: 346, col: 10, offset: 12813},
								name: "PoolSpec",
							},
						},
						&labeledExpr{
							pos:   position{line: 346, col: 19, offset: 12822},
							label: "at",
							expr: &zeroOrOneExpr{
								pos: position{line: 346, col: 22, offset: 12825},
								expr: &ruleRefExpr{
									pos:  position{line: 346, col: 22, offset: 12825},
									name: "PoolAt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Get",
			pos:  position{line: 349, col: 1, offset: 12922},
			expr: &actionExpr{
				pos: position{line: 350, col: 5, offset: 12930},
				run: (*parser).callonGet1,
				expr: &seqExpr{
					pos: position{line: 350, col: 5, offset: 12930},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 350, col: 5, offset: 12930},
							val:        "get",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 350, col: 11, offset: 12936},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 350, col: 13, offset: 12938},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 350, col: 17, offset: 12942},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 350, col: 21, offset: 12946},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 350, col: 28, offset: 12953},
								expr: &ruleRefExpr{
									pos:  position{line: 350, col: 28, offset: 12953},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 350, col: 39, offset: 12964},
							label: "sort_key",
							expr: &zeroOrOneExpr{
								pos: position{line: 350, col: 48, offset: 12973},
								expr: &ruleRefExpr{
									pos:  position{line: 350, col: 48, offset: 12973},
									name: "SortKeyArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 353, col: 1, offset: 13102},
			expr: &actionExpr{
				pos: position{line: 353, col: 7, offset: 13108},
				run: (*parser).callonURL1,
				expr: &seqExpr{
					pos: position{line: 353, col: 7, offset: 13108},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 353, col: 8, offset: 13109},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 353, col: 8, offset: 13109},
									val:        "http:",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 353, col: 18, offset: 13119},
									val:        "https:",
									ignoreCase: false,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 353, col: 28, offset: 13129},
							name: "Path",
						},
					},
				},
			},
		},
		{
			name: "Path",
			pos:  position{line: 354, col: 1, offset: 13165},
			expr: &choiceExpr{
				pos: position{line: 355, col: 5, offset: 13174},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 355, col: 5, offset: 13174},
						run: (*parser).callonPath2,
						expr: &labeledExpr{
							pos:   position{line: 355, col: 5, offset: 13174},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 355, col: 7, offset: 13176},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 356, col: 5, offset: 13211},
						run: (*parser).callonPath5,
						expr: &oneOrMoreExpr{
							pos: position{line: 356, col: 5, offset: 13211},
							expr: &charClassMatcher{
								pos:        position{line: 356, col: 5, offset: 13211},
								val:        "[0-9a-zA-Z!@$%^&*_=<>,./?:[\\]{}~+-]",
								chars:      []rune{'!', '@', '$', '%', '^', '&', '*', '_', '=', '<', '>', ',', '.', '/', '?', ':', '[', ']', '{', '}', '~', '+', '-'},
								ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PoolAt",
			pos:  position{line: 357, col: 1, offset: 13279},
			expr: &actionExpr{
				pos: position{line: 358, col: 5, offset: 13290},
				run: (*parser).callonPoolAt1,
				expr: &seqExpr{
					pos: position{line: 358, col: 5, offset: 13290},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 358, col: 5, offset: 13290},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 358, col: 7, offset: 13292},
							val:        "at",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 358, col: 12, offset: 13297},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 358, col: 14, offset: 13299},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 358, col: 17, offset: 13302},
								name: "KSUID",
							},
						},
					},
				},
			},
		},
		{
			name: "KSUID",
			pos:  position{line: 359, col: 1, offset: 13327},
			expr: &actionExpr{
				pos: position{line: 359, col: 9, offset: 13335},
				run: (*parser).callonKSUID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 359, col: 9, offset: 13335},
					expr: &charClassMatcher{
						pos:        position{line: 359, col: 10, offset: 13336},
						val:        "[0-9a-zA-Z]",
						ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "PoolSpec",
			pos:  position{line: 360, col: 1, offset: 13381},
			expr: &choiceExpr{
				pos: position{line: 361, col: 5, offset: 13394},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 361, col: 5, offset: 13394},
						run: (*parser).callonPoolSpec2,
						expr: &seqExpr{
							pos: position{line: 361, col: 5, offset: 13394},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 361, col: 5, offset: 13394},
									label: "pool",
									expr: &ruleRefExpr{
										pos:  position{line: 361, col: 10, offset: 13399},
										name: "PoolName",
									},
								},
								&labeledExpr{
									pos:   position{line: 361, col: 19, offset: 13408},
									label: "commit",
									expr: &zeroOrOneExpr{
										pos: position{line: 361, col: 26, offset: 13415},
										expr: &ruleRefExpr{
											pos:  position{line: 361, col: 26, offset: 13415},
											name: "PoolCommit",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 361, col: 38, offset: 13427},
									label: "meta",
									expr: &zeroOrOneExpr{
										pos: position{line: 361, col: 43, offset: 13432},
										expr: &ruleRefExpr{
											pos:  position{line: 361, col: 43, offset: 13432},
											name: "PoolMeta",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 361, col: 53, offset: 13442},
									label: "tap",
									expr: &ruleRefExpr{
										pos:  position{line: 361, col: 57, offset: 13446},
										name: "TapArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 364, col: 5, offset: 13564},
						run: (*parser).callonPoolSpec14,
						expr: &labeledExpr{
							pos:   position{line: 364, col: 5, offset: 13564},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 364, col: 10, offset: 13569},
								name: "PoolMeta",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolCommit",
			pos:  position{line: 367, col: 1, offset: 13669},
			expr: &actionExpr{
				pos: position{line: 368, col: 5, offset: 13684},
				run: (*parser).callonPoolCommit1,
				expr: &seqExpr{
					pos: position{line: 368, col: 5, offset: 13684},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 368, col: 5, offset: 13684},
							val:        "@",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 368, col: 9, offset: 13688},
							label: "commit",
							expr: &ruleRefExpr{
								pos:  position{line: 368, col: 16, offset: 13695},
								name: "PoolNameString",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolMeta",
			pos:  position{line: 369, col: 1, offset: 13733},
			expr: &actionExpr{
				pos: position{line: 370, col: 5, offset: 13746},
				run: (*parser).callonPoolMeta1,
				expr: &seqExpr{
					pos: position{line: 370, col: 5, offset: 13746},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 370, col: 5, offset: 13746},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 370, col: 9, offset: 13750},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 370, col: 14, offset: 13755},
								name: "PoolIdentifier",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolName",
			pos:  position{line: 371, col: 1, offset: 13791},
			expr: &choiceExpr{
				pos: position{line: 372, col: 5, offset: 13804},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 372, col: 5, offset: 13804},
						name: "Glob",
					},
					&actionExpr{
						pos: position{line: 373, col: 5, offset: 13813},
						run: (*parser).callonPoolName3,
						expr: &seqExpr{
							pos: position{line: 373, col: 5, offset: 13813},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 373, col: 5, offset: 13813},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 373, col: 9, offset: 13817},
									expr: &ruleRefExpr{
										pos:  position{line: 373, col: 10, offset: 13818},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 374, col: 5, offset: 13903},
						name: "Regexp",
					},
					&actionExpr{
						pos: position{line: 375, col: 5, offset: 13914},
						run: (*parser).callonPoolName9,
						expr: &labeledExpr{
							pos:   position{line: 375, col: 5, offset: 13914},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 375, col: 10, offset: 13919},
								name: "PoolNameString",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolNameString",
			pos:  position{line: 376, col: 1, offset: 14005},
			expr: &choiceExpr{
				pos: position{line: 377, col: 5, offset: 14024},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 377, col: 5, offset: 14024},
						name: "PoolIdentifier",
					},
					&ruleRefExpr{
						pos:  position{line: 378, col: 5, offset: 14043},
						name: "KSUID",
					},
					&ruleRefExpr{
						pos:  position{line: 379, col: 5, offset: 14053},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "PoolIdentifier",
			pos:  position{line: 380, col: 1, offset: 14066},
			expr: &actionExpr{
				pos: position{line: 381, col: 5, offset: 14085},
				run: (*parser).callonPoolIdentifier1,
				expr: &seqExpr{
					pos: position{line: 381, col: 5, offset: 14085},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 381, col: 6, offset: 14086},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 381, col: 6, offset: 14086},
									name: "IdentifierStart",
								},
								&litMatcher{
									pos:        position{line: 381, col: 24, offset: 14104},
									val:        ".",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 381, col: 29, offset: 14109},
							expr: &choiceExpr{
								pos: position{line: 381, col: 30, offset: 14110},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 381, col: 30, offset: 14110},
										name: "IdentifierRest",
									},
									&litMatcher{
										pos:        position{line: 381, col: 47, offset: 14127},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortKeyArg",
			pos:  position{line: 382, col: 1, offset: 14164},
			expr: &actionExpr{
				pos: position{line: 383, col: 5, offset: 14179},
				run: (*parser).callonSortKeyArg1,
				expr: &seqExpr{
					pos: position{line: 383, col: 5, offset: 14179},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 383, col: 5, offset: 14179},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 383, col: 7, offset: 14181},
							val:        "order",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 383, col: 15, offset: 14189},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 383, col: 17, offset: 14191},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 383, col: 22, offset: 14196},
								name: "FieldExprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 383, col: 33, offset: 14207},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 383, col: 39, offset: 14213},
								name: "OrderSuffix",
							},
						},
					},
				},
			},
		},
		{
			name: "TapArg",
			pos:  position{line: 386, col: 1, offset: 14323},
			expr: &choiceExpr{
				pos: position{line: 387, col: 5, offset: 14334},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 387, col: 5, offset: 14334},
						run: (*parser).callonTapArg2,
						expr: &seqExpr{
							pos: position{line: 387, col: 5, offset: 14334},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 387, col: 5, offset: 14334},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 387, col: 7, offset: 14336},
									val:        "tap",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 388, col: 5, offset: 14367},
						run: (*parser).callonTapArg6,
						expr: &litMatcher{
							pos:        position{line: 388, col: 5, offset: 14367},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FormatArg",
			pos:  position{line: 389, col: 1, offset: 14392},
			expr: &actionExpr{
				pos: position{line: 390, col: 5, offset: 14406},
				run: (*parser).callonFormatArg1,
				expr: &seqExpr{
					pos: position{line: 390, col: 5, offset: 14406},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 390, col: 5, offset: 14406},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 390, col: 7, offset: 14408},
							val:        "format",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 390, col: 16, offset: 14417},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 390, col: 18, offset: 14419},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 390, col: 22, offset: 14423},
								name: "IdentifierName",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderSuffix",
			pos:  position{line: 391, col: 1, offset: 14458},
			expr: &choiceExpr{
				pos: position{line: 392, col: 5, offset: 14474},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 392, col: 5, offset: 14474},
						run: (*parser).callonOrderSuffix2,
						expr: &litMatcher{
							pos:        position{line: 392, col: 5, offset: 14474},
							val:        ":asc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 393, col: 5, offset: 14507},
						run: (*parser).callonOrderSuffix4,
						expr: &litMatcher{
							pos:        position{line: 393, col: 5, offset: 14507},
							val:        ":desc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 394, col: 5, offset: 14542},
						run: (*parser).callonOrderSuffix6,
						expr: &litMatcher{
							pos:        position{line: 394, col: 5, offset: 14542},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PassOp",
			pos:  position{line: 395, col: 1, offset: 14567},
			expr: &actionExpr{
				pos: position{line: 396, col: 5, offset: 14578},
				run: (*parser).callonPassOp1,
				expr: &seqExpr{
					pos: position{line: 396, col: 5, offset: 14578},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 396, col: 5, offset: 14578},
							val:        "pass",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 396, col: 12, offset: 14585},
							expr: &ruleRefExpr{
								pos:  position{line: 396, col: 13, offset: 14586},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "ExplodeOp",
			pos:  position{line: 399, col: 1, offset: 14656},
			expr: &actionExpr{
				pos: position{line: 400, col: 5, offset: 14670},
				run: (*parser).callonExplodeOp1,
				expr: &seqExpr{
					pos: position{line: 400, col: 5, offset: 14670},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 400, col: 5, offset: 14670},
							val:        "explode",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 400, col: 15, offset: 14680},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 400, col: 17, offset: 14682},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 400, col: 22, offset: 14687},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 400, col: 28, offset: 14693},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 400, col: 32, offset: 14697},
								name: "TypeArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 400, col: 40, offset: 14705},
							label: "as",
							expr: &zeroOrOneExpr{
								pos: position{line: 400, col: 43, offset: 14708},
								expr: &ruleRefExpr{
									pos:  position{line: 400, col: 43, offset: 14708},
									name: "AsArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MergeOp",
			pos:  position{line: 403, col: 1, offset: 14820},
			expr: &actionExpr{
				pos: position{line: 404, col: 5, offset: 14832},
				run: (*parser).callonMergeOp1,
				expr: &seqExpr{
					pos: position{line: 404, col: 5, offset: 14832},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 404, col: 5, offset: 14832},
							val:        "merge",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 404, col: 13, offset: 14840},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 404, col: 15, offset: 14842},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 404, col: 20, offset: 14847},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "OverOp",
			pos:  position{line: 407, col: 1, offset: 14932},
			expr: &actionExpr{
				pos: position{line: 408, col: 5, offset: 14943},
				run: (*parser).callonOverOp1,
				expr: &seqExpr{
					pos: position{line: 408, col: 5, offset: 14943},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 408, col: 5, offset: 14943},
							val:        "over",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 408, col: 12, offset: 14950},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 408, col: 14, offset: 14952},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 408, col: 20, offset: 14958},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 408, col: 26, offset: 14964},
							label: "locals",
							expr: &zeroOrOneExpr{
								pos: position{line: 408, col: 33, offset: 14971},
								expr: &ruleRefExpr{
									pos:  position{line: 408, col: 33, offset: 14971},
									name: "Locals",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 408, col: 41, offset: 14979},
							label: "body",
							expr: &zeroOrOneExpr{
								pos: position{line: 408, col: 46, offset: 14984},
								expr: &ruleRefExpr{
									pos:  position{line: 408, col: 46, offset: 14984},
									name: "Lateral",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Lateral",
			pos:  position{line: 411, col: 1, offset: 15106},
			expr: &choiceExpr{
				pos: position{line: 412, col: 5, offset: 15118},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 412, col: 5, offset: 15118},
						run: (*parser).callonLateral2,
						expr: &seqExpr{
							pos: position{line: 412, col: 5, offset: 15118},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 412, col: 5, offset: 15118},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 412, col: 8, offset: 15121},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 412, col: 13, offset: 15126},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 412, col: 16, offset: 15129},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 412, col: 20, offset: 15133},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 412, col: 23, offset: 15136},
									label: "scope",
									expr: &ruleRefExpr{
										pos:  position{line: 412, col: 29, offset: 15142},
										name: "Scope",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 412, col: 35, offset: 15148},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 412, col: 38, offset: 15151},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 413, col: 5, offset: 15181},
						run: (*parser).callonLateral13,
						expr: &seqExpr{
							pos: position{line: 413, col: 5, offset: 15181},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 413, col: 5, offset: 15181},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 413, col: 8, offset: 15184},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 413, col: 13, offset: 15189},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 413, col: 16, offset: 15192},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 413, col: 20, offset: 15196},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 413, col: 23, offset: 15199},
									label: "seq",
									expr: &ruleRefExpr{
										pos:  position{line: 413, col: 27, offset: 15203},
										name: "Seq",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 413, col: 31, offset: 15207},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 413, col: 34, offset: 15210},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Locals",
			pos:  position{line: 414, col: 1, offset: 15234},
			expr: &actionExpr{
				pos: position{line: 415, col: 5, offset: 15245},
				run: (*parser).callonLocals1,
				expr: &seqExpr{
					pos: position{line: 415, col: 5, offset: 15245},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 415, col: 5, offset: 15245},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 415, col: 7, offset: 15247},
							val:        "with",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 415, col: 14, offset: 15254},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 415, col: 16, offset: 15256},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 415, col: 22, offset: 15262},
								name: "LocalsAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 415, col: 39, offset: 15279},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 415, col: 44, offset: 15284},
								expr: &actionExpr{
									pos: position{line: 415, col: 45, offset: 15285},
									run: (*parser).callonLocals10,
									expr: &seqExpr{
										pos: position{line: 415, col: 45, offset: 15285},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 415, col: 45, offset: 15285},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 415, col: 48, offset: 15288},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 415, col: 52, offset: 15292},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 415, col: 55, offset: 15295},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 415, col: 57, offset: 15297},
													name: "LocalsAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocalsAssignment",
			pos:  position{line: 418, col: 1, offset: 15416},
			expr: &actionExpr{
				pos: position{line: 419, col: 5, offset: 15437},
				run: (*parser).callonLocalsAssignment1,
				expr: &seqExpr{
					pos: position{line: 419, col: 5, offset: 15437},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 419, col: 5, offset: 15437},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 419, col: 10, offset: 15442},
								name: "IdentifierName",
							},
						},
						&labeledExpr{
							pos:   position{line: 419, col: 25, offset: 15457},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 419, col: 29, offset: 15461},
								expr: &seqExpr{
									pos: position{line: 419, col: 30, offset: 15462},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 419, col: 30, offset: 15462},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 419, col: 33, offset: 15465},
											val:        "=",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 419, col: 37, offset: 15469},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 419, col: 40, offset: 15472},
											name: "Expr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "YieldOp",
			pos:  position{line: 426, col: 1, offset: 15692},
			expr: &actionExpr{
				pos: position{line: 427, col: 5, offset: 15704},
				run: (*parser).callonYieldOp1,
				expr: &seqExpr{
					pos: position{line: 427, col: 5, offset: 15704},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 427, col: 5, offset: 15704},
							val:        "yield",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 427, col: 13, offset: 15712},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 427, col: 15, offset: 15714},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 427, col: 21, offset: 15720},
								name: "Exprs",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeArg",
			pos:  position{line: 430, col: 1, offset: 15808},
			expr: &actionExpr{
				pos: position{line: 431, col: 5, offset: 15820},
				run: (*parser).callonTypeArg1,
				expr: &seqExpr{
					pos: position{line: 431, col: 5, offset: 15820},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 431, col: 5, offset: 15820},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 431, col: 7, offset: 15822},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 431, col: 10, offset: 15825},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 431, col: 12, offset: 15827},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 431, col: 16, offset: 15831},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "AsArg",
			pos:  position{line: 432, col: 1, offset: 15856},
			expr: &actionExpr{
				pos: position{line: 433, col: 5, offset: 15866},
				run: (*parser).callonAsArg1,
				expr: &seqExpr{
					pos: position{line: 433, col: 5, offset: 15866},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 433, col: 5, offset: 15866},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 433, col: 7, offset: 15868},
							name: "AS",
						},
						&ruleRefExpr{
							pos:  position{line: 433, col: 10, offset: 15871},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 433, col: 12, offset: 15873},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 433, col: 16, offset: 15877},
								name: "Lval",
							},
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 434, col: 1, offset: 15902},
			expr: &ruleRefExpr{
				pos:  position{line: 434, col: 8, offset: 15909},
				name: "DerefExpr",
			},
		},
		{
			name: "Lvals",
			pos:  position{line: 435, col: 1, offset: 15919},
			expr: &actionExpr{
				pos: position{line: 436, col: 5, offset: 15929},
				run: (*parser).callonLvals1,
				expr: &seqExpr{
					pos: position{line: 436, col: 5, offset: 15929},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 436, col: 5, offset: 15929},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 436, col: 11, offset: 15935},
								name: "Lval",
							},
						},
						&labeledExpr{
							pos:   position{line: 436, col: 16, offset: 15940},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 436, col: 21, offset: 15945},
								expr: &actionExpr{
									pos: position{line: 436, col: 22, offset: 15946},
									run: (*parser).callonLvals7,
									expr: &seqExpr{
										pos: position{line: 436, col: 22, offset: 15946},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 436, col: 22, offset: 15946},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 436, col: 25, offset: 15949},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 436, col: 29, offset: 15953},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 436, col: 32, offset: 15956},
												label: "lval",
												expr: &ruleRefExpr{
													pos:  position{line: 436, col: 37, offset: 15961},
													name: "Lval",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 439, col: 1, offset: 16071},
			expr: &ruleRefExpr{
				pos:  position{line: 439, col: 13, offset: 16083},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 440, col: 1, offset: 16088},
			expr: &actionExpr{
				pos: position{line: 441, col: 5, offset: 16103},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 441, col: 5, offset: 16103},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 441, col: 5, offset: 16103},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 441, col: 11, offset: 16109},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 441, col: 21, offset: 16119},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 441, col: 26, offset: 16124},
								expr: &seqExpr{
									pos: position{line: 441, col: 27, offset: 16125},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 441, col: 27, offset: 16125},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 441, col: 30, offset: 16128},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 441, col: 34, offset: 16132},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 441, col: 37, offset: 16135},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignments",
			pos:  position{line: 448, col: 1, offset: 16329},
			expr: &actionExpr{
				pos: position{line: 449, col: 5, offset: 16345},
				run: (*parser).callonAssignments1,
				expr: &seqExpr{
					pos: position{line: 449, col: 5, offset: 16345},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 449, col: 5, offset: 16345},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 449, col: 11, offset: 16351},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 449, col: 22, offset: 16362},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 449, col: 27, offset: 16367},
								expr: &actionExpr{
									pos: position{line: 449, col: 28, offset: 16368},
									run: (*parser).callonAssignments7,
									expr: &seqExpr{
										pos: position{line: 449, col: 28, offset: 16368},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 449, col: 28, offset: 16368},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 449, col: 31, offset: 16371},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 449, col: 35, offset: 16375},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 449, col: 38, offset: 16378},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 449, col: 40, offset: 16380},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 452, col: 1, offset: 16489},
			expr: &actionExpr{
				pos: position{line: 453, col: 5, offset: 16504},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 453, col: 5, offset: 16504},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 453, col: 5, offset: 16504},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 453, col: 9, offset: 16508},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 453, col: 14, offset: 16513},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 453, col: 17, offset: 16516},
							val:        ":=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 453, col: 22, offset: 16521},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 453, col: 25, offset: 16524},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 453, col: 29, offset: 16528},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 454, col: 1, offset: 16618},
			expr: &ruleRefExpr{
				pos:  position{line: 454, col: 8, offset: 16625},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 455, col: 1, offset: 16641},
			expr: &actionExpr{
				pos: position{line: 456, col: 5, offset: 16661},
				run: (*parser).callonConditionalExpr1,
				expr: &seqExpr{
					pos: position{line: 456, col: 5, offset: 16661},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 456, col: 5, offset: 16661},
							label: "cond",
							expr: &ruleRefExpr{
								pos:  position{line: 456, col: 10, offset: 16666},
								name: "LogicalOrExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 456, col: 24, offset: 16680},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 456, col: 28, offset: 16684},
								expr: &seqExpr{
									pos: position{line: 456, col: 29, offset: 16685},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 456, col: 29, offset: 16685},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 456, col: 32, offset: 16688},
											val:        "?",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 456, col: 36, offset: 16692},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 456, col: 39, offset: 16695},
											name: "Expr",
										},
										&ruleRefExpr{
											pos:  position{line: 456, col: 44, offset: 16700},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 456, col: 47, offset: 16703},
											val:        ":",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 456, col: 51, offset: 16707},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 456, col: 54, offset: 16710},
											name: "Expr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 464, col: 1, offset: 16970},
			expr: &actionExpr{
				pos: position{line: 465, col: 5, offset: 16988},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 465, col: 5, offset: 16988},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 465, col: 5, offset: 16988},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 465, col: 11, offset: 16994},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 466, col: 5, offset: 17013},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 466, col: 10, offset: 17018},
								expr: &actionExpr{
									pos: position{line: 466, col: 11, offset: 17019},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 466, col: 11, offset: 17019},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 466, col: 11, offset: 17019},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 466, col: 14, offset: 17022},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 466, col: 17, offset: 17025},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 466, col: 25, offset: 17033},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 466, col: 28, offset: 17036},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 466, col: 33, offset: 17041},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 469, col: 1, offset: 17159},
			expr: &actionExpr{
				pos: position{line: 470, col: 5, offset: 17178},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 470, col: 5, offset: 17178},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 470, col: 5, offset: 17178},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 470, col: 11, offset: 17184},
								name: "ComparisonExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 471, col: 5, offset: 17203},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 471, col: 10, offset: 17208},
								expr: &actionExpr{
									pos: position{line: 471, col: 11, offset: 17209},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 471, col: 11, offset: 17209},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 471, col: 11, offset: 17209},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 471, col: 14, offset: 17212},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 471, col: 17, offset: 17215},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 471, col: 26, offset: 17224},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 471, col: 29, offset: 17227},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 471, col: 34, offset: 17232},
													name: "ComparisonExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ComparisonExpr",
			pos:  position{line: 474, col: 1, offset: 17350},
			expr: &actionExpr{
				pos: position{line: 475, col: 5, offset: 17369},
				run: (*parser).callonComparisonExpr1,
				expr: &seqExpr{
					pos: position{line: 475, col: 5, offset: 17369},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 475, col: 5, offset: 17369},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 475, col: 9, offset: 17373},
								name: "AdditiveExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 475, col: 22, offset: 17386},
							label: "opAndRHS",
							expr: &zeroOrOneExpr{
								pos: position{line: 475, col: 31, offset: 17395},
								expr: &choiceExpr{
									pos: position{line: 475, col: 32, offset: 17396},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 475, col: 32, offset: 17396},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 475, col: 32, offset: 17396},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 475, col: 35, offset: 17399},
													name: "Comparator",
												},
												&ruleRefExpr{
													pos:  position{line: 475, col: 46, offset: 17410},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 475, col: 49, offset: 17413},
													name: "AdditiveExpr",
												},
											},
										},
										&seqExpr{
											pos: position{line: 475, col: 64, offset: 17428},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 475, col: 64, offset: 17428},
													name: "__",
												},
												&actionExpr{
													pos: position{line: 475, col: 68, offset: 17432},
													run: (*parser).callonComparisonExpr15,
													expr: &litMatcher{
														pos:        position{line: 475, col: 68, offset: 17432},
														val:        "~",
														ignoreCase: false,
													},
												},
												&ruleRefExpr{
													pos:  position{line: 475, col: 104, offset: 17468},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 475, col: 107, offset: 17471},
													name: "Regexp",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 483, col: 1, offset: 17731},
			expr: &actionExpr{
				pos: position{line: 484, col: 5, offset: 17748},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 484, col: 5, offset: 17748},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 484, col: 5, offset: 17748},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 484, col: 11, offset: 17754},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 485, col: 5, offset: 17777},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 485, col: 10, offset: 17782},
								expr: &actionExpr{
									pos: position{line: 485, col: 11, offset: 17783},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 485, col: 11, offset: 17783},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 485, col: 11, offset: 17783},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 485, col: 14, offset: 17786},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 485, col: 17, offset: 17789},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 485, col: 34, offset: 17806},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 485, col: 37, offset: 17809},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 485, col: 42, offset: 17814},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 488, col: 1, offset: 17936},
			expr: &actionExpr{
				pos: position{line: 488, col: 20, offset: 17955},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 488, col: 21, offset: 17956},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 488, col: 21, offset: 17956},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 488, col: 27, offset: 17962},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 489, col: 1, offset: 17998},
			expr: &actionExpr{
				pos: position{line: 490, col: 5, offset: 18021},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 490, col: 5, offset: 18021},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 490, col: 5, offset: 18021},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 490, col: 11, offset: 18027},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 491, col: 5, offset: 18039},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 491, col: 10, offset: 18044},
								expr: &actionExpr{
									pos: position{line: 491, col: 11, offset: 18045},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 491, col: 11, offset: 18045},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 491, col: 11, offset: 18045},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 491, col: 14, offset: 18048},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 491, col: 17, offset: 18051},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 491, col: 40, offset: 18074},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 491, col: 43, offset: 18077},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 491, col: 48, offset: 18082},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 494, col: 1, offset: 18193},
			expr: &actionExpr{
				pos: position{line: 494, col: 26, offset: 18218},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 494, col: 27, offset: 18219},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 494, col: 27, offset: 18219},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 494, col: 33, offset: 18225},
							val:        "/",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 494, col: 39, offset: 18231},
							val:        "%",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 495, col: 1, offset: 18267},
			expr: &choiceExpr{
				pos: position{line: 496, col: 5, offset: 18279},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 496, col: 5, offset: 18279},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 496, col: 5, offset: 18279},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 496, col: 5, offset: 18279},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 496, col: 9, offset: 18283},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 496, col: 12, offset: 18286},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 496, col: 14, offset: 18288},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 499, col: 5, offset: 18397},
						name: "NegationExpr",
					},
				},
			},
		},
		{
			name: "NegationExpr",
			pos:  position{line: 500, col: 1, offset: 18410},
			expr: &choiceExpr{
				pos: position{line: 501, col: 5, offset: 18427},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 501, col: 5, offset: 18427},
						run: (*parser).callonNegationExpr2,
						expr: &seqExpr{
							pos: position{line: 501, col: 5, offset: 18427},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 501, col: 5, offset: 18427},
									expr: &ruleRefExpr{
										pos:  position{line: 501, col: 6, offset: 18428},
										name: "Literal",
									},
								},
								&litMatcher{
									pos:        position{line: 501, col: 14, offset: 18436},
									val:        "-",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 501, col: 18, offset: 18440},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 501, col: 21, offset: 18443},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 501, col: 23, offset: 18445},
										name: "FuncExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 504, col: 5, offset: 18555},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 505, col: 1, offset: 18564},
			expr: &choiceExpr{
				pos: position{line: 506, col: 5, offset: 18577},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 506, col: 5, offset: 18577},
						run: (*parser).callonFuncExpr2,
						expr: &seqExpr{
							pos: position{line: 506, col: 5, offset: 18577},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 506, col: 5, offset: 18577},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 506, col: 11, offset: 18583},
										name: "Cast",
									},
								},
								&labeledExpr{
									pos:   position{line: 506, col: 16, offset: 18588},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 506, col: 21, offset: 18593},
										expr: &ruleRefExpr{
											pos:  position{line: 506, col: 22, offset: 18594},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 509, col: 5, offset: 18665},
						run: (*parser).callonFuncExpr9,
						expr: &seqExpr{
							pos: position{line: 509, col: 5, offset: 18665},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 509, col: 5, offset: 18665},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 509, col: 11, offset: 18671},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 509, col: 20, offset: 18680},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 509, col: 25, offset: 18685},
										expr: &ruleRefExpr{
											pos:  position{line: 509, col: 26, offset: 18686},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 512, col: 5, offset: 18757},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 513, col: 5, offset: 18771},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FuncGuard",
			pos:  position{line: 514, col: 1, offset: 18779},
			expr: &seqExpr{
				pos: position{line: 514, col: 13, offset: 18791},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 514, col: 13, offset: 18791},
						name: "NotFuncs",
					},
					&ruleRefExpr{
						pos:  position{line: 514, col: 22, offset: 18800},
						name: "__",
					},
					&litMatcher{
						pos:        position{line: 514, col: 25, offset: 18803},
						val:        "(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "NotFuncs",
			pos:  position{line: 515, col: 1, offset: 18807},
			expr: &choiceExpr{
				pos: position{line: 516, col: 5, offset: 18820},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 516, col: 5, offset: 18820},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 517, col: 5, offset: 18830},
						val:        "select",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Cast",
			pos:  position{line: 518, col: 1, offset: 18839},
			expr: &actionExpr{
				pos: position{line: 519, col: 5, offset: 18848},
				run: (*parser).callonCast1,
				expr: &seqExpr{
					pos: position{line: 519, col: 5, offset: 18848},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 519, col: 5, offset: 18848},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 519, col: 9, offset: 18852},
								name: "CastType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 519, col: 18, offset: 18861},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 519, col: 21, offset: 18864},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 519, col: 25, offset: 18868},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 519, col: 28, offset: 18871},
							label: "expr",
							expr: &choiceExpr{
								pos: position{line: 519, col: 34, offset: 18877},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 519, col: 34, offset: 18877},
										name: "OverExpr",
									},
									&ruleRefExpr{
										pos:  position{line: 519, col: 45, offset: 18888},
										name: "Expr",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 519, col: 51, offset: 18894},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 519, col: 54, offset: 18897},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 522, col: 1, offset: 18993},
			expr: &choiceExpr{
				pos: position{line: 523, col: 5, offset: 19006},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 523, col: 5, offset: 19006},
						name: "Grep",
					},
					&actionExpr{
						pos: position{line: 524, col: 5, offset: 19015},
						run: (*parser).callonFunction3,
						expr: &seqExpr{
							pos: position{line: 524, col: 5, offset: 19015},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 524, col: 5, offset: 19015},
									val:        "regexp",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 524, col: 14, offset: 19024},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 524, col: 17, offset: 19027},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 524, col: 21, offset: 19031},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 524, col: 24, offset: 19034},
									label: "arg0Text",
									expr: &ruleRefExpr{
										pos:  position{line: 524, col: 33, offset: 19043},
										name: "RegexpPattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 524, col: 47, offset: 19057},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 524, col: 50, offset: 19060},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 524, col: 54, offset: 19064},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 524, col: 57, offset: 19067},
									label: "arg1",
									expr: &ruleRefExpr{
										pos:  position{line: 524, col: 62, offset: 19072},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 524, col: 67, offset: 19077},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 524, col: 70, offset: 19080},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 524, col: 74, offset: 19084},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 524, col: 80, offset: 19090},
										expr: &ruleRefExpr{
											pos:  position{line: 524, col: 80, offset: 19090},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 528, col: 5, offset: 19338},
						run: (*parser).callonFunction21,
						expr: &seqExpr{
							pos: position{line: 528, col: 5, offset: 19338},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 528, col: 5, offset: 19338},
									val:        "regexp_replace",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 528, col: 22, offset: 19355},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 528, col: 25, offset: 19358},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 528, col: 29, offset: 19362},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 528, col: 32, offset: 19365},
									label: "arg0",
									expr: &ruleRefExpr{
										pos:  position{line: 528, col: 37, offset: 19370},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 528, col: 42, offset: 19375},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 528, col: 45, offset: 19378},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 528, col: 49, offset: 19382},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 528, col: 52, offset: 19385},
									label: "arg1Text",
									expr: &ruleRefExpr{
										pos:  position{line: 528, col: 61, offset: 19394},
										name: "RegexpPattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 528, col: 75, offset: 19408},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 528, col: 78, offset: 19411},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 528, col: 82, offset: 19415},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 528, col: 85, offset: 19418},
									label: "arg2",
									expr: &ruleRefExpr{
										pos:  position{line: 528, col: 90, offset: 19423},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 528, col: 95, offset: 19428},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 528, col: 98, offset: 19431},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 528, col: 102, offset: 19435},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 528, col: 108, offset: 19441},
										expr: &ruleRefExpr{
											pos:  position{line: 528, col: 108, offset: 19441},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 532, col: 5, offset: 19703},
						run: (*parser).callonFunction44,
						expr: &seqExpr{
							pos: position{line: 532, col: 5, offset: 19703},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 532, col: 5, offset: 19703},
									expr: &ruleRefExpr{
										pos:  position{line: 532, col: 6, offset: 19704},
										name: "FuncGuard",
									},
								},
								&labeledExpr{
									pos:   position{line: 532, col: 16, offset: 19714},
									label: "fn",
									expr: &ruleRefExpr{
										pos:  position{line: 532, col: 19, offset: 19717},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 532, col: 34, offset: 19732},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 532, col: 37, offset: 19735},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 532, col: 41, offset: 19739},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 532, col: 44, offset: 19742},
									label: "args",
									expr: &ruleRefExpr{
										pos:  position{line: 532, col: 49, offset: 19747},
										name: "FunctionArgs",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 532, col: 62, offset: 19760},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 532, col: 65, offset: 19763},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 532, col: 69, offset: 19767},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 532, col: 75, offset: 19773},
										expr: &ruleRefExpr{
											pos:  position{line: 532, col: 75, offset: 19773},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FunctionArgs",
			pos:  position{line: 535, col: 1, offset: 19893},
			expr: &choiceExpr{
				pos: position{line: 536, col: 5, offset: 19910},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 536, col: 5, offset: 19910},
						run: (*parser).callonFunctionArgs2,
						expr: &labeledExpr{
							pos:   position{line: 536, col: 5, offset: 19910},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 536, col: 7, offset: 19912},
								name: "OverExpr",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 537, col: 5, offset: 19958},
						name: "OptionalExprs",
					},
				},
			},
		},
		{
			name: "Grep",
			pos:  position{line: 538, col: 1, offset: 19972},
			expr: &actionExpr{
				pos: position{line: 539, col: 5, offset: 19981},
				run: (*parser).callonGrep1,
				expr: &seqExpr{
					pos: position{line: 539, col: 5, offset: 19981},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 539, col: 5, offset: 19981},
							val:        "grep",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 539, col: 12, offset: 19988},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 539, col: 15, offset: 19991},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 539, col: 19, offset: 19995},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 539, col: 22, offset: 19998},
							label: "pattern",
							expr: &ruleRefExpr{
								pos:  position{line: 539, col: 30, offset: 20006},
								name: "Pattern",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 539, col: 38, offset: 20014},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 539, col: 41, offset: 20017},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 539, col: 45, offset: 20021},
								expr: &seqExpr{
									pos: position{line: 539, col: 46, offset: 20022},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 539, col: 46, offset: 20022},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 539, col: 50, offset: 20026},
											name: "__",
										},
										&choiceExpr{
											pos: position{line: 539, col: 54, offset: 20030},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 539, col: 54, offset: 20030},
													name: "OverExpr",
												},
												&ruleRefExpr{
													pos:  position{line: 539, col: 65, offset: 20041},
													name: "Expr",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 539, col: 71, offset: 20047},
											name: "__",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 539, col: 76, offset: 20052},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Pattern",
			pos:  position{line: 546, col: 1, offset: 20292},
			expr: &choiceExpr{
				pos: position{line: 547, col: 5, offset: 20304},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 547, col: 5, offset: 20304},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 548, col: 5, offset: 20315},
						name: "Glob",
					},
					&actionExpr{
						pos: position{line: 549, col: 5, offset: 20324},
						run: (*parser).callonPattern4,
						expr: &labeledExpr{
							pos:   position{line: 549, col: 5, offset: 20324},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 549, col: 7, offset: 20326},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "OptionalExprs",
			pos:  position{line: 552, col: 1, offset: 20417},
			expr: &choiceExpr{
				pos: position{line: 553, col: 5, offset: 20435},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 553, col: 5, offset: 20435},
						name: "Exprs",
					},
					&actionExpr{
						pos: position{line: 554, col: 5, offset: 20445},
						run: (*parser).callonOptionalExprs3,
						expr: &ruleRefExpr{
							pos:  position{line: 554, col: 5, offset: 20445},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 555, col: 1, offset: 20480},
			expr: &actionExpr{
				pos: position{line: 556, col: 5, offset: 20490},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 556, col: 5, offset: 20490},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 556, col: 5, offset: 20490},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 556, col: 11, offset: 20496},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 556, col: 16, offset: 20501},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 556, col: 21, offset: 20506},
								expr: &actionExpr{
									pos: position{line: 556, col: 22, offset: 20507},
									run: (*parser).callonExprs7,
									expr: &seqExpr{
										pos: position{line: 556, col: 22, offset: 20507},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 556, col: 22, offset: 20507},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 556, col: 25, offset: 20510},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 556, col: 29, offset: 20514},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 556, col: 32, offset: 20517},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 556, col: 34, offset: 20519},
													name: "Expr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 559, col: 1, offset: 20626},
			expr: &actionExpr{
				pos: position{line: 560, col: 5, offset: 20640},
				run: (*parser).callonDerefExpr1,
				expr: &seqExpr{
					pos: position{line: 560, col: 5, offset: 20640},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 560, col: 5, offset: 20640},
							expr: &ruleRefExpr{
								pos:  position{line: 560, col: 6, offset: 20641},
								name: "IP6",
							},
						},
						&labeledExpr{
							pos:   position{line: 560, col: 10, offset: 20645},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 560, col: 16, offset: 20651},
								name: "Identifier",
							},
						},
						&labeledExpr{
							pos:   position{line: 560, col: 27, offset: 20662},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 560, col: 32, offset: 20667},
								expr: &ruleRefExpr{
									pos:  position{line: 560, col: 33, offset: 20668},
									name: "Deref",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 563, col: 1, offset: 20735},
			expr: &choiceExpr{
				pos: position{line: 564, col: 5, offset: 20745},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 564, col: 5, offset: 20745},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 564, col: 5, offset: 20745},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 564, col: 5, offset: 20745},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 564, col: 9, offset: 20749},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 564, col: 14, offset: 20754},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 564, col: 27, offset: 20767},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 564, col: 30, offset: 20770},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 564, col: 34, offset: 20774},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 564, col: 37, offset: 20777},
									label: "to",
									expr: &zeroOrOneExpr{
										pos: position{line: 564, col: 40, offset: 20780},
										expr: &ruleRefExpr{
											pos:  position{line: 564, col: 40, offset: 20780},
											name: "AdditiveExpr",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 564, col: 54, offset: 20794},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 567, col: 5, offset: 20928},
						run: (*parser).callonDeref14,
						expr: &seqExpr{
							pos: position{line: 567, col: 5, offset: 20928},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 567, col: 5, offset: 20928},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 567, col: 9, offset: 20932},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 567, col: 12, offset: 20935},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 567, col: 16, offset: 20939},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 567, col: 19, offset: 20942},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 567, col: 22, offset: 20945},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 567, col: 35, offset: 20958},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 570, col: 5, offset: 21091},
						run: (*parser).callonDeref23,
						expr: &seqExpr{
							pos: position{line: 570, col: 5, offset: 21091},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 570, col: 5, offset: 21091},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 570, col: 9, offset: 21095},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 570, col: 14, offset: 21100},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 570, col: 19, offset: 21105},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 571, col: 5, offset: 21154},
						run: (*parser).callonDeref29,
						expr: &seqExpr{
							pos: position{line: 571, col: 5, offset: 21154},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 571, col: 5, offset: 21154},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 571, col: 9, offset: 21158},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 571, col: 12, offset: 21161},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 572, col: 1, offset: 21211},
			expr: &choiceExpr{
				pos: position{line: 573, col: 5, offset: 21223},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 573, col: 5, offset: 21223},
						name: "Record",
					},
					&ruleRefExpr{
						pos:  position{line: 574, col: 5, offset: 21234},
						name: "Array",
					},
					&ruleRefExpr{
						pos:  position{line: 575, col: 5, offset: 21244},
						name: "Set",
					},
					&ruleRefExpr{
						pos:  position{line: 576, col: 5, offset: 21252},
						name: "Map",
					},
					&ruleRefExpr{
						pos:  position{line: 577, col: 5, offset: 21260},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 578, col: 5, offset: 21272},
						run: (*parser).callonPrimary7,
						expr: &seqExpr{
							pos: position{line: 578, col: 5, offset: 21272},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 578, col: 5, offset: 21272},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 578, col: 9, offset: 21276},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 578, col: 12, offset: 21279},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 578, col: 17, offset: 21284},
										name: "OverExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 578, col: 26, offset: 21293},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 578, col: 29, offset: 21296},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 579, col: 5, offset: 21325},
						run: (*parser).callonPrimary15,
						expr: &seqExpr{
							pos: position{line: 579, col: 5, offset: 21325},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 579, col: 5, offset: 21325},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 579, col: 9, offset: 21329},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 579, col: 12, offset: 21332},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 579, col: 17, offset: 21337},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 579, col: 22, offset: 21342},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 579, col: 25, offset: 21345},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OverExpr",
			pos:  position{line: 580, col: 1, offset: 21370},
			expr: &actionExpr{
				pos: position{line: 581, col: 5, offset: 21383},
				run: (*parser).callonOverExpr1,
				expr: &seqExpr{
					pos: position{line: 581, col: 5, offset: 21383},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 581, col: 5, offset: 21383},
							val:        "over",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 581, col: 12, offset: 21390},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 581, col: 14, offset: 21392},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 581, col: 20, offset: 21398},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 581, col: 26, offset: 21404},
							label: "locals",
							expr: &zeroOrOneExpr{
								pos: position{line: 581, col: 33, offset: 21411},
								expr: &ruleRefExpr{
									pos:  position{line: 581, col: 33, offset: 21411},
									name: "Locals",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 581, col: 41, offset: 21419},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 581, col: 44, offset: 21422},
							val:        "|",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 581, col: 48, offset: 21426},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 581, col: 51, offset: 21429},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 581, col: 56, offset: 21434},
								name: "Seq",
							},
						},
					},
				},
			},
		},
		{
			name: "Record",
			pos:  position{line: 584, col: 1, offset: 21555},
			expr: &actionExpr{
				pos: position{line: 585, col: 5, offset: 21566},
				run: (*parser).callonRecord1,
				expr: &seqExpr{
					pos: position{line: 585, col: 5, offset: 21566},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 585, col: 5, offset: 21566},
							val:        "{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 585, col: 9, offset: 21570},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 585, col: 12, offset: 21573},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 585, col: 18, offset: 21579},
								name: "RecordElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 585, col: 30, offset: 21591},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 585, col: 33, offset: 21594},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RecordElems",
			pos:  position{line: 588, col: 1, offset: 21685},
			expr: &choiceExpr{
				pos: position{line: 589, col: 5, offset: 21701},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 589, col: 5, offset: 21701},
						run: (*parser).callonRecordElems2,
						expr: &seqExpr{
							pos: position{line: 589, col: 5, offset: 21701},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 589, col: 5, offset: 21701},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 589, col: 11, offset: 21707},
										name: "RecordElem",
									},
								},
								&labeledExpr{
									pos:   position{line: 589, col: 22, offset: 21718},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 589, col: 27, offset: 21723},
										expr: &ruleRefExpr{
											pos:  position{line: 589, col: 27, offset: 21723},
											name: "RecordElemTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 592, col: 5, offset: 21821},
						run: (*parser).callonRecordElems9,
						expr: &ruleRefExpr{
							pos:  position{line: 592, col: 5, offset: 21821},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "RecordElemTail",
			pos:  position{line: 593, col: 1, offset: 21856},
			expr: &actionExpr{
				pos: position{line: 593, col: 18, offset: 21873},
				run: (*parser).callonRecordElemTail1,
				expr: &seqExpr{
					pos: position{line: 593, col: 18, offset: 21873},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 593, col: 18, offset: 21873},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 593, col: 21, offset: 21876},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 593, col: 25, offset: 21880},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 593, col: 28, offset: 21883},
							label: "elem",
							expr: &ruleRefExpr{
								pos:  position{line: 593, col: 33, offset: 21888},
								name: "RecordElem",
							},
						},
					},
				},
			},
		},
		{
			name: "RecordElem",
			pos:  position{line: 594, col: 1, offset: 21920},
			expr: &choiceExpr{
				pos: position{line: 595, col: 5, offset: 21935},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 595, col: 5, offset: 21935},
						name: "Spread",
					},
					&ruleRefExpr{
						pos:  position{line: 596, col: 5, offset: 21946},
						name: "Field",
					},
					&ruleRefExpr{
						pos:  position{line: 597, col: 5, offset: 21956},
						name: "Identifier",
					},
				},
			},
		},
		{
			name: "Spread",
			pos:  position{line: 598, col: 1, offset: 21967},
			expr: &actionExpr{
				pos: position{line: 599, col: 5, offset: 21978},
				run: (*parser).callonSpread1,
				expr: &seqExpr{
					pos: position{line: 599, col: 5, offset: 21978},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 599, col: 5, offset: 21978},
							val:        "...",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 599, col: 11, offset: 21984},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 599, col: 14, offset: 21987},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 599, col: 19, offset: 21992},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 602, col: 1, offset: 22078},
			expr: &actionExpr{
				pos: position{line: 603, col: 5, offset: 22088},
				run: (*parser).callonField1,
				expr: &seqExpr{
					pos: position{line: 603, col: 5, offset: 22088},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 603, col: 5, offset: 22088},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 603, col: 10, offset: 22093},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 603, col: 20, offset: 22103},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 603, col: 23, offset: 22106},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 603, col: 27, offset: 22110},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 603, col: 30, offset: 22113},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 603, col: 36, offset: 22119},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Array",
			pos:  position{line: 606, col: 1, offset: 22220},
			expr: &actionExpr{
				pos: position{line: 607, col: 5, offset: 22230},
				run: (*parser).callonArray1,
				expr: &seqExpr{
					pos: position{line: 607, col: 5, offset: 22230},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 607, col: 5, offset: 22230},
							val:        "[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 607, col: 9, offset: 22234},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 607, col: 12, offset: 22237},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 607, col: 18, offset: 22243},
								name: "VectorElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 607, col: 30, offset: 22255},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 607, col: 33, offset: 22258},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Set",
			pos:  position{line: 610, col: 1, offset: 22348},
			expr: &actionExpr{
				pos: position{line: 611, col: 5, offset: 22356},
				run: (*parser).callonSet1,
				expr: &seqExpr{
					pos: position{line: 611, col: 5, offset: 22356},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 611, col: 5, offset: 22356},
							val:        "|[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 611, col: 10, offset: 22361},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 611, col: 13, offset: 22364},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 611, col: 19, offset: 22370},
								name: "VectorElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 611, col: 31, offset: 22382},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 611, col: 34, offset: 22385},
							val:        "]|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "VectorElems",
			pos:  position{line: 614, col: 1, offset: 22474},
			expr: &choiceExpr{
				pos: position{line: 615, col: 5, offset: 22490},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 615, col: 5, offset: 22490},
						run: (*parser).callonVectorElems2,
						expr: &seqExpr{
							pos: position{line: 615, col: 5, offset: 22490},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 615, col: 5, offset: 22490},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 615, col: 11, offset: 22496},
										name: "VectorElem",
									},
								},
								&labeledExpr{
									pos:   position{line: 615, col: 22, offset: 22507},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 615, col: 27, offset: 22512},
										expr: &actionExpr{
											pos: position{line: 615, col: 28, offset: 22513},
											run: (*parser).callonVectorElems8,
											expr: &seqExpr{
												pos: position{line: 615, col: 28, offset: 22513},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 615, col: 28, offset: 22513},
														name: "__",
													},
													&litMatcher{
														pos:        position{line: 615, col: 31, offset: 22516},
														val:        ",",
														ignoreCase: false,
													},
													&ruleRefExpr{
														pos:  position{line: 615, col: 35, offset: 22520},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 615, col: 38, offset: 22523},
														label: "e",
														expr: &ruleRefExpr{
															pos:  position{line: 615, col: 40, offset: 22525},
															name: "VectorElem",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 618, col: 5, offset: 22642},
						run: (*parser).callonVectorElems15,
						expr: &ruleRefExpr{
							pos:  position{line: 618, col: 5, offset: 22642},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "VectorElem",
			pos:  position{line: 619, col: 1, offset: 22677},
			expr: &choiceExpr{
				pos: position{line: 620, col: 5, offset: 22692},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 620, col: 5, offset: 22692},
						name: "Spread",
					},
					&actionExpr{
						pos: position{line: 621, col: 5, offset: 22703},
						run: (*parser).callonVectorElem3,
						expr: &labeledExpr{
							pos:   position{line: 621, col: 5, offset: 22703},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 621, col: 7, offset: 22705},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Map",
			pos:  position{line: 622, col: 1, offset: 22783},
			expr: &actionExpr{
				pos: position{line: 623, col: 5, offset: 22791},
				run: (*parser).callonMap1,
				expr: &seqExpr{
					pos: position{line: 623, col: 5, offset: 22791},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 623, col: 5, offset: 22791},
							val:        "|{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 623, col: 10, offset: 22796},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 623, col: 13, offset: 22799},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 623, col: 19, offset: 22805},
								name: "Entries",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 623, col: 27, offset: 22813},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 623, col: 30, offset: 22816},
							val:        "}|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Entries",
			pos:  position{line: 626, col: 1, offset: 22907},
			expr: &choiceExpr{
				pos: position{line: 627, col: 5, offset: 22919},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 627, col: 5, offset: 22919},
						run: (*parser).callonEntries2,
						expr: &seqExpr{
							pos: position{line: 627, col: 5, offset: 22919},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 627, col: 5, offset: 22919},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 627, col: 11, offset: 22925},
										name: "Entry",
									},
								},
								&labeledExpr{
									pos:   position{line: 627, col: 17, offset: 22931},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 627, col: 22, offset: 22936},
										expr: &ruleRefExpr{
											pos:  position{line: 627, col: 22, offset: 22936},
											name: "EntryTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 630, col: 5, offset: 23029},
						run: (*parser).callonEntries9,
						expr: &ruleRefExpr{
							pos:  position{line: 630, col: 5, offset: 23029},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "EntryTail",
			pos:  position{line: 631, col: 1, offset: 23064},
			expr: &actionExpr{
				pos: position{line: 631, col: 13, offset: 23076},
				run: (*parser).callonEntryTail1,
				expr: &seqExpr{
					pos: position{line: 631, col: 13, offset: 23076},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 631, col: 13, offset: 23076},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 631, col: 16, offset: 23079},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 631, col: 20, offset: 23083},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 631, col: 23, offset: 23086},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 631, col: 25, offset: 23088},
								name: "Entry",
							},
						},
					},
				},
			},
		},
		{
			name: "Entry",
			pos:  position{line: 632, col: 1, offset: 23112},
			expr: &actionExpr{
				pos: position{line: 633, col: 5, offset: 23122},
				run: (*parser).callonEntry1,
				expr: &seqExpr{
					pos: position{line: 633, col: 5, offset: 23122},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 633, col: 5, offset: 23122},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 633, col: 9, offset: 23126},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 633, col: 14, offset: 23131},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 633, col: 17, offset: 23134},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 633, col: 21, offset: 23138},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 633, col: 24, offset: 23141},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 633, col: 30, offset: 23147},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOp",
			pos:  position{line: 636, col: 1, offset: 23229},
			expr: &actionExpr{
				pos: position{line: 637, col: 5, offset: 23239},
				run: (*parser).callonSQLOp1,
				expr: &seqExpr{
					pos: position{line: 637, col: 5, offset: 23239},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 637, col: 5, offset: 23239},
							label: "selection",
							expr: &ruleRefExpr{
								pos:  position{line: 637, col: 15, offset: 23249},
								name: "SQLSelect",
							},
						},
						&labeledExpr{
							pos:   position{line: 638, col: 5, offset: 23263},
							label: "from",
							expr: &zeroOrOneExpr{
								pos: position{line: 638, col: 10, offset: 23268},
								expr: &ruleRefExpr{
									pos:  position{line: 638, col: 10, offset: 23268},
									name: "SQLFrom",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 639, col: 5, offset: 23281},
							label: "joins",
							expr: &zeroOrOneExpr{
								pos: position{line: 639, col: 11, offset: 23287},
								expr: &ruleRefExpr{
									pos:  position{line: 639, col: 11, offset: 23287},
									name: "SQLJoins",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 640, col: 5, offset: 23301},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 640, col: 11, offset: 23307},
								expr: &ruleRefExpr{
									pos:  position{line: 640, col: 11, offset: 23307},
									name: "SQLWhere",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 641, col: 5, offset: 23321},
							label: "groupby",
							expr: &zeroOrOneExpr{
								pos: position{line: 641, col: 13, offset: 23329},
								expr: &ruleRefExpr{
									pos:  position{line: 641, col: 13, offset: 23329},
									name: "SQLGroupBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 642, col: 5, offset: 23345},
							label: "having",
							expr: &zeroOrOneExpr{
								pos: position{line: 642, col: 12, offset: 23352},
								expr: &ruleRefExpr{
									pos:  position{line: 642, col: 12, offset: 23352},
									name: "SQLHaving",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 643, col: 5, offset: 23367},
							label: "orderby",
							expr: &zeroOrOneExpr{
								pos: position{line: 643, col: 13, offset: 23375},
								expr: &ruleRefExpr{
									pos:  position{line: 643, col: 13, offset: 23375},
									name: "SQLOrderBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 644, col: 5, offset: 23391},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 644, col: 11, offset: 23397},
								name: "SQLLimit",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLSelect",
			pos:  position{line: 648, col: 1, offset: 23621},
			expr: &choiceExpr{
				pos: position{line: 649, col: 5, offset: 23635},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 649, col: 5, offset: 23635},
						run: (*parser).callonSQLSelect2,
						expr: &seqExpr{
							pos: position{line: 649, col: 5, offset: 23635},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 649, col: 5, offset: 23635},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 649, col: 12, offset: 23642},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 649, col: 14, offset: 23644},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 650, col: 5, offset: 23672},
						run: (*parser).callonSQLSelect7,
						expr: &seqExpr{
							pos: position{line: 650, col: 5, offset: 23672},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 650, col: 5, offset: 23672},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 650, col: 12, offset: 23679},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 650, col: 14, offset: 23681},
									label: "assignments",
									expr: &ruleRefExpr{
										pos:  position{line: 650, col: 26, offset: 23693},
										name: "SQLAssignments",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignment",
			pos:  position{line: 651, col: 1, offset: 23736},
			expr: &actionExpr{
				pos: position{line: 652, col: 5, offset: 23754},
				run: (*parser).callonSQLAssignment1,
				expr: &seqExpr{
					pos: position{line: 652, col: 5, offset: 23754},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 652, col: 5, offset: 23754},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 652, col: 9, offset: 23758},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 652, col: 14, offset: 23763},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 652, col: 18, offset: 23767},
								expr: &seqExpr{
									pos: position{line: 652, col: 19, offset: 23768},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 652, col: 19, offset: 23768},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 652, col: 21, offset: 23770},
											name: "AS",
										},
										&ruleRefExpr{
											pos:  position{line: 652, col: 24, offset: 23773},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 652, col: 26, offset: 23775},
											name: "Lval",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignments",
			pos:  position{line: 659, col: 1, offset: 23965},
			expr: &actionExpr{
				pos: position{line: 660, col: 5, offset: 23984},
				run: (*parser).callonSQLAssignments1,
				expr: &seqExpr{
					pos: position{line: 660, col: 5, offset: 23984},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 660, col: 5, offset: 23984},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 660, col: 11, offset: 23990},
								name: "SQLAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 660, col: 25, offset: 24004},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 660, col: 30, offset: 24009},
								expr: &actionExpr{
									pos: position{line: 660, col: 31, offset: 24010},
									run: (*parser).callonSQLAssignments7,
									expr: &seqExpr{
										pos: position{line: 660, col: 31, offset: 24010},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 660, col: 31, offset: 24010},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 660, col: 34, offset: 24013},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 660, col: 38, offset: 24017},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 660, col: 41, offset: 24020},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 660, col: 46, offset: 24025},
													name: "SQLAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLFrom",
			pos:  position{line: 663, col: 1, offset: 24144},
			expr: &choiceExpr{
				pos: position{line: 664, col: 5, offset: 24156},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 664, col: 5, offset: 24156},
						run: (*parser).callonSQLFrom2,
						expr: &seqExpr{
							pos: position{line: 664, col: 5, offset: 24156},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 664, col: 5, offset: 24156},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 664, col: 7, offset: 24158},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 664, col: 12, offset: 24163},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 664, col: 14, offset: 24165},
									label: "table",
									expr: &ruleRefExpr{
										pos:  position{line: 664, col: 20, offset: 24171},
										name: "SQLTable",
									},
								},
								&labeledExpr{
									pos:   position{line: 664, col: 29, offset: 24180},
									label: "alias",
									expr: &zeroOrOneExpr{
										pos: position{line: 664, col: 35, offset: 24186},
										expr: &ruleRefExpr{
											pos:  position{line: 664, col: 35, offset: 24186},
											name: "SQLAlias",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 667, col: 5, offset: 24281},
						run: (*parser).callonSQLFrom12,
						expr: &seqExpr{
							pos: position{line: 667, col: 5, offset: 24281},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 667, col: 5, offset: 24281},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 667, col: 7, offset: 24283},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 667, col: 12, offset: 24288},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 667, col: 14, offset: 24290},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAlias",
			pos:  position{line: 668, col: 1, offset: 24314},
			expr: &choiceExpr{
				pos: position{line: 669, col: 5, offset: 24327},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 669, col: 5, offset: 24327},
						run: (*parser).callonSQLAlias2,
						expr: &seqExpr{
							pos: position{line: 669, col: 5, offset: 24327},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 669, col: 5, offset: 24327},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 669, col: 7, offset: 24329},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 669, col: 10, offset: 24332},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 669, col: 12, offset: 24334},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 669, col: 15, offset: 24337},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 670, col: 5, offset: 24365},
						run: (*parser).callonSQLAlias9,
						expr: &seqExpr{
							pos: position{line: 670, col: 5, offset: 24365},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 670, col: 5, offset: 24365},
									name: "_",
								},
								&notExpr{
									pos: position{line: 670, col: 7, offset: 24367},
									expr: &seqExpr{
										pos: position{line: 670, col: 9, offset: 24369},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 670, col: 9, offset: 24369},
												name: "SQLTokenSentinels",
											},
											&ruleRefExpr{
												pos:  position{line: 670, col: 27, offset: 24387},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 670, col: 30, offset: 24390},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 670, col: 33, offset: 24393},
										name: "Lval",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLTable",
			pos:  position{line: 671, col: 1, offset: 24417},
			expr: &ruleRefExpr{
				pos:  position{line: 672, col: 5, offset: 24430},
				name: "Expr",
			},
		},
		{
			name: "SQLJoins",
			pos:  position{line: 673, col: 1, offset: 24435},
			expr: &actionExpr{
				pos: position{line: 674, col: 5, offset: 24448},
				run: (*parser).callonSQLJoins1,
				expr: &seqExpr{
					pos: position{line: 674, col: 5, offset: 24448},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 674, col: 5, offset: 24448},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 674, col: 11, offset: 24454},
								name: "SQLJoin",
							},
						},
						&labeledExpr{
							pos:   position{line: 674, col: 19, offset: 24462},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 674, col: 24, offset: 24467},
								expr: &actionExpr{
									pos: position{line: 674, col: 25, offset: 24468},
									run: (*parser).callonSQLJoins7,
									expr: &labeledExpr{
										pos:   position{line: 674, col: 25, offset: 24468},
										label: "join",
										expr: &ruleRefExpr{
											pos:  position{line: 674, col: 30, offset: 24473},
											name: "SQLJoin",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoin",
			pos:  position{line: 677, col: 1, offset: 24586},
			expr: &actionExpr{
				pos: position{line: 678, col: 5, offset: 24598},
				run: (*parser).callonSQLJoin1,
				expr: &seqExpr{
					pos: position{line: 678, col: 5, offset: 24598},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 678, col: 5, offset: 24598},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 678, col: 11, offset: 24604},
								name: "SQLJoinStyle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 678, col: 24, offset: 24617},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 678, col: 26, offset: 24619},
							name: "JOIN",
						},
						&ruleRefExpr{
							pos:  position{line: 678, col: 31, offset: 24624},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 678, col: 33, offset: 24626},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 678, col: 39, offset: 24632},
								name: "SQLTable",
							},
						},
						&labeledExpr{
							pos:   position{line: 678, col: 48, offset: 24641},
							label: "alias",
							expr: &zeroOrOneExpr{
								pos: position{line: 678, col: 54, offset: 24647},
								expr: &ruleRefExpr{
									pos:  position{line: 678, col: 54, offset: 24647},
									name: "SQLAlias",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 678, col: 64, offset: 24657},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 678, col: 66, offset: 24659},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 678, col: 69, offset: 24662},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 678, col: 71, offset: 24664},
							label: "leftKey",
							expr: &ruleRefExpr{
								pos:  position{line: 678, col: 79, offset: 24672},
								name: "JoinKey",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 678, col: 87, offset: 24680},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 678, col: 90, offset: 24683},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 678, col: 94, offset: 24687},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 678, col: 97, offset: 24690},
							label: "rightKey",
							expr: &ruleRefExpr{
								pos:  position{line: 678, col: 106, offset: 24699},
								name: "JoinKey",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoinStyle",
			pos:  position{line: 681, col: 1, offset: 24848},
			expr: &choiceExpr{
				pos: position{line: 682, col: 5, offset: 24865},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 682, col: 5, offset: 24865},
						run: (*parser).callonSQLJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 682, col: 5, offset: 24865},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 682, col: 5, offset: 24865},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 682, col: 7, offset: 24867},
									label: "style",
									expr: &choiceExpr{
										pos: position{line: 682, col: 14, offset: 24874},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 682, col: 14, offset: 24874},
												name: "ANTI",
											},
											&ruleRefExpr{
												pos:  position{line: 682, col: 21, offset: 24881},
												name: "INNER",
											},
											&ruleRefExpr{
												pos:  position{line: 682, col: 29, offset: 24889},
												name: "LEFT",
											},
											&ruleRefExpr{
												pos:  position{line: 682, col: 36, offset: 24896},
												name: "RIGHT",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 683, col: 5, offset: 24929},
						run: (*parser).callonSQLJoinStyle11,
						expr: &litMatcher{
							pos:        position{line: 683, col: 5, offset: 24929},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLWhere",
			pos:  position{line: 684, col: 1, offset: 24956},
			expr: &actionExpr{
				pos: position{line: 685, col: 5, offset: 24969},
				run: (*parser).callonSQLWhere1,
				expr: &seqExpr{
					pos: position{line: 685, col: 5, offset: 24969},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 685, col: 5, offset: 24969},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 685, col: 7, offset: 24971},
							name: "WHERE",
						},
						&ruleRefExpr{
							pos:  position{line: 685, col: 13, offset: 24977},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 685, col: 15, offset: 24979},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 685, col: 20, offset: 24984},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLGroupBy",
			pos:  position{line: 686, col: 1, offset: 25019},
			expr: &actionExpr{
				pos: position{line: 687, col: 5, offset: 25034},
				run: (*parser).callonSQLGroupBy1,
				expr: &seqExpr{
					pos: position{line: 687, col: 5, offset: 25034},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 687, col: 5, offset: 25034},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 687, col: 7, offset: 25036},
							name: "GROUP",
						},
						&ruleRefExpr{
							pos:  position{line: 687, col: 13, offset: 25042},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 687, col: 15, offset: 25044},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 687, col: 18, offset: 25047},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 687, col: 20, offset: 25049},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 687, col: 28, offset: 25057},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLHaving",
			pos:  position{line: 688, col: 1, offset: 25092},
			expr: &actionExpr{
				pos: position{line: 689, col: 5, offset: 25106},
				run: (*parser).callonSQLHaving1,
				expr: &seqExpr{
					pos: position{line: 689, col: 5, offset: 25106},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 689, col: 5, offset: 25106},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 689, col: 7, offset: 25108},
							name: "HAVING",
						},
						&ruleRefExpr{
							pos:  position{line: 689, col: 14, offset: 25115},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 689, col: 16, offset: 25117},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 689, col: 21, offset: 25122},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrderBy",
			pos:  position{line: 690, col: 1, offset: 25157},
			expr: &actionExpr{
				pos: position{line: 691, col: 5, offset: 25172},
				run: (*parser).callonSQLOrderBy1,
				expr: &seqExpr{
					pos: position{line: 691, col: 5, offset: 25172},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 691, col: 5, offset: 25172},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 691, col: 7, offset: 25174},
							name: "ORDER",
						},
						&ruleRefExpr{
							pos:  position{line: 691, col: 13, offset: 25180},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 691, col: 15, offset: 25182},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 691, col: 18, offset: 25185},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 691, col: 20, offset: 25187},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 691, col: 25, offset: 25192},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 691, col: 31, offset: 25198},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 691, col: 37, offset: 25204},
								name: "SQLOrder",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrder",
			pos:  position{line: 694, col: 1, offset: 25314},
			expr: &choiceExpr{
				pos: position{line: 695, col: 5, offset: 25327},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 695, col: 5, offset: 25327},
						run: (*parser).callonSQLOrder2,
						expr: &seqExpr{
							pos: position{line: 695, col: 5, offset: 25327},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 695, col: 5, offset: 25327},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 695, col: 7, offset: 25329},
									label: "dir",
									expr: &choiceExpr{
										pos: position{line: 695, col: 12, offset: 25334},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 695, col: 12, offset: 25334},
												name: "ASC",
											},
											&ruleRefExpr{
												pos:  position{line: 695, col: 18, offset: 25340},
												name: "DESC",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 696, col: 5, offset: 25370},
						run: (*parser).callonSQLOrder9,
						expr: &litMatcher{
							pos:        position{line: 696, col: 5, offset: 25370},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLLimit",
			pos:  position{line: 697, col: 1, offset: 25395},
			expr: &choiceExpr{
				pos: position{line: 698, col: 5, offset: 25408},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 698, col: 5, offset: 25408},
						run: (*parser).callonSQLLimit2,
						expr: &seqExpr{
							pos: position{line: 698, col: 5, offset: 25408},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 698, col: 5, offset: 25408},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 698, col: 7, offset: 25410},
									name: "LIMIT",
								},
								&ruleRefExpr{
									pos:  position{line: 698, col: 13, offset: 25416},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 698, col: 15, offset: 25418},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 698, col: 21, offset: 25424},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 699, col: 5, offset: 25455},
						run: (*parser).callonSQLLimit9,
						expr: &litMatcher{
							pos:        position{line: 699, col: 5, offset: 25455},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SELECT",
			pos:  position{line: 700, col: 1, offset: 25476},
			expr: &actionExpr{
				pos: position{line: 700, col: 10, offset: 25485},
				run: (*parser).callonSELECT1,
				expr: &litMatcher{
					pos:        position{line: 700, col: 10, offset: 25485},
					val:        "select",
					ignoreCase: true,
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 701, col: 1, offset: 25520},
			expr: &actionExpr{
				pos: position{line: 701, col: 6, offset: 25525},
				run: (*parser).callonAS1,
				expr: &litMatcher{
					pos:        position{line: 701, col: 6, offset: 25525},
					val:        "as",
					ignoreCase: true,
				},
			},
		},
		{
			name: "FROM",
			pos:  position{line: 702, col: 1, offset: 25552},
			expr: &actionExpr{
				pos: position{line: 702, col: 8, offset: 25559},
				run: (*parser).callonFROM1,
				expr: &litMatcher{
					pos:        position{line: 702, col: 8, offset: 25559},
					val:        "from",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JOIN",
			pos:  position{line: 703, col: 1, offset: 25590},
			expr: &actionExpr{
				pos: position{line: 703, col: 8, offset: 25597},
				run: (*parser).callonJOIN1,
				expr: &litMatcher{
					pos:        position{line: 703, col: 8, offset: 25597},
					val:        "join",
					ignoreCase: true,
				},
			},
		},
		{
			name: "WHERE",
			pos:  position{line: 704, col: 1, offset: 25628},
			expr: &actionExpr{
				pos: position{line: 704, col: 9, offset: 25636},
				run: (*parser).callonWHERE1,
				expr: &litMatcher{
					pos:        position{line: 704, col: 9, offset: 25636},
					val:        "where",
					ignoreCase: true,
				},
			},
		},
		{
			name: "GROUP",
			pos:  position{line: 705, col: 1, offset: 25669},
			expr: &actionExpr{
				pos: position{line: 705, col: 9, offset: 25677},
				run: (*parser).callonGROUP1,
				expr: &litMatcher{
					pos:        position{line: 705, col: 9, offset: 25677},
					val:        "group",
					ignoreCase: true,
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 706, col: 1, offset: 25710},
			expr: &actionExpr{
				pos: position{line: 706, col: 6, offset: 25715},
				run: (*parser).callonBY1,
				expr: &litMatcher{
					pos:        position{line: 706, col: 6, offset: 25715},
					val:        "by",
					ignoreCase: true,
				},
			},
		},
		{
			name: "HAVING",
			pos:  position{line: 707, col: 1, offset: 25742},
			expr: &actionExpr{
				pos: position{line: 707, col: 10, offset: 25751},
				run: (*parser).callonHAVING1,
				expr: &litMatcher{
					pos:        position{line: 707, col: 10, offset: 25751},
					val:        "having",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ORDER",
			pos:  position{line: 708, col: 1, offset: 25786},
			expr: &actionExpr{
				pos: position{line: 708, col: 9, offset: 25794},
				run: (*parser).callonORDER1,
				expr: &litMatcher{
					pos:        position{line: 708, col: 9, offset: 25794},
					val:        "order",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ON",
			pos:  position{line: 709, col: 1, offset: 25827},
			expr: &actionExpr{
				pos: position{line: 709, col: 6, offset: 25832},
				run: (*parser).callonON1,
				expr: &litMatcher{
					pos:        position{line: 709, col: 6, offset: 25832},
					val:        "on",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LIMIT",
			pos:  position{line: 710, col: 1, offset: 25859},
			expr: &actionExpr{
				pos: position{line: 710, col: 9, offset: 25867},
				run: (*parser).callonLIMIT1,
				expr: &litMatcher{
					pos:        position{line: 710, col: 9, offset: 25867},
					val:        "limit",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ASC",
			pos:  position{line: 711, col: 1, offset: 25900},
			expr: &actionExpr{
				pos: position{line: 711, col: 7, offset: 25906},
				run: (*parser).callonASC1,
				expr: &litMatcher{
					pos:        position{line: 711, col: 7, offset: 25906},
					val:        "asc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "DESC",
			pos:  position{line: 712, col: 1, offset: 25935},
			expr: &actionExpr{
				pos: position{line: 712, col: 8, offset: 25942},
				run: (*parser).callonDESC1,
				expr: &litMatcher{
					pos:        position{line: 712, col: 8, offset: 25942},
					val:        "desc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ANTI",
			pos:  position{line: 713, col: 1, offset: 25973},
			expr: &actionExpr{
				pos: position{line: 713, col: 8, offset: 25980},
				run: (*parser).callonANTI1,
				expr: &litMatcher{
					pos:        position{line: 713, col: 8, offset: 25980},
					val:        "anti",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LEFT",
			pos:  position{line: 714, col: 1, offset: 26011},
			expr: &actionExpr{
				pos: position{line: 714, col: 8, offset: 26018},
				run: (*parser).callonLEFT1,
				expr: &litMatcher{
					pos:        position{line: 714, col: 8, offset: 26018},
					val:        "left",
					ignoreCase: true,
				},
			},
		},
		{
			name: "RIGHT",
			pos:  position{line: 715, col: 1, offset: 26049},
			expr: &actionExpr{
				pos: position{line: 715, col: 9, offset: 26057},
				run: (*parser).callonRIGHT1,
				expr: &litMatcher{
					pos:        position{line: 715, col: 9, offset: 26057},
					val:        "right",
					ignoreCase: true,
				},
			},
		},
		{
			name: "INNER",
			pos:  position{line: 716, col: 1, offset: 26090},
			expr: &actionExpr{
				pos: position{line: 716, col: 9, offset: 26098},
				run: (*parser).callonINNER1,
				expr: &litMatcher{
					pos:        position{line: 716, col: 9, offset: 26098},
					val:        "inner",
					ignoreCase: true,
				},
			},
		},
		{
			name: "SQLTokenSentinels",
			pos:  position{line: 717, col: 1, offset: 26131},
			expr: &choiceExpr{
				pos: position{line: 718, col: 5, offset: 26153},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 718, col: 5, offset: 26153},
						name: "SELECT",
					},
					&ruleRefExpr{
						pos:  position{line: 718, col: 14, offset: 26162},
						name: "AS",
					},
					&ruleRefExpr{
						pos:  position{line: 718, col: 19, offset: 26167},
						name: "FROM",
					},
					&ruleRefExpr{
						pos:  position{line: 718, col: 26, offset: 26174},
						name: "JOIN",
					},
					&ruleRefExpr{
						pos:  position{line: 718, col: 33, offset: 26181},
						name: "WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 718, col: 41, offset: 26189},
						name: "GROUP",
					},
					&ruleRefExpr{
						pos:  position{line: 718, col: 49, offset: 26197},
						name: "HAVING",
					},
					&ruleRefExpr{
						pos:  position{line: 718, col: 58, offset: 26206},
						name: "ORDER",
					},
					&ruleRefExpr{
						pos:  position{line: 718, col: 66, offset: 26214},
						name: "LIMIT",
					},
					&ruleRefExpr{
						pos:  position{line: 718, col: 74, offset: 26222},
						name: "ON",
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 719, col: 1, offset: 26225},
			expr: &choiceExpr{
				pos: position{line: 720, col: 5, offset: 26237},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 720, col: 5, offset: 26237},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 721, col: 5, offset: 26253},
						name: "TemplateLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 722, col: 5, offset: 26273},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 723, col: 5, offset: 26291},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 724, col: 5, offset: 26310},
						name: "BytesLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 725, col: 5, offset: 26327},
						name: "Duration",
					},
					&ruleRefExpr{
						pos:  position{line: 726, col: 5, offset: 26340},
						name: "Time",
					},
					&ruleRefExpr{
						pos:  position{line: 727, col: 5, offset: 26349},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 728, col: 5, offset: 26366},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 729, col: 5, offset: 26385},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 730, col: 5, offset: 26404},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 731, col: 1, offset: 26416},
			expr: &choiceExpr{
				pos: position{line: 732, col: 5, offset: 26434},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 732, col: 5, offset: 26434},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 732, col: 5, offset: 26434},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 732, col: 5, offset: 26434},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 732, col: 7, offset: 26436},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 732, col: 14, offset: 26443},
									expr: &ruleRefExpr{
										pos:  position{line: 732, col: 15, offset: 26444},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 735, col: 5, offset: 26559},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 735, col: 5, offset: 26559},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 735, col: 7, offset: 26561},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 738, col: 1, offset: 26664},
			expr: &choiceExpr{
				pos: position{line: 739, col: 5, offset: 26683},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 739, col: 5, offset: 26683},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 739, col: 5, offset: 26683},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 739, col: 5, offset: 26683},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 739, col: 7, offset: 26685},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 739, col: 11, offset: 26689},
									expr: &ruleRefExpr{
										pos:  position{line: 739, col: 12, offset: 26690},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 742, col: 5, offset: 26804},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 742, col: 5, offset: 26804},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 742, col: 7, offset: 26806},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 745, col: 1, offset: 26904},
			expr: &actionExpr{
				pos: position{line: 746, col: 5, offset: 26921},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 746, col: 5, offset: 26921},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 746, col: 7, offset: 26923},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 749, col: 1, offset: 27035},
			expr: &actionExpr{
				pos: position{line: 750, col: 5, offset: 27054},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 750, col: 5, offset: 27054},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 750, col: 7, offset: 27056},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 753, col: 1, offset: 27164},
			expr: &choiceExpr{
				pos: position{line: 754, col: 5, offset: 27183},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 754, col: 5, offset: 27183},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 754, col: 5, offset: 27183},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 755, col: 5, offset: 27286},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 755, col: 5, offset: 27286},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 756, col: 1, offset: 27387},
			expr: &actionExpr{
				pos: position{line: 757, col: 5, offset: 27403},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 757, col: 5, offset: 27403},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "BytesLiteral",
			pos:  position{line: 758, col: 1, offset: 27498},
			expr: &actionExpr{
				pos: position{line: 759, col: 5, offset: 27515},
				run: (*parser).callonBytesLiteral1,
				expr: &seqExpr{
					pos: position{line: 759, col: 5, offset: 27515},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 759, col: 5, offset: 27515},
							val:        "0x",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 759, col: 10, offset: 27520},
							expr: &ruleRefExpr{
								pos:  position{line: 759, col: 10, offset: 27520},
								name: "HexDigit",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeLiteral",
			pos:  position{line: 762, col: 1, offset: 27634},
			expr: &actionExpr{
				pos: position{line: 763, col: 5, offset: 27650},
				run: (*parser).callonTypeLiteral1,
				expr: &seqExpr{
					pos: position{line: 763, col: 5, offset: 27650},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 763, col: 5, offset: 27650},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 763, col: 9, offset: 27654},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 763, col: 13, offset: 27658},
								name: "Type",
							},
						},
						&litMatcher{
							pos:        position{line: 763, col: 18, offset: 27663},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "CastType",
			pos:  position{line: 766, col: 1, offset: 27751},
			expr: &choiceExpr{
				pos: position{line: 767, col: 5, offset: 27764},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 767, col: 5, offset: 27764},
						name: "TypeLiteral",
					},
					&actionExpr{
						pos: position{line: 768, col: 5, offset: 27780},
						run: (*parser).callonCastType3,
						expr: &labeledExpr{
							pos:   position{line: 768, col: 5, offset: 27780},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 768, col: 9, offset: 27784},
								name: "PrimitiveType",
							},
						},
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 771, col: 1, offset: 27882},
			expr: &choiceExpr{
				pos: position{line: 772, col: 5, offset: 27891},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 772, col: 5, offset: 27891},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 773, col: 5, offset: 27907},
						name: "AmbiguousType",
					},
					&ruleRefExpr{
						pos:  position{line: 774, col: 5, offset: 27925},
						name: "ComplexType",
					},
				},
			},
		},
		{
			name: "AmbiguousType",
			pos:  position{line: 775, col: 1, offset: 27937},
			expr: &choiceExpr{
				pos: position{line: 776, col: 5, offset: 27955},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 776, col: 5, offset: 27955},
						run: (*parser).callonAmbiguousType2,
						expr: &seqExpr{
							pos: position{line: 776, col: 5, offset: 27955},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 776, col: 5, offset: 27955},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 776, col: 10, offset: 27960},
										name: "PrimitiveType",
									},
								},
								&notExpr{
									pos: position{line: 776, col: 24, offset: 27974},
									expr: &ruleRefExpr{
										pos:  position{line: 776, col: 25, offset: 27975},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 777, col: 5, offset: 28015},
						run: (*parser).callonAmbiguousType8,
						expr: &seqExpr{
							pos: position{line: 777, col: 5, offset: 28015},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 777, col: 5, offset: 28015},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 777, col: 10, offset: 28020},
										name: "IdentifierName",
									},
								},
								&labeledExpr{
									pos:   position{line: 777, col: 25, offset: 28035},
									label: "opt",
									expr: &zeroOrOneExpr{
										pos: position{line: 777, col: 29, offset: 28039},
										expr: &seqExpr{
											pos: position{line: 777, col: 30, offset: 28040},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 777, col: 30, offset: 28040},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 777, col: 33, offset: 28043},
													val:        "=",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 777, col: 37, offset: 28047},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 777, col: 40, offset: 28050},
													name: "Type",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 783, col: 5, offset: 28282},
						run: (*parser).callonAmbiguousType19,
						expr: &labeledExpr{
							pos:   position{line: 783, col: 5, offset: 28282},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 783, col: 10, offset: 28287},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 786, col: 5, offset: 28387},
						run: (*parser).callonAmbiguousType22,
						expr: &seqExpr{
							pos: position{line: 786, col: 5, offset: 28387},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 786, col: 5, offset: 28387},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 786, col: 9, offset: 28391},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 786, col: 12, offset: 28394},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 786, col: 14, offset: 28396},
										name: "TypeUnion",
									},
								},
								&litMatcher{
									pos:        position{line: 786, col: 24, offset: 28406},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeUnion",
			pos:  position{line: 787, col: 1, offset: 28428},
			expr: &actionExpr{
				pos: position{line: 788, col: 5, offset: 28442},
				run: (*parser).callonTypeUnion1,
				expr: &labeledExpr{
					pos:   position{line: 788, col: 5, offset: 28442},
					label: "types",
					expr: &ruleRefExpr{
						pos:  position{line: 788, col: 11, offset: 28448},
						name: "TypeList",
					},
				},
			},
		},
		{
			name: "TypeList",
			pos:  position{line: 791, col: 1, offset: 28543},
			expr: &actionExpr{
				pos: position{line: 792, col: 5, offset: 28556},
				run: (*parser).callonTypeList1,
				expr: &seqExpr{
					pos: position{line: 792, col: 5, offset: 28556},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 792, col: 5, offset: 28556},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 792, col: 11, offset: 28562},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 792, col: 16, offset: 28567},
							label: "rest",
							expr: &oneOrMoreExpr{
								pos: position{line: 792, col: 21, offset: 28572},
								expr: &ruleRefExpr{
									pos:  position{line: 792, col: 21, offset: 28572},
									name: "TypeListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeListTail",
			pos:  position{line: 795, col: 1, offset: 28664},
			expr: &actionExpr{
				pos: position{line: 795, col: 16, offset: 28679},
				run: (*parser).callonTypeListTail1,
				expr: &seqExpr{
					pos: position{line: 795, col: 16, offset: 28679},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 795, col: 16, offset: 28679},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 795, col: 19, offset: 28682},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 795, col: 23, offset: 28686},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 795, col: 26, offset: 28689},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 795, col: 30, offset: 28693},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexType",
			pos:  position{line: 796, col: 1, offset: 28718},
			expr: &choiceExpr{
				pos: position{line: 797, col: 5, offset: 28734},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 797, col: 5, offset: 28734},
						run: (*parser).callonComplexType2,
						expr: &seqExpr{
							pos: position{line: 797, col: 5, offset: 28734},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 797, col: 5, offset: 28734},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 797, col: 9, offset: 28738},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 797, col: 12, offset: 28741},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 797, col: 19, offset: 28748},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 797, col: 33, offset: 28762},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 797, col: 36, offset: 28765},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 800, col: 5, offset: 28862},
						run: (*parser).callonComplexType10,
						expr: &seqExpr{
							pos: position{line: 800, col: 5, offset: 28862},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 800, col: 5, offset: 28862},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 800, col: 9, offset: 28866},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 800, col: 12, offset: 28869},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 800, col: 16, offset: 28873},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 800, col: 21, offset: 28878},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 800, col: 24, offset: 28881},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 803, col: 5, offset: 28972},
						run: (*parser).callonComplexType18,
						expr: &seqExpr{
							pos: position{line: 803, col: 5, offset: 28972},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 803, col: 5, offset: 28972},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 803, col: 10, offset: 28977},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 803, col: 13, offset: 28980},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 803, col: 17, offset: 28984},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 803, col: 22, offset: 28989},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 803, col: 25, offset: 28992},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 806, col: 5, offset: 29082},
						run: (*parser).callonComplexType26,
						expr: &seqExpr{
							pos: position{line: 806, col: 5, offset: 29082},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 806, col: 5, offset: 29082},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 806, col: 10, offset: 29087},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 806, col: 13, offset: 29090},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 806, col: 21, offset: 29098},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 806, col: 26, offset: 29103},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 806, col: 29, offset: 29106},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 806, col: 33, offset: 29110},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 806, col: 36, offset: 29113},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 806, col: 44, offset: 29121},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 806, col: 49, offset: 29126},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 806, col: 52, offset: 29129},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateLiteral",
			pos:  position{line: 809, col: 1, offset: 29244},
			expr: &actionExpr{
				pos: position{line: 810, col: 5, offset: 29264},
				run: (*parser).callonTemplateLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 810, col: 5, offset: 29264},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 810, col: 7, offset: 29266},
						name: "TemplateLiteralParts",
					},
				},
			},
		},
		{
			name: "TemplateLiteralParts",
			pos:  position{line: 816, col: 1, offset: 29481},
			expr: &choiceExpr{
				pos: position{line: 817, col: 5, offset: 29506},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 817, col: 5, offset: 29506},
						run: (*parser).callonTemplateLiteralParts2,
						expr: &seqExpr{
							pos: position{line: 817, col: 5, offset: 29506},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 817, col: 5, offset: 29506},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 817, col: 9, offset: 29510},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 817, col: 11, offset: 29512},
										expr: &ruleRefExpr{
											pos:  position{line: 817, col: 11, offset: 29512},
											name: "TemplateDoubleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 817, col: 37, offset: 29538},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 818, col: 5, offset: 29564},
						run: (*parser).callonTemplateLiteralParts9,
						expr: &seqExpr{
							pos: position{line: 818, col: 5, offset: 29564},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 818, col: 5, offset: 29564},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 818, col: 9, offset: 29568},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 818, col: 11, offset: 29570},
										expr: &ruleRefExpr{
											pos:  position{line: 818, col: 11, offset: 29570},
											name: "TemplateSingleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 818, col: 37, offset: 29596},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedPart",
			pos:  position{line: 819, col: 1, offset: 29618},
			expr: &choiceExpr{
				pos: position{line: 820, col: 5, offset: 29647},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 820, col: 5, offset: 29647},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 821, col: 5, offset: 29664},
						run: (*parser).callonTemplateDoubleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 821, col: 5, offset: 29664},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 821, col: 7, offset: 29666},
								expr: &ruleRefExpr{
									pos:  position{line: 821, col: 7, offset: 29666},
									name: "TemplateDoubleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedChar",
			pos:  position{line: 824, col: 1, offset: 29802},
			expr: &choiceExpr{
				pos: position{line: 825, col: 5, offset: 29831},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 825, col: 5, offset: 29831},
						run: (*parser).callonTemplateDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 825, col: 5, offset: 29831},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 825, col: 5, offset: 29831},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 825, col: 10, offset: 29836},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 825, col: 12, offset: 29838},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 826, col: 5, offset: 29865},
						run: (*parser).callonTemplateDoubleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 826, col: 5, offset: 29865},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 826, col: 5, offset: 29865},
									expr: &litMatcher{
										pos:        position{line: 826, col: 7, offset: 29867},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 826, col: 13, offset: 29873},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 826, col: 15, offset: 29875},
										name: "DoubleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedPart",
			pos:  position{line: 827, col: 1, offset: 29910},
			expr: &choiceExpr{
				pos: position{line: 828, col: 5, offset: 29939},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 828, col: 5, offset: 29939},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 829, col: 5, offset: 29956},
						run: (*parser).callonTemplateSingleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 829, col: 5, offset: 29956},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 829, col: 7, offset: 29958},
								expr: &ruleRefExpr{
									pos:  position{line: 829, col: 7, offset: 29958},
									name: "TemplateSingleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedChar",
			pos:  position{line: 832, col: 1, offset: 30094},
			expr: &choiceExpr{
				pos: position{line: 833, col: 5, offset: 30123},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 833, col: 5, offset: 30123},
						run: (*parser).callonTemplateSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 833, col: 5, offset: 30123},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 833, col: 5, offset: 30123},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 833, col: 10, offset: 30128},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 833, col: 12, offset: 30130},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 834, col: 5, offset: 30157},
						run: (*parser).callonTemplateSingleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 834, col: 5, offset: 30157},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 834, col: 5, offset: 30157},
									expr: &litMatcher{
										pos:        position{line: 834, col: 7, offset: 30159},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 834, col: 13, offset: 30165},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 834, col: 15, offset: 30167},
										name: "SingleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateExpr",
			pos:  position{line: 835, col: 1, offset: 30202},
			expr: &actionExpr{
				pos: position{line: 836, col: 5, offset: 30219},
				run: (*parser).callonTemplateExpr1,
				expr: &seqExpr{
					pos: position{line: 836, col: 5, offset: 30219},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 836, col: 5, offset: 30219},
							val:        "${",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 836, col: 10, offset: 30224},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 836, col: 13, offset: 30227},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 836, col: 15, offset: 30229},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 836, col: 20, offset: 30234},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 836, col: 23, offset: 30237},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 839, col: 1, offset: 30446},
			expr: &actionExpr{
				pos: position{line: 840, col: 5, offset: 30464},
				run: (*parser).callonPrimitiveType1,
				expr: &choiceExpr{
					pos: position{line: 840, col: 7, offset: 30466},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 840, col: 7, offset: 30466},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 840, col: 17, offset: 30476},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 840, col: 28, offset: 30487},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 840, col: 39, offset: 30498},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 841, col: 9, offset: 30515},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 841, col: 18, offset: 30524},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 841, col: 28, offset: 30534},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 841, col: 38, offset: 30544},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 842, col: 9, offset: 30560},
							val:        "float16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 842, col: 21, offset: 30572},
							val:        "float32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 842, col: 33, offset: 30584},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 843, col: 9, offset: 30602},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 843, col: 18, offset: 30611},
							val:        "string",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 844, col: 9, offset: 30628},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 844, col: 22, offset: 30641},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 845, col: 9, offset: 30656},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 846, col: 9, offset: 30672},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 846, col: 16, offset: 30679},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 847, col: 9, offset: 30693},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 847, col: 18, offset: 30702},
							val:        "null",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldList",
			pos:  position{line: 850, col: 1, offset: 30816},
			expr: &choiceExpr{
				pos: position{line: 851, col: 5, offset: 30834},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 851, col: 5, offset: 30834},
						run: (*parser).callonTypeFieldList2,
						expr: &seqExpr{
							pos: position{line: 851, col: 5, offset: 30834},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 851, col: 5, offset: 30834},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 851, col: 11, offset: 30840},
										name: "TypeField",
									},
								},
								&labeledExpr{
									pos:   position{line: 851, col: 21, offset: 30850},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 851, col: 26, offset: 30855},
										expr: &ruleRefExpr{
											pos:  position{line: 851, col: 26, offset: 30855},
											name: "TypeFieldListTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 854, col: 5, offset: 30956},
						run: (*parser).callonTypeFieldList9,
						expr: &litMatcher{
							pos:        position{line: 854, col: 5, offset: 30956},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTail",
			pos:  position{line: 855, col: 1, offset: 30979},
			expr: &actionExpr{
				pos: position{line: 855, col: 21, offset: 30999},
				run: (*parser).callonTypeFieldListTail1,
				expr: &seqExpr{
					pos: position{line: 855, col: 21, offset: 30999},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 855, col: 21, offset: 30999},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 855, col: 24, offset: 31002},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 855, col: 28, offset: 31006},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 855, col: 31, offset: 31009},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 855, col: 35, offset: 31013},
								name: "TypeField",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeField",
			pos:  position{line: 856, col: 1, offset: 31043},
			expr: &actionExpr{
				pos: position{line: 857, col: 5, offset: 31057},
				run: (*parser).callonTypeField1,
				expr: &seqExpr{
					pos: position{line: 857, col: 5, offset: 31057},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 857, col: 5, offset: 31057},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 857, col: 10, offset: 31062},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 857, col: 20, offset: 31072},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 857, col: 23, offset: 31075},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 857, col: 27, offset: 31079},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 857, col: 30, offset: 31082},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 857, col: 34, offset: 31086},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 860, col: 1, offset: 31167},
			expr: &choiceExpr{
				pos: position{line: 861, col: 5, offset: 31181},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 861, col: 5, offset: 31181},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 862, col: 5, offset: 31200},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 863, col: 1, offset: 31213},
			expr: &actionExpr{
				pos: position{line: 863, col: 12, offset: 31224},
				run: (*parser).callonAndToken1,
				expr: &seqExpr{
					pos: position{line: 863, col: 12, offset: 31224},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 863, col: 13, offset: 31225},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 863, col: 13, offset: 31225},
									val:        "and",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 863, col: 21, offset: 31233},
									val:        "AND",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 863, col: 28, offset: 31240},
							expr: &ruleRefExpr{
								pos:  position{line: 863, col: 29, offset: 31241},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 864, col: 1, offset: 31278},
			expr: &actionExpr{
				pos: position{line: 864, col: 11, offset: 31288},
				run: (*parser).callonOrToken1,
				expr: &seqExpr{
					pos: position{line: 864, col: 11, offset: 31288},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 864, col: 12, offset: 31289},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 864, col: 12, offset: 31289},
									val:        "or",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 864, col: 19, offset: 31296},
									val:        "OR",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 864, col: 25, offset: 31302},
							expr: &ruleRefExpr{
								pos:  position{line: 864, col: 26, offset: 31303},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 865, col: 1, offset: 31339},
			expr: &actionExpr{
				pos: position{line: 865, col: 11, offset: 31349},
				run: (*parser).callonInToken1,
				expr: &seqExpr{
					pos: position{line: 865, col: 11, offset: 31349},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 865, col: 11, offset: 31349},
							val:        "in",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 865, col: 16, offset: 31354},
							expr: &ruleRefExpr{
								pos:  position{line: 865, col: 17, offset: 31355},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 866, col: 1, offset: 31391},
			expr: &actionExpr{
				pos: position{line: 866, col: 12, offset: 31402},
				run: (*parser).callonNotToken1,
				expr: &seqExpr{
					pos: position{line: 866, col: 12, offset: 31402},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 866, col: 13, offset: 31403},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 866, col: 13, offset: 31403},
									val:        "not",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 866, col: 21, offset: 31411},
									val:        "NOT",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 866, col: 28, offset: 31418},
							expr: &ruleRefExpr{
								pos:  position{line: 866, col: 29, offset: 31419},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 867, col: 1, offset: 31456},
			expr: &actionExpr{
				pos: position{line: 867, col: 11, offset: 31466},
				run: (*parser).callonByToken1,
				expr: &seqExpr{
					pos: position{line: 867, col: 11, offset: 31466},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 867, col: 11, offset: 31466},
							val:        "by",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 867, col: 16, offset: 31471},
							expr: &ruleRefExpr{
								pos:  position{line: 867, col: 17, offset: 31472},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 868, col: 1, offset: 31508},
			expr: &charClassMatcher{
				pos:        position{line: 868, col: 19, offset: 31526},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 869, col: 1, offset: 31537},
			expr: &choiceExpr{
				pos: position{line: 869, col: 18, offset: 31554},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 869, col: 18, offset: 31554},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 869, col: 36, offset: 31572},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 870, col: 1, offset: 31578},
			expr: &actionExpr{
				pos: position{line: 871, col: 5, offset: 31593},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 871, col: 5, offset: 31593},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 871, col: 8, offset: 31596},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 872, col: 1, offset: 31676},
			expr: &choiceExpr{
				pos: position{line: 873, col: 5, offset: 31695},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 873, col: 5, offset: 31695},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 873, col: 5, offset: 31695},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 873, col: 5, offset: 31695},
									expr: &seqExpr{
										pos: position{line: 873, col: 7, offset: 31697},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 873, col: 7, offset: 31697},
												name: "IDGuard",
											},
											&notExpr{
												pos: position{line: 873, col: 15, offset: 31705},
												expr: &ruleRefExpr{
													pos:  position{line: 873, col: 16, offset: 31706},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 873, col: 32, offset: 31722},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 873, col: 48, offset: 31738},
									expr: &ruleRefExpr{
										pos:  position{line: 873, col: 48, offset: 31738},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 874, col: 5, offset: 31789},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 874, col: 5, offset: 31789},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 875, col: 5, offset: 31828},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 875, col: 5, offset: 31828},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 875, col: 5, offset: 31828},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 875, col: 10, offset: 31833},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 875, col: 13, offset: 31836},
										name: "IDGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 876, col: 5, offset: 31867},
						run: (*parser).callonIdentifierName19,
						expr: &litMatcher{
							pos:        position{line: 876, col: 5, offset: 31867},
							val:        "type",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 877, col: 5, offset: 31909},
						run: (*parser).callonIdentifierName21,
						expr: &seqExpr{
							pos: position{line: 877, col: 5, offset: 31909},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 877, col: 5, offset: 31909},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 877, col: 8, offset: 31912},
										name: "SQLTokenSentinels",
									},
								},
								&andExpr{
									pos: position{line: 877, col: 26, offset: 31930},
									expr: &seqExpr{
										pos: position{line: 877, col: 28, offset: 31932},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 877, col: 28, offset: 31932},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 877, col: 31, offset: 31935},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierNames",
			pos:  position{line: 878, col: 1, offset: 31959},
			expr: &actionExpr{
				pos: position{line: 879, col: 5, offset: 31979},
				run: (*parser).callonIdentifierNames1,
				expr: &seqExpr{
					pos: position{line: 879, col: 5, offset: 31979},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 879, col: 5, offset: 31979},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 879, col: 11, offset: 31985},
								name: "IdentifierName",
							},
						},
						&labeledExpr{
							pos:   position{line: 879, col: 26, offset: 32000},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 879, col: 31, offset: 32005},
								expr: &actionExpr{
									pos: position{line: 879, col: 32, offset: 32006},
									run: (*parser).callonIdentifierNames7,
									expr: &seqExpr{
										pos: position{line: 879, col: 32, offset: 32006},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 879, col: 32, offset: 32006},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 879, col: 35, offset: 32009},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 879, col: 39, offset: 32013},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 879, col: 42, offset: 32016},
												label: "id",
												expr: &ruleRefExpr{
													pos:  position{line: 879, col: 45, offset: 32019},
													name: "IdentifierName",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IDGuard",
			pos:  position{line: 882, col: 1, offset: 32133},
			expr: &choiceExpr{
				pos: position{line: 883, col: 5, offset: 32145},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 883, col: 5, offset: 32145},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 884, col: 5, offset: 32164},
						name: "NullLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 885, col: 5, offset: 32180},
						name: "NaN",
					},
					&ruleRefExpr{
						pos:  position{line: 886, col: 5, offset: 32188},
						name: "Infinity",
					},
				},
			},
		},
		{
			name: "Time",
			pos:  position{line: 887, col: 1, offset: 32197},
			expr: &actionExpr{
				pos: position{line: 888, col: 5, offset: 32206},
				run: (*parser).callonTime1,
				expr: &seqExpr{
					pos: position{line: 888, col: 5, offset: 32206},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 888, col: 5, offset: 32206},
							name: "FullDate",
						},
						&litMatcher{
							pos:        position{line: 888, col: 14, offset: 32215},
							val:        "T",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 888, col: 18, offset: 32219},
							name: "FullTime",
						},
					},
				},
			},
		},
		{
			name: "FullDate",
			pos:  position{line: 891, col: 1, offset: 32338},
			expr: &seqExpr{
				pos: position{line: 891, col: 12, offset: 32349},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 891, col: 12, offset: 32349},
						name: "D4",
					},
					&litMatcher{
						pos:        position{line: 891, col: 15, offset: 32352},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 891, col: 19, offset: 32356},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 891, col: 22, offset: 32359},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 891, col: 26, offset: 32363},
						name: "D2",
					},
				},
			},
		},
		{
			name: "D4",
			pos:  position{line: 892, col: 1, offset: 32366},
			expr: &seqExpr{
				pos: position{line: 892, col: 6, offset: 32371},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 892, col: 6, offset: 32371},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 892, col: 11, offset: 32376},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 892, col: 16, offset: 32381},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 892, col: 21, offset: 32386},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "D2",
			pos:  position{line: 893, col: 1, offset: 32392},
			expr: &seqExpr{
				pos: position{line: 893, col: 6, offset: 32397},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 893, col: 6, offset: 32397},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 893, col: 11, offset: 32402},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "FullTime",
			pos:  position{line: 894, col: 1, offset: 32408},
			expr: &seqExpr{
				pos: position{line: 894, col: 12, offset: 32419},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 894, col: 12, offset: 32419},
						name: "PartialTime",
					},
					&ruleRefExpr{
						pos:  position{line: 894, col: 24, offset: 32431},
						name: "TimeOffset",
					},
				},
			},
		},
		{
			name: "PartialTime",
			pos:  position{line: 895, col: 1, offset: 32442},
			expr: &seqExpr{
				pos: position{line: 895, col: 15, offset: 32456},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 895, col: 15, offset: 32456},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 895, col: 18, offset: 32459},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 895, col: 22, offset: 32463},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 895, col: 25, offset: 32466},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 895, col: 29, offset: 32470},
						name: "D2",
					},
					&zeroOrOneExpr{
						pos: position{line: 895, col: 32, offset: 32473},
						expr: &seqExpr{
							pos: position{line: 895, col: 33, offset: 32474},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 895, col: 33, offset: 32474},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 895, col: 37, offset: 32478},
									expr: &charClassMatcher{
										pos:        position{line: 895, col: 37, offset: 32478},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeOffset",
			pos:  position{line: 896, col: 1, offset: 32487},
			expr: &choiceExpr{
				pos: position{line: 897, col: 5, offset: 32502},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 897, col: 5, offset: 32502},
						val:        "Z",
						ignoreCase: false,
					},
					&seqExpr{
						pos: position{line: 898, col: 5, offset: 32510},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 898, col: 6, offset: 32511},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 898, col: 6, offset: 32511},
										val:        "+",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 898, col: 12, offset: 32517},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 898, col: 17, offset: 32522},
								name: "D2",
							},
							&litMatcher{
								pos:        position{line: 898, col: 20, offset: 32525},
								val:        ":",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 898, col: 24, offset: 32529},
								name: "D2",
							},
							&zeroOrOneExpr{
								pos: position{line: 898, col: 27, offset: 32532},
								expr: &seqExpr{
									pos: position{line: 898, col: 28, offset: 32533},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 898, col: 28, offset: 32533},
											val:        ".",
											ignoreCase: false,
										},
										&oneOrMoreExpr{
											pos: position{line: 898, col: 32, offset: 32537},
											expr: &charClassMatcher{
												pos:        position{line: 898, col: 32, offset: 32537},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 899, col: 1, offset: 32546},
			expr: &actionExpr{
				pos: position{line: 900, col: 5, offset: 32559},
				run: (*parser).callonDuration1,
				expr: &seqExpr{
					pos: position{line: 900, col: 5, offset: 32559},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 900, col: 5, offset: 32559},
							expr: &litMatcher{
								pos:        position{line: 900, col: 5, offset: 32559},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 900, col: 10, offset: 32564},
							expr: &seqExpr{
								pos: position{line: 900, col: 11, offset: 32565},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 900, col: 11, offset: 32565},
										name: "Decimal",
									},
									&ruleRefExpr{
										pos:  position{line: 900, col: 19, offset: 32573},
										name: "TimeUnit",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Decimal",
			pos:  position{line: 903, col: 1, offset: 32698},
			expr: &seqExpr{
				pos: position{line: 903, col: 11, offset: 32708},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 903, col: 11, offset: 32708},
						name: "UInt",
					},
					&zeroOrOneExpr{
						pos: position{line: 903, col: 16, offset: 32713},
						expr: &seqExpr{
							pos: position{line: 903, col: 17, offset: 32714},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 903, col: 17, offset: 32714},
									val:        ".",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 903, col: 21, offset: 32718},
									name: "UInt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeUnit",
			pos:  position{line: 904, col: 1, offset: 32725},
			expr: &choiceExpr{
				pos: position{line: 905, col: 5, offset: 32738},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 905, col: 5, offset: 32738},
						val:        "ns",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 906, col: 5, offset: 32747},
						val:        "us",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 907, col: 5, offset: 32756},
						val:        "ms",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 908, col: 5, offset: 32765},
						val:        "s",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 909, col: 5, offset: 32773},
						val:        "m",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 910, col: 5, offset: 32781},
						val:        "h",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 911, col: 5, offset: 32789},
						val:        "d",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 912, col: 5, offset: 32797},
						val:        "w",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 913, col: 5, offset: 32805},
						val:        "y",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 914, col: 1, offset: 32809},
			expr: &actionExpr{
				pos: position{line: 915, col: 5, offset: 32816},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 915, col: 5, offset: 32816},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 915, col: 5, offset: 32816},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 915, col: 10, offset: 32821},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 915, col: 14, offset: 32825},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 915, col: 19, offset: 32830},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 915, col: 23, offset: 32834},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 915, col: 28, offset: 32839},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 915, col: 32, offset: 32843},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 916, col: 1, offset: 32879},
			expr: &actionExpr{
				pos: position{line: 917, col: 5, offset: 32887},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 917, col: 5, offset: 32887},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 917, col: 5, offset: 32887},
							expr: &seqExpr{
								pos: position{line: 917, col: 7, offset: 32889},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 917, col: 7, offset: 32889},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 917, col: 11, offset: 32893},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 917, col: 15, offset: 32897},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 917, col: 19, offset: 32901},
										expr: &choiceExpr{
											pos: position{line: 917, col: 21, offset: 32903},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 917, col: 21, offset: 32903},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 917, col: 32, offset: 32914},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 917, col: 38, offset: 32920},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 917, col: 40, offset: 32922},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 918, col: 1, offset: 32954},
			expr: &choiceExpr{
				pos: position{line: 919, col: 5, offset: 32972},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 919, col: 5, offset: 32972},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 919, col: 5, offset: 32972},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 919, col: 5, offset: 32972},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 919, col: 7, offset: 32974},
										expr: &ruleRefExpr{
											pos:  position{line: 919, col: 7, offset: 32974},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 919, col: 17, offset: 32984},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 919, col: 19, offset: 32986},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 922, col: 5, offset: 33050},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 922, col: 5, offset: 33050},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 922, col: 5, offset: 33050},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 922, col: 7, offset: 33052},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 922, col: 11, offset: 33056},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 922, col: 13, offset: 33058},
										expr: &ruleRefExpr{
											pos:  position{line: 922, col: 13, offset: 33058},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 922, col: 23, offset: 33068},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 922, col: 28, offset: 33073},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 922, col: 30, offset: 33075},
										expr: &ruleRefExpr{
											pos:  position{line: 922, col: 30, offset: 33075},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 922, col: 40, offset: 33085},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 922, col: 42, offset: 33087},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 925, col: 5, offset: 33186},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 925, col: 5, offset: 33186},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 925, col: 5, offset: 33186},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 925, col: 10, offset: 33191},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 925, col: 12, offset: 33193},
										expr: &ruleRefExpr{
											pos:  position{line: 925, col: 12, offset: 33193},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 925, col: 22, offset: 33203},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 925, col: 24, offset: 33205},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 928, col: 5, offset: 33276},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 928, col: 5, offset: 33276},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 928, col: 5, offset: 33276},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 928, col: 7, offset: 33278},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 928, col: 11, offset: 33282},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 928, col: 13, offset: 33284},
										expr: &ruleRefExpr{
											pos:  position{line: 928, col: 13, offset: 33284},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 928, col: 23, offset: 33294},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 931, col: 5, offset: 33362},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 931, col: 5, offset: 33362},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 934, col: 1, offset: 33398},
			expr: &choiceExpr{
				pos: position{line: 935, col: 5, offset: 33410},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 935, col: 5, offset: 33410},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 936, col: 5, offset: 33417},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 937, col: 1, offset: 33421},
			expr: &actionExpr{
				pos: position{line: 937, col: 12, offset: 33432},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 937, col: 12, offset: 33432},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 937, col: 12, offset: 33432},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 937, col: 16, offset: 33436},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 937, col: 18, offset: 33438},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 938, col: 1, offset: 33475},
			expr: &actionExpr{
				pos: position{line: 938, col: 12, offset: 33486},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 938, col: 12, offset: 33486},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 938, col: 12, offset: 33486},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 938, col: 14, offset: 33488},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 938, col: 18, offset: 33492},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 939, col: 1, offset: 33529},
			expr: &actionExpr{
				pos: position{line: 940, col: 5, offset: 33540},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 940, col: 5, offset: 33540},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 940, col: 5, offset: 33540},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 940, col: 7, offset: 33542},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 940, col: 10, offset: 33545},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 940, col: 14, offset: 33549},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 940, col: 16, offset: 33551},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 943, col: 1, offset: 33623},
			expr: &actionExpr{
				pos: position{line: 944, col: 5, offset: 33634},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 944, col: 5, offset: 33634},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 944, col: 5, offset: 33634},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 944, col: 7, offset: 33636},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 944, col: 11, offset: 33640},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 944, col: 15, offset: 33644},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 944, col: 17, offset: 33646},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 947, col: 1, offset: 33708},
			expr: &actionExpr{
				pos: position{line: 948, col: 4, offset: 33716},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 948, col: 4, offset: 33716},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 948, col: 6, offset: 33718},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 949, col: 1, offset: 33757},
			expr: &choiceExpr{
				pos: position{line: 950, col: 5, offset: 33771},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 950, col: 5, offset: 33771},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 951, col: 5, offset: 33786},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 952, col: 1, offset: 33801},
			expr: &actionExpr{
				pos: position{line: 952, col: 14, offset: 33814},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 952, col: 14, offset: 33814},
					expr: &charClassMatcher{
						pos:        position{line: 952, col: 14, offset: 33814},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 953, col: 1, offset: 33852},
			expr: &actionExpr{
				pos: position{line: 954, col: 5, offset: 33871},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 954, col: 5, offset: 33871},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 954, col: 5, offset: 33871},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 954, col: 9, offset: 33875},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 955, col: 1, offset: 33917},
			expr: &choiceExpr{
				pos: position{line: 956, col: 5, offset: 33933},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 956, col: 5, offset: 33933},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 956, col: 5, offset: 33933},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 956, col: 5, offset: 33933},
									expr: &litMatcher{
										pos:        position{line: 956, col: 5, offset: 33933},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 956, col: 10, offset: 33938},
									expr: &charClassMatcher{
										pos:        position{line: 956, col: 10, offset: 33938},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 956, col: 17, offset: 33945},
									val:        ".",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 956, col: 21, offset: 33949},
									expr: &charClassMatcher{
										pos:        position{line: 956, col: 21, offset: 33949},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 956, col: 28, offset: 33956},
									expr: &ruleRefExpr{
										pos:  position{line: 956, col: 28, offset: 33956},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 959, col: 5, offset: 34015},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 959, col: 5, offset: 34015},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 959, col: 5, offset: 34015},
									expr: &litMatcher{
										pos:        position{line: 959, col: 5, offset: 34015},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 959, col: 10, offset: 34020},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 959, col: 14, offset: 34024},
									expr: &charClassMatcher{
										pos:        position{line: 959, col: 14, offset: 34024},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 959, col: 21, offset: 34031},
									expr: &ruleRefExpr{
										pos:  position{line: 959, col: 21, offset: 34031},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 962, col: 5, offset: 34090},
						run: (*parser).callonFloatString22,
						expr: &choiceExpr{
							pos: position{line: 962, col: 6, offset: 34091},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 962, col: 6, offset: 34091},
									name: "NaN",
								},
								&ruleRefExpr{
									pos:  position{line: 962, col: 12, offset: 34097},
									name: "Infinity",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 963, col: 1, offset: 34138},
			expr: &seqExpr{
				pos: position{line: 963, col: 16, offset: 34153},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 963, col: 16, offset: 34153},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 963, col: 21, offset: 34158},
						expr: &charClassMatcher{
							pos:        position{line: 963, col: 21, offset: 34158},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 963, col: 27, offset: 34164},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "NaN",
			pos:  position{line: 964, col: 1, offset: 34175},
			expr: &litMatcher{
				pos:        position{line: 964, col: 7, offset: 34181},
				val:        "NaN",
				ignoreCase: false,
			},
		},
		{
			name: "Infinity",
			pos:  position{line: 965, col: 1, offset: 34187},
			expr: &seqExpr{
				pos: position{line: 965, col: 12, offset: 34198},
				exprs: []interface{}{
					&zeroOrOneExpr{
						pos: position{line: 965, col: 12, offset: 34198},
						expr: &choiceExpr{
							pos: position{line: 965, col: 13, offset: 34199},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 965, col: 13, offset: 34199},
									val:        "-",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 965, col: 19, offset: 34205},
									val:        "+",
									ignoreCase: false,
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 965, col: 25, offset: 34211},
						val:        "Inf",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 966, col: 1, offset: 34217},
			expr: &actionExpr{
				pos: position{line: 966, col: 7, offset: 34223},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 966, col: 7, offset: 34223},
					expr: &ruleRefExpr{
						pos:  position{line: 966, col: 7, offset: 34223},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 967, col: 1, offset: 34264},
			expr: &charClassMatcher{
				pos:        position{line: 967, col: 12, offset: 34275},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 968, col: 1, offset: 34287},
			expr: &choiceExpr{
				pos: position{line: 969, col: 5, offset: 34304},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 969, col: 5, offset: 34304},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 969, col: 5, offset: 34304},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 969, col: 5, offset: 34304},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 969, col: 9, offset: 34308},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 969, col: 11, offset: 34310},
										expr: &ruleRefExpr{
											pos:  position{line: 969, col: 11, offset: 34310},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 969, col: 29, offset: 34328},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 970, col: 5, offset: 34365},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 970, col: 5, offset: 34365},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 970, col: 5, offset: 34365},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 970, col: 9, offset: 34369},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 970, col: 11, offset: 34371},
										expr: &ruleRefExpr{
											pos:  position{line: 970, col: 11, offset: 34371},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 970, col: 29, offset: 34389},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 971, col: 1, offset: 34422},
			expr: &choiceExpr{
				pos: position{line: 972, col: 5, offset: 34443},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 972, col: 5, offset: 34443},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 972, col: 5, offset: 34443},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 972, col: 5, offset: 34443},
									expr: &choiceExpr{
										pos: position{line: 972, col: 7, offset: 34445},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 972, col: 7, offset: 34445},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 972, col: 13, offset: 34451},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 972, col: 26, offset: 34464,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 973, col: 5, offset: 34501},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 973, col: 5, offset: 34501},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 973, col: 5, offset: 34501},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 973, col: 10, offset: 34506},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 973, col: 12, offset: 34508},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 974, col: 1, offset: 34541},
			expr: &actionExpr{
				pos: position{line: 975, col: 5, offset: 34553},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 975, col: 5, offset: 34553},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 975, col: 5, offset: 34553},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 975, col: 10, offset: 34558},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 975, col: 23, offset: 34571},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 975, col: 28, offset: 34576},
								expr: &ruleRefExpr{
									pos:  position{line: 975, col: 28, offset: 34576},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 976, col: 1, offset: 34637},
			expr: &choiceExpr{
				pos: position{line: 977, col: 5, offset: 34654},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 977, col: 5, offset: 34654},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 978, col: 5, offset: 34671},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordChars",
			pos:  position{line: 979, col: 1, offset: 34682},
			expr: &actionExpr{
				pos: position{line: 979, col: 16, offset: 34697},
				run: (*parser).callonKeyWordChars1,
				expr: &charClassMatcher{
					pos:        position{line: 979, col: 16, offset: 34697},
					val:        "[a-zA-Z_.:/%#@~]",
					chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
					ranges:     []rune{'a', 'z', 'A', 'Z'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 980, col: 1, offset: 34745},
			expr: &choiceExpr{
				pos: position{line: 981, col: 5, offset: 34761},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 981, col: 5, offset: 34761},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 982, col: 5, offset: 34778},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 983, col: 1, offset: 34784},
			expr: &actionExpr{
				pos: position{line: 983, col: 14, offset: 34797},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 983, col: 14, offset: 34797},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 983, col: 14, offset: 34797},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 983, col: 19, offset: 34802},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 983, col: 22, offset: 34805},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 983, col: 22, offset: 34805},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 983, col: 38, offset: 34821},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobPattern",
			pos:  position{line: 984, col: 1, offset: 34855},
			expr: &actionExpr{
				pos: position{line: 985, col: 5, offset: 34871},
				run: (*parser).callonGlobPattern1,
				expr: &seqExpr{
					pos: position{line: 985, col: 5, offset: 34871},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 985, col: 5, offset: 34871},
							expr: &ruleRefExpr{
								pos:  position{line: 985, col: 6, offset: 34872},
								name: "GlobProperStart",
							},
						},
						&andExpr{
							pos: position{line: 985, col: 22, offset: 34888},
							expr: &ruleRefExpr{
								pos:  position{line: 985, col: 23, offset: 34889},
								name: "GlobHasStar",
							},
						},
						&labeledExpr{
							pos:   position{line: 985, col: 35, offset: 34901},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 985, col: 40, offset: 34906},
								name: "GlobStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 985, col: 50, offset: 34916},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 985, col: 55, offset: 34921},
								expr: &ruleRefExpr{
									pos:  position{line: 985, col: 55, offset: 34921},
									name: "GlobRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobProperStart",
			pos:  position{line: 988, col: 1, offset: 34989},
			expr: &choiceExpr{
				pos: position{line: 988, col: 19, offset: 35007},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 988, col: 19, offset: 35007},
						name: "KeyWordStart",
					},
					&seqExpr{
						pos: position{line: 988, col: 34, offset: 35022},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 988, col: 34, offset: 35022},
								expr: &litMatcher{
									pos:        position{line: 988, col: 34, offset: 35022},
									val:        "*",
									ignoreCase: false,
								},
							},
							&ruleRefExpr{
								pos:  position{line: 988, col: 39, offset: 35027},
								name: "KeyWordRest",
							},
						},
					},
				},
			},
		},
		{
			name: "GlobHasStar",
			pos:  position{line: 989, col: 1, offset: 35039},
			expr: &seqExpr{
				pos: position{line: 989, col: 15, offset: 35053},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 989, col: 15, offset: 35053},
						expr: &ruleRefExpr{
							pos:  position{line: 989, col: 15, offset: 35053},
							name: "KeyWordRest",
						},
					},
					&litMatcher{
						pos:        position{line: 989, col: 28, offset: 35066},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "GlobStart",
			pos:  position{line: 990, col: 1, offset: 35070},
			expr: &choiceExpr{
				pos: position{line: 991, col: 5, offset: 35084},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 991, col: 5, offset: 35084},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 992, col: 5, offset: 35101},
						name: "GlobEsc",
					},
					&actionExpr{
						pos: position{line: 993, col: 5, offset: 35113},
						run: (*parser).callonGlobStart4,
						expr: &litMatcher{
							pos:        position{line: 993, col: 5, offset: 35113},
							val:        "*",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GlobRest",
			pos:  position{line: 994, col: 1, offset: 35137},
			expr: &choiceExpr{
				pos: position{line: 995, col: 5, offset: 35150},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 995, col: 5, offset: 35150},
						name: "GlobStart",
					},
					&charClassMatcher{
						pos:        position{line: 996, col: 5, offset: 35164},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "GlobEsc",
			pos:  position{line: 997, col: 1, offset: 35170},
			expr: &actionExpr{
				pos: position{line: 997, col: 11, offset: 35180},
				run: (*parser).callonGlobEsc1,
				expr: &seqExpr{
					pos: position{line: 997, col: 11, offset: 35180},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 997, col: 11, offset: 35180},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 997, col: 16, offset: 35185},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 997, col: 19, offset: 35188},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 997, col: 19, offset: 35188},
										name: "GlobEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 997, col: 32, offset: 35201},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobEscape",
			pos:  position{line: 998, col: 1, offset: 35235},
			expr: &choiceExpr{
				pos: position{line: 999, col: 5, offset: 35250},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 999, col: 5, offset: 35250},
						run: (*parser).callonGlobEscape2,
						expr: &litMatcher{
							pos:        position{line: 999, col: 5, offset: 35250},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1000, col: 5, offset: 35278},
						run: (*parser).callonGlobEscape4,
						expr: &litMatcher{
							pos:        position{line: 1000, col: 5, offset: 35278},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1001, col: 5, offset: 35308},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 1002, col: 1, offset: 35313},
			expr: &choiceExpr{
				pos: position{line: 1003, col: 5, offset: 35334},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1003, col: 5, offset: 35334},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1003, col: 5, offset: 35334},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1003, col: 5, offset: 35334},
									expr: &choiceExpr{
										pos: position{line: 1003, col: 7, offset: 35336},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1003, col: 7, offset: 35336},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1003, col: 13, offset: 35342},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1003, col: 26, offset: 35355,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1004, col: 5, offset: 35392},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1004, col: 5, offset: 35392},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1004, col: 5, offset: 35392},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1004, col: 10, offset: 35397},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1004, col: 12, offset: 35399},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 1005, col: 1, offset: 35432},
			expr: &choiceExpr{
				pos: position{line: 1006, col: 5, offset: 35451},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1006, col: 5, offset: 35451},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 1007, col: 5, offset: 35472},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 1008, col: 1, offset: 35486},
			expr: &choiceExpr{
				pos: position{line: 1009, col: 5, offset: 35507},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1009, col: 5, offset: 35507},
						val:        "'",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1010, col: 5, offset: 35515},
						run: (*parser).callonSingleCharEscape3,
						expr: &litMatcher{
							pos:        position{line: 1010, col: 5, offset: 35515},
							val:        "\"",
							ignoreCase: false,
						},
					},
					&litMatcher{
						pos:        position{line: 1011, col: 5, offset: 35555},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1012, col: 5, offset: 35564},
						run: (*parser).callonSingleCharEscape6,
						expr: &litMatcher{
							pos:        position{line: 1012, col: 5, offset: 35564},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1013, col: 5, offset: 35593},
						run: (*parser).callonSingleCharEscape8,
						expr: &litMatcher{
							pos:        position{line: 1013, col: 5, offset: 35593},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1014, col: 5, offset: 35622},
						run: (*parser).callonSingleCharEscape10,
						expr: &litMatcher{
							pos:        position{line: 1014, col: 5, offset: 35622},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1015, col: 5, offset: 35651},
						run: (*parser).callonSingleCharEscape12,
						expr: &litMatcher{
							pos:        position{line: 1015, col: 5, offset: 35651},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1016, col: 5, offset: 35680},
						run: (*parser).callonSingleCharEscape14,
						expr: &litMatcher{
							pos:        position{line: 1016, col: 5, offset: 35680},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1017, col: 5, offset: 35709},
						run: (*parser).callonSingleCharEscape16,
						expr: &litMatcher{
							pos:        position{line: 1017, col: 5, offset: 35709},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 1018, col: 1, offset: 35734},
			expr: &choiceExpr{
				pos: position{line: 1019, col: 5, offset: 35752},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1019, col: 5, offset: 35752},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 1019, col: 5, offset: 35752},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1020, col: 5, offset: 35780},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 1020, col: 5, offset: 35780},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1021, col: 5, offset: 35808},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 1022, col: 1, offset: 35813},
			expr: &choiceExpr{
				pos: position{line: 1023, col: 5, offset: 35831},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1023, col: 5, offset: 35831},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 1023, col: 5, offset: 35831},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1023, col: 5, offset: 35831},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1023, col: 9, offset: 35835},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1023, col: 16, offset: 35842},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1023, col: 16, offset: 35842},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1023, col: 25, offset: 35851},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1023, col: 34, offset: 35860},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1023, col: 43, offset: 35869},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1026, col: 5, offset: 35932},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 1026, col: 5, offset: 35932},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1026, col: 5, offset: 35932},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1026, col: 9, offset: 35936},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1026, col: 13, offset: 35940},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1026, col: 20, offset: 35947},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1026, col: 20, offset: 35947},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 1026, col: 29, offset: 35956},
												expr: &ruleRefExpr{
													pos:  position{line: 1026, col: 29, offset: 35956},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1026, col: 39, offset: 35966},
												expr: &ruleRefExpr{
													pos:  position{line: 1026, col: 39, offset: 35966},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1026, col: 49, offset: 35976},
												expr: &ruleRefExpr{
													pos:  position{line: 1026, col: 49, offset: 35976},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1026, col: 59, offset: 35986},
												expr: &ruleRefExpr{
													pos:  position{line: 1026, col: 59, offset: 35986},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1026, col: 69, offset: 35996},
												expr: &ruleRefExpr{
													pos:  position{line: 1026, col: 69, offset: 35996},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1026, col: 80, offset: 36007},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpPattern",
			pos:  position{line: 1029, col: 1, offset: 36060},
			expr: &actionExpr{
				pos: position{line: 1030, col: 5, offset: 36078},
				run: (*parser).callonRegexpPattern1,
				expr: &seqExpr{
					pos: position{line: 1030, col: 5, offset: 36078},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1030, col: 5, offset: 36078},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1030, col: 9, offset: 36082},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1030, col: 14, offset: 36087},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 1030, col: 25, offset: 36098},
							val:        "/",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1030, col: 29, offset: 36102},
							expr: &ruleRefExpr{
								pos:  position{line: 1030, col: 30, offset: 36103},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 1031, col: 1, offset: 36137},
			expr: &actionExpr{
				pos: position{line: 1032, col: 5, offset: 36152},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1032, col: 5, offset: 36152},
					expr: &choiceExpr{
						pos: position{line: 1032, col: 6, offset: 36153},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 1032, col: 6, offset: 36153},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&seqExpr{
								pos: position{line: 1032, col: 15, offset: 36162},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1032, col: 15, offset: 36162},
										val:        "\\",
										ignoreCase: false,
									},
									&anyMatcher{
										line: 1032, col: 20, offset: 36167,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 1033, col: 1, offset: 36202},
			expr: &charClassMatcher{
				pos:        position{line: 1034, col: 5, offset: 36218},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 1035, col: 1, offset: 36232},
			expr: &oneOrMoreExpr{
				pos: position{line: 1035, col: 5, offset: 36236},
				expr: &ruleRefExpr{
					pos:  position{line: 1035, col: 5, offset: 36236},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1036, col: 1, offset: 36246},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1036, col: 6, offset: 36251},
				expr: &ruleRefExpr{
					pos:  position{line: 1036, col: 6, offset: 36251},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 1037, col: 1, offset: 36261},
			expr: &choiceExpr{
				pos: position{line: 1038, col: 5, offset: 36274},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1038, col: 5, offset: 36274},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 1039, col: 5, offset: 36289},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 1040, col: 5, offset: 36308},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 1041, col: 1, offset: 36316},
			expr: &anyMatcher{
				line: 1042, col: 5, offset: 36336,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 1043, col: 1, offset: 36338},
			expr: &choiceExpr{
				pos: position{line: 1044, col: 5, offset: 36366},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1044, col: 5, offset: 36366},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1045, col: 5, offset: 36375},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1046, col: 5, offset: 36384},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1047, col: 5, offset: 36393},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1048, col: 5, offset: 36401},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1049, col: 5, offset: 36414},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 1050, col: 1, offset: 36423},
			expr: &charClassMatcher{
				pos:        position{line: 1051, col: 5, offset: 36442},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 1052, col: 1, offset: 36461},
			expr: &ruleRefExpr{
				pos:  position{line: 1053, col: 5, offset: 36483},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1054, col: 1, offset: 36501},
			expr: &seqExpr{
				pos: position{line: 1055, col: 5, offset: 36522},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1055, col: 5, offset: 36522},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1055, col: 10, offset: 36527},
						expr: &seqExpr{
							pos: position{line: 1055, col: 11, offset: 36528},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1055, col: 11, offset: 36528},
									expr: &litMatcher{
										pos:        position{line: 1055, col: 12, offset: 36529},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1055, col: 17, offset: 36534},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1055, col: 35, offset: 36552},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1056, col: 1, offset: 36557},
			expr: &seqExpr{
				pos: position{line: 1057, col: 5, offset: 36579},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1057, col: 5, offset: 36579},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1057, col: 10, offset: 36584},
						expr: &seqExpr{
							pos: position{line: 1057, col: 11, offset: 36585},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1057, col: 11, offset: 36585},
									expr: &ruleRefExpr{
										pos:  position{line: 1057, col: 12, offset: 36586},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1057, col: 27, offset: 36601},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1058, col: 1, offset: 36619},
			expr: &seqExpr{
				pos: position{line: 1058, col: 7, offset: 36625},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1058, col: 7, offset: 36625},
						expr: &ruleRefExpr{
							pos:  position{line: 1058, col: 7, offset: 36625},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1058, col: 19, offset: 36637},
						name: "LineTerminator",
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 1059, col: 1, offset: 36652},
			expr: &choiceExpr{
				pos: position{line: 1059, col: 7, offset: 36658},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1059, col: 7, offset: 36658},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 1059, col: 11, offset: 36662},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1060, col: 1, offset: 36666},
			expr: &notExpr{
				pos: position{line: 1060, col: 7, offset: 36672},
				expr: &anyMatcher{
					line: 1060, col: 8, offset: 36673,
				},
			},
		},
		{
			name: "EOKW",
			pos:  position{line: 1061, col: 1, offset: 36675},
			expr: &notExpr{
				pos: position{line: 1061, col: 8, offset: 36682},
				expr: &ruleRefExpr{
					pos:  position{line: 1061, col: 9, offset: 36683},
					name: "KeyWordChars",
				},
			},
		},
	},
}

func (c *current) onstart2(scope interface{}) (interface{}, error) {
	return []interface{}{scope}, nil
}

func (p *parser) callonstart2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart2(stack["scope"])
}

func (c *current) onstart9(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonstart9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart9(stack["seq"])
}

func (c *current) onScope1(decls, body interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Scope", "decls": decls, "body": body}, nil

}

func (p *parser) callonScope1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope1(stack["decls"], stack["body"])
}

func (c *current) onSeq1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSeq1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSeq1(stack["first"], stack["rest"])
}

func (c *current) onSeqTail1(o interface{}) (interface{}, error) {
	return o, nil
}

func (p *parser) callonSeqTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSeqTail1(stack["o"])
}

func (c *current) onDecl1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonDecl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDecl1(stack["v"])
}

func (c *current) onConstDecl2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ConstDecl", "name": id, "expr": expr}, nil

}

func (p *parser) callonConstDecl2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDecl2(stack["id"], stack["expr"])
}

func (c *current) onConstDecl13(id, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ConstDecl", "name": id, "expr": map[string]interface{}{"kind": "TypeValue", "value": map[string]interface{}{"kind": "TypeDef", "name": id, "type": typ}}}, nil

}

func (p *parser) callonConstDecl13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDecl13(stack["id"], stack["typ"])
}

func (c *current) onFuncDecl1(id, params, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "FuncDecl", "name": id, "params": params, "expr": expr}, nil

}

func (p *parser) callonFuncDecl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncDecl1(stack["id"], stack["params"], stack["expr"])
}

func (c *current) onOperation2(paths interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Parallel", "paths": paths}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["paths"])
}

func (c *current) onOperation12(expr, cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": expr, "cases": cases}, nil

}

func (p *parser) callonOperation12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation12(stack["expr"], stack["cases"])
}

func (c *current) onOperation25(cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": nil, "cases": cases}, nil

}

func (p *parser) callonOperation25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation25(stack["cases"])
}

func (c *current) onOperation35(trunks interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": trunks}, nil

}

func (p *parser) callonOperation35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation35(stack["trunks"])
}

func (c *current) onOperation45(scope interface{}) (interface{}, error) {
	return scope, nil
}

func (p *parser) callonOperation45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation45(stack["scope"])
}

func (c *current) onOperation55(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation55(stack["a"])
}

func (c *current) onOperation61(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation61(stack["a"])
}

func (c *current) onOperation71(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Search", "expr": expr}, nil

}

func (p *parser) callonOperation71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation71(stack["expr"])
}

func (c *current) onOperation77(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation77(stack["expr"])
}

func (c *current) onOperation80(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation80(stack["expr"])
}

func (c *current) onOperation83(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation83(stack["expr"])
}

func (c *current) onLeg1(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLeg1(stack["seq"])
}

func (c *current) onSwitchLeg1(expr, path interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": expr, "path": path}, nil

}

func (p *parser) callonSwitchLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchLeg1(stack["expr"], stack["path"])
}

func (c *current) onCase2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonCase2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase2(stack["expr"])
}

func (c *current) onCase8() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonCase8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase8()
}

func (c *current) onFromLeg1(source, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Trunk", "source": source, "seq": nil}
	if opt != nil {
		m["seq"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonFromLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromLeg1(stack["source"], stack["opt"])
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor13(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor13(stack["expr"])
}

func (c *current) onSearchExpr4(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Term", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonSearchExpr4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr4(stack["v"])
}

func (c *current) onSearchExpr15() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil

}

func (p *parser) callonSearchExpr15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr15()
}

func (c *current) onSearchPredicate2(lhs, op, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": op, "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonSearchPredicate2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPredicate2(stack["lhs"], stack["op"], stack["rhs"])
}

func (c *current) onSearchPredicate12(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchPredicate12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPredicate12(stack["first"], stack["rest"])
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onGlob1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Glob", "pattern": pattern}, nil

}

func (p *parser) callonGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlob1(stack["pattern"])
}

func (c *current) onRegexp1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Regexp", "pattern": pattern}, nil

}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["pattern"])
}

func (c *current) onAggregation2(keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Summarize", "keys": keys, "aggs": nil, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["keys"], stack["limit"])
}

func (c *current) onAggregation10(aggs, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"kind": "Summarize", "keys": nil, "aggs": aggs, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation10(stack["aggs"], stack["keys"], stack["limit"])
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAggAssignment2(lval, agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lval, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment2(stack["lval"], stack["agg"])
}

func (c *current) onAggAssignment11(agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment11(stack["agg"])
}

func (c *current) onAgg1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"kind": "Agg", "name": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonAgg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAgg1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onAggAssignments1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonAggAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssertOp6(e interface{}) (interface{}, error) {
	return []interface{}{e, string(c.text)}, nil
}

func (p *parser) callonAssertOp6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssertOp6(stack["e"])
}

func (c *current) onAssertOp1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Yield", "exprs": []interface{}{map[string]interface{}{"kind": "Conditional", "cond": expr.([]interface{})[0], "then": map[string]interface{}{"kind": "ID", "name": "this"}, "else": map[string]interface{}{"kind": "Call", "name": "error", "args": []interface{}{map[string]interface{}{"kind": "RecordExpr", "elems": []interface{}{map[string]interface{}{"kind": "Field", "name": "message", "value": map[string]interface{}{"kind": "Primitive", "text": "assertion failed", "type": "string"}}, map[string]interface{}{"kind": "Field", "name": "expr", "value": map[string]interface{}{"kind": "Primitive", "text": expr.([]interface{})[1], "type": "string"}}, map[string]interface{}{"kind": "Field", "name": "on", "value": map[string]interface{}{"kind": "ID", "name": "this"}}}}}, "where": nil}}}}, nil

}

func (p *parser) callonAssertOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssertOp1(stack["expr"])
}

func (c *current) onSortOp10(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortOp10(stack["l"])
}

func (c *current) onSortOp1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var op = map[string]interface{}{"kind": "Sort", "args": list, "order": "asc", "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		op["order"] = "desc"
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			op["nullsfirst"] = true
		}
	}
	return op, nil

}

func (p *parser) callonSortOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortOp1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopOp8(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopOp8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp8(stack["n"])
}

func (c *current) onTopOp20(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopOp20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp20(stack["f"])
}

func (c *current) onTopOp1(limit, flush, fields interface{}) (interface{}, error) {
	var op = map[string]interface{}{"kind": "Top", "limit": 0, "args": nil, "flush": false}
	if limit != nil {
		op["limit"] = limit
	}
	if fields != nil {
		op["args"] = fields
	}
	if flush != nil {
		op["flush"] = true
	}
	return op, nil

}

func (p *parser) callonTopOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cut", "args": args}, nil

}

func (p *parser) callonCutOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutOp1(stack["args"])
}

func (c *current) onDropOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Drop", "args": args}, nil

}

func (p *parser) callonDropOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropOp1(stack["args"])
}

func (c *current) onHeadOp2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": count}, nil
}

func (p *parser) callonHeadOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOp2(stack["count"])
}

func (c *current) onHeadOp10() (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": map[string]interface{}{"kind": "Primitive", "type": "int64", "text": "1"}}, nil
}

func (p *parser) callonHeadOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOp10()
}

func (c *current) onTailOp2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": count}, nil
}

func (p *parser) callonTailOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailOp2(stack["count"])
}

func (c *current) onTailOp10() (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": map[string]interface{}{"kind": "Primitive", "type": "int64", "text": "1"}}, nil
}

func (p *parser) callonTailOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailOp10()
}

func (c *current) onWhereOp1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Where", "expr": expr}, nil

}

func (p *parser) callonWhereOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereOp1(stack["expr"])
}

func (c *current) onUniqOp2() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": true}, nil

}

func (p *parser) callonUniqOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqOp2()
}

func (c *current) onUniqOp7() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": false}, nil

}

func (p *parser) callonUniqOp7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqOp7()
}

func (c *current) onPutOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Put", "args": args}, nil

}

func (p *parser) callonPutOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutOp1(stack["args"])
}

func (c *current) onRenameOp9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameOp9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameOp9(stack["cl"])
}

func (c *current) onRenameOp1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Rename", "args": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameOp1(stack["first"], stack["rest"])
}

func (c *current) onFuseOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Fuse"}, nil

}

func (p *parser) callonFuseOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseOp1()
}

func (c *current) onShapeOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Shape"}, nil

}

func (p *parser) callonShapeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShapeOp1()
}

func (c *current) onJoinOp1(style, rightInput, key, optKey, optArgs interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Join", "style": style, "right_input": rightInput, "left_key": key, "right_key": key, "args": nil}
	if optKey != nil {
		m["right_key"] = optKey.([]interface{})[3]
	}
	if optArgs != nil {
		m["args"] = optArgs.([]interface{})[1]
	}
	return m, nil

}

func (p *parser) callonJoinOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinOp1(stack["style"], stack["rightInput"], stack["key"], stack["optKey"], stack["optArgs"])
}

func (c *current) onJoinStyle2() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle2()
}

func (c *current) onJoinStyle6() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle6()
}

func (c *current) onJoinStyle10() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle10()
}

func (c *current) onJoinStyle14() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonJoinStyle14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle14()
}

func (c *current) onJoinStyle18() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle18()
}

func (c *current) onJoinRightInput2(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonJoinRightInput2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinRightInput2(stack["s"])
}

func (c *current) onJoinRightInput12() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonJoinRightInput12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinRightInput12()
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onSampleOp1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sample", "expr": e}, nil
}

func (p *parser) callonSampleOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleOp1(stack["e"])
}

func (c *current) onOpAssignment1(a interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpAssignment", "assignments": a}, nil

}

func (p *parser) callonOpAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpAssignment1(stack["a"])
}

func (c *current) onSampleExpr2(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonSampleExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr2(stack["lval"])
}

func (c *current) onSampleExpr7() (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": "this"}, nil
}

func (p *parser) callonSampleExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr7()
}

func (c *current) onLoadOp1(pool, branch, author, message, meta interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Load", "pool": pool, "branch": branch, "author": author, "message": message, "meta": meta}, nil

}

func (p *parser) callonLoadOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLoadOp1(stack["pool"], stack["branch"], stack["author"], stack["message"], stack["meta"])
}

func (c *current) onAuthorArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonAuthorArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAuthorArg1(stack["val"])
}

func (c *current) onMessageArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonMessageArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMessageArg1(stack["val"])
}

func (c *current) onMetaArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonMetaArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMetaArg1(stack["val"])
}

func (c *current) onPoolBranch1(branch interface{}) (interface{}, error) {
	return branch, nil
}

func (p *parser) callonPoolBranch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBranch1(stack["branch"])
}

func (c *current) onFromOp1(source interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": []interface{}{map[string]interface{}{"kind": "Trunk", "source": source}}}, nil

}

func (p *parser) callonFromOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromOp1(stack["source"])
}

func (c *current) onFile1(path, format, sort_key interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "File", "path": path, "format": format, "sort_key": sort_key}, nil

}

func (p *parser) callonFile1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile1(stack["path"], stack["format"], stack["sort_key"])
}

func (c *current) onFrom1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonFrom1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrom1(stack["body"])
}

func (c *current) onPool1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonPool1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPool1(stack["body"])
}

func (c *current) onPoolBody1(spec, at interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pool", "spec": spec, "at": at}, nil

}

func (p *parser) callonPoolBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBody1(stack["spec"], stack["at"])
}

func (c *current) onGet1(url, format, sort_key interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "HTTP", "url": url, "format": format, "sort_key": sort_key}, nil

}

func (p *parser) callonGet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGet1(stack["url"], stack["format"], stack["sort_key"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onPath2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonPath2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath2(stack["v"])
}

func (c *current) onPath5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPath5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath5()
}

func (c *current) onPoolAt1(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonPoolAt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolAt1(stack["id"])
}

func (c *current) onKSUID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKSUID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKSUID1()
}

func (c *current) onPoolSpec2(pool, commit, meta, tap interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": pool, "commit": commit, "meta": meta, "tap": tap}, nil

}

func (p *parser) callonPoolSpec2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec2(stack["pool"], stack["commit"], stack["meta"], stack["tap"])
}

func (c *current) onPoolSpec14(meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": nil, "commit": nil, "meta": meta}, nil

}

func (p *parser) callonPoolSpec14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec14(stack["meta"])
}

func (c *current) onPoolCommit1(commit interface{}) (interface{}, error) {
	return commit, nil
}

func (p *parser) callonPoolCommit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolCommit1(stack["commit"])
}

func (c *current) onPoolMeta1(meta interface{}) (interface{}, error) {
	return meta, nil
}

func (p *parser) callonPoolMeta1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolMeta1(stack["meta"])
}

func (c *current) onPoolName3() (interface{}, error) {
	return map[string]interface{}{"kind": "Glob", "pattern": "*"}, nil
}

func (p *parser) callonPoolName3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName3()
}

func (c *current) onPoolName9(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "String", "text": name}, nil
}

func (p *parser) callonPoolName9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName9(stack["name"])
}

func (c *current) onPoolIdentifier1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPoolIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolIdentifier1()
}

func (c *current) onSortKeyArg1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SortKey", "keys": keys, "order": order}, nil

}

func (p *parser) callonSortKeyArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortKeyArg1(stack["keys"], stack["order"])
}

func (c *current) onTapArg2() (interface{}, error) {
	return true, nil
}

func (p *parser) callonTapArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTapArg2()
}

func (c *current) onTapArg6() (interface{}, error) {
	return false, nil
}

func (p *parser) callonTapArg6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTapArg6()
}

func (c *current) onFormatArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonFormatArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArg1(stack["val"])
}

func (c *current) onOrderSuffix2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix2()
}

func (c *current) onOrderSuffix4() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderSuffix4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix4()
}

func (c *current) onOrderSuffix6() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix6()
}

func (c *current) onPassOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Pass"}, nil

}

func (p *parser) callonPassOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassOp1()
}

func (c *current) onExplodeOp1(args, typ, as interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Explode", "args": args, "as": as, "type": typ}, nil

}

func (p *parser) callonExplodeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplodeOp1(stack["args"], stack["typ"], stack["as"])
}

func (c *current) onMergeOp1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Merge", "expr": expr}, nil

}

func (p *parser) callonMergeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMergeOp1(stack["expr"])
}

func (c *current) onOverOp1(exprs, locals, body interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Over", "exprs": exprs, "locals": locals, "body": body}, nil

}

func (p *parser) callonOverOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverOp1(stack["exprs"], stack["locals"], stack["body"])
}

func (c *current) onLateral2(scope interface{}) (interface{}, error) {
	return scope, nil
}

func (p *parser) callonLateral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLateral2(stack["scope"])
}

func (c *current) onLateral13(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonLateral13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLateral13(stack["seq"])
}

func (c *current) onLocals10(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonLocals10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocals10(stack["a"])
}

func (c *current) onLocals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLocals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocals1(stack["first"], stack["rest"])
}

func (c *current) onLocalsAssignment1(name, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"name": name, "expr": map[string]interface{}{"kind": "ID", "name": name}}
	if opt != nil {
		m["expr"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonLocalsAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocalsAssignment1(stack["name"], stack["opt"])
}

func (c *current) onYieldOp1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Yield", "exprs": exprs}, nil

}

func (p *parser) callonYieldOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYieldOp1(stack["exprs"])
}

func (c *current) onTypeArg1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeArg1(stack["typ"])
}

func (c *current) onAsArg1(lhs interface{}) (interface{}, error) {
	return lhs, nil
}

func (p *parser) callonAsArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsArg1(stack["lhs"])
}

func (c *current) onLvals7(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonLvals7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals7(stack["lval"])
}

func (c *current) onLvals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLvals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals1(stack["first"], stack["rest"])
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignments7(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments7(stack["a"])
}

func (c *current) onAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr1(cond, opt interface{}) (interface{}, error) {
	if opt != nil {
		var Then = opt.([]interface{})[3]
		var Else = opt.([]interface{})[7]
		return map[string]interface{}{"kind": "Conditional", "cond": cond, "then": Then, "else": Else}, nil
	}
	return cond, nil

}

func (p *parser) callonConditionalExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr1(stack["cond"], stack["opt"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onComparisonExpr15() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparisonExpr15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr15()
}

func (c *current) onComparisonExpr1(lhs, opAndRHS interface{}) (interface{}, error) {
	if opAndRHS == nil {
		return lhs, nil
	}
	var op = opAndRHS.([]interface{})[1]
	var rhs = opAndRHS.([]interface{})[3]
	return map[string]interface{}{"kind": "BinaryExpr", "op": op, "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonComparisonExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr1(stack["lhs"], stack["opAndRHS"])
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onNegationExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "-", "operand": e}, nil

}

func (p *parser) callonNegationExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNegationExpr2(stack["e"])
}

func (c *current) onFuncExpr2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr2(stack["first"], stack["rest"])
}

func (c *current) onFuncExpr9(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr9(stack["first"], stack["rest"])
}

func (c *current) onCast1(typ, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": expr, "type": typ}, nil

}

func (p *parser) callonCast1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCast1(stack["typ"], stack["expr"])
}

func (c *current) onFunction3(arg0Text, arg1, where interface{}) (interface{}, error) {
	var arg0 = map[string]interface{}{"kind": "Primitive", "type": "string", "text": arg0Text}
	return map[string]interface{}{"kind": "Call", "name": "regexp", "args": []interface{}{arg0, arg1}, "where": where}, nil

}

func (p *parser) callonFunction3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction3(stack["arg0Text"], stack["arg1"], stack["where"])
}

func (c *current) onFunction21(arg0, arg1Text, arg2, where interface{}) (interface{}, error) {
	var arg1 = map[string]interface{}{"kind": "Primitive", "type": "string", "text": arg1Text}
	return map[string]interface{}{"kind": "Call", "name": "regexp_replace", "args": []interface{}{arg0, arg1, arg2}, "where": where}, nil

}

func (p *parser) callonFunction21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction21(stack["arg0"], stack["arg1Text"], stack["arg2"], stack["where"])
}

func (c *current) onFunction44(fn, args, where interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": fn, "args": args, "where": where}, nil

}

func (p *parser) callonFunction44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction44(stack["fn"], stack["args"], stack["where"])
}

func (c *current) onFunctionArgs2(o interface{}) (interface{}, error) {
	return []interface{}{o}, nil
}

func (p *parser) callonFunctionArgs2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunctionArgs2(stack["o"])
}

func (c *current) onGrep1(pattern, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Grep", "pattern": pattern, "expr": map[string]interface{}{"kind": "ID", "name": "this"}}
	if opt != nil {
		m["expr"] = opt.([]interface{})[2]
	}
	return m, nil

}

func (p *parser) callonGrep1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrep1(stack["pattern"], stack["opt"])
}

func (c *current) onPattern4(s interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "String", "text": s}, nil

}

func (p *parser) callonPattern4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPattern4(stack["s"])
}

func (c *current) onOptionalExprs3() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonOptionalExprs3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalExprs3()
}

func (c *current) onExprs7(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonExprs7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs7(stack["e"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr1(stack["first"], stack["rest"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":", "lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref14(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":", "lhs": nil, "rhs": to}}, nil

}

func (p *parser) callonDeref14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref14(stack["to"])
}

func (c *current) onDeref23(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref23(stack["expr"])
}

func (c *current) onDeref29(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref29(stack["id"])
}

func (c *current) onPrimary7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary7(stack["expr"])
}

func (c *current) onPrimary15(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary15(stack["expr"])
}

func (c *current) onOverExpr1(exprs, locals, body interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OverExpr", "locals": locals, "exprs": exprs, "body": body}, nil

}

func (p *parser) callonOverExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverExpr1(stack["exprs"], stack["locals"], stack["body"])
}

func (c *current) onRecord1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RecordExpr", "elems": elems}, nil

}

func (p *parser) callonRecord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecord1(stack["elems"])
}

func (c *current) onRecordElems2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonRecordElems2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems2(stack["first"], stack["rest"])
}

func (c *current) onRecordElems9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonRecordElems9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems9()
}

func (c *current) onRecordElemTail1(elem interface{}) (interface{}, error) {
	return elem, nil
}

func (p *parser) callonRecordElemTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElemTail1(stack["elem"])
}

func (c *current) onSpread1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Spread", "expr": expr}, nil

}

func (p *parser) callonSpread1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpread1(stack["expr"])
}

func (c *current) onField1(name, value interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Field", "name": name, "value": value}, nil

}

func (p *parser) callonField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField1(stack["name"], stack["value"])
}

func (c *current) onArray1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ArrayExpr", "elems": elems}, nil

}

func (p *parser) callonArray1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArray1(stack["elems"])
}

func (c *current) onSet1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SetExpr", "elems": elems}, nil

}

func (p *parser) callonSet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSet1(stack["elems"])
}

func (c *current) onVectorElems8(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonVectorElems8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems8(stack["e"])
}

func (c *current) onVectorElems2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonVectorElems2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems2(stack["first"], stack["rest"])
}

func (c *current) onVectorElems15() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonVectorElems15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems15()
}

func (c *current) onVectorElem3(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "VectorValue", "expr": e}, nil
}

func (p *parser) callonVectorElem3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElem3(stack["e"])
}

func (c *current) onMap1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "MapExpr", "entries": exprs}, nil

}

func (p *parser) callonMap1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMap1(stack["exprs"])
}

func (c *current) onEntries2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonEntries2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries2(stack["first"], stack["rest"])
}

func (c *current) onEntries9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonEntries9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries9()
}

func (c *current) onEntryTail1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonEntryTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntryTail1(stack["e"])
}

func (c *current) onEntry1(key, value interface{}) (interface{}, error) {
	return map[string]interface{}{"key": key, "value": value}, nil

}

func (p *parser) callonEntry1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntry1(stack["key"], stack["value"])
}

func (c *current) onSQLOp1(selection, from, joins, where, groupby, having, orderby, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SQLExpr", "select": selection, "from": from, "joins": joins, "where": where, "group_by": groupby, "having": having, "order_by": orderby, "limit": limit}, nil

}

func (p *parser) callonSQLOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOp1(stack["selection"], stack["from"], stack["joins"], stack["where"], stack["groupby"], stack["having"], stack["orderby"], stack["limit"])
}

func (c *current) onSQLSelect2() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLSelect2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect2()
}

func (c *current) onSQLSelect7(assignments interface{}) (interface{}, error) {
	return assignments, nil
}

func (p *parser) callonSQLSelect7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect7(stack["assignments"])
}

func (c *current) onSQLAssignment1(rhs, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": rhs}
	if opt != nil {
		m["lhs"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonSQLAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment1(stack["rhs"], stack["opt"])
}

func (c *current) onSQLAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments7(stack["expr"])
}

func (c *current) onSQLAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSQLFrom2(table, alias interface{}) (interface{}, error) {
	return map[string]interface{}{"table": table, "alias": alias}, nil

}

func (p *parser) callonSQLFrom2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom2(stack["table"], stack["alias"])
}

func (c *current) onSQLFrom12() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLFrom12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom12()
}

func (c *current) onSQLAlias2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias2(stack["id"])
}

func (c *current) onSQLAlias9(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias9(stack["id"])
}

func (c *current) onSQLJoins7(join interface{}) (interface{}, error) {
	return join, nil
}

func (p *parser) callonSQLJoins7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins7(stack["join"])
}

func (c *current) onSQLJoins1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLJoins1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins1(stack["first"], stack["rest"])
}

func (c *current) onSQLJoin1(style, table, alias, leftKey, rightKey interface{}) (interface{}, error) {
	return map[string]interface{}{"table": table, "style": style, "left_key": leftKey, "right_key": rightKey, "alias": alias}, nil

}

func (p *parser) callonSQLJoin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoin1(stack["style"], stack["table"], stack["alias"], stack["leftKey"], stack["rightKey"])
}

func (c *current) onSQLJoinStyle2(style interface{}) (interface{}, error) {
	return style, nil
}

func (p *parser) callonSQLJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle2(stack["style"])
}

func (c *current) onSQLJoinStyle11() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonSQLJoinStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle11()
}

func (c *current) onSQLWhere1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLWhere1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLWhere1(stack["expr"])
}

func (c *current) onSQLGroupBy1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonSQLGroupBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLGroupBy1(stack["columns"])
}

func (c *current) onSQLHaving1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLHaving1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLHaving1(stack["expr"])
}

func (c *current) onSQLOrderBy1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SQLOrderBy", "keys": keys, "order": order}, nil

}

func (p *parser) callonSQLOrderBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrderBy1(stack["keys"], stack["order"])
}

func (c *current) onSQLOrder2(dir interface{}) (interface{}, error) {
	return dir, nil
}

func (p *parser) callonSQLOrder2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder2(stack["dir"])
}

func (c *current) onSQLOrder9() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonSQLOrder9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder9()
}

func (c *current) onSQLLimit2(count interface{}) (interface{}, error) {
	return count, nil
}

func (p *parser) callonSQLLimit2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit2(stack["count"])
}

func (c *current) onSQLLimit9() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonSQLLimit9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit9()
}

func (c *current) onSELECT1() (interface{}, error) {
	return "select", nil
}

func (p *parser) callonSELECT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSELECT1()
}

func (c *current) onAS1() (interface{}, error) {
	return "as", nil
}

func (p *parser) callonAS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAS1()
}

func (c *current) onFROM1() (interface{}, error) {
	return "from", nil
}

func (p *parser) callonFROM1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFROM1()
}

func (c *current) onJOIN1() (interface{}, error) {
	return "join", nil
}

func (p *parser) callonJOIN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJOIN1()
}

func (c *current) onWHERE1() (interface{}, error) {
	return "where", nil
}

func (p *parser) callonWHERE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWHERE1()
}

func (c *current) onGROUP1() (interface{}, error) {
	return "group", nil
}

func (p *parser) callonGROUP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGROUP1()
}

func (c *current) onBY1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonBY1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBY1()
}

func (c *current) onHAVING1() (interface{}, error) {
	return "having", nil
}

func (p *parser) callonHAVING1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHAVING1()
}

func (c *current) onORDER1() (interface{}, error) {
	return "order", nil
}

func (p *parser) callonORDER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onORDER1()
}

func (c *current) onON1() (interface{}, error) {
	return "on", nil
}

func (p *parser) callonON1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onON1()
}

func (c *current) onLIMIT1() (interface{}, error) {
	return "limit", nil
}

func (p *parser) callonLIMIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIMIT1()
}

func (c *current) onASC1() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonASC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onASC1()
}

func (c *current) onDESC1() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonDESC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDESC1()
}

func (c *current) onANTI1() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonANTI1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onANTI1()
}

func (c *current) onLEFT1() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonLEFT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLEFT1()
}

func (c *current) onRIGHT1() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonRIGHT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRIGHT1()
}

func (c *current) onINNER1() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonINNER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINNER1()
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "float64", "text": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "int64", "text": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "null", "text": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onBytesLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bytes", "text": string(c.text)}, nil

}

func (p *parser) callonBytesLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBytesLiteral1()
}

func (c *current) onTypeLiteral1(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonTypeLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeLiteral1(stack["typ"])
}

func (c *current) onCastType3(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonCastType3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCastType3(stack["typ"])
}

func (c *current) onAmbiguousType2(name interface{}) (interface{}, error) {
	return name, nil
}

func (p *parser) callonAmbiguousType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType2(stack["name"])
}

func (c *current) onAmbiguousType8(name, opt interface{}) (interface{}, error) {
	if opt != nil {
		return map[string]interface{}{"kind": "TypeDef", "name": name, "type": opt.([]interface{})[3]}, nil
	}
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType8(stack["name"], stack["opt"])
}

func (c *current) onAmbiguousType19(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType19(stack["name"])
}

func (c *current) onAmbiguousType22(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonAmbiguousType22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType22(stack["u"])
}

func (c *current) onTypeUnion1(types interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeUnion", "types": types}, nil

}

func (p *parser) callonTypeUnion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeUnion1(stack["types"])
}

func (c *current) onTypeList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeList1(stack["first"], stack["rest"])
}

func (c *current) onTypeListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeListTail1(stack["typ"])
}

func (c *current) onComplexType2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType2(stack["fields"])
}

func (c *current) onComplexType10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexType10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType10(stack["typ"])
}

func (c *current) onComplexType18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexType18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType18(stack["typ"])
}

func (c *current) onComplexType26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexType26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType26(stack["keyType"], stack["valType"])
}

func (c *current) onTemplateLiteral1(v interface{}) (interface{}, error) {
	if len(v.([]interface{})) == 0 {
		return map[string]interface{}{"kind": "Primitive", "type": "string", "text": ""}, nil
	}
	return makeTemplateExprChain(v), nil

}

func (p *parser) callonTemplateLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteral1(stack["v"])
}

func (c *current) onTemplateLiteralParts2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts2(stack["v"])
}

func (c *current) onTemplateLiteralParts9(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts9(stack["v"])
}

func (c *current) onTemplateDoubleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateDoubleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedPart3(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar2(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar7(stack["v"])
}

func (c *current) onTemplateSingleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateSingleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedPart3(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar2(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar7(stack["v"])
}

func (c *current) onTemplateExpr1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": e, "type": map[string]interface{}{"kind": "TypeValue", "value": map[string]interface{}{"kind": "TypePrimitive", "name": "string"}}}, nil

}

func (p *parser) callonTemplateExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateExpr1(stack["e"])
}

func (c *current) onPrimitiveType1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveType1()
}

func (c *current) onTypeFieldList2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList2(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldList9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonTypeFieldList9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList9()
}

func (c *current) onTypeFieldListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTail1(stack["typ"])
}

func (c *current) onTypeField1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeField1(stack["name"], stack["typ"])
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return "in", nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onIdentifierName19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName19()
}

func (c *current) onIdentifierName21(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName21(stack["id"])
}

func (c *current) onIdentifierNames7(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierNames7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierNames7(stack["id"])
}

func (c *current) onIdentifierNames1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonIdentifierNames1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierNames1(stack["first"], stack["rest"])
}

func (c *current) onTime1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "time", "text": string(c.text)}, nil

}

func (p *parser) callonTime1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTime1()
}

func (c *current) onDuration1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "duration", "text": string(c.text)}, nil

}

func (p *parser) callonDuration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDuration1()
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onFloatString22() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFloatString22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString22()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordChars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordChars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordChars1()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onGlobPattern1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil

}

func (p *parser) callonGlobPattern1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobPattern1(stack["head"], stack["tail"])
}

func (c *current) onGlobStart4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonGlobStart4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobStart4()
}

func (c *current) onGlobEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonGlobEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEsc1(stack["s"])
}

func (c *current) onGlobEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonGlobEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape2()
}

func (c *current) onGlobEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonGlobEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape4()
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onSingleCharEscape3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleCharEscape3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape3()
}

func (c *current) onSingleCharEscape6() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape6()
}

func (c *current) onSingleCharEscape8() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape8()
}

func (c *current) onSingleCharEscape10() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape10()
}

func (c *current) onSingleCharEscape12() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape12()
}

func (c *current) onSingleCharEscape14() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape14()
}

func (c *current) onSingleCharEscape16() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape16()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexpPattern1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexpPattern1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpPattern1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
