// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/brimdata/zed/reglob"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 7, col: 1, offset: 26},
			expr: &actionExpr{
				pos: position{line: 7, col: 9, offset: 34},
				run: (*parser).callonstart1,
				expr: &seqExpr{
					pos: position{line: 7, col: 9, offset: 34},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 7, col: 9, offset: 34},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 7, col: 12, offset: 37},
							label: "ast",
							expr: &ruleRefExpr{
								pos:  position{line: 7, col: 16, offset: 41},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 27, offset: 52},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 30, offset: 55},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Sequential",
			pos:  position{line: 9, col: 1, offset: 80},
			expr: &choiceExpr{
				pos: position{line: 10, col: 5, offset: 95},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 10, col: 5, offset: 95},
						run: (*parser).callonSequential2,
						expr: &seqExpr{
							pos: position{line: 10, col: 5, offset: 95},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 10, col: 5, offset: 95},
									label: "consts",
									expr: &ruleRefExpr{
										pos:  position{line: 10, col: 12, offset: 102},
										name: "Consts",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 10, col: 19, offset: 109},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 10, col: 22, offset: 112},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 10, col: 28, offset: 118},
										name: "Operation",
									},
								},
								&labeledExpr{
									pos:   position{line: 10, col: 38, offset: 128},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 10, col: 43, offset: 133},
										expr: &ruleRefExpr{
											pos:  position{line: 10, col: 43, offset: 133},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 13, col: 5, offset: 308},
						run: (*parser).callonSequential12,
						expr: &seqExpr{
							pos: position{line: 13, col: 5, offset: 308},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 13, col: 5, offset: 308},
									label: "consts",
									expr: &ruleRefExpr{
										pos:  position{line: 13, col: 12, offset: 315},
										name: "Consts",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 13, col: 19, offset: 322},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 13, col: 22, offset: 325},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 13, col: 25, offset: 328},
										name: "Operation",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SequentialTail",
			pos:  position{line: 17, col: 1, offset: 455},
			expr: &actionExpr{
				pos: position{line: 17, col: 18, offset: 472},
				run: (*parser).callonSequentialTail1,
				expr: &seqExpr{
					pos: position{line: 17, col: 18, offset: 472},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 17, col: 18, offset: 472},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 21, offset: 475},
							name: "Pipe",
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 26, offset: 480},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 17, col: 29, offset: 483},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 31, offset: 485},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Consts",
			pos:  position{line: 19, col: 1, offset: 514},
			expr: &choiceExpr{
				pos: position{line: 20, col: 5, offset: 525},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 20, col: 5, offset: 525},
						expr: &ruleRefExpr{
							pos:  position{line: 20, col: 5, offset: 525},
							name: "Const",
						},
					},
					&actionExpr{
						pos: position{line: 21, col: 5, offset: 536},
						run: (*parser).callonConsts4,
						expr: &ruleRefExpr{
							pos:  position{line: 21, col: 5, offset: 536},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Const",
			pos:  position{line: 23, col: 1, offset: 572},
			expr: &actionExpr{
				pos: position{line: 23, col: 9, offset: 580},
				run: (*parser).callonConst1,
				expr: &seqExpr{
					pos: position{line: 23, col: 9, offset: 580},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 23, col: 9, offset: 580},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 23, col: 12, offset: 583},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 23, col: 14, offset: 585},
								name: "ConstDef",
							},
						},
					},
				},
			},
		},
		{
			name: "ConstDef",
			pos:  position{line: 25, col: 1, offset: 613},
			expr: &choiceExpr{
				pos: position{line: 26, col: 5, offset: 626},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 26, col: 5, offset: 626},
						run: (*parser).callonConstDef2,
						expr: &seqExpr{
							pos: position{line: 26, col: 5, offset: 626},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 26, col: 5, offset: 626},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 26, col: 13, offset: 634},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 26, col: 15, offset: 636},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 26, col: 18, offset: 639},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 26, col: 33, offset: 654},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 26, col: 36, offset: 657},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 26, col: 40, offset: 661},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 26, col: 43, offset: 664},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 26, col: 48, offset: 669},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 29, col: 5, offset: 751},
						run: (*parser).callonConstDef13,
						expr: &seqExpr{
							pos: position{line: 29, col: 5, offset: 751},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 29, col: 5, offset: 751},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 29, col: 12, offset: 758},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 29, col: 14, offset: 760},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 29, col: 17, offset: 763},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 29, col: 32, offset: 778},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 29, col: 35, offset: 781},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 29, col: 39, offset: 785},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 29, col: 42, offset: 788},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 29, col: 46, offset: 792},
										name: "Type",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operation",
			pos:  position{line: 39, col: 1, offset: 1016},
			expr: &choiceExpr{
				pos: position{line: 40, col: 5, offset: 1030},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 40, col: 5, offset: 1030},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 40, col: 5, offset: 1030},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 40, col: 5, offset: 1030},
									val:        "split",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 40, col: 13, offset: 1038},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 40, col: 16, offset: 1041},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 40, col: 20, offset: 1045},
									label: "procArray",
									expr: &oneOrMoreExpr{
										pos: position{line: 40, col: 30, offset: 1055},
										expr: &ruleRefExpr{
											pos:  position{line: 40, col: 30, offset: 1055},
											name: "SplitLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 40, col: 40, offset: 1065},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 40, col: 43, offset: 1068},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 43, col: 5, offset: 1165},
						run: (*parser).callonOperation12,
						expr: &seqExpr{
							pos: position{line: 43, col: 5, offset: 1165},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 43, col: 5, offset: 1165},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 43, col: 14, offset: 1174},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 43, col: 16, offset: 1176},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 43, col: 21, offset: 1181},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 43, col: 26, offset: 1186},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 43, col: 28, offset: 1188},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 43, col: 32, offset: 1192},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 43, col: 38, offset: 1198},
										expr: &ruleRefExpr{
											pos:  position{line: 43, col: 38, offset: 1198},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 43, col: 49, offset: 1209},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 43, col: 52, offset: 1212},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 46, col: 5, offset: 1317},
						run: (*parser).callonOperation25,
						expr: &seqExpr{
							pos: position{line: 46, col: 5, offset: 1317},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 46, col: 5, offset: 1317},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 46, col: 14, offset: 1326},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 46, col: 17, offset: 1329},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 46, col: 21, offset: 1333},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 46, col: 27, offset: 1339},
										expr: &ruleRefExpr{
											pos:  position{line: 46, col: 27, offset: 1339},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 46, col: 38, offset: 1350},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 46, col: 41, offset: 1353},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 49, col: 5, offset: 1457},
						run: (*parser).callonOperation35,
						expr: &seqExpr{
							pos: position{line: 49, col: 5, offset: 1457},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 49, col: 5, offset: 1457},
									val:        "from",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 49, col: 12, offset: 1464},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 49, col: 15, offset: 1467},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 49, col: 19, offset: 1471},
									label: "trunks",
									expr: &oneOrMoreExpr{
										pos: position{line: 49, col: 26, offset: 1478},
										expr: &ruleRefExpr{
											pos:  position{line: 49, col: 26, offset: 1478},
											name: "FromLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 49, col: 35, offset: 1487},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 49, col: 38, offset: 1490},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&labeledExpr{
						pos:   position{line: 52, col: 5, offset: 1581},
						label: "op",
						expr: &ruleRefExpr{
							pos:  position{line: 52, col: 8, offset: 1584},
							name: "Operator",
						},
					},
					&actionExpr{
						pos: position{line: 53, col: 5, offset: 1597},
						run: (*parser).callonOperation47,
						expr: &seqExpr{
							pos: position{line: 53, col: 5, offset: 1597},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 53, col: 5, offset: 1597},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 53, col: 7, offset: 1599},
										name: "Function",
									},
								},
								&andExpr{
									pos: position{line: 53, col: 16, offset: 1608},
									expr: &ruleRefExpr{
										pos:  position{line: 53, col: 17, offset: 1609},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 54, col: 5, offset: 1639},
						run: (*parser).callonOperation53,
						expr: &seqExpr{
							pos: position{line: 54, col: 5, offset: 1639},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 54, col: 5, offset: 1639},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 54, col: 7, offset: 1641},
										name: "OpAssignment",
									},
								},
								&andExpr{
									pos: position{line: 54, col: 20, offset: 1654},
									expr: &ruleRefExpr{
										pos:  position{line: 54, col: 21, offset: 1655},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 55, col: 5, offset: 1685},
						run: (*parser).callonOperation59,
						expr: &seqExpr{
							pos: position{line: 55, col: 5, offset: 1685},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 55, col: 5, offset: 1685},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 55, col: 7, offset: 1687},
										name: "Aggregation",
									},
								},
								&andExpr{
									pos: position{line: 55, col: 19, offset: 1699},
									expr: &ruleRefExpr{
										pos:  position{line: 55, col: 20, offset: 1700},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 56, col: 5, offset: 1731},
						run: (*parser).callonOperation65,
						expr: &seqExpr{
							pos: position{line: 56, col: 5, offset: 1731},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 56, col: 5, offset: 1731},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 56, col: 10, offset: 1736},
										name: "SearchBoolean",
									},
								},
								&notExpr{
									pos: position{line: 56, col: 24, offset: 1750},
									expr: &ruleRefExpr{
										pos:  position{line: 56, col: 25, offset: 1751},
										name: "AggGuard",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EndOfOp",
			pos:  position{line: 60, col: 1, offset: 1842},
			expr: &seqExpr{
				pos: position{line: 60, col: 11, offset: 1852},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 60, col: 11, offset: 1852},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 60, col: 15, offset: 1856},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 60, col: 15, offset: 1856},
								name: "Pipe",
							},
							&ruleRefExpr{
								pos:  position{line: 60, col: 22, offset: 1863},
								name: "SearchKeywordGuard",
							},
							&litMatcher{
								pos:        position{line: 60, col: 43, offset: 1884},
								val:        "=>",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 60, col: 50, offset: 1891},
								val:        ")",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 60, col: 56, offset: 1897},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "Pipe",
			pos:  position{line: 61, col: 1, offset: 1902},
			expr: &seqExpr{
				pos: position{line: 61, col: 8, offset: 1909},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 61, col: 8, offset: 1909},
						val:        "|",
						ignoreCase: false,
					},
					&notExpr{
						pos: position{line: 61, col: 12, offset: 1913},
						expr: &choiceExpr{
							pos: position{line: 61, col: 14, offset: 1915},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 61, col: 14, offset: 1915},
									val:        "{",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 61, col: 20, offset: 1921},
									val:        "[",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SplitLeg",
			pos:  position{line: 63, col: 1, offset: 1927},
			expr: &actionExpr{
				pos: position{line: 64, col: 5, offset: 1940},
				run: (*parser).callonSplitLeg1,
				expr: &seqExpr{
					pos: position{line: 64, col: 5, offset: 1940},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 64, col: 5, offset: 1940},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 64, col: 8, offset: 1943},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 64, col: 13, offset: 1948},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 64, col: 16, offset: 1951},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 64, col: 18, offset: 1953},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchLeg",
			pos:  position{line: 66, col: 1, offset: 1983},
			expr: &actionExpr{
				pos: position{line: 67, col: 5, offset: 1997},
				run: (*parser).callonSwitchLeg1,
				expr: &seqExpr{
					pos: position{line: 67, col: 5, offset: 1997},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 67, col: 5, offset: 1997},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 67, col: 8, offset: 2000},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 67, col: 13, offset: 2005},
								name: "Case",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 67, col: 18, offset: 2010},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 67, col: 21, offset: 2013},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 67, col: 26, offset: 2018},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 67, col: 29, offset: 2021},
							label: "proc",
							expr: &ruleRefExpr{
								pos:  position{line: 67, col: 34, offset: 2026},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "Case",
			pos:  position{line: 71, col: 1, offset: 2115},
			expr: &choiceExpr{
				pos: position{line: 72, col: 5, offset: 2124},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 72, col: 5, offset: 2124},
						run: (*parser).callonCase2,
						expr: &seqExpr{
							pos: position{line: 72, col: 5, offset: 2124},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 72, col: 5, offset: 2124},
									val:        "case",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 72, col: 12, offset: 2131},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 72, col: 14, offset: 2133},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 72, col: 19, offset: 2138},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 73, col: 5, offset: 2168},
						run: (*parser).callonCase8,
						expr: &litMatcher{
							pos:        position{line: 73, col: 5, offset: 2168},
							val:        "default",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromLeg",
			pos:  position{line: 75, col: 1, offset: 2199},
			expr: &choiceExpr{
				pos: position{line: 76, col: 5, offset: 2211},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 76, col: 5, offset: 2211},
						run: (*parser).callonFromLeg2,
						expr: &seqExpr{
							pos: position{line: 76, col: 5, offset: 2211},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 76, col: 5, offset: 2211},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 76, col: 8, offset: 2214},
									label: "source",
									expr: &ruleRefExpr{
										pos:  position{line: 76, col: 15, offset: 2221},
										name: "FromHead",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 76, col: 24, offset: 2230},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 76, col: 28, offset: 2234},
									label: "seq",
									expr: &ruleRefExpr{
										pos:  position{line: 76, col: 32, offset: 2238},
										name: "Sequential",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 79, col: 5, offset: 2349},
						run: (*parser).callonFromLeg10,
						expr: &seqExpr{
							pos: position{line: 79, col: 5, offset: 2349},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 79, col: 5, offset: 2349},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 79, col: 8, offset: 2352},
									label: "source",
									expr: &ruleRefExpr{
										pos:  position{line: 79, col: 15, offset: 2359},
										name: "FromSource",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FromHead",
			pos:  position{line: 83, col: 1, offset: 2467},
			expr: &actionExpr{
				pos: position{line: 84, col: 5, offset: 2480},
				run: (*parser).callonFromHead1,
				expr: &seqExpr{
					pos: position{line: 84, col: 5, offset: 2480},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 84, col: 5, offset: 2480},
							label: "src",
							expr: &ruleRefExpr{
								pos:  position{line: 84, col: 9, offset: 2484},
								name: "FromSource",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 84, col: 20, offset: 2495},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 84, col: 23, offset: 2498},
							val:        "=>",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromSource",
			pos:  position{line: 86, col: 1, offset: 2524},
			expr: &choiceExpr{
				pos: position{line: 87, col: 5, offset: 2539},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 87, col: 5, offset: 2539},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 88, col: 5, offset: 2548},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 89, col: 5, offset: 2556},
						name: "Pool",
					},
					&ruleRefExpr{
						pos:  position{line: 90, col: 5, offset: 2565},
						name: "PassProc",
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 92, col: 1, offset: 2575},
			expr: &seqExpr{
				pos: position{line: 92, col: 13, offset: 2587},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 92, col: 13, offset: 2587},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 92, col: 17, offset: 2591},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 92, col: 18, offset: 2592},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 92, col: 18, offset: 2592},
										expr: &litMatcher{
											pos:        position{line: 92, col: 19, offset: 2593},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 92, col: 24, offset: 2598},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 92, col: 38, offset: 2612},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 92, col: 57, offset: 2631},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 92, col: 82, offset: 2656},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 92, col: 88, offset: 2662},
								val:        "(",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 92, col: 94, offset: 2668},
								val:        "[",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 92, col: 100, offset: 2674},
								val:        "matches",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 94, col: 1, offset: 2686},
			expr: &actionExpr{
				pos: position{line: 94, col: 14, offset: 2699},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 94, col: 15, offset: 2700},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 94, col: 15, offset: 2700},
							val:        "==",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 94, col: 22, offset: 2707},
							val:        "!=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 94, col: 29, offset: 2714},
							val:        "in",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 94, col: 36, offset: 2721},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 94, col: 43, offset: 2728},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 94, col: 49, offset: 2734},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 94, col: 56, offset: 2741},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AggGuard",
			pos:  position{line: 96, col: 1, offset: 2778},
			expr: &choiceExpr{
				pos: position{line: 96, col: 12, offset: 2789},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 96, col: 13, offset: 2790},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 96, col: 13, offset: 2790},
								name: "_",
							},
							&choiceExpr{
								pos: position{line: 96, col: 16, offset: 2793},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 96, col: 16, offset: 2793},
										name: "ByToken",
									},
									&litMatcher{
										pos:        position{line: 96, col: 26, offset: 2803},
										val:        "-with",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 96, col: 35, offset: 2812},
								name: "EOT",
							},
						},
					},
					&seqExpr{
						pos: position{line: 96, col: 43, offset: 2820},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 96, col: 43, offset: 2820},
								name: "__",
							},
							&litMatcher{
								pos:        position{line: 96, col: 46, offset: 2823},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 98, col: 1, offset: 2829},
			expr: &actionExpr{
				pos: position{line: 99, col: 5, offset: 2847},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 99, col: 5, offset: 2847},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 99, col: 5, offset: 2847},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 99, col: 11, offset: 2853},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 99, col: 21, offset: 2863},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 99, col: 26, offset: 2868},
								expr: &ruleRefExpr{
									pos:  position{line: 99, col: 26, offset: 2868},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 103, col: 1, offset: 2942},
			expr: &actionExpr{
				pos: position{line: 103, col: 16, offset: 2957},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 103, col: 16, offset: 2957},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 103, col: 16, offset: 2957},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 103, col: 18, offset: 2959},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 103, col: 26, offset: 2967},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 103, col: 28, offset: 2969},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 103, col: 30, offset: 2971},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 105, col: 1, offset: 3021},
			expr: &actionExpr{
				pos: position{line: 106, col: 5, offset: 3035},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 106, col: 5, offset: 3035},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 106, col: 5, offset: 3035},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 106, col: 11, offset: 3041},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 107, col: 5, offset: 3058},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 107, col: 10, offset: 3063},
								expr: &actionExpr{
									pos: position{line: 107, col: 11, offset: 3064},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 107, col: 11, offset: 3064},
										exprs: []interface{}{
											&zeroOrOneExpr{
												pos: position{line: 107, col: 11, offset: 3064},
												expr: &seqExpr{
													pos: position{line: 107, col: 12, offset: 3065},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 107, col: 12, offset: 3065},
															name: "_",
														},
														&ruleRefExpr{
															pos:  position{line: 107, col: 14, offset: 3067},
															name: "AndToken",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 107, col: 25, offset: 3078},
												name: "_",
											},
											&notExpr{
												pos: position{line: 107, col: 27, offset: 3080},
												expr: &choiceExpr{
													pos: position{line: 107, col: 29, offset: 3082},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 107, col: 29, offset: 3082},
															name: "OrToken",
														},
														&ruleRefExpr{
															pos:  position{line: 107, col: 39, offset: 3092},
															name: "SearchKeywordGuard",
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 107, col: 59, offset: 3112},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 107, col: 64, offset: 3117},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchKeywordGuard",
			pos:  position{line: 111, col: 1, offset: 3233},
			expr: &choiceExpr{
				pos: position{line: 112, col: 5, offset: 3256},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 112, col: 5, offset: 3256},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 112, col: 5, offset: 3256},
								name: "FromHead",
							},
							&ruleRefExpr{
								pos:  position{line: 112, col: 14, offset: 3265},
								name: "__",
							},
						},
					},
					&seqExpr{
						pos: position{line: 113, col: 5, offset: 3272},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 113, col: 5, offset: 3272},
								name: "Case",
							},
							&ruleRefExpr{
								pos:  position{line: 113, col: 10, offset: 3277},
								name: "__",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 115, col: 1, offset: 3281},
			expr: &choiceExpr{
				pos: position{line: 116, col: 5, offset: 3298},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 116, col: 5, offset: 3298},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 116, col: 5, offset: 3298},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 116, col: 6, offset: 3299},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 116, col: 6, offset: 3299},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 116, col: 6, offset: 3299},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 116, col: 15, offset: 3308},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 116, col: 19, offset: 3312},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 116, col: 19, offset: 3312},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 116, col: 23, offset: 3316},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 116, col: 27, offset: 3320},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 116, col: 29, offset: 3322},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 119, col: 5, offset: 3434},
						run: (*parser).callonSearchFactor13,
						expr: &seqExpr{
							pos: position{line: 119, col: 5, offset: 3434},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 119, col: 5, offset: 3434},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 119, col: 9, offset: 3438},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 119, col: 12, offset: 3441},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 119, col: 17, offset: 3446},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 119, col: 31, offset: 3460},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 119, col: 34, offset: 3463},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 120, col: 5, offset: 3492},
						name: "SearchExpr",
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 122, col: 1, offset: 3504},
			expr: &choiceExpr{
				pos: position{line: 123, col: 5, offset: 3519},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 123, col: 5, offset: 3519},
						run: (*parser).callonSearchExpr2,
						expr: &labeledExpr{
							pos:   position{line: 123, col: 5, offset: 3519},
							label: "search",
							expr: &ruleRefExpr{
								pos:  position{line: 123, col: 12, offset: 3526},
								name: "PatternSearch",
							},
						},
					},
					&actionExpr{
						pos: position{line: 124, col: 5, offset: 3567},
						run: (*parser).callonSearchExpr5,
						expr: &seqExpr{
							pos: position{line: 124, col: 5, offset: 3567},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 124, col: 5, offset: 3567},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 124, col: 7, offset: 3569},
										name: "SearchValue",
									},
								},
								&notExpr{
									pos: position{line: 124, col: 19, offset: 3581},
									expr: &ruleRefExpr{
										pos:  position{line: 124, col: 20, offset: 3582},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 127, col: 5, offset: 3699},
						run: (*parser).callonSearchExpr11,
						expr: &seqExpr{
							pos: position{line: 127, col: 5, offset: 3699},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 127, col: 5, offset: 3699},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 127, col: 9, offset: 3703},
									expr: &ruleRefExpr{
										pos:  position{line: 127, col: 10, offset: 3704},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 130, col: 5, offset: 3820},
						name: "EqualityCompareExpr",
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 132, col: 1, offset: 3841},
			expr: &choiceExpr{
				pos: position{line: 133, col: 5, offset: 3857},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 133, col: 5, offset: 3857},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 134, col: 5, offset: 3869},
						run: (*parser).callonSearchValue3,
						expr: &seqExpr{
							pos: position{line: 134, col: 5, offset: 3869},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 134, col: 5, offset: 3869},
									expr: &ruleRefExpr{
										pos:  position{line: 134, col: 6, offset: 3870},
										name: "Regexp",
									},
								},
								&labeledExpr{
									pos:   position{line: 134, col: 13, offset: 3877},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 134, col: 15, offset: 3879},
										name: "KeyWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PatternSearch",
			pos:  position{line: 138, col: 1, offset: 3987},
			expr: &actionExpr{
				pos: position{line: 139, col: 5, offset: 4005},
				run: (*parser).callonPatternSearch1,
				expr: &labeledExpr{
					pos:   position{line: 139, col: 5, offset: 4005},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 139, col: 13, offset: 4013},
						name: "Pattern",
					},
				},
			},
		},
		{
			name: "PatternMatch",
			pos:  position{line: 143, col: 1, offset: 4115},
			expr: &actionExpr{
				pos: position{line: 144, col: 5, offset: 4132},
				run: (*parser).callonPatternMatch1,
				expr: &seqExpr{
					pos: position{line: 144, col: 5, offset: 4132},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 144, col: 5, offset: 4132},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 144, col: 7, offset: 4134},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 144, col: 12, offset: 4139},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 144, col: 14, offset: 4141},
							val:        "matches",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 144, col: 25, offset: 4152},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 144, col: 28, offset: 4155},
							label: "pattern",
							expr: &ruleRefExpr{
								pos:  position{line: 144, col: 36, offset: 4163},
								name: "Pattern",
							},
						},
					},
				},
			},
		},
		{
			name: "Pattern",
			pos:  position{line: 148, col: 1, offset: 4275},
			expr: &choiceExpr{
				pos: position{line: 148, col: 11, offset: 4285},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 148, col: 11, offset: 4285},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 148, col: 20, offset: 4294},
						name: "Glob",
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 152, col: 1, offset: 4326},
			expr: &choiceExpr{
				pos: position{line: 153, col: 5, offset: 4342},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 153, col: 5, offset: 4342},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 153, col: 5, offset: 4342},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 153, col: 5, offset: 4342},
									expr: &ruleRefExpr{
										pos:  position{line: 153, col: 5, offset: 4342},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 153, col: 16, offset: 4353},
									label: "every",
									expr: &zeroOrOneExpr{
										pos: position{line: 153, col: 22, offset: 4359},
										expr: &ruleRefExpr{
											pos:  position{line: 153, col: 22, offset: 4359},
											name: "EveryDur",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 153, col: 32, offset: 4369},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 153, col: 37, offset: 4374},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 153, col: 49, offset: 4386},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 153, col: 55, offset: 4392},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 156, col: 5, offset: 4537},
						run: (*parser).callonAggregation13,
						expr: &seqExpr{
							pos: position{line: 156, col: 5, offset: 4537},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 156, col: 5, offset: 4537},
									expr: &ruleRefExpr{
										pos:  position{line: 156, col: 5, offset: 4537},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 156, col: 16, offset: 4548},
									label: "every",
									expr: &zeroOrOneExpr{
										pos: position{line: 156, col: 22, offset: 4554},
										expr: &ruleRefExpr{
											pos:  position{line: 156, col: 22, offset: 4554},
											name: "EveryDur",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 156, col: 32, offset: 4564},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 156, col: 37, offset: 4569},
										name: "AggAssignments",
									},
								},
								&labeledExpr{
									pos:   position{line: 156, col: 52, offset: 4584},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 156, col: 57, offset: 4589},
										expr: &seqExpr{
											pos: position{line: 156, col: 58, offset: 4590},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 156, col: 58, offset: 4590},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 156, col: 60, offset: 4592},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 156, col: 74, offset: 4606},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 156, col: 80, offset: 4612},
										name: "LimitArg",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Summarize",
			pos:  position{line: 164, col: 1, offset: 4845},
			expr: &seqExpr{
				pos: position{line: 164, col: 13, offset: 4857},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 164, col: 13, offset: 4857},
						val:        "summarize",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 164, col: 25, offset: 4869},
						name: "_",
					},
				},
			},
		},
		{
			name: "EveryDur",
			pos:  position{line: 166, col: 1, offset: 4872},
			expr: &actionExpr{
				pos: position{line: 167, col: 5, offset: 4885},
				run: (*parser).callonEveryDur1,
				expr: &seqExpr{
					pos: position{line: 167, col: 5, offset: 4885},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 167, col: 5, offset: 4885},
							val:        "every",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 167, col: 14, offset: 4894},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 167, col: 16, offset: 4896},
							label: "dur",
							expr: &ruleRefExpr{
								pos:  position{line: 167, col: 20, offset: 4900},
								name: "Duration",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 167, col: 29, offset: 4909},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 169, col: 1, offset: 4932},
			expr: &actionExpr{
				pos: position{line: 170, col: 5, offset: 4948},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 170, col: 5, offset: 4948},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 170, col: 5, offset: 4948},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 170, col: 13, offset: 4956},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 170, col: 15, offset: 4958},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 170, col: 23, offset: 4966},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 172, col: 1, offset: 5007},
			expr: &choiceExpr{
				pos: position{line: 173, col: 5, offset: 5020},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 173, col: 5, offset: 5020},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 173, col: 5, offset: 5020},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 173, col: 5, offset: 5020},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 173, col: 7, offset: 5022},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 173, col: 14, offset: 5029},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 173, col: 16, offset: 5031},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 173, col: 25, offset: 5040},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 173, col: 27, offset: 5042},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 173, col: 33, offset: 5048},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 174, col: 5, offset: 5079},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 174, col: 5, offset: 5079},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 179, col: 1, offset: 5339},
			expr: &choiceExpr{
				pos: position{line: 180, col: 5, offset: 5358},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 180, col: 5, offset: 5358},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 181, col: 5, offset: 5373},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 181, col: 5, offset: 5373},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 181, col: 10, offset: 5378},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 183, col: 1, offset: 5470},
			expr: &actionExpr{
				pos: position{line: 184, col: 5, offset: 5490},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 184, col: 5, offset: 5490},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 184, col: 5, offset: 5490},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 184, col: 11, offset: 5496},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 184, col: 26, offset: 5511},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 184, col: 31, offset: 5516},
								expr: &actionExpr{
									pos: position{line: 184, col: 32, offset: 5517},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 184, col: 32, offset: 5517},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 184, col: 32, offset: 5517},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 184, col: 35, offset: 5520},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 184, col: 39, offset: 5524},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 184, col: 42, offset: 5527},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 184, col: 47, offset: 5532},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignment",
			pos:  position{line: 188, col: 1, offset: 5654},
			expr: &choiceExpr{
				pos: position{line: 189, col: 5, offset: 5672},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 189, col: 5, offset: 5672},
						run: (*parser).callonAggAssignment2,
						expr: &seqExpr{
							pos: position{line: 189, col: 5, offset: 5672},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 189, col: 5, offset: 5672},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 189, col: 10, offset: 5677},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 189, col: 15, offset: 5682},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 189, col: 18, offset: 5685},
									val:        ":=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 189, col: 23, offset: 5690},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 189, col: 26, offset: 5693},
									label: "agg",
									expr: &ruleRefExpr{
										pos:  position{line: 189, col: 30, offset: 5697},
										name: "Agg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 192, col: 5, offset: 5801},
						run: (*parser).callonAggAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 192, col: 5, offset: 5801},
							label: "agg",
							expr: &ruleRefExpr{
								pos:  position{line: 192, col: 9, offset: 5805},
								name: "Agg",
							},
						},
					},
				},
			},
		},
		{
			name: "Agg",
			pos:  position{line: 196, col: 1, offset: 5905},
			expr: &actionExpr{
				pos: position{line: 197, col: 5, offset: 5913},
				run: (*parser).callonAgg1,
				expr: &seqExpr{
					pos: position{line: 197, col: 5, offset: 5913},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 197, col: 5, offset: 5913},
							expr: &ruleRefExpr{
								pos:  position{line: 197, col: 6, offset: 5914},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 197, col: 16, offset: 5924},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 197, col: 19, offset: 5927},
								name: "AggName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 197, col: 27, offset: 5935},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 197, col: 30, offset: 5938},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 197, col: 34, offset: 5942},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 197, col: 37, offset: 5945},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 197, col: 42, offset: 5950},
								expr: &ruleRefExpr{
									pos:  position{line: 197, col: 42, offset: 5950},
									name: "Expr",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 197, col: 49, offset: 5957},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 197, col: 52, offset: 5960},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 197, col: 56, offset: 5964},
							expr: &seqExpr{
								pos: position{line: 197, col: 58, offset: 5966},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 197, col: 58, offset: 5966},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 197, col: 61, offset: 5969},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 197, col: 66, offset: 5974},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 197, col: 72, offset: 5980},
								expr: &ruleRefExpr{
									pos:  position{line: 197, col: 72, offset: 5980},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggName",
			pos:  position{line: 205, col: 1, offset: 6170},
			expr: &choiceExpr{
				pos: position{line: 206, col: 5, offset: 6182},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 206, col: 5, offset: 6182},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 207, col: 5, offset: 6201},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 208, col: 5, offset: 6214},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 210, col: 1, offset: 6223},
			expr: &actionExpr{
				pos: position{line: 210, col: 15, offset: 6237},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 210, col: 15, offset: 6237},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 210, col: 15, offset: 6237},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 210, col: 17, offset: 6239},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 210, col: 25, offset: 6247},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 210, col: 27, offset: 6249},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 210, col: 32, offset: 6254},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignments",
			pos:  position{line: 212, col: 1, offset: 6290},
			expr: &actionExpr{
				pos: position{line: 213, col: 5, offset: 6309},
				run: (*parser).callonAggAssignments1,
				expr: &seqExpr{
					pos: position{line: 213, col: 5, offset: 6309},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 213, col: 5, offset: 6309},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 213, col: 11, offset: 6315},
								name: "AggAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 213, col: 25, offset: 6329},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 213, col: 30, offset: 6334},
								expr: &seqExpr{
									pos: position{line: 213, col: 31, offset: 6335},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 213, col: 31, offset: 6335},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 213, col: 34, offset: 6338},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 213, col: 38, offset: 6342},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 213, col: 41, offset: 6345},
											name: "AggAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 223, col: 1, offset: 6581},
			expr: &choiceExpr{
				pos: position{line: 224, col: 5, offset: 6594},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 224, col: 5, offset: 6594},
						name: "SortProc",
					},
					&ruleRefExpr{
						pos:  position{line: 225, col: 5, offset: 6607},
						name: "TopProc",
					},
					&ruleRefExpr{
						pos:  position{line: 226, col: 5, offset: 6619},
						name: "CutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 227, col: 5, offset: 6631},
						name: "DropProc",
					},
					&ruleRefExpr{
						pos:  position{line: 228, col: 5, offset: 6644},
						name: "HeadProc",
					},
					&ruleRefExpr{
						pos:  position{line: 229, col: 5, offset: 6657},
						name: "TailProc",
					},
					&ruleRefExpr{
						pos:  position{line: 230, col: 5, offset: 6670},
						name: "FilterProc",
					},
					&ruleRefExpr{
						pos:  position{line: 231, col: 5, offset: 6685},
						name: "UniqProc",
					},
					&ruleRefExpr{
						pos:  position{line: 232, col: 5, offset: 6698},
						name: "PutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 233, col: 5, offset: 6710},
						name: "RenameProc",
					},
					&ruleRefExpr{
						pos:  position{line: 234, col: 5, offset: 6725},
						name: "FuseProc",
					},
					&ruleRefExpr{
						pos:  position{line: 235, col: 5, offset: 6738},
						name: "ShapeProc",
					},
					&ruleRefExpr{
						pos:  position{line: 236, col: 5, offset: 6752},
						name: "JoinProc",
					},
					&ruleRefExpr{
						pos:  position{line: 237, col: 5, offset: 6765},
						name: "SampleProc",
					},
					&ruleRefExpr{
						pos:  position{line: 238, col: 5, offset: 6780},
						name: "SQLProc",
					},
					&ruleRefExpr{
						pos:  position{line: 239, col: 5, offset: 6792},
						name: "FromProc",
					},
					&ruleRefExpr{
						pos:  position{line: 240, col: 5, offset: 6805},
						name: "PassProc",
					},
					&ruleRefExpr{
						pos:  position{line: 241, col: 5, offset: 6818},
						name: "ExplodeProc",
					},
					&ruleRefExpr{
						pos:  position{line: 242, col: 5, offset: 6834},
						name: "LetProc",
					},
					&ruleRefExpr{
						pos:  position{line: 243, col: 5, offset: 6846},
						name: "MergeProc",
					},
					&ruleRefExpr{
						pos:  position{line: 244, col: 5, offset: 6860},
						name: "OverProc",
					},
					&ruleRefExpr{
						pos:  position{line: 245, col: 5, offset: 6873},
						name: "YieldProc",
					},
				},
			},
		},
		{
			name: "SortProc",
			pos:  position{line: 247, col: 1, offset: 6884},
			expr: &actionExpr{
				pos: position{line: 248, col: 5, offset: 6897},
				run: (*parser).callonSortProc1,
				expr: &seqExpr{
					pos: position{line: 248, col: 5, offset: 6897},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 248, col: 5, offset: 6897},
							val:        "sort",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 248, col: 13, offset: 6905},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 248, col: 18, offset: 6910},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 248, col: 27, offset: 6919},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 248, col: 32, offset: 6924},
								expr: &actionExpr{
									pos: position{line: 248, col: 33, offset: 6925},
									run: (*parser).callonSortProc8,
									expr: &seqExpr{
										pos: position{line: 248, col: 33, offset: 6925},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 248, col: 33, offset: 6925},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 248, col: 35, offset: 6927},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 248, col: 37, offset: 6929},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 262, col: 1, offset: 7348},
			expr: &actionExpr{
				pos: position{line: 262, col: 12, offset: 7359},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 262, col: 12, offset: 7359},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 262, col: 17, offset: 7364},
						expr: &actionExpr{
							pos: position{line: 262, col: 18, offset: 7365},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 262, col: 18, offset: 7365},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 262, col: 18, offset: 7365},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 262, col: 20, offset: 7367},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 262, col: 22, offset: 7369},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 264, col: 1, offset: 7425},
			expr: &choiceExpr{
				pos: position{line: 265, col: 5, offset: 7437},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 265, col: 5, offset: 7437},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 265, col: 5, offset: 7437},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 266, col: 5, offset: 7512},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 266, col: 5, offset: 7512},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 266, col: 5, offset: 7512},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 266, col: 14, offset: 7521},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 266, col: 16, offset: 7523},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 266, col: 23, offset: 7530},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 266, col: 24, offset: 7531},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 266, col: 24, offset: 7531},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 266, col: 34, offset: 7541},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopProc",
			pos:  position{line: 268, col: 1, offset: 7655},
			expr: &actionExpr{
				pos: position{line: 269, col: 5, offset: 7667},
				run: (*parser).callonTopProc1,
				expr: &seqExpr{
					pos: position{line: 269, col: 5, offset: 7667},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 269, col: 5, offset: 7667},
							val:        "top",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 269, col: 12, offset: 7674},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 269, col: 18, offset: 7680},
								expr: &actionExpr{
									pos: position{line: 269, col: 19, offset: 7681},
									run: (*parser).callonTopProc6,
									expr: &seqExpr{
										pos: position{line: 269, col: 19, offset: 7681},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 269, col: 19, offset: 7681},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 269, col: 21, offset: 7683},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 269, col: 23, offset: 7685},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 269, col: 47, offset: 7709},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 269, col: 53, offset: 7715},
								expr: &seqExpr{
									pos: position{line: 269, col: 54, offset: 7716},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 269, col: 54, offset: 7716},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 269, col: 56, offset: 7718},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 269, col: 67, offset: 7729},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 269, col: 74, offset: 7736},
								expr: &actionExpr{
									pos: position{line: 269, col: 75, offset: 7737},
									run: (*parser).callonTopProc18,
									expr: &seqExpr{
										pos: position{line: 269, col: 75, offset: 7737},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 269, col: 75, offset: 7737},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 269, col: 77, offset: 7739},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 269, col: 79, offset: 7741},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutProc",
			pos:  position{line: 283, col: 1, offset: 8086},
			expr: &actionExpr{
				pos: position{line: 284, col: 5, offset: 8098},
				run: (*parser).callonCutProc1,
				expr: &seqExpr{
					pos: position{line: 284, col: 5, offset: 8098},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 284, col: 5, offset: 8098},
							val:        "cut",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 284, col: 12, offset: 8105},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 284, col: 14, offset: 8107},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 284, col: 19, offset: 8112},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropProc",
			pos:  position{line: 288, col: 1, offset: 8207},
			expr: &actionExpr{
				pos: position{line: 289, col: 5, offset: 8220},
				run: (*parser).callonDropProc1,
				expr: &seqExpr{
					pos: position{line: 289, col: 5, offset: 8220},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 289, col: 5, offset: 8220},
							val:        "drop",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 289, col: 13, offset: 8228},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 289, col: 15, offset: 8230},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 289, col: 20, offset: 8235},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadProc",
			pos:  position{line: 293, col: 1, offset: 8326},
			expr: &choiceExpr{
				pos: position{line: 294, col: 5, offset: 8339},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 294, col: 5, offset: 8339},
						run: (*parser).callonHeadProc2,
						expr: &seqExpr{
							pos: position{line: 294, col: 5, offset: 8339},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 294, col: 5, offset: 8339},
									val:        "head",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 294, col: 13, offset: 8347},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 294, col: 15, offset: 8349},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 294, col: 21, offset: 8355},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 295, col: 5, offset: 8435},
						run: (*parser).callonHeadProc8,
						expr: &litMatcher{
							pos:        position{line: 295, col: 5, offset: 8435},
							val:        "head",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "TailProc",
			pos:  position{line: 297, col: 1, offset: 8511},
			expr: &choiceExpr{
				pos: position{line: 298, col: 5, offset: 8524},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 298, col: 5, offset: 8524},
						run: (*parser).callonTailProc2,
						expr: &seqExpr{
							pos: position{line: 298, col: 5, offset: 8524},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 298, col: 5, offset: 8524},
									val:        "tail",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 298, col: 13, offset: 8532},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 298, col: 15, offset: 8534},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 298, col: 21, offset: 8540},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 299, col: 5, offset: 8620},
						run: (*parser).callonTailProc8,
						expr: &litMatcher{
							pos:        position{line: 299, col: 5, offset: 8620},
							val:        "tail",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "FilterProc",
			pos:  position{line: 301, col: 1, offset: 8696},
			expr: &actionExpr{
				pos: position{line: 302, col: 5, offset: 8711},
				run: (*parser).callonFilterProc1,
				expr: &seqExpr{
					pos: position{line: 302, col: 5, offset: 8711},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 302, col: 5, offset: 8711},
							val:        "filter",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 302, col: 15, offset: 8721},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 302, col: 17, offset: 8723},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 302, col: 20, offset: 8726},
								name: "Filter",
							},
						},
					},
				},
			},
		},
		{
			name: "Filter",
			pos:  position{line: 306, col: 1, offset: 8763},
			expr: &actionExpr{
				pos: position{line: 307, col: 5, offset: 8774},
				run: (*parser).callonFilter1,
				expr: &labeledExpr{
					pos:   position{line: 307, col: 5, offset: 8774},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 307, col: 10, offset: 8779},
						name: "SearchBoolean",
					},
				},
			},
		},
		{
			name: "UniqProc",
			pos:  position{line: 311, col: 1, offset: 8875},
			expr: &choiceExpr{
				pos: position{line: 312, col: 5, offset: 8888},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 312, col: 5, offset: 8888},
						run: (*parser).callonUniqProc2,
						expr: &seqExpr{
							pos: position{line: 312, col: 5, offset: 8888},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 312, col: 5, offset: 8888},
									val:        "uniq",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 312, col: 13, offset: 8896},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 312, col: 15, offset: 8898},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 315, col: 5, offset: 8987},
						run: (*parser).callonUniqProc7,
						expr: &litMatcher{
							pos:        position{line: 315, col: 5, offset: 8987},
							val:        "uniq",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "PutProc",
			pos:  position{line: 319, col: 1, offset: 9077},
			expr: &actionExpr{
				pos: position{line: 320, col: 5, offset: 9089},
				run: (*parser).callonPutProc1,
				expr: &seqExpr{
					pos: position{line: 320, col: 5, offset: 9089},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 320, col: 5, offset: 9089},
							val:        "put",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 320, col: 12, offset: 9096},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 320, col: 14, offset: 9098},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 320, col: 19, offset: 9103},
								name: "Assignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameProc",
			pos:  position{line: 324, col: 1, offset: 9194},
			expr: &actionExpr{
				pos: position{line: 325, col: 5, offset: 9209},
				run: (*parser).callonRenameProc1,
				expr: &seqExpr{
					pos: position{line: 325, col: 5, offset: 9209},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 325, col: 5, offset: 9209},
							val:        "rename",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 325, col: 15, offset: 9219},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 325, col: 17, offset: 9221},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 325, col: 23, offset: 9227},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 325, col: 34, offset: 9238},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 325, col: 39, offset: 9243},
								expr: &actionExpr{
									pos: position{line: 325, col: 40, offset: 9244},
									run: (*parser).callonRenameProc9,
									expr: &seqExpr{
										pos: position{line: 325, col: 40, offset: 9244},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 325, col: 40, offset: 9244},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 325, col: 43, offset: 9247},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 325, col: 47, offset: 9251},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 325, col: 50, offset: 9254},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 325, col: 53, offset: 9257},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseProc",
			pos:  position{line: 333, col: 1, offset: 9666},
			expr: &actionExpr{
				pos: position{line: 334, col: 5, offset: 9679},
				run: (*parser).callonFuseProc1,
				expr: &seqExpr{
					pos: position{line: 334, col: 5, offset: 9679},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 334, col: 5, offset: 9679},
							val:        "fuse",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 334, col: 13, offset: 9687},
							expr: &seqExpr{
								pos: position{line: 334, col: 15, offset: 9689},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 334, col: 15, offset: 9689},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 334, col: 18, offset: 9692},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShapeProc",
			pos:  position{line: 338, col: 1, offset: 9763},
			expr: &actionExpr{
				pos: position{line: 339, col: 5, offset: 9777},
				run: (*parser).callonShapeProc1,
				expr: &litMatcher{
					pos:        position{line: 339, col: 5, offset: 9777},
					val:        "shape",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JoinProc",
			pos:  position{line: 343, col: 1, offset: 9853},
			expr: &choiceExpr{
				pos: position{line: 344, col: 5, offset: 9866},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 344, col: 5, offset: 9866},
						run: (*parser).callonJoinProc2,
						expr: &seqExpr{
							pos: position{line: 344, col: 5, offset: 9866},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 344, col: 5, offset: 9866},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 344, col: 11, offset: 9872},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 344, col: 21, offset: 9882},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 344, col: 29, offset: 9890},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 344, col: 31, offset: 9892},
									name: "ON",
								},
								&ruleRefExpr{
									pos:  position{line: 344, col: 34, offset: 9895},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 344, col: 36, offset: 9897},
									label: "leftKey",
									expr: &ruleRefExpr{
										pos:  position{line: 344, col: 44, offset: 9905},
										name: "JoinKey",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 344, col: 52, offset: 9913},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 344, col: 55, offset: 9916},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 344, col: 59, offset: 9920},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 344, col: 62, offset: 9923},
									label: "rightKey",
									expr: &ruleRefExpr{
										pos:  position{line: 344, col: 71, offset: 9932},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 344, col: 79, offset: 9940},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 344, col: 87, offset: 9948},
										expr: &seqExpr{
											pos: position{line: 344, col: 88, offset: 9949},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 344, col: 88, offset: 9949},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 344, col: 90, offset: 9951},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 351, col: 5, offset: 10217},
						run: (*parser).callonJoinProc22,
						expr: &seqExpr{
							pos: position{line: 351, col: 5, offset: 10217},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 351, col: 5, offset: 10217},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 351, col: 11, offset: 10223},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 351, col: 22, offset: 10234},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 351, col: 30, offset: 10242},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 351, col: 32, offset: 10244},
									name: "ON",
								},
								&ruleRefExpr{
									pos:  position{line: 351, col: 35, offset: 10247},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 351, col: 37, offset: 10249},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 351, col: 41, offset: 10253},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 351, col: 49, offset: 10261},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 351, col: 57, offset: 10269},
										expr: &seqExpr{
											pos: position{line: 351, col: 58, offset: 10270},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 351, col: 58, offset: 10270},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 351, col: 60, offset: 10272},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinStyle",
			pos:  position{line: 359, col: 1, offset: 10526},
			expr: &choiceExpr{
				pos: position{line: 360, col: 5, offset: 10540},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 360, col: 5, offset: 10540},
						run: (*parser).callonJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 360, col: 5, offset: 10540},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 360, col: 5, offset: 10540},
									val:        "anti",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 360, col: 13, offset: 10548},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 361, col: 5, offset: 10578},
						run: (*parser).callonJoinStyle6,
						expr: &seqExpr{
							pos: position{line: 361, col: 5, offset: 10578},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 361, col: 5, offset: 10578},
									val:        "inner",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 361, col: 14, offset: 10587},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 362, col: 5, offset: 10617},
						run: (*parser).callonJoinStyle10,
						expr: &seqExpr{
							pos: position{line: 362, col: 5, offset: 10617},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 362, col: 5, offset: 10617},
									val:        "left",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 362, col: 14, offset: 10626},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 363, col: 5, offset: 10655},
						run: (*parser).callonJoinStyle14,
						expr: &seqExpr{
							pos: position{line: 363, col: 5, offset: 10655},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 363, col: 5, offset: 10655},
									val:        "right",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 363, col: 14, offset: 10664},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 364, col: 5, offset: 10694},
						run: (*parser).callonJoinStyle18,
						expr: &litMatcher{
							pos:        position{line: 364, col: 5, offset: 10694},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 366, col: 1, offset: 10730},
			expr: &choiceExpr{
				pos: position{line: 367, col: 5, offset: 10742},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 367, col: 5, offset: 10742},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 368, col: 5, offset: 10751},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 368, col: 5, offset: 10751},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 368, col: 5, offset: 10751},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 368, col: 9, offset: 10755},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 368, col: 14, offset: 10760},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 368, col: 19, offset: 10765},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SampleProc",
			pos:  position{line: 370, col: 1, offset: 10791},
			expr: &actionExpr{
				pos: position{line: 371, col: 5, offset: 10806},
				run: (*parser).callonSampleProc1,
				expr: &seqExpr{
					pos: position{line: 371, col: 5, offset: 10806},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 371, col: 5, offset: 10806},
							val:        "sample",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 371, col: 15, offset: 10816},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 371, col: 17, offset: 10818},
								name: "SampleExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "OpAssignment",
			pos:  position{line: 415, col: 1, offset: 12451},
			expr: &actionExpr{
				pos: position{line: 416, col: 5, offset: 12468},
				run: (*parser).callonOpAssignment1,
				expr: &labeledExpr{
					pos:   position{line: 416, col: 5, offset: 12468},
					label: "a",
					expr: &ruleRefExpr{
						pos:  position{line: 416, col: 7, offset: 12470},
						name: "Assignments",
					},
				},
			},
		},
		{
			name: "SampleExpr",
			pos:  position{line: 420, col: 1, offset: 12570},
			expr: &choiceExpr{
				pos: position{line: 421, col: 5, offset: 12585},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 421, col: 5, offset: 12585},
						run: (*parser).callonSampleExpr2,
						expr: &seqExpr{
							pos: position{line: 421, col: 5, offset: 12585},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 421, col: 5, offset: 12585},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 421, col: 7, offset: 12587},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 421, col: 12, offset: 12592},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 422, col: 5, offset: 12621},
						run: (*parser).callonSampleExpr7,
						expr: &litMatcher{
							pos:        position{line: 422, col: 5, offset: 12621},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromProc",
			pos:  position{line: 424, col: 1, offset: 12679},
			expr: &actionExpr{
				pos: position{line: 425, col: 5, offset: 12692},
				run: (*parser).callonFromProc1,
				expr: &labeledExpr{
					pos:   position{line: 425, col: 5, offset: 12692},
					label: "source",
					expr: &ruleRefExpr{
						pos:  position{line: 425, col: 12, offset: 12699},
						name: "FromAny",
					},
				},
			},
		},
		{
			name: "FromAny",
			pos:  position{line: 429, col: 1, offset: 12855},
			expr: &choiceExpr{
				pos: position{line: 430, col: 5, offset: 12867},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 430, col: 5, offset: 12867},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 431, col: 5, offset: 12876},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 432, col: 5, offset: 12884},
						name: "From",
					},
				},
			},
		},
		{
			name: "File",
			pos:  position{line: 434, col: 1, offset: 12890},
			expr: &actionExpr{
				pos: position{line: 435, col: 5, offset: 12899},
				run: (*parser).callonFile1,
				expr: &seqExpr{
					pos: position{line: 435, col: 5, offset: 12899},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 435, col: 5, offset: 12899},
							val:        "file",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 435, col: 13, offset: 12907},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 435, col: 15, offset: 12909},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 435, col: 20, offset: 12914},
								name: "Path",
							},
						},
						&labeledExpr{
							pos:   position{line: 435, col: 25, offset: 12919},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 435, col: 32, offset: 12926},
								expr: &ruleRefExpr{
									pos:  position{line: 435, col: 32, offset: 12926},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 435, col: 43, offset: 12937},
							label: "layout",
							expr: &zeroOrOneExpr{
								pos: position{line: 435, col: 50, offset: 12944},
								expr: &ruleRefExpr{
									pos:  position{line: 435, col: 50, offset: 12944},
									name: "LayoutArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "From",
			pos:  position{line: 439, col: 1, offset: 13073},
			expr: &actionExpr{
				pos: position{line: 440, col: 5, offset: 13082},
				run: (*parser).callonFrom1,
				expr: &seqExpr{
					pos: position{line: 440, col: 5, offset: 13082},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 440, col: 5, offset: 13082},
							val:        "from",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 440, col: 13, offset: 13090},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 440, col: 15, offset: 13092},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 440, col: 20, offset: 13097},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "Pool",
			pos:  position{line: 442, col: 1, offset: 13128},
			expr: &actionExpr{
				pos: position{line: 443, col: 5, offset: 13137},
				run: (*parser).callonPool1,
				expr: &seqExpr{
					pos: position{line: 443, col: 5, offset: 13137},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 443, col: 5, offset: 13137},
							val:        "pool",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 443, col: 13, offset: 13145},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 443, col: 15, offset: 13147},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 443, col: 20, offset: 13152},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolBody",
			pos:  position{line: 445, col: 1, offset: 13183},
			expr: &actionExpr{
				pos: position{line: 446, col: 5, offset: 13196},
				run: (*parser).callonPoolBody1,
				expr: &seqExpr{
					pos: position{line: 446, col: 5, offset: 13196},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 446, col: 5, offset: 13196},
							label: "spec",
							expr: &ruleRefExpr{
								pos:  position{line: 446, col: 10, offset: 13201},
								name: "PoolSpec",
							},
						},
						&labeledExpr{
							pos:   position{line: 446, col: 19, offset: 13210},
							label: "at",
							expr: &zeroOrOneExpr{
								pos: position{line: 446, col: 22, offset: 13213},
								expr: &ruleRefExpr{
									pos:  position{line: 446, col: 22, offset: 13213},
									name: "PoolAt",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 446, col: 30, offset: 13221},
							label: "over",
							expr: &zeroOrOneExpr{
								pos: position{line: 446, col: 35, offset: 13226},
								expr: &ruleRefExpr{
									pos:  position{line: 446, col: 35, offset: 13226},
									name: "PoolRange",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 446, col: 46, offset: 13237},
							label: "order",
							expr: &zeroOrOneExpr{
								pos: position{line: 446, col: 52, offset: 13243},
								expr: &ruleRefExpr{
									pos:  position{line: 446, col: 52, offset: 13243},
									name: "OrderArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Get",
			pos:  position{line: 450, col: 1, offset: 13379},
			expr: &actionExpr{
				pos: position{line: 451, col: 5, offset: 13387},
				run: (*parser).callonGet1,
				expr: &seqExpr{
					pos: position{line: 451, col: 5, offset: 13387},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 451, col: 5, offset: 13387},
							val:        "get",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 451, col: 12, offset: 13394},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 451, col: 14, offset: 13396},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 451, col: 18, offset: 13400},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 451, col: 22, offset: 13404},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 451, col: 29, offset: 13411},
								expr: &ruleRefExpr{
									pos:  position{line: 451, col: 29, offset: 13411},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 451, col: 40, offset: 13422},
							label: "layout",
							expr: &zeroOrOneExpr{
								pos: position{line: 451, col: 47, offset: 13429},
								expr: &ruleRefExpr{
									pos:  position{line: 451, col: 47, offset: 13429},
									name: "LayoutArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 455, col: 1, offset: 13555},
			expr: &actionExpr{
				pos: position{line: 455, col: 7, offset: 13561},
				run: (*parser).callonURL1,
				expr: &seqExpr{
					pos: position{line: 455, col: 7, offset: 13561},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 455, col: 8, offset: 13562},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 455, col: 8, offset: 13562},
									val:        "http:",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 455, col: 18, offset: 13572},
									val:        "https:",
									ignoreCase: false,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 455, col: 28, offset: 13582},
							name: "Path",
						},
					},
				},
			},
		},
		{
			name: "Path",
			pos:  position{line: 457, col: 1, offset: 13619},
			expr: &choiceExpr{
				pos: position{line: 458, col: 5, offset: 13628},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 458, col: 5, offset: 13628},
						run: (*parser).callonPath2,
						expr: &labeledExpr{
							pos:   position{line: 458, col: 5, offset: 13628},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 458, col: 7, offset: 13630},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 459, col: 5, offset: 13665},
						run: (*parser).callonPath5,
						expr: &oneOrMoreExpr{
							pos: position{line: 459, col: 5, offset: 13665},
							expr: &charClassMatcher{
								pos:        position{line: 459, col: 5, offset: 13665},
								val:        "[0-9a-zA-Z!@$%^&*()_=<>,./?:[\\]{}~|+-]",
								chars:      []rune{'!', '@', '$', '%', '^', '&', '*', '(', ')', '_', '=', '<', '>', ',', '.', '/', '?', ':', '[', ']', '{', '}', '~', '|', '+', '-'},
								ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PoolAt",
			pos:  position{line: 462, col: 1, offset: 13770},
			expr: &actionExpr{
				pos: position{line: 463, col: 5, offset: 13781},
				run: (*parser).callonPoolAt1,
				expr: &seqExpr{
					pos: position{line: 463, col: 5, offset: 13781},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 463, col: 5, offset: 13781},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 463, col: 7, offset: 13783},
							val:        "at",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 463, col: 13, offset: 13789},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 463, col: 15, offset: 13791},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 463, col: 18, offset: 13794},
								name: "KSUID",
							},
						},
					},
				},
			},
		},
		{
			name: "KSUID",
			pos:  position{line: 466, col: 1, offset: 13860},
			expr: &actionExpr{
				pos: position{line: 466, col: 9, offset: 13868},
				run: (*parser).callonKSUID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 466, col: 9, offset: 13868},
					expr: &charClassMatcher{
						pos:        position{line: 466, col: 10, offset: 13869},
						val:        "[0-9a-zA-Z]",
						ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "PoolRange",
			pos:  position{line: 468, col: 1, offset: 13915},
			expr: &actionExpr{
				pos: position{line: 469, col: 5, offset: 13929},
				run: (*parser).callonPoolRange1,
				expr: &seqExpr{
					pos: position{line: 469, col: 5, offset: 13929},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 469, col: 5, offset: 13929},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 469, col: 7, offset: 13931},
							val:        "range",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 469, col: 16, offset: 13940},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 469, col: 18, offset: 13942},
							label: "lower",
							expr: &ruleRefExpr{
								pos:  position{line: 469, col: 24, offset: 13948},
								name: "Literal",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 469, col: 32, offset: 13956},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 469, col: 34, offset: 13958},
							val:        "to",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 469, col: 40, offset: 13964},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 469, col: 42, offset: 13966},
							label: "upper",
							expr: &ruleRefExpr{
								pos:  position{line: 469, col: 48, offset: 13972},
								name: "Literal",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolSpec",
			pos:  position{line: 473, col: 1, offset: 14077},
			expr: &choiceExpr{
				pos: position{line: 474, col: 5, offset: 14090},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 474, col: 5, offset: 14090},
						run: (*parser).callonPoolSpec2,
						expr: &seqExpr{
							pos: position{line: 474, col: 5, offset: 14090},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 474, col: 5, offset: 14090},
									label: "pool",
									expr: &ruleRefExpr{
										pos:  position{line: 474, col: 10, offset: 14095},
										name: "PoolName",
									},
								},
								&labeledExpr{
									pos:   position{line: 474, col: 19, offset: 14104},
									label: "commit",
									expr: &zeroOrOneExpr{
										pos: position{line: 474, col: 26, offset: 14111},
										expr: &ruleRefExpr{
											pos:  position{line: 474, col: 26, offset: 14111},
											name: "PoolCommit",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 474, col: 38, offset: 14123},
									label: "meta",
									expr: &zeroOrOneExpr{
										pos: position{line: 474, col: 43, offset: 14128},
										expr: &ruleRefExpr{
											pos:  position{line: 474, col: 43, offset: 14128},
											name: "PoolMeta",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 477, col: 5, offset: 14237},
						run: (*parser).callonPoolSpec12,
						expr: &labeledExpr{
							pos:   position{line: 477, col: 5, offset: 14237},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 477, col: 10, offset: 14242},
								name: "PoolMeta",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolCommit",
			pos:  position{line: 481, col: 1, offset: 14343},
			expr: &actionExpr{
				pos: position{line: 482, col: 5, offset: 14358},
				run: (*parser).callonPoolCommit1,
				expr: &seqExpr{
					pos: position{line: 482, col: 5, offset: 14358},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 482, col: 5, offset: 14358},
							val:        "@",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 482, col: 9, offset: 14362},
							label: "commit",
							expr: &ruleRefExpr{
								pos:  position{line: 482, col: 16, offset: 14369},
								name: "PoolName",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolMeta",
			pos:  position{line: 484, col: 1, offset: 14402},
			expr: &actionExpr{
				pos: position{line: 485, col: 5, offset: 14415},
				run: (*parser).callonPoolMeta1,
				expr: &seqExpr{
					pos: position{line: 485, col: 5, offset: 14415},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 485, col: 5, offset: 14415},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 485, col: 9, offset: 14419},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 485, col: 14, offset: 14424},
								name: "PoolIdentifier",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolName",
			pos:  position{line: 487, col: 1, offset: 14461},
			expr: &choiceExpr{
				pos: position{line: 488, col: 5, offset: 14474},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 488, col: 5, offset: 14474},
						name: "PoolIdentifier",
					},
					&ruleRefExpr{
						pos:  position{line: 489, col: 5, offset: 14493},
						name: "KSUID",
					},
					&ruleRefExpr{
						pos:  position{line: 490, col: 5, offset: 14503},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "PoolIdentifier",
			pos:  position{line: 492, col: 1, offset: 14517},
			expr: &actionExpr{
				pos: position{line: 493, col: 5, offset: 14536},
				run: (*parser).callonPoolIdentifier1,
				expr: &seqExpr{
					pos: position{line: 493, col: 5, offset: 14536},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 493, col: 6, offset: 14537},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 493, col: 6, offset: 14537},
									name: "IdentifierStart",
								},
								&litMatcher{
									pos:        position{line: 493, col: 24, offset: 14555},
									val:        ".",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 493, col: 29, offset: 14560},
							expr: &choiceExpr{
								pos: position{line: 493, col: 30, offset: 14561},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 493, col: 30, offset: 14561},
										name: "IdentifierRest",
									},
									&litMatcher{
										pos:        position{line: 493, col: 47, offset: 14578},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LayoutArg",
			pos:  position{line: 495, col: 1, offset: 14617},
			expr: &actionExpr{
				pos: position{line: 496, col: 5, offset: 14631},
				run: (*parser).callonLayoutArg1,
				expr: &seqExpr{
					pos: position{line: 496, col: 5, offset: 14631},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 496, col: 5, offset: 14631},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 496, col: 7, offset: 14633},
							val:        "order",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 496, col: 16, offset: 14642},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 496, col: 18, offset: 14644},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 496, col: 23, offset: 14649},
								name: "FieldExprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 496, col: 34, offset: 14660},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 496, col: 40, offset: 14666},
								name: "OrderSuffix",
							},
						},
					},
				},
			},
		},
		{
			name: "FormatArg",
			pos:  position{line: 500, col: 1, offset: 14776},
			expr: &actionExpr{
				pos: position{line: 501, col: 5, offset: 14790},
				run: (*parser).callonFormatArg1,
				expr: &seqExpr{
					pos: position{line: 501, col: 5, offset: 14790},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 501, col: 5, offset: 14790},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 501, col: 7, offset: 14792},
							val:        "format",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 501, col: 17, offset: 14802},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 501, col: 19, offset: 14804},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 501, col: 23, offset: 14808},
								name: "IdentifierName",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderSuffix",
			pos:  position{line: 503, col: 1, offset: 14844},
			expr: &choiceExpr{
				pos: position{line: 504, col: 5, offset: 14860},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 504, col: 5, offset: 14860},
						run: (*parser).callonOrderSuffix2,
						expr: &litMatcher{
							pos:        position{line: 504, col: 5, offset: 14860},
							val:        ":asc",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 505, col: 5, offset: 14895},
						run: (*parser).callonOrderSuffix4,
						expr: &litMatcher{
							pos:        position{line: 505, col: 5, offset: 14895},
							val:        ":desc",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 506, col: 5, offset: 14932},
						run: (*parser).callonOrderSuffix6,
						expr: &litMatcher{
							pos:        position{line: 506, col: 5, offset: 14932},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OrderArg",
			pos:  position{line: 508, col: 1, offset: 14958},
			expr: &choiceExpr{
				pos: position{line: 509, col: 5, offset: 14971},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 509, col: 5, offset: 14971},
						run: (*parser).callonOrderArg2,
						expr: &seqExpr{
							pos: position{line: 509, col: 5, offset: 14971},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 509, col: 5, offset: 14971},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 509, col: 7, offset: 14973},
									val:        "order",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 509, col: 16, offset: 14982},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 509, col: 18, offset: 14984},
									val:        "asc",
									ignoreCase: true,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 510, col: 5, offset: 15018},
						run: (*parser).callonOrderArg8,
						expr: &seqExpr{
							pos: position{line: 510, col: 5, offset: 15018},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 510, col: 5, offset: 15018},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 510, col: 7, offset: 15020},
									val:        "order",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 510, col: 16, offset: 15029},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 510, col: 18, offset: 15031},
									val:        "desc",
									ignoreCase: true,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassProc",
			pos:  position{line: 512, col: 1, offset: 15064},
			expr: &actionExpr{
				pos: position{line: 513, col: 5, offset: 15077},
				run: (*parser).callonPassProc1,
				expr: &litMatcher{
					pos:        position{line: 513, col: 5, offset: 15077},
					val:        "pass",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ExplodeProc",
			pos:  position{line: 519, col: 1, offset: 15272},
			expr: &actionExpr{
				pos: position{line: 520, col: 5, offset: 15288},
				run: (*parser).callonExplodeProc1,
				expr: &seqExpr{
					pos: position{line: 520, col: 5, offset: 15288},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 520, col: 5, offset: 15288},
							val:        "explode",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 520, col: 16, offset: 15299},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 520, col: 18, offset: 15301},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 520, col: 23, offset: 15306},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 520, col: 29, offset: 15312},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 520, col: 33, offset: 15316},
								name: "TypeArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 520, col: 41, offset: 15324},
							label: "as",
							expr: &zeroOrOneExpr{
								pos: position{line: 520, col: 44, offset: 15327},
								expr: &ruleRefExpr{
									pos:  position{line: 520, col: 44, offset: 15327},
									name: "AsArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MergeProc",
			pos:  position{line: 524, col: 1, offset: 15439},
			expr: &actionExpr{
				pos: position{line: 525, col: 5, offset: 15453},
				run: (*parser).callonMergeProc1,
				expr: &seqExpr{
					pos: position{line: 525, col: 5, offset: 15453},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 525, col: 5, offset: 15453},
							val:        "merge",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 525, col: 14, offset: 15462},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 525, col: 16, offset: 15464},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 525, col: 22, offset: 15470},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "OverProc",
			pos:  position{line: 529, col: 1, offset: 15553},
			expr: &choiceExpr{
				pos: position{line: 530, col: 5, offset: 15566},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 530, col: 5, offset: 15566},
						name: "ScopedOver",
					},
					&actionExpr{
						pos: position{line: 531, col: 5, offset: 15581},
						run: (*parser).callonOverProc3,
						expr: &seqExpr{
							pos: position{line: 531, col: 5, offset: 15581},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 531, col: 5, offset: 15581},
									val:        "over",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 531, col: 13, offset: 15589},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 531, col: 15, offset: 15591},
									label: "exprs",
									expr: &ruleRefExpr{
										pos:  position{line: 531, col: 21, offset: 15597},
										name: "Exprs",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ScopedOver",
			pos:  position{line: 535, col: 1, offset: 15693},
			expr: &actionExpr{
				pos: position{line: 536, col: 5, offset: 15708},
				run: (*parser).callonScopedOver1,
				expr: &seqExpr{
					pos: position{line: 536, col: 5, offset: 15708},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 536, col: 5, offset: 15708},
							val:        "over",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 536, col: 13, offset: 15716},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 536, col: 15, offset: 15718},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 536, col: 21, offset: 15724},
								name: "Exprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 536, col: 27, offset: 15730},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 536, col: 30, offset: 15733},
							label: "scope",
							expr: &ruleRefExpr{
								pos:  position{line: 536, col: 36, offset: 15739},
								name: "Scope",
							},
						},
					},
				},
			},
		},
		{
			name: "LetProc",
			pos:  position{line: 540, col: 1, offset: 15837},
			expr: &actionExpr{
				pos: position{line: 541, col: 5, offset: 15849},
				run: (*parser).callonLetProc1,
				expr: &seqExpr{
					pos: position{line: 541, col: 5, offset: 15849},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 541, col: 5, offset: 15849},
							val:        "let",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 541, col: 12, offset: 15856},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 541, col: 14, offset: 15858},
							label: "locals",
							expr: &ruleRefExpr{
								pos:  position{line: 541, col: 21, offset: 15865},
								name: "LetAssignments",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 541, col: 36, offset: 15880},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 541, col: 39, offset: 15883},
							label: "over",
							expr: &ruleRefExpr{
								pos:  position{line: 541, col: 44, offset: 15888},
								name: "ScopedOver",
							},
						},
					},
				},
			},
		},
		{
			name: "Scope",
			pos:  position{line: 545, col: 1, offset: 15990},
			expr: &actionExpr{
				pos: position{line: 545, col: 9, offset: 15998},
				run: (*parser).callonScope1,
				expr: &seqExpr{
					pos: position{line: 545, col: 9, offset: 15998},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 545, col: 9, offset: 15998},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 545, col: 14, offset: 16003},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 545, col: 17, offset: 16006},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 545, col: 21, offset: 16010},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 545, col: 24, offset: 16013},
							label: "seq",
							expr: &ruleRefExpr{
								pos:  position{line: 545, col: 28, offset: 16017},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 545, col: 39, offset: 16028},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 545, col: 42, offset: 16031},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LetAssignments",
			pos:  position{line: 547, col: 1, offset: 16056},
			expr: &actionExpr{
				pos: position{line: 548, col: 5, offset: 16075},
				run: (*parser).callonLetAssignments1,
				expr: &seqExpr{
					pos: position{line: 548, col: 5, offset: 16075},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 548, col: 5, offset: 16075},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 548, col: 11, offset: 16081},
								name: "LetAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 548, col: 25, offset: 16095},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 548, col: 30, offset: 16100},
								expr: &actionExpr{
									pos: position{line: 548, col: 31, offset: 16101},
									run: (*parser).callonLetAssignments7,
									expr: &seqExpr{
										pos: position{line: 548, col: 31, offset: 16101},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 548, col: 31, offset: 16101},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 548, col: 34, offset: 16104},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 548, col: 38, offset: 16108},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 548, col: 41, offset: 16111},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 548, col: 43, offset: 16113},
													name: "LetAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LetAssignment",
			pos:  position{line: 552, col: 1, offset: 16231},
			expr: &actionExpr{
				pos: position{line: 552, col: 17, offset: 16247},
				run: (*parser).callonLetAssignment1,
				expr: &seqExpr{
					pos: position{line: 552, col: 17, offset: 16247},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 552, col: 17, offset: 16247},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 552, col: 20, offset: 16250},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 552, col: 35, offset: 16265},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 552, col: 38, offset: 16268},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 552, col: 42, offset: 16272},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 552, col: 45, offset: 16275},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 552, col: 50, offset: 16280},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "YieldProc",
			pos:  position{line: 556, col: 1, offset: 16359},
			expr: &actionExpr{
				pos: position{line: 557, col: 5, offset: 16373},
				run: (*parser).callonYieldProc1,
				expr: &seqExpr{
					pos: position{line: 557, col: 5, offset: 16373},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 557, col: 5, offset: 16373},
							val:        "yield",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 557, col: 14, offset: 16382},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 557, col: 16, offset: 16384},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 557, col: 22, offset: 16390},
								name: "Exprs",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeArg",
			pos:  position{line: 561, col: 1, offset: 16474},
			expr: &actionExpr{
				pos: position{line: 562, col: 5, offset: 16486},
				run: (*parser).callonTypeArg1,
				expr: &seqExpr{
					pos: position{line: 562, col: 5, offset: 16486},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 562, col: 5, offset: 16486},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 562, col: 7, offset: 16488},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 562, col: 10, offset: 16491},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 562, col: 12, offset: 16493},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 562, col: 16, offset: 16497},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "AsArg",
			pos:  position{line: 564, col: 1, offset: 16522},
			expr: &actionExpr{
				pos: position{line: 565, col: 5, offset: 16532},
				run: (*parser).callonAsArg1,
				expr: &seqExpr{
					pos: position{line: 565, col: 5, offset: 16532},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 565, col: 5, offset: 16532},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 565, col: 7, offset: 16534},
							name: "AS",
						},
						&ruleRefExpr{
							pos:  position{line: 565, col: 10, offset: 16537},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 565, col: 12, offset: 16539},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 565, col: 16, offset: 16543},
								name: "Lval",
							},
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 569, col: 1, offset: 16594},
			expr: &ruleRefExpr{
				pos:  position{line: 569, col: 8, offset: 16601},
				name: "DerefExpr",
			},
		},
		{
			name: "Lvals",
			pos:  position{line: 571, col: 1, offset: 16612},
			expr: &actionExpr{
				pos: position{line: 572, col: 5, offset: 16622},
				run: (*parser).callonLvals1,
				expr: &seqExpr{
					pos: position{line: 572, col: 5, offset: 16622},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 572, col: 5, offset: 16622},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 572, col: 11, offset: 16628},
								name: "Lval",
							},
						},
						&labeledExpr{
							pos:   position{line: 572, col: 16, offset: 16633},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 572, col: 21, offset: 16638},
								expr: &actionExpr{
									pos: position{line: 572, col: 22, offset: 16639},
									run: (*parser).callonLvals7,
									expr: &seqExpr{
										pos: position{line: 572, col: 22, offset: 16639},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 572, col: 22, offset: 16639},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 572, col: 25, offset: 16642},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 572, col: 29, offset: 16646},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 572, col: 32, offset: 16649},
												label: "lval",
												expr: &ruleRefExpr{
													pos:  position{line: 572, col: 37, offset: 16654},
													name: "Lval",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 576, col: 1, offset: 16766},
			expr: &ruleRefExpr{
				pos:  position{line: 576, col: 13, offset: 16778},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 578, col: 1, offset: 16784},
			expr: &actionExpr{
				pos: position{line: 579, col: 5, offset: 16799},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 579, col: 5, offset: 16799},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 579, col: 5, offset: 16799},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 579, col: 11, offset: 16805},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 579, col: 21, offset: 16815},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 579, col: 26, offset: 16820},
								expr: &seqExpr{
									pos: position{line: 579, col: 27, offset: 16821},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 579, col: 27, offset: 16821},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 579, col: 30, offset: 16824},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 579, col: 34, offset: 16828},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 579, col: 37, offset: 16831},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignments",
			pos:  position{line: 589, col: 1, offset: 17030},
			expr: &actionExpr{
				pos: position{line: 590, col: 5, offset: 17046},
				run: (*parser).callonAssignments1,
				expr: &seqExpr{
					pos: position{line: 590, col: 5, offset: 17046},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 590, col: 5, offset: 17046},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 590, col: 11, offset: 17052},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 590, col: 22, offset: 17063},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 590, col: 27, offset: 17068},
								expr: &actionExpr{
									pos: position{line: 590, col: 28, offset: 17069},
									run: (*parser).callonAssignments7,
									expr: &seqExpr{
										pos: position{line: 590, col: 28, offset: 17069},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 590, col: 28, offset: 17069},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 590, col: 31, offset: 17072},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 590, col: 35, offset: 17076},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 590, col: 38, offset: 17079},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 590, col: 40, offset: 17081},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 594, col: 1, offset: 17192},
			expr: &actionExpr{
				pos: position{line: 595, col: 5, offset: 17207},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 595, col: 5, offset: 17207},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 595, col: 5, offset: 17207},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 595, col: 9, offset: 17211},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 595, col: 14, offset: 17216},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 595, col: 17, offset: 17219},
							val:        ":=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 595, col: 22, offset: 17224},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 595, col: 25, offset: 17227},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 595, col: 29, offset: 17231},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 597, col: 1, offset: 17322},
			expr: &ruleRefExpr{
				pos:  position{line: 597, col: 8, offset: 17329},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 599, col: 1, offset: 17346},
			expr: &choiceExpr{
				pos: position{line: 600, col: 5, offset: 17366},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 600, col: 5, offset: 17366},
						run: (*parser).callonConditionalExpr2,
						expr: &seqExpr{
							pos: position{line: 600, col: 5, offset: 17366},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 600, col: 5, offset: 17366},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 600, col: 15, offset: 17376},
										name: "LogicalOrExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 600, col: 29, offset: 17390},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 600, col: 32, offset: 17393},
									val:        "?",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 600, col: 36, offset: 17397},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 600, col: 39, offset: 17400},
									label: "thenClause",
									expr: &ruleRefExpr{
										pos:  position{line: 600, col: 50, offset: 17411},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 600, col: 55, offset: 17416},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 600, col: 58, offset: 17419},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 600, col: 62, offset: 17423},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 600, col: 65, offset: 17426},
									label: "elseClause",
									expr: &ruleRefExpr{
										pos:  position{line: 600, col: 76, offset: 17437},
										name: "Expr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 603, col: 5, offset: 17577},
						name: "LogicalOrExpr",
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 605, col: 1, offset: 17592},
			expr: &actionExpr{
				pos: position{line: 606, col: 5, offset: 17610},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 606, col: 5, offset: 17610},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 606, col: 5, offset: 17610},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 606, col: 11, offset: 17616},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 607, col: 5, offset: 17635},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 607, col: 10, offset: 17640},
								expr: &actionExpr{
									pos: position{line: 607, col: 11, offset: 17641},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 607, col: 11, offset: 17641},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 607, col: 11, offset: 17641},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 607, col: 14, offset: 17644},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 607, col: 17, offset: 17647},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 607, col: 25, offset: 17655},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 607, col: 28, offset: 17658},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 607, col: 33, offset: 17663},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 611, col: 1, offset: 17781},
			expr: &actionExpr{
				pos: position{line: 612, col: 5, offset: 17800},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 612, col: 5, offset: 17800},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 612, col: 5, offset: 17800},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 612, col: 11, offset: 17806},
								name: "EqualityCompareExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 613, col: 5, offset: 17830},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 613, col: 10, offset: 17835},
								expr: &actionExpr{
									pos: position{line: 613, col: 11, offset: 17836},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 613, col: 11, offset: 17836},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 613, col: 11, offset: 17836},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 613, col: 14, offset: 17839},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 613, col: 17, offset: 17842},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 613, col: 26, offset: 17851},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 613, col: 29, offset: 17854},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 613, col: 34, offset: 17859},
													name: "EqualityCompareExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityCompareExpr",
			pos:  position{line: 617, col: 1, offset: 17982},
			expr: &choiceExpr{
				pos: position{line: 618, col: 5, offset: 18006},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 618, col: 5, offset: 18006},
						name: "PatternMatch",
					},
					&actionExpr{
						pos: position{line: 619, col: 5, offset: 18023},
						run: (*parser).callonEqualityCompareExpr3,
						expr: &seqExpr{
							pos: position{line: 619, col: 5, offset: 18023},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 619, col: 5, offset: 18023},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 619, col: 11, offset: 18029},
										name: "RelativeExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 620, col: 5, offset: 18046},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 620, col: 10, offset: 18051},
										expr: &actionExpr{
											pos: position{line: 620, col: 11, offset: 18052},
											run: (*parser).callonEqualityCompareExpr9,
											expr: &seqExpr{
												pos: position{line: 620, col: 11, offset: 18052},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 620, col: 11, offset: 18052},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 620, col: 14, offset: 18055},
														label: "comp",
														expr: &ruleRefExpr{
															pos:  position{line: 620, col: 19, offset: 18060},
															name: "EqualityComparator",
														},
													},
													&ruleRefExpr{
														pos:  position{line: 620, col: 38, offset: 18079},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 620, col: 41, offset: 18082},
														label: "expr",
														expr: &ruleRefExpr{
															pos:  position{line: 620, col: 46, offset: 18087},
															name: "RelativeExpr",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityOperator",
			pos:  position{line: 624, col: 1, offset: 18205},
			expr: &choiceExpr{
				pos: position{line: 625, col: 5, offset: 18226},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 625, col: 5, offset: 18226},
						run: (*parser).callonEqualityOperator2,
						expr: &litMatcher{
							pos:        position{line: 625, col: 5, offset: 18226},
							val:        "==",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 626, col: 5, offset: 18255},
						run: (*parser).callonEqualityOperator4,
						expr: &litMatcher{
							pos:        position{line: 626, col: 5, offset: 18255},
							val:        "!=",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "EqualityComparator",
			pos:  position{line: 628, col: 1, offset: 18292},
			expr: &choiceExpr{
				pos: position{line: 629, col: 5, offset: 18315},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 629, col: 5, offset: 18315},
						name: "EqualityOperator",
					},
					&actionExpr{
						pos: position{line: 630, col: 5, offset: 18336},
						run: (*parser).callonEqualityComparator3,
						expr: &seqExpr{
							pos: position{line: 630, col: 5, offset: 18336},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 630, col: 5, offset: 18336},
									val:        "in",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 630, col: 10, offset: 18341},
									expr: &ruleRefExpr{
										pos:  position{line: 630, col: 11, offset: 18342},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeExpr",
			pos:  position{line: 632, col: 1, offset: 18389},
			expr: &actionExpr{
				pos: position{line: 633, col: 5, offset: 18406},
				run: (*parser).callonRelativeExpr1,
				expr: &seqExpr{
					pos: position{line: 633, col: 5, offset: 18406},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 633, col: 5, offset: 18406},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 633, col: 11, offset: 18412},
								name: "AdditiveExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 634, col: 5, offset: 18429},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 634, col: 10, offset: 18434},
								expr: &actionExpr{
									pos: position{line: 634, col: 11, offset: 18435},
									run: (*parser).callonRelativeExpr7,
									expr: &seqExpr{
										pos: position{line: 634, col: 11, offset: 18435},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 634, col: 11, offset: 18435},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 634, col: 14, offset: 18438},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 634, col: 17, offset: 18441},
													name: "RelativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 634, col: 34, offset: 18458},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 634, col: 37, offset: 18461},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 634, col: 42, offset: 18466},
													name: "AdditiveExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeOperator",
			pos:  position{line: 638, col: 1, offset: 18582},
			expr: &actionExpr{
				pos: position{line: 638, col: 20, offset: 18601},
				run: (*parser).callonRelativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 638, col: 21, offset: 18602},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 638, col: 21, offset: 18602},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 638, col: 28, offset: 18609},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 638, col: 34, offset: 18615},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 638, col: 41, offset: 18622},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 640, col: 1, offset: 18659},
			expr: &actionExpr{
				pos: position{line: 641, col: 5, offset: 18676},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 641, col: 5, offset: 18676},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 641, col: 5, offset: 18676},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 641, col: 11, offset: 18682},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 642, col: 5, offset: 18705},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 642, col: 10, offset: 18710},
								expr: &actionExpr{
									pos: position{line: 642, col: 11, offset: 18711},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 642, col: 11, offset: 18711},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 642, col: 11, offset: 18711},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 642, col: 14, offset: 18714},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 642, col: 17, offset: 18717},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 642, col: 34, offset: 18734},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 642, col: 37, offset: 18737},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 642, col: 42, offset: 18742},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 646, col: 1, offset: 18864},
			expr: &actionExpr{
				pos: position{line: 646, col: 20, offset: 18883},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 646, col: 21, offset: 18884},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 646, col: 21, offset: 18884},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 646, col: 27, offset: 18890},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 648, col: 1, offset: 18927},
			expr: &actionExpr{
				pos: position{line: 649, col: 5, offset: 18950},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 649, col: 5, offset: 18950},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 649, col: 5, offset: 18950},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 649, col: 11, offset: 18956},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 650, col: 5, offset: 18968},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 650, col: 10, offset: 18973},
								expr: &actionExpr{
									pos: position{line: 650, col: 11, offset: 18974},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 650, col: 11, offset: 18974},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 650, col: 11, offset: 18974},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 650, col: 14, offset: 18977},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 650, col: 17, offset: 18980},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 650, col: 40, offset: 19003},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 650, col: 43, offset: 19006},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 650, col: 48, offset: 19011},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 654, col: 1, offset: 19122},
			expr: &actionExpr{
				pos: position{line: 654, col: 26, offset: 19147},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 654, col: 27, offset: 19148},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 654, col: 27, offset: 19148},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 654, col: 33, offset: 19154},
							val:        "/",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 654, col: 39, offset: 19160},
							val:        "%",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 656, col: 1, offset: 19197},
			expr: &choiceExpr{
				pos: position{line: 657, col: 5, offset: 19209},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 657, col: 5, offset: 19209},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 657, col: 5, offset: 19209},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 657, col: 5, offset: 19209},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 657, col: 9, offset: 19213},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 657, col: 12, offset: 19216},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 657, col: 14, offset: 19218},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 660, col: 5, offset: 19327},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 662, col: 1, offset: 19337},
			expr: &choiceExpr{
				pos: position{line: 663, col: 5, offset: 19350},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 663, col: 5, offset: 19350},
						name: "MatchExpr",
					},
					&actionExpr{
						pos: position{line: 664, col: 5, offset: 19364},
						run: (*parser).callonFuncExpr3,
						expr: &seqExpr{
							pos: position{line: 664, col: 5, offset: 19364},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 664, col: 5, offset: 19364},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 664, col: 11, offset: 19370},
										name: "Cast",
									},
								},
								&labeledExpr{
									pos:   position{line: 664, col: 16, offset: 19375},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 664, col: 21, offset: 19380},
										expr: &ruleRefExpr{
											pos:  position{line: 664, col: 22, offset: 19381},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 667, col: 5, offset: 19452},
						run: (*parser).callonFuncExpr10,
						expr: &seqExpr{
							pos: position{line: 667, col: 5, offset: 19452},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 667, col: 5, offset: 19452},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 667, col: 11, offset: 19458},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 667, col: 20, offset: 19467},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 667, col: 25, offset: 19472},
										expr: &ruleRefExpr{
											pos:  position{line: 667, col: 26, offset: 19473},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 670, col: 5, offset: 19544},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 671, col: 5, offset: 19558},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FuncGuard",
			pos:  position{line: 673, col: 1, offset: 19567},
			expr: &seqExpr{
				pos: position{line: 673, col: 13, offset: 19579},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 673, col: 13, offset: 19579},
						name: "NotFuncs",
					},
					&ruleRefExpr{
						pos:  position{line: 673, col: 22, offset: 19588},
						name: "__",
					},
					&litMatcher{
						pos:        position{line: 673, col: 25, offset: 19591},
						val:        "(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "NotFuncs",
			pos:  position{line: 675, col: 1, offset: 19596},
			expr: &choiceExpr{
				pos: position{line: 676, col: 5, offset: 19609},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 676, col: 5, offset: 19609},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 677, col: 5, offset: 19619},
						val:        "search",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 678, col: 5, offset: 19632},
						val:        "select",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 679, col: 5, offset: 19645},
						val:        "type",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "MatchExpr",
			pos:  position{line: 681, col: 1, offset: 19653},
			expr: &actionExpr{
				pos: position{line: 682, col: 5, offset: 19667},
				run: (*parser).callonMatchExpr1,
				expr: &seqExpr{
					pos: position{line: 682, col: 5, offset: 19667},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 682, col: 5, offset: 19667},
							val:        "search",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 682, col: 14, offset: 19676},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 682, col: 17, offset: 19679},
							val:        "(",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 682, col: 21, offset: 19683},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 682, col: 26, offset: 19688},
								name: "SearchBoolean",
							},
						},
						&litMatcher{
							pos:        position{line: 682, col: 40, offset: 19702},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Cast",
			pos:  position{line: 684, col: 1, offset: 19728},
			expr: &actionExpr{
				pos: position{line: 685, col: 5, offset: 19737},
				run: (*parser).callonCast1,
				expr: &seqExpr{
					pos: position{line: 685, col: 5, offset: 19737},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 685, col: 5, offset: 19737},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 685, col: 9, offset: 19741},
								name: "CastType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 685, col: 18, offset: 19750},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 685, col: 21, offset: 19753},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 685, col: 25, offset: 19757},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 685, col: 28, offset: 19760},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 685, col: 33, offset: 19765},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 685, col: 38, offset: 19770},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 685, col: 41, offset: 19773},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 689, col: 1, offset: 19870},
			expr: &actionExpr{
				pos: position{line: 690, col: 5, offset: 19883},
				run: (*parser).callonFunction1,
				expr: &seqExpr{
					pos: position{line: 690, col: 5, offset: 19883},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 690, col: 5, offset: 19883},
							expr: &ruleRefExpr{
								pos:  position{line: 690, col: 6, offset: 19884},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 690, col: 16, offset: 19894},
							label: "fn",
							expr: &ruleRefExpr{
								pos:  position{line: 690, col: 19, offset: 19897},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 690, col: 34, offset: 19912},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 690, col: 37, offset: 19915},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 690, col: 41, offset: 19919},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 690, col: 44, offset: 19922},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 690, col: 49, offset: 19927},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 690, col: 63, offset: 19941},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 690, col: 66, offset: 19944},
							val:        ")",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 690, col: 70, offset: 19948},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 690, col: 76, offset: 19954},
								expr: &ruleRefExpr{
									pos:  position{line: 690, col: 76, offset: 19954},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OptionalExprs",
			pos:  position{line: 694, col: 1, offset: 20075},
			expr: &choiceExpr{
				pos: position{line: 695, col: 5, offset: 20093},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 695, col: 5, offset: 20093},
						name: "Exprs",
					},
					&actionExpr{
						pos: position{line: 696, col: 5, offset: 20103},
						run: (*parser).callonOptionalExprs3,
						expr: &ruleRefExpr{
							pos:  position{line: 696, col: 5, offset: 20103},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 698, col: 1, offset: 20139},
			expr: &actionExpr{
				pos: position{line: 699, col: 5, offset: 20149},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 699, col: 5, offset: 20149},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 699, col: 5, offset: 20149},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 699, col: 11, offset: 20155},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 699, col: 16, offset: 20160},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 699, col: 21, offset: 20165},
								expr: &actionExpr{
									pos: position{line: 699, col: 22, offset: 20166},
									run: (*parser).callonExprs7,
									expr: &seqExpr{
										pos: position{line: 699, col: 22, offset: 20166},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 699, col: 22, offset: 20166},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 699, col: 25, offset: 20169},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 699, col: 29, offset: 20173},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 699, col: 32, offset: 20176},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 699, col: 34, offset: 20178},
													name: "Expr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 703, col: 1, offset: 20287},
			expr: &actionExpr{
				pos: position{line: 703, col: 13, offset: 20299},
				run: (*parser).callonDerefExpr1,
				expr: &seqExpr{
					pos: position{line: 703, col: 13, offset: 20299},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 703, col: 13, offset: 20299},
							expr: &ruleRefExpr{
								pos:  position{line: 703, col: 14, offset: 20300},
								name: "IP6",
							},
						},
						&labeledExpr{
							pos:   position{line: 703, col: 18, offset: 20304},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 703, col: 20, offset: 20306},
								name: "DerefExprPattern",
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExprPattern",
			pos:  position{line: 705, col: 1, offset: 20342},
			expr: &choiceExpr{
				pos: position{line: 706, col: 5, offset: 20363},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 706, col: 5, offset: 20363},
						run: (*parser).callonDerefExprPattern2,
						expr: &seqExpr{
							pos: position{line: 706, col: 5, offset: 20363},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 706, col: 5, offset: 20363},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 706, col: 11, offset: 20369},
										name: "DotID",
									},
								},
								&labeledExpr{
									pos:   position{line: 706, col: 17, offset: 20375},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 706, col: 22, offset: 20380},
										expr: &ruleRefExpr{
											pos:  position{line: 706, col: 23, offset: 20381},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 709, col: 5, offset: 20452},
						run: (*parser).callonDerefExprPattern9,
						expr: &seqExpr{
							pos: position{line: 709, col: 5, offset: 20452},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 709, col: 5, offset: 20452},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 709, col: 11, offset: 20458},
										name: "This",
									},
								},
								&labeledExpr{
									pos:   position{line: 709, col: 16, offset: 20463},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 709, col: 21, offset: 20468},
										expr: &ruleRefExpr{
											pos:  position{line: 709, col: 22, offset: 20469},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 712, col: 5, offset: 20540},
						run: (*parser).callonDerefExprPattern16,
						expr: &seqExpr{
							pos: position{line: 712, col: 5, offset: 20540},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 712, col: 5, offset: 20540},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 712, col: 11, offset: 20546},
										name: "Identifier",
									},
								},
								&labeledExpr{
									pos:   position{line: 712, col: 22, offset: 20557},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 712, col: 27, offset: 20562},
										expr: &ruleRefExpr{
											pos:  position{line: 712, col: 28, offset: 20563},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 715, col: 5, offset: 20634},
						run: (*parser).callonDerefExprPattern23,
						expr: &litMatcher{
							pos:        position{line: 715, col: 5, offset: 20634},
							val:        ".",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "This",
			pos:  position{line: 719, col: 1, offset: 20703},
			expr: &actionExpr{
				pos: position{line: 719, col: 8, offset: 20710},
				run: (*parser).callonThis1,
				expr: &litMatcher{
					pos:        position{line: 719, col: 8, offset: 20710},
					val:        "this",
					ignoreCase: false,
				},
			},
		},
		{
			name: "DotID",
			pos:  position{line: 721, col: 1, offset: 20772},
			expr: &choiceExpr{
				pos: position{line: 722, col: 5, offset: 20782},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 722, col: 5, offset: 20782},
						run: (*parser).callonDotID2,
						expr: &seqExpr{
							pos: position{line: 722, col: 5, offset: 20782},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 722, col: 5, offset: 20782},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 722, col: 9, offset: 20786},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 722, col: 15, offset: 20792},
										name: "Identifier",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 731, col: 5, offset: 21008},
						run: (*parser).callonDotID7,
						expr: &seqExpr{
							pos: position{line: 731, col: 5, offset: 21008},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 731, col: 5, offset: 21008},
									val:        ".",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 731, col: 9, offset: 21012},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 731, col: 13, offset: 21016},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 731, col: 18, offset: 21021},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 731, col: 23, offset: 21026},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 741, col: 1, offset: 21231},
			expr: &choiceExpr{
				pos: position{line: 742, col: 5, offset: 21241},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 742, col: 5, offset: 21241},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 742, col: 5, offset: 21241},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 742, col: 5, offset: 21241},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 742, col: 9, offset: 21245},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 742, col: 14, offset: 21250},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 742, col: 27, offset: 21263},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 742, col: 30, offset: 21266},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 742, col: 34, offset: 21270},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 742, col: 37, offset: 21273},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 742, col: 40, offset: 21276},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 742, col: 53, offset: 21289},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 748, col: 5, offset: 21460},
						run: (*parser).callonDeref13,
						expr: &seqExpr{
							pos: position{line: 748, col: 5, offset: 21460},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 748, col: 5, offset: 21460},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 748, col: 9, offset: 21464},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 748, col: 12, offset: 21467},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 748, col: 16, offset: 21471},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 748, col: 19, offset: 21474},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 748, col: 22, offset: 21477},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 748, col: 35, offset: 21490},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 754, col: 5, offset: 21661},
						run: (*parser).callonDeref22,
						expr: &seqExpr{
							pos: position{line: 754, col: 5, offset: 21661},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 754, col: 5, offset: 21661},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 754, col: 9, offset: 21665},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 754, col: 14, offset: 21670},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 754, col: 27, offset: 21683},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 754, col: 30, offset: 21686},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 754, col: 34, offset: 21690},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 754, col: 37, offset: 21693},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 760, col: 5, offset: 21866},
						run: (*parser).callonDeref31,
						expr: &seqExpr{
							pos: position{line: 760, col: 5, offset: 21866},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 760, col: 5, offset: 21866},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 760, col: 9, offset: 21870},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 760, col: 14, offset: 21875},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 760, col: 19, offset: 21880},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 761, col: 5, offset: 21929},
						run: (*parser).callonDeref37,
						expr: &seqExpr{
							pos: position{line: 761, col: 5, offset: 21929},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 761, col: 5, offset: 21929},
									val:        ".",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 761, col: 9, offset: 21933},
									expr: &litMatcher{
										pos:        position{line: 761, col: 11, offset: 21935},
										val:        ".",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 761, col: 16, offset: 21940},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 761, col: 19, offset: 21943},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 763, col: 1, offset: 21994},
			expr: &choiceExpr{
				pos: position{line: 764, col: 5, offset: 22006},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 764, col: 5, offset: 22006},
						name: "Record",
					},
					&ruleRefExpr{
						pos:  position{line: 765, col: 5, offset: 22017},
						name: "Array",
					},
					&ruleRefExpr{
						pos:  position{line: 766, col: 5, offset: 22027},
						name: "Set",
					},
					&ruleRefExpr{
						pos:  position{line: 767, col: 5, offset: 22035},
						name: "Map",
					},
					&ruleRefExpr{
						pos:  position{line: 768, col: 5, offset: 22043},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 769, col: 5, offset: 22055},
						run: (*parser).callonPrimary7,
						expr: &seqExpr{
							pos: position{line: 769, col: 5, offset: 22055},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 769, col: 5, offset: 22055},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 769, col: 9, offset: 22059},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 769, col: 12, offset: 22062},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 769, col: 17, offset: 22067},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 769, col: 22, offset: 22072},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 769, col: 25, offset: 22075},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Record",
			pos:  position{line: 771, col: 1, offset: 22101},
			expr: &actionExpr{
				pos: position{line: 772, col: 5, offset: 22112},
				run: (*parser).callonRecord1,
				expr: &seqExpr{
					pos: position{line: 772, col: 5, offset: 22112},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 772, col: 5, offset: 22112},
							val:        "{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 772, col: 9, offset: 22116},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 772, col: 12, offset: 22119},
							label: "fields",
							expr: &ruleRefExpr{
								pos:  position{line: 772, col: 19, offset: 22126},
								name: "Fields",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 772, col: 26, offset: 22133},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 772, col: 29, offset: 22136},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Fields",
			pos:  position{line: 776, col: 1, offset: 22229},
			expr: &choiceExpr{
				pos: position{line: 777, col: 5, offset: 22240},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 777, col: 5, offset: 22240},
						run: (*parser).callonFields2,
						expr: &seqExpr{
							pos: position{line: 777, col: 5, offset: 22240},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 777, col: 5, offset: 22240},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 777, col: 11, offset: 22246},
										name: "Field",
									},
								},
								&labeledExpr{
									pos:   position{line: 777, col: 17, offset: 22252},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 777, col: 22, offset: 22257},
										expr: &ruleRefExpr{
											pos:  position{line: 777, col: 22, offset: 22257},
											name: "FieldTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 780, col: 5, offset: 22351},
						run: (*parser).callonFields9,
						expr: &ruleRefExpr{
							pos:  position{line: 780, col: 5, offset: 22351},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "FieldTail",
			pos:  position{line: 782, col: 1, offset: 22387},
			expr: &actionExpr{
				pos: position{line: 782, col: 13, offset: 22399},
				run: (*parser).callonFieldTail1,
				expr: &seqExpr{
					pos: position{line: 782, col: 13, offset: 22399},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 782, col: 13, offset: 22399},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 782, col: 16, offset: 22402},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 782, col: 20, offset: 22406},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 782, col: 23, offset: 22409},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 782, col: 25, offset: 22411},
								name: "Field",
							},
						},
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 784, col: 1, offset: 22436},
			expr: &actionExpr{
				pos: position{line: 785, col: 5, offset: 22446},
				run: (*parser).callonField1,
				expr: &seqExpr{
					pos: position{line: 785, col: 5, offset: 22446},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 785, col: 5, offset: 22446},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 785, col: 10, offset: 22451},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 785, col: 20, offset: 22461},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 785, col: 23, offset: 22464},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 785, col: 27, offset: 22468},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 785, col: 30, offset: 22471},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 785, col: 36, offset: 22477},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Array",
			pos:  position{line: 789, col: 1, offset: 22562},
			expr: &actionExpr{
				pos: position{line: 790, col: 5, offset: 22572},
				run: (*parser).callonArray1,
				expr: &seqExpr{
					pos: position{line: 790, col: 5, offset: 22572},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 790, col: 5, offset: 22572},
							val:        "[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 790, col: 9, offset: 22576},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 790, col: 12, offset: 22579},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 790, col: 18, offset: 22585},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 790, col: 32, offset: 22599},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 790, col: 35, offset: 22602},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Set",
			pos:  position{line: 794, col: 1, offset: 22692},
			expr: &actionExpr{
				pos: position{line: 795, col: 5, offset: 22700},
				run: (*parser).callonSet1,
				expr: &seqExpr{
					pos: position{line: 795, col: 5, offset: 22700},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 795, col: 5, offset: 22700},
							val:        "|[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 795, col: 10, offset: 22705},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 795, col: 13, offset: 22708},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 795, col: 19, offset: 22714},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 795, col: 33, offset: 22728},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 795, col: 36, offset: 22731},
							val:        "]|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Map",
			pos:  position{line: 799, col: 1, offset: 22820},
			expr: &actionExpr{
				pos: position{line: 800, col: 5, offset: 22828},
				run: (*parser).callonMap1,
				expr: &seqExpr{
					pos: position{line: 800, col: 5, offset: 22828},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 800, col: 5, offset: 22828},
							val:        "|{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 800, col: 10, offset: 22833},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 800, col: 13, offset: 22836},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 800, col: 19, offset: 22842},
								name: "Entries",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 800, col: 27, offset: 22850},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 800, col: 30, offset: 22853},
							val:        "}|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Entries",
			pos:  position{line: 804, col: 1, offset: 22944},
			expr: &choiceExpr{
				pos: position{line: 805, col: 5, offset: 22956},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 805, col: 5, offset: 22956},
						run: (*parser).callonEntries2,
						expr: &seqExpr{
							pos: position{line: 805, col: 5, offset: 22956},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 805, col: 5, offset: 22956},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 805, col: 11, offset: 22962},
										name: "Entry",
									},
								},
								&labeledExpr{
									pos:   position{line: 805, col: 17, offset: 22968},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 805, col: 22, offset: 22973},
										expr: &ruleRefExpr{
											pos:  position{line: 805, col: 22, offset: 22973},
											name: "EntryTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 808, col: 5, offset: 23067},
						run: (*parser).callonEntries9,
						expr: &ruleRefExpr{
							pos:  position{line: 808, col: 5, offset: 23067},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "EntryTail",
			pos:  position{line: 811, col: 1, offset: 23104},
			expr: &actionExpr{
				pos: position{line: 811, col: 13, offset: 23116},
				run: (*parser).callonEntryTail1,
				expr: &seqExpr{
					pos: position{line: 811, col: 13, offset: 23116},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 811, col: 13, offset: 23116},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 811, col: 16, offset: 23119},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 811, col: 20, offset: 23123},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 811, col: 23, offset: 23126},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 811, col: 25, offset: 23128},
								name: "Entry",
							},
						},
					},
				},
			},
		},
		{
			name: "Entry",
			pos:  position{line: 813, col: 1, offset: 23153},
			expr: &actionExpr{
				pos: position{line: 814, col: 5, offset: 23163},
				run: (*parser).callonEntry1,
				expr: &seqExpr{
					pos: position{line: 814, col: 5, offset: 23163},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 814, col: 5, offset: 23163},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 814, col: 9, offset: 23167},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 814, col: 14, offset: 23172},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 814, col: 17, offset: 23175},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 814, col: 21, offset: 23179},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 814, col: 24, offset: 23182},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 814, col: 30, offset: 23188},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLProc",
			pos:  position{line: 820, col: 1, offset: 23295},
			expr: &actionExpr{
				pos: position{line: 821, col: 5, offset: 23307},
				run: (*parser).callonSQLProc1,
				expr: &seqExpr{
					pos: position{line: 821, col: 5, offset: 23307},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 821, col: 5, offset: 23307},
							label: "selection",
							expr: &ruleRefExpr{
								pos:  position{line: 821, col: 15, offset: 23317},
								name: "SQLSelect",
							},
						},
						&labeledExpr{
							pos:   position{line: 822, col: 5, offset: 23331},
							label: "from",
							expr: &zeroOrOneExpr{
								pos: position{line: 822, col: 10, offset: 23336},
								expr: &ruleRefExpr{
									pos:  position{line: 822, col: 10, offset: 23336},
									name: "SQLFrom",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 823, col: 5, offset: 23349},
							label: "joins",
							expr: &zeroOrOneExpr{
								pos: position{line: 823, col: 11, offset: 23355},
								expr: &ruleRefExpr{
									pos:  position{line: 823, col: 11, offset: 23355},
									name: "SQLJoins",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 824, col: 5, offset: 23369},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 824, col: 11, offset: 23375},
								expr: &ruleRefExpr{
									pos:  position{line: 824, col: 11, offset: 23375},
									name: "SQLWhere",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 825, col: 5, offset: 23389},
							label: "groupby",
							expr: &zeroOrOneExpr{
								pos: position{line: 825, col: 13, offset: 23397},
								expr: &ruleRefExpr{
									pos:  position{line: 825, col: 13, offset: 23397},
									name: "SQLGroupBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 826, col: 5, offset: 23413},
							label: "having",
							expr: &zeroOrOneExpr{
								pos: position{line: 826, col: 12, offset: 23420},
								expr: &ruleRefExpr{
									pos:  position{line: 826, col: 12, offset: 23420},
									name: "SQLHaving",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 827, col: 5, offset: 23435},
							label: "orderby",
							expr: &zeroOrOneExpr{
								pos: position{line: 827, col: 13, offset: 23443},
								expr: &ruleRefExpr{
									pos:  position{line: 827, col: 13, offset: 23443},
									name: "SQLOrderBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 828, col: 5, offset: 23459},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 828, col: 11, offset: 23465},
								name: "SQLLimit",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLSelect",
			pos:  position{line: 852, col: 1, offset: 23832},
			expr: &choiceExpr{
				pos: position{line: 853, col: 5, offset: 23846},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 853, col: 5, offset: 23846},
						run: (*parser).callonSQLSelect2,
						expr: &seqExpr{
							pos: position{line: 853, col: 5, offset: 23846},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 853, col: 5, offset: 23846},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 853, col: 12, offset: 23853},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 853, col: 14, offset: 23855},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 854, col: 5, offset: 23883},
						run: (*parser).callonSQLSelect7,
						expr: &seqExpr{
							pos: position{line: 854, col: 5, offset: 23883},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 854, col: 5, offset: 23883},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 854, col: 12, offset: 23890},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 854, col: 14, offset: 23892},
									label: "assignments",
									expr: &ruleRefExpr{
										pos:  position{line: 854, col: 26, offset: 23904},
										name: "SQLAssignments",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignment",
			pos:  position{line: 856, col: 1, offset: 23948},
			expr: &choiceExpr{
				pos: position{line: 857, col: 5, offset: 23966},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 857, col: 5, offset: 23966},
						run: (*parser).callonSQLAssignment2,
						expr: &seqExpr{
							pos: position{line: 857, col: 5, offset: 23966},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 857, col: 5, offset: 23966},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 857, col: 9, offset: 23970},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 857, col: 14, offset: 23975},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 857, col: 16, offset: 23977},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 857, col: 19, offset: 23980},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 857, col: 21, offset: 23982},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 857, col: 25, offset: 23986},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 858, col: 5, offset: 24080},
						run: (*parser).callonSQLAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 858, col: 5, offset: 24080},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 858, col: 10, offset: 24085},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignments",
			pos:  position{line: 860, col: 1, offset: 24177},
			expr: &actionExpr{
				pos: position{line: 861, col: 5, offset: 24196},
				run: (*parser).callonSQLAssignments1,
				expr: &seqExpr{
					pos: position{line: 861, col: 5, offset: 24196},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 861, col: 5, offset: 24196},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 861, col: 11, offset: 24202},
								name: "SQLAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 861, col: 25, offset: 24216},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 861, col: 30, offset: 24221},
								expr: &actionExpr{
									pos: position{line: 861, col: 31, offset: 24222},
									run: (*parser).callonSQLAssignments7,
									expr: &seqExpr{
										pos: position{line: 861, col: 31, offset: 24222},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 861, col: 31, offset: 24222},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 861, col: 34, offset: 24225},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 861, col: 38, offset: 24229},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 861, col: 41, offset: 24232},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 861, col: 46, offset: 24237},
													name: "SQLAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLFrom",
			pos:  position{line: 865, col: 1, offset: 24358},
			expr: &choiceExpr{
				pos: position{line: 866, col: 5, offset: 24370},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 866, col: 5, offset: 24370},
						run: (*parser).callonSQLFrom2,
						expr: &seqExpr{
							pos: position{line: 866, col: 5, offset: 24370},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 866, col: 5, offset: 24370},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 866, col: 7, offset: 24372},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 866, col: 12, offset: 24377},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 866, col: 14, offset: 24379},
									label: "table",
									expr: &ruleRefExpr{
										pos:  position{line: 866, col: 20, offset: 24385},
										name: "SQLTable",
									},
								},
								&labeledExpr{
									pos:   position{line: 866, col: 29, offset: 24394},
									label: "alias",
									expr: &zeroOrOneExpr{
										pos: position{line: 866, col: 35, offset: 24400},
										expr: &ruleRefExpr{
											pos:  position{line: 866, col: 35, offset: 24400},
											name: "SQLAlias",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 869, col: 5, offset: 24495},
						run: (*parser).callonSQLFrom12,
						expr: &seqExpr{
							pos: position{line: 869, col: 5, offset: 24495},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 869, col: 5, offset: 24495},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 869, col: 7, offset: 24497},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 869, col: 12, offset: 24502},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 869, col: 14, offset: 24504},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAlias",
			pos:  position{line: 871, col: 1, offset: 24529},
			expr: &choiceExpr{
				pos: position{line: 872, col: 5, offset: 24542},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 872, col: 5, offset: 24542},
						run: (*parser).callonSQLAlias2,
						expr: &seqExpr{
							pos: position{line: 872, col: 5, offset: 24542},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 872, col: 5, offset: 24542},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 872, col: 7, offset: 24544},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 872, col: 10, offset: 24547},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 872, col: 12, offset: 24549},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 872, col: 15, offset: 24552},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 873, col: 5, offset: 24580},
						run: (*parser).callonSQLAlias9,
						expr: &seqExpr{
							pos: position{line: 873, col: 5, offset: 24580},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 873, col: 5, offset: 24580},
									name: "_",
								},
								&notExpr{
									pos: position{line: 873, col: 7, offset: 24582},
									expr: &seqExpr{
										pos: position{line: 873, col: 9, offset: 24584},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 873, col: 9, offset: 24584},
												name: "SQLTokenSentinels",
											},
											&ruleRefExpr{
												pos:  position{line: 873, col: 27, offset: 24602},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 873, col: 30, offset: 24605},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 873, col: 33, offset: 24608},
										name: "Lval",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLTable",
			pos:  position{line: 875, col: 1, offset: 24633},
			expr: &ruleRefExpr{
				pos:  position{line: 876, col: 5, offset: 24646},
				name: "Expr",
			},
		},
		{
			name: "SQLJoins",
			pos:  position{line: 878, col: 1, offset: 24652},
			expr: &actionExpr{
				pos: position{line: 879, col: 5, offset: 24665},
				run: (*parser).callonSQLJoins1,
				expr: &seqExpr{
					pos: position{line: 879, col: 5, offset: 24665},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 879, col: 5, offset: 24665},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 879, col: 11, offset: 24671},
								name: "SQLJoin",
							},
						},
						&labeledExpr{
							pos:   position{line: 879, col: 19, offset: 24679},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 879, col: 24, offset: 24684},
								expr: &actionExpr{
									pos: position{line: 879, col: 25, offset: 24685},
									run: (*parser).callonSQLJoins7,
									expr: &labeledExpr{
										pos:   position{line: 879, col: 25, offset: 24685},
										label: "join",
										expr: &ruleRefExpr{
											pos:  position{line: 879, col: 30, offset: 24690},
											name: "SQLJoin",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoin",
			pos:  position{line: 883, col: 1, offset: 24805},
			expr: &actionExpr{
				pos: position{line: 884, col: 5, offset: 24817},
				run: (*parser).callonSQLJoin1,
				expr: &seqExpr{
					pos: position{line: 884, col: 5, offset: 24817},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 884, col: 5, offset: 24817},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 884, col: 11, offset: 24823},
								name: "SQLJoinStyle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 884, col: 24, offset: 24836},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 884, col: 26, offset: 24838},
							name: "JOIN",
						},
						&ruleRefExpr{
							pos:  position{line: 884, col: 31, offset: 24843},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 884, col: 33, offset: 24845},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 884, col: 39, offset: 24851},
								name: "SQLTable",
							},
						},
						&labeledExpr{
							pos:   position{line: 884, col: 48, offset: 24860},
							label: "alias",
							expr: &zeroOrOneExpr{
								pos: position{line: 884, col: 54, offset: 24866},
								expr: &ruleRefExpr{
									pos:  position{line: 884, col: 54, offset: 24866},
									name: "SQLAlias",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 884, col: 64, offset: 24876},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 884, col: 66, offset: 24878},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 884, col: 69, offset: 24881},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 884, col: 71, offset: 24883},
							label: "leftKey",
							expr: &ruleRefExpr{
								pos:  position{line: 884, col: 79, offset: 24891},
								name: "JoinKey",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 884, col: 87, offset: 24899},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 884, col: 90, offset: 24902},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 884, col: 94, offset: 24906},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 884, col: 97, offset: 24909},
							label: "rightKey",
							expr: &ruleRefExpr{
								pos:  position{line: 884, col: 106, offset: 24918},
								name: "JoinKey",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoinStyle",
			pos:  position{line: 903, col: 1, offset: 25153},
			expr: &choiceExpr{
				pos: position{line: 904, col: 5, offset: 25170},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 904, col: 5, offset: 25170},
						run: (*parser).callonSQLJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 904, col: 5, offset: 25170},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 904, col: 5, offset: 25170},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 904, col: 7, offset: 25172},
									label: "style",
									expr: &choiceExpr{
										pos: position{line: 904, col: 14, offset: 25179},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 904, col: 14, offset: 25179},
												name: "ANTI",
											},
											&ruleRefExpr{
												pos:  position{line: 904, col: 21, offset: 25186},
												name: "INNER",
											},
											&ruleRefExpr{
												pos:  position{line: 904, col: 29, offset: 25194},
												name: "LEFT",
											},
											&ruleRefExpr{
												pos:  position{line: 904, col: 36, offset: 25201},
												name: "RIGHT",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 905, col: 5, offset: 25234},
						run: (*parser).callonSQLJoinStyle11,
						expr: &litMatcher{
							pos:        position{line: 905, col: 5, offset: 25234},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLWhere",
			pos:  position{line: 907, col: 1, offset: 25262},
			expr: &actionExpr{
				pos: position{line: 908, col: 5, offset: 25275},
				run: (*parser).callonSQLWhere1,
				expr: &seqExpr{
					pos: position{line: 908, col: 5, offset: 25275},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 908, col: 5, offset: 25275},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 908, col: 7, offset: 25277},
							name: "WHERE",
						},
						&ruleRefExpr{
							pos:  position{line: 908, col: 13, offset: 25283},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 908, col: 15, offset: 25285},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 908, col: 20, offset: 25290},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLGroupBy",
			pos:  position{line: 910, col: 1, offset: 25326},
			expr: &actionExpr{
				pos: position{line: 911, col: 5, offset: 25341},
				run: (*parser).callonSQLGroupBy1,
				expr: &seqExpr{
					pos: position{line: 911, col: 5, offset: 25341},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 911, col: 5, offset: 25341},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 911, col: 7, offset: 25343},
							name: "GROUP",
						},
						&ruleRefExpr{
							pos:  position{line: 911, col: 13, offset: 25349},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 911, col: 15, offset: 25351},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 911, col: 18, offset: 25354},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 911, col: 20, offset: 25356},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 911, col: 28, offset: 25364},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLHaving",
			pos:  position{line: 913, col: 1, offset: 25400},
			expr: &actionExpr{
				pos: position{line: 914, col: 5, offset: 25414},
				run: (*parser).callonSQLHaving1,
				expr: &seqExpr{
					pos: position{line: 914, col: 5, offset: 25414},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 914, col: 5, offset: 25414},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 914, col: 7, offset: 25416},
							name: "HAVING",
						},
						&ruleRefExpr{
							pos:  position{line: 914, col: 14, offset: 25423},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 914, col: 16, offset: 25425},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 914, col: 21, offset: 25430},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrderBy",
			pos:  position{line: 916, col: 1, offset: 25466},
			expr: &actionExpr{
				pos: position{line: 917, col: 5, offset: 25481},
				run: (*parser).callonSQLOrderBy1,
				expr: &seqExpr{
					pos: position{line: 917, col: 5, offset: 25481},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 917, col: 5, offset: 25481},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 917, col: 7, offset: 25483},
							name: "ORDER",
						},
						&ruleRefExpr{
							pos:  position{line: 917, col: 13, offset: 25489},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 917, col: 15, offset: 25491},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 917, col: 18, offset: 25494},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 917, col: 20, offset: 25496},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 917, col: 25, offset: 25501},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 917, col: 31, offset: 25507},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 917, col: 37, offset: 25513},
								name: "SQLOrder",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrder",
			pos:  position{line: 921, col: 1, offset: 25623},
			expr: &choiceExpr{
				pos: position{line: 922, col: 5, offset: 25636},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 922, col: 5, offset: 25636},
						run: (*parser).callonSQLOrder2,
						expr: &seqExpr{
							pos: position{line: 922, col: 5, offset: 25636},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 922, col: 5, offset: 25636},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 922, col: 7, offset: 25638},
									label: "dir",
									expr: &choiceExpr{
										pos: position{line: 922, col: 12, offset: 25643},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 922, col: 12, offset: 25643},
												name: "ASC",
											},
											&ruleRefExpr{
												pos:  position{line: 922, col: 18, offset: 25649},
												name: "DESC",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 923, col: 5, offset: 25679},
						run: (*parser).callonSQLOrder9,
						expr: &litMatcher{
							pos:        position{line: 923, col: 5, offset: 25679},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLLimit",
			pos:  position{line: 925, col: 1, offset: 25705},
			expr: &choiceExpr{
				pos: position{line: 926, col: 5, offset: 25718},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 926, col: 5, offset: 25718},
						run: (*parser).callonSQLLimit2,
						expr: &seqExpr{
							pos: position{line: 926, col: 5, offset: 25718},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 926, col: 5, offset: 25718},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 926, col: 7, offset: 25720},
									name: "LIMIT",
								},
								&ruleRefExpr{
									pos:  position{line: 926, col: 13, offset: 25726},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 926, col: 15, offset: 25728},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 926, col: 21, offset: 25734},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 927, col: 5, offset: 25765},
						run: (*parser).callonSQLLimit9,
						expr: &litMatcher{
							pos:        position{line: 927, col: 5, offset: 25765},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SELECT",
			pos:  position{line: 929, col: 1, offset: 25787},
			expr: &actionExpr{
				pos: position{line: 929, col: 10, offset: 25796},
				run: (*parser).callonSELECT1,
				expr: &litMatcher{
					pos:        position{line: 929, col: 10, offset: 25796},
					val:        "select",
					ignoreCase: true,
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 930, col: 1, offset: 25831},
			expr: &actionExpr{
				pos: position{line: 930, col: 6, offset: 25836},
				run: (*parser).callonAS1,
				expr: &litMatcher{
					pos:        position{line: 930, col: 6, offset: 25836},
					val:        "as",
					ignoreCase: true,
				},
			},
		},
		{
			name: "FROM",
			pos:  position{line: 931, col: 1, offset: 25863},
			expr: &actionExpr{
				pos: position{line: 931, col: 8, offset: 25870},
				run: (*parser).callonFROM1,
				expr: &litMatcher{
					pos:        position{line: 931, col: 8, offset: 25870},
					val:        "from",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JOIN",
			pos:  position{line: 932, col: 1, offset: 25901},
			expr: &actionExpr{
				pos: position{line: 932, col: 8, offset: 25908},
				run: (*parser).callonJOIN1,
				expr: &litMatcher{
					pos:        position{line: 932, col: 8, offset: 25908},
					val:        "join",
					ignoreCase: true,
				},
			},
		},
		{
			name: "WHERE",
			pos:  position{line: 933, col: 1, offset: 25939},
			expr: &actionExpr{
				pos: position{line: 933, col: 9, offset: 25947},
				run: (*parser).callonWHERE1,
				expr: &litMatcher{
					pos:        position{line: 933, col: 9, offset: 25947},
					val:        "where",
					ignoreCase: true,
				},
			},
		},
		{
			name: "GROUP",
			pos:  position{line: 934, col: 1, offset: 25980},
			expr: &actionExpr{
				pos: position{line: 934, col: 9, offset: 25988},
				run: (*parser).callonGROUP1,
				expr: &litMatcher{
					pos:        position{line: 934, col: 9, offset: 25988},
					val:        "group",
					ignoreCase: true,
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 935, col: 1, offset: 26021},
			expr: &ruleRefExpr{
				pos:  position{line: 935, col: 6, offset: 26026},
				name: "ByToken",
			},
		},
		{
			name: "HAVING",
			pos:  position{line: 936, col: 1, offset: 26034},
			expr: &actionExpr{
				pos: position{line: 936, col: 10, offset: 26043},
				run: (*parser).callonHAVING1,
				expr: &litMatcher{
					pos:        position{line: 936, col: 10, offset: 26043},
					val:        "having",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ORDER",
			pos:  position{line: 937, col: 1, offset: 26078},
			expr: &actionExpr{
				pos: position{line: 937, col: 9, offset: 26086},
				run: (*parser).callonORDER1,
				expr: &litMatcher{
					pos:        position{line: 937, col: 9, offset: 26086},
					val:        "order",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ON",
			pos:  position{line: 938, col: 1, offset: 26119},
			expr: &actionExpr{
				pos: position{line: 938, col: 6, offset: 26124},
				run: (*parser).callonON1,
				expr: &litMatcher{
					pos:        position{line: 938, col: 6, offset: 26124},
					val:        "on",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LIMIT",
			pos:  position{line: 939, col: 1, offset: 26151},
			expr: &actionExpr{
				pos: position{line: 939, col: 9, offset: 26159},
				run: (*parser).callonLIMIT1,
				expr: &litMatcher{
					pos:        position{line: 939, col: 9, offset: 26159},
					val:        "limit",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ASC",
			pos:  position{line: 940, col: 1, offset: 26192},
			expr: &actionExpr{
				pos: position{line: 940, col: 7, offset: 26198},
				run: (*parser).callonASC1,
				expr: &litMatcher{
					pos:        position{line: 940, col: 7, offset: 26198},
					val:        "asc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "DESC",
			pos:  position{line: 941, col: 1, offset: 26227},
			expr: &actionExpr{
				pos: position{line: 941, col: 8, offset: 26234},
				run: (*parser).callonDESC1,
				expr: &litMatcher{
					pos:        position{line: 941, col: 8, offset: 26234},
					val:        "desc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ANTI",
			pos:  position{line: 942, col: 1, offset: 26265},
			expr: &actionExpr{
				pos: position{line: 942, col: 8, offset: 26272},
				run: (*parser).callonANTI1,
				expr: &litMatcher{
					pos:        position{line: 942, col: 8, offset: 26272},
					val:        "anti",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LEFT",
			pos:  position{line: 943, col: 1, offset: 26303},
			expr: &actionExpr{
				pos: position{line: 943, col: 8, offset: 26310},
				run: (*parser).callonLEFT1,
				expr: &litMatcher{
					pos:        position{line: 943, col: 8, offset: 26310},
					val:        "left",
					ignoreCase: true,
				},
			},
		},
		{
			name: "RIGHT",
			pos:  position{line: 944, col: 1, offset: 26341},
			expr: &actionExpr{
				pos: position{line: 944, col: 9, offset: 26349},
				run: (*parser).callonRIGHT1,
				expr: &litMatcher{
					pos:        position{line: 944, col: 9, offset: 26349},
					val:        "right",
					ignoreCase: true,
				},
			},
		},
		{
			name: "INNER",
			pos:  position{line: 945, col: 1, offset: 26382},
			expr: &actionExpr{
				pos: position{line: 945, col: 9, offset: 26390},
				run: (*parser).callonINNER1,
				expr: &litMatcher{
					pos:        position{line: 945, col: 9, offset: 26390},
					val:        "inner",
					ignoreCase: true,
				},
			},
		},
		{
			name: "SQLTokenSentinels",
			pos:  position{line: 947, col: 1, offset: 26424},
			expr: &choiceExpr{
				pos: position{line: 948, col: 5, offset: 26446},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 948, col: 5, offset: 26446},
						name: "SELECT",
					},
					&ruleRefExpr{
						pos:  position{line: 948, col: 14, offset: 26455},
						name: "AS",
					},
					&ruleRefExpr{
						pos:  position{line: 948, col: 19, offset: 26460},
						name: "FROM",
					},
					&ruleRefExpr{
						pos:  position{line: 948, col: 27, offset: 26468},
						name: "JOIN",
					},
					&ruleRefExpr{
						pos:  position{line: 948, col: 34, offset: 26475},
						name: "WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 948, col: 42, offset: 26483},
						name: "GROUP",
					},
					&ruleRefExpr{
						pos:  position{line: 948, col: 50, offset: 26491},
						name: "HAVING",
					},
					&ruleRefExpr{
						pos:  position{line: 948, col: 59, offset: 26500},
						name: "ORDER",
					},
					&ruleRefExpr{
						pos:  position{line: 948, col: 67, offset: 26508},
						name: "LIMIT",
					},
					&ruleRefExpr{
						pos:  position{line: 948, col: 75, offset: 26516},
						name: "ON",
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 952, col: 1, offset: 26542},
			expr: &choiceExpr{
				pos: position{line: 953, col: 5, offset: 26554},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 953, col: 5, offset: 26554},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 954, col: 5, offset: 26570},
						name: "TemplateLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 955, col: 5, offset: 26590},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 956, col: 5, offset: 26608},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 957, col: 5, offset: 26627},
						name: "BytesLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 958, col: 5, offset: 26644},
						name: "Duration",
					},
					&ruleRefExpr{
						pos:  position{line: 959, col: 5, offset: 26657},
						name: "Time",
					},
					&ruleRefExpr{
						pos:  position{line: 960, col: 5, offset: 26666},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 961, col: 5, offset: 26683},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 962, col: 5, offset: 26702},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 963, col: 5, offset: 26721},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 965, col: 1, offset: 26734},
			expr: &choiceExpr{
				pos: position{line: 966, col: 5, offset: 26752},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 966, col: 5, offset: 26752},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 966, col: 5, offset: 26752},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 966, col: 5, offset: 26752},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 966, col: 7, offset: 26754},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 966, col: 14, offset: 26761},
									expr: &ruleRefExpr{
										pos:  position{line: 966, col: 15, offset: 26762},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 969, col: 5, offset: 26877},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 969, col: 5, offset: 26877},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 969, col: 7, offset: 26879},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 973, col: 1, offset: 26983},
			expr: &choiceExpr{
				pos: position{line: 974, col: 5, offset: 27002},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 974, col: 5, offset: 27002},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 974, col: 5, offset: 27002},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 974, col: 5, offset: 27002},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 974, col: 7, offset: 27004},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 974, col: 11, offset: 27008},
									expr: &ruleRefExpr{
										pos:  position{line: 974, col: 12, offset: 27009},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 977, col: 5, offset: 27123},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 977, col: 5, offset: 27123},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 977, col: 7, offset: 27125},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 981, col: 1, offset: 27224},
			expr: &actionExpr{
				pos: position{line: 982, col: 5, offset: 27241},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 982, col: 5, offset: 27241},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 982, col: 7, offset: 27243},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 986, col: 1, offset: 27356},
			expr: &actionExpr{
				pos: position{line: 987, col: 5, offset: 27375},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 987, col: 5, offset: 27375},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 987, col: 7, offset: 27377},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 991, col: 1, offset: 27486},
			expr: &choiceExpr{
				pos: position{line: 992, col: 5, offset: 27505},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 992, col: 5, offset: 27505},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 992, col: 5, offset: 27505},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 993, col: 5, offset: 27618},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 993, col: 5, offset: 27618},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 995, col: 1, offset: 27729},
			expr: &actionExpr{
				pos: position{line: 996, col: 5, offset: 27745},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 996, col: 5, offset: 27745},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "BytesLiteral",
			pos:  position{line: 998, col: 1, offset: 27851},
			expr: &actionExpr{
				pos: position{line: 999, col: 5, offset: 27868},
				run: (*parser).callonBytesLiteral1,
				expr: &seqExpr{
					pos: position{line: 999, col: 5, offset: 27868},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 999, col: 5, offset: 27868},
							val:        "0x",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 999, col: 10, offset: 27873},
							expr: &ruleRefExpr{
								pos:  position{line: 999, col: 10, offset: 27873},
								name: "HexDigit",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeLiteral",
			pos:  position{line: 1003, col: 1, offset: 27988},
			expr: &actionExpr{
				pos: position{line: 1004, col: 5, offset: 28004},
				run: (*parser).callonTypeLiteral1,
				expr: &seqExpr{
					pos: position{line: 1004, col: 5, offset: 28004},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1004, col: 5, offset: 28004},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1004, col: 9, offset: 28008},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1004, col: 13, offset: 28012},
								name: "Type",
							},
						},
						&litMatcher{
							pos:        position{line: 1004, col: 18, offset: 28017},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "CastType",
			pos:  position{line: 1008, col: 1, offset: 28106},
			expr: &choiceExpr{
				pos: position{line: 1009, col: 5, offset: 28119},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1009, col: 5, offset: 28119},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1010, col: 5, offset: 28135},
						name: "PrimitiveType",
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 1012, col: 1, offset: 28150},
			expr: &choiceExpr{
				pos: position{line: 1013, col: 5, offset: 28159},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1013, col: 5, offset: 28159},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1014, col: 5, offset: 28175},
						name: "AmbiguousType",
					},
					&ruleRefExpr{
						pos:  position{line: 1015, col: 5, offset: 28193},
						name: "ComplexType",
					},
				},
			},
		},
		{
			name: "AmbiguousType",
			pos:  position{line: 1017, col: 1, offset: 28206},
			expr: &choiceExpr{
				pos: position{line: 1018, col: 5, offset: 28224},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1018, col: 5, offset: 28224},
						run: (*parser).callonAmbiguousType2,
						expr: &seqExpr{
							pos: position{line: 1018, col: 5, offset: 28224},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1018, col: 5, offset: 28224},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1018, col: 10, offset: 28229},
										name: "PrimitiveType",
									},
								},
								&notExpr{
									pos: position{line: 1018, col: 24, offset: 28243},
									expr: &ruleRefExpr{
										pos:  position{line: 1018, col: 25, offset: 28244},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1019, col: 5, offset: 28284},
						run: (*parser).callonAmbiguousType8,
						expr: &seqExpr{
							pos: position{line: 1019, col: 5, offset: 28284},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1019, col: 5, offset: 28284},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1019, col: 10, offset: 28289},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1019, col: 25, offset: 28304},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1019, col: 28, offset: 28307},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1019, col: 32, offset: 28311},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1019, col: 35, offset: 28314},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1019, col: 39, offset: 28318},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1019, col: 42, offset: 28321},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1019, col: 46, offset: 28325},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1019, col: 51, offset: 28330},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1019, col: 54, offset: 28333},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1022, col: 5, offset: 28434},
						run: (*parser).callonAmbiguousType21,
						expr: &labeledExpr{
							pos:   position{line: 1022, col: 5, offset: 28434},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1022, col: 10, offset: 28439},
								name: "IdentifierName",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1025, col: 5, offset: 28541},
						run: (*parser).callonAmbiguousType24,
						expr: &seqExpr{
							pos: position{line: 1025, col: 5, offset: 28541},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1025, col: 5, offset: 28541},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1025, col: 9, offset: 28545},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1025, col: 12, offset: 28548},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 1025, col: 14, offset: 28550},
										name: "TypeUnion",
									},
								},
								&litMatcher{
									pos:        position{line: 1025, col: 25, offset: 28561},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeUnion",
			pos:  position{line: 1027, col: 1, offset: 28584},
			expr: &actionExpr{
				pos: position{line: 1028, col: 5, offset: 28598},
				run: (*parser).callonTypeUnion1,
				expr: &labeledExpr{
					pos:   position{line: 1028, col: 5, offset: 28598},
					label: "types",
					expr: &ruleRefExpr{
						pos:  position{line: 1028, col: 11, offset: 28604},
						name: "TypeList",
					},
				},
			},
		},
		{
			name: "TypeList",
			pos:  position{line: 1032, col: 1, offset: 28700},
			expr: &actionExpr{
				pos: position{line: 1033, col: 5, offset: 28713},
				run: (*parser).callonTypeList1,
				expr: &seqExpr{
					pos: position{line: 1033, col: 5, offset: 28713},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1033, col: 5, offset: 28713},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1033, col: 11, offset: 28719},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 1033, col: 16, offset: 28724},
							label: "rest",
							expr: &oneOrMoreExpr{
								pos: position{line: 1033, col: 21, offset: 28729},
								expr: &ruleRefExpr{
									pos:  position{line: 1033, col: 21, offset: 28729},
									name: "TypeListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeListTail",
			pos:  position{line: 1037, col: 1, offset: 28823},
			expr: &actionExpr{
				pos: position{line: 1037, col: 16, offset: 28838},
				run: (*parser).callonTypeListTail1,
				expr: &seqExpr{
					pos: position{line: 1037, col: 16, offset: 28838},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1037, col: 16, offset: 28838},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1037, col: 19, offset: 28841},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1037, col: 23, offset: 28845},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1037, col: 26, offset: 28848},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1037, col: 30, offset: 28852},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexType",
			pos:  position{line: 1039, col: 1, offset: 28878},
			expr: &choiceExpr{
				pos: position{line: 1040, col: 5, offset: 28894},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1040, col: 5, offset: 28894},
						run: (*parser).callonComplexType2,
						expr: &seqExpr{
							pos: position{line: 1040, col: 5, offset: 28894},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1040, col: 5, offset: 28894},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1040, col: 9, offset: 28898},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1040, col: 12, offset: 28901},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 1040, col: 19, offset: 28908},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1040, col: 33, offset: 28922},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1040, col: 36, offset: 28925},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1043, col: 5, offset: 29020},
						run: (*parser).callonComplexType10,
						expr: &seqExpr{
							pos: position{line: 1043, col: 5, offset: 29020},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1043, col: 5, offset: 29020},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1043, col: 9, offset: 29024},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1043, col: 12, offset: 29027},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1043, col: 16, offset: 29031},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1043, col: 21, offset: 29036},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1043, col: 24, offset: 29039},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1046, col: 5, offset: 29128},
						run: (*parser).callonComplexType18,
						expr: &seqExpr{
							pos: position{line: 1046, col: 5, offset: 29128},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1046, col: 5, offset: 29128},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1046, col: 10, offset: 29133},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1046, col: 14, offset: 29137},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1046, col: 18, offset: 29141},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1046, col: 23, offset: 29146},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1046, col: 26, offset: 29149},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1049, col: 5, offset: 29237},
						run: (*parser).callonComplexType26,
						expr: &seqExpr{
							pos: position{line: 1049, col: 5, offset: 29237},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1049, col: 5, offset: 29237},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1049, col: 10, offset: 29242},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1049, col: 13, offset: 29245},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 1049, col: 21, offset: 29253},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1049, col: 26, offset: 29258},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1049, col: 29, offset: 29261},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1049, col: 33, offset: 29265},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1049, col: 36, offset: 29268},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 1049, col: 44, offset: 29276},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1049, col: 49, offset: 29281},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1049, col: 52, offset: 29284},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateLiteral",
			pos:  position{line: 1053, col: 1, offset: 29398},
			expr: &actionExpr{
				pos: position{line: 1054, col: 5, offset: 29418},
				run: (*parser).callonTemplateLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1054, col: 5, offset: 29418},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1054, col: 7, offset: 29420},
						name: "TemplateLiteralParts",
					},
				},
			},
		},
		{
			name: "TemplateLiteralParts",
			pos:  position{line: 1061, col: 1, offset: 29615},
			expr: &choiceExpr{
				pos: position{line: 1062, col: 5, offset: 29640},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1062, col: 5, offset: 29640},
						run: (*parser).callonTemplateLiteralParts2,
						expr: &seqExpr{
							pos: position{line: 1062, col: 5, offset: 29640},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1062, col: 5, offset: 29640},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1062, col: 9, offset: 29644},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1062, col: 11, offset: 29646},
										expr: &ruleRefExpr{
											pos:  position{line: 1062, col: 11, offset: 29646},
											name: "TemplateDoubleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1062, col: 37, offset: 29672},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1063, col: 5, offset: 29698},
						run: (*parser).callonTemplateLiteralParts9,
						expr: &seqExpr{
							pos: position{line: 1063, col: 5, offset: 29698},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1063, col: 5, offset: 29698},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1063, col: 9, offset: 29702},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1063, col: 11, offset: 29704},
										expr: &ruleRefExpr{
											pos:  position{line: 1063, col: 11, offset: 29704},
											name: "TemplateSingleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1063, col: 37, offset: 29730},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedPart",
			pos:  position{line: 1065, col: 1, offset: 29753},
			expr: &choiceExpr{
				pos: position{line: 1066, col: 5, offset: 29782},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1066, col: 5, offset: 29782},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 1067, col: 5, offset: 29799},
						run: (*parser).callonTemplateDoubleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 1067, col: 5, offset: 29799},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1067, col: 7, offset: 29801},
								expr: &ruleRefExpr{
									pos:  position{line: 1067, col: 7, offset: 29801},
									name: "TemplateDoubleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedChar",
			pos:  position{line: 1071, col: 1, offset: 29938},
			expr: &choiceExpr{
				pos: position{line: 1072, col: 5, offset: 29967},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1072, col: 5, offset: 29967},
						run: (*parser).callonTemplateDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1072, col: 5, offset: 29967},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1072, col: 5, offset: 29967},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1072, col: 10, offset: 29972},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1072, col: 12, offset: 29974},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1073, col: 5, offset: 30001},
						run: (*parser).callonTemplateDoubleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1073, col: 5, offset: 30001},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1073, col: 5, offset: 30001},
									expr: &litMatcher{
										pos:        position{line: 1073, col: 8, offset: 30004},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1073, col: 15, offset: 30011},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1073, col: 17, offset: 30013},
										name: "DoubleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedPart",
			pos:  position{line: 1075, col: 1, offset: 30049},
			expr: &choiceExpr{
				pos: position{line: 1076, col: 5, offset: 30078},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1076, col: 5, offset: 30078},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 1077, col: 5, offset: 30095},
						run: (*parser).callonTemplateSingleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 1077, col: 5, offset: 30095},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1077, col: 7, offset: 30097},
								expr: &ruleRefExpr{
									pos:  position{line: 1077, col: 7, offset: 30097},
									name: "TemplateSingleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedChar",
			pos:  position{line: 1081, col: 1, offset: 30234},
			expr: &choiceExpr{
				pos: position{line: 1082, col: 5, offset: 30263},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1082, col: 5, offset: 30263},
						run: (*parser).callonTemplateSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1082, col: 5, offset: 30263},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1082, col: 5, offset: 30263},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1082, col: 10, offset: 30268},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1082, col: 12, offset: 30270},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1083, col: 5, offset: 30297},
						run: (*parser).callonTemplateSingleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1083, col: 5, offset: 30297},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1083, col: 5, offset: 30297},
									expr: &litMatcher{
										pos:        position{line: 1083, col: 8, offset: 30300},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1083, col: 15, offset: 30307},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1083, col: 17, offset: 30309},
										name: "SingleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateExpr",
			pos:  position{line: 1085, col: 1, offset: 30345},
			expr: &actionExpr{
				pos: position{line: 1086, col: 5, offset: 30362},
				run: (*parser).callonTemplateExpr1,
				expr: &seqExpr{
					pos: position{line: 1086, col: 5, offset: 30362},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1086, col: 5, offset: 30362},
							val:        "${",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1086, col: 10, offset: 30367},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1086, col: 13, offset: 30370},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 1086, col: 15, offset: 30372},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1086, col: 20, offset: 30377},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1086, col: 23, offset: 30380},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 1088, col: 1, offset: 30403},
			expr: &actionExpr{
				pos: position{line: 1089, col: 5, offset: 30421},
				run: (*parser).callonPrimitiveType1,
				expr: &choiceExpr{
					pos: position{line: 1089, col: 9, offset: 30425},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 1089, col: 9, offset: 30425},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1089, col: 19, offset: 30435},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1089, col: 30, offset: 30446},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1089, col: 41, offset: 30457},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1090, col: 9, offset: 30474},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1090, col: 18, offset: 30483},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1090, col: 28, offset: 30493},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1090, col: 38, offset: 30503},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1091, col: 9, offset: 30519},
							val:        "float32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1091, col: 21, offset: 30531},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1092, col: 9, offset: 30549},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1092, col: 18, offset: 30558},
							val:        "string",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1093, col: 9, offset: 30575},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1093, col: 22, offset: 30588},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1094, col: 9, offset: 30603},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1095, col: 9, offset: 30619},
							val:        "bstring",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1096, col: 9, offset: 30637},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1096, col: 16, offset: 30644},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1097, col: 9, offset: 30658},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1097, col: 18, offset: 30667},
							val:        "error",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1097, col: 28, offset: 30677},
							val:        "null",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldList",
			pos:  position{line: 1101, col: 1, offset: 30793},
			expr: &actionExpr{
				pos: position{line: 1102, col: 5, offset: 30811},
				run: (*parser).callonTypeFieldList1,
				expr: &seqExpr{
					pos: position{line: 1102, col: 5, offset: 30811},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1102, col: 5, offset: 30811},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1102, col: 11, offset: 30817},
								name: "TypeField",
							},
						},
						&labeledExpr{
							pos:   position{line: 1102, col: 21, offset: 30827},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1102, col: 26, offset: 30832},
								expr: &ruleRefExpr{
									pos:  position{line: 1102, col: 26, offset: 30832},
									name: "TypeFieldListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTail",
			pos:  position{line: 1106, col: 1, offset: 30931},
			expr: &actionExpr{
				pos: position{line: 1106, col: 21, offset: 30951},
				run: (*parser).callonTypeFieldListTail1,
				expr: &seqExpr{
					pos: position{line: 1106, col: 21, offset: 30951},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1106, col: 21, offset: 30951},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1106, col: 24, offset: 30954},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1106, col: 28, offset: 30958},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1106, col: 31, offset: 30961},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1106, col: 35, offset: 30965},
								name: "TypeField",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeField",
			pos:  position{line: 1108, col: 1, offset: 30996},
			expr: &actionExpr{
				pos: position{line: 1109, col: 5, offset: 31010},
				run: (*parser).callonTypeField1,
				expr: &seqExpr{
					pos: position{line: 1109, col: 5, offset: 31010},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1109, col: 5, offset: 31010},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1109, col: 10, offset: 31015},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1109, col: 20, offset: 31025},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1109, col: 23, offset: 31028},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1109, col: 27, offset: 31032},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1109, col: 30, offset: 31035},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1109, col: 34, offset: 31039},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 1113, col: 1, offset: 31121},
			expr: &choiceExpr{
				pos: position{line: 1114, col: 5, offset: 31135},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1114, col: 5, offset: 31135},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 1115, col: 5, offset: 31154},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "EqualityToken",
			pos:  position{line: 1117, col: 1, offset: 31168},
			expr: &choiceExpr{
				pos: position{line: 1118, col: 5, offset: 31186},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1118, col: 5, offset: 31186},
						name: "EqualityOperator",
					},
					&ruleRefExpr{
						pos:  position{line: 1118, col: 24, offset: 31205},
						name: "RelativeOperator",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 1120, col: 1, offset: 31223},
			expr: &actionExpr{
				pos: position{line: 1120, col: 12, offset: 31234},
				run: (*parser).callonAndToken1,
				expr: &seqExpr{
					pos: position{line: 1120, col: 12, offset: 31234},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1120, col: 12, offset: 31234},
							val:        "and",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1120, col: 19, offset: 31241},
							expr: &ruleRefExpr{
								pos:  position{line: 1120, col: 20, offset: 31242},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 1121, col: 1, offset: 31279},
			expr: &actionExpr{
				pos: position{line: 1121, col: 11, offset: 31289},
				run: (*parser).callonOrToken1,
				expr: &seqExpr{
					pos: position{line: 1121, col: 11, offset: 31289},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1121, col: 11, offset: 31289},
							val:        "or",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1121, col: 17, offset: 31295},
							expr: &ruleRefExpr{
								pos:  position{line: 1121, col: 18, offset: 31296},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 1122, col: 1, offset: 31332},
			expr: &actionExpr{
				pos: position{line: 1122, col: 11, offset: 31342},
				run: (*parser).callonInToken1,
				expr: &seqExpr{
					pos: position{line: 1122, col: 11, offset: 31342},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1122, col: 11, offset: 31342},
							val:        "in",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1122, col: 17, offset: 31348},
							expr: &ruleRefExpr{
								pos:  position{line: 1122, col: 18, offset: 31349},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 1123, col: 1, offset: 31385},
			expr: &actionExpr{
				pos: position{line: 1123, col: 12, offset: 31396},
				run: (*parser).callonNotToken1,
				expr: &seqExpr{
					pos: position{line: 1123, col: 12, offset: 31396},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1123, col: 12, offset: 31396},
							val:        "not",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1123, col: 19, offset: 31403},
							expr: &ruleRefExpr{
								pos:  position{line: 1123, col: 20, offset: 31404},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 1124, col: 1, offset: 31441},
			expr: &actionExpr{
				pos: position{line: 1124, col: 11, offset: 31451},
				run: (*parser).callonByToken1,
				expr: &seqExpr{
					pos: position{line: 1124, col: 11, offset: 31451},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1124, col: 11, offset: 31451},
							val:        "by",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1124, col: 17, offset: 31457},
							expr: &ruleRefExpr{
								pos:  position{line: 1124, col: 18, offset: 31458},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 1126, col: 1, offset: 31495},
			expr: &charClassMatcher{
				pos:        position{line: 1126, col: 19, offset: 31513},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 1128, col: 1, offset: 31525},
			expr: &choiceExpr{
				pos: position{line: 1128, col: 18, offset: 31542},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1128, col: 18, offset: 31542},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 1128, col: 36, offset: 31560},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 1130, col: 1, offset: 31567},
			expr: &actionExpr{
				pos: position{line: 1131, col: 5, offset: 31582},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 1131, col: 5, offset: 31582},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 1131, col: 8, offset: 31585},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 1133, col: 1, offset: 31666},
			expr: &choiceExpr{
				pos: position{line: 1134, col: 5, offset: 31685},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1134, col: 5, offset: 31685},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 1134, col: 5, offset: 31685},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1134, col: 5, offset: 31685},
									expr: &seqExpr{
										pos: position{line: 1134, col: 7, offset: 31687},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1134, col: 7, offset: 31687},
												name: "IDGuard",
											},
											&notExpr{
												pos: position{line: 1134, col: 15, offset: 31695},
												expr: &ruleRefExpr{
													pos:  position{line: 1134, col: 16, offset: 31696},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1134, col: 32, offset: 31712},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1134, col: 48, offset: 31728},
									expr: &ruleRefExpr{
										pos:  position{line: 1134, col: 48, offset: 31728},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1135, col: 5, offset: 31780},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 1135, col: 5, offset: 31780},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1136, col: 5, offset: 31819},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 1136, col: 5, offset: 31819},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1136, col: 5, offset: 31819},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1136, col: 10, offset: 31824},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1136, col: 13, offset: 31827},
										name: "IDGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1138, col: 5, offset: 31918},
						run: (*parser).callonIdentifierName19,
						expr: &litMatcher{
							pos:        position{line: 1138, col: 5, offset: 31918},
							val:        "type",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1139, col: 5, offset: 31960},
						run: (*parser).callonIdentifierName21,
						expr: &seqExpr{
							pos: position{line: 1139, col: 5, offset: 31960},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1139, col: 5, offset: 31960},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1139, col: 8, offset: 31963},
										name: "SQLTokenSentinels",
									},
								},
								&andExpr{
									pos: position{line: 1139, col: 26, offset: 31981},
									expr: &seqExpr{
										pos: position{line: 1139, col: 28, offset: 31983},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1139, col: 28, offset: 31983},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1139, col: 31, offset: 31986},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IDGuard",
			pos:  position{line: 1141, col: 1, offset: 32011},
			expr: &choiceExpr{
				pos: position{line: 1142, col: 5, offset: 32023},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1142, col: 5, offset: 32023},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1143, col: 5, offset: 32042},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "Time",
			pos:  position{line: 1145, col: 1, offset: 32055},
			expr: &actionExpr{
				pos: position{line: 1146, col: 5, offset: 32064},
				run: (*parser).callonTime1,
				expr: &seqExpr{
					pos: position{line: 1146, col: 5, offset: 32064},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1146, col: 5, offset: 32064},
							name: "FullDate",
						},
						&litMatcher{
							pos:        position{line: 1146, col: 14, offset: 32073},
							val:        "T",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1146, col: 18, offset: 32077},
							name: "FullTime",
						},
					},
				},
			},
		},
		{
			name: "FullDate",
			pos:  position{line: 1150, col: 1, offset: 32197},
			expr: &seqExpr{
				pos: position{line: 1150, col: 12, offset: 32208},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1150, col: 12, offset: 32208},
						name: "D4",
					},
					&litMatcher{
						pos:        position{line: 1150, col: 15, offset: 32211},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1150, col: 19, offset: 32215},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1150, col: 22, offset: 32218},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1150, col: 26, offset: 32222},
						name: "D2",
					},
				},
			},
		},
		{
			name: "D4",
			pos:  position{line: 1152, col: 1, offset: 32226},
			expr: &seqExpr{
				pos: position{line: 1152, col: 6, offset: 32231},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1152, col: 6, offset: 32231},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1152, col: 11, offset: 32236},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1152, col: 16, offset: 32241},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1152, col: 21, offset: 32246},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "D2",
			pos:  position{line: 1153, col: 1, offset: 32252},
			expr: &seqExpr{
				pos: position{line: 1153, col: 6, offset: 32257},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1153, col: 6, offset: 32257},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1153, col: 11, offset: 32262},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "FullTime",
			pos:  position{line: 1155, col: 1, offset: 32269},
			expr: &seqExpr{
				pos: position{line: 1155, col: 12, offset: 32280},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1155, col: 12, offset: 32280},
						name: "PartialTime",
					},
					&ruleRefExpr{
						pos:  position{line: 1155, col: 24, offset: 32292},
						name: "TimeOffset",
					},
				},
			},
		},
		{
			name: "PartialTime",
			pos:  position{line: 1157, col: 1, offset: 32304},
			expr: &seqExpr{
				pos: position{line: 1157, col: 15, offset: 32318},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1157, col: 15, offset: 32318},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1157, col: 18, offset: 32321},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1157, col: 22, offset: 32325},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1157, col: 25, offset: 32328},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1157, col: 29, offset: 32332},
						name: "D2",
					},
					&zeroOrOneExpr{
						pos: position{line: 1157, col: 32, offset: 32335},
						expr: &seqExpr{
							pos: position{line: 1157, col: 33, offset: 32336},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1157, col: 33, offset: 32336},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1157, col: 37, offset: 32340},
									expr: &charClassMatcher{
										pos:        position{line: 1157, col: 37, offset: 32340},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeOffset",
			pos:  position{line: 1159, col: 1, offset: 32350},
			expr: &choiceExpr{
				pos: position{line: 1160, col: 5, offset: 32365},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1160, col: 5, offset: 32365},
						val:        "Z",
						ignoreCase: false,
					},
					&seqExpr{
						pos: position{line: 1161, col: 5, offset: 32373},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 1161, col: 6, offset: 32374},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1161, col: 6, offset: 32374},
										val:        "+",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 1161, col: 12, offset: 32380},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1161, col: 17, offset: 32385},
								name: "D2",
							},
							&litMatcher{
								pos:        position{line: 1161, col: 20, offset: 32388},
								val:        ":",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 1161, col: 24, offset: 32392},
								name: "D2",
							},
							&zeroOrOneExpr{
								pos: position{line: 1161, col: 27, offset: 32395},
								expr: &seqExpr{
									pos: position{line: 1161, col: 28, offset: 32396},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1161, col: 28, offset: 32396},
											val:        ".",
											ignoreCase: false,
										},
										&oneOrMoreExpr{
											pos: position{line: 1161, col: 32, offset: 32400},
											expr: &charClassMatcher{
												pos:        position{line: 1161, col: 32, offset: 32400},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 1163, col: 1, offset: 32410},
			expr: &actionExpr{
				pos: position{line: 1164, col: 5, offset: 32423},
				run: (*parser).callonDuration1,
				expr: &seqExpr{
					pos: position{line: 1164, col: 5, offset: 32423},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1164, col: 5, offset: 32423},
							expr: &litMatcher{
								pos:        position{line: 1164, col: 5, offset: 32423},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1164, col: 10, offset: 32428},
							expr: &seqExpr{
								pos: position{line: 1164, col: 11, offset: 32429},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1164, col: 11, offset: 32429},
										name: "Decimal",
									},
									&ruleRefExpr{
										pos:  position{line: 1164, col: 19, offset: 32437},
										name: "TimeUnit",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Decimal",
			pos:  position{line: 1168, col: 1, offset: 32563},
			expr: &seqExpr{
				pos: position{line: 1168, col: 11, offset: 32573},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1168, col: 11, offset: 32573},
						name: "UInt",
					},
					&zeroOrOneExpr{
						pos: position{line: 1168, col: 16, offset: 32578},
						expr: &seqExpr{
							pos: position{line: 1168, col: 17, offset: 32579},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1168, col: 17, offset: 32579},
									val:        ".",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1168, col: 21, offset: 32583},
									name: "UInt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeUnit",
			pos:  position{line: 1170, col: 1, offset: 32591},
			expr: &choiceExpr{
				pos: position{line: 1171, col: 5, offset: 32604},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1171, col: 5, offset: 32604},
						val:        "ns",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1172, col: 5, offset: 32614},
						val:        "us",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1173, col: 5, offset: 32624},
						val:        "ms",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1174, col: 5, offset: 32634},
						val:        "s",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1175, col: 5, offset: 32643},
						val:        "m",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1176, col: 5, offset: 32652},
						val:        "h",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1177, col: 5, offset: 32661},
						val:        "d",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1178, col: 5, offset: 32670},
						val:        "w",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1179, col: 5, offset: 32679},
						val:        "y",
						ignoreCase: true,
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 1181, col: 1, offset: 32685},
			expr: &actionExpr{
				pos: position{line: 1182, col: 5, offset: 32692},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 1182, col: 5, offset: 32692},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1182, col: 5, offset: 32692},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1182, col: 10, offset: 32697},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1182, col: 14, offset: 32701},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1182, col: 19, offset: 32706},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1182, col: 23, offset: 32710},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1182, col: 28, offset: 32715},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1182, col: 32, offset: 32719},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 1184, col: 1, offset: 32756},
			expr: &actionExpr{
				pos: position{line: 1185, col: 5, offset: 32764},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 1185, col: 5, offset: 32764},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1185, col: 5, offset: 32764},
							expr: &seqExpr{
								pos: position{line: 1185, col: 8, offset: 32767},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1185, col: 8, offset: 32767},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 1185, col: 12, offset: 32771},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 1185, col: 16, offset: 32775},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 1185, col: 20, offset: 32779},
										expr: &choiceExpr{
											pos: position{line: 1185, col: 22, offset: 32781},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1185, col: 22, offset: 32781},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 1185, col: 33, offset: 32792},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1185, col: 39, offset: 32798},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1185, col: 41, offset: 32800},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 1189, col: 1, offset: 32964},
			expr: &choiceExpr{
				pos: position{line: 1190, col: 5, offset: 32982},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1190, col: 5, offset: 32982},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 1190, col: 5, offset: 32982},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1190, col: 5, offset: 32982},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 1190, col: 7, offset: 32984},
										expr: &ruleRefExpr{
											pos:  position{line: 1190, col: 7, offset: 32984},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1190, col: 17, offset: 32994},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1190, col: 19, offset: 32996},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1193, col: 5, offset: 33060},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 1193, col: 5, offset: 33060},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1193, col: 5, offset: 33060},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1193, col: 7, offset: 33062},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1193, col: 11, offset: 33066},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1193, col: 13, offset: 33068},
										expr: &ruleRefExpr{
											pos:  position{line: 1193, col: 13, offset: 33068},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1193, col: 23, offset: 33078},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1193, col: 28, offset: 33083},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1193, col: 30, offset: 33085},
										expr: &ruleRefExpr{
											pos:  position{line: 1193, col: 30, offset: 33085},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1193, col: 40, offset: 33095},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 1193, col: 42, offset: 33097},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1196, col: 5, offset: 33196},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 1196, col: 5, offset: 33196},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1196, col: 5, offset: 33196},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1196, col: 10, offset: 33201},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1196, col: 12, offset: 33203},
										expr: &ruleRefExpr{
											pos:  position{line: 1196, col: 12, offset: 33203},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1196, col: 22, offset: 33213},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1196, col: 24, offset: 33215},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1199, col: 5, offset: 33286},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 1199, col: 5, offset: 33286},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1199, col: 5, offset: 33286},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1199, col: 7, offset: 33288},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1199, col: 11, offset: 33292},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1199, col: 13, offset: 33294},
										expr: &ruleRefExpr{
											pos:  position{line: 1199, col: 13, offset: 33294},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1199, col: 23, offset: 33304},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1202, col: 5, offset: 33372},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 1202, col: 5, offset: 33372},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 1206, col: 1, offset: 33409},
			expr: &choiceExpr{
				pos: position{line: 1207, col: 5, offset: 33421},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1207, col: 5, offset: 33421},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 1208, col: 5, offset: 33428},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 1210, col: 1, offset: 33433},
			expr: &actionExpr{
				pos: position{line: 1210, col: 12, offset: 33444},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 1210, col: 12, offset: 33444},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1210, col: 12, offset: 33444},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1210, col: 16, offset: 33448},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1210, col: 18, offset: 33450},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 1212, col: 1, offset: 33488},
			expr: &actionExpr{
				pos: position{line: 1212, col: 12, offset: 33499},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 1212, col: 12, offset: 33499},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1212, col: 12, offset: 33499},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1212, col: 14, offset: 33501},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 1212, col: 18, offset: 33505},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 1214, col: 1, offset: 33543},
			expr: &actionExpr{
				pos: position{line: 1215, col: 5, offset: 33554},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 1215, col: 5, offset: 33554},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1215, col: 5, offset: 33554},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1215, col: 7, offset: 33556},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 1215, col: 10, offset: 33559},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1215, col: 14, offset: 33563},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1215, col: 16, offset: 33565},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 1219, col: 1, offset: 33638},
			expr: &actionExpr{
				pos: position{line: 1220, col: 5, offset: 33649},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 1220, col: 5, offset: 33649},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1220, col: 5, offset: 33649},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1220, col: 7, offset: 33651},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 1220, col: 11, offset: 33655},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1220, col: 15, offset: 33659},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1220, col: 17, offset: 33661},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 1224, col: 1, offset: 33724},
			expr: &actionExpr{
				pos: position{line: 1225, col: 4, offset: 33732},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 1225, col: 4, offset: 33732},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 1225, col: 6, offset: 33734},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 1227, col: 1, offset: 33774},
			expr: &choiceExpr{
				pos: position{line: 1228, col: 5, offset: 33788},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1228, col: 5, offset: 33788},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 1229, col: 5, offset: 33803},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 1231, col: 1, offset: 33819},
			expr: &actionExpr{
				pos: position{line: 1231, col: 14, offset: 33832},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1231, col: 14, offset: 33832},
					expr: &charClassMatcher{
						pos:        position{line: 1231, col: 14, offset: 33832},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 1233, col: 1, offset: 33871},
			expr: &actionExpr{
				pos: position{line: 1234, col: 5, offset: 33890},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 1234, col: 5, offset: 33890},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1234, col: 5, offset: 33890},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1234, col: 9, offset: 33894},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 1236, col: 1, offset: 33937},
			expr: &choiceExpr{
				pos: position{line: 1237, col: 5, offset: 33953},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1237, col: 5, offset: 33953},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 1237, col: 5, offset: 33953},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1237, col: 5, offset: 33953},
									expr: &litMatcher{
										pos:        position{line: 1237, col: 5, offset: 33953},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1237, col: 10, offset: 33958},
									expr: &charClassMatcher{
										pos:        position{line: 1237, col: 10, offset: 33958},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 1237, col: 17, offset: 33965},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1237, col: 21, offset: 33969},
									expr: &charClassMatcher{
										pos:        position{line: 1237, col: 21, offset: 33969},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1237, col: 28, offset: 33976},
									expr: &ruleRefExpr{
										pos:  position{line: 1237, col: 28, offset: 33976},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1240, col: 5, offset: 34035},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 1240, col: 5, offset: 34035},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1240, col: 5, offset: 34035},
									expr: &litMatcher{
										pos:        position{line: 1240, col: 5, offset: 34035},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1240, col: 10, offset: 34040},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1240, col: 14, offset: 34044},
									expr: &charClassMatcher{
										pos:        position{line: 1240, col: 14, offset: 34044},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1240, col: 21, offset: 34051},
									expr: &ruleRefExpr{
										pos:  position{line: 1240, col: 21, offset: 34051},
										name: "ExponentPart",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 1244, col: 1, offset: 34107},
			expr: &seqExpr{
				pos: position{line: 1244, col: 16, offset: 34122},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1244, col: 16, offset: 34122},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 1244, col: 21, offset: 34127},
						expr: &charClassMatcher{
							pos:        position{line: 1244, col: 21, offset: 34127},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1244, col: 27, offset: 34133},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 1246, col: 1, offset: 34145},
			expr: &actionExpr{
				pos: position{line: 1246, col: 7, offset: 34151},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1246, col: 7, offset: 34151},
					expr: &ruleRefExpr{
						pos:  position{line: 1246, col: 7, offset: 34151},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 1248, col: 1, offset: 34193},
			expr: &charClassMatcher{
				pos:        position{line: 1248, col: 12, offset: 34204},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1250, col: 1, offset: 34217},
			expr: &choiceExpr{
				pos: position{line: 1251, col: 5, offset: 34234},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1251, col: 5, offset: 34234},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 1251, col: 5, offset: 34234},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1251, col: 5, offset: 34234},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1251, col: 9, offset: 34238},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1251, col: 11, offset: 34240},
										expr: &ruleRefExpr{
											pos:  position{line: 1251, col: 11, offset: 34240},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1251, col: 29, offset: 34258},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1252, col: 5, offset: 34295},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 1252, col: 5, offset: 34295},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1252, col: 5, offset: 34295},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1252, col: 9, offset: 34299},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1252, col: 11, offset: 34301},
										expr: &ruleRefExpr{
											pos:  position{line: 1252, col: 11, offset: 34301},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1252, col: 29, offset: 34319},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 1254, col: 1, offset: 34353},
			expr: &choiceExpr{
				pos: position{line: 1255, col: 5, offset: 34374},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1255, col: 5, offset: 34374},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1255, col: 5, offset: 34374},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1255, col: 5, offset: 34374},
									expr: &choiceExpr{
										pos: position{line: 1255, col: 7, offset: 34376},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1255, col: 7, offset: 34376},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1255, col: 13, offset: 34382},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1255, col: 26, offset: 34395,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1256, col: 5, offset: 34432},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1256, col: 5, offset: 34432},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1256, col: 5, offset: 34432},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1256, col: 10, offset: 34437},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1256, col: 12, offset: 34439},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 1258, col: 1, offset: 34473},
			expr: &actionExpr{
				pos: position{line: 1259, col: 5, offset: 34485},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 1259, col: 5, offset: 34485},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1259, col: 5, offset: 34485},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1259, col: 10, offset: 34490},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1259, col: 23, offset: 34503},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1259, col: 28, offset: 34508},
								expr: &ruleRefExpr{
									pos:  position{line: 1259, col: 28, offset: 34508},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 1261, col: 1, offset: 34570},
			expr: &choiceExpr{
				pos: position{line: 1262, col: 5, offset: 34587},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1262, col: 5, offset: 34587},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1263, col: 5, offset: 34604},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordChars",
			pos:  position{line: 1265, col: 1, offset: 34616},
			expr: &actionExpr{
				pos: position{line: 1265, col: 16, offset: 34631},
				run: (*parser).callonKeyWordChars1,
				expr: &charClassMatcher{
					pos:        position{line: 1265, col: 16, offset: 34631},
					val:        "[a-zA-Z_.:/%#@~]",
					chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
					ranges:     []rune{'a', 'z', 'A', 'Z'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 1267, col: 1, offset: 34680},
			expr: &choiceExpr{
				pos: position{line: 1268, col: 5, offset: 34696},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1268, col: 5, offset: 34696},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 1269, col: 5, offset: 34713},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 1271, col: 1, offset: 34720},
			expr: &actionExpr{
				pos: position{line: 1271, col: 14, offset: 34733},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 1271, col: 14, offset: 34733},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1271, col: 14, offset: 34733},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1271, col: 19, offset: 34738},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1271, col: 22, offset: 34741},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1271, col: 22, offset: 34741},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1271, col: 38, offset: 34757},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Glob",
			pos:  position{line: 1273, col: 1, offset: 34793},
			expr: &actionExpr{
				pos: position{line: 1274, col: 5, offset: 34802},
				run: (*parser).callonGlob1,
				expr: &seqExpr{
					pos: position{line: 1274, col: 5, offset: 34802},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1274, col: 5, offset: 34802},
							expr: &ruleRefExpr{
								pos:  position{line: 1274, col: 6, offset: 34803},
								name: "GlobProperStart",
							},
						},
						&andExpr{
							pos: position{line: 1274, col: 22, offset: 34819},
							expr: &ruleRefExpr{
								pos:  position{line: 1274, col: 23, offset: 34820},
								name: "GlobHasStar",
							},
						},
						&labeledExpr{
							pos:   position{line: 1274, col: 35, offset: 34832},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1274, col: 40, offset: 34837},
								name: "GlobStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1274, col: 50, offset: 34847},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1274, col: 55, offset: 34852},
								expr: &ruleRefExpr{
									pos:  position{line: 1274, col: 55, offset: 34852},
									name: "GlobRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobProperStart",
			pos:  position{line: 1278, col: 1, offset: 34936},
			expr: &seqExpr{
				pos: position{line: 1278, col: 19, offset: 34954},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1278, col: 19, offset: 34954},
						expr: &litMatcher{
							pos:        position{line: 1278, col: 19, offset: 34954},
							val:        "*",
							ignoreCase: false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1278, col: 24, offset: 34959},
						name: "KeyWordStart",
					},
				},
			},
		},
		{
			name: "GlobHasStar",
			pos:  position{line: 1279, col: 1, offset: 34972},
			expr: &seqExpr{
				pos: position{line: 1279, col: 15, offset: 34986},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1279, col: 15, offset: 34986},
						expr: &ruleRefExpr{
							pos:  position{line: 1279, col: 15, offset: 34986},
							name: "KeyWordRest",
						},
					},
					&litMatcher{
						pos:        position{line: 1279, col: 28, offset: 34999},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "GlobStart",
			pos:  position{line: 1281, col: 1, offset: 35004},
			expr: &choiceExpr{
				pos: position{line: 1282, col: 5, offset: 35018},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1282, col: 5, offset: 35018},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1283, col: 5, offset: 35035},
						name: "GlobEsc",
					},
					&actionExpr{
						pos: position{line: 1284, col: 5, offset: 35047},
						run: (*parser).callonGlobStart4,
						expr: &litMatcher{
							pos:        position{line: 1284, col: 5, offset: 35047},
							val:        "*",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GlobRest",
			pos:  position{line: 1286, col: 1, offset: 35071},
			expr: &choiceExpr{
				pos: position{line: 1287, col: 5, offset: 35084},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1287, col: 5, offset: 35084},
						name: "GlobStart",
					},
					&charClassMatcher{
						pos:        position{line: 1288, col: 5, offset: 35098},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "GlobEsc",
			pos:  position{line: 1290, col: 1, offset: 35105},
			expr: &actionExpr{
				pos: position{line: 1290, col: 11, offset: 35115},
				run: (*parser).callonGlobEsc1,
				expr: &seqExpr{
					pos: position{line: 1290, col: 11, offset: 35115},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1290, col: 11, offset: 35115},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1290, col: 16, offset: 35120},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1290, col: 19, offset: 35123},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1290, col: 19, offset: 35123},
										name: "GlobEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1290, col: 32, offset: 35136},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobEscape",
			pos:  position{line: 1292, col: 1, offset: 35172},
			expr: &choiceExpr{
				pos: position{line: 1293, col: 5, offset: 35187},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1293, col: 5, offset: 35187},
						run: (*parser).callonGlobEscape2,
						expr: &litMatcher{
							pos:        position{line: 1293, col: 5, offset: 35187},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1294, col: 5, offset: 35215},
						run: (*parser).callonGlobEscape4,
						expr: &litMatcher{
							pos:        position{line: 1294, col: 5, offset: 35215},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1295, col: 5, offset: 35245},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 1298, col: 1, offset: 35252},
			expr: &choiceExpr{
				pos: position{line: 1299, col: 5, offset: 35273},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1299, col: 5, offset: 35273},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1299, col: 5, offset: 35273},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1299, col: 5, offset: 35273},
									expr: &choiceExpr{
										pos: position{line: 1299, col: 7, offset: 35275},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1299, col: 7, offset: 35275},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1299, col: 13, offset: 35281},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1299, col: 26, offset: 35294,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1300, col: 5, offset: 35331},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1300, col: 5, offset: 35331},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1300, col: 5, offset: 35331},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1300, col: 10, offset: 35336},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1300, col: 12, offset: 35338},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 1302, col: 1, offset: 35372},
			expr: &choiceExpr{
				pos: position{line: 1303, col: 5, offset: 35391},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1303, col: 5, offset: 35391},
						run: (*parser).callonEscapeSequence2,
						expr: &seqExpr{
							pos: position{line: 1303, col: 5, offset: 35391},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1303, col: 5, offset: 35391},
									val:        "x",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1303, col: 9, offset: 35395},
									name: "HexDigit",
								},
								&ruleRefExpr{
									pos:  position{line: 1303, col: 18, offset: 35404},
									name: "HexDigit",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1304, col: 5, offset: 35455},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 1305, col: 5, offset: 35476},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 1307, col: 1, offset: 35491},
			expr: &choiceExpr{
				pos: position{line: 1308, col: 5, offset: 35512},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1308, col: 5, offset: 35512},
						val:        "'",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1309, col: 5, offset: 35520},
						run: (*parser).callonSingleCharEscape3,
						expr: &litMatcher{
							pos:        position{line: 1309, col: 5, offset: 35520},
							val:        "\"",
							ignoreCase: false,
						},
					},
					&litMatcher{
						pos:        position{line: 1310, col: 5, offset: 35560},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1311, col: 5, offset: 35569},
						run: (*parser).callonSingleCharEscape6,
						expr: &litMatcher{
							pos:        position{line: 1311, col: 5, offset: 35569},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1312, col: 5, offset: 35598},
						run: (*parser).callonSingleCharEscape8,
						expr: &litMatcher{
							pos:        position{line: 1312, col: 5, offset: 35598},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1313, col: 5, offset: 35627},
						run: (*parser).callonSingleCharEscape10,
						expr: &litMatcher{
							pos:        position{line: 1313, col: 5, offset: 35627},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1314, col: 5, offset: 35656},
						run: (*parser).callonSingleCharEscape12,
						expr: &litMatcher{
							pos:        position{line: 1314, col: 5, offset: 35656},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1315, col: 5, offset: 35685},
						run: (*parser).callonSingleCharEscape14,
						expr: &litMatcher{
							pos:        position{line: 1315, col: 5, offset: 35685},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1316, col: 5, offset: 35714},
						run: (*parser).callonSingleCharEscape16,
						expr: &litMatcher{
							pos:        position{line: 1316, col: 5, offset: 35714},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 1318, col: 1, offset: 35740},
			expr: &choiceExpr{
				pos: position{line: 1319, col: 5, offset: 35758},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1319, col: 5, offset: 35758},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 1319, col: 5, offset: 35758},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1320, col: 5, offset: 35786},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 1320, col: 5, offset: 35786},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1321, col: 5, offset: 35814},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 1323, col: 1, offset: 35820},
			expr: &choiceExpr{
				pos: position{line: 1324, col: 5, offset: 35838},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1324, col: 5, offset: 35838},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 1324, col: 5, offset: 35838},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1324, col: 5, offset: 35838},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1324, col: 9, offset: 35842},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1324, col: 16, offset: 35849},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1324, col: 16, offset: 35849},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1324, col: 25, offset: 35858},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1324, col: 34, offset: 35867},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1324, col: 43, offset: 35876},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1327, col: 5, offset: 35939},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 1327, col: 5, offset: 35939},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1327, col: 5, offset: 35939},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1327, col: 9, offset: 35943},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1327, col: 13, offset: 35947},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1327, col: 20, offset: 35954},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1327, col: 20, offset: 35954},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 1327, col: 29, offset: 35963},
												expr: &ruleRefExpr{
													pos:  position{line: 1327, col: 29, offset: 35963},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1327, col: 39, offset: 35973},
												expr: &ruleRefExpr{
													pos:  position{line: 1327, col: 39, offset: 35973},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1327, col: 49, offset: 35983},
												expr: &ruleRefExpr{
													pos:  position{line: 1327, col: 49, offset: 35983},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1327, col: 59, offset: 35993},
												expr: &ruleRefExpr{
													pos:  position{line: 1327, col: 59, offset: 35993},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1327, col: 69, offset: 36003},
												expr: &ruleRefExpr{
													pos:  position{line: 1327, col: 69, offset: 36003},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1327, col: 80, offset: 36014},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 1331, col: 1, offset: 36068},
			expr: &actionExpr{
				pos: position{line: 1332, col: 5, offset: 36079},
				run: (*parser).callonRegexp1,
				expr: &seqExpr{
					pos: position{line: 1332, col: 5, offset: 36079},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1332, col: 5, offset: 36079},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1332, col: 9, offset: 36083},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1332, col: 14, offset: 36088},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 1332, col: 25, offset: 36099},
							val:        "/",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1332, col: 29, offset: 36103},
							expr: &ruleRefExpr{
								pos:  position{line: 1332, col: 30, offset: 36104},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 1334, col: 1, offset: 36139},
			expr: &actionExpr{
				pos: position{line: 1335, col: 5, offset: 36154},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1335, col: 5, offset: 36154},
					expr: &choiceExpr{
						pos: position{line: 1335, col: 6, offset: 36155},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 1335, col: 6, offset: 36155},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&seqExpr{
								pos: position{line: 1335, col: 15, offset: 36164},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1335, col: 15, offset: 36164},
										val:        "\\",
										ignoreCase: false,
									},
									&anyMatcher{
										line: 1335, col: 20, offset: 36169,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 1337, col: 1, offset: 36205},
			expr: &charClassMatcher{
				pos:        position{line: 1338, col: 5, offset: 36221},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 1340, col: 1, offset: 36236},
			expr: &oneOrMoreExpr{
				pos: position{line: 1340, col: 6, offset: 36241},
				expr: &ruleRefExpr{
					pos:  position{line: 1340, col: 6, offset: 36241},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1342, col: 1, offset: 36252},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1342, col: 6, offset: 36257},
				expr: &ruleRefExpr{
					pos:  position{line: 1342, col: 6, offset: 36257},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 1344, col: 1, offset: 36268},
			expr: &choiceExpr{
				pos: position{line: 1345, col: 5, offset: 36281},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1345, col: 5, offset: 36281},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 1346, col: 5, offset: 36296},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 1347, col: 5, offset: 36315},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 1349, col: 1, offset: 36324},
			expr: &anyMatcher{
				line: 1350, col: 5, offset: 36344,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 1352, col: 1, offset: 36347},
			expr: &choiceExpr{
				pos: position{line: 1353, col: 5, offset: 36375},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1353, col: 5, offset: 36375},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1354, col: 5, offset: 36384},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1355, col: 5, offset: 36393},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1356, col: 5, offset: 36402},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1357, col: 5, offset: 36410},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1358, col: 5, offset: 36423},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 1360, col: 1, offset: 36433},
			expr: &charClassMatcher{
				pos:        position{line: 1361, col: 5, offset: 36452},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 1367, col: 1, offset: 36782},
			expr: &ruleRefExpr{
				pos:  position{line: 1370, col: 5, offset: 36853},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1372, col: 1, offset: 36872},
			expr: &seqExpr{
				pos: position{line: 1373, col: 5, offset: 36893},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1373, col: 5, offset: 36893},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1373, col: 10, offset: 36898},
						expr: &seqExpr{
							pos: position{line: 1373, col: 11, offset: 36899},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1373, col: 11, offset: 36899},
									expr: &litMatcher{
										pos:        position{line: 1373, col: 12, offset: 36900},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1373, col: 17, offset: 36905},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1373, col: 35, offset: 36923},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1375, col: 1, offset: 36929},
			expr: &seqExpr{
				pos: position{line: 1376, col: 5, offset: 36951},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1376, col: 5, offset: 36951},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1376, col: 10, offset: 36956},
						expr: &seqExpr{
							pos: position{line: 1376, col: 11, offset: 36957},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1376, col: 11, offset: 36957},
									expr: &ruleRefExpr{
										pos:  position{line: 1376, col: 12, offset: 36958},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1376, col: 27, offset: 36973},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1378, col: 1, offset: 36992},
			expr: &seqExpr{
				pos: position{line: 1378, col: 7, offset: 36998},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1378, col: 7, offset: 36998},
						expr: &ruleRefExpr{
							pos:  position{line: 1378, col: 7, offset: 36998},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1378, col: 19, offset: 37010},
						name: "LineTerminator",
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 1380, col: 1, offset: 37026},
			expr: &choiceExpr{
				pos: position{line: 1380, col: 7, offset: 37032},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1380, col: 7, offset: 37032},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 1380, col: 11, offset: 37036},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1382, col: 1, offset: 37041},
			expr: &notExpr{
				pos: position{line: 1382, col: 7, offset: 37047},
				expr: &anyMatcher{
					line: 1382, col: 8, offset: 37048,
				},
			},
		},
	},
}

func (c *current) onstart1(ast interface{}) (interface{}, error) {
	return ast, nil
}

func (p *parser) callonstart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart1(stack["ast"])
}

func (c *current) onSequential2(consts, first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": append([]interface{}{first}, (rest.([]interface{}))...), "consts": consts}, nil

}

func (p *parser) callonSequential2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential2(stack["consts"], stack["first"], stack["rest"])
}

func (c *current) onSequential12(consts, op interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": []interface{}{op}, "consts": consts}, nil

}

func (p *parser) callonSequential12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential12(stack["consts"], stack["op"])
}

func (c *current) onSequentialTail1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonSequentialTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequentialTail1(stack["p"])
}

func (c *current) onConsts4() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonConsts4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConsts4()
}

func (c *current) onConst1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonConst1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConst1(stack["v"])
}

func (c *current) onConstDef2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"name": id, "expr": expr}, nil

}

func (p *parser) callonConstDef2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDef2(stack["id"], stack["expr"])
}

func (c *current) onConstDef13(id, typ interface{}) (interface{}, error) {
	return map[string]interface{}{

		"name": id,

		"expr": map[string]interface{}{"kind": "TypeValue", "value": map[string]interface{}{"kind": "TypeDef", "name": id, "type": typ}}}, nil

}

func (p *parser) callonConstDef13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDef13(stack["id"], stack["typ"])
}

func (c *current) onOperation2(procArray interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Parallel", "procs": procArray}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["procArray"])
}

func (c *current) onOperation12(expr, cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": expr, "cases": cases}, nil

}

func (p *parser) callonOperation12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation12(stack["expr"], stack["cases"])
}

func (c *current) onOperation25(cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": nil, "cases": cases}, nil

}

func (p *parser) callonOperation25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation25(stack["cases"])
}

func (c *current) onOperation35(trunks interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": trunks}, nil

}

func (p *parser) callonOperation35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation35(stack["trunks"])
}

func (c *current) onOperation47(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonOperation47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation47(stack["f"])
}

func (c *current) onOperation53(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation53(stack["a"])
}

func (c *current) onOperation59(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation59(stack["a"])
}

func (c *current) onOperation65(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Filter", "expr": expr}, nil

}

func (p *parser) callonOperation65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation65(stack["expr"])
}

func (c *current) onSplitLeg1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSplitLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSplitLeg1(stack["s"])
}

func (c *current) onSwitchLeg1(expr, proc interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": expr, "proc": proc}, nil

}

func (p *parser) callonSwitchLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchLeg1(stack["expr"], stack["proc"])
}

func (c *current) onCase2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonCase2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase2(stack["expr"])
}

func (c *current) onCase8() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonCase8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase8()
}

func (c *current) onFromLeg2(source, seq interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Trunk", "source": source, "seq": seq}, nil

}

func (p *parser) callonFromLeg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromLeg2(stack["source"], stack["seq"])
}

func (c *current) onFromLeg10(source interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Trunk", "source": source, "seq": nil}, nil

}

func (p *parser) callonFromLeg10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromLeg10(stack["source"])
}

func (c *current) onFromHead1(src interface{}) (interface{}, error) {
	return src, nil
}

func (p *parser) callonFromHead1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromHead1(stack["src"])
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor13(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor13(stack["expr"])
}

func (c *current) onSearchExpr2(search interface{}) (interface{}, error) {
	return search, nil
}

func (p *parser) callonSearchExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr2(stack["search"])
}

func (c *current) onSearchExpr5(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Search", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonSearchExpr5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr5(stack["v"])
}

func (c *current) onSearchExpr11() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil

}

func (p *parser) callonSearchExpr11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr11()
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onPatternSearch1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RegexpSearch", "pattern": pattern}, nil

}

func (p *parser) callonPatternSearch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternSearch1(stack["pattern"])
}

func (c *current) onPatternMatch1(f, pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RegexpMatch", "pattern": pattern, "expr": f}, nil

}

func (p *parser) callonPatternMatch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternMatch1(stack["f"], stack["pattern"])
}

func (c *current) onAggregation2(every, keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Summarize", "keys": keys, "aggs": nil, "duration": every, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["every"], stack["keys"], stack["limit"])
}

func (c *current) onAggregation13(every, aggs, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"kind": "Summarize", "keys": nil, "aggs": aggs, "duration": every, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation13(stack["every"], stack["aggs"], stack["keys"], stack["limit"])
}

func (c *current) onEveryDur1(dur interface{}) (interface{}, error) {
	return dur, nil
}

func (p *parser) callonEveryDur1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEveryDur1(stack["dur"])
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAggAssignment2(lval, agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lval, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment2(stack["lval"], stack["agg"])
}

func (c *current) onAggAssignment11(agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment11(stack["agg"])
}

func (c *current) onAgg1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"kind": "Agg", "name": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonAgg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAgg1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onAggAssignments1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonAggAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSortProc8(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc8(stack["l"])
}

func (c *current) onSortProc1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var proc = map[string]interface{}{"kind": "Sort", "args": list, "order": "asc", "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		proc["order"] = "desc"
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			proc["nullsfirst"] = true
		}
	}
	return proc, nil

}

func (p *parser) callonSortProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopProc6(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopProc6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc6(stack["n"])
}

func (c *current) onTopProc18(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopProc18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc18(stack["f"])
}

func (c *current) onTopProc1(limit, flush, fields interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Top", "limit": 0, "args": nil, "flush": false}
	if limit != nil {
		proc["limit"] = limit
	}
	if fields != nil {
		proc["args"] = fields
	}
	if flush != nil {
		proc["flush"] = true
	}
	return proc, nil

}

func (p *parser) callonTopProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cut", "args": args}, nil

}

func (p *parser) callonCutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutProc1(stack["args"])
}

func (c *current) onDropProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Drop", "args": args}, nil

}

func (p *parser) callonDropProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropProc1(stack["args"])
}

func (c *current) onHeadProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": count}, nil
}

func (p *parser) callonHeadProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc2(stack["count"])
}

func (c *current) onHeadProc8() (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": 1}, nil
}

func (p *parser) callonHeadProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc8()
}

func (c *current) onTailProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": count}, nil
}

func (p *parser) callonTailProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc2(stack["count"])
}

func (c *current) onTailProc8() (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": 1}, nil
}

func (p *parser) callonTailProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc8()
}

func (c *current) onFilterProc1(op interface{}) (interface{}, error) {
	return op, nil

}

func (p *parser) callonFilterProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilterProc1(stack["op"])
}

func (c *current) onFilter1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Filter", "expr": expr}, nil

}

func (p *parser) callonFilter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilter1(stack["expr"])
}

func (c *current) onUniqProc2() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": true}, nil

}

func (p *parser) callonUniqProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc2()
}

func (c *current) onUniqProc7() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": false}, nil

}

func (p *parser) callonUniqProc7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc7()
}

func (c *current) onPutProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Put", "args": args}, nil

}

func (p *parser) callonPutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutProc1(stack["args"])
}

func (c *current) onRenameProc9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameProc9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc9(stack["cl"])
}

func (c *current) onRenameProc1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Rename", "args": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc1(stack["first"], stack["rest"])
}

func (c *current) onFuseProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Fuse"}, nil

}

func (p *parser) callonFuseProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseProc1()
}

func (c *current) onShapeProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Shape"}, nil

}

func (p *parser) callonShapeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShapeProc1()
}

func (c *current) onJoinProc2(style, leftKey, rightKey, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Join", "style": style, "left_key": leftKey, "right_key": rightKey, "args": nil}
	if columns != nil {
		proc["args"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc2(stack["style"], stack["leftKey"], stack["rightKey"], stack["columns"])
}

func (c *current) onJoinProc22(style, key, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Join", "style": style, "left_key": key, "right_key": key, "args": nil}
	if columns != nil {
		proc["args"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc22(stack["style"], stack["key"], stack["columns"])
}

func (c *current) onJoinStyle2() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle2()
}

func (c *current) onJoinStyle6() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle6()
}

func (c *current) onJoinStyle10() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle10()
}

func (c *current) onJoinStyle14() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonJoinStyle14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle14()
}

func (c *current) onJoinStyle18() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle18()
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onSampleProc1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "consts": []interface{}{}, "procs": []interface{}{

		map[string]interface{}{"kind": "Summarize",

			"keys": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "shape"},

				"rhs": map[string]interface{}{"kind": "Call", "name": "typeof",

					"args": []interface{}{e},

					"where": nil}}},

			"aggs": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "sample"},

				"rhs": map[string]interface{}{"kind": "Agg",

					"name": "any",

					"expr": e,

					"where": nil}}},

			"duration": nil, "limit": 0},

		map[string]interface{}{"kind": "Cut",

			"args": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": nil,

				"rhs": map[string]interface{}{"kind": "ID", "name": "sample"}}}}}}, nil

}

func (p *parser) callonSampleProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleProc1(stack["e"])
}

func (c *current) onOpAssignment1(a interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpAssignment", "assignments": a}, nil

}

func (p *parser) callonOpAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpAssignment1(stack["a"])
}

func (c *current) onSampleExpr2(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonSampleExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr2(stack["lval"])
}

func (c *current) onSampleExpr7() (interface{}, error) {
	return map[string]interface{}{"kind": "This"}, nil
}

func (p *parser) callonSampleExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr7()
}

func (c *current) onFromProc1(source interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": []interface{}{map[string]interface{}{"kind": "Trunk", "source": source}}}, nil

}

func (p *parser) callonFromProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromProc1(stack["source"])
}

func (c *current) onFile1(path, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "File", "path": path, "format": format, "layout": layout}, nil

}

func (p *parser) callonFile1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile1(stack["path"], stack["format"], stack["layout"])
}

func (c *current) onFrom1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonFrom1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrom1(stack["body"])
}

func (c *current) onPool1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonPool1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPool1(stack["body"])
}

func (c *current) onPoolBody1(spec, at, over, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pool", "spec": spec, "at": at, "range": over, "scan_order": order}, nil

}

func (p *parser) callonPoolBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBody1(stack["spec"], stack["at"], stack["over"], stack["order"])
}

func (c *current) onGet1(url, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "HTTP", "url": url, "format": format, "layout": layout}, nil

}

func (p *parser) callonGet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGet1(stack["url"], stack["format"], stack["layout"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onPath2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonPath2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath2(stack["v"])
}

func (c *current) onPath5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPath5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath5()
}

func (c *current) onPoolAt1(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonPoolAt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolAt1(stack["id"])
}

func (c *current) onKSUID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKSUID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKSUID1()
}

func (c *current) onPoolRange1(lower, upper interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Range", "lower": lower, "upper": upper}, nil

}

func (p *parser) callonPoolRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolRange1(stack["lower"], stack["upper"])
}

func (c *current) onPoolSpec2(pool, commit, meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": pool, "commit": commit, "meta": meta}, nil

}

func (p *parser) callonPoolSpec2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec2(stack["pool"], stack["commit"], stack["meta"])
}

func (c *current) onPoolSpec12(meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": nil, "commit": nil, "meta": meta}, nil

}

func (p *parser) callonPoolSpec12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec12(stack["meta"])
}

func (c *current) onPoolCommit1(commit interface{}) (interface{}, error) {
	return commit, nil
}

func (p *parser) callonPoolCommit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolCommit1(stack["commit"])
}

func (c *current) onPoolMeta1(meta interface{}) (interface{}, error) {
	return meta, nil
}

func (p *parser) callonPoolMeta1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolMeta1(stack["meta"])
}

func (c *current) onPoolIdentifier1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPoolIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolIdentifier1()
}

func (c *current) onLayoutArg1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Layout", "keys": keys, "order": order}, nil

}

func (p *parser) callonLayoutArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLayoutArg1(stack["keys"], stack["order"])
}

func (c *current) onFormatArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonFormatArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArg1(stack["val"])
}

func (c *current) onOrderSuffix2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix2()
}

func (c *current) onOrderSuffix4() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderSuffix4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix4()
}

func (c *current) onOrderSuffix6() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix6()
}

func (c *current) onOrderArg2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg2()
}

func (c *current) onOrderArg8() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderArg8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg8()
}

func (c *current) onPassProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Pass"}, nil

}

func (p *parser) callonPassProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassProc1()
}

func (c *current) onExplodeProc1(args, typ, as interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Explode", "args": args, "as": as, "type": typ}, nil

}

func (p *parser) callonExplodeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplodeProc1(stack["args"], stack["typ"], stack["as"])
}

func (c *current) onMergeProc1(field interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Merge", "field": field}, nil

}

func (p *parser) callonMergeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMergeProc1(stack["field"])
}

func (c *current) onOverProc3(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Over", "exprs": exprs, "scope": nil}, nil

}

func (p *parser) callonOverProc3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverProc3(stack["exprs"])
}

func (c *current) onScopedOver1(exprs, scope interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Over", "exprs": exprs, "scope": scope}, nil

}

func (p *parser) callonScopedOver1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScopedOver1(stack["exprs"], stack["scope"])
}

func (c *current) onLetProc1(locals, over interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Let", "locals": locals, "over": over}, nil

}

func (p *parser) callonLetProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetProc1(stack["locals"], stack["over"])
}

func (c *current) onScope1(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonScope1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope1(stack["seq"])
}

func (c *current) onLetAssignments7(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonLetAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetAssignments7(stack["a"])
}

func (c *current) onLetAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLetAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetAssignments1(stack["first"], stack["rest"])
}

func (c *current) onLetAssignment1(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"name": id, "expr": expr}, nil

}

func (p *parser) callonLetAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetAssignment1(stack["id"], stack["expr"])
}

func (c *current) onYieldProc1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Yield", "exprs": exprs}, nil

}

func (p *parser) callonYieldProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYieldProc1(stack["exprs"])
}

func (c *current) onTypeArg1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeArg1(stack["typ"])
}

func (c *current) onAsArg1(lhs interface{}) (interface{}, error) {
	return lhs, nil
}

func (p *parser) callonAsArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsArg1(stack["lhs"])
}

func (c *current) onLvals7(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonLvals7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals7(stack["lval"])
}

func (c *current) onLvals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLvals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals1(stack["first"], stack["rest"])
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignments7(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments7(stack["a"])
}

func (c *current) onAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr2(condition, thenClause, elseClause interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Conditional", "cond": condition, "then": thenClause, "else": elseClause}, nil

}

func (p *parser) callonConditionalExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr2(stack["condition"], stack["thenClause"], stack["elseClause"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onEqualityCompareExpr9(comp, expr interface{}) (interface{}, error) {
	return []interface{}{comp, expr}, nil
}

func (p *parser) callonEqualityCompareExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr9(stack["comp"], stack["expr"])
}

func (c *current) onEqualityCompareExpr3(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonEqualityCompareExpr3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr3(stack["first"], stack["rest"])
}

func (c *current) onEqualityOperator2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonEqualityOperator2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator2()
}

func (c *current) onEqualityOperator4() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityOperator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator4()
}

func (c *current) onEqualityComparator3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityComparator3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityComparator3()
}

func (c *current) onRelativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonRelativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onRelativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonRelativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onRelativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeOperator1()
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onFuncExpr3(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr3(stack["first"], stack["rest"])
}

func (c *current) onFuncExpr10(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr10(stack["first"], stack["rest"])
}

func (c *current) onMatchExpr1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonMatchExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchExpr1(stack["expr"])
}

func (c *current) onCast1(typ, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": expr, "type": typ}, nil

}

func (p *parser) callonCast1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCast1(stack["typ"], stack["expr"])
}

func (c *current) onFunction1(fn, args, where interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": fn, "args": args, "where": where}, nil

}

func (p *parser) callonFunction1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction1(stack["fn"], stack["args"], stack["where"])
}

func (c *current) onOptionalExprs3() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonOptionalExprs3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalExprs3()
}

func (c *current) onExprs7(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonExprs7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs7(stack["e"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonDerefExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr1(stack["e"])
}

func (c *current) onDerefExprPattern2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExprPattern2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExprPattern2(stack["first"], stack["rest"])
}

func (c *current) onDerefExprPattern9(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExprPattern9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExprPattern9(stack["first"], stack["rest"])
}

func (c *current) onDerefExprPattern16(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExprPattern16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExprPattern16(stack["first"], stack["rest"])
}

func (c *current) onDerefExprPattern23() (interface{}, error) {
	return map[string]interface{}{"kind": "This"}, nil

}

func (p *parser) callonDerefExprPattern23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExprPattern23()
}

func (c *current) onThis1() (interface{}, error) {
	return map[string]interface{}{"kind": "This"}, nil
}

func (p *parser) callonThis1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThis1()
}

func (c *current) onDotID2(field interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": ".",

		"lhs": map[string]interface{}{"kind": "This"},

		"rhs": field}, nil

}

func (p *parser) callonDotID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotID2(stack["field"])
}

func (c *current) onDotID7(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": "[",

		"lhs": map[string]interface{}{"kind": "This"},

		"rhs": expr}, nil

}

func (p *parser) callonDotID7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotID7(stack["expr"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref13(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": nil, "rhs": to}}, nil

}

func (p *parser) callonDeref13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref13(stack["to"])
}

func (c *current) onDeref22(from interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": nil}}, nil

}

func (p *parser) callonDeref22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref22(stack["from"])
}

func (c *current) onDeref31(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref31(stack["expr"])
}

func (c *current) onDeref37(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref37(stack["id"])
}

func (c *current) onPrimary7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary7(stack["expr"])
}

func (c *current) onRecord1(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RecordExpr", "fields": fields}, nil

}

func (p *parser) callonRecord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecord1(stack["fields"])
}

func (c *current) onFields2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFields2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFields2(stack["first"], stack["rest"])
}

func (c *current) onFields9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonFields9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFields9()
}

func (c *current) onFieldTail1(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonFieldTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldTail1(stack["f"])
}

func (c *current) onField1(name, value interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "value": value}, nil

}

func (p *parser) callonField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField1(stack["name"], stack["value"])
}

func (c *current) onArray1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ArrayExpr", "exprs": exprs}, nil

}

func (p *parser) callonArray1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArray1(stack["exprs"])
}

func (c *current) onSet1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SetExpr", "exprs": exprs}, nil

}

func (p *parser) callonSet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSet1(stack["exprs"])
}

func (c *current) onMap1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "MapExpr", "entries": exprs}, nil

}

func (p *parser) callonMap1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMap1(stack["exprs"])
}

func (c *current) onEntries2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonEntries2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries2(stack["first"], stack["rest"])
}

func (c *current) onEntries9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonEntries9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries9()
}

func (c *current) onEntryTail1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonEntryTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntryTail1(stack["e"])
}

func (c *current) onEntry1(key, value interface{}) (interface{}, error) {
	return map[string]interface{}{"key": key, "value": value}, nil

}

func (p *parser) callonEntry1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntry1(stack["key"], stack["value"])
}

func (c *current) onSQLProc1(selection, from, joins, where, groupby, having, orderby, limit interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "SQLExpr",

		"select": selection,

		"from": from,

		"joins": joins,

		"where": where,

		"group_by": groupby,

		"having": having,

		"order_by": orderby,

		"limit": limit}, nil

}

func (p *parser) callonSQLProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLProc1(stack["selection"], stack["from"], stack["joins"], stack["where"], stack["groupby"], stack["having"], stack["orderby"], stack["limit"])
}

func (c *current) onSQLSelect2() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLSelect2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect2()
}

func (c *current) onSQLSelect7(assignments interface{}) (interface{}, error) {
	return assignments, nil
}

func (p *parser) callonSQLSelect7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect7(stack["assignments"])
}

func (c *current) onSQLAssignment2(rhs, lhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonSQLAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment2(stack["rhs"], stack["lhs"])
}

func (c *current) onSQLAssignment11(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonSQLAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment11(stack["expr"])
}

func (c *current) onSQLAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments7(stack["expr"])
}

func (c *current) onSQLAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSQLFrom2(table, alias interface{}) (interface{}, error) {
	return map[string]interface{}{"table": table, "alias": alias}, nil

}

func (p *parser) callonSQLFrom2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom2(stack["table"], stack["alias"])
}

func (c *current) onSQLFrom12() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLFrom12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom12()
}

func (c *current) onSQLAlias2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias2(stack["id"])
}

func (c *current) onSQLAlias9(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias9(stack["id"])
}

func (c *current) onSQLJoins7(join interface{}) (interface{}, error) {
	return join, nil
}

func (p *parser) callonSQLJoins7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins7(stack["join"])
}

func (c *current) onSQLJoins1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLJoins1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins1(stack["first"], stack["rest"])
}

func (c *current) onSQLJoin1(style, table, alias, leftKey, rightKey interface{}) (interface{}, error) {
	return map[string]interface{}{

		"table": table,

		"style": style,

		"left_key": leftKey,

		"right_key": rightKey,

		"alias": alias}, nil

}

func (p *parser) callonSQLJoin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoin1(stack["style"], stack["table"], stack["alias"], stack["leftKey"], stack["rightKey"])
}

func (c *current) onSQLJoinStyle2(style interface{}) (interface{}, error) {
	return style, nil
}

func (p *parser) callonSQLJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle2(stack["style"])
}

func (c *current) onSQLJoinStyle11() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonSQLJoinStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle11()
}

func (c *current) onSQLWhere1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLWhere1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLWhere1(stack["expr"])
}

func (c *current) onSQLGroupBy1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonSQLGroupBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLGroupBy1(stack["columns"])
}

func (c *current) onSQLHaving1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLHaving1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLHaving1(stack["expr"])
}

func (c *current) onSQLOrderBy1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SQLOrderBy", "keys": keys, "order": order}, nil

}

func (p *parser) callonSQLOrderBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrderBy1(stack["keys"], stack["order"])
}

func (c *current) onSQLOrder2(dir interface{}) (interface{}, error) {
	return dir, nil
}

func (p *parser) callonSQLOrder2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder2(stack["dir"])
}

func (c *current) onSQLOrder9() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonSQLOrder9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder9()
}

func (c *current) onSQLLimit2(count interface{}) (interface{}, error) {
	return count, nil
}

func (p *parser) callonSQLLimit2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit2(stack["count"])
}

func (c *current) onSQLLimit9() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonSQLLimit9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit9()
}

func (c *current) onSELECT1() (interface{}, error) {
	return "select", nil
}

func (p *parser) callonSELECT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSELECT1()
}

func (c *current) onAS1() (interface{}, error) {
	return "as", nil
}

func (p *parser) callonAS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAS1()
}

func (c *current) onFROM1() (interface{}, error) {
	return "from", nil
}

func (p *parser) callonFROM1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFROM1()
}

func (c *current) onJOIN1() (interface{}, error) {
	return "join", nil
}

func (p *parser) callonJOIN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJOIN1()
}

func (c *current) onWHERE1() (interface{}, error) {
	return "where", nil
}

func (p *parser) callonWHERE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWHERE1()
}

func (c *current) onGROUP1() (interface{}, error) {
	return "group", nil
}

func (p *parser) callonGROUP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGROUP1()
}

func (c *current) onHAVING1() (interface{}, error) {
	return "having", nil
}

func (p *parser) callonHAVING1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHAVING1()
}

func (c *current) onORDER1() (interface{}, error) {
	return "order", nil
}

func (p *parser) callonORDER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onORDER1()
}

func (c *current) onON1() (interface{}, error) {
	return "on", nil
}

func (p *parser) callonON1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onON1()
}

func (c *current) onLIMIT1() (interface{}, error) {
	return "limit", nil
}

func (p *parser) callonLIMIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIMIT1()
}

func (c *current) onASC1() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonASC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onASC1()
}

func (c *current) onDESC1() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonDESC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDESC1()
}

func (c *current) onANTI1() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonANTI1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onANTI1()
}

func (c *current) onLEFT1() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonLEFT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLEFT1()
}

func (c *current) onRIGHT1() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonRIGHT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRIGHT1()
}

func (c *current) onINNER1() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonINNER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINNER1()
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "float64", "text": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "int64", "text": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "null", "text": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onBytesLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bytes", "text": string(c.text)}, nil

}

func (p *parser) callonBytesLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBytesLiteral1()
}

func (c *current) onTypeLiteral1(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonTypeLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeLiteral1(stack["typ"])
}

func (c *current) onAmbiguousType2(name interface{}) (interface{}, error) {
	return name, nil
}

func (p *parser) callonAmbiguousType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType2(stack["name"])
}

func (c *current) onAmbiguousType8(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeDef", "name": name, "type": typ}, nil

}

func (p *parser) callonAmbiguousType8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType8(stack["name"], stack["typ"])
}

func (c *current) onAmbiguousType21(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType21(stack["name"])
}

func (c *current) onAmbiguousType24(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonAmbiguousType24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType24(stack["u"])
}

func (c *current) onTypeUnion1(types interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeUnion", "types": types}, nil

}

func (p *parser) callonTypeUnion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeUnion1(stack["types"])
}

func (c *current) onTypeList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeList1(stack["first"], stack["rest"])
}

func (c *current) onTypeListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeListTail1(stack["typ"])
}

func (c *current) onComplexType2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType2(stack["fields"])
}

func (c *current) onComplexType10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexType10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType10(stack["typ"])
}

func (c *current) onComplexType18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexType18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType18(stack["typ"])
}

func (c *current) onComplexType26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexType26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType26(stack["keyType"], stack["valType"])
}

func (c *current) onTemplateLiteral1(v interface{}) (interface{}, error) {
	if v == nil {
		return map[string]interface{}{"kind": "Primitive", "type": "string", "text": ""}, nil
	}
	return makeTemplateExprChain(v), nil

}

func (p *parser) callonTemplateLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteral1(stack["v"])
}

func (c *current) onTemplateLiteralParts2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts2(stack["v"])
}

func (c *current) onTemplateLiteralParts9(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts9(stack["v"])
}

func (c *current) onTemplateDoubleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateDoubleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedPart3(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar2(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar7(stack["v"])
}

func (c *current) onTemplateSingleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateSingleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedPart3(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar2(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar7(stack["v"])
}

func (c *current) onTemplateExpr1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonTemplateExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateExpr1(stack["e"])
}

func (c *current) onPrimitiveType1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveType1()
}

func (c *current) onTypeFieldList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList1(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTail1(stack["typ"])
}

func (c *current) onTypeField1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeField1(stack["name"], stack["typ"])
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return "in", nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onIdentifierName19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName19()
}

func (c *current) onIdentifierName21(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName21(stack["id"])
}

func (c *current) onTime1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "time", "text": string(c.text)}, nil

}

func (p *parser) callonTime1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTime1()
}

func (c *current) onDuration1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "duration", "text": string(c.text)}, nil

}

func (p *parser) callonDuration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDuration1()
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordChars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordChars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordChars1()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onGlob1(head, tail interface{}) (interface{}, error) {
	return reglob.Reglob(head.(string) + joinChars(tail)), nil

}

func (p *parser) callonGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlob1(stack["head"], stack["tail"])
}

func (c *current) onGlobStart4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonGlobStart4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobStart4()
}

func (c *current) onGlobEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonGlobEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEsc1(stack["s"])
}

func (c *current) onGlobEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonGlobEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape2()
}

func (c *current) onGlobEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonGlobEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape4()
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onEscapeSequence2() (interface{}, error) {
	return "\\" + string(c.text), nil
}

func (p *parser) callonEscapeSequence2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapeSequence2()
}

func (c *current) onSingleCharEscape3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleCharEscape3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape3()
}

func (c *current) onSingleCharEscape6() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape6()
}

func (c *current) onSingleCharEscape8() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape8()
}

func (c *current) onSingleCharEscape10() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape10()
}

func (c *current) onSingleCharEscape12() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape12()
}

func (c *current) onSingleCharEscape14() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape14()
}

func (c *current) onSingleCharEscape16() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape16()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexp1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
