// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 7, col: 1, offset: 26},
			expr: &actionExpr{
				pos: position{line: 7, col: 9, offset: 34},
				run: (*parser).callonstart1,
				expr: &seqExpr{
					pos: position{line: 7, col: 9, offset: 34},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 7, col: 9, offset: 34},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 7, col: 12, offset: 37},
							label: "ast",
							expr: &ruleRefExpr{
								pos:  position{line: 7, col: 16, offset: 41},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 27, offset: 52},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 30, offset: 55},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Sequential",
			pos:  position{line: 9, col: 1, offset: 80},
			expr: &actionExpr{
				pos: position{line: 10, col: 5, offset: 95},
				run: (*parser).callonSequential1,
				expr: &seqExpr{
					pos: position{line: 10, col: 5, offset: 95},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 10, col: 5, offset: 95},
							label: "consts",
							expr: &ruleRefExpr{
								pos:  position{line: 10, col: 12, offset: 102},
								name: "Consts",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 10, col: 19, offset: 109},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 10, col: 22, offset: 112},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 10, col: 28, offset: 118},
								name: "Operation",
							},
						},
						&labeledExpr{
							pos:   position{line: 10, col: 38, offset: 128},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 10, col: 43, offset: 133},
								expr: &ruleRefExpr{
									pos:  position{line: 10, col: 43, offset: 133},
									name: "SequentialTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SequentialTail",
			pos:  position{line: 14, col: 1, offset: 303},
			expr: &actionExpr{
				pos: position{line: 14, col: 18, offset: 320},
				run: (*parser).callonSequentialTail1,
				expr: &seqExpr{
					pos: position{line: 14, col: 18, offset: 320},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 14, col: 18, offset: 320},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 14, col: 21, offset: 323},
							name: "Pipe",
						},
						&ruleRefExpr{
							pos:  position{line: 14, col: 26, offset: 328},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 14, col: 29, offset: 331},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 14, col: 31, offset: 333},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Consts",
			pos:  position{line: 16, col: 1, offset: 362},
			expr: &choiceExpr{
				pos: position{line: 17, col: 5, offset: 373},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 17, col: 5, offset: 373},
						expr: &ruleRefExpr{
							pos:  position{line: 17, col: 5, offset: 373},
							name: "Const",
						},
					},
					&actionExpr{
						pos: position{line: 18, col: 5, offset: 384},
						run: (*parser).callonConsts4,
						expr: &ruleRefExpr{
							pos:  position{line: 18, col: 5, offset: 384},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Const",
			pos:  position{line: 20, col: 1, offset: 420},
			expr: &actionExpr{
				pos: position{line: 20, col: 9, offset: 428},
				run: (*parser).callonConst1,
				expr: &seqExpr{
					pos: position{line: 20, col: 9, offset: 428},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 20, col: 9, offset: 428},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 20, col: 12, offset: 431},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 20, col: 14, offset: 433},
								name: "ConstDef",
							},
						},
					},
				},
			},
		},
		{
			name: "ConstDef",
			pos:  position{line: 22, col: 1, offset: 461},
			expr: &choiceExpr{
				pos: position{line: 23, col: 5, offset: 474},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 23, col: 5, offset: 474},
						run: (*parser).callonConstDef2,
						expr: &seqExpr{
							pos: position{line: 23, col: 5, offset: 474},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 23, col: 5, offset: 474},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 23, col: 13, offset: 482},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 23, col: 15, offset: 484},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 23, col: 18, offset: 487},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 23, col: 33, offset: 502},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 23, col: 36, offset: 505},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 23, col: 40, offset: 509},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 23, col: 43, offset: 512},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 23, col: 48, offset: 517},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 26, col: 5, offset: 599},
						run: (*parser).callonConstDef13,
						expr: &seqExpr{
							pos: position{line: 26, col: 5, offset: 599},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 26, col: 5, offset: 599},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 26, col: 12, offset: 606},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 26, col: 14, offset: 608},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 26, col: 17, offset: 611},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 26, col: 32, offset: 626},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 26, col: 35, offset: 629},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 26, col: 39, offset: 633},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 26, col: 42, offset: 636},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 26, col: 46, offset: 640},
										name: "Type",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operation",
			pos:  position{line: 35, col: 1, offset: 863},
			expr: &choiceExpr{
				pos: position{line: 36, col: 5, offset: 877},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 36, col: 5, offset: 877},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 36, col: 5, offset: 877},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 36, col: 5, offset: 877},
									val:        "fork",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 36, col: 12, offset: 884},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 36, col: 15, offset: 887},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 36, col: 19, offset: 891},
									label: "ops",
									expr: &oneOrMoreExpr{
										pos: position{line: 36, col: 23, offset: 895},
										expr: &ruleRefExpr{
											pos:  position{line: 36, col: 23, offset: 895},
											name: "Leg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 36, col: 28, offset: 900},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 36, col: 31, offset: 903},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 39, col: 5, offset: 992},
						run: (*parser).callonOperation12,
						expr: &seqExpr{
							pos: position{line: 39, col: 5, offset: 992},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 39, col: 5, offset: 992},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 39, col: 14, offset: 1001},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 39, col: 16, offset: 1003},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 39, col: 21, offset: 1008},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 39, col: 26, offset: 1013},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 39, col: 28, offset: 1015},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 39, col: 32, offset: 1019},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 39, col: 38, offset: 1025},
										expr: &ruleRefExpr{
											pos:  position{line: 39, col: 38, offset: 1025},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 39, col: 49, offset: 1036},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 39, col: 52, offset: 1039},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 42, col: 5, offset: 1144},
						run: (*parser).callonOperation25,
						expr: &seqExpr{
							pos: position{line: 42, col: 5, offset: 1144},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 42, col: 5, offset: 1144},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 42, col: 14, offset: 1153},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 42, col: 17, offset: 1156},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 42, col: 21, offset: 1160},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 42, col: 27, offset: 1166},
										expr: &ruleRefExpr{
											pos:  position{line: 42, col: 27, offset: 1166},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 42, col: 38, offset: 1177},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 42, col: 41, offset: 1180},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 45, col: 5, offset: 1284},
						run: (*parser).callonOperation35,
						expr: &seqExpr{
							pos: position{line: 45, col: 5, offset: 1284},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 45, col: 5, offset: 1284},
									val:        "from",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 45, col: 12, offset: 1291},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 45, col: 15, offset: 1294},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 45, col: 19, offset: 1298},
									label: "trunks",
									expr: &oneOrMoreExpr{
										pos: position{line: 45, col: 26, offset: 1305},
										expr: &ruleRefExpr{
											pos:  position{line: 45, col: 26, offset: 1305},
											name: "FromLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 45, col: 35, offset: 1314},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 45, col: 38, offset: 1317},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&labeledExpr{
						pos:   position{line: 48, col: 5, offset: 1408},
						label: "op",
						expr: &ruleRefExpr{
							pos:  position{line: 48, col: 8, offset: 1411},
							name: "Operator",
						},
					},
					&actionExpr{
						pos: position{line: 49, col: 5, offset: 1424},
						run: (*parser).callonOperation47,
						expr: &seqExpr{
							pos: position{line: 49, col: 5, offset: 1424},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 49, col: 5, offset: 1424},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 49, col: 7, offset: 1426},
										name: "OpAssignment",
									},
								},
								&andExpr{
									pos: position{line: 49, col: 20, offset: 1439},
									expr: &ruleRefExpr{
										pos:  position{line: 49, col: 21, offset: 1440},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 50, col: 5, offset: 1470},
						run: (*parser).callonOperation53,
						expr: &seqExpr{
							pos: position{line: 50, col: 5, offset: 1470},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 50, col: 5, offset: 1470},
									expr: &seqExpr{
										pos: position{line: 50, col: 7, offset: 1472},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 50, col: 7, offset: 1472},
												name: "Function",
											},
											&ruleRefExpr{
												pos:  position{line: 50, col: 16, offset: 1481},
												name: "EndOfOp",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 50, col: 25, offset: 1490},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 50, col: 27, offset: 1492},
										name: "Aggregation",
									},
								},
								&andExpr{
									pos: position{line: 50, col: 39, offset: 1504},
									expr: &ruleRefExpr{
										pos:  position{line: 50, col: 40, offset: 1505},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 51, col: 5, offset: 1536},
						run: (*parser).callonOperation63,
						expr: &seqExpr{
							pos: position{line: 51, col: 5, offset: 1536},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 51, col: 5, offset: 1536},
									val:        "search",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 51, col: 14, offset: 1545},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 51, col: 16, offset: 1547},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 51, col: 21, offset: 1552},
										name: "SearchBoolean",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 54, col: 5, offset: 1651},
						run: (*parser).callonOperation69,
						expr: &labeledExpr{
							pos:   position{line: 54, col: 5, offset: 1651},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 54, col: 10, offset: 1656},
								name: "SearchBoolean",
							},
						},
					},
					&actionExpr{
						pos: position{line: 57, col: 5, offset: 1755},
						run: (*parser).callonOperation72,
						expr: &labeledExpr{
							pos:   position{line: 57, col: 5, offset: 1755},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 57, col: 10, offset: 1760},
								name: "Cast",
							},
						},
					},
					&actionExpr{
						pos: position{line: 60, col: 5, offset: 1848},
						run: (*parser).callonOperation75,
						expr: &labeledExpr{
							pos:   position{line: 60, col: 5, offset: 1848},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 60, col: 10, offset: 1853},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "EndOfOp",
			pos:  position{line: 64, col: 1, offset: 1940},
			expr: &seqExpr{
				pos: position{line: 64, col: 11, offset: 1950},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 64, col: 11, offset: 1950},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 64, col: 15, offset: 1954},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 64, col: 15, offset: 1954},
								name: "Pipe",
							},
							&ruleRefExpr{
								pos:  position{line: 64, col: 22, offset: 1961},
								name: "SearchKeywordGuard",
							},
							&litMatcher{
								pos:        position{line: 64, col: 43, offset: 1982},
								val:        "=>",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 64, col: 50, offset: 1989},
								val:        ")",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 64, col: 56, offset: 1995},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "Pipe",
			pos:  position{line: 65, col: 1, offset: 2000},
			expr: &seqExpr{
				pos: position{line: 65, col: 8, offset: 2007},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 65, col: 8, offset: 2007},
						val:        "|",
						ignoreCase: false,
					},
					&notExpr{
						pos: position{line: 65, col: 12, offset: 2011},
						expr: &choiceExpr{
							pos: position{line: 65, col: 14, offset: 2013},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 65, col: 14, offset: 2013},
									val:        "{",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 65, col: 20, offset: 2019},
									val:        "[",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Leg",
			pos:  position{line: 67, col: 1, offset: 2025},
			expr: &actionExpr{
				pos: position{line: 68, col: 5, offset: 2033},
				run: (*parser).callonLeg1,
				expr: &seqExpr{
					pos: position{line: 68, col: 5, offset: 2033},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 68, col: 5, offset: 2033},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 68, col: 8, offset: 2036},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 68, col: 13, offset: 2041},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 68, col: 16, offset: 2044},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 68, col: 18, offset: 2046},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchLeg",
			pos:  position{line: 70, col: 1, offset: 2076},
			expr: &actionExpr{
				pos: position{line: 71, col: 5, offset: 2090},
				run: (*parser).callonSwitchLeg1,
				expr: &seqExpr{
					pos: position{line: 71, col: 5, offset: 2090},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 71, col: 5, offset: 2090},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 71, col: 8, offset: 2093},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 71, col: 13, offset: 2098},
								name: "Case",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 71, col: 18, offset: 2103},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 71, col: 21, offset: 2106},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 71, col: 26, offset: 2111},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 71, col: 29, offset: 2114},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 71, col: 32, offset: 2117},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "Case",
			pos:  position{line: 75, col: 1, offset: 2202},
			expr: &choiceExpr{
				pos: position{line: 76, col: 5, offset: 2211},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 76, col: 5, offset: 2211},
						run: (*parser).callonCase2,
						expr: &seqExpr{
							pos: position{line: 76, col: 5, offset: 2211},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 76, col: 5, offset: 2211},
									val:        "case",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 76, col: 12, offset: 2218},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 76, col: 14, offset: 2220},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 76, col: 19, offset: 2225},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 77, col: 5, offset: 2255},
						run: (*parser).callonCase8,
						expr: &litMatcher{
							pos:        position{line: 77, col: 5, offset: 2255},
							val:        "default",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromLeg",
			pos:  position{line: 79, col: 1, offset: 2286},
			expr: &choiceExpr{
				pos: position{line: 80, col: 5, offset: 2298},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 80, col: 5, offset: 2298},
						run: (*parser).callonFromLeg2,
						expr: &seqExpr{
							pos: position{line: 80, col: 5, offset: 2298},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 80, col: 5, offset: 2298},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 80, col: 8, offset: 2301},
									label: "source",
									expr: &ruleRefExpr{
										pos:  position{line: 80, col: 15, offset: 2308},
										name: "FromHead",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 80, col: 24, offset: 2317},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 80, col: 28, offset: 2321},
									label: "seq",
									expr: &ruleRefExpr{
										pos:  position{line: 80, col: 32, offset: 2325},
										name: "Sequential",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 83, col: 5, offset: 2436},
						run: (*parser).callonFromLeg10,
						expr: &seqExpr{
							pos: position{line: 83, col: 5, offset: 2436},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 83, col: 5, offset: 2436},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 83, col: 8, offset: 2439},
									label: "source",
									expr: &ruleRefExpr{
										pos:  position{line: 83, col: 15, offset: 2446},
										name: "FromSource",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FromHead",
			pos:  position{line: 87, col: 1, offset: 2554},
			expr: &actionExpr{
				pos: position{line: 88, col: 5, offset: 2567},
				run: (*parser).callonFromHead1,
				expr: &seqExpr{
					pos: position{line: 88, col: 5, offset: 2567},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 88, col: 5, offset: 2567},
							label: "src",
							expr: &ruleRefExpr{
								pos:  position{line: 88, col: 9, offset: 2571},
								name: "FromSource",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 88, col: 20, offset: 2582},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 88, col: 23, offset: 2585},
							val:        "=>",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromSource",
			pos:  position{line: 90, col: 1, offset: 2611},
			expr: &choiceExpr{
				pos: position{line: 91, col: 5, offset: 2626},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 91, col: 5, offset: 2626},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 92, col: 5, offset: 2635},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 93, col: 5, offset: 2643},
						name: "Pool",
					},
					&ruleRefExpr{
						pos:  position{line: 94, col: 5, offset: 2652},
						name: "PassOp",
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 96, col: 1, offset: 2660},
			expr: &seqExpr{
				pos: position{line: 96, col: 13, offset: 2672},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 96, col: 13, offset: 2672},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 96, col: 17, offset: 2676},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 96, col: 18, offset: 2677},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 96, col: 18, offset: 2677},
										expr: &litMatcher{
											pos:        position{line: 96, col: 19, offset: 2678},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 96, col: 24, offset: 2683},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 96, col: 38, offset: 2697},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 96, col: 57, offset: 2716},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 96, col: 82, offset: 2741},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 96, col: 88, offset: 2747},
								val:        "(",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 96, col: 94, offset: 2753},
								val:        "[",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 96, col: 100, offset: 2759},
								val:        "~",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 98, col: 1, offset: 2765},
			expr: &actionExpr{
				pos: position{line: 98, col: 14, offset: 2778},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 98, col: 15, offset: 2779},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 98, col: 15, offset: 2779},
							val:        "==",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 98, col: 22, offset: 2786},
							val:        "!=",
							ignoreCase: false,
						},
						&seqExpr{
							pos: position{line: 98, col: 30, offset: 2794},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 98, col: 30, offset: 2794},
									val:        "in",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 98, col: 35, offset: 2799},
									expr: &ruleRefExpr{
										pos:  position{line: 98, col: 36, offset: 2800},
										name: "IdentifierRest",
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 98, col: 54, offset: 2818},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 98, col: 61, offset: 2825},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 98, col: 67, offset: 2831},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 98, col: 74, offset: 2838},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 100, col: 1, offset: 2875},
			expr: &actionExpr{
				pos: position{line: 101, col: 5, offset: 2893},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 101, col: 5, offset: 2893},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 101, col: 5, offset: 2893},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 101, col: 11, offset: 2899},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 101, col: 21, offset: 2909},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 101, col: 26, offset: 2914},
								expr: &ruleRefExpr{
									pos:  position{line: 101, col: 26, offset: 2914},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 105, col: 1, offset: 2988},
			expr: &actionExpr{
				pos: position{line: 105, col: 16, offset: 3003},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 105, col: 16, offset: 3003},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 105, col: 16, offset: 3003},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 105, col: 18, offset: 3005},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 105, col: 26, offset: 3013},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 105, col: 28, offset: 3015},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 105, col: 30, offset: 3017},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 107, col: 1, offset: 3067},
			expr: &actionExpr{
				pos: position{line: 108, col: 5, offset: 3081},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 108, col: 5, offset: 3081},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 108, col: 5, offset: 3081},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 108, col: 11, offset: 3087},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 109, col: 5, offset: 3104},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 109, col: 10, offset: 3109},
								expr: &actionExpr{
									pos: position{line: 109, col: 11, offset: 3110},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 109, col: 11, offset: 3110},
										exprs: []interface{}{
											&zeroOrOneExpr{
												pos: position{line: 109, col: 11, offset: 3110},
												expr: &seqExpr{
													pos: position{line: 109, col: 12, offset: 3111},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 109, col: 12, offset: 3111},
															name: "_",
														},
														&ruleRefExpr{
															pos:  position{line: 109, col: 14, offset: 3113},
															name: "AndToken",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 109, col: 25, offset: 3124},
												name: "_",
											},
											&notExpr{
												pos: position{line: 109, col: 27, offset: 3126},
												expr: &choiceExpr{
													pos: position{line: 109, col: 29, offset: 3128},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 109, col: 29, offset: 3128},
															name: "OrToken",
														},
														&ruleRefExpr{
															pos:  position{line: 109, col: 39, offset: 3138},
															name: "SearchKeywordGuard",
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 109, col: 59, offset: 3158},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 109, col: 64, offset: 3163},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchKeywordGuard",
			pos:  position{line: 113, col: 1, offset: 3279},
			expr: &choiceExpr{
				pos: position{line: 114, col: 5, offset: 3302},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 114, col: 5, offset: 3302},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 114, col: 5, offset: 3302},
								name: "FromHead",
							},
							&ruleRefExpr{
								pos:  position{line: 114, col: 14, offset: 3311},
								name: "__",
							},
						},
					},
					&seqExpr{
						pos: position{line: 115, col: 5, offset: 3318},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 115, col: 5, offset: 3318},
								name: "Case",
							},
							&ruleRefExpr{
								pos:  position{line: 115, col: 10, offset: 3323},
								name: "__",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 117, col: 1, offset: 3327},
			expr: &choiceExpr{
				pos: position{line: 118, col: 5, offset: 3344},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 118, col: 5, offset: 3344},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 118, col: 5, offset: 3344},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 118, col: 6, offset: 3345},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 118, col: 6, offset: 3345},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 118, col: 6, offset: 3345},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 118, col: 15, offset: 3354},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 118, col: 19, offset: 3358},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 118, col: 19, offset: 3358},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 118, col: 23, offset: 3362},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 118, col: 27, offset: 3366},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 118, col: 29, offset: 3368},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 121, col: 5, offset: 3480},
						run: (*parser).callonSearchFactor13,
						expr: &seqExpr{
							pos: position{line: 121, col: 5, offset: 3480},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 121, col: 5, offset: 3480},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 121, col: 9, offset: 3484},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 121, col: 12, offset: 3487},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 121, col: 17, offset: 3492},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 121, col: 31, offset: 3506},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 121, col: 34, offset: 3509},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 122, col: 5, offset: 3538},
						name: "SearchExpr",
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 124, col: 1, offset: 3550},
			expr: &choiceExpr{
				pos: position{line: 125, col: 5, offset: 3565},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 125, col: 5, offset: 3565},
						name: "Glob",
					},
					&ruleRefExpr{
						pos:  position{line: 126, col: 5, offset: 3574},
						name: "Regexp",
					},
					&actionExpr{
						pos: position{line: 127, col: 5, offset: 3585},
						run: (*parser).callonSearchExpr4,
						expr: &seqExpr{
							pos: position{line: 127, col: 5, offset: 3585},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 127, col: 5, offset: 3585},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 127, col: 7, offset: 3587},
										name: "SearchValue",
									},
								},
								&choiceExpr{
									pos: position{line: 127, col: 20, offset: 3600},
									alternatives: []interface{}{
										&notExpr{
											pos: position{line: 127, col: 20, offset: 3600},
											expr: &ruleRefExpr{
												pos:  position{line: 127, col: 21, offset: 3601},
												name: "ExprGuard",
											},
										},
										&andExpr{
											pos: position{line: 127, col: 33, offset: 3613},
											expr: &seqExpr{
												pos: position{line: 127, col: 35, offset: 3615},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 127, col: 35, offset: 3615},
														name: "_",
													},
													&ruleRefExpr{
														pos:  position{line: 127, col: 37, offset: 3617},
														name: "Glob",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 130, col: 5, offset: 3729},
						run: (*parser).callonSearchExpr15,
						expr: &seqExpr{
							pos: position{line: 130, col: 5, offset: 3729},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 130, col: 5, offset: 3729},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 130, col: 9, offset: 3733},
									expr: &ruleRefExpr{
										pos:  position{line: 130, col: 10, offset: 3734},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 133, col: 5, offset: 3850},
						name: "SearchPredicate",
					},
				},
			},
		},
		{
			name: "SearchPredicate",
			pos:  position{line: 135, col: 1, offset: 3867},
			expr: &choiceExpr{
				pos: position{line: 136, col: 5, offset: 3887},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 136, col: 5, offset: 3887},
						run: (*parser).callonSearchPredicate2,
						expr: &seqExpr{
							pos: position{line: 136, col: 5, offset: 3887},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 136, col: 5, offset: 3887},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 136, col: 9, offset: 3891},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 136, col: 22, offset: 3904},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 136, col: 25, offset: 3907},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 136, col: 28, offset: 3910},
										name: "Comparator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 136, col: 39, offset: 3921},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 136, col: 42, offset: 3924},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 136, col: 46, offset: 3928},
										name: "AdditiveExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 139, col: 6, offset: 4051},
						run: (*parser).callonSearchPredicate12,
						expr: &seqExpr{
							pos: position{line: 139, col: 6, offset: 4051},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 139, col: 6, offset: 4051},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 139, col: 12, offset: 4057},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 139, col: 21, offset: 4066},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 139, col: 26, offset: 4071},
										expr: &ruleRefExpr{
											pos:  position{line: 139, col: 27, offset: 4072},
											name: "Deref",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 143, col: 1, offset: 4144},
			expr: &choiceExpr{
				pos: position{line: 144, col: 5, offset: 4160},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 144, col: 5, offset: 4160},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 145, col: 5, offset: 4172},
						run: (*parser).callonSearchValue3,
						expr: &seqExpr{
							pos: position{line: 145, col: 5, offset: 4172},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 145, col: 5, offset: 4172},
									expr: &ruleRefExpr{
										pos:  position{line: 145, col: 6, offset: 4173},
										name: "RegexpPattern",
									},
								},
								&labeledExpr{
									pos:   position{line: 145, col: 20, offset: 4187},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 145, col: 22, offset: 4189},
										name: "KeyWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Glob",
			pos:  position{line: 149, col: 1, offset: 4297},
			expr: &actionExpr{
				pos: position{line: 150, col: 5, offset: 4306},
				run: (*parser).callonGlob1,
				expr: &labeledExpr{
					pos:   position{line: 150, col: 5, offset: 4306},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 150, col: 13, offset: 4314},
						name: "GlobPattern",
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 154, col: 1, offset: 4410},
			expr: &actionExpr{
				pos: position{line: 155, col: 5, offset: 4421},
				run: (*parser).callonRegexp1,
				expr: &labeledExpr{
					pos:   position{line: 155, col: 5, offset: 4421},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 155, col: 13, offset: 4429},
						name: "RegexpPattern",
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 161, col: 1, offset: 4555},
			expr: &choiceExpr{
				pos: position{line: 162, col: 5, offset: 4571},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 162, col: 5, offset: 4571},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 162, col: 5, offset: 4571},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 162, col: 5, offset: 4571},
									expr: &ruleRefExpr{
										pos:  position{line: 162, col: 5, offset: 4571},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 162, col: 16, offset: 4582},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 162, col: 21, offset: 4587},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 162, col: 33, offset: 4599},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 162, col: 39, offset: 4605},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 165, col: 5, offset: 4731},
						run: (*parser).callonAggregation10,
						expr: &seqExpr{
							pos: position{line: 165, col: 5, offset: 4731},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 165, col: 5, offset: 4731},
									expr: &ruleRefExpr{
										pos:  position{line: 165, col: 5, offset: 4731},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 165, col: 16, offset: 4742},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 165, col: 21, offset: 4747},
										name: "AggAssignments",
									},
								},
								&labeledExpr{
									pos:   position{line: 165, col: 36, offset: 4762},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 165, col: 41, offset: 4767},
										expr: &seqExpr{
											pos: position{line: 165, col: 42, offset: 4768},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 165, col: 42, offset: 4768},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 165, col: 44, offset: 4770},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 165, col: 58, offset: 4784},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 165, col: 64, offset: 4790},
										name: "LimitArg",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Summarize",
			pos:  position{line: 173, col: 1, offset: 5004},
			expr: &seqExpr{
				pos: position{line: 173, col: 13, offset: 5016},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 173, col: 13, offset: 5016},
						val:        "summarize",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 173, col: 25, offset: 5028},
						name: "_",
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 175, col: 1, offset: 5031},
			expr: &actionExpr{
				pos: position{line: 176, col: 5, offset: 5047},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 176, col: 5, offset: 5047},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 176, col: 5, offset: 5047},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 176, col: 13, offset: 5055},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 176, col: 15, offset: 5057},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 176, col: 23, offset: 5065},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 178, col: 1, offset: 5106},
			expr: &choiceExpr{
				pos: position{line: 179, col: 5, offset: 5119},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 179, col: 5, offset: 5119},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 179, col: 5, offset: 5119},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 179, col: 5, offset: 5119},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 179, col: 7, offset: 5121},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 179, col: 14, offset: 5128},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 179, col: 16, offset: 5130},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 179, col: 25, offset: 5139},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 179, col: 27, offset: 5141},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 179, col: 33, offset: 5147},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 180, col: 5, offset: 5178},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 180, col: 5, offset: 5178},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 185, col: 1, offset: 5438},
			expr: &choiceExpr{
				pos: position{line: 186, col: 5, offset: 5457},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 186, col: 5, offset: 5457},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 187, col: 5, offset: 5472},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 187, col: 5, offset: 5472},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 187, col: 10, offset: 5477},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 189, col: 1, offset: 5569},
			expr: &actionExpr{
				pos: position{line: 190, col: 5, offset: 5589},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 190, col: 5, offset: 5589},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 190, col: 5, offset: 5589},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 190, col: 11, offset: 5595},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 190, col: 26, offset: 5610},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 190, col: 31, offset: 5615},
								expr: &actionExpr{
									pos: position{line: 190, col: 32, offset: 5616},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 190, col: 32, offset: 5616},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 190, col: 32, offset: 5616},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 190, col: 35, offset: 5619},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 190, col: 39, offset: 5623},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 190, col: 42, offset: 5626},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 190, col: 47, offset: 5631},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignment",
			pos:  position{line: 194, col: 1, offset: 5753},
			expr: &choiceExpr{
				pos: position{line: 195, col: 5, offset: 5771},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 195, col: 5, offset: 5771},
						run: (*parser).callonAggAssignment2,
						expr: &seqExpr{
							pos: position{line: 195, col: 5, offset: 5771},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 195, col: 5, offset: 5771},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 195, col: 10, offset: 5776},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 195, col: 15, offset: 5781},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 195, col: 18, offset: 5784},
									val:        ":=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 195, col: 23, offset: 5789},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 195, col: 26, offset: 5792},
									label: "agg",
									expr: &ruleRefExpr{
										pos:  position{line: 195, col: 30, offset: 5796},
										name: "Agg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 198, col: 5, offset: 5900},
						run: (*parser).callonAggAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 198, col: 5, offset: 5900},
							label: "agg",
							expr: &ruleRefExpr{
								pos:  position{line: 198, col: 9, offset: 5904},
								name: "Agg",
							},
						},
					},
				},
			},
		},
		{
			name: "Agg",
			pos:  position{line: 202, col: 1, offset: 6004},
			expr: &actionExpr{
				pos: position{line: 203, col: 5, offset: 6012},
				run: (*parser).callonAgg1,
				expr: &seqExpr{
					pos: position{line: 203, col: 5, offset: 6012},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 203, col: 5, offset: 6012},
							expr: &ruleRefExpr{
								pos:  position{line: 203, col: 6, offset: 6013},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 203, col: 16, offset: 6023},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 203, col: 19, offset: 6026},
								name: "AggName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 203, col: 27, offset: 6034},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 203, col: 30, offset: 6037},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 203, col: 34, offset: 6041},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 203, col: 37, offset: 6044},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 203, col: 42, offset: 6049},
								expr: &ruleRefExpr{
									pos:  position{line: 203, col: 42, offset: 6049},
									name: "Expr",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 203, col: 49, offset: 6056},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 203, col: 52, offset: 6059},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 203, col: 56, offset: 6063},
							expr: &seqExpr{
								pos: position{line: 203, col: 58, offset: 6065},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 203, col: 58, offset: 6065},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 203, col: 61, offset: 6068},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 203, col: 66, offset: 6073},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 203, col: 72, offset: 6079},
								expr: &ruleRefExpr{
									pos:  position{line: 203, col: 72, offset: 6079},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggName",
			pos:  position{line: 211, col: 1, offset: 6269},
			expr: &choiceExpr{
				pos: position{line: 212, col: 5, offset: 6281},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 212, col: 5, offset: 6281},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 213, col: 5, offset: 6300},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 214, col: 5, offset: 6313},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 216, col: 1, offset: 6322},
			expr: &actionExpr{
				pos: position{line: 216, col: 15, offset: 6336},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 216, col: 15, offset: 6336},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 216, col: 15, offset: 6336},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 216, col: 17, offset: 6338},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 216, col: 25, offset: 6346},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 216, col: 27, offset: 6348},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 216, col: 32, offset: 6353},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignments",
			pos:  position{line: 218, col: 1, offset: 6389},
			expr: &actionExpr{
				pos: position{line: 219, col: 5, offset: 6408},
				run: (*parser).callonAggAssignments1,
				expr: &seqExpr{
					pos: position{line: 219, col: 5, offset: 6408},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 219, col: 5, offset: 6408},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 219, col: 11, offset: 6414},
								name: "AggAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 219, col: 25, offset: 6428},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 219, col: 30, offset: 6433},
								expr: &seqExpr{
									pos: position{line: 219, col: 31, offset: 6434},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 219, col: 31, offset: 6434},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 219, col: 34, offset: 6437},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 219, col: 38, offset: 6441},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 219, col: 41, offset: 6444},
											name: "AggAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 229, col: 1, offset: 6668},
			expr: &choiceExpr{
				pos: position{line: 230, col: 5, offset: 6681},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 230, col: 5, offset: 6681},
						name: "AssertOp",
					},
					&ruleRefExpr{
						pos:  position{line: 231, col: 5, offset: 6694},
						name: "SortOp",
					},
					&ruleRefExpr{
						pos:  position{line: 232, col: 5, offset: 6705},
						name: "TopOp",
					},
					&ruleRefExpr{
						pos:  position{line: 233, col: 5, offset: 6715},
						name: "CutOp",
					},
					&ruleRefExpr{
						pos:  position{line: 234, col: 5, offset: 6725},
						name: "DropOp",
					},
					&ruleRefExpr{
						pos:  position{line: 235, col: 5, offset: 6736},
						name: "HeadOp",
					},
					&ruleRefExpr{
						pos:  position{line: 236, col: 5, offset: 6747},
						name: "TailOp",
					},
					&ruleRefExpr{
						pos:  position{line: 237, col: 5, offset: 6758},
						name: "WhereOp",
					},
					&ruleRefExpr{
						pos:  position{line: 238, col: 5, offset: 6770},
						name: "UniqOp",
					},
					&ruleRefExpr{
						pos:  position{line: 239, col: 5, offset: 6781},
						name: "PutOp",
					},
					&ruleRefExpr{
						pos:  position{line: 240, col: 5, offset: 6791},
						name: "RenameOp",
					},
					&ruleRefExpr{
						pos:  position{line: 241, col: 5, offset: 6804},
						name: "FuseOp",
					},
					&ruleRefExpr{
						pos:  position{line: 242, col: 5, offset: 6815},
						name: "ShapeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 243, col: 5, offset: 6827},
						name: "JoinOp",
					},
					&ruleRefExpr{
						pos:  position{line: 244, col: 5, offset: 6838},
						name: "SampleOp",
					},
					&ruleRefExpr{
						pos:  position{line: 245, col: 5, offset: 6851},
						name: "SQLOp",
					},
					&ruleRefExpr{
						pos:  position{line: 246, col: 5, offset: 6861},
						name: "FromOp",
					},
					&ruleRefExpr{
						pos:  position{line: 247, col: 5, offset: 6872},
						name: "PassOp",
					},
					&ruleRefExpr{
						pos:  position{line: 248, col: 5, offset: 6883},
						name: "ExplodeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 249, col: 5, offset: 6897},
						name: "MergeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 250, col: 5, offset: 6909},
						name: "OverOp",
					},
					&ruleRefExpr{
						pos:  position{line: 251, col: 5, offset: 6920},
						name: "YieldOp",
					},
				},
			},
		},
		{
			name: "AssertOp",
			pos:  position{line: 253, col: 1, offset: 6929},
			expr: &actionExpr{
				pos: position{line: 254, col: 5, offset: 6942},
				run: (*parser).callonAssertOp1,
				expr: &seqExpr{
					pos: position{line: 254, col: 5, offset: 6942},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 254, col: 5, offset: 6942},
							val:        "assert",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 254, col: 14, offset: 6951},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 254, col: 16, offset: 6953},
							label: "expr",
							expr: &actionExpr{
								pos: position{line: 254, col: 22, offset: 6959},
								run: (*parser).callonAssertOp6,
								expr: &labeledExpr{
									pos:   position{line: 254, col: 22, offset: 6959},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 254, col: 24, offset: 6961},
										name: "Expr",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortOp",
			pos:  position{line: 290, col: 1, offset: 8312},
			expr: &actionExpr{
				pos: position{line: 291, col: 5, offset: 8323},
				run: (*parser).callonSortOp1,
				expr: &seqExpr{
					pos: position{line: 291, col: 5, offset: 8323},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 291, col: 5, offset: 8323},
							val:        "sort",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 291, col: 12, offset: 8330},
							expr: &ruleRefExpr{
								pos:  position{line: 291, col: 13, offset: 8331},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 291, col: 18, offset: 8336},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 291, col: 23, offset: 8341},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 291, col: 32, offset: 8350},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 291, col: 37, offset: 8355},
								expr: &actionExpr{
									pos: position{line: 291, col: 38, offset: 8356},
									run: (*parser).callonSortOp10,
									expr: &seqExpr{
										pos: position{line: 291, col: 38, offset: 8356},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 291, col: 38, offset: 8356},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 291, col: 40, offset: 8358},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 291, col: 42, offset: 8360},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 305, col: 1, offset: 8771},
			expr: &actionExpr{
				pos: position{line: 305, col: 12, offset: 8782},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 305, col: 12, offset: 8782},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 305, col: 17, offset: 8787},
						expr: &actionExpr{
							pos: position{line: 305, col: 18, offset: 8788},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 305, col: 18, offset: 8788},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 305, col: 18, offset: 8788},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 305, col: 20, offset: 8790},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 305, col: 22, offset: 8792},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 307, col: 1, offset: 8848},
			expr: &choiceExpr{
				pos: position{line: 308, col: 5, offset: 8860},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 308, col: 5, offset: 8860},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 308, col: 5, offset: 8860},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 309, col: 5, offset: 8935},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 309, col: 5, offset: 8935},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 309, col: 5, offset: 8935},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 309, col: 14, offset: 8944},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 309, col: 16, offset: 8946},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 309, col: 23, offset: 8953},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 309, col: 24, offset: 8954},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 309, col: 24, offset: 8954},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 309, col: 34, offset: 8964},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopOp",
			pos:  position{line: 311, col: 1, offset: 9078},
			expr: &actionExpr{
				pos: position{line: 312, col: 5, offset: 9088},
				run: (*parser).callonTopOp1,
				expr: &seqExpr{
					pos: position{line: 312, col: 5, offset: 9088},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 312, col: 5, offset: 9088},
							val:        "top",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 312, col: 11, offset: 9094},
							expr: &ruleRefExpr{
								pos:  position{line: 312, col: 12, offset: 9095},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 312, col: 17, offset: 9100},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 312, col: 23, offset: 9106},
								expr: &actionExpr{
									pos: position{line: 312, col: 24, offset: 9107},
									run: (*parser).callonTopOp8,
									expr: &seqExpr{
										pos: position{line: 312, col: 24, offset: 9107},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 312, col: 24, offset: 9107},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 312, col: 26, offset: 9109},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 312, col: 28, offset: 9111},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 312, col: 52, offset: 9135},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 312, col: 58, offset: 9141},
								expr: &seqExpr{
									pos: position{line: 312, col: 59, offset: 9142},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 312, col: 59, offset: 9142},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 312, col: 61, offset: 9144},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 312, col: 72, offset: 9155},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 312, col: 79, offset: 9162},
								expr: &actionExpr{
									pos: position{line: 312, col: 80, offset: 9163},
									run: (*parser).callonTopOp20,
									expr: &seqExpr{
										pos: position{line: 312, col: 80, offset: 9163},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 312, col: 80, offset: 9163},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 312, col: 82, offset: 9165},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 312, col: 84, offset: 9167},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutOp",
			pos:  position{line: 326, col: 1, offset: 9502},
			expr: &actionExpr{
				pos: position{line: 327, col: 5, offset: 9512},
				run: (*parser).callonCutOp1,
				expr: &seqExpr{
					pos: position{line: 327, col: 5, offset: 9512},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 327, col: 5, offset: 9512},
							val:        "cut",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 327, col: 11, offset: 9518},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 327, col: 13, offset: 9520},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 327, col: 18, offset: 9525},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropOp",
			pos:  position{line: 331, col: 1, offset: 9620},
			expr: &actionExpr{
				pos: position{line: 332, col: 5, offset: 9631},
				run: (*parser).callonDropOp1,
				expr: &seqExpr{
					pos: position{line: 332, col: 5, offset: 9631},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 332, col: 5, offset: 9631},
							val:        "drop",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 332, col: 12, offset: 9638},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 332, col: 14, offset: 9640},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 332, col: 19, offset: 9645},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadOp",
			pos:  position{line: 336, col: 1, offset: 9736},
			expr: &choiceExpr{
				pos: position{line: 337, col: 5, offset: 9747},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 337, col: 5, offset: 9747},
						run: (*parser).callonHeadOp2,
						expr: &seqExpr{
							pos: position{line: 337, col: 5, offset: 9747},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 337, col: 5, offset: 9747},
									val:        "head",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 337, col: 12, offset: 9754},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 337, col: 14, offset: 9756},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 337, col: 20, offset: 9762},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 338, col: 5, offset: 9842},
						run: (*parser).callonHeadOp8,
						expr: &litMatcher{
							pos:        position{line: 338, col: 5, offset: 9842},
							val:        "head",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TailOp",
			pos:  position{line: 340, col: 1, offset: 9917},
			expr: &choiceExpr{
				pos: position{line: 341, col: 5, offset: 9928},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 341, col: 5, offset: 9928},
						run: (*parser).callonTailOp2,
						expr: &seqExpr{
							pos: position{line: 341, col: 5, offset: 9928},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 341, col: 5, offset: 9928},
									val:        "tail",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 341, col: 12, offset: 9935},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 341, col: 14, offset: 9937},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 341, col: 20, offset: 9943},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 342, col: 5, offset: 10023},
						run: (*parser).callonTailOp8,
						expr: &litMatcher{
							pos:        position{line: 342, col: 5, offset: 10023},
							val:        "tail",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "WhereOp",
			pos:  position{line: 344, col: 1, offset: 10098},
			expr: &actionExpr{
				pos: position{line: 345, col: 5, offset: 10110},
				run: (*parser).callonWhereOp1,
				expr: &seqExpr{
					pos: position{line: 345, col: 5, offset: 10110},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 345, col: 5, offset: 10110},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 345, col: 13, offset: 10118},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 345, col: 15, offset: 10120},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 345, col: 20, offset: 10125},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "UniqOp",
			pos:  position{line: 349, col: 1, offset: 10211},
			expr: &choiceExpr{
				pos: position{line: 350, col: 5, offset: 10222},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 350, col: 5, offset: 10222},
						run: (*parser).callonUniqOp2,
						expr: &seqExpr{
							pos: position{line: 350, col: 5, offset: 10222},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 350, col: 5, offset: 10222},
									val:        "uniq",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 350, col: 12, offset: 10229},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 350, col: 14, offset: 10231},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 353, col: 5, offset: 10320},
						run: (*parser).callonUniqOp7,
						expr: &litMatcher{
							pos:        position{line: 353, col: 5, offset: 10320},
							val:        "uniq",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PutOp",
			pos:  position{line: 357, col: 1, offset: 10409},
			expr: &actionExpr{
				pos: position{line: 358, col: 5, offset: 10419},
				run: (*parser).callonPutOp1,
				expr: &seqExpr{
					pos: position{line: 358, col: 5, offset: 10419},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 358, col: 5, offset: 10419},
							val:        "put",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 358, col: 11, offset: 10425},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 358, col: 13, offset: 10427},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 358, col: 18, offset: 10432},
								name: "Assignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameOp",
			pos:  position{line: 362, col: 1, offset: 10523},
			expr: &actionExpr{
				pos: position{line: 363, col: 5, offset: 10536},
				run: (*parser).callonRenameOp1,
				expr: &seqExpr{
					pos: position{line: 363, col: 5, offset: 10536},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 363, col: 5, offset: 10536},
							val:        "rename",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 363, col: 14, offset: 10545},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 363, col: 16, offset: 10547},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 363, col: 22, offset: 10553},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 363, col: 33, offset: 10564},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 363, col: 38, offset: 10569},
								expr: &actionExpr{
									pos: position{line: 363, col: 39, offset: 10570},
									run: (*parser).callonRenameOp9,
									expr: &seqExpr{
										pos: position{line: 363, col: 39, offset: 10570},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 363, col: 39, offset: 10570},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 363, col: 42, offset: 10573},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 363, col: 46, offset: 10577},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 363, col: 49, offset: 10580},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 363, col: 52, offset: 10583},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseOp",
			pos:  position{line: 371, col: 1, offset: 10990},
			expr: &actionExpr{
				pos: position{line: 372, col: 5, offset: 11001},
				run: (*parser).callonFuseOp1,
				expr: &seqExpr{
					pos: position{line: 372, col: 5, offset: 11001},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 372, col: 5, offset: 11001},
							val:        "fuse",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 372, col: 12, offset: 11008},
							expr: &seqExpr{
								pos: position{line: 372, col: 14, offset: 11010},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 372, col: 14, offset: 11010},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 372, col: 17, offset: 11013},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 372, col: 22, offset: 11018},
							expr: &ruleRefExpr{
								pos:  position{line: 372, col: 23, offset: 11019},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "ShapeOp",
			pos:  position{line: 376, col: 1, offset: 11090},
			expr: &actionExpr{
				pos: position{line: 377, col: 5, offset: 11102},
				run: (*parser).callonShapeOp1,
				expr: &seqExpr{
					pos: position{line: 377, col: 5, offset: 11102},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 377, col: 5, offset: 11102},
							val:        "shape",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 377, col: 13, offset: 11110},
							expr: &seqExpr{
								pos: position{line: 377, col: 15, offset: 11112},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 377, col: 15, offset: 11112},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 377, col: 18, offset: 11115},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 377, col: 23, offset: 11120},
							expr: &ruleRefExpr{
								pos:  position{line: 377, col: 24, offset: 11121},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "JoinOp",
			pos:  position{line: 381, col: 1, offset: 11193},
			expr: &choiceExpr{
				pos: position{line: 382, col: 5, offset: 11204},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 382, col: 5, offset: 11204},
						run: (*parser).callonJoinOp2,
						expr: &seqExpr{
							pos: position{line: 382, col: 5, offset: 11204},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 382, col: 5, offset: 11204},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 382, col: 11, offset: 11210},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 382, col: 21, offset: 11220},
									val:        "join",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 382, col: 28, offset: 11227},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 382, col: 30, offset: 11229},
									name: "ON",
								},
								&ruleRefExpr{
									pos:  position{line: 382, col: 33, offset: 11232},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 382, col: 35, offset: 11234},
									label: "leftKey",
									expr: &ruleRefExpr{
										pos:  position{line: 382, col: 43, offset: 11242},
										name: "JoinKey",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 382, col: 51, offset: 11250},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 382, col: 54, offset: 11253},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 382, col: 58, offset: 11257},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 382, col: 61, offset: 11260},
									label: "rightKey",
									expr: &ruleRefExpr{
										pos:  position{line: 382, col: 70, offset: 11269},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 382, col: 78, offset: 11277},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 382, col: 86, offset: 11285},
										expr: &seqExpr{
											pos: position{line: 382, col: 87, offset: 11286},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 382, col: 87, offset: 11286},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 382, col: 89, offset: 11288},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 389, col: 5, offset: 11548},
						run: (*parser).callonJoinOp22,
						expr: &seqExpr{
							pos: position{line: 389, col: 5, offset: 11548},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 389, col: 5, offset: 11548},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 389, col: 11, offset: 11554},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 389, col: 22, offset: 11565},
									val:        "join",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 389, col: 29, offset: 11572},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 389, col: 31, offset: 11574},
									name: "ON",
								},
								&ruleRefExpr{
									pos:  position{line: 389, col: 34, offset: 11577},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 389, col: 36, offset: 11579},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 389, col: 40, offset: 11583},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 389, col: 48, offset: 11591},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 389, col: 56, offset: 11599},
										expr: &seqExpr{
											pos: position{line: 389, col: 57, offset: 11600},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 389, col: 57, offset: 11600},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 389, col: 59, offset: 11602},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinStyle",
			pos:  position{line: 397, col: 1, offset: 11850},
			expr: &choiceExpr{
				pos: position{line: 398, col: 5, offset: 11864},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 398, col: 5, offset: 11864},
						run: (*parser).callonJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 398, col: 5, offset: 11864},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 398, col: 5, offset: 11864},
									val:        "anti",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 398, col: 12, offset: 11871},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 399, col: 5, offset: 11901},
						run: (*parser).callonJoinStyle6,
						expr: &seqExpr{
							pos: position{line: 399, col: 5, offset: 11901},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 399, col: 5, offset: 11901},
									val:        "inner",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 399, col: 13, offset: 11909},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 400, col: 5, offset: 11939},
						run: (*parser).callonJoinStyle10,
						expr: &seqExpr{
							pos: position{line: 400, col: 5, offset: 11939},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 400, col: 5, offset: 11939},
									val:        "left",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 400, col: 13, offset: 11947},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 401, col: 5, offset: 11976},
						run: (*parser).callonJoinStyle14,
						expr: &seqExpr{
							pos: position{line: 401, col: 5, offset: 11976},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 401, col: 5, offset: 11976},
									val:        "right",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 401, col: 13, offset: 11984},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 402, col: 5, offset: 12014},
						run: (*parser).callonJoinStyle18,
						expr: &litMatcher{
							pos:        position{line: 402, col: 5, offset: 12014},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 404, col: 1, offset: 12050},
			expr: &choiceExpr{
				pos: position{line: 405, col: 5, offset: 12062},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 405, col: 5, offset: 12062},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 406, col: 5, offset: 12071},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 406, col: 5, offset: 12071},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 406, col: 5, offset: 12071},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 406, col: 9, offset: 12075},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 406, col: 14, offset: 12080},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 406, col: 19, offset: 12085},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SampleOp",
			pos:  position{line: 408, col: 1, offset: 12111},
			expr: &actionExpr{
				pos: position{line: 409, col: 5, offset: 12124},
				run: (*parser).callonSampleOp1,
				expr: &seqExpr{
					pos: position{line: 409, col: 5, offset: 12124},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 409, col: 5, offset: 12124},
							val:        "sample",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 409, col: 14, offset: 12133},
							expr: &ruleRefExpr{
								pos:  position{line: 409, col: 15, offset: 12134},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 409, col: 20, offset: 12139},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 409, col: 22, offset: 12141},
								name: "SampleExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "OpAssignment",
			pos:  position{line: 451, col: 1, offset: 13641},
			expr: &actionExpr{
				pos: position{line: 452, col: 5, offset: 13658},
				run: (*parser).callonOpAssignment1,
				expr: &labeledExpr{
					pos:   position{line: 452, col: 5, offset: 13658},
					label: "a",
					expr: &ruleRefExpr{
						pos:  position{line: 452, col: 7, offset: 13660},
						name: "Assignments",
					},
				},
			},
		},
		{
			name: "SampleExpr",
			pos:  position{line: 456, col: 1, offset: 13760},
			expr: &choiceExpr{
				pos: position{line: 457, col: 5, offset: 13775},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 457, col: 5, offset: 13775},
						run: (*parser).callonSampleExpr2,
						expr: &seqExpr{
							pos: position{line: 457, col: 5, offset: 13775},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 457, col: 5, offset: 13775},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 457, col: 7, offset: 13777},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 457, col: 12, offset: 13782},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 458, col: 5, offset: 13811},
						run: (*parser).callonSampleExpr7,
						expr: &litMatcher{
							pos:        position{line: 458, col: 5, offset: 13811},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromOp",
			pos:  position{line: 460, col: 1, offset: 13882},
			expr: &actionExpr{
				pos: position{line: 461, col: 5, offset: 13893},
				run: (*parser).callonFromOp1,
				expr: &labeledExpr{
					pos:   position{line: 461, col: 5, offset: 13893},
					label: "source",
					expr: &ruleRefExpr{
						pos:  position{line: 461, col: 12, offset: 13900},
						name: "FromAny",
					},
				},
			},
		},
		{
			name: "FromAny",
			pos:  position{line: 465, col: 1, offset: 14056},
			expr: &choiceExpr{
				pos: position{line: 466, col: 5, offset: 14068},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 466, col: 5, offset: 14068},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 467, col: 5, offset: 14077},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 468, col: 5, offset: 14085},
						name: "From",
					},
				},
			},
		},
		{
			name: "File",
			pos:  position{line: 470, col: 1, offset: 14091},
			expr: &actionExpr{
				pos: position{line: 471, col: 5, offset: 14100},
				run: (*parser).callonFile1,
				expr: &seqExpr{
					pos: position{line: 471, col: 5, offset: 14100},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 471, col: 5, offset: 14100},
							val:        "file",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 471, col: 12, offset: 14107},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 471, col: 14, offset: 14109},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 471, col: 19, offset: 14114},
								name: "Path",
							},
						},
						&labeledExpr{
							pos:   position{line: 471, col: 24, offset: 14119},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 471, col: 31, offset: 14126},
								expr: &ruleRefExpr{
									pos:  position{line: 471, col: 31, offset: 14126},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 471, col: 42, offset: 14137},
							label: "layout",
							expr: &zeroOrOneExpr{
								pos: position{line: 471, col: 49, offset: 14144},
								expr: &ruleRefExpr{
									pos:  position{line: 471, col: 49, offset: 14144},
									name: "LayoutArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "From",
			pos:  position{line: 475, col: 1, offset: 14273},
			expr: &actionExpr{
				pos: position{line: 476, col: 5, offset: 14282},
				run: (*parser).callonFrom1,
				expr: &seqExpr{
					pos: position{line: 476, col: 5, offset: 14282},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 476, col: 5, offset: 14282},
							val:        "from",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 476, col: 12, offset: 14289},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 476, col: 14, offset: 14291},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 476, col: 19, offset: 14296},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "Pool",
			pos:  position{line: 478, col: 1, offset: 14327},
			expr: &actionExpr{
				pos: position{line: 479, col: 5, offset: 14336},
				run: (*parser).callonPool1,
				expr: &seqExpr{
					pos: position{line: 479, col: 5, offset: 14336},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 479, col: 5, offset: 14336},
							val:        "pool",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 479, col: 12, offset: 14343},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 479, col: 14, offset: 14345},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 479, col: 19, offset: 14350},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolBody",
			pos:  position{line: 481, col: 1, offset: 14381},
			expr: &actionExpr{
				pos: position{line: 482, col: 5, offset: 14394},
				run: (*parser).callonPoolBody1,
				expr: &seqExpr{
					pos: position{line: 482, col: 5, offset: 14394},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 482, col: 5, offset: 14394},
							label: "spec",
							expr: &ruleRefExpr{
								pos:  position{line: 482, col: 10, offset: 14399},
								name: "PoolSpec",
							},
						},
						&labeledExpr{
							pos:   position{line: 482, col: 19, offset: 14408},
							label: "at",
							expr: &zeroOrOneExpr{
								pos: position{line: 482, col: 22, offset: 14411},
								expr: &ruleRefExpr{
									pos:  position{line: 482, col: 22, offset: 14411},
									name: "PoolAt",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 482, col: 30, offset: 14419},
							label: "over",
							expr: &zeroOrOneExpr{
								pos: position{line: 482, col: 35, offset: 14424},
								expr: &ruleRefExpr{
									pos:  position{line: 482, col: 35, offset: 14424},
									name: "PoolRange",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 482, col: 46, offset: 14435},
							label: "order",
							expr: &zeroOrOneExpr{
								pos: position{line: 482, col: 52, offset: 14441},
								expr: &ruleRefExpr{
									pos:  position{line: 482, col: 52, offset: 14441},
									name: "OrderArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Get",
			pos:  position{line: 486, col: 1, offset: 14577},
			expr: &actionExpr{
				pos: position{line: 487, col: 5, offset: 14585},
				run: (*parser).callonGet1,
				expr: &seqExpr{
					pos: position{line: 487, col: 5, offset: 14585},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 487, col: 5, offset: 14585},
							val:        "get",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 487, col: 11, offset: 14591},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 487, col: 13, offset: 14593},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 487, col: 17, offset: 14597},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 487, col: 21, offset: 14601},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 487, col: 28, offset: 14608},
								expr: &ruleRefExpr{
									pos:  position{line: 487, col: 28, offset: 14608},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 487, col: 39, offset: 14619},
							label: "layout",
							expr: &zeroOrOneExpr{
								pos: position{line: 487, col: 46, offset: 14626},
								expr: &ruleRefExpr{
									pos:  position{line: 487, col: 46, offset: 14626},
									name: "LayoutArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 491, col: 1, offset: 14752},
			expr: &actionExpr{
				pos: position{line: 491, col: 7, offset: 14758},
				run: (*parser).callonURL1,
				expr: &seqExpr{
					pos: position{line: 491, col: 7, offset: 14758},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 491, col: 8, offset: 14759},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 491, col: 8, offset: 14759},
									val:        "http:",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 491, col: 18, offset: 14769},
									val:        "https:",
									ignoreCase: false,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 491, col: 28, offset: 14779},
							name: "Path",
						},
					},
				},
			},
		},
		{
			name: "Path",
			pos:  position{line: 493, col: 1, offset: 14816},
			expr: &choiceExpr{
				pos: position{line: 494, col: 5, offset: 14825},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 494, col: 5, offset: 14825},
						run: (*parser).callonPath2,
						expr: &labeledExpr{
							pos:   position{line: 494, col: 5, offset: 14825},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 494, col: 7, offset: 14827},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 495, col: 5, offset: 14862},
						run: (*parser).callonPath5,
						expr: &oneOrMoreExpr{
							pos: position{line: 495, col: 5, offset: 14862},
							expr: &charClassMatcher{
								pos:        position{line: 495, col: 5, offset: 14862},
								val:        "[0-9a-zA-Z!@$%^&*()_=<>,./?:[\\]{}~|+-]",
								chars:      []rune{'!', '@', '$', '%', '^', '&', '*', '(', ')', '_', '=', '<', '>', ',', '.', '/', '?', ':', '[', ']', '{', '}', '~', '|', '+', '-'},
								ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PoolAt",
			pos:  position{line: 498, col: 1, offset: 14967},
			expr: &actionExpr{
				pos: position{line: 499, col: 5, offset: 14978},
				run: (*parser).callonPoolAt1,
				expr: &seqExpr{
					pos: position{line: 499, col: 5, offset: 14978},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 499, col: 5, offset: 14978},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 499, col: 7, offset: 14980},
							val:        "at",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 499, col: 12, offset: 14985},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 499, col: 14, offset: 14987},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 499, col: 17, offset: 14990},
								name: "KSUID",
							},
						},
					},
				},
			},
		},
		{
			name: "KSUID",
			pos:  position{line: 502, col: 1, offset: 15056},
			expr: &actionExpr{
				pos: position{line: 502, col: 9, offset: 15064},
				run: (*parser).callonKSUID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 502, col: 9, offset: 15064},
					expr: &charClassMatcher{
						pos:        position{line: 502, col: 10, offset: 15065},
						val:        "[0-9a-zA-Z]",
						ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "PoolRange",
			pos:  position{line: 504, col: 1, offset: 15111},
			expr: &actionExpr{
				pos: position{line: 505, col: 5, offset: 15125},
				run: (*parser).callonPoolRange1,
				expr: &seqExpr{
					pos: position{line: 505, col: 5, offset: 15125},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 505, col: 5, offset: 15125},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 505, col: 7, offset: 15127},
							val:        "range",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 505, col: 15, offset: 15135},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 505, col: 17, offset: 15137},
							label: "lower",
							expr: &ruleRefExpr{
								pos:  position{line: 505, col: 23, offset: 15143},
								name: "Literal",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 505, col: 31, offset: 15151},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 505, col: 33, offset: 15153},
							val:        "to",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 505, col: 38, offset: 15158},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 505, col: 40, offset: 15160},
							label: "upper",
							expr: &ruleRefExpr{
								pos:  position{line: 505, col: 46, offset: 15166},
								name: "Literal",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolSpec",
			pos:  position{line: 509, col: 1, offset: 15271},
			expr: &choiceExpr{
				pos: position{line: 510, col: 5, offset: 15284},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 510, col: 5, offset: 15284},
						run: (*parser).callonPoolSpec2,
						expr: &seqExpr{
							pos: position{line: 510, col: 5, offset: 15284},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 510, col: 5, offset: 15284},
									label: "pool",
									expr: &ruleRefExpr{
										pos:  position{line: 510, col: 10, offset: 15289},
										name: "PoolName",
									},
								},
								&labeledExpr{
									pos:   position{line: 510, col: 19, offset: 15298},
									label: "commit",
									expr: &zeroOrOneExpr{
										pos: position{line: 510, col: 26, offset: 15305},
										expr: &ruleRefExpr{
											pos:  position{line: 510, col: 26, offset: 15305},
											name: "PoolCommit",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 510, col: 38, offset: 15317},
									label: "meta",
									expr: &zeroOrOneExpr{
										pos: position{line: 510, col: 43, offset: 15322},
										expr: &ruleRefExpr{
											pos:  position{line: 510, col: 43, offset: 15322},
											name: "PoolMeta",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 513, col: 5, offset: 15431},
						run: (*parser).callonPoolSpec12,
						expr: &labeledExpr{
							pos:   position{line: 513, col: 5, offset: 15431},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 513, col: 10, offset: 15436},
								name: "PoolMeta",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolCommit",
			pos:  position{line: 517, col: 1, offset: 15537},
			expr: &actionExpr{
				pos: position{line: 518, col: 5, offset: 15552},
				run: (*parser).callonPoolCommit1,
				expr: &seqExpr{
					pos: position{line: 518, col: 5, offset: 15552},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 518, col: 5, offset: 15552},
							val:        "@",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 518, col: 9, offset: 15556},
							label: "commit",
							expr: &ruleRefExpr{
								pos:  position{line: 518, col: 16, offset: 15563},
								name: "PoolName",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolMeta",
			pos:  position{line: 520, col: 1, offset: 15596},
			expr: &actionExpr{
				pos: position{line: 521, col: 5, offset: 15609},
				run: (*parser).callonPoolMeta1,
				expr: &seqExpr{
					pos: position{line: 521, col: 5, offset: 15609},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 521, col: 5, offset: 15609},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 521, col: 9, offset: 15613},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 521, col: 14, offset: 15618},
								name: "PoolIdentifier",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolName",
			pos:  position{line: 523, col: 1, offset: 15655},
			expr: &choiceExpr{
				pos: position{line: 524, col: 5, offset: 15668},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 524, col: 5, offset: 15668},
						name: "PoolIdentifier",
					},
					&ruleRefExpr{
						pos:  position{line: 525, col: 5, offset: 15687},
						name: "KSUID",
					},
					&ruleRefExpr{
						pos:  position{line: 526, col: 5, offset: 15697},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "PoolIdentifier",
			pos:  position{line: 528, col: 1, offset: 15711},
			expr: &actionExpr{
				pos: position{line: 529, col: 5, offset: 15730},
				run: (*parser).callonPoolIdentifier1,
				expr: &seqExpr{
					pos: position{line: 529, col: 5, offset: 15730},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 529, col: 6, offset: 15731},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 529, col: 6, offset: 15731},
									name: "IdentifierStart",
								},
								&litMatcher{
									pos:        position{line: 529, col: 24, offset: 15749},
									val:        ".",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 529, col: 29, offset: 15754},
							expr: &choiceExpr{
								pos: position{line: 529, col: 30, offset: 15755},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 529, col: 30, offset: 15755},
										name: "IdentifierRest",
									},
									&litMatcher{
										pos:        position{line: 529, col: 47, offset: 15772},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LayoutArg",
			pos:  position{line: 531, col: 1, offset: 15811},
			expr: &actionExpr{
				pos: position{line: 532, col: 5, offset: 15825},
				run: (*parser).callonLayoutArg1,
				expr: &seqExpr{
					pos: position{line: 532, col: 5, offset: 15825},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 532, col: 5, offset: 15825},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 532, col: 7, offset: 15827},
							val:        "order",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 532, col: 15, offset: 15835},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 532, col: 17, offset: 15837},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 532, col: 22, offset: 15842},
								name: "FieldExprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 532, col: 33, offset: 15853},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 532, col: 39, offset: 15859},
								name: "OrderSuffix",
							},
						},
					},
				},
			},
		},
		{
			name: "FormatArg",
			pos:  position{line: 536, col: 1, offset: 15969},
			expr: &actionExpr{
				pos: position{line: 537, col: 5, offset: 15983},
				run: (*parser).callonFormatArg1,
				expr: &seqExpr{
					pos: position{line: 537, col: 5, offset: 15983},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 537, col: 5, offset: 15983},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 537, col: 7, offset: 15985},
							val:        "format",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 537, col: 16, offset: 15994},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 537, col: 18, offset: 15996},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 537, col: 22, offset: 16000},
								name: "IdentifierName",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderSuffix",
			pos:  position{line: 539, col: 1, offset: 16036},
			expr: &choiceExpr{
				pos: position{line: 540, col: 5, offset: 16052},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 540, col: 5, offset: 16052},
						run: (*parser).callonOrderSuffix2,
						expr: &litMatcher{
							pos:        position{line: 540, col: 5, offset: 16052},
							val:        ":asc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 541, col: 5, offset: 16086},
						run: (*parser).callonOrderSuffix4,
						expr: &litMatcher{
							pos:        position{line: 541, col: 5, offset: 16086},
							val:        ":desc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 542, col: 5, offset: 16122},
						run: (*parser).callonOrderSuffix6,
						expr: &litMatcher{
							pos:        position{line: 542, col: 5, offset: 16122},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OrderArg",
			pos:  position{line: 544, col: 1, offset: 16148},
			expr: &choiceExpr{
				pos: position{line: 545, col: 5, offset: 16161},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 545, col: 5, offset: 16161},
						run: (*parser).callonOrderArg2,
						expr: &seqExpr{
							pos: position{line: 545, col: 5, offset: 16161},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 545, col: 5, offset: 16161},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 545, col: 7, offset: 16163},
									val:        "order",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 545, col: 15, offset: 16171},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 545, col: 17, offset: 16173},
									val:        "asc",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 546, col: 5, offset: 16206},
						run: (*parser).callonOrderArg8,
						expr: &seqExpr{
							pos: position{line: 546, col: 5, offset: 16206},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 546, col: 5, offset: 16206},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 546, col: 7, offset: 16208},
									val:        "order",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 546, col: 15, offset: 16216},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 546, col: 17, offset: 16218},
									val:        "desc",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassOp",
			pos:  position{line: 548, col: 1, offset: 16250},
			expr: &actionExpr{
				pos: position{line: 549, col: 5, offset: 16261},
				run: (*parser).callonPassOp1,
				expr: &seqExpr{
					pos: position{line: 549, col: 5, offset: 16261},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 549, col: 5, offset: 16261},
							val:        "pass",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 549, col: 12, offset: 16268},
							expr: &ruleRefExpr{
								pos:  position{line: 549, col: 13, offset: 16269},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "ExplodeOp",
			pos:  position{line: 555, col: 1, offset: 16461},
			expr: &actionExpr{
				pos: position{line: 556, col: 5, offset: 16475},
				run: (*parser).callonExplodeOp1,
				expr: &seqExpr{
					pos: position{line: 556, col: 5, offset: 16475},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 556, col: 5, offset: 16475},
							val:        "explode",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 556, col: 15, offset: 16485},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 556, col: 17, offset: 16487},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 556, col: 22, offset: 16492},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 556, col: 28, offset: 16498},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 556, col: 32, offset: 16502},
								name: "TypeArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 556, col: 40, offset: 16510},
							label: "as",
							expr: &zeroOrOneExpr{
								pos: position{line: 556, col: 43, offset: 16513},
								expr: &ruleRefExpr{
									pos:  position{line: 556, col: 43, offset: 16513},
									name: "AsArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MergeOp",
			pos:  position{line: 560, col: 1, offset: 16625},
			expr: &actionExpr{
				pos: position{line: 561, col: 5, offset: 16637},
				run: (*parser).callonMergeOp1,
				expr: &seqExpr{
					pos: position{line: 561, col: 5, offset: 16637},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 561, col: 5, offset: 16637},
							val:        "merge",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 561, col: 13, offset: 16645},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 561, col: 15, offset: 16647},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 561, col: 20, offset: 16652},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "OverOp",
			pos:  position{line: 565, col: 1, offset: 16733},
			expr: &actionExpr{
				pos: position{line: 566, col: 5, offset: 16744},
				run: (*parser).callonOverOp1,
				expr: &seqExpr{
					pos: position{line: 566, col: 5, offset: 16744},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 566, col: 5, offset: 16744},
							val:        "over",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 566, col: 12, offset: 16751},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 566, col: 14, offset: 16753},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 566, col: 20, offset: 16759},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 566, col: 26, offset: 16765},
							label: "locals",
							expr: &zeroOrOneExpr{
								pos: position{line: 566, col: 33, offset: 16772},
								expr: &ruleRefExpr{
									pos:  position{line: 566, col: 33, offset: 16772},
									name: "Locals",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 566, col: 41, offset: 16780},
							label: "scope",
							expr: &zeroOrOneExpr{
								pos: position{line: 566, col: 47, offset: 16786},
								expr: &ruleRefExpr{
									pos:  position{line: 566, col: 47, offset: 16786},
									name: "Scope",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Scope",
			pos:  position{line: 574, col: 1, offset: 17036},
			expr: &actionExpr{
				pos: position{line: 575, col: 5, offset: 17046},
				run: (*parser).callonScope1,
				expr: &seqExpr{
					pos: position{line: 575, col: 5, offset: 17046},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 575, col: 5, offset: 17046},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 575, col: 8, offset: 17049},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 575, col: 13, offset: 17054},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 575, col: 16, offset: 17057},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 575, col: 20, offset: 17061},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 575, col: 23, offset: 17064},
							label: "seq",
							expr: &ruleRefExpr{
								pos:  position{line: 575, col: 27, offset: 17068},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 575, col: 38, offset: 17079},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 575, col: 41, offset: 17082},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Locals",
			pos:  position{line: 577, col: 1, offset: 17107},
			expr: &actionExpr{
				pos: position{line: 578, col: 5, offset: 17118},
				run: (*parser).callonLocals1,
				expr: &seqExpr{
					pos: position{line: 578, col: 5, offset: 17118},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 578, col: 5, offset: 17118},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 578, col: 7, offset: 17120},
							val:        "with",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 578, col: 14, offset: 17127},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 578, col: 16, offset: 17129},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 578, col: 22, offset: 17135},
								name: "LocalsAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 578, col: 39, offset: 17152},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 578, col: 44, offset: 17157},
								expr: &actionExpr{
									pos: position{line: 578, col: 45, offset: 17158},
									run: (*parser).callonLocals10,
									expr: &seqExpr{
										pos: position{line: 578, col: 45, offset: 17158},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 578, col: 45, offset: 17158},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 578, col: 48, offset: 17161},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 578, col: 52, offset: 17165},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 578, col: 55, offset: 17168},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 578, col: 57, offset: 17170},
													name: "LocalsAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocalsAssignment",
			pos:  position{line: 582, col: 1, offset: 17291},
			expr: &choiceExpr{
				pos: position{line: 583, col: 5, offset: 17312},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 583, col: 5, offset: 17312},
						run: (*parser).callonLocalsAssignment2,
						expr: &seqExpr{
							pos: position{line: 583, col: 5, offset: 17312},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 583, col: 5, offset: 17312},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 583, col: 8, offset: 17315},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 583, col: 23, offset: 17330},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 583, col: 26, offset: 17333},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 583, col: 30, offset: 17337},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 583, col: 33, offset: 17340},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 583, col: 38, offset: 17345},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 586, col: 5, offset: 17427},
						run: (*parser).callonLocalsAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 586, col: 5, offset: 17427},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 586, col: 8, offset: 17430},
								name: "IdentifierName",
							},
						},
					},
				},
			},
		},
		{
			name: "YieldOp",
			pos:  position{line: 590, col: 1, offset: 17560},
			expr: &actionExpr{
				pos: position{line: 591, col: 5, offset: 17572},
				run: (*parser).callonYieldOp1,
				expr: &seqExpr{
					pos: position{line: 591, col: 5, offset: 17572},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 591, col: 5, offset: 17572},
							val:        "yield",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 591, col: 13, offset: 17580},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 591, col: 15, offset: 17582},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 591, col: 21, offset: 17588},
								name: "Exprs",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeArg",
			pos:  position{line: 595, col: 1, offset: 17672},
			expr: &actionExpr{
				pos: position{line: 596, col: 5, offset: 17684},
				run: (*parser).callonTypeArg1,
				expr: &seqExpr{
					pos: position{line: 596, col: 5, offset: 17684},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 596, col: 5, offset: 17684},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 596, col: 7, offset: 17686},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 596, col: 10, offset: 17689},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 596, col: 12, offset: 17691},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 596, col: 16, offset: 17695},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "AsArg",
			pos:  position{line: 598, col: 1, offset: 17720},
			expr: &actionExpr{
				pos: position{line: 599, col: 5, offset: 17730},
				run: (*parser).callonAsArg1,
				expr: &seqExpr{
					pos: position{line: 599, col: 5, offset: 17730},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 599, col: 5, offset: 17730},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 599, col: 7, offset: 17732},
							name: "AS",
						},
						&ruleRefExpr{
							pos:  position{line: 599, col: 10, offset: 17735},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 599, col: 12, offset: 17737},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 599, col: 16, offset: 17741},
								name: "Lval",
							},
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 603, col: 1, offset: 17792},
			expr: &ruleRefExpr{
				pos:  position{line: 603, col: 8, offset: 17799},
				name: "DerefExpr",
			},
		},
		{
			name: "Lvals",
			pos:  position{line: 605, col: 1, offset: 17810},
			expr: &actionExpr{
				pos: position{line: 606, col: 5, offset: 17820},
				run: (*parser).callonLvals1,
				expr: &seqExpr{
					pos: position{line: 606, col: 5, offset: 17820},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 606, col: 5, offset: 17820},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 606, col: 11, offset: 17826},
								name: "Lval",
							},
						},
						&labeledExpr{
							pos:   position{line: 606, col: 16, offset: 17831},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 606, col: 21, offset: 17836},
								expr: &actionExpr{
									pos: position{line: 606, col: 22, offset: 17837},
									run: (*parser).callonLvals7,
									expr: &seqExpr{
										pos: position{line: 606, col: 22, offset: 17837},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 606, col: 22, offset: 17837},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 606, col: 25, offset: 17840},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 606, col: 29, offset: 17844},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 606, col: 32, offset: 17847},
												label: "lval",
												expr: &ruleRefExpr{
													pos:  position{line: 606, col: 37, offset: 17852},
													name: "Lval",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 610, col: 1, offset: 17964},
			expr: &ruleRefExpr{
				pos:  position{line: 610, col: 13, offset: 17976},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 612, col: 1, offset: 17982},
			expr: &actionExpr{
				pos: position{line: 613, col: 5, offset: 17997},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 613, col: 5, offset: 17997},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 613, col: 5, offset: 17997},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 613, col: 11, offset: 18003},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 613, col: 21, offset: 18013},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 613, col: 26, offset: 18018},
								expr: &seqExpr{
									pos: position{line: 613, col: 27, offset: 18019},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 613, col: 27, offset: 18019},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 613, col: 30, offset: 18022},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 613, col: 34, offset: 18026},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 613, col: 37, offset: 18029},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignments",
			pos:  position{line: 623, col: 1, offset: 18228},
			expr: &actionExpr{
				pos: position{line: 624, col: 5, offset: 18244},
				run: (*parser).callonAssignments1,
				expr: &seqExpr{
					pos: position{line: 624, col: 5, offset: 18244},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 624, col: 5, offset: 18244},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 624, col: 11, offset: 18250},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 624, col: 22, offset: 18261},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 624, col: 27, offset: 18266},
								expr: &actionExpr{
									pos: position{line: 624, col: 28, offset: 18267},
									run: (*parser).callonAssignments7,
									expr: &seqExpr{
										pos: position{line: 624, col: 28, offset: 18267},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 624, col: 28, offset: 18267},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 624, col: 31, offset: 18270},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 624, col: 35, offset: 18274},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 624, col: 38, offset: 18277},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 624, col: 40, offset: 18279},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 628, col: 1, offset: 18390},
			expr: &actionExpr{
				pos: position{line: 629, col: 5, offset: 18405},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 629, col: 5, offset: 18405},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 629, col: 5, offset: 18405},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 629, col: 9, offset: 18409},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 629, col: 14, offset: 18414},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 629, col: 17, offset: 18417},
							val:        ":=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 629, col: 22, offset: 18422},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 629, col: 25, offset: 18425},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 629, col: 29, offset: 18429},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 631, col: 1, offset: 18520},
			expr: &ruleRefExpr{
				pos:  position{line: 631, col: 8, offset: 18527},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 633, col: 1, offset: 18544},
			expr: &choiceExpr{
				pos: position{line: 634, col: 5, offset: 18564},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 634, col: 5, offset: 18564},
						run: (*parser).callonConditionalExpr2,
						expr: &seqExpr{
							pos: position{line: 634, col: 5, offset: 18564},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 634, col: 5, offset: 18564},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 634, col: 15, offset: 18574},
										name: "LogicalOrExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 634, col: 29, offset: 18588},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 634, col: 32, offset: 18591},
									val:        "?",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 634, col: 36, offset: 18595},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 634, col: 39, offset: 18598},
									label: "thenClause",
									expr: &ruleRefExpr{
										pos:  position{line: 634, col: 50, offset: 18609},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 634, col: 55, offset: 18614},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 634, col: 58, offset: 18617},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 634, col: 62, offset: 18621},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 634, col: 65, offset: 18624},
									label: "elseClause",
									expr: &ruleRefExpr{
										pos:  position{line: 634, col: 76, offset: 18635},
										name: "Expr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 637, col: 5, offset: 18775},
						name: "LogicalOrExpr",
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 639, col: 1, offset: 18790},
			expr: &actionExpr{
				pos: position{line: 640, col: 5, offset: 18808},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 640, col: 5, offset: 18808},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 640, col: 5, offset: 18808},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 640, col: 11, offset: 18814},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 641, col: 5, offset: 18833},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 641, col: 10, offset: 18838},
								expr: &actionExpr{
									pos: position{line: 641, col: 11, offset: 18839},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 641, col: 11, offset: 18839},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 641, col: 11, offset: 18839},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 641, col: 14, offset: 18842},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 641, col: 17, offset: 18845},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 641, col: 25, offset: 18853},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 641, col: 28, offset: 18856},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 641, col: 33, offset: 18861},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 645, col: 1, offset: 18979},
			expr: &actionExpr{
				pos: position{line: 646, col: 5, offset: 18998},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 646, col: 5, offset: 18998},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 646, col: 5, offset: 18998},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 646, col: 11, offset: 19004},
								name: "ComparisonExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 647, col: 5, offset: 19023},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 647, col: 10, offset: 19028},
								expr: &actionExpr{
									pos: position{line: 647, col: 11, offset: 19029},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 647, col: 11, offset: 19029},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 647, col: 11, offset: 19029},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 647, col: 14, offset: 19032},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 647, col: 17, offset: 19035},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 647, col: 26, offset: 19044},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 647, col: 29, offset: 19047},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 647, col: 34, offset: 19052},
													name: "ComparisonExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ComparisonExpr",
			pos:  position{line: 651, col: 1, offset: 19170},
			expr: &actionExpr{
				pos: position{line: 652, col: 5, offset: 19189},
				run: (*parser).callonComparisonExpr1,
				expr: &seqExpr{
					pos: position{line: 652, col: 5, offset: 19189},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 652, col: 5, offset: 19189},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 652, col: 9, offset: 19193},
								name: "AdditiveExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 652, col: 22, offset: 19206},
							label: "opAndRHS",
							expr: &zeroOrOneExpr{
								pos: position{line: 652, col: 31, offset: 19215},
								expr: &choiceExpr{
									pos: position{line: 652, col: 32, offset: 19216},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 652, col: 32, offset: 19216},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 652, col: 32, offset: 19216},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 652, col: 35, offset: 19219},
													name: "Comparator",
												},
												&ruleRefExpr{
													pos:  position{line: 652, col: 46, offset: 19230},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 652, col: 49, offset: 19233},
													name: "AdditiveExpr",
												},
											},
										},
										&seqExpr{
											pos: position{line: 652, col: 64, offset: 19248},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 652, col: 64, offset: 19248},
													name: "__",
												},
												&actionExpr{
													pos: position{line: 652, col: 68, offset: 19252},
													run: (*parser).callonComparisonExpr15,
													expr: &litMatcher{
														pos:        position{line: 652, col: 68, offset: 19252},
														val:        "~",
														ignoreCase: false,
													},
												},
												&ruleRefExpr{
													pos:  position{line: 652, col: 104, offset: 19288},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 652, col: 107, offset: 19291},
													name: "Regexp",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 661, col: 1, offset: 19552},
			expr: &actionExpr{
				pos: position{line: 662, col: 5, offset: 19569},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 662, col: 5, offset: 19569},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 662, col: 5, offset: 19569},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 662, col: 11, offset: 19575},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 663, col: 5, offset: 19598},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 663, col: 10, offset: 19603},
								expr: &actionExpr{
									pos: position{line: 663, col: 11, offset: 19604},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 663, col: 11, offset: 19604},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 663, col: 11, offset: 19604},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 663, col: 14, offset: 19607},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 663, col: 17, offset: 19610},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 663, col: 34, offset: 19627},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 663, col: 37, offset: 19630},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 663, col: 42, offset: 19635},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 667, col: 1, offset: 19757},
			expr: &actionExpr{
				pos: position{line: 667, col: 20, offset: 19776},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 667, col: 21, offset: 19777},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 667, col: 21, offset: 19777},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 667, col: 27, offset: 19783},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 669, col: 1, offset: 19820},
			expr: &actionExpr{
				pos: position{line: 670, col: 5, offset: 19843},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 670, col: 5, offset: 19843},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 670, col: 5, offset: 19843},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 670, col: 11, offset: 19849},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 671, col: 5, offset: 19861},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 671, col: 10, offset: 19866},
								expr: &actionExpr{
									pos: position{line: 671, col: 11, offset: 19867},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 671, col: 11, offset: 19867},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 671, col: 11, offset: 19867},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 671, col: 14, offset: 19870},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 671, col: 17, offset: 19873},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 671, col: 40, offset: 19896},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 671, col: 43, offset: 19899},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 671, col: 48, offset: 19904},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 675, col: 1, offset: 20015},
			expr: &actionExpr{
				pos: position{line: 675, col: 26, offset: 20040},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 675, col: 27, offset: 20041},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 675, col: 27, offset: 20041},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 675, col: 33, offset: 20047},
							val:        "/",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 675, col: 39, offset: 20053},
							val:        "%",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 677, col: 1, offset: 20090},
			expr: &choiceExpr{
				pos: position{line: 678, col: 5, offset: 20102},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 678, col: 5, offset: 20102},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 678, col: 5, offset: 20102},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 678, col: 5, offset: 20102},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 678, col: 9, offset: 20106},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 678, col: 12, offset: 20109},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 678, col: 14, offset: 20111},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 681, col: 5, offset: 20220},
						name: "NegationExpr",
					},
				},
			},
		},
		{
			name: "NegationExpr",
			pos:  position{line: 683, col: 1, offset: 20234},
			expr: &choiceExpr{
				pos: position{line: 684, col: 5, offset: 20251},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 684, col: 5, offset: 20251},
						run: (*parser).callonNegationExpr2,
						expr: &seqExpr{
							pos: position{line: 684, col: 5, offset: 20251},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 684, col: 5, offset: 20251},
									expr: &ruleRefExpr{
										pos:  position{line: 684, col: 6, offset: 20252},
										name: "Literal",
									},
								},
								&litMatcher{
									pos:        position{line: 684, col: 14, offset: 20260},
									val:        "-",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 684, col: 18, offset: 20264},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 684, col: 21, offset: 20267},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 684, col: 23, offset: 20269},
										name: "FuncExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 687, col: 5, offset: 20379},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 689, col: 1, offset: 20389},
			expr: &choiceExpr{
				pos: position{line: 690, col: 5, offset: 20402},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 690, col: 5, offset: 20402},
						run: (*parser).callonFuncExpr2,
						expr: &seqExpr{
							pos: position{line: 690, col: 5, offset: 20402},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 690, col: 5, offset: 20402},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 690, col: 11, offset: 20408},
										name: "Cast",
									},
								},
								&labeledExpr{
									pos:   position{line: 690, col: 16, offset: 20413},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 690, col: 21, offset: 20418},
										expr: &ruleRefExpr{
											pos:  position{line: 690, col: 22, offset: 20419},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 693, col: 5, offset: 20490},
						run: (*parser).callonFuncExpr9,
						expr: &seqExpr{
							pos: position{line: 693, col: 5, offset: 20490},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 693, col: 5, offset: 20490},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 693, col: 11, offset: 20496},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 693, col: 20, offset: 20505},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 693, col: 25, offset: 20510},
										expr: &ruleRefExpr{
											pos:  position{line: 693, col: 26, offset: 20511},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 696, col: 5, offset: 20582},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 697, col: 5, offset: 20596},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FuncGuard",
			pos:  position{line: 699, col: 1, offset: 20605},
			expr: &seqExpr{
				pos: position{line: 699, col: 13, offset: 20617},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 699, col: 13, offset: 20617},
						name: "NotFuncs",
					},
					&ruleRefExpr{
						pos:  position{line: 699, col: 22, offset: 20626},
						name: "__",
					},
					&litMatcher{
						pos:        position{line: 699, col: 25, offset: 20629},
						val:        "(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "NotFuncs",
			pos:  position{line: 701, col: 1, offset: 20634},
			expr: &choiceExpr{
				pos: position{line: 702, col: 5, offset: 20647},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 702, col: 5, offset: 20647},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 703, col: 5, offset: 20657},
						val:        "select",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Cast",
			pos:  position{line: 705, col: 1, offset: 20667},
			expr: &actionExpr{
				pos: position{line: 706, col: 5, offset: 20676},
				run: (*parser).callonCast1,
				expr: &seqExpr{
					pos: position{line: 706, col: 5, offset: 20676},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 706, col: 5, offset: 20676},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 706, col: 9, offset: 20680},
								name: "CastType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 706, col: 18, offset: 20689},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 706, col: 21, offset: 20692},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 706, col: 25, offset: 20696},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 706, col: 28, offset: 20699},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 706, col: 33, offset: 20704},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 706, col: 38, offset: 20709},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 706, col: 41, offset: 20712},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 710, col: 1, offset: 20809},
			expr: &choiceExpr{
				pos: position{line: 711, col: 5, offset: 20822},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 711, col: 5, offset: 20822},
						name: "Grep",
					},
					&actionExpr{
						pos: position{line: 712, col: 5, offset: 20831},
						run: (*parser).callonFunction3,
						expr: &seqExpr{
							pos: position{line: 712, col: 5, offset: 20831},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 712, col: 5, offset: 20831},
									expr: &ruleRefExpr{
										pos:  position{line: 712, col: 6, offset: 20832},
										name: "FuncGuard",
									},
								},
								&labeledExpr{
									pos:   position{line: 712, col: 16, offset: 20842},
									label: "fn",
									expr: &ruleRefExpr{
										pos:  position{line: 712, col: 19, offset: 20845},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 712, col: 34, offset: 20860},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 712, col: 37, offset: 20863},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 712, col: 41, offset: 20867},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 712, col: 44, offset: 20870},
									label: "args",
									expr: &ruleRefExpr{
										pos:  position{line: 712, col: 49, offset: 20875},
										name: "OptionalExprs",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 712, col: 63, offset: 20889},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 712, col: 66, offset: 20892},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 712, col: 70, offset: 20896},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 712, col: 76, offset: 20902},
										expr: &ruleRefExpr{
											pos:  position{line: 712, col: 76, offset: 20902},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Grep",
			pos:  position{line: 716, col: 1, offset: 21023},
			expr: &choiceExpr{
				pos: position{line: 717, col: 5, offset: 21032},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 717, col: 5, offset: 21032},
						run: (*parser).callonGrep2,
						expr: &seqExpr{
							pos: position{line: 717, col: 5, offset: 21032},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 717, col: 5, offset: 21032},
									val:        "grep",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 717, col: 12, offset: 21039},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 717, col: 15, offset: 21042},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 717, col: 19, offset: 21046},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 717, col: 22, offset: 21049},
									label: "pattern",
									expr: &ruleRefExpr{
										pos:  position{line: 717, col: 30, offset: 21057},
										name: "Pattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 717, col: 38, offset: 21065},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 717, col: 41, offset: 21068},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 720, col: 5, offset: 21223},
						run: (*parser).callonGrep12,
						expr: &seqExpr{
							pos: position{line: 720, col: 5, offset: 21223},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 720, col: 5, offset: 21223},
									val:        "grep",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 720, col: 12, offset: 21230},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 720, col: 15, offset: 21233},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 720, col: 19, offset: 21237},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 720, col: 22, offset: 21240},
									label: "pattern",
									expr: &ruleRefExpr{
										pos:  position{line: 720, col: 30, offset: 21248},
										name: "Pattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 720, col: 38, offset: 21256},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 720, col: 42, offset: 21260},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 720, col: 46, offset: 21264},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 720, col: 49, offset: 21267},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 720, col: 54, offset: 21272},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 720, col: 59, offset: 21277},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 720, col: 62, offset: 21280},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Pattern",
			pos:  position{line: 724, col: 1, offset: 21384},
			expr: &choiceExpr{
				pos: position{line: 725, col: 5, offset: 21396},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 725, col: 5, offset: 21396},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 726, col: 5, offset: 21407},
						name: "Glob",
					},
					&actionExpr{
						pos: position{line: 727, col: 5, offset: 21416},
						run: (*parser).callonPattern4,
						expr: &labeledExpr{
							pos:   position{line: 727, col: 5, offset: 21416},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 727, col: 7, offset: 21418},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "OptionalExprs",
			pos:  position{line: 731, col: 1, offset: 21510},
			expr: &choiceExpr{
				pos: position{line: 732, col: 5, offset: 21528},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 732, col: 5, offset: 21528},
						name: "Exprs",
					},
					&actionExpr{
						pos: position{line: 733, col: 5, offset: 21538},
						run: (*parser).callonOptionalExprs3,
						expr: &ruleRefExpr{
							pos:  position{line: 733, col: 5, offset: 21538},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 735, col: 1, offset: 21574},
			expr: &actionExpr{
				pos: position{line: 736, col: 5, offset: 21584},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 736, col: 5, offset: 21584},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 736, col: 5, offset: 21584},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 736, col: 11, offset: 21590},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 736, col: 16, offset: 21595},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 736, col: 21, offset: 21600},
								expr: &actionExpr{
									pos: position{line: 736, col: 22, offset: 21601},
									run: (*parser).callonExprs7,
									expr: &seqExpr{
										pos: position{line: 736, col: 22, offset: 21601},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 736, col: 22, offset: 21601},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 736, col: 25, offset: 21604},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 736, col: 29, offset: 21608},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 736, col: 32, offset: 21611},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 736, col: 34, offset: 21613},
													name: "Expr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 740, col: 1, offset: 21722},
			expr: &actionExpr{
				pos: position{line: 741, col: 5, offset: 21736},
				run: (*parser).callonDerefExpr1,
				expr: &seqExpr{
					pos: position{line: 741, col: 5, offset: 21736},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 741, col: 5, offset: 21736},
							expr: &ruleRefExpr{
								pos:  position{line: 741, col: 6, offset: 21737},
								name: "IP6",
							},
						},
						&labeledExpr{
							pos:   position{line: 741, col: 10, offset: 21741},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 741, col: 16, offset: 21747},
								name: "Identifier",
							},
						},
						&labeledExpr{
							pos:   position{line: 741, col: 27, offset: 21758},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 741, col: 32, offset: 21763},
								expr: &ruleRefExpr{
									pos:  position{line: 741, col: 33, offset: 21764},
									name: "Deref",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 745, col: 1, offset: 21832},
			expr: &choiceExpr{
				pos: position{line: 746, col: 5, offset: 21842},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 746, col: 5, offset: 21842},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 746, col: 5, offset: 21842},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 746, col: 5, offset: 21842},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 746, col: 9, offset: 21846},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 746, col: 14, offset: 21851},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 746, col: 27, offset: 21864},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 746, col: 30, offset: 21867},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 746, col: 34, offset: 21871},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 746, col: 37, offset: 21874},
									label: "to",
									expr: &zeroOrOneExpr{
										pos: position{line: 746, col: 40, offset: 21877},
										expr: &ruleRefExpr{
											pos:  position{line: 746, col: 40, offset: 21877},
											name: "AdditiveExpr",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 746, col: 54, offset: 21891},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 752, col: 5, offset: 22062},
						run: (*parser).callonDeref14,
						expr: &seqExpr{
							pos: position{line: 752, col: 5, offset: 22062},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 752, col: 5, offset: 22062},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 752, col: 9, offset: 22066},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 752, col: 12, offset: 22069},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 752, col: 16, offset: 22073},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 752, col: 19, offset: 22076},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 752, col: 22, offset: 22079},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 752, col: 35, offset: 22092},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 758, col: 5, offset: 22263},
						run: (*parser).callonDeref23,
						expr: &seqExpr{
							pos: position{line: 758, col: 5, offset: 22263},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 758, col: 5, offset: 22263},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 758, col: 9, offset: 22267},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 758, col: 14, offset: 22272},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 758, col: 19, offset: 22277},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 759, col: 5, offset: 22326},
						run: (*parser).callonDeref29,
						expr: &seqExpr{
							pos: position{line: 759, col: 5, offset: 22326},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 759, col: 5, offset: 22326},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 759, col: 9, offset: 22330},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 759, col: 12, offset: 22333},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 761, col: 1, offset: 22384},
			expr: &choiceExpr{
				pos: position{line: 762, col: 5, offset: 22396},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 762, col: 5, offset: 22396},
						name: "Record",
					},
					&ruleRefExpr{
						pos:  position{line: 763, col: 5, offset: 22407},
						name: "Array",
					},
					&ruleRefExpr{
						pos:  position{line: 764, col: 5, offset: 22417},
						name: "Set",
					},
					&ruleRefExpr{
						pos:  position{line: 765, col: 5, offset: 22425},
						name: "Map",
					},
					&ruleRefExpr{
						pos:  position{line: 766, col: 5, offset: 22433},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 767, col: 5, offset: 22445},
						run: (*parser).callonPrimary7,
						expr: &seqExpr{
							pos: position{line: 767, col: 5, offset: 22445},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 767, col: 5, offset: 22445},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 767, col: 9, offset: 22449},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 767, col: 12, offset: 22452},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 767, col: 17, offset: 22457},
										name: "OverExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 767, col: 26, offset: 22466},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 767, col: 29, offset: 22469},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 768, col: 5, offset: 22499},
						run: (*parser).callonPrimary15,
						expr: &seqExpr{
							pos: position{line: 768, col: 5, offset: 22499},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 768, col: 5, offset: 22499},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 768, col: 9, offset: 22503},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 768, col: 12, offset: 22506},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 768, col: 17, offset: 22511},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 768, col: 22, offset: 22516},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 768, col: 25, offset: 22519},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OverExpr",
			pos:  position{line: 770, col: 1, offset: 22545},
			expr: &actionExpr{
				pos: position{line: 771, col: 5, offset: 22558},
				run: (*parser).callonOverExpr1,
				expr: &seqExpr{
					pos: position{line: 771, col: 5, offset: 22558},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 771, col: 5, offset: 22558},
							val:        "over",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 771, col: 12, offset: 22565},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 771, col: 14, offset: 22567},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 771, col: 20, offset: 22573},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 771, col: 26, offset: 22579},
							label: "locals",
							expr: &zeroOrOneExpr{
								pos: position{line: 771, col: 33, offset: 22586},
								expr: &ruleRefExpr{
									pos:  position{line: 771, col: 33, offset: 22586},
									name: "Locals",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 771, col: 41, offset: 22594},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 771, col: 44, offset: 22597},
							val:        "|",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 771, col: 48, offset: 22601},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 771, col: 51, offset: 22604},
							label: "scope",
							expr: &ruleRefExpr{
								pos:  position{line: 771, col: 57, offset: 22610},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "Record",
			pos:  position{line: 775, col: 1, offset: 22741},
			expr: &actionExpr{
				pos: position{line: 776, col: 5, offset: 22752},
				run: (*parser).callonRecord1,
				expr: &seqExpr{
					pos: position{line: 776, col: 5, offset: 22752},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 776, col: 5, offset: 22752},
							val:        "{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 776, col: 9, offset: 22756},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 776, col: 12, offset: 22759},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 776, col: 18, offset: 22765},
								name: "RecordElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 776, col: 30, offset: 22777},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 776, col: 33, offset: 22780},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RecordElems",
			pos:  position{line: 780, col: 1, offset: 22870},
			expr: &choiceExpr{
				pos: position{line: 781, col: 5, offset: 22886},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 781, col: 5, offset: 22886},
						run: (*parser).callonRecordElems2,
						expr: &seqExpr{
							pos: position{line: 781, col: 5, offset: 22886},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 781, col: 5, offset: 22886},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 781, col: 11, offset: 22892},
										name: "RecordElem",
									},
								},
								&labeledExpr{
									pos:   position{line: 781, col: 22, offset: 22903},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 781, col: 27, offset: 22908},
										expr: &ruleRefExpr{
											pos:  position{line: 781, col: 27, offset: 22908},
											name: "RecordElemTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 784, col: 5, offset: 23007},
						run: (*parser).callonRecordElems9,
						expr: &ruleRefExpr{
							pos:  position{line: 784, col: 5, offset: 23007},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "RecordElemTail",
			pos:  position{line: 786, col: 1, offset: 23043},
			expr: &actionExpr{
				pos: position{line: 786, col: 18, offset: 23060},
				run: (*parser).callonRecordElemTail1,
				expr: &seqExpr{
					pos: position{line: 786, col: 18, offset: 23060},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 786, col: 18, offset: 23060},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 786, col: 21, offset: 23063},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 786, col: 25, offset: 23067},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 786, col: 28, offset: 23070},
							label: "elem",
							expr: &ruleRefExpr{
								pos:  position{line: 786, col: 33, offset: 23075},
								name: "RecordElem",
							},
						},
					},
				},
			},
		},
		{
			name: "RecordElem",
			pos:  position{line: 788, col: 1, offset: 23108},
			expr: &choiceExpr{
				pos: position{line: 789, col: 5, offset: 23123},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 789, col: 5, offset: 23123},
						name: "Spread",
					},
					&ruleRefExpr{
						pos:  position{line: 790, col: 5, offset: 23134},
						name: "Field",
					},
					&ruleRefExpr{
						pos:  position{line: 791, col: 5, offset: 23144},
						name: "Identifier",
					},
				},
			},
		},
		{
			name: "Spread",
			pos:  position{line: 793, col: 1, offset: 23156},
			expr: &actionExpr{
				pos: position{line: 794, col: 5, offset: 23167},
				run: (*parser).callonSpread1,
				expr: &seqExpr{
					pos: position{line: 794, col: 5, offset: 23167},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 794, col: 5, offset: 23167},
							val:        "...",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 794, col: 11, offset: 23173},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 794, col: 14, offset: 23176},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 794, col: 19, offset: 23181},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 798, col: 1, offset: 23267},
			expr: &actionExpr{
				pos: position{line: 799, col: 5, offset: 23277},
				run: (*parser).callonField1,
				expr: &seqExpr{
					pos: position{line: 799, col: 5, offset: 23277},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 799, col: 5, offset: 23277},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 799, col: 10, offset: 23282},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 799, col: 20, offset: 23292},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 799, col: 23, offset: 23295},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 799, col: 27, offset: 23299},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 799, col: 30, offset: 23302},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 799, col: 36, offset: 23308},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Array",
			pos:  position{line: 803, col: 1, offset: 23408},
			expr: &actionExpr{
				pos: position{line: 804, col: 5, offset: 23418},
				run: (*parser).callonArray1,
				expr: &seqExpr{
					pos: position{line: 804, col: 5, offset: 23418},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 804, col: 5, offset: 23418},
							val:        "[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 804, col: 9, offset: 23422},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 804, col: 12, offset: 23425},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 804, col: 18, offset: 23431},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 804, col: 32, offset: 23445},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 804, col: 35, offset: 23448},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Set",
			pos:  position{line: 808, col: 1, offset: 23538},
			expr: &actionExpr{
				pos: position{line: 809, col: 5, offset: 23546},
				run: (*parser).callonSet1,
				expr: &seqExpr{
					pos: position{line: 809, col: 5, offset: 23546},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 809, col: 5, offset: 23546},
							val:        "|[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 809, col: 10, offset: 23551},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 809, col: 13, offset: 23554},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 809, col: 19, offset: 23560},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 809, col: 33, offset: 23574},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 809, col: 36, offset: 23577},
							val:        "]|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Map",
			pos:  position{line: 813, col: 1, offset: 23666},
			expr: &actionExpr{
				pos: position{line: 814, col: 5, offset: 23674},
				run: (*parser).callonMap1,
				expr: &seqExpr{
					pos: position{line: 814, col: 5, offset: 23674},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 814, col: 5, offset: 23674},
							val:        "|{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 814, col: 10, offset: 23679},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 814, col: 13, offset: 23682},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 814, col: 19, offset: 23688},
								name: "Entries",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 814, col: 27, offset: 23696},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 814, col: 30, offset: 23699},
							val:        "}|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Entries",
			pos:  position{line: 818, col: 1, offset: 23790},
			expr: &choiceExpr{
				pos: position{line: 819, col: 5, offset: 23802},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 819, col: 5, offset: 23802},
						run: (*parser).callonEntries2,
						expr: &seqExpr{
							pos: position{line: 819, col: 5, offset: 23802},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 819, col: 5, offset: 23802},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 819, col: 11, offset: 23808},
										name: "Entry",
									},
								},
								&labeledExpr{
									pos:   position{line: 819, col: 17, offset: 23814},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 819, col: 22, offset: 23819},
										expr: &ruleRefExpr{
											pos:  position{line: 819, col: 22, offset: 23819},
											name: "EntryTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 822, col: 5, offset: 23913},
						run: (*parser).callonEntries9,
						expr: &ruleRefExpr{
							pos:  position{line: 822, col: 5, offset: 23913},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "EntryTail",
			pos:  position{line: 825, col: 1, offset: 23950},
			expr: &actionExpr{
				pos: position{line: 825, col: 13, offset: 23962},
				run: (*parser).callonEntryTail1,
				expr: &seqExpr{
					pos: position{line: 825, col: 13, offset: 23962},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 825, col: 13, offset: 23962},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 825, col: 16, offset: 23965},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 825, col: 20, offset: 23969},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 825, col: 23, offset: 23972},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 825, col: 25, offset: 23974},
								name: "Entry",
							},
						},
					},
				},
			},
		},
		{
			name: "Entry",
			pos:  position{line: 827, col: 1, offset: 23999},
			expr: &actionExpr{
				pos: position{line: 828, col: 5, offset: 24009},
				run: (*parser).callonEntry1,
				expr: &seqExpr{
					pos: position{line: 828, col: 5, offset: 24009},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 828, col: 5, offset: 24009},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 828, col: 9, offset: 24013},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 828, col: 14, offset: 24018},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 828, col: 17, offset: 24021},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 828, col: 21, offset: 24025},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 828, col: 24, offset: 24028},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 828, col: 30, offset: 24034},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOp",
			pos:  position{line: 834, col: 1, offset: 24141},
			expr: &actionExpr{
				pos: position{line: 835, col: 5, offset: 24151},
				run: (*parser).callonSQLOp1,
				expr: &seqExpr{
					pos: position{line: 835, col: 5, offset: 24151},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 835, col: 5, offset: 24151},
							label: "selection",
							expr: &ruleRefExpr{
								pos:  position{line: 835, col: 15, offset: 24161},
								name: "SQLSelect",
							},
						},
						&labeledExpr{
							pos:   position{line: 836, col: 5, offset: 24175},
							label: "from",
							expr: &zeroOrOneExpr{
								pos: position{line: 836, col: 10, offset: 24180},
								expr: &ruleRefExpr{
									pos:  position{line: 836, col: 10, offset: 24180},
									name: "SQLFrom",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 837, col: 5, offset: 24193},
							label: "joins",
							expr: &zeroOrOneExpr{
								pos: position{line: 837, col: 11, offset: 24199},
								expr: &ruleRefExpr{
									pos:  position{line: 837, col: 11, offset: 24199},
									name: "SQLJoins",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 838, col: 5, offset: 24213},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 838, col: 11, offset: 24219},
								expr: &ruleRefExpr{
									pos:  position{line: 838, col: 11, offset: 24219},
									name: "SQLWhere",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 839, col: 5, offset: 24233},
							label: "groupby",
							expr: &zeroOrOneExpr{
								pos: position{line: 839, col: 13, offset: 24241},
								expr: &ruleRefExpr{
									pos:  position{line: 839, col: 13, offset: 24241},
									name: "SQLGroupBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 840, col: 5, offset: 24257},
							label: "having",
							expr: &zeroOrOneExpr{
								pos: position{line: 840, col: 12, offset: 24264},
								expr: &ruleRefExpr{
									pos:  position{line: 840, col: 12, offset: 24264},
									name: "SQLHaving",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 841, col: 5, offset: 24279},
							label: "orderby",
							expr: &zeroOrOneExpr{
								pos: position{line: 841, col: 13, offset: 24287},
								expr: &ruleRefExpr{
									pos:  position{line: 841, col: 13, offset: 24287},
									name: "SQLOrderBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 842, col: 5, offset: 24303},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 842, col: 11, offset: 24309},
								name: "SQLLimit",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLSelect",
			pos:  position{line: 866, col: 1, offset: 24676},
			expr: &choiceExpr{
				pos: position{line: 867, col: 5, offset: 24690},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 867, col: 5, offset: 24690},
						run: (*parser).callonSQLSelect2,
						expr: &seqExpr{
							pos: position{line: 867, col: 5, offset: 24690},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 867, col: 5, offset: 24690},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 867, col: 12, offset: 24697},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 867, col: 14, offset: 24699},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 868, col: 5, offset: 24727},
						run: (*parser).callonSQLSelect7,
						expr: &seqExpr{
							pos: position{line: 868, col: 5, offset: 24727},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 868, col: 5, offset: 24727},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 868, col: 12, offset: 24734},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 868, col: 14, offset: 24736},
									label: "assignments",
									expr: &ruleRefExpr{
										pos:  position{line: 868, col: 26, offset: 24748},
										name: "SQLAssignments",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignment",
			pos:  position{line: 870, col: 1, offset: 24792},
			expr: &choiceExpr{
				pos: position{line: 871, col: 5, offset: 24810},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 871, col: 5, offset: 24810},
						run: (*parser).callonSQLAssignment2,
						expr: &seqExpr{
							pos: position{line: 871, col: 5, offset: 24810},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 871, col: 5, offset: 24810},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 871, col: 9, offset: 24814},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 871, col: 14, offset: 24819},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 871, col: 16, offset: 24821},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 871, col: 19, offset: 24824},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 871, col: 21, offset: 24826},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 871, col: 25, offset: 24830},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 872, col: 5, offset: 24924},
						run: (*parser).callonSQLAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 872, col: 5, offset: 24924},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 872, col: 10, offset: 24929},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignments",
			pos:  position{line: 874, col: 1, offset: 25021},
			expr: &actionExpr{
				pos: position{line: 875, col: 5, offset: 25040},
				run: (*parser).callonSQLAssignments1,
				expr: &seqExpr{
					pos: position{line: 875, col: 5, offset: 25040},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 875, col: 5, offset: 25040},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 875, col: 11, offset: 25046},
								name: "SQLAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 875, col: 25, offset: 25060},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 875, col: 30, offset: 25065},
								expr: &actionExpr{
									pos: position{line: 875, col: 31, offset: 25066},
									run: (*parser).callonSQLAssignments7,
									expr: &seqExpr{
										pos: position{line: 875, col: 31, offset: 25066},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 875, col: 31, offset: 25066},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 875, col: 34, offset: 25069},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 875, col: 38, offset: 25073},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 875, col: 41, offset: 25076},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 875, col: 46, offset: 25081},
													name: "SQLAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLFrom",
			pos:  position{line: 879, col: 1, offset: 25202},
			expr: &choiceExpr{
				pos: position{line: 880, col: 5, offset: 25214},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 880, col: 5, offset: 25214},
						run: (*parser).callonSQLFrom2,
						expr: &seqExpr{
							pos: position{line: 880, col: 5, offset: 25214},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 880, col: 5, offset: 25214},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 880, col: 7, offset: 25216},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 880, col: 12, offset: 25221},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 880, col: 14, offset: 25223},
									label: "table",
									expr: &ruleRefExpr{
										pos:  position{line: 880, col: 20, offset: 25229},
										name: "SQLTable",
									},
								},
								&labeledExpr{
									pos:   position{line: 880, col: 29, offset: 25238},
									label: "alias",
									expr: &zeroOrOneExpr{
										pos: position{line: 880, col: 35, offset: 25244},
										expr: &ruleRefExpr{
											pos:  position{line: 880, col: 35, offset: 25244},
											name: "SQLAlias",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 883, col: 5, offset: 25339},
						run: (*parser).callonSQLFrom12,
						expr: &seqExpr{
							pos: position{line: 883, col: 5, offset: 25339},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 883, col: 5, offset: 25339},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 883, col: 7, offset: 25341},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 883, col: 12, offset: 25346},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 883, col: 14, offset: 25348},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAlias",
			pos:  position{line: 885, col: 1, offset: 25373},
			expr: &choiceExpr{
				pos: position{line: 886, col: 5, offset: 25386},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 886, col: 5, offset: 25386},
						run: (*parser).callonSQLAlias2,
						expr: &seqExpr{
							pos: position{line: 886, col: 5, offset: 25386},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 886, col: 5, offset: 25386},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 886, col: 7, offset: 25388},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 886, col: 10, offset: 25391},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 886, col: 12, offset: 25393},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 886, col: 15, offset: 25396},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 887, col: 5, offset: 25424},
						run: (*parser).callonSQLAlias9,
						expr: &seqExpr{
							pos: position{line: 887, col: 5, offset: 25424},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 887, col: 5, offset: 25424},
									name: "_",
								},
								&notExpr{
									pos: position{line: 887, col: 7, offset: 25426},
									expr: &seqExpr{
										pos: position{line: 887, col: 9, offset: 25428},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 887, col: 9, offset: 25428},
												name: "SQLTokenSentinels",
											},
											&ruleRefExpr{
												pos:  position{line: 887, col: 27, offset: 25446},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 887, col: 30, offset: 25449},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 887, col: 33, offset: 25452},
										name: "Lval",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLTable",
			pos:  position{line: 889, col: 1, offset: 25477},
			expr: &ruleRefExpr{
				pos:  position{line: 890, col: 5, offset: 25490},
				name: "Expr",
			},
		},
		{
			name: "SQLJoins",
			pos:  position{line: 892, col: 1, offset: 25496},
			expr: &actionExpr{
				pos: position{line: 893, col: 5, offset: 25509},
				run: (*parser).callonSQLJoins1,
				expr: &seqExpr{
					pos: position{line: 893, col: 5, offset: 25509},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 893, col: 5, offset: 25509},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 893, col: 11, offset: 25515},
								name: "SQLJoin",
							},
						},
						&labeledExpr{
							pos:   position{line: 893, col: 19, offset: 25523},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 893, col: 24, offset: 25528},
								expr: &actionExpr{
									pos: position{line: 893, col: 25, offset: 25529},
									run: (*parser).callonSQLJoins7,
									expr: &labeledExpr{
										pos:   position{line: 893, col: 25, offset: 25529},
										label: "join",
										expr: &ruleRefExpr{
											pos:  position{line: 893, col: 30, offset: 25534},
											name: "SQLJoin",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoin",
			pos:  position{line: 897, col: 1, offset: 25649},
			expr: &actionExpr{
				pos: position{line: 898, col: 5, offset: 25661},
				run: (*parser).callonSQLJoin1,
				expr: &seqExpr{
					pos: position{line: 898, col: 5, offset: 25661},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 898, col: 5, offset: 25661},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 898, col: 11, offset: 25667},
								name: "SQLJoinStyle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 898, col: 24, offset: 25680},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 898, col: 26, offset: 25682},
							name: "JOIN",
						},
						&ruleRefExpr{
							pos:  position{line: 898, col: 31, offset: 25687},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 898, col: 33, offset: 25689},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 898, col: 39, offset: 25695},
								name: "SQLTable",
							},
						},
						&labeledExpr{
							pos:   position{line: 898, col: 48, offset: 25704},
							label: "alias",
							expr: &zeroOrOneExpr{
								pos: position{line: 898, col: 54, offset: 25710},
								expr: &ruleRefExpr{
									pos:  position{line: 898, col: 54, offset: 25710},
									name: "SQLAlias",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 898, col: 64, offset: 25720},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 898, col: 66, offset: 25722},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 898, col: 69, offset: 25725},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 898, col: 71, offset: 25727},
							label: "leftKey",
							expr: &ruleRefExpr{
								pos:  position{line: 898, col: 79, offset: 25735},
								name: "JoinKey",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 898, col: 87, offset: 25743},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 898, col: 90, offset: 25746},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 898, col: 94, offset: 25750},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 898, col: 97, offset: 25753},
							label: "rightKey",
							expr: &ruleRefExpr{
								pos:  position{line: 898, col: 106, offset: 25762},
								name: "JoinKey",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoinStyle",
			pos:  position{line: 913, col: 1, offset: 25993},
			expr: &choiceExpr{
				pos: position{line: 914, col: 5, offset: 26010},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 914, col: 5, offset: 26010},
						run: (*parser).callonSQLJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 914, col: 5, offset: 26010},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 914, col: 5, offset: 26010},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 914, col: 7, offset: 26012},
									label: "style",
									expr: &choiceExpr{
										pos: position{line: 914, col: 14, offset: 26019},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 914, col: 14, offset: 26019},
												name: "ANTI",
											},
											&ruleRefExpr{
												pos:  position{line: 914, col: 21, offset: 26026},
												name: "INNER",
											},
											&ruleRefExpr{
												pos:  position{line: 914, col: 29, offset: 26034},
												name: "LEFT",
											},
											&ruleRefExpr{
												pos:  position{line: 914, col: 36, offset: 26041},
												name: "RIGHT",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 915, col: 5, offset: 26074},
						run: (*parser).callonSQLJoinStyle11,
						expr: &litMatcher{
							pos:        position{line: 915, col: 5, offset: 26074},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLWhere",
			pos:  position{line: 917, col: 1, offset: 26102},
			expr: &actionExpr{
				pos: position{line: 918, col: 5, offset: 26115},
				run: (*parser).callonSQLWhere1,
				expr: &seqExpr{
					pos: position{line: 918, col: 5, offset: 26115},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 918, col: 5, offset: 26115},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 918, col: 7, offset: 26117},
							name: "WHERE",
						},
						&ruleRefExpr{
							pos:  position{line: 918, col: 13, offset: 26123},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 918, col: 15, offset: 26125},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 918, col: 20, offset: 26130},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLGroupBy",
			pos:  position{line: 920, col: 1, offset: 26166},
			expr: &actionExpr{
				pos: position{line: 921, col: 5, offset: 26181},
				run: (*parser).callonSQLGroupBy1,
				expr: &seqExpr{
					pos: position{line: 921, col: 5, offset: 26181},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 921, col: 5, offset: 26181},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 921, col: 7, offset: 26183},
							name: "GROUP",
						},
						&ruleRefExpr{
							pos:  position{line: 921, col: 13, offset: 26189},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 921, col: 15, offset: 26191},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 921, col: 18, offset: 26194},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 921, col: 20, offset: 26196},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 921, col: 28, offset: 26204},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLHaving",
			pos:  position{line: 923, col: 1, offset: 26240},
			expr: &actionExpr{
				pos: position{line: 924, col: 5, offset: 26254},
				run: (*parser).callonSQLHaving1,
				expr: &seqExpr{
					pos: position{line: 924, col: 5, offset: 26254},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 924, col: 5, offset: 26254},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 924, col: 7, offset: 26256},
							name: "HAVING",
						},
						&ruleRefExpr{
							pos:  position{line: 924, col: 14, offset: 26263},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 924, col: 16, offset: 26265},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 924, col: 21, offset: 26270},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrderBy",
			pos:  position{line: 926, col: 1, offset: 26306},
			expr: &actionExpr{
				pos: position{line: 927, col: 5, offset: 26321},
				run: (*parser).callonSQLOrderBy1,
				expr: &seqExpr{
					pos: position{line: 927, col: 5, offset: 26321},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 927, col: 5, offset: 26321},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 927, col: 7, offset: 26323},
							name: "ORDER",
						},
						&ruleRefExpr{
							pos:  position{line: 927, col: 13, offset: 26329},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 927, col: 15, offset: 26331},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 927, col: 18, offset: 26334},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 927, col: 20, offset: 26336},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 927, col: 25, offset: 26341},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 927, col: 31, offset: 26347},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 927, col: 37, offset: 26353},
								name: "SQLOrder",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrder",
			pos:  position{line: 931, col: 1, offset: 26463},
			expr: &choiceExpr{
				pos: position{line: 932, col: 5, offset: 26476},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 932, col: 5, offset: 26476},
						run: (*parser).callonSQLOrder2,
						expr: &seqExpr{
							pos: position{line: 932, col: 5, offset: 26476},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 932, col: 5, offset: 26476},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 932, col: 7, offset: 26478},
									label: "dir",
									expr: &choiceExpr{
										pos: position{line: 932, col: 12, offset: 26483},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 932, col: 12, offset: 26483},
												name: "ASC",
											},
											&ruleRefExpr{
												pos:  position{line: 932, col: 18, offset: 26489},
												name: "DESC",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 933, col: 5, offset: 26519},
						run: (*parser).callonSQLOrder9,
						expr: &litMatcher{
							pos:        position{line: 933, col: 5, offset: 26519},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLLimit",
			pos:  position{line: 935, col: 1, offset: 26545},
			expr: &choiceExpr{
				pos: position{line: 936, col: 5, offset: 26558},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 936, col: 5, offset: 26558},
						run: (*parser).callonSQLLimit2,
						expr: &seqExpr{
							pos: position{line: 936, col: 5, offset: 26558},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 936, col: 5, offset: 26558},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 936, col: 7, offset: 26560},
									name: "LIMIT",
								},
								&ruleRefExpr{
									pos:  position{line: 936, col: 13, offset: 26566},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 936, col: 15, offset: 26568},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 936, col: 21, offset: 26574},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 937, col: 5, offset: 26605},
						run: (*parser).callonSQLLimit9,
						expr: &litMatcher{
							pos:        position{line: 937, col: 5, offset: 26605},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SELECT",
			pos:  position{line: 939, col: 1, offset: 26627},
			expr: &actionExpr{
				pos: position{line: 939, col: 10, offset: 26636},
				run: (*parser).callonSELECT1,
				expr: &litMatcher{
					pos:        position{line: 939, col: 10, offset: 26636},
					val:        "select",
					ignoreCase: true,
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 940, col: 1, offset: 26671},
			expr: &actionExpr{
				pos: position{line: 940, col: 6, offset: 26676},
				run: (*parser).callonAS1,
				expr: &litMatcher{
					pos:        position{line: 940, col: 6, offset: 26676},
					val:        "as",
					ignoreCase: true,
				},
			},
		},
		{
			name: "FROM",
			pos:  position{line: 941, col: 1, offset: 26703},
			expr: &actionExpr{
				pos: position{line: 941, col: 8, offset: 26710},
				run: (*parser).callonFROM1,
				expr: &litMatcher{
					pos:        position{line: 941, col: 8, offset: 26710},
					val:        "from",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JOIN",
			pos:  position{line: 942, col: 1, offset: 26741},
			expr: &actionExpr{
				pos: position{line: 942, col: 8, offset: 26748},
				run: (*parser).callonJOIN1,
				expr: &litMatcher{
					pos:        position{line: 942, col: 8, offset: 26748},
					val:        "join",
					ignoreCase: true,
				},
			},
		},
		{
			name: "WHERE",
			pos:  position{line: 943, col: 1, offset: 26779},
			expr: &actionExpr{
				pos: position{line: 943, col: 9, offset: 26787},
				run: (*parser).callonWHERE1,
				expr: &litMatcher{
					pos:        position{line: 943, col: 9, offset: 26787},
					val:        "where",
					ignoreCase: true,
				},
			},
		},
		{
			name: "GROUP",
			pos:  position{line: 944, col: 1, offset: 26820},
			expr: &actionExpr{
				pos: position{line: 944, col: 9, offset: 26828},
				run: (*parser).callonGROUP1,
				expr: &litMatcher{
					pos:        position{line: 944, col: 9, offset: 26828},
					val:        "group",
					ignoreCase: true,
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 945, col: 1, offset: 26861},
			expr: &actionExpr{
				pos: position{line: 945, col: 6, offset: 26866},
				run: (*parser).callonBY1,
				expr: &litMatcher{
					pos:        position{line: 945, col: 6, offset: 26866},
					val:        "by",
					ignoreCase: true,
				},
			},
		},
		{
			name: "HAVING",
			pos:  position{line: 946, col: 1, offset: 26893},
			expr: &actionExpr{
				pos: position{line: 946, col: 10, offset: 26902},
				run: (*parser).callonHAVING1,
				expr: &litMatcher{
					pos:        position{line: 946, col: 10, offset: 26902},
					val:        "having",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ORDER",
			pos:  position{line: 947, col: 1, offset: 26937},
			expr: &actionExpr{
				pos: position{line: 947, col: 9, offset: 26945},
				run: (*parser).callonORDER1,
				expr: &litMatcher{
					pos:        position{line: 947, col: 9, offset: 26945},
					val:        "order",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ON",
			pos:  position{line: 948, col: 1, offset: 26978},
			expr: &actionExpr{
				pos: position{line: 948, col: 6, offset: 26983},
				run: (*parser).callonON1,
				expr: &litMatcher{
					pos:        position{line: 948, col: 6, offset: 26983},
					val:        "on",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LIMIT",
			pos:  position{line: 949, col: 1, offset: 27010},
			expr: &actionExpr{
				pos: position{line: 949, col: 9, offset: 27018},
				run: (*parser).callonLIMIT1,
				expr: &litMatcher{
					pos:        position{line: 949, col: 9, offset: 27018},
					val:        "limit",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ASC",
			pos:  position{line: 950, col: 1, offset: 27051},
			expr: &actionExpr{
				pos: position{line: 950, col: 7, offset: 27057},
				run: (*parser).callonASC1,
				expr: &litMatcher{
					pos:        position{line: 950, col: 7, offset: 27057},
					val:        "asc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "DESC",
			pos:  position{line: 951, col: 1, offset: 27086},
			expr: &actionExpr{
				pos: position{line: 951, col: 8, offset: 27093},
				run: (*parser).callonDESC1,
				expr: &litMatcher{
					pos:        position{line: 951, col: 8, offset: 27093},
					val:        "desc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ANTI",
			pos:  position{line: 952, col: 1, offset: 27124},
			expr: &actionExpr{
				pos: position{line: 952, col: 8, offset: 27131},
				run: (*parser).callonANTI1,
				expr: &litMatcher{
					pos:        position{line: 952, col: 8, offset: 27131},
					val:        "anti",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LEFT",
			pos:  position{line: 953, col: 1, offset: 27162},
			expr: &actionExpr{
				pos: position{line: 953, col: 8, offset: 27169},
				run: (*parser).callonLEFT1,
				expr: &litMatcher{
					pos:        position{line: 953, col: 8, offset: 27169},
					val:        "left",
					ignoreCase: true,
				},
			},
		},
		{
			name: "RIGHT",
			pos:  position{line: 954, col: 1, offset: 27200},
			expr: &actionExpr{
				pos: position{line: 954, col: 9, offset: 27208},
				run: (*parser).callonRIGHT1,
				expr: &litMatcher{
					pos:        position{line: 954, col: 9, offset: 27208},
					val:        "right",
					ignoreCase: true,
				},
			},
		},
		{
			name: "INNER",
			pos:  position{line: 955, col: 1, offset: 27241},
			expr: &actionExpr{
				pos: position{line: 955, col: 9, offset: 27249},
				run: (*parser).callonINNER1,
				expr: &litMatcher{
					pos:        position{line: 955, col: 9, offset: 27249},
					val:        "inner",
					ignoreCase: true,
				},
			},
		},
		{
			name: "SQLTokenSentinels",
			pos:  position{line: 957, col: 1, offset: 27283},
			expr: &choiceExpr{
				pos: position{line: 958, col: 5, offset: 27305},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 958, col: 5, offset: 27305},
						name: "SELECT",
					},
					&ruleRefExpr{
						pos:  position{line: 958, col: 14, offset: 27314},
						name: "AS",
					},
					&ruleRefExpr{
						pos:  position{line: 958, col: 19, offset: 27319},
						name: "FROM",
					},
					&ruleRefExpr{
						pos:  position{line: 958, col: 27, offset: 27327},
						name: "JOIN",
					},
					&ruleRefExpr{
						pos:  position{line: 958, col: 34, offset: 27334},
						name: "WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 958, col: 42, offset: 27342},
						name: "GROUP",
					},
					&ruleRefExpr{
						pos:  position{line: 958, col: 50, offset: 27350},
						name: "HAVING",
					},
					&ruleRefExpr{
						pos:  position{line: 958, col: 59, offset: 27359},
						name: "ORDER",
					},
					&ruleRefExpr{
						pos:  position{line: 958, col: 67, offset: 27367},
						name: "LIMIT",
					},
					&ruleRefExpr{
						pos:  position{line: 958, col: 75, offset: 27375},
						name: "ON",
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 962, col: 1, offset: 27401},
			expr: &choiceExpr{
				pos: position{line: 963, col: 5, offset: 27413},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 963, col: 5, offset: 27413},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 964, col: 5, offset: 27429},
						name: "TemplateLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 965, col: 5, offset: 27449},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 966, col: 5, offset: 27467},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 967, col: 5, offset: 27486},
						name: "BytesLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 968, col: 5, offset: 27503},
						name: "Duration",
					},
					&ruleRefExpr{
						pos:  position{line: 969, col: 5, offset: 27516},
						name: "Time",
					},
					&ruleRefExpr{
						pos:  position{line: 970, col: 5, offset: 27525},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 971, col: 5, offset: 27542},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 972, col: 5, offset: 27561},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 973, col: 5, offset: 27580},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 975, col: 1, offset: 27593},
			expr: &choiceExpr{
				pos: position{line: 976, col: 5, offset: 27611},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 976, col: 5, offset: 27611},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 976, col: 5, offset: 27611},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 976, col: 5, offset: 27611},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 976, col: 7, offset: 27613},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 976, col: 14, offset: 27620},
									expr: &ruleRefExpr{
										pos:  position{line: 976, col: 15, offset: 27621},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 979, col: 5, offset: 27736},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 979, col: 5, offset: 27736},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 979, col: 7, offset: 27738},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 983, col: 1, offset: 27842},
			expr: &choiceExpr{
				pos: position{line: 984, col: 5, offset: 27861},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 984, col: 5, offset: 27861},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 984, col: 5, offset: 27861},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 984, col: 5, offset: 27861},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 984, col: 7, offset: 27863},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 984, col: 11, offset: 27867},
									expr: &ruleRefExpr{
										pos:  position{line: 984, col: 12, offset: 27868},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 987, col: 5, offset: 27982},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 987, col: 5, offset: 27982},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 987, col: 7, offset: 27984},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 991, col: 1, offset: 28083},
			expr: &actionExpr{
				pos: position{line: 992, col: 5, offset: 28100},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 992, col: 5, offset: 28100},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 992, col: 7, offset: 28102},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 996, col: 1, offset: 28215},
			expr: &actionExpr{
				pos: position{line: 997, col: 5, offset: 28234},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 997, col: 5, offset: 28234},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 997, col: 7, offset: 28236},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 1001, col: 1, offset: 28345},
			expr: &choiceExpr{
				pos: position{line: 1002, col: 5, offset: 28364},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1002, col: 5, offset: 28364},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 1002, col: 5, offset: 28364},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1003, col: 5, offset: 28477},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 1003, col: 5, offset: 28477},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 1005, col: 1, offset: 28588},
			expr: &actionExpr{
				pos: position{line: 1006, col: 5, offset: 28604},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 1006, col: 5, offset: 28604},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "BytesLiteral",
			pos:  position{line: 1008, col: 1, offset: 28710},
			expr: &actionExpr{
				pos: position{line: 1009, col: 5, offset: 28727},
				run: (*parser).callonBytesLiteral1,
				expr: &seqExpr{
					pos: position{line: 1009, col: 5, offset: 28727},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1009, col: 5, offset: 28727},
							val:        "0x",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1009, col: 10, offset: 28732},
							expr: &ruleRefExpr{
								pos:  position{line: 1009, col: 10, offset: 28732},
								name: "HexDigit",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeLiteral",
			pos:  position{line: 1013, col: 1, offset: 28847},
			expr: &actionExpr{
				pos: position{line: 1014, col: 5, offset: 28863},
				run: (*parser).callonTypeLiteral1,
				expr: &seqExpr{
					pos: position{line: 1014, col: 5, offset: 28863},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1014, col: 5, offset: 28863},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1014, col: 9, offset: 28867},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1014, col: 13, offset: 28871},
								name: "Type",
							},
						},
						&litMatcher{
							pos:        position{line: 1014, col: 18, offset: 28876},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "CastType",
			pos:  position{line: 1018, col: 1, offset: 28965},
			expr: &choiceExpr{
				pos: position{line: 1019, col: 5, offset: 28978},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1019, col: 5, offset: 28978},
						name: "TypeLiteral",
					},
					&actionExpr{
						pos: position{line: 1020, col: 5, offset: 28994},
						run: (*parser).callonCastType3,
						expr: &labeledExpr{
							pos:   position{line: 1020, col: 5, offset: 28994},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1020, col: 9, offset: 28998},
								name: "PrimitiveType",
							},
						},
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 1024, col: 1, offset: 29097},
			expr: &choiceExpr{
				pos: position{line: 1025, col: 5, offset: 29106},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1025, col: 5, offset: 29106},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1026, col: 5, offset: 29122},
						name: "AmbiguousType",
					},
					&ruleRefExpr{
						pos:  position{line: 1027, col: 5, offset: 29140},
						name: "ComplexType",
					},
				},
			},
		},
		{
			name: "AmbiguousType",
			pos:  position{line: 1029, col: 1, offset: 29153},
			expr: &choiceExpr{
				pos: position{line: 1030, col: 5, offset: 29171},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1030, col: 5, offset: 29171},
						run: (*parser).callonAmbiguousType2,
						expr: &seqExpr{
							pos: position{line: 1030, col: 5, offset: 29171},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1030, col: 5, offset: 29171},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1030, col: 10, offset: 29176},
										name: "PrimitiveType",
									},
								},
								&notExpr{
									pos: position{line: 1030, col: 24, offset: 29190},
									expr: &ruleRefExpr{
										pos:  position{line: 1030, col: 25, offset: 29191},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1031, col: 5, offset: 29231},
						run: (*parser).callonAmbiguousType8,
						expr: &seqExpr{
							pos: position{line: 1031, col: 5, offset: 29231},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1031, col: 5, offset: 29231},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1031, col: 10, offset: 29236},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1031, col: 25, offset: 29251},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1031, col: 28, offset: 29254},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1031, col: 32, offset: 29258},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1031, col: 35, offset: 29261},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1031, col: 39, offset: 29265},
										name: "Type",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1034, col: 5, offset: 29367},
						run: (*parser).callonAmbiguousType17,
						expr: &labeledExpr{
							pos:   position{line: 1034, col: 5, offset: 29367},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1034, col: 10, offset: 29372},
								name: "IdentifierName",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1037, col: 5, offset: 29474},
						run: (*parser).callonAmbiguousType20,
						expr: &seqExpr{
							pos: position{line: 1037, col: 5, offset: 29474},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1037, col: 5, offset: 29474},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1037, col: 9, offset: 29478},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1037, col: 12, offset: 29481},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 1037, col: 14, offset: 29483},
										name: "TypeUnion",
									},
								},
								&litMatcher{
									pos:        position{line: 1037, col: 25, offset: 29494},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeUnion",
			pos:  position{line: 1039, col: 1, offset: 29517},
			expr: &actionExpr{
				pos: position{line: 1040, col: 5, offset: 29531},
				run: (*parser).callonTypeUnion1,
				expr: &labeledExpr{
					pos:   position{line: 1040, col: 5, offset: 29531},
					label: "types",
					expr: &ruleRefExpr{
						pos:  position{line: 1040, col: 11, offset: 29537},
						name: "TypeList",
					},
				},
			},
		},
		{
			name: "TypeList",
			pos:  position{line: 1044, col: 1, offset: 29633},
			expr: &actionExpr{
				pos: position{line: 1045, col: 5, offset: 29646},
				run: (*parser).callonTypeList1,
				expr: &seqExpr{
					pos: position{line: 1045, col: 5, offset: 29646},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1045, col: 5, offset: 29646},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1045, col: 11, offset: 29652},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 1045, col: 16, offset: 29657},
							label: "rest",
							expr: &oneOrMoreExpr{
								pos: position{line: 1045, col: 21, offset: 29662},
								expr: &ruleRefExpr{
									pos:  position{line: 1045, col: 21, offset: 29662},
									name: "TypeListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeListTail",
			pos:  position{line: 1049, col: 1, offset: 29756},
			expr: &actionExpr{
				pos: position{line: 1049, col: 16, offset: 29771},
				run: (*parser).callonTypeListTail1,
				expr: &seqExpr{
					pos: position{line: 1049, col: 16, offset: 29771},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1049, col: 16, offset: 29771},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1049, col: 19, offset: 29774},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1049, col: 23, offset: 29778},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1049, col: 26, offset: 29781},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1049, col: 30, offset: 29785},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexType",
			pos:  position{line: 1051, col: 1, offset: 29811},
			expr: &choiceExpr{
				pos: position{line: 1052, col: 5, offset: 29827},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1052, col: 5, offset: 29827},
						run: (*parser).callonComplexType2,
						expr: &seqExpr{
							pos: position{line: 1052, col: 5, offset: 29827},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1052, col: 5, offset: 29827},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1052, col: 9, offset: 29831},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1052, col: 12, offset: 29834},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 1052, col: 19, offset: 29841},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1052, col: 33, offset: 29855},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1052, col: 36, offset: 29858},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1055, col: 5, offset: 29953},
						run: (*parser).callonComplexType10,
						expr: &seqExpr{
							pos: position{line: 1055, col: 5, offset: 29953},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1055, col: 5, offset: 29953},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1055, col: 9, offset: 29957},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1055, col: 12, offset: 29960},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1055, col: 16, offset: 29964},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1055, col: 21, offset: 29969},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1055, col: 24, offset: 29972},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1058, col: 5, offset: 30061},
						run: (*parser).callonComplexType18,
						expr: &seqExpr{
							pos: position{line: 1058, col: 5, offset: 30061},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1058, col: 5, offset: 30061},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1058, col: 10, offset: 30066},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1058, col: 14, offset: 30070},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1058, col: 18, offset: 30074},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1058, col: 23, offset: 30079},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1058, col: 26, offset: 30082},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1061, col: 5, offset: 30170},
						run: (*parser).callonComplexType26,
						expr: &seqExpr{
							pos: position{line: 1061, col: 5, offset: 30170},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1061, col: 5, offset: 30170},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1061, col: 10, offset: 30175},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1061, col: 13, offset: 30178},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 1061, col: 21, offset: 30186},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1061, col: 26, offset: 30191},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1061, col: 29, offset: 30194},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1061, col: 33, offset: 30198},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1061, col: 36, offset: 30201},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 1061, col: 44, offset: 30209},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1061, col: 49, offset: 30214},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1061, col: 52, offset: 30217},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateLiteral",
			pos:  position{line: 1065, col: 1, offset: 30331},
			expr: &actionExpr{
				pos: position{line: 1066, col: 5, offset: 30351},
				run: (*parser).callonTemplateLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1066, col: 5, offset: 30351},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1066, col: 7, offset: 30353},
						name: "TemplateLiteralParts",
					},
				},
			},
		},
		{
			name: "TemplateLiteralParts",
			pos:  position{line: 1073, col: 1, offset: 30569},
			expr: &choiceExpr{
				pos: position{line: 1074, col: 5, offset: 30594},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1074, col: 5, offset: 30594},
						run: (*parser).callonTemplateLiteralParts2,
						expr: &seqExpr{
							pos: position{line: 1074, col: 5, offset: 30594},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1074, col: 5, offset: 30594},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1074, col: 9, offset: 30598},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1074, col: 11, offset: 30600},
										expr: &ruleRefExpr{
											pos:  position{line: 1074, col: 11, offset: 30600},
											name: "TemplateDoubleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1074, col: 37, offset: 30626},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1075, col: 5, offset: 30652},
						run: (*parser).callonTemplateLiteralParts9,
						expr: &seqExpr{
							pos: position{line: 1075, col: 5, offset: 30652},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1075, col: 5, offset: 30652},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1075, col: 9, offset: 30656},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1075, col: 11, offset: 30658},
										expr: &ruleRefExpr{
											pos:  position{line: 1075, col: 11, offset: 30658},
											name: "TemplateSingleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1075, col: 37, offset: 30684},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedPart",
			pos:  position{line: 1077, col: 1, offset: 30707},
			expr: &choiceExpr{
				pos: position{line: 1078, col: 5, offset: 30736},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1078, col: 5, offset: 30736},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 1079, col: 5, offset: 30753},
						run: (*parser).callonTemplateDoubleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 1079, col: 5, offset: 30753},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1079, col: 7, offset: 30755},
								expr: &ruleRefExpr{
									pos:  position{line: 1079, col: 7, offset: 30755},
									name: "TemplateDoubleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedChar",
			pos:  position{line: 1083, col: 1, offset: 30892},
			expr: &choiceExpr{
				pos: position{line: 1084, col: 5, offset: 30921},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1084, col: 5, offset: 30921},
						run: (*parser).callonTemplateDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1084, col: 5, offset: 30921},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1084, col: 5, offset: 30921},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1084, col: 10, offset: 30926},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1084, col: 12, offset: 30928},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1085, col: 5, offset: 30955},
						run: (*parser).callonTemplateDoubleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1085, col: 5, offset: 30955},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1085, col: 5, offset: 30955},
									expr: &litMatcher{
										pos:        position{line: 1085, col: 8, offset: 30958},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1085, col: 15, offset: 30965},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1085, col: 17, offset: 30967},
										name: "DoubleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedPart",
			pos:  position{line: 1087, col: 1, offset: 31003},
			expr: &choiceExpr{
				pos: position{line: 1088, col: 5, offset: 31032},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1088, col: 5, offset: 31032},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 1089, col: 5, offset: 31049},
						run: (*parser).callonTemplateSingleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 1089, col: 5, offset: 31049},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1089, col: 7, offset: 31051},
								expr: &ruleRefExpr{
									pos:  position{line: 1089, col: 7, offset: 31051},
									name: "TemplateSingleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedChar",
			pos:  position{line: 1093, col: 1, offset: 31188},
			expr: &choiceExpr{
				pos: position{line: 1094, col: 5, offset: 31217},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1094, col: 5, offset: 31217},
						run: (*parser).callonTemplateSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1094, col: 5, offset: 31217},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1094, col: 5, offset: 31217},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1094, col: 10, offset: 31222},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1094, col: 12, offset: 31224},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1095, col: 5, offset: 31251},
						run: (*parser).callonTemplateSingleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1095, col: 5, offset: 31251},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1095, col: 5, offset: 31251},
									expr: &litMatcher{
										pos:        position{line: 1095, col: 8, offset: 31254},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1095, col: 15, offset: 31261},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1095, col: 17, offset: 31263},
										name: "SingleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateExpr",
			pos:  position{line: 1097, col: 1, offset: 31299},
			expr: &actionExpr{
				pos: position{line: 1098, col: 5, offset: 31316},
				run: (*parser).callonTemplateExpr1,
				expr: &seqExpr{
					pos: position{line: 1098, col: 5, offset: 31316},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1098, col: 5, offset: 31316},
							val:        "${",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1098, col: 10, offset: 31321},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1098, col: 13, offset: 31324},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 1098, col: 15, offset: 31326},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1098, col: 20, offset: 31331},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1098, col: 23, offset: 31334},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 1113, col: 1, offset: 31630},
			expr: &actionExpr{
				pos: position{line: 1114, col: 5, offset: 31648},
				run: (*parser).callonPrimitiveType1,
				expr: &choiceExpr{
					pos: position{line: 1114, col: 9, offset: 31652},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 1114, col: 9, offset: 31652},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1114, col: 19, offset: 31662},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1114, col: 30, offset: 31673},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1114, col: 41, offset: 31684},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1115, col: 9, offset: 31701},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1115, col: 18, offset: 31710},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1115, col: 28, offset: 31720},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1115, col: 38, offset: 31730},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1116, col: 9, offset: 31746},
							val:        "float32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1116, col: 21, offset: 31758},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1117, col: 9, offset: 31776},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1117, col: 18, offset: 31785},
							val:        "string",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1118, col: 9, offset: 31802},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1118, col: 22, offset: 31815},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1119, col: 9, offset: 31830},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1120, col: 9, offset: 31846},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1120, col: 16, offset: 31853},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1121, col: 9, offset: 31867},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1121, col: 18, offset: 31876},
							val:        "null",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldList",
			pos:  position{line: 1125, col: 1, offset: 31992},
			expr: &choiceExpr{
				pos: position{line: 1126, col: 5, offset: 32010},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1126, col: 5, offset: 32010},
						run: (*parser).callonTypeFieldList2,
						expr: &seqExpr{
							pos: position{line: 1126, col: 5, offset: 32010},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1126, col: 5, offset: 32010},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 1126, col: 11, offset: 32016},
										name: "TypeField",
									},
								},
								&labeledExpr{
									pos:   position{line: 1126, col: 21, offset: 32026},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1126, col: 26, offset: 32031},
										expr: &ruleRefExpr{
											pos:  position{line: 1126, col: 26, offset: 32031},
											name: "TypeFieldListTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1129, col: 5, offset: 32133},
						run: (*parser).callonTypeFieldList9,
						expr: &litMatcher{
							pos:        position{line: 1129, col: 5, offset: 32133},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTail",
			pos:  position{line: 1131, col: 1, offset: 32157},
			expr: &actionExpr{
				pos: position{line: 1131, col: 21, offset: 32177},
				run: (*parser).callonTypeFieldListTail1,
				expr: &seqExpr{
					pos: position{line: 1131, col: 21, offset: 32177},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1131, col: 21, offset: 32177},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1131, col: 24, offset: 32180},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1131, col: 28, offset: 32184},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1131, col: 31, offset: 32187},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1131, col: 35, offset: 32191},
								name: "TypeField",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeField",
			pos:  position{line: 1133, col: 1, offset: 32222},
			expr: &actionExpr{
				pos: position{line: 1134, col: 5, offset: 32236},
				run: (*parser).callonTypeField1,
				expr: &seqExpr{
					pos: position{line: 1134, col: 5, offset: 32236},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1134, col: 5, offset: 32236},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1134, col: 10, offset: 32241},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1134, col: 20, offset: 32251},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1134, col: 23, offset: 32254},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1134, col: 27, offset: 32258},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1134, col: 30, offset: 32261},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1134, col: 34, offset: 32265},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 1138, col: 1, offset: 32347},
			expr: &choiceExpr{
				pos: position{line: 1139, col: 5, offset: 32361},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1139, col: 5, offset: 32361},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 1140, col: 5, offset: 32380},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 1142, col: 1, offset: 32394},
			expr: &actionExpr{
				pos: position{line: 1142, col: 12, offset: 32405},
				run: (*parser).callonAndToken1,
				expr: &seqExpr{
					pos: position{line: 1142, col: 12, offset: 32405},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1142, col: 13, offset: 32406},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1142, col: 13, offset: 32406},
									val:        "and",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1142, col: 21, offset: 32414},
									val:        "AND",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1142, col: 28, offset: 32421},
							expr: &ruleRefExpr{
								pos:  position{line: 1142, col: 29, offset: 32422},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 1143, col: 1, offset: 32459},
			expr: &actionExpr{
				pos: position{line: 1143, col: 11, offset: 32469},
				run: (*parser).callonOrToken1,
				expr: &seqExpr{
					pos: position{line: 1143, col: 11, offset: 32469},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1143, col: 12, offset: 32470},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1143, col: 12, offset: 32470},
									val:        "or",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1143, col: 19, offset: 32477},
									val:        "OR",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1143, col: 25, offset: 32483},
							expr: &ruleRefExpr{
								pos:  position{line: 1143, col: 26, offset: 32484},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 1144, col: 1, offset: 32520},
			expr: &actionExpr{
				pos: position{line: 1144, col: 11, offset: 32530},
				run: (*parser).callonInToken1,
				expr: &seqExpr{
					pos: position{line: 1144, col: 11, offset: 32530},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1144, col: 11, offset: 32530},
							val:        "in",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1144, col: 16, offset: 32535},
							expr: &ruleRefExpr{
								pos:  position{line: 1144, col: 17, offset: 32536},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 1145, col: 1, offset: 32572},
			expr: &actionExpr{
				pos: position{line: 1145, col: 12, offset: 32583},
				run: (*parser).callonNotToken1,
				expr: &seqExpr{
					pos: position{line: 1145, col: 12, offset: 32583},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1145, col: 13, offset: 32584},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1145, col: 13, offset: 32584},
									val:        "not",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1145, col: 21, offset: 32592},
									val:        "NOT",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1145, col: 28, offset: 32599},
							expr: &ruleRefExpr{
								pos:  position{line: 1145, col: 29, offset: 32600},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 1146, col: 1, offset: 32637},
			expr: &actionExpr{
				pos: position{line: 1146, col: 11, offset: 32647},
				run: (*parser).callonByToken1,
				expr: &seqExpr{
					pos: position{line: 1146, col: 11, offset: 32647},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1146, col: 11, offset: 32647},
							val:        "by",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1146, col: 16, offset: 32652},
							expr: &ruleRefExpr{
								pos:  position{line: 1146, col: 17, offset: 32653},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 1148, col: 1, offset: 32690},
			expr: &charClassMatcher{
				pos:        position{line: 1148, col: 19, offset: 32708},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 1150, col: 1, offset: 32720},
			expr: &choiceExpr{
				pos: position{line: 1150, col: 18, offset: 32737},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1150, col: 18, offset: 32737},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 1150, col: 36, offset: 32755},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 1152, col: 1, offset: 32762},
			expr: &actionExpr{
				pos: position{line: 1153, col: 5, offset: 32777},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 1153, col: 5, offset: 32777},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 1153, col: 8, offset: 32780},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 1155, col: 1, offset: 32861},
			expr: &choiceExpr{
				pos: position{line: 1156, col: 5, offset: 32880},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1156, col: 5, offset: 32880},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 1156, col: 5, offset: 32880},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1156, col: 5, offset: 32880},
									expr: &seqExpr{
										pos: position{line: 1156, col: 7, offset: 32882},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1156, col: 7, offset: 32882},
												name: "IDGuard",
											},
											&notExpr{
												pos: position{line: 1156, col: 15, offset: 32890},
												expr: &ruleRefExpr{
													pos:  position{line: 1156, col: 16, offset: 32891},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1156, col: 32, offset: 32907},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1156, col: 48, offset: 32923},
									expr: &ruleRefExpr{
										pos:  position{line: 1156, col: 48, offset: 32923},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1157, col: 5, offset: 32975},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 1157, col: 5, offset: 32975},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1158, col: 5, offset: 33014},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 1158, col: 5, offset: 33014},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1158, col: 5, offset: 33014},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1158, col: 10, offset: 33019},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1158, col: 13, offset: 33022},
										name: "IDGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1160, col: 5, offset: 33113},
						run: (*parser).callonIdentifierName19,
						expr: &litMatcher{
							pos:        position{line: 1160, col: 5, offset: 33113},
							val:        "type",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1161, col: 5, offset: 33155},
						run: (*parser).callonIdentifierName21,
						expr: &seqExpr{
							pos: position{line: 1161, col: 5, offset: 33155},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1161, col: 5, offset: 33155},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1161, col: 8, offset: 33158},
										name: "SQLTokenSentinels",
									},
								},
								&andExpr{
									pos: position{line: 1161, col: 26, offset: 33176},
									expr: &seqExpr{
										pos: position{line: 1161, col: 28, offset: 33178},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1161, col: 28, offset: 33178},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1161, col: 31, offset: 33181},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IDGuard",
			pos:  position{line: 1163, col: 1, offset: 33206},
			expr: &choiceExpr{
				pos: position{line: 1164, col: 5, offset: 33218},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1164, col: 5, offset: 33218},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1165, col: 5, offset: 33237},
						name: "NullLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1166, col: 5, offset: 33253},
						name: "NaN",
					},
					&ruleRefExpr{
						pos:  position{line: 1167, col: 5, offset: 33261},
						name: "Infinity",
					},
				},
			},
		},
		{
			name: "Time",
			pos:  position{line: 1169, col: 1, offset: 33271},
			expr: &actionExpr{
				pos: position{line: 1170, col: 5, offset: 33280},
				run: (*parser).callonTime1,
				expr: &seqExpr{
					pos: position{line: 1170, col: 5, offset: 33280},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1170, col: 5, offset: 33280},
							name: "FullDate",
						},
						&litMatcher{
							pos:        position{line: 1170, col: 14, offset: 33289},
							val:        "T",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1170, col: 18, offset: 33293},
							name: "FullTime",
						},
					},
				},
			},
		},
		{
			name: "FullDate",
			pos:  position{line: 1174, col: 1, offset: 33413},
			expr: &seqExpr{
				pos: position{line: 1174, col: 12, offset: 33424},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1174, col: 12, offset: 33424},
						name: "D4",
					},
					&litMatcher{
						pos:        position{line: 1174, col: 15, offset: 33427},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1174, col: 19, offset: 33431},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1174, col: 22, offset: 33434},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1174, col: 26, offset: 33438},
						name: "D2",
					},
				},
			},
		},
		{
			name: "D4",
			pos:  position{line: 1176, col: 1, offset: 33442},
			expr: &seqExpr{
				pos: position{line: 1176, col: 6, offset: 33447},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1176, col: 6, offset: 33447},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1176, col: 11, offset: 33452},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1176, col: 16, offset: 33457},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1176, col: 21, offset: 33462},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "D2",
			pos:  position{line: 1177, col: 1, offset: 33468},
			expr: &seqExpr{
				pos: position{line: 1177, col: 6, offset: 33473},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1177, col: 6, offset: 33473},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1177, col: 11, offset: 33478},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "FullTime",
			pos:  position{line: 1179, col: 1, offset: 33485},
			expr: &seqExpr{
				pos: position{line: 1179, col: 12, offset: 33496},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1179, col: 12, offset: 33496},
						name: "PartialTime",
					},
					&ruleRefExpr{
						pos:  position{line: 1179, col: 24, offset: 33508},
						name: "TimeOffset",
					},
				},
			},
		},
		{
			name: "PartialTime",
			pos:  position{line: 1181, col: 1, offset: 33520},
			expr: &seqExpr{
				pos: position{line: 1181, col: 15, offset: 33534},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1181, col: 15, offset: 33534},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1181, col: 18, offset: 33537},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1181, col: 22, offset: 33541},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1181, col: 25, offset: 33544},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1181, col: 29, offset: 33548},
						name: "D2",
					},
					&zeroOrOneExpr{
						pos: position{line: 1181, col: 32, offset: 33551},
						expr: &seqExpr{
							pos: position{line: 1181, col: 33, offset: 33552},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1181, col: 33, offset: 33552},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1181, col: 37, offset: 33556},
									expr: &charClassMatcher{
										pos:        position{line: 1181, col: 37, offset: 33556},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeOffset",
			pos:  position{line: 1183, col: 1, offset: 33566},
			expr: &choiceExpr{
				pos: position{line: 1184, col: 5, offset: 33581},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1184, col: 5, offset: 33581},
						val:        "Z",
						ignoreCase: false,
					},
					&seqExpr{
						pos: position{line: 1185, col: 5, offset: 33589},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 1185, col: 6, offset: 33590},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1185, col: 6, offset: 33590},
										val:        "+",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 1185, col: 12, offset: 33596},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1185, col: 17, offset: 33601},
								name: "D2",
							},
							&litMatcher{
								pos:        position{line: 1185, col: 20, offset: 33604},
								val:        ":",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 1185, col: 24, offset: 33608},
								name: "D2",
							},
							&zeroOrOneExpr{
								pos: position{line: 1185, col: 27, offset: 33611},
								expr: &seqExpr{
									pos: position{line: 1185, col: 28, offset: 33612},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1185, col: 28, offset: 33612},
											val:        ".",
											ignoreCase: false,
										},
										&oneOrMoreExpr{
											pos: position{line: 1185, col: 32, offset: 33616},
											expr: &charClassMatcher{
												pos:        position{line: 1185, col: 32, offset: 33616},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 1187, col: 1, offset: 33626},
			expr: &actionExpr{
				pos: position{line: 1188, col: 5, offset: 33639},
				run: (*parser).callonDuration1,
				expr: &seqExpr{
					pos: position{line: 1188, col: 5, offset: 33639},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1188, col: 5, offset: 33639},
							expr: &litMatcher{
								pos:        position{line: 1188, col: 5, offset: 33639},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1188, col: 10, offset: 33644},
							expr: &seqExpr{
								pos: position{line: 1188, col: 11, offset: 33645},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1188, col: 11, offset: 33645},
										name: "Decimal",
									},
									&ruleRefExpr{
										pos:  position{line: 1188, col: 19, offset: 33653},
										name: "TimeUnit",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Decimal",
			pos:  position{line: 1192, col: 1, offset: 33779},
			expr: &seqExpr{
				pos: position{line: 1192, col: 11, offset: 33789},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1192, col: 11, offset: 33789},
						name: "UInt",
					},
					&zeroOrOneExpr{
						pos: position{line: 1192, col: 16, offset: 33794},
						expr: &seqExpr{
							pos: position{line: 1192, col: 17, offset: 33795},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1192, col: 17, offset: 33795},
									val:        ".",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1192, col: 21, offset: 33799},
									name: "UInt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeUnit",
			pos:  position{line: 1194, col: 1, offset: 33807},
			expr: &choiceExpr{
				pos: position{line: 1195, col: 5, offset: 33820},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1195, col: 5, offset: 33820},
						val:        "ns",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1196, col: 5, offset: 33829},
						val:        "us",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1197, col: 5, offset: 33838},
						val:        "ms",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1198, col: 5, offset: 33847},
						val:        "s",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1199, col: 5, offset: 33855},
						val:        "m",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1200, col: 5, offset: 33863},
						val:        "h",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1201, col: 5, offset: 33871},
						val:        "d",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1202, col: 5, offset: 33879},
						val:        "w",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1203, col: 5, offset: 33887},
						val:        "y",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 1205, col: 1, offset: 33892},
			expr: &actionExpr{
				pos: position{line: 1206, col: 5, offset: 33899},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 1206, col: 5, offset: 33899},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1206, col: 5, offset: 33899},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1206, col: 10, offset: 33904},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1206, col: 14, offset: 33908},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1206, col: 19, offset: 33913},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1206, col: 23, offset: 33917},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1206, col: 28, offset: 33922},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1206, col: 32, offset: 33926},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 1208, col: 1, offset: 33963},
			expr: &actionExpr{
				pos: position{line: 1209, col: 5, offset: 33971},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 1209, col: 5, offset: 33971},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1209, col: 5, offset: 33971},
							expr: &seqExpr{
								pos: position{line: 1209, col: 8, offset: 33974},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1209, col: 8, offset: 33974},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 1209, col: 12, offset: 33978},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 1209, col: 16, offset: 33982},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 1209, col: 20, offset: 33986},
										expr: &choiceExpr{
											pos: position{line: 1209, col: 22, offset: 33988},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1209, col: 22, offset: 33988},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 1209, col: 33, offset: 33999},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1209, col: 39, offset: 34005},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1209, col: 41, offset: 34007},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 1213, col: 1, offset: 34171},
			expr: &choiceExpr{
				pos: position{line: 1214, col: 5, offset: 34189},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1214, col: 5, offset: 34189},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 1214, col: 5, offset: 34189},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1214, col: 5, offset: 34189},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 1214, col: 7, offset: 34191},
										expr: &ruleRefExpr{
											pos:  position{line: 1214, col: 7, offset: 34191},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1214, col: 17, offset: 34201},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1214, col: 19, offset: 34203},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1217, col: 5, offset: 34267},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 1217, col: 5, offset: 34267},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1217, col: 5, offset: 34267},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1217, col: 7, offset: 34269},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1217, col: 11, offset: 34273},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1217, col: 13, offset: 34275},
										expr: &ruleRefExpr{
											pos:  position{line: 1217, col: 13, offset: 34275},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1217, col: 23, offset: 34285},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1217, col: 28, offset: 34290},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1217, col: 30, offset: 34292},
										expr: &ruleRefExpr{
											pos:  position{line: 1217, col: 30, offset: 34292},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1217, col: 40, offset: 34302},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 1217, col: 42, offset: 34304},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1220, col: 5, offset: 34403},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 1220, col: 5, offset: 34403},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1220, col: 5, offset: 34403},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1220, col: 10, offset: 34408},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1220, col: 12, offset: 34410},
										expr: &ruleRefExpr{
											pos:  position{line: 1220, col: 12, offset: 34410},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1220, col: 22, offset: 34420},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1220, col: 24, offset: 34422},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1223, col: 5, offset: 34493},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 1223, col: 5, offset: 34493},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1223, col: 5, offset: 34493},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1223, col: 7, offset: 34495},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1223, col: 11, offset: 34499},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1223, col: 13, offset: 34501},
										expr: &ruleRefExpr{
											pos:  position{line: 1223, col: 13, offset: 34501},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1223, col: 23, offset: 34511},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1226, col: 5, offset: 34579},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 1226, col: 5, offset: 34579},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 1230, col: 1, offset: 34616},
			expr: &choiceExpr{
				pos: position{line: 1231, col: 5, offset: 34628},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1231, col: 5, offset: 34628},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 1232, col: 5, offset: 34635},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 1234, col: 1, offset: 34640},
			expr: &actionExpr{
				pos: position{line: 1234, col: 12, offset: 34651},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 1234, col: 12, offset: 34651},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1234, col: 12, offset: 34651},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1234, col: 16, offset: 34655},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1234, col: 18, offset: 34657},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 1236, col: 1, offset: 34695},
			expr: &actionExpr{
				pos: position{line: 1236, col: 12, offset: 34706},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 1236, col: 12, offset: 34706},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1236, col: 12, offset: 34706},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1236, col: 14, offset: 34708},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 1236, col: 18, offset: 34712},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 1238, col: 1, offset: 34750},
			expr: &actionExpr{
				pos: position{line: 1239, col: 5, offset: 34761},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 1239, col: 5, offset: 34761},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1239, col: 5, offset: 34761},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1239, col: 7, offset: 34763},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 1239, col: 10, offset: 34766},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1239, col: 14, offset: 34770},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1239, col: 16, offset: 34772},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 1243, col: 1, offset: 34845},
			expr: &actionExpr{
				pos: position{line: 1244, col: 5, offset: 34856},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 1244, col: 5, offset: 34856},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1244, col: 5, offset: 34856},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1244, col: 7, offset: 34858},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 1244, col: 11, offset: 34862},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1244, col: 15, offset: 34866},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1244, col: 17, offset: 34868},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 1248, col: 1, offset: 34931},
			expr: &actionExpr{
				pos: position{line: 1249, col: 4, offset: 34939},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 1249, col: 4, offset: 34939},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 1249, col: 6, offset: 34941},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 1251, col: 1, offset: 34981},
			expr: &choiceExpr{
				pos: position{line: 1252, col: 5, offset: 34995},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1252, col: 5, offset: 34995},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 1253, col: 5, offset: 35010},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 1255, col: 1, offset: 35026},
			expr: &actionExpr{
				pos: position{line: 1255, col: 14, offset: 35039},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1255, col: 14, offset: 35039},
					expr: &charClassMatcher{
						pos:        position{line: 1255, col: 14, offset: 35039},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 1257, col: 1, offset: 35078},
			expr: &actionExpr{
				pos: position{line: 1258, col: 5, offset: 35097},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 1258, col: 5, offset: 35097},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1258, col: 5, offset: 35097},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1258, col: 9, offset: 35101},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 1260, col: 1, offset: 35144},
			expr: &choiceExpr{
				pos: position{line: 1261, col: 5, offset: 35160},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1261, col: 5, offset: 35160},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 1261, col: 5, offset: 35160},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1261, col: 5, offset: 35160},
									expr: &litMatcher{
										pos:        position{line: 1261, col: 5, offset: 35160},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1261, col: 10, offset: 35165},
									expr: &charClassMatcher{
										pos:        position{line: 1261, col: 10, offset: 35165},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 1261, col: 17, offset: 35172},
									val:        ".",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1261, col: 21, offset: 35176},
									expr: &charClassMatcher{
										pos:        position{line: 1261, col: 21, offset: 35176},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1261, col: 28, offset: 35183},
									expr: &ruleRefExpr{
										pos:  position{line: 1261, col: 28, offset: 35183},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1264, col: 5, offset: 35242},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 1264, col: 5, offset: 35242},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1264, col: 5, offset: 35242},
									expr: &litMatcher{
										pos:        position{line: 1264, col: 5, offset: 35242},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1264, col: 10, offset: 35247},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1264, col: 14, offset: 35251},
									expr: &charClassMatcher{
										pos:        position{line: 1264, col: 14, offset: 35251},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1264, col: 21, offset: 35258},
									expr: &ruleRefExpr{
										pos:  position{line: 1264, col: 21, offset: 35258},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1267, col: 5, offset: 35317},
						run: (*parser).callonFloatString22,
						expr: &choiceExpr{
							pos: position{line: 1267, col: 7, offset: 35319},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1267, col: 7, offset: 35319},
									name: "NaN",
								},
								&ruleRefExpr{
									pos:  position{line: 1267, col: 13, offset: 35325},
									name: "Infinity",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 1270, col: 1, offset: 35369},
			expr: &seqExpr{
				pos: position{line: 1270, col: 16, offset: 35384},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1270, col: 16, offset: 35384},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 1270, col: 21, offset: 35389},
						expr: &charClassMatcher{
							pos:        position{line: 1270, col: 21, offset: 35389},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1270, col: 27, offset: 35395},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "NaN",
			pos:  position{line: 1272, col: 1, offset: 35407},
			expr: &litMatcher{
				pos:        position{line: 1272, col: 7, offset: 35413},
				val:        "NaN",
				ignoreCase: false,
			},
		},
		{
			name: "Infinity",
			pos:  position{line: 1274, col: 1, offset: 35420},
			expr: &seqExpr{
				pos: position{line: 1274, col: 12, offset: 35431},
				exprs: []interface{}{
					&zeroOrOneExpr{
						pos: position{line: 1274, col: 12, offset: 35431},
						expr: &choiceExpr{
							pos: position{line: 1274, col: 13, offset: 35432},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1274, col: 13, offset: 35432},
									val:        "-",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1274, col: 19, offset: 35438},
									val:        "+",
									ignoreCase: false,
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1274, col: 25, offset: 35444},
						val:        "Inf",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 1276, col: 1, offset: 35451},
			expr: &actionExpr{
				pos: position{line: 1276, col: 7, offset: 35457},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1276, col: 7, offset: 35457},
					expr: &ruleRefExpr{
						pos:  position{line: 1276, col: 7, offset: 35457},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 1278, col: 1, offset: 35499},
			expr: &charClassMatcher{
				pos:        position{line: 1278, col: 12, offset: 35510},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1280, col: 1, offset: 35523},
			expr: &choiceExpr{
				pos: position{line: 1281, col: 5, offset: 35540},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1281, col: 5, offset: 35540},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 1281, col: 5, offset: 35540},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1281, col: 5, offset: 35540},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1281, col: 9, offset: 35544},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1281, col: 11, offset: 35546},
										expr: &ruleRefExpr{
											pos:  position{line: 1281, col: 11, offset: 35546},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1281, col: 29, offset: 35564},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1282, col: 5, offset: 35601},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 1282, col: 5, offset: 35601},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1282, col: 5, offset: 35601},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1282, col: 9, offset: 35605},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1282, col: 11, offset: 35607},
										expr: &ruleRefExpr{
											pos:  position{line: 1282, col: 11, offset: 35607},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1282, col: 29, offset: 35625},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 1284, col: 1, offset: 35659},
			expr: &choiceExpr{
				pos: position{line: 1285, col: 5, offset: 35680},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1285, col: 5, offset: 35680},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1285, col: 5, offset: 35680},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1285, col: 5, offset: 35680},
									expr: &choiceExpr{
										pos: position{line: 1285, col: 7, offset: 35682},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1285, col: 7, offset: 35682},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1285, col: 13, offset: 35688},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1285, col: 26, offset: 35701,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1286, col: 5, offset: 35738},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1286, col: 5, offset: 35738},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1286, col: 5, offset: 35738},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1286, col: 10, offset: 35743},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1286, col: 12, offset: 35745},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 1288, col: 1, offset: 35779},
			expr: &actionExpr{
				pos: position{line: 1289, col: 5, offset: 35791},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 1289, col: 5, offset: 35791},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1289, col: 5, offset: 35791},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1289, col: 10, offset: 35796},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1289, col: 23, offset: 35809},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1289, col: 28, offset: 35814},
								expr: &ruleRefExpr{
									pos:  position{line: 1289, col: 28, offset: 35814},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 1291, col: 1, offset: 35876},
			expr: &choiceExpr{
				pos: position{line: 1292, col: 5, offset: 35893},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1292, col: 5, offset: 35893},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1293, col: 5, offset: 35910},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordChars",
			pos:  position{line: 1295, col: 1, offset: 35922},
			expr: &actionExpr{
				pos: position{line: 1295, col: 16, offset: 35937},
				run: (*parser).callonKeyWordChars1,
				expr: &charClassMatcher{
					pos:        position{line: 1295, col: 16, offset: 35937},
					val:        "[a-zA-Z_.:/%#@~]",
					chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
					ranges:     []rune{'a', 'z', 'A', 'Z'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 1297, col: 1, offset: 35986},
			expr: &choiceExpr{
				pos: position{line: 1298, col: 5, offset: 36002},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1298, col: 5, offset: 36002},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 1299, col: 5, offset: 36019},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 1301, col: 1, offset: 36026},
			expr: &actionExpr{
				pos: position{line: 1301, col: 14, offset: 36039},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 1301, col: 14, offset: 36039},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1301, col: 14, offset: 36039},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1301, col: 19, offset: 36044},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1301, col: 22, offset: 36047},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1301, col: 22, offset: 36047},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1301, col: 38, offset: 36063},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobPattern",
			pos:  position{line: 1303, col: 1, offset: 36099},
			expr: &actionExpr{
				pos: position{line: 1304, col: 5, offset: 36115},
				run: (*parser).callonGlobPattern1,
				expr: &seqExpr{
					pos: position{line: 1304, col: 5, offset: 36115},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1304, col: 5, offset: 36115},
							expr: &ruleRefExpr{
								pos:  position{line: 1304, col: 6, offset: 36116},
								name: "GlobProperStart",
							},
						},
						&andExpr{
							pos: position{line: 1304, col: 22, offset: 36132},
							expr: &ruleRefExpr{
								pos:  position{line: 1304, col: 23, offset: 36133},
								name: "GlobHasStar",
							},
						},
						&labeledExpr{
							pos:   position{line: 1304, col: 35, offset: 36145},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1304, col: 40, offset: 36150},
								name: "GlobStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1304, col: 50, offset: 36160},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1304, col: 55, offset: 36165},
								expr: &ruleRefExpr{
									pos:  position{line: 1304, col: 55, offset: 36165},
									name: "GlobRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobProperStart",
			pos:  position{line: 1308, col: 1, offset: 36234},
			expr: &seqExpr{
				pos: position{line: 1308, col: 19, offset: 36252},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1308, col: 19, offset: 36252},
						expr: &litMatcher{
							pos:        position{line: 1308, col: 19, offset: 36252},
							val:        "*",
							ignoreCase: false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1308, col: 24, offset: 36257},
						name: "KeyWordStart",
					},
				},
			},
		},
		{
			name: "GlobHasStar",
			pos:  position{line: 1309, col: 1, offset: 36270},
			expr: &seqExpr{
				pos: position{line: 1309, col: 15, offset: 36284},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1309, col: 15, offset: 36284},
						expr: &ruleRefExpr{
							pos:  position{line: 1309, col: 15, offset: 36284},
							name: "KeyWordRest",
						},
					},
					&litMatcher{
						pos:        position{line: 1309, col: 28, offset: 36297},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "GlobStart",
			pos:  position{line: 1311, col: 1, offset: 36302},
			expr: &choiceExpr{
				pos: position{line: 1312, col: 5, offset: 36316},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1312, col: 5, offset: 36316},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1313, col: 5, offset: 36333},
						name: "GlobEsc",
					},
					&actionExpr{
						pos: position{line: 1314, col: 5, offset: 36345},
						run: (*parser).callonGlobStart4,
						expr: &litMatcher{
							pos:        position{line: 1314, col: 5, offset: 36345},
							val:        "*",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GlobRest",
			pos:  position{line: 1316, col: 1, offset: 36369},
			expr: &choiceExpr{
				pos: position{line: 1317, col: 5, offset: 36382},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1317, col: 5, offset: 36382},
						name: "GlobStart",
					},
					&charClassMatcher{
						pos:        position{line: 1318, col: 5, offset: 36396},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "GlobEsc",
			pos:  position{line: 1320, col: 1, offset: 36403},
			expr: &actionExpr{
				pos: position{line: 1320, col: 11, offset: 36413},
				run: (*parser).callonGlobEsc1,
				expr: &seqExpr{
					pos: position{line: 1320, col: 11, offset: 36413},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1320, col: 11, offset: 36413},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1320, col: 16, offset: 36418},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1320, col: 19, offset: 36421},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1320, col: 19, offset: 36421},
										name: "GlobEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1320, col: 32, offset: 36434},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobEscape",
			pos:  position{line: 1322, col: 1, offset: 36470},
			expr: &choiceExpr{
				pos: position{line: 1323, col: 5, offset: 36485},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1323, col: 5, offset: 36485},
						run: (*parser).callonGlobEscape2,
						expr: &litMatcher{
							pos:        position{line: 1323, col: 5, offset: 36485},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1324, col: 5, offset: 36513},
						run: (*parser).callonGlobEscape4,
						expr: &litMatcher{
							pos:        position{line: 1324, col: 5, offset: 36513},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1325, col: 5, offset: 36543},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 1328, col: 1, offset: 36550},
			expr: &choiceExpr{
				pos: position{line: 1329, col: 5, offset: 36571},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1329, col: 5, offset: 36571},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1329, col: 5, offset: 36571},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1329, col: 5, offset: 36571},
									expr: &choiceExpr{
										pos: position{line: 1329, col: 7, offset: 36573},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1329, col: 7, offset: 36573},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1329, col: 13, offset: 36579},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1329, col: 26, offset: 36592,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1330, col: 5, offset: 36629},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1330, col: 5, offset: 36629},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1330, col: 5, offset: 36629},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1330, col: 10, offset: 36634},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1330, col: 12, offset: 36636},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 1332, col: 1, offset: 36670},
			expr: &choiceExpr{
				pos: position{line: 1333, col: 5, offset: 36689},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1333, col: 5, offset: 36689},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 1334, col: 5, offset: 36710},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 1336, col: 1, offset: 36725},
			expr: &choiceExpr{
				pos: position{line: 1337, col: 5, offset: 36746},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1337, col: 5, offset: 36746},
						val:        "'",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1338, col: 5, offset: 36754},
						run: (*parser).callonSingleCharEscape3,
						expr: &litMatcher{
							pos:        position{line: 1338, col: 5, offset: 36754},
							val:        "\"",
							ignoreCase: false,
						},
					},
					&litMatcher{
						pos:        position{line: 1339, col: 5, offset: 36794},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1340, col: 5, offset: 36803},
						run: (*parser).callonSingleCharEscape6,
						expr: &litMatcher{
							pos:        position{line: 1340, col: 5, offset: 36803},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1341, col: 5, offset: 36832},
						run: (*parser).callonSingleCharEscape8,
						expr: &litMatcher{
							pos:        position{line: 1341, col: 5, offset: 36832},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1342, col: 5, offset: 36861},
						run: (*parser).callonSingleCharEscape10,
						expr: &litMatcher{
							pos:        position{line: 1342, col: 5, offset: 36861},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1343, col: 5, offset: 36890},
						run: (*parser).callonSingleCharEscape12,
						expr: &litMatcher{
							pos:        position{line: 1343, col: 5, offset: 36890},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1344, col: 5, offset: 36919},
						run: (*parser).callonSingleCharEscape14,
						expr: &litMatcher{
							pos:        position{line: 1344, col: 5, offset: 36919},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1345, col: 5, offset: 36948},
						run: (*parser).callonSingleCharEscape16,
						expr: &litMatcher{
							pos:        position{line: 1345, col: 5, offset: 36948},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 1347, col: 1, offset: 36974},
			expr: &choiceExpr{
				pos: position{line: 1348, col: 5, offset: 36992},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1348, col: 5, offset: 36992},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 1348, col: 5, offset: 36992},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1349, col: 5, offset: 37020},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 1349, col: 5, offset: 37020},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1350, col: 5, offset: 37048},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 1352, col: 1, offset: 37054},
			expr: &choiceExpr{
				pos: position{line: 1353, col: 5, offset: 37072},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1353, col: 5, offset: 37072},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 1353, col: 5, offset: 37072},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1353, col: 5, offset: 37072},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1353, col: 9, offset: 37076},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1353, col: 16, offset: 37083},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1353, col: 16, offset: 37083},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1353, col: 25, offset: 37092},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1353, col: 34, offset: 37101},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1353, col: 43, offset: 37110},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1356, col: 5, offset: 37173},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 1356, col: 5, offset: 37173},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1356, col: 5, offset: 37173},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1356, col: 9, offset: 37177},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1356, col: 13, offset: 37181},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1356, col: 20, offset: 37188},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1356, col: 20, offset: 37188},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 1356, col: 29, offset: 37197},
												expr: &ruleRefExpr{
													pos:  position{line: 1356, col: 29, offset: 37197},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1356, col: 39, offset: 37207},
												expr: &ruleRefExpr{
													pos:  position{line: 1356, col: 39, offset: 37207},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1356, col: 49, offset: 37217},
												expr: &ruleRefExpr{
													pos:  position{line: 1356, col: 49, offset: 37217},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1356, col: 59, offset: 37227},
												expr: &ruleRefExpr{
													pos:  position{line: 1356, col: 59, offset: 37227},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1356, col: 69, offset: 37237},
												expr: &ruleRefExpr{
													pos:  position{line: 1356, col: 69, offset: 37237},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1356, col: 80, offset: 37248},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpPattern",
			pos:  position{line: 1360, col: 1, offset: 37302},
			expr: &actionExpr{
				pos: position{line: 1361, col: 5, offset: 37320},
				run: (*parser).callonRegexpPattern1,
				expr: &seqExpr{
					pos: position{line: 1361, col: 5, offset: 37320},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1361, col: 5, offset: 37320},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1361, col: 9, offset: 37324},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1361, col: 14, offset: 37329},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 1361, col: 25, offset: 37340},
							val:        "/",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1361, col: 29, offset: 37344},
							expr: &ruleRefExpr{
								pos:  position{line: 1361, col: 30, offset: 37345},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 1363, col: 1, offset: 37380},
			expr: &actionExpr{
				pos: position{line: 1364, col: 5, offset: 37395},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1364, col: 5, offset: 37395},
					expr: &choiceExpr{
						pos: position{line: 1364, col: 6, offset: 37396},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 1364, col: 6, offset: 37396},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&seqExpr{
								pos: position{line: 1364, col: 15, offset: 37405},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1364, col: 15, offset: 37405},
										val:        "\\",
										ignoreCase: false,
									},
									&anyMatcher{
										line: 1364, col: 20, offset: 37410,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 1366, col: 1, offset: 37446},
			expr: &charClassMatcher{
				pos:        position{line: 1367, col: 5, offset: 37462},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 1369, col: 1, offset: 37477},
			expr: &oneOrMoreExpr{
				pos: position{line: 1369, col: 6, offset: 37482},
				expr: &ruleRefExpr{
					pos:  position{line: 1369, col: 6, offset: 37482},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1371, col: 1, offset: 37493},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1371, col: 6, offset: 37498},
				expr: &ruleRefExpr{
					pos:  position{line: 1371, col: 6, offset: 37498},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 1373, col: 1, offset: 37509},
			expr: &choiceExpr{
				pos: position{line: 1374, col: 5, offset: 37522},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1374, col: 5, offset: 37522},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 1375, col: 5, offset: 37537},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 1376, col: 5, offset: 37556},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 1378, col: 1, offset: 37565},
			expr: &anyMatcher{
				line: 1379, col: 5, offset: 37585,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 1381, col: 1, offset: 37588},
			expr: &choiceExpr{
				pos: position{line: 1382, col: 5, offset: 37616},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1382, col: 5, offset: 37616},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1383, col: 5, offset: 37625},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1384, col: 5, offset: 37634},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1385, col: 5, offset: 37643},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1386, col: 5, offset: 37651},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1387, col: 5, offset: 37664},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 1389, col: 1, offset: 37674},
			expr: &charClassMatcher{
				pos:        position{line: 1390, col: 5, offset: 37693},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 1396, col: 1, offset: 38023},
			expr: &ruleRefExpr{
				pos:  position{line: 1399, col: 5, offset: 38094},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1401, col: 1, offset: 38113},
			expr: &seqExpr{
				pos: position{line: 1402, col: 5, offset: 38134},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1402, col: 5, offset: 38134},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1402, col: 10, offset: 38139},
						expr: &seqExpr{
							pos: position{line: 1402, col: 11, offset: 38140},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1402, col: 11, offset: 38140},
									expr: &litMatcher{
										pos:        position{line: 1402, col: 12, offset: 38141},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1402, col: 17, offset: 38146},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1402, col: 35, offset: 38164},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1404, col: 1, offset: 38170},
			expr: &seqExpr{
				pos: position{line: 1405, col: 5, offset: 38192},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1405, col: 5, offset: 38192},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1405, col: 10, offset: 38197},
						expr: &seqExpr{
							pos: position{line: 1405, col: 11, offset: 38198},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1405, col: 11, offset: 38198},
									expr: &ruleRefExpr{
										pos:  position{line: 1405, col: 12, offset: 38199},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1405, col: 27, offset: 38214},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1407, col: 1, offset: 38233},
			expr: &seqExpr{
				pos: position{line: 1407, col: 7, offset: 38239},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1407, col: 7, offset: 38239},
						expr: &ruleRefExpr{
							pos:  position{line: 1407, col: 7, offset: 38239},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1407, col: 19, offset: 38251},
						name: "LineTerminator",
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 1409, col: 1, offset: 38267},
			expr: &choiceExpr{
				pos: position{line: 1409, col: 7, offset: 38273},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1409, col: 7, offset: 38273},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 1409, col: 11, offset: 38277},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1411, col: 1, offset: 38282},
			expr: &notExpr{
				pos: position{line: 1411, col: 7, offset: 38288},
				expr: &anyMatcher{
					line: 1411, col: 8, offset: 38289,
				},
			},
		},
		{
			name: "EOKW",
			pos:  position{line: 1413, col: 1, offset: 38292},
			expr: &notExpr{
				pos: position{line: 1413, col: 8, offset: 38299},
				expr: &ruleRefExpr{
					pos:  position{line: 1413, col: 9, offset: 38300},
					name: "KeyWordChars",
				},
			},
		},
	},
}

func (c *current) onstart1(ast interface{}) (interface{}, error) {
	return ast, nil
}

func (p *parser) callonstart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart1(stack["ast"])
}

func (c *current) onSequential1(consts, first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "ops": append([]interface{}{first}, (rest.([]interface{}))...), "consts": consts}, nil

}

func (p *parser) callonSequential1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential1(stack["consts"], stack["first"], stack["rest"])
}

func (c *current) onSequentialTail1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonSequentialTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequentialTail1(stack["p"])
}

func (c *current) onConsts4() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonConsts4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConsts4()
}

func (c *current) onConst1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonConst1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConst1(stack["v"])
}

func (c *current) onConstDef2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"name": id, "expr": expr}, nil

}

func (p *parser) callonConstDef2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDef2(stack["id"], stack["expr"])
}

func (c *current) onConstDef13(id, typ interface{}) (interface{}, error) {
	return map[string]interface{}{

		"name": id,

		"expr": map[string]interface{}{"kind": "TypeValue", "value": map[string]interface{}{"kind": "TypeDef", "name": id, "type": typ}}}, nil

}

func (p *parser) callonConstDef13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDef13(stack["id"], stack["typ"])
}

func (c *current) onOperation2(ops interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Parallel", "ops": ops}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["ops"])
}

func (c *current) onOperation12(expr, cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": expr, "cases": cases}, nil

}

func (p *parser) callonOperation12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation12(stack["expr"], stack["cases"])
}

func (c *current) onOperation25(cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": nil, "cases": cases}, nil

}

func (p *parser) callonOperation25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation25(stack["cases"])
}

func (c *current) onOperation35(trunks interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": trunks}, nil

}

func (p *parser) callonOperation35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation35(stack["trunks"])
}

func (c *current) onOperation47(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation47(stack["a"])
}

func (c *current) onOperation53(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation53(stack["a"])
}

func (c *current) onOperation63(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Search", "expr": expr}, nil

}

func (p *parser) callonOperation63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation63(stack["expr"])
}

func (c *current) onOperation69(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation69(stack["expr"])
}

func (c *current) onOperation72(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation72(stack["expr"])
}

func (c *current) onOperation75(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation75(stack["expr"])
}

func (c *current) onLeg1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLeg1(stack["s"])
}

func (c *current) onSwitchLeg1(expr, op interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": expr, "op": op}, nil

}

func (p *parser) callonSwitchLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchLeg1(stack["expr"], stack["op"])
}

func (c *current) onCase2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonCase2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase2(stack["expr"])
}

func (c *current) onCase8() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonCase8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase8()
}

func (c *current) onFromLeg2(source, seq interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Trunk", "source": source, "seq": seq}, nil

}

func (p *parser) callonFromLeg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromLeg2(stack["source"], stack["seq"])
}

func (c *current) onFromLeg10(source interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Trunk", "source": source, "seq": nil}, nil

}

func (p *parser) callonFromLeg10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromLeg10(stack["source"])
}

func (c *current) onFromHead1(src interface{}) (interface{}, error) {
	return src, nil
}

func (p *parser) callonFromHead1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromHead1(stack["src"])
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor13(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor13(stack["expr"])
}

func (c *current) onSearchExpr4(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Term", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonSearchExpr4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr4(stack["v"])
}

func (c *current) onSearchExpr15() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil

}

func (p *parser) callonSearchExpr15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr15()
}

func (c *current) onSearchPredicate2(lhs, op, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": op, "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonSearchPredicate2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPredicate2(stack["lhs"], stack["op"], stack["rhs"])
}

func (c *current) onSearchPredicate12(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchPredicate12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPredicate12(stack["first"], stack["rest"])
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onGlob1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Glob", "pattern": pattern}, nil

}

func (p *parser) callonGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlob1(stack["pattern"])
}

func (c *current) onRegexp1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Regexp", "pattern": pattern}, nil

}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["pattern"])
}

func (c *current) onAggregation2(keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Summarize", "keys": keys, "aggs": nil, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["keys"], stack["limit"])
}

func (c *current) onAggregation10(aggs, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"kind": "Summarize", "keys": nil, "aggs": aggs, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation10(stack["aggs"], stack["keys"], stack["limit"])
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAggAssignment2(lval, agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lval, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment2(stack["lval"], stack["agg"])
}

func (c *current) onAggAssignment11(agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment11(stack["agg"])
}

func (c *current) onAgg1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"kind": "Agg", "name": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonAgg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAgg1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onAggAssignments1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonAggAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssertOp6(e interface{}) (interface{}, error) {
	return []interface{}{e, string(c.text)}, nil
}

func (p *parser) callonAssertOp6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssertOp6(stack["e"])
}

func (c *current) onAssertOp1(expr interface{}) (interface{}, error) {
	// 'assert EXPR' is equivalent to
	// 'yield EXPR ? this : error({message: "assertion failed", "expr": EXPR_text, "on": this}'
	// where EXPR_text is the literal text of EXPR.
	return map[string]interface{}{"kind": "Yield", "exprs": []interface{}{map[string]interface{}{

		"kind": "Conditional",

		"cond": expr.([]interface{})[0],

		"then": map[string]interface{}{"kind": "ID", "name": "this"},

		"else": map[string]interface{}{

			"kind": "Call",

			"name": "error",

			"args": []interface{}{map[string]interface{}{"kind": "RecordExpr", "elems": []interface{}{

				map[string]interface{}{"kind": "Field", "name": "message", "value": map[string]interface{}{

					"kind": "Primitive", "text": "assertion failed", "type": "string"}},

				map[string]interface{}{"kind": "Field", "name": "expr", "value": map[string]interface{}{

					"kind": "Primitive", "text": expr.([]interface{})[1], "type": "string"}},

				map[string]interface{}{"kind": "Field", "name": "on", "value": map[string]interface{}{

					"kind": "ID", "name": "this"}}}}},

			"where": nil}}}}, nil

}

func (p *parser) callonAssertOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssertOp1(stack["expr"])
}

func (c *current) onSortOp10(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortOp10(stack["l"])
}

func (c *current) onSortOp1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var op = map[string]interface{}{"kind": "Sort", "args": list, "order": "asc", "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		op["order"] = "desc"
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			op["nullsfirst"] = true
		}
	}
	return op, nil

}

func (p *parser) callonSortOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortOp1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopOp8(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopOp8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp8(stack["n"])
}

func (c *current) onTopOp20(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopOp20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp20(stack["f"])
}

func (c *current) onTopOp1(limit, flush, fields interface{}) (interface{}, error) {
	var op = map[string]interface{}{"kind": "Top", "limit": 0, "args": nil, "flush": false}
	if limit != nil {
		op["limit"] = limit
	}
	if fields != nil {
		op["args"] = fields
	}
	if flush != nil {
		op["flush"] = true
	}
	return op, nil

}

func (p *parser) callonTopOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cut", "args": args}, nil

}

func (p *parser) callonCutOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutOp1(stack["args"])
}

func (c *current) onDropOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Drop", "args": args}, nil

}

func (p *parser) callonDropOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropOp1(stack["args"])
}

func (c *current) onHeadOp2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": count}, nil
}

func (p *parser) callonHeadOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOp2(stack["count"])
}

func (c *current) onHeadOp8() (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": 1}, nil
}

func (p *parser) callonHeadOp8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOp8()
}

func (c *current) onTailOp2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": count}, nil
}

func (p *parser) callonTailOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailOp2(stack["count"])
}

func (c *current) onTailOp8() (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": 1}, nil
}

func (p *parser) callonTailOp8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailOp8()
}

func (c *current) onWhereOp1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Where", "expr": expr}, nil

}

func (p *parser) callonWhereOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereOp1(stack["expr"])
}

func (c *current) onUniqOp2() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": true}, nil

}

func (p *parser) callonUniqOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqOp2()
}

func (c *current) onUniqOp7() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": false}, nil

}

func (p *parser) callonUniqOp7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqOp7()
}

func (c *current) onPutOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Put", "args": args}, nil

}

func (p *parser) callonPutOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutOp1(stack["args"])
}

func (c *current) onRenameOp9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameOp9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameOp9(stack["cl"])
}

func (c *current) onRenameOp1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Rename", "args": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameOp1(stack["first"], stack["rest"])
}

func (c *current) onFuseOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Fuse"}, nil

}

func (p *parser) callonFuseOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseOp1()
}

func (c *current) onShapeOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Shape"}, nil

}

func (p *parser) callonShapeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShapeOp1()
}

func (c *current) onJoinOp2(style, leftKey, rightKey, columns interface{}) (interface{}, error) {
	var op = map[string]interface{}{"kind": "Join", "style": style, "left_key": leftKey, "right_key": rightKey, "args": nil}
	if columns != nil {
		op["args"] = columns.([]interface{})[1]
	}
	return op, nil

}

func (p *parser) callonJoinOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinOp2(stack["style"], stack["leftKey"], stack["rightKey"], stack["columns"])
}

func (c *current) onJoinOp22(style, key, columns interface{}) (interface{}, error) {
	var op = map[string]interface{}{"kind": "Join", "style": style, "left_key": key, "right_key": key, "args": nil}
	if columns != nil {
		op["args"] = columns.([]interface{})[1]
	}
	return op, nil

}

func (p *parser) callonJoinOp22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinOp22(stack["style"], stack["key"], stack["columns"])
}

func (c *current) onJoinStyle2() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle2()
}

func (c *current) onJoinStyle6() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle6()
}

func (c *current) onJoinStyle10() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle10()
}

func (c *current) onJoinStyle14() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonJoinStyle14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle14()
}

func (c *current) onJoinStyle18() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle18()
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onSampleOp1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "consts": []interface{}{}, "ops": []interface{}{

		map[string]interface{}{"kind": "Summarize",

			"keys": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "shape"},

				"rhs": map[string]interface{}{"kind": "Call", "name": "typeof",

					"args": []interface{}{e},

					"where": nil}}},

			"aggs": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "sample"},

				"rhs": map[string]interface{}{"kind": "Agg",

					"name": "any",

					"expr": e,

					"where": nil}}},

			"limit": 0},

		map[string]interface{}{"kind": "Yield",

			"exprs": []interface{}{

				map[string]interface{}{"kind": "ID", "name": "sample"}}}}}, nil

}

func (p *parser) callonSampleOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleOp1(stack["e"])
}

func (c *current) onOpAssignment1(a interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpAssignment", "assignments": a}, nil

}

func (p *parser) callonOpAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpAssignment1(stack["a"])
}

func (c *current) onSampleExpr2(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonSampleExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr2(stack["lval"])
}

func (c *current) onSampleExpr7() (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": "this"}, nil
}

func (p *parser) callonSampleExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr7()
}

func (c *current) onFromOp1(source interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": []interface{}{map[string]interface{}{"kind": "Trunk", "source": source}}}, nil

}

func (p *parser) callonFromOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromOp1(stack["source"])
}

func (c *current) onFile1(path, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "File", "path": path, "format": format, "layout": layout}, nil

}

func (p *parser) callonFile1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile1(stack["path"], stack["format"], stack["layout"])
}

func (c *current) onFrom1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonFrom1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrom1(stack["body"])
}

func (c *current) onPool1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonPool1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPool1(stack["body"])
}

func (c *current) onPoolBody1(spec, at, over, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pool", "spec": spec, "at": at, "range": over, "scan_order": order}, nil

}

func (p *parser) callonPoolBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBody1(stack["spec"], stack["at"], stack["over"], stack["order"])
}

func (c *current) onGet1(url, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "HTTP", "url": url, "format": format, "layout": layout}, nil

}

func (p *parser) callonGet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGet1(stack["url"], stack["format"], stack["layout"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onPath2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonPath2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath2(stack["v"])
}

func (c *current) onPath5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPath5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath5()
}

func (c *current) onPoolAt1(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonPoolAt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolAt1(stack["id"])
}

func (c *current) onKSUID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKSUID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKSUID1()
}

func (c *current) onPoolRange1(lower, upper interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Range", "lower": lower, "upper": upper}, nil

}

func (p *parser) callonPoolRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolRange1(stack["lower"], stack["upper"])
}

func (c *current) onPoolSpec2(pool, commit, meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": pool, "commit": commit, "meta": meta}, nil

}

func (p *parser) callonPoolSpec2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec2(stack["pool"], stack["commit"], stack["meta"])
}

func (c *current) onPoolSpec12(meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": nil, "commit": nil, "meta": meta}, nil

}

func (p *parser) callonPoolSpec12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec12(stack["meta"])
}

func (c *current) onPoolCommit1(commit interface{}) (interface{}, error) {
	return commit, nil
}

func (p *parser) callonPoolCommit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolCommit1(stack["commit"])
}

func (c *current) onPoolMeta1(meta interface{}) (interface{}, error) {
	return meta, nil
}

func (p *parser) callonPoolMeta1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolMeta1(stack["meta"])
}

func (c *current) onPoolIdentifier1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPoolIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolIdentifier1()
}

func (c *current) onLayoutArg1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Layout", "keys": keys, "order": order}, nil

}

func (p *parser) callonLayoutArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLayoutArg1(stack["keys"], stack["order"])
}

func (c *current) onFormatArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonFormatArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArg1(stack["val"])
}

func (c *current) onOrderSuffix2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix2()
}

func (c *current) onOrderSuffix4() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderSuffix4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix4()
}

func (c *current) onOrderSuffix6() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix6()
}

func (c *current) onOrderArg2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg2()
}

func (c *current) onOrderArg8() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderArg8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg8()
}

func (c *current) onPassOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Pass"}, nil

}

func (p *parser) callonPassOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassOp1()
}

func (c *current) onExplodeOp1(args, typ, as interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Explode", "args": args, "as": as, "type": typ}, nil

}

func (p *parser) callonExplodeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplodeOp1(stack["args"], stack["typ"], stack["as"])
}

func (c *current) onMergeOp1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Merge", "expr": expr}, nil

}

func (p *parser) callonMergeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMergeOp1(stack["expr"])
}

func (c *current) onOverOp1(exprs, locals, scope interface{}) (interface{}, error) {
	var over = map[string]interface{}{"kind": "Over", "exprs": exprs, "scope": scope}
	if locals != nil {
		return map[string]interface{}{"kind": "Let", "locals": locals, "over": over}, nil
	}
	return over, nil

}

func (p *parser) callonOverOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverOp1(stack["exprs"], stack["locals"], stack["scope"])
}

func (c *current) onScope1(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonScope1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope1(stack["seq"])
}

func (c *current) onLocals10(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonLocals10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocals10(stack["a"])
}

func (c *current) onLocals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLocals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocals1(stack["first"], stack["rest"])
}

func (c *current) onLocalsAssignment2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"name": id, "expr": expr}, nil

}

func (p *parser) callonLocalsAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocalsAssignment2(stack["id"], stack["expr"])
}

func (c *current) onLocalsAssignment11(id interface{}) (interface{}, error) {
	return map[string]interface{}{"name": id, "expr": map[string]interface{}{"kind": "ID", "name": id}}, nil

}

func (p *parser) callonLocalsAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocalsAssignment11(stack["id"])
}

func (c *current) onYieldOp1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Yield", "exprs": exprs}, nil

}

func (p *parser) callonYieldOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYieldOp1(stack["exprs"])
}

func (c *current) onTypeArg1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeArg1(stack["typ"])
}

func (c *current) onAsArg1(lhs interface{}) (interface{}, error) {
	return lhs, nil
}

func (p *parser) callonAsArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsArg1(stack["lhs"])
}

func (c *current) onLvals7(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonLvals7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals7(stack["lval"])
}

func (c *current) onLvals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLvals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals1(stack["first"], stack["rest"])
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignments7(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments7(stack["a"])
}

func (c *current) onAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr2(condition, thenClause, elseClause interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Conditional", "cond": condition, "then": thenClause, "else": elseClause}, nil

}

func (p *parser) callonConditionalExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr2(stack["condition"], stack["thenClause"], stack["elseClause"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onComparisonExpr15() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparisonExpr15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr15()
}

func (c *current) onComparisonExpr1(lhs, opAndRHS interface{}) (interface{}, error) {
	if opAndRHS == nil {
		return lhs, nil
	}
	var op = opAndRHS.([]interface{})[1]
	var rhs = opAndRHS.([]interface{})[3]
	return map[string]interface{}{"kind": "BinaryExpr", "op": op, "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonComparisonExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr1(stack["lhs"], stack["opAndRHS"])
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onNegationExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "-", "operand": e}, nil

}

func (p *parser) callonNegationExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNegationExpr2(stack["e"])
}

func (c *current) onFuncExpr2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr2(stack["first"], stack["rest"])
}

func (c *current) onFuncExpr9(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr9(stack["first"], stack["rest"])
}

func (c *current) onCast1(typ, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": expr, "type": typ}, nil

}

func (p *parser) callonCast1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCast1(stack["typ"], stack["expr"])
}

func (c *current) onFunction3(fn, args, where interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": fn, "args": args, "where": where}, nil

}

func (p *parser) callonFunction3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction3(stack["fn"], stack["args"], stack["where"])
}

func (c *current) onGrep2(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Grep", "pattern": pattern, "expr": map[string]interface{}{"kind": "ID", "name": "this"}}, nil

}

func (p *parser) callonGrep2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrep2(stack["pattern"])
}

func (c *current) onGrep12(pattern, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Grep", "pattern": pattern, "expr": expr}, nil

}

func (p *parser) callonGrep12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrep12(stack["pattern"], stack["expr"])
}

func (c *current) onPattern4(s interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "String", "text": s}, nil

}

func (p *parser) callonPattern4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPattern4(stack["s"])
}

func (c *current) onOptionalExprs3() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonOptionalExprs3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalExprs3()
}

func (c *current) onExprs7(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonExprs7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs7(stack["e"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr1(stack["first"], stack["rest"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref14(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": nil, "rhs": to}}, nil

}

func (p *parser) callonDeref14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref14(stack["to"])
}

func (c *current) onDeref23(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref23(stack["expr"])
}

func (c *current) onDeref29(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref29(stack["id"])
}

func (c *current) onPrimary7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary7(stack["expr"])
}

func (c *current) onPrimary15(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary15(stack["expr"])
}

func (c *current) onOverExpr1(exprs, locals, scope interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OverExpr", "locals": locals, "exprs": exprs, "scope": scope}, nil

}

func (p *parser) callonOverExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverExpr1(stack["exprs"], stack["locals"], stack["scope"])
}

func (c *current) onRecord1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RecordExpr", "elems": elems}, nil

}

func (p *parser) callonRecord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecord1(stack["elems"])
}

func (c *current) onRecordElems2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonRecordElems2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems2(stack["first"], stack["rest"])
}

func (c *current) onRecordElems9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonRecordElems9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems9()
}

func (c *current) onRecordElemTail1(elem interface{}) (interface{}, error) {
	return elem, nil
}

func (p *parser) callonRecordElemTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElemTail1(stack["elem"])
}

func (c *current) onSpread1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Spread", "expr": expr}, nil

}

func (p *parser) callonSpread1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpread1(stack["expr"])
}

func (c *current) onField1(name, value interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Field", "name": name, "value": value}, nil

}

func (p *parser) callonField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField1(stack["name"], stack["value"])
}

func (c *current) onArray1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ArrayExpr", "exprs": exprs}, nil

}

func (p *parser) callonArray1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArray1(stack["exprs"])
}

func (c *current) onSet1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SetExpr", "exprs": exprs}, nil

}

func (p *parser) callonSet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSet1(stack["exprs"])
}

func (c *current) onMap1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "MapExpr", "entries": exprs}, nil

}

func (p *parser) callonMap1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMap1(stack["exprs"])
}

func (c *current) onEntries2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonEntries2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries2(stack["first"], stack["rest"])
}

func (c *current) onEntries9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonEntries9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries9()
}

func (c *current) onEntryTail1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonEntryTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntryTail1(stack["e"])
}

func (c *current) onEntry1(key, value interface{}) (interface{}, error) {
	return map[string]interface{}{"key": key, "value": value}, nil

}

func (p *parser) callonEntry1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntry1(stack["key"], stack["value"])
}

func (c *current) onSQLOp1(selection, from, joins, where, groupby, having, orderby, limit interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "SQLExpr",

		"select": selection,

		"from": from,

		"joins": joins,

		"where": where,

		"group_by": groupby,

		"having": having,

		"order_by": orderby,

		"limit": limit}, nil

}

func (p *parser) callonSQLOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOp1(stack["selection"], stack["from"], stack["joins"], stack["where"], stack["groupby"], stack["having"], stack["orderby"], stack["limit"])
}

func (c *current) onSQLSelect2() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLSelect2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect2()
}

func (c *current) onSQLSelect7(assignments interface{}) (interface{}, error) {
	return assignments, nil
}

func (p *parser) callonSQLSelect7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect7(stack["assignments"])
}

func (c *current) onSQLAssignment2(rhs, lhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonSQLAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment2(stack["rhs"], stack["lhs"])
}

func (c *current) onSQLAssignment11(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonSQLAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment11(stack["expr"])
}

func (c *current) onSQLAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments7(stack["expr"])
}

func (c *current) onSQLAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSQLFrom2(table, alias interface{}) (interface{}, error) {
	return map[string]interface{}{"table": table, "alias": alias}, nil

}

func (p *parser) callonSQLFrom2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom2(stack["table"], stack["alias"])
}

func (c *current) onSQLFrom12() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLFrom12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom12()
}

func (c *current) onSQLAlias2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias2(stack["id"])
}

func (c *current) onSQLAlias9(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias9(stack["id"])
}

func (c *current) onSQLJoins7(join interface{}) (interface{}, error) {
	return join, nil
}

func (p *parser) callonSQLJoins7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins7(stack["join"])
}

func (c *current) onSQLJoins1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLJoins1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins1(stack["first"], stack["rest"])
}

func (c *current) onSQLJoin1(style, table, alias, leftKey, rightKey interface{}) (interface{}, error) {
	return map[string]interface{}{

		"table": table,

		"style": style,

		"left_key": leftKey,

		"right_key": rightKey,

		"alias": alias}, nil

}

func (p *parser) callonSQLJoin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoin1(stack["style"], stack["table"], stack["alias"], stack["leftKey"], stack["rightKey"])
}

func (c *current) onSQLJoinStyle2(style interface{}) (interface{}, error) {
	return style, nil
}

func (p *parser) callonSQLJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle2(stack["style"])
}

func (c *current) onSQLJoinStyle11() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonSQLJoinStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle11()
}

func (c *current) onSQLWhere1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLWhere1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLWhere1(stack["expr"])
}

func (c *current) onSQLGroupBy1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonSQLGroupBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLGroupBy1(stack["columns"])
}

func (c *current) onSQLHaving1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLHaving1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLHaving1(stack["expr"])
}

func (c *current) onSQLOrderBy1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SQLOrderBy", "keys": keys, "order": order}, nil

}

func (p *parser) callonSQLOrderBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrderBy1(stack["keys"], stack["order"])
}

func (c *current) onSQLOrder2(dir interface{}) (interface{}, error) {
	return dir, nil
}

func (p *parser) callonSQLOrder2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder2(stack["dir"])
}

func (c *current) onSQLOrder9() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonSQLOrder9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder9()
}

func (c *current) onSQLLimit2(count interface{}) (interface{}, error) {
	return count, nil
}

func (p *parser) callonSQLLimit2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit2(stack["count"])
}

func (c *current) onSQLLimit9() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonSQLLimit9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit9()
}

func (c *current) onSELECT1() (interface{}, error) {
	return "select", nil
}

func (p *parser) callonSELECT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSELECT1()
}

func (c *current) onAS1() (interface{}, error) {
	return "as", nil
}

func (p *parser) callonAS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAS1()
}

func (c *current) onFROM1() (interface{}, error) {
	return "from", nil
}

func (p *parser) callonFROM1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFROM1()
}

func (c *current) onJOIN1() (interface{}, error) {
	return "join", nil
}

func (p *parser) callonJOIN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJOIN1()
}

func (c *current) onWHERE1() (interface{}, error) {
	return "where", nil
}

func (p *parser) callonWHERE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWHERE1()
}

func (c *current) onGROUP1() (interface{}, error) {
	return "group", nil
}

func (p *parser) callonGROUP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGROUP1()
}

func (c *current) onBY1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonBY1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBY1()
}

func (c *current) onHAVING1() (interface{}, error) {
	return "having", nil
}

func (p *parser) callonHAVING1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHAVING1()
}

func (c *current) onORDER1() (interface{}, error) {
	return "order", nil
}

func (p *parser) callonORDER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onORDER1()
}

func (c *current) onON1() (interface{}, error) {
	return "on", nil
}

func (p *parser) callonON1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onON1()
}

func (c *current) onLIMIT1() (interface{}, error) {
	return "limit", nil
}

func (p *parser) callonLIMIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIMIT1()
}

func (c *current) onASC1() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonASC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onASC1()
}

func (c *current) onDESC1() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonDESC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDESC1()
}

func (c *current) onANTI1() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonANTI1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onANTI1()
}

func (c *current) onLEFT1() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonLEFT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLEFT1()
}

func (c *current) onRIGHT1() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonRIGHT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRIGHT1()
}

func (c *current) onINNER1() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonINNER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINNER1()
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "float64", "text": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "int64", "text": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "null", "text": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onBytesLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bytes", "text": string(c.text)}, nil

}

func (p *parser) callonBytesLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBytesLiteral1()
}

func (c *current) onTypeLiteral1(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonTypeLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeLiteral1(stack["typ"])
}

func (c *current) onCastType3(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonCastType3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCastType3(stack["typ"])
}

func (c *current) onAmbiguousType2(name interface{}) (interface{}, error) {
	return name, nil
}

func (p *parser) callonAmbiguousType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType2(stack["name"])
}

func (c *current) onAmbiguousType8(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeDef", "name": name, "type": typ}, nil

}

func (p *parser) callonAmbiguousType8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType8(stack["name"], stack["typ"])
}

func (c *current) onAmbiguousType17(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType17(stack["name"])
}

func (c *current) onAmbiguousType20(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonAmbiguousType20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType20(stack["u"])
}

func (c *current) onTypeUnion1(types interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeUnion", "types": types}, nil

}

func (p *parser) callonTypeUnion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeUnion1(stack["types"])
}

func (c *current) onTypeList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeList1(stack["first"], stack["rest"])
}

func (c *current) onTypeListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeListTail1(stack["typ"])
}

func (c *current) onComplexType2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType2(stack["fields"])
}

func (c *current) onComplexType10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexType10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType10(stack["typ"])
}

func (c *current) onComplexType18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexType18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType18(stack["typ"])
}

func (c *current) onComplexType26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexType26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType26(stack["keyType"], stack["valType"])
}

func (c *current) onTemplateLiteral1(v interface{}) (interface{}, error) {
	if len(v.([]interface{})) == 0 {
		return map[string]interface{}{"kind": "Primitive", "type": "string", "text": ""}, nil
	}
	return makeTemplateExprChain(v), nil

}

func (p *parser) callonTemplateLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteral1(stack["v"])
}

func (c *current) onTemplateLiteralParts2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts2(stack["v"])
}

func (c *current) onTemplateLiteralParts9(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts9(stack["v"])
}

func (c *current) onTemplateDoubleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateDoubleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedPart3(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar2(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar7(stack["v"])
}

func (c *current) onTemplateSingleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateSingleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedPart3(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar2(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar7(stack["v"])
}

func (c *current) onTemplateExpr1(e interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "Cast",

		"expr": e,

		"type": map[string]interface{}{

			"kind": "TypeValue",

			"value": map[string]interface{}{"kind": "TypePrimitive", "name": "string"}}}, nil

}

func (p *parser) callonTemplateExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateExpr1(stack["e"])
}

func (c *current) onPrimitiveType1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveType1()
}

func (c *current) onTypeFieldList2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList2(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldList9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonTypeFieldList9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList9()
}

func (c *current) onTypeFieldListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTail1(stack["typ"])
}

func (c *current) onTypeField1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeField1(stack["name"], stack["typ"])
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return "in", nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onIdentifierName19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName19()
}

func (c *current) onIdentifierName21(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName21(stack["id"])
}

func (c *current) onTime1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "time", "text": string(c.text)}, nil

}

func (p *parser) callonTime1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTime1()
}

func (c *current) onDuration1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "duration", "text": string(c.text)}, nil

}

func (p *parser) callonDuration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDuration1()
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onFloatString22() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFloatString22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString22()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordChars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordChars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordChars1()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onGlobPattern1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil

}

func (p *parser) callonGlobPattern1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobPattern1(stack["head"], stack["tail"])
}

func (c *current) onGlobStart4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonGlobStart4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobStart4()
}

func (c *current) onGlobEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonGlobEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEsc1(stack["s"])
}

func (c *current) onGlobEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonGlobEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape2()
}

func (c *current) onGlobEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonGlobEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape4()
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onSingleCharEscape3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleCharEscape3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape3()
}

func (c *current) onSingleCharEscape6() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape6()
}

func (c *current) onSingleCharEscape8() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape8()
}

func (c *current) onSingleCharEscape10() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape10()
}

func (c *current) onSingleCharEscape12() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape12()
}

func (c *current) onSingleCharEscape14() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape14()
}

func (c *current) onSingleCharEscape16() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape16()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexpPattern1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexpPattern1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpPattern1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
