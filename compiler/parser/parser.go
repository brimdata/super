// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/brimdata/zed/reglob"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 7, col: 1, offset: 26},
			expr: &actionExpr{
				pos: position{line: 7, col: 9, offset: 34},
				run: (*parser).callonstart1,
				expr: &seqExpr{
					pos: position{line: 7, col: 9, offset: 34},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 7, col: 9, offset: 34},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 7, col: 12, offset: 37},
							label: "ast",
							expr: &ruleRefExpr{
								pos:  position{line: 7, col: 16, offset: 41},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 27, offset: 52},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 30, offset: 55},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Sequential",
			pos:  position{line: 9, col: 1, offset: 80},
			expr: &choiceExpr{
				pos: position{line: 10, col: 5, offset: 95},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 10, col: 5, offset: 95},
						run: (*parser).callonSequential2,
						expr: &seqExpr{
							pos: position{line: 10, col: 5, offset: 95},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 10, col: 5, offset: 95},
									label: "consts",
									expr: &ruleRefExpr{
										pos:  position{line: 10, col: 12, offset: 102},
										name: "Consts",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 10, col: 19, offset: 109},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 10, col: 22, offset: 112},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 10, col: 28, offset: 118},
										name: "Operation",
									},
								},
								&labeledExpr{
									pos:   position{line: 10, col: 38, offset: 128},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 10, col: 43, offset: 133},
										expr: &ruleRefExpr{
											pos:  position{line: 10, col: 43, offset: 133},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 13, col: 5, offset: 308},
						run: (*parser).callonSequential12,
						expr: &seqExpr{
							pos: position{line: 13, col: 5, offset: 308},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 13, col: 5, offset: 308},
									label: "consts",
									expr: &ruleRefExpr{
										pos:  position{line: 13, col: 12, offset: 315},
										name: "Consts",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 13, col: 19, offset: 322},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 13, col: 22, offset: 325},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 13, col: 25, offset: 328},
										name: "Operation",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SequentialTail",
			pos:  position{line: 17, col: 1, offset: 455},
			expr: &actionExpr{
				pos: position{line: 17, col: 18, offset: 472},
				run: (*parser).callonSequentialTail1,
				expr: &seqExpr{
					pos: position{line: 17, col: 18, offset: 472},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 17, col: 18, offset: 472},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 21, offset: 475},
							name: "Pipe",
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 26, offset: 480},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 17, col: 29, offset: 483},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 31, offset: 485},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Consts",
			pos:  position{line: 19, col: 1, offset: 514},
			expr: &choiceExpr{
				pos: position{line: 20, col: 5, offset: 525},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 20, col: 5, offset: 525},
						expr: &ruleRefExpr{
							pos:  position{line: 20, col: 5, offset: 525},
							name: "Const",
						},
					},
					&actionExpr{
						pos: position{line: 21, col: 5, offset: 536},
						run: (*parser).callonConsts4,
						expr: &ruleRefExpr{
							pos:  position{line: 21, col: 5, offset: 536},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Const",
			pos:  position{line: 23, col: 1, offset: 572},
			expr: &actionExpr{
				pos: position{line: 23, col: 9, offset: 580},
				run: (*parser).callonConst1,
				expr: &seqExpr{
					pos: position{line: 23, col: 9, offset: 580},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 23, col: 9, offset: 580},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 23, col: 12, offset: 583},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 23, col: 14, offset: 585},
								name: "ConstDef",
							},
						},
					},
				},
			},
		},
		{
			name: "ConstDef",
			pos:  position{line: 25, col: 1, offset: 613},
			expr: &choiceExpr{
				pos: position{line: 26, col: 5, offset: 626},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 26, col: 5, offset: 626},
						run: (*parser).callonConstDef2,
						expr: &seqExpr{
							pos: position{line: 26, col: 5, offset: 626},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 26, col: 5, offset: 626},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 26, col: 13, offset: 634},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 26, col: 15, offset: 636},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 26, col: 18, offset: 639},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 26, col: 33, offset: 654},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 26, col: 36, offset: 657},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 26, col: 40, offset: 661},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 26, col: 43, offset: 664},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 26, col: 48, offset: 669},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 29, col: 5, offset: 751},
						run: (*parser).callonConstDef13,
						expr: &seqExpr{
							pos: position{line: 29, col: 5, offset: 751},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 29, col: 5, offset: 751},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 29, col: 12, offset: 758},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 29, col: 14, offset: 760},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 29, col: 17, offset: 763},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 29, col: 32, offset: 778},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 29, col: 35, offset: 781},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 29, col: 39, offset: 785},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 29, col: 42, offset: 788},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 29, col: 46, offset: 792},
										name: "Type",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operation",
			pos:  position{line: 39, col: 1, offset: 1016},
			expr: &choiceExpr{
				pos: position{line: 40, col: 5, offset: 1030},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 40, col: 5, offset: 1030},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 40, col: 5, offset: 1030},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 40, col: 5, offset: 1030},
									val:        "split",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 40, col: 13, offset: 1038},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 40, col: 16, offset: 1041},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 40, col: 20, offset: 1045},
									label: "procArray",
									expr: &oneOrMoreExpr{
										pos: position{line: 40, col: 30, offset: 1055},
										expr: &ruleRefExpr{
											pos:  position{line: 40, col: 30, offset: 1055},
											name: "SplitLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 40, col: 40, offset: 1065},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 40, col: 43, offset: 1068},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 43, col: 5, offset: 1165},
						run: (*parser).callonOperation12,
						expr: &seqExpr{
							pos: position{line: 43, col: 5, offset: 1165},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 43, col: 5, offset: 1165},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 43, col: 14, offset: 1174},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 43, col: 16, offset: 1176},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 43, col: 21, offset: 1181},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 43, col: 26, offset: 1186},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 43, col: 28, offset: 1188},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 43, col: 32, offset: 1192},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 43, col: 38, offset: 1198},
										expr: &ruleRefExpr{
											pos:  position{line: 43, col: 38, offset: 1198},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 43, col: 49, offset: 1209},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 43, col: 52, offset: 1212},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 46, col: 5, offset: 1317},
						run: (*parser).callonOperation25,
						expr: &seqExpr{
							pos: position{line: 46, col: 5, offset: 1317},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 46, col: 5, offset: 1317},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 46, col: 14, offset: 1326},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 46, col: 17, offset: 1329},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 46, col: 21, offset: 1333},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 46, col: 27, offset: 1339},
										expr: &ruleRefExpr{
											pos:  position{line: 46, col: 27, offset: 1339},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 46, col: 38, offset: 1350},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 46, col: 41, offset: 1353},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 49, col: 5, offset: 1457},
						run: (*parser).callonOperation35,
						expr: &seqExpr{
							pos: position{line: 49, col: 5, offset: 1457},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 49, col: 5, offset: 1457},
									val:        "from",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 49, col: 12, offset: 1464},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 49, col: 15, offset: 1467},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 49, col: 19, offset: 1471},
									label: "trunks",
									expr: &oneOrMoreExpr{
										pos: position{line: 49, col: 26, offset: 1478},
										expr: &ruleRefExpr{
											pos:  position{line: 49, col: 26, offset: 1478},
											name: "FromLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 49, col: 35, offset: 1487},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 49, col: 38, offset: 1490},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&labeledExpr{
						pos:   position{line: 52, col: 5, offset: 1581},
						label: "op",
						expr: &ruleRefExpr{
							pos:  position{line: 52, col: 8, offset: 1584},
							name: "Operator",
						},
					},
					&actionExpr{
						pos: position{line: 53, col: 5, offset: 1597},
						run: (*parser).callonOperation47,
						expr: &seqExpr{
							pos: position{line: 53, col: 5, offset: 1597},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 53, col: 5, offset: 1597},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 53, col: 7, offset: 1599},
										name: "Function",
									},
								},
								&andExpr{
									pos: position{line: 53, col: 16, offset: 1608},
									expr: &ruleRefExpr{
										pos:  position{line: 53, col: 17, offset: 1609},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 54, col: 5, offset: 1639},
						run: (*parser).callonOperation53,
						expr: &seqExpr{
							pos: position{line: 54, col: 5, offset: 1639},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 54, col: 5, offset: 1639},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 54, col: 7, offset: 1641},
										name: "OpAssignment",
									},
								},
								&andExpr{
									pos: position{line: 54, col: 20, offset: 1654},
									expr: &ruleRefExpr{
										pos:  position{line: 54, col: 21, offset: 1655},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 55, col: 5, offset: 1685},
						run: (*parser).callonOperation59,
						expr: &seqExpr{
							pos: position{line: 55, col: 5, offset: 1685},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 55, col: 5, offset: 1685},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 55, col: 7, offset: 1687},
										name: "Aggregation",
									},
								},
								&andExpr{
									pos: position{line: 55, col: 19, offset: 1699},
									expr: &ruleRefExpr{
										pos:  position{line: 55, col: 20, offset: 1700},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 56, col: 5, offset: 1731},
						run: (*parser).callonOperation65,
						expr: &seqExpr{
							pos: position{line: 56, col: 5, offset: 1731},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 56, col: 5, offset: 1731},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 56, col: 10, offset: 1736},
										name: "SearchBoolean",
									},
								},
								&notExpr{
									pos: position{line: 56, col: 24, offset: 1750},
									expr: &ruleRefExpr{
										pos:  position{line: 56, col: 25, offset: 1751},
										name: "AggGuard",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EndOfOp",
			pos:  position{line: 60, col: 1, offset: 1842},
			expr: &seqExpr{
				pos: position{line: 60, col: 11, offset: 1852},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 60, col: 11, offset: 1852},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 60, col: 15, offset: 1856},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 60, col: 15, offset: 1856},
								name: "Pipe",
							},
							&ruleRefExpr{
								pos:  position{line: 60, col: 22, offset: 1863},
								name: "SearchKeywordGuard",
							},
							&litMatcher{
								pos:        position{line: 60, col: 43, offset: 1884},
								val:        "=>",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 60, col: 50, offset: 1891},
								val:        ")",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 60, col: 56, offset: 1897},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "Pipe",
			pos:  position{line: 61, col: 1, offset: 1902},
			expr: &seqExpr{
				pos: position{line: 61, col: 8, offset: 1909},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 61, col: 8, offset: 1909},
						val:        "|",
						ignoreCase: false,
					},
					&notExpr{
						pos: position{line: 61, col: 12, offset: 1913},
						expr: &choiceExpr{
							pos: position{line: 61, col: 14, offset: 1915},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 61, col: 14, offset: 1915},
									val:        "{",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 61, col: 20, offset: 1921},
									val:        "[",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SplitLeg",
			pos:  position{line: 63, col: 1, offset: 1927},
			expr: &actionExpr{
				pos: position{line: 64, col: 5, offset: 1940},
				run: (*parser).callonSplitLeg1,
				expr: &seqExpr{
					pos: position{line: 64, col: 5, offset: 1940},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 64, col: 5, offset: 1940},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 64, col: 8, offset: 1943},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 64, col: 13, offset: 1948},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 64, col: 16, offset: 1951},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 64, col: 18, offset: 1953},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchLeg",
			pos:  position{line: 66, col: 1, offset: 1983},
			expr: &actionExpr{
				pos: position{line: 67, col: 5, offset: 1997},
				run: (*parser).callonSwitchLeg1,
				expr: &seqExpr{
					pos: position{line: 67, col: 5, offset: 1997},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 67, col: 5, offset: 1997},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 67, col: 8, offset: 2000},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 67, col: 13, offset: 2005},
								name: "Case",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 67, col: 18, offset: 2010},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 67, col: 21, offset: 2013},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 67, col: 26, offset: 2018},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 67, col: 29, offset: 2021},
							label: "proc",
							expr: &ruleRefExpr{
								pos:  position{line: 67, col: 34, offset: 2026},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "Case",
			pos:  position{line: 71, col: 1, offset: 2115},
			expr: &choiceExpr{
				pos: position{line: 72, col: 5, offset: 2124},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 72, col: 5, offset: 2124},
						run: (*parser).callonCase2,
						expr: &seqExpr{
							pos: position{line: 72, col: 5, offset: 2124},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 72, col: 5, offset: 2124},
									val:        "case",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 72, col: 12, offset: 2131},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 72, col: 14, offset: 2133},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 72, col: 19, offset: 2138},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 73, col: 5, offset: 2168},
						run: (*parser).callonCase8,
						expr: &litMatcher{
							pos:        position{line: 73, col: 5, offset: 2168},
							val:        "default",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromLeg",
			pos:  position{line: 75, col: 1, offset: 2199},
			expr: &choiceExpr{
				pos: position{line: 76, col: 5, offset: 2211},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 76, col: 5, offset: 2211},
						run: (*parser).callonFromLeg2,
						expr: &seqExpr{
							pos: position{line: 76, col: 5, offset: 2211},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 76, col: 5, offset: 2211},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 76, col: 8, offset: 2214},
									label: "source",
									expr: &ruleRefExpr{
										pos:  position{line: 76, col: 15, offset: 2221},
										name: "FromHead",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 76, col: 24, offset: 2230},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 76, col: 28, offset: 2234},
									label: "seq",
									expr: &ruleRefExpr{
										pos:  position{line: 76, col: 32, offset: 2238},
										name: "Sequential",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 79, col: 5, offset: 2349},
						run: (*parser).callonFromLeg10,
						expr: &seqExpr{
							pos: position{line: 79, col: 5, offset: 2349},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 79, col: 5, offset: 2349},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 79, col: 8, offset: 2352},
									label: "source",
									expr: &ruleRefExpr{
										pos:  position{line: 79, col: 15, offset: 2359},
										name: "FromSource",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FromHead",
			pos:  position{line: 83, col: 1, offset: 2467},
			expr: &actionExpr{
				pos: position{line: 84, col: 5, offset: 2480},
				run: (*parser).callonFromHead1,
				expr: &seqExpr{
					pos: position{line: 84, col: 5, offset: 2480},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 84, col: 5, offset: 2480},
							label: "src",
							expr: &ruleRefExpr{
								pos:  position{line: 84, col: 9, offset: 2484},
								name: "FromSource",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 84, col: 20, offset: 2495},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 84, col: 23, offset: 2498},
							val:        "=>",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromSource",
			pos:  position{line: 86, col: 1, offset: 2524},
			expr: &choiceExpr{
				pos: position{line: 87, col: 5, offset: 2539},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 87, col: 5, offset: 2539},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 88, col: 5, offset: 2548},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 89, col: 5, offset: 2556},
						name: "Pool",
					},
					&ruleRefExpr{
						pos:  position{line: 90, col: 5, offset: 2565},
						name: "PassProc",
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 92, col: 1, offset: 2575},
			expr: &seqExpr{
				pos: position{line: 92, col: 13, offset: 2587},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 92, col: 13, offset: 2587},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 92, col: 17, offset: 2591},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 92, col: 18, offset: 2592},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 92, col: 18, offset: 2592},
										expr: &litMatcher{
											pos:        position{line: 92, col: 19, offset: 2593},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 92, col: 24, offset: 2598},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 92, col: 38, offset: 2612},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 92, col: 57, offset: 2631},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 92, col: 82, offset: 2656},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 92, col: 88, offset: 2662},
								val:        "(",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 92, col: 94, offset: 2668},
								val:        "[",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 92, col: 100, offset: 2674},
								val:        "matches",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 94, col: 1, offset: 2686},
			expr: &actionExpr{
				pos: position{line: 94, col: 14, offset: 2699},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 94, col: 15, offset: 2700},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 94, col: 15, offset: 2700},
							val:        "==",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 94, col: 22, offset: 2707},
							val:        "!=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 94, col: 29, offset: 2714},
							val:        "in",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 94, col: 36, offset: 2721},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 94, col: 43, offset: 2728},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 94, col: 49, offset: 2734},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 94, col: 56, offset: 2741},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AggGuard",
			pos:  position{line: 96, col: 1, offset: 2778},
			expr: &choiceExpr{
				pos: position{line: 96, col: 12, offset: 2789},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 96, col: 13, offset: 2790},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 96, col: 13, offset: 2790},
								name: "_",
							},
							&choiceExpr{
								pos: position{line: 96, col: 16, offset: 2793},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 96, col: 16, offset: 2793},
										name: "ByToken",
									},
									&litMatcher{
										pos:        position{line: 96, col: 26, offset: 2803},
										val:        "BY",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 96, col: 33, offset: 2810},
										val:        "-with",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 96, col: 42, offset: 2819},
								name: "EOT",
							},
						},
					},
					&seqExpr{
						pos: position{line: 96, col: 50, offset: 2827},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 96, col: 50, offset: 2827},
								name: "__",
							},
							&litMatcher{
								pos:        position{line: 96, col: 53, offset: 2830},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 98, col: 1, offset: 2836},
			expr: &actionExpr{
				pos: position{line: 99, col: 5, offset: 2854},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 99, col: 5, offset: 2854},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 99, col: 5, offset: 2854},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 99, col: 11, offset: 2860},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 99, col: 21, offset: 2870},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 99, col: 26, offset: 2875},
								expr: &ruleRefExpr{
									pos:  position{line: 99, col: 26, offset: 2875},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 103, col: 1, offset: 2949},
			expr: &actionExpr{
				pos: position{line: 103, col: 16, offset: 2964},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 103, col: 16, offset: 2964},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 103, col: 16, offset: 2964},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 103, col: 18, offset: 2966},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 103, col: 26, offset: 2974},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 103, col: 28, offset: 2976},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 103, col: 30, offset: 2978},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 105, col: 1, offset: 3028},
			expr: &actionExpr{
				pos: position{line: 106, col: 5, offset: 3042},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 106, col: 5, offset: 3042},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 106, col: 5, offset: 3042},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 106, col: 11, offset: 3048},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 107, col: 5, offset: 3065},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 107, col: 10, offset: 3070},
								expr: &actionExpr{
									pos: position{line: 107, col: 11, offset: 3071},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 107, col: 11, offset: 3071},
										exprs: []interface{}{
											&zeroOrOneExpr{
												pos: position{line: 107, col: 11, offset: 3071},
												expr: &seqExpr{
													pos: position{line: 107, col: 12, offset: 3072},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 107, col: 12, offset: 3072},
															name: "_",
														},
														&ruleRefExpr{
															pos:  position{line: 107, col: 14, offset: 3074},
															name: "AndToken",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 107, col: 25, offset: 3085},
												name: "_",
											},
											&notExpr{
												pos: position{line: 107, col: 27, offset: 3087},
												expr: &choiceExpr{
													pos: position{line: 107, col: 29, offset: 3089},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 107, col: 29, offset: 3089},
															name: "OrToken",
														},
														&ruleRefExpr{
															pos:  position{line: 107, col: 39, offset: 3099},
															name: "SearchKeywordGuard",
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 107, col: 59, offset: 3119},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 107, col: 64, offset: 3124},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchKeywordGuard",
			pos:  position{line: 111, col: 1, offset: 3240},
			expr: &choiceExpr{
				pos: position{line: 112, col: 5, offset: 3263},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 112, col: 5, offset: 3263},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 112, col: 5, offset: 3263},
								name: "FromHead",
							},
							&ruleRefExpr{
								pos:  position{line: 112, col: 14, offset: 3272},
								name: "__",
							},
						},
					},
					&seqExpr{
						pos: position{line: 113, col: 5, offset: 3279},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 113, col: 5, offset: 3279},
								name: "Case",
							},
							&ruleRefExpr{
								pos:  position{line: 113, col: 10, offset: 3284},
								name: "__",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 115, col: 1, offset: 3288},
			expr: &choiceExpr{
				pos: position{line: 116, col: 5, offset: 3305},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 116, col: 5, offset: 3305},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 116, col: 5, offset: 3305},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 116, col: 6, offset: 3306},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 116, col: 6, offset: 3306},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 116, col: 6, offset: 3306},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 116, col: 15, offset: 3315},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 116, col: 19, offset: 3319},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 116, col: 19, offset: 3319},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 116, col: 23, offset: 3323},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 116, col: 27, offset: 3327},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 116, col: 29, offset: 3329},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 119, col: 5, offset: 3441},
						run: (*parser).callonSearchFactor13,
						expr: &seqExpr{
							pos: position{line: 119, col: 5, offset: 3441},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 119, col: 5, offset: 3441},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 119, col: 9, offset: 3445},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 119, col: 12, offset: 3448},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 119, col: 17, offset: 3453},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 119, col: 31, offset: 3467},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 119, col: 34, offset: 3470},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 120, col: 5, offset: 3499},
						name: "SearchExpr",
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 122, col: 1, offset: 3511},
			expr: &choiceExpr{
				pos: position{line: 123, col: 5, offset: 3526},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 123, col: 5, offset: 3526},
						run: (*parser).callonSearchExpr2,
						expr: &labeledExpr{
							pos:   position{line: 123, col: 5, offset: 3526},
							label: "search",
							expr: &ruleRefExpr{
								pos:  position{line: 123, col: 12, offset: 3533},
								name: "PatternSearch",
							},
						},
					},
					&actionExpr{
						pos: position{line: 124, col: 5, offset: 3574},
						run: (*parser).callonSearchExpr5,
						expr: &seqExpr{
							pos: position{line: 124, col: 5, offset: 3574},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 124, col: 5, offset: 3574},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 124, col: 7, offset: 3576},
										name: "SearchValue",
									},
								},
								&notExpr{
									pos: position{line: 124, col: 19, offset: 3588},
									expr: &ruleRefExpr{
										pos:  position{line: 124, col: 20, offset: 3589},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 127, col: 5, offset: 3706},
						run: (*parser).callonSearchExpr11,
						expr: &seqExpr{
							pos: position{line: 127, col: 5, offset: 3706},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 127, col: 5, offset: 3706},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 127, col: 9, offset: 3710},
									expr: &ruleRefExpr{
										pos:  position{line: 127, col: 10, offset: 3711},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 130, col: 5, offset: 3827},
						name: "EqualityCompareExpr",
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 132, col: 1, offset: 3848},
			expr: &choiceExpr{
				pos: position{line: 133, col: 5, offset: 3864},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 133, col: 5, offset: 3864},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 134, col: 5, offset: 3876},
						run: (*parser).callonSearchValue3,
						expr: &seqExpr{
							pos: position{line: 134, col: 5, offset: 3876},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 134, col: 5, offset: 3876},
									expr: &ruleRefExpr{
										pos:  position{line: 134, col: 6, offset: 3877},
										name: "Regexp",
									},
								},
								&labeledExpr{
									pos:   position{line: 134, col: 13, offset: 3884},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 134, col: 15, offset: 3886},
										name: "KeyWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PatternSearch",
			pos:  position{line: 138, col: 1, offset: 3994},
			expr: &actionExpr{
				pos: position{line: 139, col: 5, offset: 4012},
				run: (*parser).callonPatternSearch1,
				expr: &labeledExpr{
					pos:   position{line: 139, col: 5, offset: 4012},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 139, col: 13, offset: 4020},
						name: "Pattern",
					},
				},
			},
		},
		{
			name: "PatternMatch",
			pos:  position{line: 143, col: 1, offset: 4122},
			expr: &actionExpr{
				pos: position{line: 144, col: 5, offset: 4139},
				run: (*parser).callonPatternMatch1,
				expr: &seqExpr{
					pos: position{line: 144, col: 5, offset: 4139},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 144, col: 5, offset: 4139},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 144, col: 7, offset: 4141},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 144, col: 12, offset: 4146},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 144, col: 14, offset: 4148},
							val:        "matches",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 144, col: 24, offset: 4158},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 144, col: 27, offset: 4161},
							label: "pattern",
							expr: &ruleRefExpr{
								pos:  position{line: 144, col: 35, offset: 4169},
								name: "Pattern",
							},
						},
					},
				},
			},
		},
		{
			name: "Pattern",
			pos:  position{line: 148, col: 1, offset: 4281},
			expr: &choiceExpr{
				pos: position{line: 148, col: 11, offset: 4291},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 148, col: 11, offset: 4291},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 148, col: 20, offset: 4300},
						name: "Glob",
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 152, col: 1, offset: 4332},
			expr: &choiceExpr{
				pos: position{line: 153, col: 5, offset: 4348},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 153, col: 5, offset: 4348},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 153, col: 5, offset: 4348},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 153, col: 5, offset: 4348},
									expr: &ruleRefExpr{
										pos:  position{line: 153, col: 5, offset: 4348},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 153, col: 16, offset: 4359},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 153, col: 21, offset: 4364},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 153, col: 33, offset: 4376},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 153, col: 39, offset: 4382},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 156, col: 5, offset: 4508},
						run: (*parser).callonAggregation10,
						expr: &seqExpr{
							pos: position{line: 156, col: 5, offset: 4508},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 156, col: 5, offset: 4508},
									expr: &ruleRefExpr{
										pos:  position{line: 156, col: 5, offset: 4508},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 156, col: 16, offset: 4519},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 156, col: 21, offset: 4524},
										name: "AggAssignments",
									},
								},
								&labeledExpr{
									pos:   position{line: 156, col: 36, offset: 4539},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 156, col: 41, offset: 4544},
										expr: &seqExpr{
											pos: position{line: 156, col: 42, offset: 4545},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 156, col: 42, offset: 4545},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 156, col: 44, offset: 4547},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 156, col: 58, offset: 4561},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 156, col: 64, offset: 4567},
										name: "LimitArg",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Summarize",
			pos:  position{line: 164, col: 1, offset: 4781},
			expr: &seqExpr{
				pos: position{line: 164, col: 13, offset: 4793},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 164, col: 13, offset: 4793},
						val:        "summarize",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 164, col: 25, offset: 4805},
						name: "_",
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 166, col: 1, offset: 4808},
			expr: &actionExpr{
				pos: position{line: 167, col: 5, offset: 4824},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 167, col: 5, offset: 4824},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 167, col: 5, offset: 4824},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 167, col: 13, offset: 4832},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 167, col: 15, offset: 4834},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 167, col: 23, offset: 4842},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 169, col: 1, offset: 4883},
			expr: &choiceExpr{
				pos: position{line: 170, col: 5, offset: 4896},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 170, col: 5, offset: 4896},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 170, col: 5, offset: 4896},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 170, col: 5, offset: 4896},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 170, col: 7, offset: 4898},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 170, col: 14, offset: 4905},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 170, col: 16, offset: 4907},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 170, col: 25, offset: 4916},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 170, col: 27, offset: 4918},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 170, col: 33, offset: 4924},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 171, col: 5, offset: 4955},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 171, col: 5, offset: 4955},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 176, col: 1, offset: 5215},
			expr: &choiceExpr{
				pos: position{line: 177, col: 5, offset: 5234},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 177, col: 5, offset: 5234},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 178, col: 5, offset: 5249},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 178, col: 5, offset: 5249},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 178, col: 10, offset: 5254},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 180, col: 1, offset: 5346},
			expr: &actionExpr{
				pos: position{line: 181, col: 5, offset: 5366},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 181, col: 5, offset: 5366},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 181, col: 5, offset: 5366},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 181, col: 11, offset: 5372},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 181, col: 26, offset: 5387},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 181, col: 31, offset: 5392},
								expr: &actionExpr{
									pos: position{line: 181, col: 32, offset: 5393},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 181, col: 32, offset: 5393},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 181, col: 32, offset: 5393},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 181, col: 35, offset: 5396},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 181, col: 39, offset: 5400},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 181, col: 42, offset: 5403},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 181, col: 47, offset: 5408},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignment",
			pos:  position{line: 185, col: 1, offset: 5530},
			expr: &choiceExpr{
				pos: position{line: 186, col: 5, offset: 5548},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 186, col: 5, offset: 5548},
						run: (*parser).callonAggAssignment2,
						expr: &seqExpr{
							pos: position{line: 186, col: 5, offset: 5548},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 186, col: 5, offset: 5548},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 186, col: 10, offset: 5553},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 186, col: 15, offset: 5558},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 186, col: 18, offset: 5561},
									val:        ":=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 186, col: 23, offset: 5566},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 186, col: 26, offset: 5569},
									label: "agg",
									expr: &ruleRefExpr{
										pos:  position{line: 186, col: 30, offset: 5573},
										name: "Agg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 189, col: 5, offset: 5677},
						run: (*parser).callonAggAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 189, col: 5, offset: 5677},
							label: "agg",
							expr: &ruleRefExpr{
								pos:  position{line: 189, col: 9, offset: 5681},
								name: "Agg",
							},
						},
					},
				},
			},
		},
		{
			name: "Agg",
			pos:  position{line: 193, col: 1, offset: 5781},
			expr: &actionExpr{
				pos: position{line: 194, col: 5, offset: 5789},
				run: (*parser).callonAgg1,
				expr: &seqExpr{
					pos: position{line: 194, col: 5, offset: 5789},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 194, col: 5, offset: 5789},
							expr: &ruleRefExpr{
								pos:  position{line: 194, col: 6, offset: 5790},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 194, col: 16, offset: 5800},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 194, col: 19, offset: 5803},
								name: "AggName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 194, col: 27, offset: 5811},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 194, col: 30, offset: 5814},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 194, col: 34, offset: 5818},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 194, col: 37, offset: 5821},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 194, col: 42, offset: 5826},
								expr: &ruleRefExpr{
									pos:  position{line: 194, col: 42, offset: 5826},
									name: "Expr",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 194, col: 49, offset: 5833},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 194, col: 52, offset: 5836},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 194, col: 56, offset: 5840},
							expr: &seqExpr{
								pos: position{line: 194, col: 58, offset: 5842},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 194, col: 58, offset: 5842},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 194, col: 61, offset: 5845},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 194, col: 66, offset: 5850},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 194, col: 72, offset: 5856},
								expr: &ruleRefExpr{
									pos:  position{line: 194, col: 72, offset: 5856},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggName",
			pos:  position{line: 202, col: 1, offset: 6046},
			expr: &choiceExpr{
				pos: position{line: 203, col: 5, offset: 6058},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 203, col: 5, offset: 6058},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 204, col: 5, offset: 6077},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 205, col: 5, offset: 6090},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 207, col: 1, offset: 6099},
			expr: &actionExpr{
				pos: position{line: 207, col: 15, offset: 6113},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 207, col: 15, offset: 6113},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 207, col: 15, offset: 6113},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 207, col: 17, offset: 6115},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 207, col: 25, offset: 6123},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 207, col: 27, offset: 6125},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 207, col: 32, offset: 6130},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignments",
			pos:  position{line: 209, col: 1, offset: 6166},
			expr: &actionExpr{
				pos: position{line: 210, col: 5, offset: 6185},
				run: (*parser).callonAggAssignments1,
				expr: &seqExpr{
					pos: position{line: 210, col: 5, offset: 6185},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 210, col: 5, offset: 6185},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 210, col: 11, offset: 6191},
								name: "AggAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 210, col: 25, offset: 6205},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 210, col: 30, offset: 6210},
								expr: &seqExpr{
									pos: position{line: 210, col: 31, offset: 6211},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 210, col: 31, offset: 6211},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 210, col: 34, offset: 6214},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 210, col: 38, offset: 6218},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 210, col: 41, offset: 6221},
											name: "AggAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 220, col: 1, offset: 6457},
			expr: &choiceExpr{
				pos: position{line: 221, col: 5, offset: 6470},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 221, col: 5, offset: 6470},
						name: "SortProc",
					},
					&ruleRefExpr{
						pos:  position{line: 222, col: 5, offset: 6483},
						name: "TopProc",
					},
					&ruleRefExpr{
						pos:  position{line: 223, col: 5, offset: 6495},
						name: "CutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 224, col: 5, offset: 6507},
						name: "DropProc",
					},
					&ruleRefExpr{
						pos:  position{line: 225, col: 5, offset: 6520},
						name: "HeadProc",
					},
					&ruleRefExpr{
						pos:  position{line: 226, col: 5, offset: 6533},
						name: "TailProc",
					},
					&ruleRefExpr{
						pos:  position{line: 227, col: 5, offset: 6546},
						name: "FilterProc",
					},
					&ruleRefExpr{
						pos:  position{line: 228, col: 5, offset: 6561},
						name: "UniqProc",
					},
					&ruleRefExpr{
						pos:  position{line: 229, col: 5, offset: 6574},
						name: "PutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 230, col: 5, offset: 6586},
						name: "RenameProc",
					},
					&ruleRefExpr{
						pos:  position{line: 231, col: 5, offset: 6601},
						name: "FuseProc",
					},
					&ruleRefExpr{
						pos:  position{line: 232, col: 5, offset: 6614},
						name: "ShapeProc",
					},
					&ruleRefExpr{
						pos:  position{line: 233, col: 5, offset: 6628},
						name: "JoinProc",
					},
					&ruleRefExpr{
						pos:  position{line: 234, col: 5, offset: 6641},
						name: "SampleProc",
					},
					&ruleRefExpr{
						pos:  position{line: 235, col: 5, offset: 6656},
						name: "SQLProc",
					},
					&ruleRefExpr{
						pos:  position{line: 236, col: 5, offset: 6668},
						name: "FromProc",
					},
					&ruleRefExpr{
						pos:  position{line: 237, col: 5, offset: 6681},
						name: "PassProc",
					},
					&ruleRefExpr{
						pos:  position{line: 238, col: 5, offset: 6694},
						name: "ExplodeProc",
					},
					&ruleRefExpr{
						pos:  position{line: 239, col: 5, offset: 6710},
						name: "LetProc",
					},
					&ruleRefExpr{
						pos:  position{line: 240, col: 5, offset: 6722},
						name: "MergeProc",
					},
					&ruleRefExpr{
						pos:  position{line: 241, col: 5, offset: 6736},
						name: "OverProc",
					},
					&ruleRefExpr{
						pos:  position{line: 242, col: 5, offset: 6749},
						name: "YieldProc",
					},
				},
			},
		},
		{
			name: "SortProc",
			pos:  position{line: 244, col: 1, offset: 6760},
			expr: &actionExpr{
				pos: position{line: 245, col: 5, offset: 6773},
				run: (*parser).callonSortProc1,
				expr: &seqExpr{
					pos: position{line: 245, col: 5, offset: 6773},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 245, col: 5, offset: 6773},
							val:        "sort",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 245, col: 12, offset: 6780},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 245, col: 17, offset: 6785},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 245, col: 26, offset: 6794},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 245, col: 31, offset: 6799},
								expr: &actionExpr{
									pos: position{line: 245, col: 32, offset: 6800},
									run: (*parser).callonSortProc8,
									expr: &seqExpr{
										pos: position{line: 245, col: 32, offset: 6800},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 245, col: 32, offset: 6800},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 245, col: 34, offset: 6802},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 245, col: 36, offset: 6804},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 259, col: 1, offset: 7223},
			expr: &actionExpr{
				pos: position{line: 259, col: 12, offset: 7234},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 259, col: 12, offset: 7234},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 259, col: 17, offset: 7239},
						expr: &actionExpr{
							pos: position{line: 259, col: 18, offset: 7240},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 259, col: 18, offset: 7240},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 259, col: 18, offset: 7240},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 259, col: 20, offset: 7242},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 259, col: 22, offset: 7244},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 261, col: 1, offset: 7300},
			expr: &choiceExpr{
				pos: position{line: 262, col: 5, offset: 7312},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 262, col: 5, offset: 7312},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 262, col: 5, offset: 7312},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 263, col: 5, offset: 7387},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 263, col: 5, offset: 7387},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 263, col: 5, offset: 7387},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 263, col: 14, offset: 7396},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 263, col: 16, offset: 7398},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 263, col: 23, offset: 7405},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 263, col: 24, offset: 7406},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 263, col: 24, offset: 7406},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 263, col: 34, offset: 7416},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopProc",
			pos:  position{line: 265, col: 1, offset: 7530},
			expr: &actionExpr{
				pos: position{line: 266, col: 5, offset: 7542},
				run: (*parser).callonTopProc1,
				expr: &seqExpr{
					pos: position{line: 266, col: 5, offset: 7542},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 266, col: 5, offset: 7542},
							val:        "top",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 266, col: 11, offset: 7548},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 266, col: 17, offset: 7554},
								expr: &actionExpr{
									pos: position{line: 266, col: 18, offset: 7555},
									run: (*parser).callonTopProc6,
									expr: &seqExpr{
										pos: position{line: 266, col: 18, offset: 7555},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 266, col: 18, offset: 7555},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 266, col: 20, offset: 7557},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 266, col: 22, offset: 7559},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 266, col: 46, offset: 7583},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 266, col: 52, offset: 7589},
								expr: &seqExpr{
									pos: position{line: 266, col: 53, offset: 7590},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 266, col: 53, offset: 7590},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 266, col: 55, offset: 7592},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 266, col: 66, offset: 7603},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 266, col: 73, offset: 7610},
								expr: &actionExpr{
									pos: position{line: 266, col: 74, offset: 7611},
									run: (*parser).callonTopProc18,
									expr: &seqExpr{
										pos: position{line: 266, col: 74, offset: 7611},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 266, col: 74, offset: 7611},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 266, col: 76, offset: 7613},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 266, col: 78, offset: 7615},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutProc",
			pos:  position{line: 280, col: 1, offset: 7960},
			expr: &actionExpr{
				pos: position{line: 281, col: 5, offset: 7972},
				run: (*parser).callonCutProc1,
				expr: &seqExpr{
					pos: position{line: 281, col: 5, offset: 7972},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 281, col: 5, offset: 7972},
							val:        "cut",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 281, col: 11, offset: 7978},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 281, col: 13, offset: 7980},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 281, col: 18, offset: 7985},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropProc",
			pos:  position{line: 285, col: 1, offset: 8080},
			expr: &actionExpr{
				pos: position{line: 286, col: 5, offset: 8093},
				run: (*parser).callonDropProc1,
				expr: &seqExpr{
					pos: position{line: 286, col: 5, offset: 8093},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 286, col: 5, offset: 8093},
							val:        "drop",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 286, col: 12, offset: 8100},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 286, col: 14, offset: 8102},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 286, col: 19, offset: 8107},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadProc",
			pos:  position{line: 290, col: 1, offset: 8198},
			expr: &choiceExpr{
				pos: position{line: 291, col: 5, offset: 8211},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 291, col: 5, offset: 8211},
						run: (*parser).callonHeadProc2,
						expr: &seqExpr{
							pos: position{line: 291, col: 5, offset: 8211},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 291, col: 5, offset: 8211},
									val:        "head",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 291, col: 12, offset: 8218},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 291, col: 14, offset: 8220},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 291, col: 20, offset: 8226},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 292, col: 5, offset: 8306},
						run: (*parser).callonHeadProc8,
						expr: &litMatcher{
							pos:        position{line: 292, col: 5, offset: 8306},
							val:        "head",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TailProc",
			pos:  position{line: 294, col: 1, offset: 8381},
			expr: &choiceExpr{
				pos: position{line: 295, col: 5, offset: 8394},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 295, col: 5, offset: 8394},
						run: (*parser).callonTailProc2,
						expr: &seqExpr{
							pos: position{line: 295, col: 5, offset: 8394},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 295, col: 5, offset: 8394},
									val:        "tail",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 295, col: 12, offset: 8401},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 295, col: 14, offset: 8403},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 295, col: 20, offset: 8409},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 296, col: 5, offset: 8489},
						run: (*parser).callonTailProc8,
						expr: &litMatcher{
							pos:        position{line: 296, col: 5, offset: 8489},
							val:        "tail",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FilterProc",
			pos:  position{line: 298, col: 1, offset: 8564},
			expr: &actionExpr{
				pos: position{line: 299, col: 5, offset: 8579},
				run: (*parser).callonFilterProc1,
				expr: &seqExpr{
					pos: position{line: 299, col: 5, offset: 8579},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 299, col: 5, offset: 8579},
							val:        "filter",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 299, col: 14, offset: 8588},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 299, col: 16, offset: 8590},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 299, col: 19, offset: 8593},
								name: "Filter",
							},
						},
					},
				},
			},
		},
		{
			name: "Filter",
			pos:  position{line: 303, col: 1, offset: 8630},
			expr: &actionExpr{
				pos: position{line: 304, col: 5, offset: 8641},
				run: (*parser).callonFilter1,
				expr: &labeledExpr{
					pos:   position{line: 304, col: 5, offset: 8641},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 304, col: 10, offset: 8646},
						name: "SearchBoolean",
					},
				},
			},
		},
		{
			name: "UniqProc",
			pos:  position{line: 308, col: 1, offset: 8742},
			expr: &choiceExpr{
				pos: position{line: 309, col: 5, offset: 8755},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 309, col: 5, offset: 8755},
						run: (*parser).callonUniqProc2,
						expr: &seqExpr{
							pos: position{line: 309, col: 5, offset: 8755},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 309, col: 5, offset: 8755},
									val:        "uniq",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 309, col: 12, offset: 8762},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 309, col: 14, offset: 8764},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 312, col: 5, offset: 8853},
						run: (*parser).callonUniqProc7,
						expr: &litMatcher{
							pos:        position{line: 312, col: 5, offset: 8853},
							val:        "uniq",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PutProc",
			pos:  position{line: 316, col: 1, offset: 8942},
			expr: &actionExpr{
				pos: position{line: 317, col: 5, offset: 8954},
				run: (*parser).callonPutProc1,
				expr: &seqExpr{
					pos: position{line: 317, col: 5, offset: 8954},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 317, col: 5, offset: 8954},
							val:        "put",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 317, col: 11, offset: 8960},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 317, col: 13, offset: 8962},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 317, col: 18, offset: 8967},
								name: "Assignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameProc",
			pos:  position{line: 321, col: 1, offset: 9058},
			expr: &actionExpr{
				pos: position{line: 322, col: 5, offset: 9073},
				run: (*parser).callonRenameProc1,
				expr: &seqExpr{
					pos: position{line: 322, col: 5, offset: 9073},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 322, col: 5, offset: 9073},
							val:        "rename",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 322, col: 14, offset: 9082},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 322, col: 16, offset: 9084},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 322, col: 22, offset: 9090},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 322, col: 33, offset: 9101},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 322, col: 38, offset: 9106},
								expr: &actionExpr{
									pos: position{line: 322, col: 39, offset: 9107},
									run: (*parser).callonRenameProc9,
									expr: &seqExpr{
										pos: position{line: 322, col: 39, offset: 9107},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 322, col: 39, offset: 9107},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 322, col: 42, offset: 9110},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 322, col: 46, offset: 9114},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 322, col: 49, offset: 9117},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 322, col: 52, offset: 9120},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseProc",
			pos:  position{line: 330, col: 1, offset: 9529},
			expr: &actionExpr{
				pos: position{line: 331, col: 5, offset: 9542},
				run: (*parser).callonFuseProc1,
				expr: &seqExpr{
					pos: position{line: 331, col: 5, offset: 9542},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 331, col: 5, offset: 9542},
							val:        "fuse",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 331, col: 12, offset: 9549},
							expr: &seqExpr{
								pos: position{line: 331, col: 14, offset: 9551},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 331, col: 14, offset: 9551},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 331, col: 17, offset: 9554},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShapeProc",
			pos:  position{line: 335, col: 1, offset: 9625},
			expr: &actionExpr{
				pos: position{line: 336, col: 5, offset: 9639},
				run: (*parser).callonShapeProc1,
				expr: &litMatcher{
					pos:        position{line: 336, col: 5, offset: 9639},
					val:        "shape",
					ignoreCase: false,
				},
			},
		},
		{
			name: "JoinProc",
			pos:  position{line: 340, col: 1, offset: 9714},
			expr: &choiceExpr{
				pos: position{line: 341, col: 5, offset: 9727},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 341, col: 5, offset: 9727},
						run: (*parser).callonJoinProc2,
						expr: &seqExpr{
							pos: position{line: 341, col: 5, offset: 9727},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 341, col: 5, offset: 9727},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 341, col: 11, offset: 9733},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 341, col: 21, offset: 9743},
									val:        "join",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 341, col: 28, offset: 9750},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 341, col: 30, offset: 9752},
									name: "ON",
								},
								&ruleRefExpr{
									pos:  position{line: 341, col: 33, offset: 9755},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 341, col: 35, offset: 9757},
									label: "leftKey",
									expr: &ruleRefExpr{
										pos:  position{line: 341, col: 43, offset: 9765},
										name: "JoinKey",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 341, col: 51, offset: 9773},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 341, col: 54, offset: 9776},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 341, col: 58, offset: 9780},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 341, col: 61, offset: 9783},
									label: "rightKey",
									expr: &ruleRefExpr{
										pos:  position{line: 341, col: 70, offset: 9792},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 341, col: 78, offset: 9800},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 341, col: 86, offset: 9808},
										expr: &seqExpr{
											pos: position{line: 341, col: 87, offset: 9809},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 341, col: 87, offset: 9809},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 341, col: 89, offset: 9811},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 348, col: 5, offset: 10077},
						run: (*parser).callonJoinProc22,
						expr: &seqExpr{
							pos: position{line: 348, col: 5, offset: 10077},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 348, col: 5, offset: 10077},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 348, col: 11, offset: 10083},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 348, col: 22, offset: 10094},
									val:        "join",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 348, col: 29, offset: 10101},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 348, col: 31, offset: 10103},
									name: "ON",
								},
								&ruleRefExpr{
									pos:  position{line: 348, col: 34, offset: 10106},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 348, col: 36, offset: 10108},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 348, col: 40, offset: 10112},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 348, col: 48, offset: 10120},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 348, col: 56, offset: 10128},
										expr: &seqExpr{
											pos: position{line: 348, col: 57, offset: 10129},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 348, col: 57, offset: 10129},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 348, col: 59, offset: 10131},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinStyle",
			pos:  position{line: 356, col: 1, offset: 10385},
			expr: &choiceExpr{
				pos: position{line: 357, col: 5, offset: 10399},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 357, col: 5, offset: 10399},
						run: (*parser).callonJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 357, col: 5, offset: 10399},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 357, col: 5, offset: 10399},
									val:        "anti",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 357, col: 12, offset: 10406},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 358, col: 5, offset: 10436},
						run: (*parser).callonJoinStyle6,
						expr: &seqExpr{
							pos: position{line: 358, col: 5, offset: 10436},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 358, col: 5, offset: 10436},
									val:        "inner",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 358, col: 13, offset: 10444},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 359, col: 5, offset: 10474},
						run: (*parser).callonJoinStyle10,
						expr: &seqExpr{
							pos: position{line: 359, col: 5, offset: 10474},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 359, col: 5, offset: 10474},
									val:        "left",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 359, col: 13, offset: 10482},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 360, col: 5, offset: 10511},
						run: (*parser).callonJoinStyle14,
						expr: &seqExpr{
							pos: position{line: 360, col: 5, offset: 10511},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 360, col: 5, offset: 10511},
									val:        "right",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 360, col: 13, offset: 10519},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 361, col: 5, offset: 10549},
						run: (*parser).callonJoinStyle18,
						expr: &litMatcher{
							pos:        position{line: 361, col: 5, offset: 10549},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 363, col: 1, offset: 10585},
			expr: &choiceExpr{
				pos: position{line: 364, col: 5, offset: 10597},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 364, col: 5, offset: 10597},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 365, col: 5, offset: 10606},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 365, col: 5, offset: 10606},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 365, col: 5, offset: 10606},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 365, col: 9, offset: 10610},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 365, col: 14, offset: 10615},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 365, col: 19, offset: 10620},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SampleProc",
			pos:  position{line: 367, col: 1, offset: 10646},
			expr: &actionExpr{
				pos: position{line: 368, col: 5, offset: 10661},
				run: (*parser).callonSampleProc1,
				expr: &seqExpr{
					pos: position{line: 368, col: 5, offset: 10661},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 368, col: 5, offset: 10661},
							val:        "sample",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 368, col: 14, offset: 10670},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 368, col: 16, offset: 10672},
								name: "SampleExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "OpAssignment",
			pos:  position{line: 412, col: 1, offset: 12288},
			expr: &actionExpr{
				pos: position{line: 413, col: 5, offset: 12305},
				run: (*parser).callonOpAssignment1,
				expr: &labeledExpr{
					pos:   position{line: 413, col: 5, offset: 12305},
					label: "a",
					expr: &ruleRefExpr{
						pos:  position{line: 413, col: 7, offset: 12307},
						name: "Assignments",
					},
				},
			},
		},
		{
			name: "SampleExpr",
			pos:  position{line: 417, col: 1, offset: 12407},
			expr: &choiceExpr{
				pos: position{line: 418, col: 5, offset: 12422},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 418, col: 5, offset: 12422},
						run: (*parser).callonSampleExpr2,
						expr: &seqExpr{
							pos: position{line: 418, col: 5, offset: 12422},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 418, col: 5, offset: 12422},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 418, col: 7, offset: 12424},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 418, col: 12, offset: 12429},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 419, col: 5, offset: 12458},
						run: (*parser).callonSampleExpr7,
						expr: &litMatcher{
							pos:        position{line: 419, col: 5, offset: 12458},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromProc",
			pos:  position{line: 421, col: 1, offset: 12529},
			expr: &actionExpr{
				pos: position{line: 422, col: 5, offset: 12542},
				run: (*parser).callonFromProc1,
				expr: &labeledExpr{
					pos:   position{line: 422, col: 5, offset: 12542},
					label: "source",
					expr: &ruleRefExpr{
						pos:  position{line: 422, col: 12, offset: 12549},
						name: "FromAny",
					},
				},
			},
		},
		{
			name: "FromAny",
			pos:  position{line: 426, col: 1, offset: 12705},
			expr: &choiceExpr{
				pos: position{line: 427, col: 5, offset: 12717},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 427, col: 5, offset: 12717},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 428, col: 5, offset: 12726},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 429, col: 5, offset: 12734},
						name: "From",
					},
				},
			},
		},
		{
			name: "File",
			pos:  position{line: 431, col: 1, offset: 12740},
			expr: &actionExpr{
				pos: position{line: 432, col: 5, offset: 12749},
				run: (*parser).callonFile1,
				expr: &seqExpr{
					pos: position{line: 432, col: 5, offset: 12749},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 432, col: 5, offset: 12749},
							val:        "file",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 432, col: 12, offset: 12756},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 432, col: 14, offset: 12758},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 432, col: 19, offset: 12763},
								name: "Path",
							},
						},
						&labeledExpr{
							pos:   position{line: 432, col: 24, offset: 12768},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 432, col: 31, offset: 12775},
								expr: &ruleRefExpr{
									pos:  position{line: 432, col: 31, offset: 12775},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 432, col: 42, offset: 12786},
							label: "layout",
							expr: &zeroOrOneExpr{
								pos: position{line: 432, col: 49, offset: 12793},
								expr: &ruleRefExpr{
									pos:  position{line: 432, col: 49, offset: 12793},
									name: "LayoutArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "From",
			pos:  position{line: 436, col: 1, offset: 12922},
			expr: &actionExpr{
				pos: position{line: 437, col: 5, offset: 12931},
				run: (*parser).callonFrom1,
				expr: &seqExpr{
					pos: position{line: 437, col: 5, offset: 12931},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 437, col: 5, offset: 12931},
							val:        "from",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 437, col: 12, offset: 12938},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 437, col: 14, offset: 12940},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 437, col: 19, offset: 12945},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "Pool",
			pos:  position{line: 439, col: 1, offset: 12976},
			expr: &actionExpr{
				pos: position{line: 440, col: 5, offset: 12985},
				run: (*parser).callonPool1,
				expr: &seqExpr{
					pos: position{line: 440, col: 5, offset: 12985},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 440, col: 5, offset: 12985},
							val:        "pool",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 440, col: 12, offset: 12992},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 440, col: 14, offset: 12994},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 440, col: 19, offset: 12999},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolBody",
			pos:  position{line: 442, col: 1, offset: 13030},
			expr: &actionExpr{
				pos: position{line: 443, col: 5, offset: 13043},
				run: (*parser).callonPoolBody1,
				expr: &seqExpr{
					pos: position{line: 443, col: 5, offset: 13043},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 443, col: 5, offset: 13043},
							label: "spec",
							expr: &ruleRefExpr{
								pos:  position{line: 443, col: 10, offset: 13048},
								name: "PoolSpec",
							},
						},
						&labeledExpr{
							pos:   position{line: 443, col: 19, offset: 13057},
							label: "at",
							expr: &zeroOrOneExpr{
								pos: position{line: 443, col: 22, offset: 13060},
								expr: &ruleRefExpr{
									pos:  position{line: 443, col: 22, offset: 13060},
									name: "PoolAt",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 443, col: 30, offset: 13068},
							label: "over",
							expr: &zeroOrOneExpr{
								pos: position{line: 443, col: 35, offset: 13073},
								expr: &ruleRefExpr{
									pos:  position{line: 443, col: 35, offset: 13073},
									name: "PoolRange",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 443, col: 46, offset: 13084},
							label: "order",
							expr: &zeroOrOneExpr{
								pos: position{line: 443, col: 52, offset: 13090},
								expr: &ruleRefExpr{
									pos:  position{line: 443, col: 52, offset: 13090},
									name: "OrderArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Get",
			pos:  position{line: 447, col: 1, offset: 13226},
			expr: &actionExpr{
				pos: position{line: 448, col: 5, offset: 13234},
				run: (*parser).callonGet1,
				expr: &seqExpr{
					pos: position{line: 448, col: 5, offset: 13234},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 448, col: 5, offset: 13234},
							val:        "get",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 448, col: 11, offset: 13240},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 448, col: 13, offset: 13242},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 448, col: 17, offset: 13246},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 448, col: 21, offset: 13250},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 448, col: 28, offset: 13257},
								expr: &ruleRefExpr{
									pos:  position{line: 448, col: 28, offset: 13257},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 448, col: 39, offset: 13268},
							label: "layout",
							expr: &zeroOrOneExpr{
								pos: position{line: 448, col: 46, offset: 13275},
								expr: &ruleRefExpr{
									pos:  position{line: 448, col: 46, offset: 13275},
									name: "LayoutArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 452, col: 1, offset: 13401},
			expr: &actionExpr{
				pos: position{line: 452, col: 7, offset: 13407},
				run: (*parser).callonURL1,
				expr: &seqExpr{
					pos: position{line: 452, col: 7, offset: 13407},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 452, col: 8, offset: 13408},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 452, col: 8, offset: 13408},
									val:        "http:",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 452, col: 18, offset: 13418},
									val:        "https:",
									ignoreCase: false,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 452, col: 28, offset: 13428},
							name: "Path",
						},
					},
				},
			},
		},
		{
			name: "Path",
			pos:  position{line: 454, col: 1, offset: 13465},
			expr: &choiceExpr{
				pos: position{line: 455, col: 5, offset: 13474},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 455, col: 5, offset: 13474},
						run: (*parser).callonPath2,
						expr: &labeledExpr{
							pos:   position{line: 455, col: 5, offset: 13474},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 455, col: 7, offset: 13476},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 456, col: 5, offset: 13511},
						run: (*parser).callonPath5,
						expr: &oneOrMoreExpr{
							pos: position{line: 456, col: 5, offset: 13511},
							expr: &charClassMatcher{
								pos:        position{line: 456, col: 5, offset: 13511},
								val:        "[0-9a-zA-Z!@$%^&*()_=<>,./?:[\\]{}~|+-]",
								chars:      []rune{'!', '@', '$', '%', '^', '&', '*', '(', ')', '_', '=', '<', '>', ',', '.', '/', '?', ':', '[', ']', '{', '}', '~', '|', '+', '-'},
								ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PoolAt",
			pos:  position{line: 459, col: 1, offset: 13616},
			expr: &actionExpr{
				pos: position{line: 460, col: 5, offset: 13627},
				run: (*parser).callonPoolAt1,
				expr: &seqExpr{
					pos: position{line: 460, col: 5, offset: 13627},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 460, col: 5, offset: 13627},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 460, col: 7, offset: 13629},
							val:        "at",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 460, col: 12, offset: 13634},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 460, col: 14, offset: 13636},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 460, col: 17, offset: 13639},
								name: "KSUID",
							},
						},
					},
				},
			},
		},
		{
			name: "KSUID",
			pos:  position{line: 463, col: 1, offset: 13705},
			expr: &actionExpr{
				pos: position{line: 463, col: 9, offset: 13713},
				run: (*parser).callonKSUID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 463, col: 9, offset: 13713},
					expr: &charClassMatcher{
						pos:        position{line: 463, col: 10, offset: 13714},
						val:        "[0-9a-zA-Z]",
						ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "PoolRange",
			pos:  position{line: 465, col: 1, offset: 13760},
			expr: &actionExpr{
				pos: position{line: 466, col: 5, offset: 13774},
				run: (*parser).callonPoolRange1,
				expr: &seqExpr{
					pos: position{line: 466, col: 5, offset: 13774},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 466, col: 5, offset: 13774},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 466, col: 7, offset: 13776},
							val:        "range",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 466, col: 15, offset: 13784},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 466, col: 17, offset: 13786},
							label: "lower",
							expr: &ruleRefExpr{
								pos:  position{line: 466, col: 23, offset: 13792},
								name: "Literal",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 466, col: 31, offset: 13800},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 466, col: 33, offset: 13802},
							val:        "to",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 466, col: 38, offset: 13807},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 466, col: 40, offset: 13809},
							label: "upper",
							expr: &ruleRefExpr{
								pos:  position{line: 466, col: 46, offset: 13815},
								name: "Literal",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolSpec",
			pos:  position{line: 470, col: 1, offset: 13920},
			expr: &choiceExpr{
				pos: position{line: 471, col: 5, offset: 13933},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 471, col: 5, offset: 13933},
						run: (*parser).callonPoolSpec2,
						expr: &seqExpr{
							pos: position{line: 471, col: 5, offset: 13933},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 471, col: 5, offset: 13933},
									label: "pool",
									expr: &ruleRefExpr{
										pos:  position{line: 471, col: 10, offset: 13938},
										name: "PoolName",
									},
								},
								&labeledExpr{
									pos:   position{line: 471, col: 19, offset: 13947},
									label: "commit",
									expr: &zeroOrOneExpr{
										pos: position{line: 471, col: 26, offset: 13954},
										expr: &ruleRefExpr{
											pos:  position{line: 471, col: 26, offset: 13954},
											name: "PoolCommit",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 471, col: 38, offset: 13966},
									label: "meta",
									expr: &zeroOrOneExpr{
										pos: position{line: 471, col: 43, offset: 13971},
										expr: &ruleRefExpr{
											pos:  position{line: 471, col: 43, offset: 13971},
											name: "PoolMeta",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 474, col: 5, offset: 14080},
						run: (*parser).callonPoolSpec12,
						expr: &labeledExpr{
							pos:   position{line: 474, col: 5, offset: 14080},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 474, col: 10, offset: 14085},
								name: "PoolMeta",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolCommit",
			pos:  position{line: 478, col: 1, offset: 14186},
			expr: &actionExpr{
				pos: position{line: 479, col: 5, offset: 14201},
				run: (*parser).callonPoolCommit1,
				expr: &seqExpr{
					pos: position{line: 479, col: 5, offset: 14201},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 479, col: 5, offset: 14201},
							val:        "@",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 479, col: 9, offset: 14205},
							label: "commit",
							expr: &ruleRefExpr{
								pos:  position{line: 479, col: 16, offset: 14212},
								name: "PoolName",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolMeta",
			pos:  position{line: 481, col: 1, offset: 14245},
			expr: &actionExpr{
				pos: position{line: 482, col: 5, offset: 14258},
				run: (*parser).callonPoolMeta1,
				expr: &seqExpr{
					pos: position{line: 482, col: 5, offset: 14258},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 482, col: 5, offset: 14258},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 482, col: 9, offset: 14262},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 482, col: 14, offset: 14267},
								name: "PoolIdentifier",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolName",
			pos:  position{line: 484, col: 1, offset: 14304},
			expr: &choiceExpr{
				pos: position{line: 485, col: 5, offset: 14317},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 485, col: 5, offset: 14317},
						name: "PoolIdentifier",
					},
					&ruleRefExpr{
						pos:  position{line: 486, col: 5, offset: 14336},
						name: "KSUID",
					},
					&ruleRefExpr{
						pos:  position{line: 487, col: 5, offset: 14346},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "PoolIdentifier",
			pos:  position{line: 489, col: 1, offset: 14360},
			expr: &actionExpr{
				pos: position{line: 490, col: 5, offset: 14379},
				run: (*parser).callonPoolIdentifier1,
				expr: &seqExpr{
					pos: position{line: 490, col: 5, offset: 14379},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 490, col: 6, offset: 14380},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 490, col: 6, offset: 14380},
									name: "IdentifierStart",
								},
								&litMatcher{
									pos:        position{line: 490, col: 24, offset: 14398},
									val:        ".",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 490, col: 29, offset: 14403},
							expr: &choiceExpr{
								pos: position{line: 490, col: 30, offset: 14404},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 490, col: 30, offset: 14404},
										name: "IdentifierRest",
									},
									&litMatcher{
										pos:        position{line: 490, col: 47, offset: 14421},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LayoutArg",
			pos:  position{line: 492, col: 1, offset: 14460},
			expr: &actionExpr{
				pos: position{line: 493, col: 5, offset: 14474},
				run: (*parser).callonLayoutArg1,
				expr: &seqExpr{
					pos: position{line: 493, col: 5, offset: 14474},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 493, col: 5, offset: 14474},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 493, col: 7, offset: 14476},
							val:        "order",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 493, col: 15, offset: 14484},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 493, col: 17, offset: 14486},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 493, col: 22, offset: 14491},
								name: "FieldExprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 493, col: 33, offset: 14502},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 493, col: 39, offset: 14508},
								name: "OrderSuffix",
							},
						},
					},
				},
			},
		},
		{
			name: "FormatArg",
			pos:  position{line: 497, col: 1, offset: 14618},
			expr: &actionExpr{
				pos: position{line: 498, col: 5, offset: 14632},
				run: (*parser).callonFormatArg1,
				expr: &seqExpr{
					pos: position{line: 498, col: 5, offset: 14632},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 498, col: 5, offset: 14632},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 498, col: 7, offset: 14634},
							val:        "format",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 498, col: 16, offset: 14643},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 498, col: 18, offset: 14645},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 498, col: 22, offset: 14649},
								name: "IdentifierName",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderSuffix",
			pos:  position{line: 500, col: 1, offset: 14685},
			expr: &choiceExpr{
				pos: position{line: 501, col: 5, offset: 14701},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 501, col: 5, offset: 14701},
						run: (*parser).callonOrderSuffix2,
						expr: &litMatcher{
							pos:        position{line: 501, col: 5, offset: 14701},
							val:        ":asc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 502, col: 5, offset: 14735},
						run: (*parser).callonOrderSuffix4,
						expr: &litMatcher{
							pos:        position{line: 502, col: 5, offset: 14735},
							val:        ":desc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 503, col: 5, offset: 14771},
						run: (*parser).callonOrderSuffix6,
						expr: &litMatcher{
							pos:        position{line: 503, col: 5, offset: 14771},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OrderArg",
			pos:  position{line: 505, col: 1, offset: 14797},
			expr: &choiceExpr{
				pos: position{line: 506, col: 5, offset: 14810},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 506, col: 5, offset: 14810},
						run: (*parser).callonOrderArg2,
						expr: &seqExpr{
							pos: position{line: 506, col: 5, offset: 14810},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 506, col: 5, offset: 14810},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 506, col: 7, offset: 14812},
									val:        "order",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 506, col: 15, offset: 14820},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 506, col: 17, offset: 14822},
									val:        "asc",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 507, col: 5, offset: 14855},
						run: (*parser).callonOrderArg8,
						expr: &seqExpr{
							pos: position{line: 507, col: 5, offset: 14855},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 507, col: 5, offset: 14855},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 507, col: 7, offset: 14857},
									val:        "order",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 507, col: 15, offset: 14865},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 507, col: 17, offset: 14867},
									val:        "desc",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassProc",
			pos:  position{line: 509, col: 1, offset: 14899},
			expr: &actionExpr{
				pos: position{line: 510, col: 5, offset: 14912},
				run: (*parser).callonPassProc1,
				expr: &litMatcher{
					pos:        position{line: 510, col: 5, offset: 14912},
					val:        "pass",
					ignoreCase: false,
				},
			},
		},
		{
			name: "ExplodeProc",
			pos:  position{line: 516, col: 1, offset: 15106},
			expr: &actionExpr{
				pos: position{line: 517, col: 5, offset: 15122},
				run: (*parser).callonExplodeProc1,
				expr: &seqExpr{
					pos: position{line: 517, col: 5, offset: 15122},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 517, col: 5, offset: 15122},
							val:        "explode",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 517, col: 15, offset: 15132},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 517, col: 17, offset: 15134},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 517, col: 22, offset: 15139},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 517, col: 28, offset: 15145},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 517, col: 32, offset: 15149},
								name: "TypeArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 517, col: 40, offset: 15157},
							label: "as",
							expr: &zeroOrOneExpr{
								pos: position{line: 517, col: 43, offset: 15160},
								expr: &ruleRefExpr{
									pos:  position{line: 517, col: 43, offset: 15160},
									name: "AsArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MergeProc",
			pos:  position{line: 521, col: 1, offset: 15272},
			expr: &actionExpr{
				pos: position{line: 522, col: 5, offset: 15286},
				run: (*parser).callonMergeProc1,
				expr: &seqExpr{
					pos: position{line: 522, col: 5, offset: 15286},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 522, col: 5, offset: 15286},
							val:        "merge",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 522, col: 13, offset: 15294},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 522, col: 15, offset: 15296},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 522, col: 21, offset: 15302},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "OverProc",
			pos:  position{line: 526, col: 1, offset: 15385},
			expr: &choiceExpr{
				pos: position{line: 527, col: 5, offset: 15398},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 527, col: 5, offset: 15398},
						run: (*parser).callonOverProc2,
						expr: &labeledExpr{
							pos:   position{line: 527, col: 5, offset: 15398},
							label: "over",
							expr: &ruleRefExpr{
								pos:  position{line: 527, col: 10, offset: 15403},
								name: "ScopedOver",
							},
						},
					},
					&actionExpr{
						pos: position{line: 530, col: 5, offset: 15508},
						run: (*parser).callonOverProc5,
						expr: &seqExpr{
							pos: position{line: 530, col: 5, offset: 15508},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 530, col: 5, offset: 15508},
									val:        "over",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 530, col: 12, offset: 15515},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 530, col: 14, offset: 15517},
									label: "exprs",
									expr: &ruleRefExpr{
										pos:  position{line: 530, col: 20, offset: 15523},
										name: "Exprs",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ScopedOver",
			pos:  position{line: 534, col: 1, offset: 15631},
			expr: &actionExpr{
				pos: position{line: 535, col: 5, offset: 15646},
				run: (*parser).callonScopedOver1,
				expr: &seqExpr{
					pos: position{line: 535, col: 5, offset: 15646},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 535, col: 5, offset: 15646},
							val:        "over",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 535, col: 12, offset: 15653},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 535, col: 14, offset: 15655},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 535, col: 20, offset: 15661},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 535, col: 26, offset: 15667},
							label: "as",
							expr: &ruleRefExpr{
								pos:  position{line: 535, col: 29, offset: 15670},
								name: "As",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 535, col: 32, offset: 15673},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 535, col: 35, offset: 15676},
							label: "scope",
							expr: &ruleRefExpr{
								pos:  position{line: 535, col: 41, offset: 15682},
								name: "Scope",
							},
						},
					},
				},
			},
		},
		{
			name: "OverWith",
			pos:  position{line: 539, col: 1, offset: 15792},
			expr: &actionExpr{
				pos: position{line: 540, col: 5, offset: 15805},
				run: (*parser).callonOverWith1,
				expr: &seqExpr{
					pos: position{line: 540, col: 5, offset: 15805},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 540, col: 5, offset: 15805},
							val:        "over",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 540, col: 12, offset: 15812},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 540, col: 14, offset: 15814},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 540, col: 20, offset: 15820},
								name: "Exprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 540, col: 26, offset: 15826},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 540, col: 28, offset: 15828},
							val:        "with",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 540, col: 35, offset: 15835},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 540, col: 37, offset: 15837},
							label: "locals",
							expr: &ruleRefExpr{
								pos:  position{line: 540, col: 44, offset: 15844},
								name: "LetAssignments",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 540, col: 59, offset: 15859},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 540, col: 62, offset: 15862},
							label: "scope",
							expr: &ruleRefExpr{
								pos:  position{line: 540, col: 68, offset: 15868},
								name: "Scope",
							},
						},
					},
				},
			},
		},
		{
			name: "As",
			pos:  position{line: 544, col: 1, offset: 16040},
			expr: &choiceExpr{
				pos: position{line: 545, col: 5, offset: 16047},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 545, col: 5, offset: 16047},
						run: (*parser).callonAs2,
						expr: &seqExpr{
							pos: position{line: 545, col: 5, offset: 16047},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 545, col: 5, offset: 16047},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 545, col: 7, offset: 16049},
									val:        "as",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 545, col: 12, offset: 16054},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 545, col: 14, offset: 16056},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 545, col: 17, offset: 16059},
										name: "IdentifierName",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 546, col: 5, offset: 16097},
						run: (*parser).callonAs9,
						expr: &litMatcher{
							pos:        position{line: 546, col: 5, offset: 16097},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LetProc",
			pos:  position{line: 548, col: 1, offset: 16120},
			expr: &choiceExpr{
				pos: position{line: 549, col: 5, offset: 16132},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 549, col: 5, offset: 16132},
						run: (*parser).callonLetProc2,
						expr: &seqExpr{
							pos: position{line: 549, col: 5, offset: 16132},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 549, col: 5, offset: 16132},
									val:        "let",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 549, col: 11, offset: 16138},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 549, col: 13, offset: 16140},
									label: "locals",
									expr: &ruleRefExpr{
										pos:  position{line: 549, col: 20, offset: 16147},
										name: "LetAssignments",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 549, col: 35, offset: 16162},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 549, col: 38, offset: 16165},
									label: "over",
									expr: &ruleRefExpr{
										pos:  position{line: 549, col: 43, offset: 16170},
										name: "ScopedOver",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 552, col: 5, offset: 16278},
						name: "OverWith",
					},
				},
			},
		},
		{
			name: "Scope",
			pos:  position{line: 554, col: 1, offset: 16288},
			expr: &actionExpr{
				pos: position{line: 554, col: 9, offset: 16296},
				run: (*parser).callonScope1,
				expr: &seqExpr{
					pos: position{line: 554, col: 9, offset: 16296},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 554, col: 9, offset: 16296},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 554, col: 14, offset: 16301},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 554, col: 17, offset: 16304},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 554, col: 21, offset: 16308},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 554, col: 24, offset: 16311},
							label: "seq",
							expr: &ruleRefExpr{
								pos:  position{line: 554, col: 28, offset: 16315},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 554, col: 39, offset: 16326},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 554, col: 42, offset: 16329},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LetAssignments",
			pos:  position{line: 556, col: 1, offset: 16354},
			expr: &actionExpr{
				pos: position{line: 557, col: 5, offset: 16373},
				run: (*parser).callonLetAssignments1,
				expr: &seqExpr{
					pos: position{line: 557, col: 5, offset: 16373},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 557, col: 5, offset: 16373},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 557, col: 11, offset: 16379},
								name: "LetAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 557, col: 25, offset: 16393},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 557, col: 30, offset: 16398},
								expr: &actionExpr{
									pos: position{line: 557, col: 31, offset: 16399},
									run: (*parser).callonLetAssignments7,
									expr: &seqExpr{
										pos: position{line: 557, col: 31, offset: 16399},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 557, col: 31, offset: 16399},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 557, col: 34, offset: 16402},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 557, col: 38, offset: 16406},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 557, col: 41, offset: 16409},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 557, col: 43, offset: 16411},
													name: "LetAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LetAssignment",
			pos:  position{line: 561, col: 1, offset: 16529},
			expr: &choiceExpr{
				pos: position{line: 562, col: 5, offset: 16547},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 562, col: 5, offset: 16547},
						run: (*parser).callonLetAssignment2,
						expr: &seqExpr{
							pos: position{line: 562, col: 5, offset: 16547},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 562, col: 5, offset: 16547},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 562, col: 8, offset: 16550},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 562, col: 23, offset: 16565},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 562, col: 26, offset: 16568},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 562, col: 30, offset: 16572},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 562, col: 33, offset: 16575},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 562, col: 38, offset: 16580},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 565, col: 5, offset: 16662},
						run: (*parser).callonLetAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 565, col: 5, offset: 16662},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 565, col: 8, offset: 16665},
								name: "IdentifierName",
							},
						},
					},
				},
			},
		},
		{
			name: "YieldProc",
			pos:  position{line: 569, col: 1, offset: 16795},
			expr: &actionExpr{
				pos: position{line: 570, col: 5, offset: 16809},
				run: (*parser).callonYieldProc1,
				expr: &seqExpr{
					pos: position{line: 570, col: 5, offset: 16809},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 570, col: 5, offset: 16809},
							val:        "yield",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 570, col: 13, offset: 16817},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 570, col: 15, offset: 16819},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 570, col: 21, offset: 16825},
								name: "Exprs",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeArg",
			pos:  position{line: 574, col: 1, offset: 16909},
			expr: &actionExpr{
				pos: position{line: 575, col: 5, offset: 16921},
				run: (*parser).callonTypeArg1,
				expr: &seqExpr{
					pos: position{line: 575, col: 5, offset: 16921},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 575, col: 5, offset: 16921},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 575, col: 7, offset: 16923},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 575, col: 10, offset: 16926},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 575, col: 12, offset: 16928},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 575, col: 16, offset: 16932},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "AsArg",
			pos:  position{line: 577, col: 1, offset: 16957},
			expr: &actionExpr{
				pos: position{line: 578, col: 5, offset: 16967},
				run: (*parser).callonAsArg1,
				expr: &seqExpr{
					pos: position{line: 578, col: 5, offset: 16967},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 578, col: 5, offset: 16967},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 578, col: 7, offset: 16969},
							name: "AS",
						},
						&ruleRefExpr{
							pos:  position{line: 578, col: 10, offset: 16972},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 578, col: 12, offset: 16974},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 578, col: 16, offset: 16978},
								name: "Lval",
							},
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 582, col: 1, offset: 17029},
			expr: &ruleRefExpr{
				pos:  position{line: 582, col: 8, offset: 17036},
				name: "DerefExpr",
			},
		},
		{
			name: "Lvals",
			pos:  position{line: 584, col: 1, offset: 17047},
			expr: &actionExpr{
				pos: position{line: 585, col: 5, offset: 17057},
				run: (*parser).callonLvals1,
				expr: &seqExpr{
					pos: position{line: 585, col: 5, offset: 17057},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 585, col: 5, offset: 17057},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 585, col: 11, offset: 17063},
								name: "Lval",
							},
						},
						&labeledExpr{
							pos:   position{line: 585, col: 16, offset: 17068},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 585, col: 21, offset: 17073},
								expr: &actionExpr{
									pos: position{line: 585, col: 22, offset: 17074},
									run: (*parser).callonLvals7,
									expr: &seqExpr{
										pos: position{line: 585, col: 22, offset: 17074},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 585, col: 22, offset: 17074},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 585, col: 25, offset: 17077},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 585, col: 29, offset: 17081},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 585, col: 32, offset: 17084},
												label: "lval",
												expr: &ruleRefExpr{
													pos:  position{line: 585, col: 37, offset: 17089},
													name: "Lval",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 589, col: 1, offset: 17201},
			expr: &ruleRefExpr{
				pos:  position{line: 589, col: 13, offset: 17213},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 591, col: 1, offset: 17219},
			expr: &actionExpr{
				pos: position{line: 592, col: 5, offset: 17234},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 592, col: 5, offset: 17234},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 592, col: 5, offset: 17234},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 592, col: 11, offset: 17240},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 592, col: 21, offset: 17250},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 592, col: 26, offset: 17255},
								expr: &seqExpr{
									pos: position{line: 592, col: 27, offset: 17256},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 592, col: 27, offset: 17256},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 592, col: 30, offset: 17259},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 592, col: 34, offset: 17263},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 592, col: 37, offset: 17266},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignments",
			pos:  position{line: 602, col: 1, offset: 17465},
			expr: &actionExpr{
				pos: position{line: 603, col: 5, offset: 17481},
				run: (*parser).callonAssignments1,
				expr: &seqExpr{
					pos: position{line: 603, col: 5, offset: 17481},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 603, col: 5, offset: 17481},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 603, col: 11, offset: 17487},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 603, col: 22, offset: 17498},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 603, col: 27, offset: 17503},
								expr: &actionExpr{
									pos: position{line: 603, col: 28, offset: 17504},
									run: (*parser).callonAssignments7,
									expr: &seqExpr{
										pos: position{line: 603, col: 28, offset: 17504},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 603, col: 28, offset: 17504},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 603, col: 31, offset: 17507},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 603, col: 35, offset: 17511},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 603, col: 38, offset: 17514},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 603, col: 40, offset: 17516},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 607, col: 1, offset: 17627},
			expr: &actionExpr{
				pos: position{line: 608, col: 5, offset: 17642},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 608, col: 5, offset: 17642},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 608, col: 5, offset: 17642},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 608, col: 9, offset: 17646},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 608, col: 14, offset: 17651},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 608, col: 17, offset: 17654},
							val:        ":=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 608, col: 22, offset: 17659},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 608, col: 25, offset: 17662},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 608, col: 29, offset: 17666},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 610, col: 1, offset: 17757},
			expr: &ruleRefExpr{
				pos:  position{line: 610, col: 8, offset: 17764},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 612, col: 1, offset: 17781},
			expr: &choiceExpr{
				pos: position{line: 613, col: 5, offset: 17801},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 613, col: 5, offset: 17801},
						run: (*parser).callonConditionalExpr2,
						expr: &seqExpr{
							pos: position{line: 613, col: 5, offset: 17801},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 613, col: 5, offset: 17801},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 613, col: 15, offset: 17811},
										name: "LogicalOrExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 613, col: 29, offset: 17825},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 613, col: 32, offset: 17828},
									val:        "?",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 613, col: 36, offset: 17832},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 613, col: 39, offset: 17835},
									label: "thenClause",
									expr: &ruleRefExpr{
										pos:  position{line: 613, col: 50, offset: 17846},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 613, col: 55, offset: 17851},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 613, col: 58, offset: 17854},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 613, col: 62, offset: 17858},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 613, col: 65, offset: 17861},
									label: "elseClause",
									expr: &ruleRefExpr{
										pos:  position{line: 613, col: 76, offset: 17872},
										name: "Expr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 616, col: 5, offset: 18012},
						name: "LogicalOrExpr",
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 618, col: 1, offset: 18027},
			expr: &actionExpr{
				pos: position{line: 619, col: 5, offset: 18045},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 619, col: 5, offset: 18045},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 619, col: 5, offset: 18045},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 619, col: 11, offset: 18051},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 620, col: 5, offset: 18070},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 620, col: 10, offset: 18075},
								expr: &actionExpr{
									pos: position{line: 620, col: 11, offset: 18076},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 620, col: 11, offset: 18076},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 620, col: 11, offset: 18076},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 620, col: 14, offset: 18079},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 620, col: 17, offset: 18082},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 620, col: 25, offset: 18090},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 620, col: 28, offset: 18093},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 620, col: 33, offset: 18098},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 624, col: 1, offset: 18216},
			expr: &actionExpr{
				pos: position{line: 625, col: 5, offset: 18235},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 625, col: 5, offset: 18235},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 625, col: 5, offset: 18235},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 625, col: 11, offset: 18241},
								name: "EqualityCompareExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 626, col: 5, offset: 18265},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 626, col: 10, offset: 18270},
								expr: &actionExpr{
									pos: position{line: 626, col: 11, offset: 18271},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 626, col: 11, offset: 18271},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 626, col: 11, offset: 18271},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 626, col: 14, offset: 18274},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 626, col: 17, offset: 18277},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 626, col: 26, offset: 18286},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 626, col: 29, offset: 18289},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 626, col: 34, offset: 18294},
													name: "EqualityCompareExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityCompareExpr",
			pos:  position{line: 630, col: 1, offset: 18417},
			expr: &choiceExpr{
				pos: position{line: 631, col: 5, offset: 18441},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 631, col: 5, offset: 18441},
						name: "PatternMatch",
					},
					&actionExpr{
						pos: position{line: 632, col: 5, offset: 18458},
						run: (*parser).callonEqualityCompareExpr3,
						expr: &seqExpr{
							pos: position{line: 632, col: 5, offset: 18458},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 632, col: 5, offset: 18458},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 632, col: 11, offset: 18464},
										name: "RelativeExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 633, col: 5, offset: 18481},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 633, col: 10, offset: 18486},
										expr: &actionExpr{
											pos: position{line: 633, col: 11, offset: 18487},
											run: (*parser).callonEqualityCompareExpr9,
											expr: &seqExpr{
												pos: position{line: 633, col: 11, offset: 18487},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 633, col: 11, offset: 18487},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 633, col: 14, offset: 18490},
														label: "comp",
														expr: &ruleRefExpr{
															pos:  position{line: 633, col: 19, offset: 18495},
															name: "EqualityComparator",
														},
													},
													&ruleRefExpr{
														pos:  position{line: 633, col: 38, offset: 18514},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 633, col: 41, offset: 18517},
														label: "expr",
														expr: &ruleRefExpr{
															pos:  position{line: 633, col: 46, offset: 18522},
															name: "RelativeExpr",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityOperator",
			pos:  position{line: 637, col: 1, offset: 18640},
			expr: &choiceExpr{
				pos: position{line: 638, col: 5, offset: 18661},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 638, col: 5, offset: 18661},
						run: (*parser).callonEqualityOperator2,
						expr: &litMatcher{
							pos:        position{line: 638, col: 5, offset: 18661},
							val:        "==",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 639, col: 5, offset: 18690},
						run: (*parser).callonEqualityOperator4,
						expr: &litMatcher{
							pos:        position{line: 639, col: 5, offset: 18690},
							val:        "!=",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "EqualityComparator",
			pos:  position{line: 641, col: 1, offset: 18727},
			expr: &choiceExpr{
				pos: position{line: 642, col: 5, offset: 18750},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 642, col: 5, offset: 18750},
						name: "EqualityOperator",
					},
					&actionExpr{
						pos: position{line: 643, col: 5, offset: 18771},
						run: (*parser).callonEqualityComparator3,
						expr: &seqExpr{
							pos: position{line: 643, col: 5, offset: 18771},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 643, col: 5, offset: 18771},
									val:        "in",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 643, col: 10, offset: 18776},
									expr: &ruleRefExpr{
										pos:  position{line: 643, col: 11, offset: 18777},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeExpr",
			pos:  position{line: 645, col: 1, offset: 18824},
			expr: &actionExpr{
				pos: position{line: 646, col: 5, offset: 18841},
				run: (*parser).callonRelativeExpr1,
				expr: &seqExpr{
					pos: position{line: 646, col: 5, offset: 18841},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 646, col: 5, offset: 18841},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 646, col: 11, offset: 18847},
								name: "AdditiveExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 647, col: 5, offset: 18864},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 647, col: 10, offset: 18869},
								expr: &actionExpr{
									pos: position{line: 647, col: 11, offset: 18870},
									run: (*parser).callonRelativeExpr7,
									expr: &seqExpr{
										pos: position{line: 647, col: 11, offset: 18870},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 647, col: 11, offset: 18870},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 647, col: 14, offset: 18873},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 647, col: 17, offset: 18876},
													name: "RelativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 647, col: 34, offset: 18893},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 647, col: 37, offset: 18896},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 647, col: 42, offset: 18901},
													name: "AdditiveExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeOperator",
			pos:  position{line: 651, col: 1, offset: 19017},
			expr: &actionExpr{
				pos: position{line: 651, col: 20, offset: 19036},
				run: (*parser).callonRelativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 651, col: 21, offset: 19037},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 651, col: 21, offset: 19037},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 651, col: 28, offset: 19044},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 651, col: 34, offset: 19050},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 651, col: 41, offset: 19057},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 653, col: 1, offset: 19094},
			expr: &actionExpr{
				pos: position{line: 654, col: 5, offset: 19111},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 654, col: 5, offset: 19111},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 654, col: 5, offset: 19111},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 654, col: 11, offset: 19117},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 655, col: 5, offset: 19140},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 655, col: 10, offset: 19145},
								expr: &actionExpr{
									pos: position{line: 655, col: 11, offset: 19146},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 655, col: 11, offset: 19146},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 655, col: 11, offset: 19146},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 655, col: 14, offset: 19149},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 655, col: 17, offset: 19152},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 655, col: 34, offset: 19169},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 655, col: 37, offset: 19172},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 655, col: 42, offset: 19177},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 659, col: 1, offset: 19299},
			expr: &actionExpr{
				pos: position{line: 659, col: 20, offset: 19318},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 659, col: 21, offset: 19319},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 659, col: 21, offset: 19319},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 659, col: 27, offset: 19325},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 661, col: 1, offset: 19362},
			expr: &actionExpr{
				pos: position{line: 662, col: 5, offset: 19385},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 662, col: 5, offset: 19385},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 662, col: 5, offset: 19385},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 662, col: 11, offset: 19391},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 663, col: 5, offset: 19403},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 663, col: 10, offset: 19408},
								expr: &actionExpr{
									pos: position{line: 663, col: 11, offset: 19409},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 663, col: 11, offset: 19409},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 663, col: 11, offset: 19409},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 663, col: 14, offset: 19412},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 663, col: 17, offset: 19415},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 663, col: 40, offset: 19438},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 663, col: 43, offset: 19441},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 663, col: 48, offset: 19446},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 667, col: 1, offset: 19557},
			expr: &actionExpr{
				pos: position{line: 667, col: 26, offset: 19582},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 667, col: 27, offset: 19583},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 667, col: 27, offset: 19583},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 667, col: 33, offset: 19589},
							val:        "/",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 667, col: 39, offset: 19595},
							val:        "%",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 669, col: 1, offset: 19632},
			expr: &choiceExpr{
				pos: position{line: 670, col: 5, offset: 19644},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 670, col: 5, offset: 19644},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 670, col: 5, offset: 19644},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 670, col: 5, offset: 19644},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 670, col: 9, offset: 19648},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 670, col: 12, offset: 19651},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 670, col: 14, offset: 19653},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 673, col: 5, offset: 19762},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 675, col: 1, offset: 19772},
			expr: &choiceExpr{
				pos: position{line: 676, col: 5, offset: 19785},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 676, col: 5, offset: 19785},
						name: "MatchExpr",
					},
					&actionExpr{
						pos: position{line: 677, col: 5, offset: 19799},
						run: (*parser).callonFuncExpr3,
						expr: &seqExpr{
							pos: position{line: 677, col: 5, offset: 19799},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 677, col: 5, offset: 19799},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 677, col: 11, offset: 19805},
										name: "Cast",
									},
								},
								&labeledExpr{
									pos:   position{line: 677, col: 16, offset: 19810},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 677, col: 21, offset: 19815},
										expr: &ruleRefExpr{
											pos:  position{line: 677, col: 22, offset: 19816},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 680, col: 5, offset: 19887},
						run: (*parser).callonFuncExpr10,
						expr: &seqExpr{
							pos: position{line: 680, col: 5, offset: 19887},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 680, col: 5, offset: 19887},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 680, col: 11, offset: 19893},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 680, col: 20, offset: 19902},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 680, col: 25, offset: 19907},
										expr: &ruleRefExpr{
											pos:  position{line: 680, col: 26, offset: 19908},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 683, col: 5, offset: 19979},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 684, col: 5, offset: 19993},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FuncGuard",
			pos:  position{line: 686, col: 1, offset: 20002},
			expr: &seqExpr{
				pos: position{line: 686, col: 13, offset: 20014},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 686, col: 13, offset: 20014},
						name: "NotFuncs",
					},
					&ruleRefExpr{
						pos:  position{line: 686, col: 22, offset: 20023},
						name: "__",
					},
					&litMatcher{
						pos:        position{line: 686, col: 25, offset: 20026},
						val:        "(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "NotFuncs",
			pos:  position{line: 688, col: 1, offset: 20031},
			expr: &choiceExpr{
				pos: position{line: 689, col: 5, offset: 20044},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 689, col: 5, offset: 20044},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 690, col: 5, offset: 20054},
						val:        "search",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 691, col: 5, offset: 20067},
						val:        "select",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 692, col: 5, offset: 20080},
						val:        "type",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "MatchExpr",
			pos:  position{line: 694, col: 1, offset: 20088},
			expr: &actionExpr{
				pos: position{line: 695, col: 5, offset: 20102},
				run: (*parser).callonMatchExpr1,
				expr: &seqExpr{
					pos: position{line: 695, col: 5, offset: 20102},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 695, col: 5, offset: 20102},
							val:        "search",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 695, col: 14, offset: 20111},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 695, col: 17, offset: 20114},
							val:        "(",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 695, col: 21, offset: 20118},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 695, col: 26, offset: 20123},
								name: "SearchBoolean",
							},
						},
						&litMatcher{
							pos:        position{line: 695, col: 40, offset: 20137},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Cast",
			pos:  position{line: 697, col: 1, offset: 20163},
			expr: &actionExpr{
				pos: position{line: 698, col: 5, offset: 20172},
				run: (*parser).callonCast1,
				expr: &seqExpr{
					pos: position{line: 698, col: 5, offset: 20172},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 698, col: 5, offset: 20172},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 698, col: 9, offset: 20176},
								name: "CastType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 698, col: 18, offset: 20185},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 698, col: 21, offset: 20188},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 698, col: 25, offset: 20192},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 698, col: 28, offset: 20195},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 698, col: 33, offset: 20200},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 698, col: 38, offset: 20205},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 698, col: 41, offset: 20208},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 702, col: 1, offset: 20305},
			expr: &actionExpr{
				pos: position{line: 703, col: 5, offset: 20318},
				run: (*parser).callonFunction1,
				expr: &seqExpr{
					pos: position{line: 703, col: 5, offset: 20318},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 703, col: 5, offset: 20318},
							expr: &ruleRefExpr{
								pos:  position{line: 703, col: 6, offset: 20319},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 703, col: 16, offset: 20329},
							label: "fn",
							expr: &ruleRefExpr{
								pos:  position{line: 703, col: 19, offset: 20332},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 703, col: 34, offset: 20347},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 703, col: 37, offset: 20350},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 703, col: 41, offset: 20354},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 703, col: 44, offset: 20357},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 703, col: 49, offset: 20362},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 703, col: 63, offset: 20376},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 703, col: 66, offset: 20379},
							val:        ")",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 703, col: 70, offset: 20383},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 703, col: 76, offset: 20389},
								expr: &ruleRefExpr{
									pos:  position{line: 703, col: 76, offset: 20389},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OptionalExprs",
			pos:  position{line: 707, col: 1, offset: 20510},
			expr: &choiceExpr{
				pos: position{line: 708, col: 5, offset: 20528},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 708, col: 5, offset: 20528},
						name: "Exprs",
					},
					&actionExpr{
						pos: position{line: 709, col: 5, offset: 20538},
						run: (*parser).callonOptionalExprs3,
						expr: &ruleRefExpr{
							pos:  position{line: 709, col: 5, offset: 20538},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 711, col: 1, offset: 20574},
			expr: &actionExpr{
				pos: position{line: 712, col: 5, offset: 20584},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 712, col: 5, offset: 20584},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 712, col: 5, offset: 20584},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 712, col: 11, offset: 20590},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 712, col: 16, offset: 20595},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 712, col: 21, offset: 20600},
								expr: &actionExpr{
									pos: position{line: 712, col: 22, offset: 20601},
									run: (*parser).callonExprs7,
									expr: &seqExpr{
										pos: position{line: 712, col: 22, offset: 20601},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 712, col: 22, offset: 20601},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 712, col: 25, offset: 20604},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 712, col: 29, offset: 20608},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 712, col: 32, offset: 20611},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 712, col: 34, offset: 20613},
													name: "Expr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 716, col: 1, offset: 20722},
			expr: &actionExpr{
				pos: position{line: 717, col: 5, offset: 20736},
				run: (*parser).callonDerefExpr1,
				expr: &seqExpr{
					pos: position{line: 717, col: 5, offset: 20736},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 717, col: 5, offset: 20736},
							expr: &ruleRefExpr{
								pos:  position{line: 717, col: 6, offset: 20737},
								name: "IP6",
							},
						},
						&labeledExpr{
							pos:   position{line: 717, col: 10, offset: 20741},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 717, col: 16, offset: 20747},
								name: "Identifier",
							},
						},
						&labeledExpr{
							pos:   position{line: 717, col: 27, offset: 20758},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 717, col: 32, offset: 20763},
								expr: &ruleRefExpr{
									pos:  position{line: 717, col: 33, offset: 20764},
									name: "Deref",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 721, col: 1, offset: 20832},
			expr: &choiceExpr{
				pos: position{line: 722, col: 5, offset: 20842},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 722, col: 5, offset: 20842},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 722, col: 5, offset: 20842},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 722, col: 5, offset: 20842},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 722, col: 9, offset: 20846},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 722, col: 14, offset: 20851},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 722, col: 27, offset: 20864},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 722, col: 30, offset: 20867},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 722, col: 34, offset: 20871},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 722, col: 37, offset: 20874},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 722, col: 40, offset: 20877},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 722, col: 53, offset: 20890},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 728, col: 5, offset: 21061},
						run: (*parser).callonDeref13,
						expr: &seqExpr{
							pos: position{line: 728, col: 5, offset: 21061},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 728, col: 5, offset: 21061},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 728, col: 9, offset: 21065},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 728, col: 12, offset: 21068},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 728, col: 16, offset: 21072},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 728, col: 19, offset: 21075},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 728, col: 22, offset: 21078},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 728, col: 35, offset: 21091},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 734, col: 5, offset: 21262},
						run: (*parser).callonDeref22,
						expr: &seqExpr{
							pos: position{line: 734, col: 5, offset: 21262},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 734, col: 5, offset: 21262},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 734, col: 9, offset: 21266},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 734, col: 14, offset: 21271},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 734, col: 27, offset: 21284},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 734, col: 30, offset: 21287},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 734, col: 34, offset: 21291},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 734, col: 37, offset: 21294},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 740, col: 5, offset: 21467},
						run: (*parser).callonDeref31,
						expr: &seqExpr{
							pos: position{line: 740, col: 5, offset: 21467},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 740, col: 5, offset: 21467},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 740, col: 9, offset: 21471},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 740, col: 14, offset: 21476},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 740, col: 19, offset: 21481},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 741, col: 5, offset: 21530},
						run: (*parser).callonDeref37,
						expr: &seqExpr{
							pos: position{line: 741, col: 5, offset: 21530},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 741, col: 5, offset: 21530},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 741, col: 9, offset: 21534},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 741, col: 12, offset: 21537},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 743, col: 1, offset: 21588},
			expr: &choiceExpr{
				pos: position{line: 744, col: 5, offset: 21600},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 744, col: 5, offset: 21600},
						name: "Record",
					},
					&ruleRefExpr{
						pos:  position{line: 745, col: 5, offset: 21611},
						name: "Array",
					},
					&ruleRefExpr{
						pos:  position{line: 746, col: 5, offset: 21621},
						name: "Set",
					},
					&ruleRefExpr{
						pos:  position{line: 747, col: 5, offset: 21629},
						name: "Map",
					},
					&ruleRefExpr{
						pos:  position{line: 748, col: 5, offset: 21637},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 749, col: 5, offset: 21649},
						run: (*parser).callonPrimary7,
						expr: &seqExpr{
							pos: position{line: 749, col: 5, offset: 21649},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 749, col: 5, offset: 21649},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 749, col: 9, offset: 21653},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 749, col: 12, offset: 21656},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 749, col: 17, offset: 21661},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 749, col: 22, offset: 21666},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 749, col: 25, offset: 21669},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Record",
			pos:  position{line: 751, col: 1, offset: 21695},
			expr: &actionExpr{
				pos: position{line: 752, col: 5, offset: 21706},
				run: (*parser).callonRecord1,
				expr: &seqExpr{
					pos: position{line: 752, col: 5, offset: 21706},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 752, col: 5, offset: 21706},
							val:        "{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 752, col: 9, offset: 21710},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 752, col: 12, offset: 21713},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 752, col: 18, offset: 21719},
								name: "RecordElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 752, col: 30, offset: 21731},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 752, col: 33, offset: 21734},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RecordElems",
			pos:  position{line: 756, col: 1, offset: 21824},
			expr: &choiceExpr{
				pos: position{line: 757, col: 5, offset: 21840},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 757, col: 5, offset: 21840},
						run: (*parser).callonRecordElems2,
						expr: &seqExpr{
							pos: position{line: 757, col: 5, offset: 21840},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 757, col: 5, offset: 21840},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 757, col: 11, offset: 21846},
										name: "RecordElem",
									},
								},
								&labeledExpr{
									pos:   position{line: 757, col: 22, offset: 21857},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 757, col: 27, offset: 21862},
										expr: &ruleRefExpr{
											pos:  position{line: 757, col: 27, offset: 21862},
											name: "RecordElemTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 760, col: 5, offset: 21961},
						run: (*parser).callonRecordElems9,
						expr: &ruleRefExpr{
							pos:  position{line: 760, col: 5, offset: 21961},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "RecordElemTail",
			pos:  position{line: 762, col: 1, offset: 21997},
			expr: &actionExpr{
				pos: position{line: 762, col: 18, offset: 22014},
				run: (*parser).callonRecordElemTail1,
				expr: &seqExpr{
					pos: position{line: 762, col: 18, offset: 22014},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 762, col: 18, offset: 22014},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 762, col: 21, offset: 22017},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 762, col: 25, offset: 22021},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 762, col: 28, offset: 22024},
							label: "elem",
							expr: &ruleRefExpr{
								pos:  position{line: 762, col: 33, offset: 22029},
								name: "RecordElem",
							},
						},
					},
				},
			},
		},
		{
			name: "RecordElem",
			pos:  position{line: 764, col: 1, offset: 22062},
			expr: &choiceExpr{
				pos: position{line: 765, col: 5, offset: 22077},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 765, col: 5, offset: 22077},
						name: "Spread",
					},
					&ruleRefExpr{
						pos:  position{line: 766, col: 5, offset: 22088},
						name: "Field",
					},
					&ruleRefExpr{
						pos:  position{line: 767, col: 5, offset: 22098},
						name: "Identifier",
					},
				},
			},
		},
		{
			name: "Spread",
			pos:  position{line: 769, col: 1, offset: 22110},
			expr: &actionExpr{
				pos: position{line: 770, col: 5, offset: 22121},
				run: (*parser).callonSpread1,
				expr: &seqExpr{
					pos: position{line: 770, col: 5, offset: 22121},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 770, col: 5, offset: 22121},
							val:        "...",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 770, col: 11, offset: 22127},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 770, col: 14, offset: 22130},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 770, col: 19, offset: 22135},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 774, col: 1, offset: 22221},
			expr: &actionExpr{
				pos: position{line: 775, col: 5, offset: 22231},
				run: (*parser).callonField1,
				expr: &seqExpr{
					pos: position{line: 775, col: 5, offset: 22231},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 775, col: 5, offset: 22231},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 775, col: 10, offset: 22236},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 775, col: 20, offset: 22246},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 775, col: 23, offset: 22249},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 775, col: 27, offset: 22253},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 775, col: 30, offset: 22256},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 775, col: 36, offset: 22262},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Array",
			pos:  position{line: 779, col: 1, offset: 22362},
			expr: &actionExpr{
				pos: position{line: 780, col: 5, offset: 22372},
				run: (*parser).callonArray1,
				expr: &seqExpr{
					pos: position{line: 780, col: 5, offset: 22372},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 780, col: 5, offset: 22372},
							val:        "[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 780, col: 9, offset: 22376},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 780, col: 12, offset: 22379},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 780, col: 18, offset: 22385},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 780, col: 32, offset: 22399},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 780, col: 35, offset: 22402},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Set",
			pos:  position{line: 784, col: 1, offset: 22492},
			expr: &actionExpr{
				pos: position{line: 785, col: 5, offset: 22500},
				run: (*parser).callonSet1,
				expr: &seqExpr{
					pos: position{line: 785, col: 5, offset: 22500},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 785, col: 5, offset: 22500},
							val:        "|[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 785, col: 10, offset: 22505},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 785, col: 13, offset: 22508},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 785, col: 19, offset: 22514},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 785, col: 33, offset: 22528},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 785, col: 36, offset: 22531},
							val:        "]|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Map",
			pos:  position{line: 789, col: 1, offset: 22620},
			expr: &actionExpr{
				pos: position{line: 790, col: 5, offset: 22628},
				run: (*parser).callonMap1,
				expr: &seqExpr{
					pos: position{line: 790, col: 5, offset: 22628},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 790, col: 5, offset: 22628},
							val:        "|{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 790, col: 10, offset: 22633},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 790, col: 13, offset: 22636},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 790, col: 19, offset: 22642},
								name: "Entries",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 790, col: 27, offset: 22650},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 790, col: 30, offset: 22653},
							val:        "}|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Entries",
			pos:  position{line: 794, col: 1, offset: 22744},
			expr: &choiceExpr{
				pos: position{line: 795, col: 5, offset: 22756},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 795, col: 5, offset: 22756},
						run: (*parser).callonEntries2,
						expr: &seqExpr{
							pos: position{line: 795, col: 5, offset: 22756},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 795, col: 5, offset: 22756},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 795, col: 11, offset: 22762},
										name: "Entry",
									},
								},
								&labeledExpr{
									pos:   position{line: 795, col: 17, offset: 22768},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 795, col: 22, offset: 22773},
										expr: &ruleRefExpr{
											pos:  position{line: 795, col: 22, offset: 22773},
											name: "EntryTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 798, col: 5, offset: 22867},
						run: (*parser).callonEntries9,
						expr: &ruleRefExpr{
							pos:  position{line: 798, col: 5, offset: 22867},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "EntryTail",
			pos:  position{line: 801, col: 1, offset: 22904},
			expr: &actionExpr{
				pos: position{line: 801, col: 13, offset: 22916},
				run: (*parser).callonEntryTail1,
				expr: &seqExpr{
					pos: position{line: 801, col: 13, offset: 22916},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 801, col: 13, offset: 22916},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 801, col: 16, offset: 22919},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 801, col: 20, offset: 22923},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 801, col: 23, offset: 22926},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 801, col: 25, offset: 22928},
								name: "Entry",
							},
						},
					},
				},
			},
		},
		{
			name: "Entry",
			pos:  position{line: 803, col: 1, offset: 22953},
			expr: &actionExpr{
				pos: position{line: 804, col: 5, offset: 22963},
				run: (*parser).callonEntry1,
				expr: &seqExpr{
					pos: position{line: 804, col: 5, offset: 22963},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 804, col: 5, offset: 22963},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 804, col: 9, offset: 22967},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 804, col: 14, offset: 22972},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 804, col: 17, offset: 22975},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 804, col: 21, offset: 22979},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 804, col: 24, offset: 22982},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 804, col: 30, offset: 22988},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLProc",
			pos:  position{line: 810, col: 1, offset: 23095},
			expr: &actionExpr{
				pos: position{line: 811, col: 5, offset: 23107},
				run: (*parser).callonSQLProc1,
				expr: &seqExpr{
					pos: position{line: 811, col: 5, offset: 23107},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 811, col: 5, offset: 23107},
							label: "selection",
							expr: &ruleRefExpr{
								pos:  position{line: 811, col: 15, offset: 23117},
								name: "SQLSelect",
							},
						},
						&labeledExpr{
							pos:   position{line: 812, col: 5, offset: 23131},
							label: "from",
							expr: &zeroOrOneExpr{
								pos: position{line: 812, col: 10, offset: 23136},
								expr: &ruleRefExpr{
									pos:  position{line: 812, col: 10, offset: 23136},
									name: "SQLFrom",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 813, col: 5, offset: 23149},
							label: "joins",
							expr: &zeroOrOneExpr{
								pos: position{line: 813, col: 11, offset: 23155},
								expr: &ruleRefExpr{
									pos:  position{line: 813, col: 11, offset: 23155},
									name: "SQLJoins",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 814, col: 5, offset: 23169},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 814, col: 11, offset: 23175},
								expr: &ruleRefExpr{
									pos:  position{line: 814, col: 11, offset: 23175},
									name: "SQLWhere",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 815, col: 5, offset: 23189},
							label: "groupby",
							expr: &zeroOrOneExpr{
								pos: position{line: 815, col: 13, offset: 23197},
								expr: &ruleRefExpr{
									pos:  position{line: 815, col: 13, offset: 23197},
									name: "SQLGroupBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 816, col: 5, offset: 23213},
							label: "having",
							expr: &zeroOrOneExpr{
								pos: position{line: 816, col: 12, offset: 23220},
								expr: &ruleRefExpr{
									pos:  position{line: 816, col: 12, offset: 23220},
									name: "SQLHaving",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 817, col: 5, offset: 23235},
							label: "orderby",
							expr: &zeroOrOneExpr{
								pos: position{line: 817, col: 13, offset: 23243},
								expr: &ruleRefExpr{
									pos:  position{line: 817, col: 13, offset: 23243},
									name: "SQLOrderBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 818, col: 5, offset: 23259},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 818, col: 11, offset: 23265},
								name: "SQLLimit",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLSelect",
			pos:  position{line: 842, col: 1, offset: 23632},
			expr: &choiceExpr{
				pos: position{line: 843, col: 5, offset: 23646},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 843, col: 5, offset: 23646},
						run: (*parser).callonSQLSelect2,
						expr: &seqExpr{
							pos: position{line: 843, col: 5, offset: 23646},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 843, col: 5, offset: 23646},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 843, col: 12, offset: 23653},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 843, col: 14, offset: 23655},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 844, col: 5, offset: 23683},
						run: (*parser).callonSQLSelect7,
						expr: &seqExpr{
							pos: position{line: 844, col: 5, offset: 23683},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 844, col: 5, offset: 23683},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 844, col: 12, offset: 23690},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 844, col: 14, offset: 23692},
									label: "assignments",
									expr: &ruleRefExpr{
										pos:  position{line: 844, col: 26, offset: 23704},
										name: "SQLAssignments",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignment",
			pos:  position{line: 846, col: 1, offset: 23748},
			expr: &choiceExpr{
				pos: position{line: 847, col: 5, offset: 23766},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 847, col: 5, offset: 23766},
						run: (*parser).callonSQLAssignment2,
						expr: &seqExpr{
							pos: position{line: 847, col: 5, offset: 23766},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 847, col: 5, offset: 23766},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 847, col: 9, offset: 23770},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 847, col: 14, offset: 23775},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 847, col: 16, offset: 23777},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 847, col: 19, offset: 23780},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 847, col: 21, offset: 23782},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 847, col: 25, offset: 23786},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 848, col: 5, offset: 23880},
						run: (*parser).callonSQLAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 848, col: 5, offset: 23880},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 848, col: 10, offset: 23885},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignments",
			pos:  position{line: 850, col: 1, offset: 23977},
			expr: &actionExpr{
				pos: position{line: 851, col: 5, offset: 23996},
				run: (*parser).callonSQLAssignments1,
				expr: &seqExpr{
					pos: position{line: 851, col: 5, offset: 23996},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 851, col: 5, offset: 23996},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 851, col: 11, offset: 24002},
								name: "SQLAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 851, col: 25, offset: 24016},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 851, col: 30, offset: 24021},
								expr: &actionExpr{
									pos: position{line: 851, col: 31, offset: 24022},
									run: (*parser).callonSQLAssignments7,
									expr: &seqExpr{
										pos: position{line: 851, col: 31, offset: 24022},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 851, col: 31, offset: 24022},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 851, col: 34, offset: 24025},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 851, col: 38, offset: 24029},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 851, col: 41, offset: 24032},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 851, col: 46, offset: 24037},
													name: "SQLAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLFrom",
			pos:  position{line: 855, col: 1, offset: 24158},
			expr: &choiceExpr{
				pos: position{line: 856, col: 5, offset: 24170},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 856, col: 5, offset: 24170},
						run: (*parser).callonSQLFrom2,
						expr: &seqExpr{
							pos: position{line: 856, col: 5, offset: 24170},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 856, col: 5, offset: 24170},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 856, col: 7, offset: 24172},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 856, col: 12, offset: 24177},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 856, col: 14, offset: 24179},
									label: "table",
									expr: &ruleRefExpr{
										pos:  position{line: 856, col: 20, offset: 24185},
										name: "SQLTable",
									},
								},
								&labeledExpr{
									pos:   position{line: 856, col: 29, offset: 24194},
									label: "alias",
									expr: &zeroOrOneExpr{
										pos: position{line: 856, col: 35, offset: 24200},
										expr: &ruleRefExpr{
											pos:  position{line: 856, col: 35, offset: 24200},
											name: "SQLAlias",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 859, col: 5, offset: 24295},
						run: (*parser).callonSQLFrom12,
						expr: &seqExpr{
							pos: position{line: 859, col: 5, offset: 24295},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 859, col: 5, offset: 24295},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 859, col: 7, offset: 24297},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 859, col: 12, offset: 24302},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 859, col: 14, offset: 24304},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAlias",
			pos:  position{line: 861, col: 1, offset: 24329},
			expr: &choiceExpr{
				pos: position{line: 862, col: 5, offset: 24342},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 862, col: 5, offset: 24342},
						run: (*parser).callonSQLAlias2,
						expr: &seqExpr{
							pos: position{line: 862, col: 5, offset: 24342},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 862, col: 5, offset: 24342},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 862, col: 7, offset: 24344},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 862, col: 10, offset: 24347},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 862, col: 12, offset: 24349},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 862, col: 15, offset: 24352},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 863, col: 5, offset: 24380},
						run: (*parser).callonSQLAlias9,
						expr: &seqExpr{
							pos: position{line: 863, col: 5, offset: 24380},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 863, col: 5, offset: 24380},
									name: "_",
								},
								&notExpr{
									pos: position{line: 863, col: 7, offset: 24382},
									expr: &seqExpr{
										pos: position{line: 863, col: 9, offset: 24384},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 863, col: 9, offset: 24384},
												name: "SQLTokenSentinels",
											},
											&ruleRefExpr{
												pos:  position{line: 863, col: 27, offset: 24402},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 863, col: 30, offset: 24405},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 863, col: 33, offset: 24408},
										name: "Lval",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLTable",
			pos:  position{line: 865, col: 1, offset: 24433},
			expr: &ruleRefExpr{
				pos:  position{line: 866, col: 5, offset: 24446},
				name: "Expr",
			},
		},
		{
			name: "SQLJoins",
			pos:  position{line: 868, col: 1, offset: 24452},
			expr: &actionExpr{
				pos: position{line: 869, col: 5, offset: 24465},
				run: (*parser).callonSQLJoins1,
				expr: &seqExpr{
					pos: position{line: 869, col: 5, offset: 24465},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 869, col: 5, offset: 24465},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 869, col: 11, offset: 24471},
								name: "SQLJoin",
							},
						},
						&labeledExpr{
							pos:   position{line: 869, col: 19, offset: 24479},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 869, col: 24, offset: 24484},
								expr: &actionExpr{
									pos: position{line: 869, col: 25, offset: 24485},
									run: (*parser).callonSQLJoins7,
									expr: &labeledExpr{
										pos:   position{line: 869, col: 25, offset: 24485},
										label: "join",
										expr: &ruleRefExpr{
											pos:  position{line: 869, col: 30, offset: 24490},
											name: "SQLJoin",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoin",
			pos:  position{line: 873, col: 1, offset: 24605},
			expr: &actionExpr{
				pos: position{line: 874, col: 5, offset: 24617},
				run: (*parser).callonSQLJoin1,
				expr: &seqExpr{
					pos: position{line: 874, col: 5, offset: 24617},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 874, col: 5, offset: 24617},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 874, col: 11, offset: 24623},
								name: "SQLJoinStyle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 874, col: 24, offset: 24636},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 874, col: 26, offset: 24638},
							name: "JOIN",
						},
						&ruleRefExpr{
							pos:  position{line: 874, col: 31, offset: 24643},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 874, col: 33, offset: 24645},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 874, col: 39, offset: 24651},
								name: "SQLTable",
							},
						},
						&labeledExpr{
							pos:   position{line: 874, col: 48, offset: 24660},
							label: "alias",
							expr: &zeroOrOneExpr{
								pos: position{line: 874, col: 54, offset: 24666},
								expr: &ruleRefExpr{
									pos:  position{line: 874, col: 54, offset: 24666},
									name: "SQLAlias",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 874, col: 64, offset: 24676},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 874, col: 66, offset: 24678},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 874, col: 69, offset: 24681},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 874, col: 71, offset: 24683},
							label: "leftKey",
							expr: &ruleRefExpr{
								pos:  position{line: 874, col: 79, offset: 24691},
								name: "JoinKey",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 874, col: 87, offset: 24699},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 874, col: 90, offset: 24702},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 874, col: 94, offset: 24706},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 874, col: 97, offset: 24709},
							label: "rightKey",
							expr: &ruleRefExpr{
								pos:  position{line: 874, col: 106, offset: 24718},
								name: "JoinKey",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoinStyle",
			pos:  position{line: 893, col: 1, offset: 24953},
			expr: &choiceExpr{
				pos: position{line: 894, col: 5, offset: 24970},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 894, col: 5, offset: 24970},
						run: (*parser).callonSQLJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 894, col: 5, offset: 24970},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 894, col: 5, offset: 24970},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 894, col: 7, offset: 24972},
									label: "style",
									expr: &choiceExpr{
										pos: position{line: 894, col: 14, offset: 24979},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 894, col: 14, offset: 24979},
												name: "ANTI",
											},
											&ruleRefExpr{
												pos:  position{line: 894, col: 21, offset: 24986},
												name: "INNER",
											},
											&ruleRefExpr{
												pos:  position{line: 894, col: 29, offset: 24994},
												name: "LEFT",
											},
											&ruleRefExpr{
												pos:  position{line: 894, col: 36, offset: 25001},
												name: "RIGHT",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 895, col: 5, offset: 25034},
						run: (*parser).callonSQLJoinStyle11,
						expr: &litMatcher{
							pos:        position{line: 895, col: 5, offset: 25034},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLWhere",
			pos:  position{line: 897, col: 1, offset: 25062},
			expr: &actionExpr{
				pos: position{line: 898, col: 5, offset: 25075},
				run: (*parser).callonSQLWhere1,
				expr: &seqExpr{
					pos: position{line: 898, col: 5, offset: 25075},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 898, col: 5, offset: 25075},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 898, col: 7, offset: 25077},
							name: "WHERE",
						},
						&ruleRefExpr{
							pos:  position{line: 898, col: 13, offset: 25083},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 898, col: 15, offset: 25085},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 898, col: 20, offset: 25090},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLGroupBy",
			pos:  position{line: 900, col: 1, offset: 25126},
			expr: &actionExpr{
				pos: position{line: 901, col: 5, offset: 25141},
				run: (*parser).callonSQLGroupBy1,
				expr: &seqExpr{
					pos: position{line: 901, col: 5, offset: 25141},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 901, col: 5, offset: 25141},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 901, col: 7, offset: 25143},
							name: "GROUP",
						},
						&ruleRefExpr{
							pos:  position{line: 901, col: 13, offset: 25149},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 901, col: 15, offset: 25151},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 901, col: 18, offset: 25154},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 901, col: 20, offset: 25156},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 901, col: 28, offset: 25164},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLHaving",
			pos:  position{line: 903, col: 1, offset: 25200},
			expr: &actionExpr{
				pos: position{line: 904, col: 5, offset: 25214},
				run: (*parser).callonSQLHaving1,
				expr: &seqExpr{
					pos: position{line: 904, col: 5, offset: 25214},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 904, col: 5, offset: 25214},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 904, col: 7, offset: 25216},
							name: "HAVING",
						},
						&ruleRefExpr{
							pos:  position{line: 904, col: 14, offset: 25223},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 904, col: 16, offset: 25225},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 904, col: 21, offset: 25230},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrderBy",
			pos:  position{line: 906, col: 1, offset: 25266},
			expr: &actionExpr{
				pos: position{line: 907, col: 5, offset: 25281},
				run: (*parser).callonSQLOrderBy1,
				expr: &seqExpr{
					pos: position{line: 907, col: 5, offset: 25281},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 907, col: 5, offset: 25281},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 907, col: 7, offset: 25283},
							name: "ORDER",
						},
						&ruleRefExpr{
							pos:  position{line: 907, col: 13, offset: 25289},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 907, col: 15, offset: 25291},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 907, col: 18, offset: 25294},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 907, col: 20, offset: 25296},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 907, col: 25, offset: 25301},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 907, col: 31, offset: 25307},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 907, col: 37, offset: 25313},
								name: "SQLOrder",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrder",
			pos:  position{line: 911, col: 1, offset: 25423},
			expr: &choiceExpr{
				pos: position{line: 912, col: 5, offset: 25436},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 912, col: 5, offset: 25436},
						run: (*parser).callonSQLOrder2,
						expr: &seqExpr{
							pos: position{line: 912, col: 5, offset: 25436},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 912, col: 5, offset: 25436},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 912, col: 7, offset: 25438},
									label: "dir",
									expr: &choiceExpr{
										pos: position{line: 912, col: 12, offset: 25443},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 912, col: 12, offset: 25443},
												name: "ASC",
											},
											&ruleRefExpr{
												pos:  position{line: 912, col: 18, offset: 25449},
												name: "DESC",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 913, col: 5, offset: 25479},
						run: (*parser).callonSQLOrder9,
						expr: &litMatcher{
							pos:        position{line: 913, col: 5, offset: 25479},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLLimit",
			pos:  position{line: 915, col: 1, offset: 25505},
			expr: &choiceExpr{
				pos: position{line: 916, col: 5, offset: 25518},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 916, col: 5, offset: 25518},
						run: (*parser).callonSQLLimit2,
						expr: &seqExpr{
							pos: position{line: 916, col: 5, offset: 25518},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 916, col: 5, offset: 25518},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 916, col: 7, offset: 25520},
									name: "LIMIT",
								},
								&ruleRefExpr{
									pos:  position{line: 916, col: 13, offset: 25526},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 916, col: 15, offset: 25528},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 916, col: 21, offset: 25534},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 917, col: 5, offset: 25565},
						run: (*parser).callonSQLLimit9,
						expr: &litMatcher{
							pos:        position{line: 917, col: 5, offset: 25565},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SELECT",
			pos:  position{line: 919, col: 1, offset: 25587},
			expr: &actionExpr{
				pos: position{line: 919, col: 10, offset: 25596},
				run: (*parser).callonSELECT1,
				expr: &litMatcher{
					pos:        position{line: 919, col: 10, offset: 25596},
					val:        "select",
					ignoreCase: true,
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 920, col: 1, offset: 25631},
			expr: &actionExpr{
				pos: position{line: 920, col: 6, offset: 25636},
				run: (*parser).callonAS1,
				expr: &litMatcher{
					pos:        position{line: 920, col: 6, offset: 25636},
					val:        "as",
					ignoreCase: true,
				},
			},
		},
		{
			name: "FROM",
			pos:  position{line: 921, col: 1, offset: 25663},
			expr: &actionExpr{
				pos: position{line: 921, col: 8, offset: 25670},
				run: (*parser).callonFROM1,
				expr: &litMatcher{
					pos:        position{line: 921, col: 8, offset: 25670},
					val:        "from",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JOIN",
			pos:  position{line: 922, col: 1, offset: 25701},
			expr: &actionExpr{
				pos: position{line: 922, col: 8, offset: 25708},
				run: (*parser).callonJOIN1,
				expr: &litMatcher{
					pos:        position{line: 922, col: 8, offset: 25708},
					val:        "join",
					ignoreCase: true,
				},
			},
		},
		{
			name: "WHERE",
			pos:  position{line: 923, col: 1, offset: 25739},
			expr: &actionExpr{
				pos: position{line: 923, col: 9, offset: 25747},
				run: (*parser).callonWHERE1,
				expr: &litMatcher{
					pos:        position{line: 923, col: 9, offset: 25747},
					val:        "where",
					ignoreCase: true,
				},
			},
		},
		{
			name: "GROUP",
			pos:  position{line: 924, col: 1, offset: 25780},
			expr: &actionExpr{
				pos: position{line: 924, col: 9, offset: 25788},
				run: (*parser).callonGROUP1,
				expr: &litMatcher{
					pos:        position{line: 924, col: 9, offset: 25788},
					val:        "group",
					ignoreCase: true,
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 925, col: 1, offset: 25821},
			expr: &actionExpr{
				pos: position{line: 925, col: 6, offset: 25826},
				run: (*parser).callonBY1,
				expr: &litMatcher{
					pos:        position{line: 925, col: 6, offset: 25826},
					val:        "by",
					ignoreCase: true,
				},
			},
		},
		{
			name: "HAVING",
			pos:  position{line: 926, col: 1, offset: 25853},
			expr: &actionExpr{
				pos: position{line: 926, col: 10, offset: 25862},
				run: (*parser).callonHAVING1,
				expr: &litMatcher{
					pos:        position{line: 926, col: 10, offset: 25862},
					val:        "having",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ORDER",
			pos:  position{line: 927, col: 1, offset: 25897},
			expr: &actionExpr{
				pos: position{line: 927, col: 9, offset: 25905},
				run: (*parser).callonORDER1,
				expr: &litMatcher{
					pos:        position{line: 927, col: 9, offset: 25905},
					val:        "order",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ON",
			pos:  position{line: 928, col: 1, offset: 25938},
			expr: &actionExpr{
				pos: position{line: 928, col: 6, offset: 25943},
				run: (*parser).callonON1,
				expr: &litMatcher{
					pos:        position{line: 928, col: 6, offset: 25943},
					val:        "on",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LIMIT",
			pos:  position{line: 929, col: 1, offset: 25970},
			expr: &actionExpr{
				pos: position{line: 929, col: 9, offset: 25978},
				run: (*parser).callonLIMIT1,
				expr: &litMatcher{
					pos:        position{line: 929, col: 9, offset: 25978},
					val:        "limit",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ASC",
			pos:  position{line: 930, col: 1, offset: 26011},
			expr: &actionExpr{
				pos: position{line: 930, col: 7, offset: 26017},
				run: (*parser).callonASC1,
				expr: &litMatcher{
					pos:        position{line: 930, col: 7, offset: 26017},
					val:        "asc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "DESC",
			pos:  position{line: 931, col: 1, offset: 26046},
			expr: &actionExpr{
				pos: position{line: 931, col: 8, offset: 26053},
				run: (*parser).callonDESC1,
				expr: &litMatcher{
					pos:        position{line: 931, col: 8, offset: 26053},
					val:        "desc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ANTI",
			pos:  position{line: 932, col: 1, offset: 26084},
			expr: &actionExpr{
				pos: position{line: 932, col: 8, offset: 26091},
				run: (*parser).callonANTI1,
				expr: &litMatcher{
					pos:        position{line: 932, col: 8, offset: 26091},
					val:        "anti",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LEFT",
			pos:  position{line: 933, col: 1, offset: 26122},
			expr: &actionExpr{
				pos: position{line: 933, col: 8, offset: 26129},
				run: (*parser).callonLEFT1,
				expr: &litMatcher{
					pos:        position{line: 933, col: 8, offset: 26129},
					val:        "left",
					ignoreCase: true,
				},
			},
		},
		{
			name: "RIGHT",
			pos:  position{line: 934, col: 1, offset: 26160},
			expr: &actionExpr{
				pos: position{line: 934, col: 9, offset: 26168},
				run: (*parser).callonRIGHT1,
				expr: &litMatcher{
					pos:        position{line: 934, col: 9, offset: 26168},
					val:        "right",
					ignoreCase: true,
				},
			},
		},
		{
			name: "INNER",
			pos:  position{line: 935, col: 1, offset: 26201},
			expr: &actionExpr{
				pos: position{line: 935, col: 9, offset: 26209},
				run: (*parser).callonINNER1,
				expr: &litMatcher{
					pos:        position{line: 935, col: 9, offset: 26209},
					val:        "inner",
					ignoreCase: true,
				},
			},
		},
		{
			name: "SQLTokenSentinels",
			pos:  position{line: 937, col: 1, offset: 26243},
			expr: &choiceExpr{
				pos: position{line: 938, col: 5, offset: 26265},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 938, col: 5, offset: 26265},
						name: "SELECT",
					},
					&ruleRefExpr{
						pos:  position{line: 938, col: 14, offset: 26274},
						name: "AS",
					},
					&ruleRefExpr{
						pos:  position{line: 938, col: 19, offset: 26279},
						name: "FROM",
					},
					&ruleRefExpr{
						pos:  position{line: 938, col: 27, offset: 26287},
						name: "JOIN",
					},
					&ruleRefExpr{
						pos:  position{line: 938, col: 34, offset: 26294},
						name: "WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 938, col: 42, offset: 26302},
						name: "GROUP",
					},
					&ruleRefExpr{
						pos:  position{line: 938, col: 50, offset: 26310},
						name: "HAVING",
					},
					&ruleRefExpr{
						pos:  position{line: 938, col: 59, offset: 26319},
						name: "ORDER",
					},
					&ruleRefExpr{
						pos:  position{line: 938, col: 67, offset: 26327},
						name: "LIMIT",
					},
					&ruleRefExpr{
						pos:  position{line: 938, col: 75, offset: 26335},
						name: "ON",
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 942, col: 1, offset: 26361},
			expr: &choiceExpr{
				pos: position{line: 943, col: 5, offset: 26373},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 943, col: 5, offset: 26373},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 944, col: 5, offset: 26389},
						name: "TemplateLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 945, col: 5, offset: 26409},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 946, col: 5, offset: 26427},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 947, col: 5, offset: 26446},
						name: "BytesLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 948, col: 5, offset: 26463},
						name: "Duration",
					},
					&ruleRefExpr{
						pos:  position{line: 949, col: 5, offset: 26476},
						name: "Time",
					},
					&ruleRefExpr{
						pos:  position{line: 950, col: 5, offset: 26485},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 951, col: 5, offset: 26502},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 952, col: 5, offset: 26521},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 953, col: 5, offset: 26540},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 955, col: 1, offset: 26553},
			expr: &choiceExpr{
				pos: position{line: 956, col: 5, offset: 26571},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 956, col: 5, offset: 26571},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 956, col: 5, offset: 26571},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 956, col: 5, offset: 26571},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 956, col: 7, offset: 26573},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 956, col: 14, offset: 26580},
									expr: &ruleRefExpr{
										pos:  position{line: 956, col: 15, offset: 26581},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 959, col: 5, offset: 26696},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 959, col: 5, offset: 26696},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 959, col: 7, offset: 26698},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 963, col: 1, offset: 26802},
			expr: &choiceExpr{
				pos: position{line: 964, col: 5, offset: 26821},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 964, col: 5, offset: 26821},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 964, col: 5, offset: 26821},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 964, col: 5, offset: 26821},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 964, col: 7, offset: 26823},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 964, col: 11, offset: 26827},
									expr: &ruleRefExpr{
										pos:  position{line: 964, col: 12, offset: 26828},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 967, col: 5, offset: 26942},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 967, col: 5, offset: 26942},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 967, col: 7, offset: 26944},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 971, col: 1, offset: 27043},
			expr: &actionExpr{
				pos: position{line: 972, col: 5, offset: 27060},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 972, col: 5, offset: 27060},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 972, col: 7, offset: 27062},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 976, col: 1, offset: 27175},
			expr: &actionExpr{
				pos: position{line: 977, col: 5, offset: 27194},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 977, col: 5, offset: 27194},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 977, col: 7, offset: 27196},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 981, col: 1, offset: 27305},
			expr: &choiceExpr{
				pos: position{line: 982, col: 5, offset: 27324},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 982, col: 5, offset: 27324},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 982, col: 5, offset: 27324},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 983, col: 5, offset: 27437},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 983, col: 5, offset: 27437},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 985, col: 1, offset: 27548},
			expr: &actionExpr{
				pos: position{line: 986, col: 5, offset: 27564},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 986, col: 5, offset: 27564},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "BytesLiteral",
			pos:  position{line: 988, col: 1, offset: 27670},
			expr: &actionExpr{
				pos: position{line: 989, col: 5, offset: 27687},
				run: (*parser).callonBytesLiteral1,
				expr: &seqExpr{
					pos: position{line: 989, col: 5, offset: 27687},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 989, col: 5, offset: 27687},
							val:        "0x",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 989, col: 10, offset: 27692},
							expr: &ruleRefExpr{
								pos:  position{line: 989, col: 10, offset: 27692},
								name: "HexDigit",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeLiteral",
			pos:  position{line: 993, col: 1, offset: 27807},
			expr: &actionExpr{
				pos: position{line: 994, col: 5, offset: 27823},
				run: (*parser).callonTypeLiteral1,
				expr: &seqExpr{
					pos: position{line: 994, col: 5, offset: 27823},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 994, col: 5, offset: 27823},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 994, col: 9, offset: 27827},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 994, col: 13, offset: 27831},
								name: "Type",
							},
						},
						&litMatcher{
							pos:        position{line: 994, col: 18, offset: 27836},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "CastType",
			pos:  position{line: 998, col: 1, offset: 27925},
			expr: &choiceExpr{
				pos: position{line: 999, col: 5, offset: 27938},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 999, col: 5, offset: 27938},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1000, col: 5, offset: 27954},
						name: "PrimitiveType",
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 1002, col: 1, offset: 27969},
			expr: &choiceExpr{
				pos: position{line: 1003, col: 5, offset: 27978},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1003, col: 5, offset: 27978},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1004, col: 5, offset: 27994},
						name: "AmbiguousType",
					},
					&ruleRefExpr{
						pos:  position{line: 1005, col: 5, offset: 28012},
						name: "ComplexType",
					},
				},
			},
		},
		{
			name: "AmbiguousType",
			pos:  position{line: 1007, col: 1, offset: 28025},
			expr: &choiceExpr{
				pos: position{line: 1008, col: 5, offset: 28043},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1008, col: 5, offset: 28043},
						run: (*parser).callonAmbiguousType2,
						expr: &seqExpr{
							pos: position{line: 1008, col: 5, offset: 28043},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1008, col: 5, offset: 28043},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1008, col: 10, offset: 28048},
										name: "PrimitiveType",
									},
								},
								&notExpr{
									pos: position{line: 1008, col: 24, offset: 28062},
									expr: &ruleRefExpr{
										pos:  position{line: 1008, col: 25, offset: 28063},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1009, col: 5, offset: 28103},
						run: (*parser).callonAmbiguousType8,
						expr: &seqExpr{
							pos: position{line: 1009, col: 5, offset: 28103},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1009, col: 5, offset: 28103},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1009, col: 10, offset: 28108},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1009, col: 25, offset: 28123},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1009, col: 28, offset: 28126},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1009, col: 32, offset: 28130},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1009, col: 35, offset: 28133},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1009, col: 39, offset: 28137},
										name: "Type",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1012, col: 5, offset: 28239},
						run: (*parser).callonAmbiguousType17,
						expr: &labeledExpr{
							pos:   position{line: 1012, col: 5, offset: 28239},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1012, col: 10, offset: 28244},
								name: "IdentifierName",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1015, col: 5, offset: 28346},
						run: (*parser).callonAmbiguousType20,
						expr: &seqExpr{
							pos: position{line: 1015, col: 5, offset: 28346},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1015, col: 5, offset: 28346},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1015, col: 9, offset: 28350},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1015, col: 12, offset: 28353},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 1015, col: 14, offset: 28355},
										name: "TypeUnion",
									},
								},
								&litMatcher{
									pos:        position{line: 1015, col: 25, offset: 28366},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeUnion",
			pos:  position{line: 1017, col: 1, offset: 28389},
			expr: &actionExpr{
				pos: position{line: 1018, col: 5, offset: 28403},
				run: (*parser).callonTypeUnion1,
				expr: &labeledExpr{
					pos:   position{line: 1018, col: 5, offset: 28403},
					label: "types",
					expr: &ruleRefExpr{
						pos:  position{line: 1018, col: 11, offset: 28409},
						name: "TypeList",
					},
				},
			},
		},
		{
			name: "TypeList",
			pos:  position{line: 1022, col: 1, offset: 28505},
			expr: &actionExpr{
				pos: position{line: 1023, col: 5, offset: 28518},
				run: (*parser).callonTypeList1,
				expr: &seqExpr{
					pos: position{line: 1023, col: 5, offset: 28518},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1023, col: 5, offset: 28518},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1023, col: 11, offset: 28524},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 1023, col: 16, offset: 28529},
							label: "rest",
							expr: &oneOrMoreExpr{
								pos: position{line: 1023, col: 21, offset: 28534},
								expr: &ruleRefExpr{
									pos:  position{line: 1023, col: 21, offset: 28534},
									name: "TypeListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeListTail",
			pos:  position{line: 1027, col: 1, offset: 28628},
			expr: &actionExpr{
				pos: position{line: 1027, col: 16, offset: 28643},
				run: (*parser).callonTypeListTail1,
				expr: &seqExpr{
					pos: position{line: 1027, col: 16, offset: 28643},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1027, col: 16, offset: 28643},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1027, col: 19, offset: 28646},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1027, col: 23, offset: 28650},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1027, col: 26, offset: 28653},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1027, col: 30, offset: 28657},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexType",
			pos:  position{line: 1029, col: 1, offset: 28683},
			expr: &choiceExpr{
				pos: position{line: 1030, col: 5, offset: 28699},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1030, col: 5, offset: 28699},
						run: (*parser).callonComplexType2,
						expr: &seqExpr{
							pos: position{line: 1030, col: 5, offset: 28699},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1030, col: 5, offset: 28699},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1030, col: 9, offset: 28703},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1030, col: 12, offset: 28706},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 1030, col: 19, offset: 28713},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1030, col: 33, offset: 28727},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1030, col: 36, offset: 28730},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1033, col: 5, offset: 28825},
						run: (*parser).callonComplexType10,
						expr: &seqExpr{
							pos: position{line: 1033, col: 5, offset: 28825},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1033, col: 5, offset: 28825},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1033, col: 9, offset: 28829},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1033, col: 12, offset: 28832},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1033, col: 16, offset: 28836},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1033, col: 21, offset: 28841},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1033, col: 24, offset: 28844},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1036, col: 5, offset: 28933},
						run: (*parser).callonComplexType18,
						expr: &seqExpr{
							pos: position{line: 1036, col: 5, offset: 28933},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1036, col: 5, offset: 28933},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1036, col: 10, offset: 28938},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1036, col: 14, offset: 28942},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1036, col: 18, offset: 28946},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1036, col: 23, offset: 28951},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1036, col: 26, offset: 28954},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1039, col: 5, offset: 29042},
						run: (*parser).callonComplexType26,
						expr: &seqExpr{
							pos: position{line: 1039, col: 5, offset: 29042},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1039, col: 5, offset: 29042},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1039, col: 10, offset: 29047},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1039, col: 13, offset: 29050},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 1039, col: 21, offset: 29058},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1039, col: 26, offset: 29063},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1039, col: 29, offset: 29066},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1039, col: 33, offset: 29070},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1039, col: 36, offset: 29073},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 1039, col: 44, offset: 29081},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1039, col: 49, offset: 29086},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1039, col: 52, offset: 29089},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateLiteral",
			pos:  position{line: 1043, col: 1, offset: 29203},
			expr: &actionExpr{
				pos: position{line: 1044, col: 5, offset: 29223},
				run: (*parser).callonTemplateLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1044, col: 5, offset: 29223},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1044, col: 7, offset: 29225},
						name: "TemplateLiteralParts",
					},
				},
			},
		},
		{
			name: "TemplateLiteralParts",
			pos:  position{line: 1051, col: 1, offset: 29441},
			expr: &choiceExpr{
				pos: position{line: 1052, col: 5, offset: 29466},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1052, col: 5, offset: 29466},
						run: (*parser).callonTemplateLiteralParts2,
						expr: &seqExpr{
							pos: position{line: 1052, col: 5, offset: 29466},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1052, col: 5, offset: 29466},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1052, col: 9, offset: 29470},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1052, col: 11, offset: 29472},
										expr: &ruleRefExpr{
											pos:  position{line: 1052, col: 11, offset: 29472},
											name: "TemplateDoubleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1052, col: 37, offset: 29498},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1053, col: 5, offset: 29524},
						run: (*parser).callonTemplateLiteralParts9,
						expr: &seqExpr{
							pos: position{line: 1053, col: 5, offset: 29524},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1053, col: 5, offset: 29524},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1053, col: 9, offset: 29528},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1053, col: 11, offset: 29530},
										expr: &ruleRefExpr{
											pos:  position{line: 1053, col: 11, offset: 29530},
											name: "TemplateSingleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1053, col: 37, offset: 29556},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedPart",
			pos:  position{line: 1055, col: 1, offset: 29579},
			expr: &choiceExpr{
				pos: position{line: 1056, col: 5, offset: 29608},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1056, col: 5, offset: 29608},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 1057, col: 5, offset: 29625},
						run: (*parser).callonTemplateDoubleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 1057, col: 5, offset: 29625},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1057, col: 7, offset: 29627},
								expr: &ruleRefExpr{
									pos:  position{line: 1057, col: 7, offset: 29627},
									name: "TemplateDoubleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedChar",
			pos:  position{line: 1061, col: 1, offset: 29764},
			expr: &choiceExpr{
				pos: position{line: 1062, col: 5, offset: 29793},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1062, col: 5, offset: 29793},
						run: (*parser).callonTemplateDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1062, col: 5, offset: 29793},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1062, col: 5, offset: 29793},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1062, col: 10, offset: 29798},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1062, col: 12, offset: 29800},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1063, col: 5, offset: 29827},
						run: (*parser).callonTemplateDoubleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1063, col: 5, offset: 29827},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1063, col: 5, offset: 29827},
									expr: &litMatcher{
										pos:        position{line: 1063, col: 8, offset: 29830},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1063, col: 15, offset: 29837},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1063, col: 17, offset: 29839},
										name: "DoubleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedPart",
			pos:  position{line: 1065, col: 1, offset: 29875},
			expr: &choiceExpr{
				pos: position{line: 1066, col: 5, offset: 29904},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1066, col: 5, offset: 29904},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 1067, col: 5, offset: 29921},
						run: (*parser).callonTemplateSingleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 1067, col: 5, offset: 29921},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1067, col: 7, offset: 29923},
								expr: &ruleRefExpr{
									pos:  position{line: 1067, col: 7, offset: 29923},
									name: "TemplateSingleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedChar",
			pos:  position{line: 1071, col: 1, offset: 30060},
			expr: &choiceExpr{
				pos: position{line: 1072, col: 5, offset: 30089},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1072, col: 5, offset: 30089},
						run: (*parser).callonTemplateSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1072, col: 5, offset: 30089},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1072, col: 5, offset: 30089},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1072, col: 10, offset: 30094},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1072, col: 12, offset: 30096},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1073, col: 5, offset: 30123},
						run: (*parser).callonTemplateSingleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1073, col: 5, offset: 30123},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1073, col: 5, offset: 30123},
									expr: &litMatcher{
										pos:        position{line: 1073, col: 8, offset: 30126},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1073, col: 15, offset: 30133},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1073, col: 17, offset: 30135},
										name: "SingleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateExpr",
			pos:  position{line: 1075, col: 1, offset: 30171},
			expr: &actionExpr{
				pos: position{line: 1076, col: 5, offset: 30188},
				run: (*parser).callonTemplateExpr1,
				expr: &seqExpr{
					pos: position{line: 1076, col: 5, offset: 30188},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1076, col: 5, offset: 30188},
							val:        "${",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1076, col: 10, offset: 30193},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1076, col: 13, offset: 30196},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 1076, col: 15, offset: 30198},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1076, col: 20, offset: 30203},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1076, col: 23, offset: 30206},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 1078, col: 1, offset: 30229},
			expr: &actionExpr{
				pos: position{line: 1079, col: 5, offset: 30247},
				run: (*parser).callonPrimitiveType1,
				expr: &choiceExpr{
					pos: position{line: 1079, col: 9, offset: 30251},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 1079, col: 9, offset: 30251},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1079, col: 19, offset: 30261},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1079, col: 30, offset: 30272},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1079, col: 41, offset: 30283},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1080, col: 9, offset: 30300},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1080, col: 18, offset: 30309},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1080, col: 28, offset: 30319},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1080, col: 38, offset: 30329},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1081, col: 9, offset: 30345},
							val:        "float32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1081, col: 21, offset: 30357},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1082, col: 9, offset: 30375},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1082, col: 18, offset: 30384},
							val:        "string",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1083, col: 9, offset: 30401},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1083, col: 22, offset: 30414},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1084, col: 9, offset: 30429},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1085, col: 9, offset: 30445},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1085, col: 16, offset: 30452},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1086, col: 9, offset: 30466},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1086, col: 18, offset: 30475},
							val:        "null",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldList",
			pos:  position{line: 1090, col: 1, offset: 30591},
			expr: &actionExpr{
				pos: position{line: 1091, col: 5, offset: 30609},
				run: (*parser).callonTypeFieldList1,
				expr: &seqExpr{
					pos: position{line: 1091, col: 5, offset: 30609},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1091, col: 5, offset: 30609},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1091, col: 11, offset: 30615},
								name: "TypeField",
							},
						},
						&labeledExpr{
							pos:   position{line: 1091, col: 21, offset: 30625},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1091, col: 26, offset: 30630},
								expr: &ruleRefExpr{
									pos:  position{line: 1091, col: 26, offset: 30630},
									name: "TypeFieldListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTail",
			pos:  position{line: 1095, col: 1, offset: 30729},
			expr: &actionExpr{
				pos: position{line: 1095, col: 21, offset: 30749},
				run: (*parser).callonTypeFieldListTail1,
				expr: &seqExpr{
					pos: position{line: 1095, col: 21, offset: 30749},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1095, col: 21, offset: 30749},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1095, col: 24, offset: 30752},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1095, col: 28, offset: 30756},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1095, col: 31, offset: 30759},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1095, col: 35, offset: 30763},
								name: "TypeField",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeField",
			pos:  position{line: 1097, col: 1, offset: 30794},
			expr: &actionExpr{
				pos: position{line: 1098, col: 5, offset: 30808},
				run: (*parser).callonTypeField1,
				expr: &seqExpr{
					pos: position{line: 1098, col: 5, offset: 30808},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1098, col: 5, offset: 30808},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1098, col: 10, offset: 30813},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1098, col: 20, offset: 30823},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1098, col: 23, offset: 30826},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1098, col: 27, offset: 30830},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1098, col: 30, offset: 30833},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1098, col: 34, offset: 30837},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 1102, col: 1, offset: 30919},
			expr: &choiceExpr{
				pos: position{line: 1103, col: 5, offset: 30933},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1103, col: 5, offset: 30933},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 1104, col: 5, offset: 30952},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "EqualityToken",
			pos:  position{line: 1106, col: 1, offset: 30966},
			expr: &choiceExpr{
				pos: position{line: 1107, col: 5, offset: 30984},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1107, col: 5, offset: 30984},
						name: "EqualityOperator",
					},
					&ruleRefExpr{
						pos:  position{line: 1107, col: 24, offset: 31003},
						name: "RelativeOperator",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 1109, col: 1, offset: 31021},
			expr: &actionExpr{
				pos: position{line: 1109, col: 12, offset: 31032},
				run: (*parser).callonAndToken1,
				expr: &seqExpr{
					pos: position{line: 1109, col: 12, offset: 31032},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1109, col: 13, offset: 31033},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1109, col: 13, offset: 31033},
									val:        "and",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1109, col: 21, offset: 31041},
									val:        "AND",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1109, col: 28, offset: 31048},
							expr: &ruleRefExpr{
								pos:  position{line: 1109, col: 29, offset: 31049},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 1110, col: 1, offset: 31086},
			expr: &actionExpr{
				pos: position{line: 1110, col: 11, offset: 31096},
				run: (*parser).callonOrToken1,
				expr: &seqExpr{
					pos: position{line: 1110, col: 11, offset: 31096},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1110, col: 12, offset: 31097},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1110, col: 12, offset: 31097},
									val:        "or",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1110, col: 19, offset: 31104},
									val:        "OR",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1110, col: 25, offset: 31110},
							expr: &ruleRefExpr{
								pos:  position{line: 1110, col: 26, offset: 31111},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 1111, col: 1, offset: 31147},
			expr: &actionExpr{
				pos: position{line: 1111, col: 11, offset: 31157},
				run: (*parser).callonInToken1,
				expr: &seqExpr{
					pos: position{line: 1111, col: 11, offset: 31157},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1111, col: 11, offset: 31157},
							val:        "in",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1111, col: 16, offset: 31162},
							expr: &ruleRefExpr{
								pos:  position{line: 1111, col: 17, offset: 31163},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 1112, col: 1, offset: 31199},
			expr: &actionExpr{
				pos: position{line: 1112, col: 12, offset: 31210},
				run: (*parser).callonNotToken1,
				expr: &seqExpr{
					pos: position{line: 1112, col: 12, offset: 31210},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1112, col: 13, offset: 31211},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1112, col: 13, offset: 31211},
									val:        "not",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1112, col: 21, offset: 31219},
									val:        "NOT",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1112, col: 28, offset: 31226},
							expr: &ruleRefExpr{
								pos:  position{line: 1112, col: 29, offset: 31227},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 1113, col: 1, offset: 31264},
			expr: &actionExpr{
				pos: position{line: 1113, col: 11, offset: 31274},
				run: (*parser).callonByToken1,
				expr: &seqExpr{
					pos: position{line: 1113, col: 11, offset: 31274},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1113, col: 11, offset: 31274},
							val:        "by",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1113, col: 16, offset: 31279},
							expr: &ruleRefExpr{
								pos:  position{line: 1113, col: 17, offset: 31280},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 1115, col: 1, offset: 31317},
			expr: &charClassMatcher{
				pos:        position{line: 1115, col: 19, offset: 31335},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 1117, col: 1, offset: 31347},
			expr: &choiceExpr{
				pos: position{line: 1117, col: 18, offset: 31364},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1117, col: 18, offset: 31364},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 1117, col: 36, offset: 31382},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 1119, col: 1, offset: 31389},
			expr: &actionExpr{
				pos: position{line: 1120, col: 5, offset: 31404},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 1120, col: 5, offset: 31404},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 1120, col: 8, offset: 31407},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 1122, col: 1, offset: 31488},
			expr: &choiceExpr{
				pos: position{line: 1123, col: 5, offset: 31507},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1123, col: 5, offset: 31507},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 1123, col: 5, offset: 31507},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1123, col: 5, offset: 31507},
									expr: &seqExpr{
										pos: position{line: 1123, col: 7, offset: 31509},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1123, col: 7, offset: 31509},
												name: "IDGuard",
											},
											&notExpr{
												pos: position{line: 1123, col: 15, offset: 31517},
												expr: &ruleRefExpr{
													pos:  position{line: 1123, col: 16, offset: 31518},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1123, col: 32, offset: 31534},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1123, col: 48, offset: 31550},
									expr: &ruleRefExpr{
										pos:  position{line: 1123, col: 48, offset: 31550},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1124, col: 5, offset: 31602},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 1124, col: 5, offset: 31602},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1125, col: 5, offset: 31641},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 1125, col: 5, offset: 31641},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1125, col: 5, offset: 31641},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1125, col: 10, offset: 31646},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1125, col: 13, offset: 31649},
										name: "IDGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1127, col: 5, offset: 31740},
						run: (*parser).callonIdentifierName19,
						expr: &litMatcher{
							pos:        position{line: 1127, col: 5, offset: 31740},
							val:        "type",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1128, col: 5, offset: 31782},
						run: (*parser).callonIdentifierName21,
						expr: &seqExpr{
							pos: position{line: 1128, col: 5, offset: 31782},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1128, col: 5, offset: 31782},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1128, col: 8, offset: 31785},
										name: "SQLTokenSentinels",
									},
								},
								&andExpr{
									pos: position{line: 1128, col: 26, offset: 31803},
									expr: &seqExpr{
										pos: position{line: 1128, col: 28, offset: 31805},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1128, col: 28, offset: 31805},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1128, col: 31, offset: 31808},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IDGuard",
			pos:  position{line: 1130, col: 1, offset: 31833},
			expr: &choiceExpr{
				pos: position{line: 1131, col: 5, offset: 31845},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1131, col: 5, offset: 31845},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1132, col: 5, offset: 31864},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "Time",
			pos:  position{line: 1134, col: 1, offset: 31877},
			expr: &actionExpr{
				pos: position{line: 1135, col: 5, offset: 31886},
				run: (*parser).callonTime1,
				expr: &seqExpr{
					pos: position{line: 1135, col: 5, offset: 31886},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1135, col: 5, offset: 31886},
							name: "FullDate",
						},
						&litMatcher{
							pos:        position{line: 1135, col: 14, offset: 31895},
							val:        "T",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1135, col: 18, offset: 31899},
							name: "FullTime",
						},
					},
				},
			},
		},
		{
			name: "FullDate",
			pos:  position{line: 1139, col: 1, offset: 32019},
			expr: &seqExpr{
				pos: position{line: 1139, col: 12, offset: 32030},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1139, col: 12, offset: 32030},
						name: "D4",
					},
					&litMatcher{
						pos:        position{line: 1139, col: 15, offset: 32033},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1139, col: 19, offset: 32037},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1139, col: 22, offset: 32040},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1139, col: 26, offset: 32044},
						name: "D2",
					},
				},
			},
		},
		{
			name: "D4",
			pos:  position{line: 1141, col: 1, offset: 32048},
			expr: &seqExpr{
				pos: position{line: 1141, col: 6, offset: 32053},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1141, col: 6, offset: 32053},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1141, col: 11, offset: 32058},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1141, col: 16, offset: 32063},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1141, col: 21, offset: 32068},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "D2",
			pos:  position{line: 1142, col: 1, offset: 32074},
			expr: &seqExpr{
				pos: position{line: 1142, col: 6, offset: 32079},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1142, col: 6, offset: 32079},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1142, col: 11, offset: 32084},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "FullTime",
			pos:  position{line: 1144, col: 1, offset: 32091},
			expr: &seqExpr{
				pos: position{line: 1144, col: 12, offset: 32102},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1144, col: 12, offset: 32102},
						name: "PartialTime",
					},
					&ruleRefExpr{
						pos:  position{line: 1144, col: 24, offset: 32114},
						name: "TimeOffset",
					},
				},
			},
		},
		{
			name: "PartialTime",
			pos:  position{line: 1146, col: 1, offset: 32126},
			expr: &seqExpr{
				pos: position{line: 1146, col: 15, offset: 32140},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1146, col: 15, offset: 32140},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1146, col: 18, offset: 32143},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1146, col: 22, offset: 32147},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1146, col: 25, offset: 32150},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1146, col: 29, offset: 32154},
						name: "D2",
					},
					&zeroOrOneExpr{
						pos: position{line: 1146, col: 32, offset: 32157},
						expr: &seqExpr{
							pos: position{line: 1146, col: 33, offset: 32158},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1146, col: 33, offset: 32158},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1146, col: 37, offset: 32162},
									expr: &charClassMatcher{
										pos:        position{line: 1146, col: 37, offset: 32162},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeOffset",
			pos:  position{line: 1148, col: 1, offset: 32172},
			expr: &choiceExpr{
				pos: position{line: 1149, col: 5, offset: 32187},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1149, col: 5, offset: 32187},
						val:        "Z",
						ignoreCase: false,
					},
					&seqExpr{
						pos: position{line: 1150, col: 5, offset: 32195},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 1150, col: 6, offset: 32196},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1150, col: 6, offset: 32196},
										val:        "+",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 1150, col: 12, offset: 32202},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1150, col: 17, offset: 32207},
								name: "D2",
							},
							&litMatcher{
								pos:        position{line: 1150, col: 20, offset: 32210},
								val:        ":",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 1150, col: 24, offset: 32214},
								name: "D2",
							},
							&zeroOrOneExpr{
								pos: position{line: 1150, col: 27, offset: 32217},
								expr: &seqExpr{
									pos: position{line: 1150, col: 28, offset: 32218},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1150, col: 28, offset: 32218},
											val:        ".",
											ignoreCase: false,
										},
										&oneOrMoreExpr{
											pos: position{line: 1150, col: 32, offset: 32222},
											expr: &charClassMatcher{
												pos:        position{line: 1150, col: 32, offset: 32222},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 1152, col: 1, offset: 32232},
			expr: &actionExpr{
				pos: position{line: 1153, col: 5, offset: 32245},
				run: (*parser).callonDuration1,
				expr: &seqExpr{
					pos: position{line: 1153, col: 5, offset: 32245},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1153, col: 5, offset: 32245},
							expr: &litMatcher{
								pos:        position{line: 1153, col: 5, offset: 32245},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1153, col: 10, offset: 32250},
							expr: &seqExpr{
								pos: position{line: 1153, col: 11, offset: 32251},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1153, col: 11, offset: 32251},
										name: "Decimal",
									},
									&ruleRefExpr{
										pos:  position{line: 1153, col: 19, offset: 32259},
										name: "TimeUnit",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Decimal",
			pos:  position{line: 1157, col: 1, offset: 32385},
			expr: &seqExpr{
				pos: position{line: 1157, col: 11, offset: 32395},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1157, col: 11, offset: 32395},
						name: "UInt",
					},
					&zeroOrOneExpr{
						pos: position{line: 1157, col: 16, offset: 32400},
						expr: &seqExpr{
							pos: position{line: 1157, col: 17, offset: 32401},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1157, col: 17, offset: 32401},
									val:        ".",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1157, col: 21, offset: 32405},
									name: "UInt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeUnit",
			pos:  position{line: 1159, col: 1, offset: 32413},
			expr: &choiceExpr{
				pos: position{line: 1160, col: 5, offset: 32426},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1160, col: 5, offset: 32426},
						val:        "ns",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1161, col: 5, offset: 32435},
						val:        "us",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1162, col: 5, offset: 32444},
						val:        "ms",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1163, col: 5, offset: 32453},
						val:        "s",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1164, col: 5, offset: 32461},
						val:        "m",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1165, col: 5, offset: 32469},
						val:        "h",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1166, col: 5, offset: 32477},
						val:        "d",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1167, col: 5, offset: 32485},
						val:        "w",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1168, col: 5, offset: 32493},
						val:        "y",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 1170, col: 1, offset: 32498},
			expr: &actionExpr{
				pos: position{line: 1171, col: 5, offset: 32505},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 1171, col: 5, offset: 32505},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1171, col: 5, offset: 32505},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1171, col: 10, offset: 32510},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1171, col: 14, offset: 32514},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1171, col: 19, offset: 32519},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1171, col: 23, offset: 32523},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1171, col: 28, offset: 32528},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1171, col: 32, offset: 32532},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 1173, col: 1, offset: 32569},
			expr: &actionExpr{
				pos: position{line: 1174, col: 5, offset: 32577},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 1174, col: 5, offset: 32577},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1174, col: 5, offset: 32577},
							expr: &seqExpr{
								pos: position{line: 1174, col: 8, offset: 32580},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1174, col: 8, offset: 32580},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 1174, col: 12, offset: 32584},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 1174, col: 16, offset: 32588},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 1174, col: 20, offset: 32592},
										expr: &choiceExpr{
											pos: position{line: 1174, col: 22, offset: 32594},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1174, col: 22, offset: 32594},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 1174, col: 33, offset: 32605},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1174, col: 39, offset: 32611},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1174, col: 41, offset: 32613},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 1178, col: 1, offset: 32777},
			expr: &choiceExpr{
				pos: position{line: 1179, col: 5, offset: 32795},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1179, col: 5, offset: 32795},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 1179, col: 5, offset: 32795},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1179, col: 5, offset: 32795},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 1179, col: 7, offset: 32797},
										expr: &ruleRefExpr{
											pos:  position{line: 1179, col: 7, offset: 32797},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1179, col: 17, offset: 32807},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1179, col: 19, offset: 32809},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1182, col: 5, offset: 32873},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 1182, col: 5, offset: 32873},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1182, col: 5, offset: 32873},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1182, col: 7, offset: 32875},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1182, col: 11, offset: 32879},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1182, col: 13, offset: 32881},
										expr: &ruleRefExpr{
											pos:  position{line: 1182, col: 13, offset: 32881},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1182, col: 23, offset: 32891},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1182, col: 28, offset: 32896},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1182, col: 30, offset: 32898},
										expr: &ruleRefExpr{
											pos:  position{line: 1182, col: 30, offset: 32898},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1182, col: 40, offset: 32908},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 1182, col: 42, offset: 32910},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1185, col: 5, offset: 33009},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 1185, col: 5, offset: 33009},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1185, col: 5, offset: 33009},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1185, col: 10, offset: 33014},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1185, col: 12, offset: 33016},
										expr: &ruleRefExpr{
											pos:  position{line: 1185, col: 12, offset: 33016},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1185, col: 22, offset: 33026},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1185, col: 24, offset: 33028},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1188, col: 5, offset: 33099},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 1188, col: 5, offset: 33099},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1188, col: 5, offset: 33099},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1188, col: 7, offset: 33101},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1188, col: 11, offset: 33105},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1188, col: 13, offset: 33107},
										expr: &ruleRefExpr{
											pos:  position{line: 1188, col: 13, offset: 33107},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1188, col: 23, offset: 33117},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1191, col: 5, offset: 33185},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 1191, col: 5, offset: 33185},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 1195, col: 1, offset: 33222},
			expr: &choiceExpr{
				pos: position{line: 1196, col: 5, offset: 33234},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1196, col: 5, offset: 33234},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 1197, col: 5, offset: 33241},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 1199, col: 1, offset: 33246},
			expr: &actionExpr{
				pos: position{line: 1199, col: 12, offset: 33257},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 1199, col: 12, offset: 33257},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1199, col: 12, offset: 33257},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1199, col: 16, offset: 33261},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1199, col: 18, offset: 33263},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 1201, col: 1, offset: 33301},
			expr: &actionExpr{
				pos: position{line: 1201, col: 12, offset: 33312},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 1201, col: 12, offset: 33312},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1201, col: 12, offset: 33312},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1201, col: 14, offset: 33314},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 1201, col: 18, offset: 33318},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 1203, col: 1, offset: 33356},
			expr: &actionExpr{
				pos: position{line: 1204, col: 5, offset: 33367},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 1204, col: 5, offset: 33367},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1204, col: 5, offset: 33367},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1204, col: 7, offset: 33369},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 1204, col: 10, offset: 33372},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1204, col: 14, offset: 33376},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1204, col: 16, offset: 33378},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 1208, col: 1, offset: 33451},
			expr: &actionExpr{
				pos: position{line: 1209, col: 5, offset: 33462},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 1209, col: 5, offset: 33462},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1209, col: 5, offset: 33462},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1209, col: 7, offset: 33464},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 1209, col: 11, offset: 33468},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1209, col: 15, offset: 33472},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1209, col: 17, offset: 33474},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 1213, col: 1, offset: 33537},
			expr: &actionExpr{
				pos: position{line: 1214, col: 4, offset: 33545},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 1214, col: 4, offset: 33545},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 1214, col: 6, offset: 33547},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 1216, col: 1, offset: 33587},
			expr: &choiceExpr{
				pos: position{line: 1217, col: 5, offset: 33601},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1217, col: 5, offset: 33601},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 1218, col: 5, offset: 33616},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 1220, col: 1, offset: 33632},
			expr: &actionExpr{
				pos: position{line: 1220, col: 14, offset: 33645},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1220, col: 14, offset: 33645},
					expr: &charClassMatcher{
						pos:        position{line: 1220, col: 14, offset: 33645},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 1222, col: 1, offset: 33684},
			expr: &actionExpr{
				pos: position{line: 1223, col: 5, offset: 33703},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 1223, col: 5, offset: 33703},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1223, col: 5, offset: 33703},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1223, col: 9, offset: 33707},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 1225, col: 1, offset: 33750},
			expr: &choiceExpr{
				pos: position{line: 1226, col: 5, offset: 33766},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1226, col: 5, offset: 33766},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 1226, col: 5, offset: 33766},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1226, col: 5, offset: 33766},
									expr: &litMatcher{
										pos:        position{line: 1226, col: 5, offset: 33766},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1226, col: 10, offset: 33771},
									expr: &charClassMatcher{
										pos:        position{line: 1226, col: 10, offset: 33771},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 1226, col: 17, offset: 33778},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1226, col: 21, offset: 33782},
									expr: &charClassMatcher{
										pos:        position{line: 1226, col: 21, offset: 33782},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1226, col: 28, offset: 33789},
									expr: &ruleRefExpr{
										pos:  position{line: 1226, col: 28, offset: 33789},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1229, col: 5, offset: 33848},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 1229, col: 5, offset: 33848},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1229, col: 5, offset: 33848},
									expr: &litMatcher{
										pos:        position{line: 1229, col: 5, offset: 33848},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1229, col: 10, offset: 33853},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1229, col: 14, offset: 33857},
									expr: &charClassMatcher{
										pos:        position{line: 1229, col: 14, offset: 33857},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1229, col: 21, offset: 33864},
									expr: &ruleRefExpr{
										pos:  position{line: 1229, col: 21, offset: 33864},
										name: "ExponentPart",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 1233, col: 1, offset: 33920},
			expr: &seqExpr{
				pos: position{line: 1233, col: 16, offset: 33935},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1233, col: 16, offset: 33935},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 1233, col: 21, offset: 33940},
						expr: &charClassMatcher{
							pos:        position{line: 1233, col: 21, offset: 33940},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1233, col: 27, offset: 33946},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 1235, col: 1, offset: 33958},
			expr: &actionExpr{
				pos: position{line: 1235, col: 7, offset: 33964},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1235, col: 7, offset: 33964},
					expr: &ruleRefExpr{
						pos:  position{line: 1235, col: 7, offset: 33964},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 1237, col: 1, offset: 34006},
			expr: &charClassMatcher{
				pos:        position{line: 1237, col: 12, offset: 34017},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1239, col: 1, offset: 34030},
			expr: &choiceExpr{
				pos: position{line: 1240, col: 5, offset: 34047},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1240, col: 5, offset: 34047},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 1240, col: 5, offset: 34047},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1240, col: 5, offset: 34047},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1240, col: 9, offset: 34051},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1240, col: 11, offset: 34053},
										expr: &ruleRefExpr{
											pos:  position{line: 1240, col: 11, offset: 34053},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1240, col: 29, offset: 34071},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1241, col: 5, offset: 34108},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 1241, col: 5, offset: 34108},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1241, col: 5, offset: 34108},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1241, col: 9, offset: 34112},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1241, col: 11, offset: 34114},
										expr: &ruleRefExpr{
											pos:  position{line: 1241, col: 11, offset: 34114},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1241, col: 29, offset: 34132},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 1243, col: 1, offset: 34166},
			expr: &choiceExpr{
				pos: position{line: 1244, col: 5, offset: 34187},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1244, col: 5, offset: 34187},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1244, col: 5, offset: 34187},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1244, col: 5, offset: 34187},
									expr: &choiceExpr{
										pos: position{line: 1244, col: 7, offset: 34189},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1244, col: 7, offset: 34189},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1244, col: 13, offset: 34195},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1244, col: 26, offset: 34208,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1245, col: 5, offset: 34245},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1245, col: 5, offset: 34245},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1245, col: 5, offset: 34245},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1245, col: 10, offset: 34250},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1245, col: 12, offset: 34252},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 1247, col: 1, offset: 34286},
			expr: &actionExpr{
				pos: position{line: 1248, col: 5, offset: 34298},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 1248, col: 5, offset: 34298},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1248, col: 5, offset: 34298},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1248, col: 10, offset: 34303},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1248, col: 23, offset: 34316},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1248, col: 28, offset: 34321},
								expr: &ruleRefExpr{
									pos:  position{line: 1248, col: 28, offset: 34321},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 1250, col: 1, offset: 34383},
			expr: &choiceExpr{
				pos: position{line: 1251, col: 5, offset: 34400},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1251, col: 5, offset: 34400},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1252, col: 5, offset: 34417},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordChars",
			pos:  position{line: 1254, col: 1, offset: 34429},
			expr: &actionExpr{
				pos: position{line: 1254, col: 16, offset: 34444},
				run: (*parser).callonKeyWordChars1,
				expr: &charClassMatcher{
					pos:        position{line: 1254, col: 16, offset: 34444},
					val:        "[a-zA-Z_.:/%#@~]",
					chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
					ranges:     []rune{'a', 'z', 'A', 'Z'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 1256, col: 1, offset: 34493},
			expr: &choiceExpr{
				pos: position{line: 1257, col: 5, offset: 34509},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1257, col: 5, offset: 34509},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 1258, col: 5, offset: 34526},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 1260, col: 1, offset: 34533},
			expr: &actionExpr{
				pos: position{line: 1260, col: 14, offset: 34546},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 1260, col: 14, offset: 34546},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1260, col: 14, offset: 34546},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1260, col: 19, offset: 34551},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1260, col: 22, offset: 34554},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1260, col: 22, offset: 34554},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1260, col: 38, offset: 34570},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Glob",
			pos:  position{line: 1262, col: 1, offset: 34606},
			expr: &actionExpr{
				pos: position{line: 1263, col: 5, offset: 34615},
				run: (*parser).callonGlob1,
				expr: &seqExpr{
					pos: position{line: 1263, col: 5, offset: 34615},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1263, col: 5, offset: 34615},
							expr: &ruleRefExpr{
								pos:  position{line: 1263, col: 6, offset: 34616},
								name: "GlobProperStart",
							},
						},
						&andExpr{
							pos: position{line: 1263, col: 22, offset: 34632},
							expr: &ruleRefExpr{
								pos:  position{line: 1263, col: 23, offset: 34633},
								name: "GlobHasStar",
							},
						},
						&labeledExpr{
							pos:   position{line: 1263, col: 35, offset: 34645},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1263, col: 40, offset: 34650},
								name: "GlobStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1263, col: 50, offset: 34660},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1263, col: 55, offset: 34665},
								expr: &ruleRefExpr{
									pos:  position{line: 1263, col: 55, offset: 34665},
									name: "GlobRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobProperStart",
			pos:  position{line: 1267, col: 1, offset: 34749},
			expr: &seqExpr{
				pos: position{line: 1267, col: 19, offset: 34767},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1267, col: 19, offset: 34767},
						expr: &litMatcher{
							pos:        position{line: 1267, col: 19, offset: 34767},
							val:        "*",
							ignoreCase: false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1267, col: 24, offset: 34772},
						name: "KeyWordStart",
					},
				},
			},
		},
		{
			name: "GlobHasStar",
			pos:  position{line: 1268, col: 1, offset: 34785},
			expr: &seqExpr{
				pos: position{line: 1268, col: 15, offset: 34799},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1268, col: 15, offset: 34799},
						expr: &ruleRefExpr{
							pos:  position{line: 1268, col: 15, offset: 34799},
							name: "KeyWordRest",
						},
					},
					&litMatcher{
						pos:        position{line: 1268, col: 28, offset: 34812},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "GlobStart",
			pos:  position{line: 1270, col: 1, offset: 34817},
			expr: &choiceExpr{
				pos: position{line: 1271, col: 5, offset: 34831},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1271, col: 5, offset: 34831},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1272, col: 5, offset: 34848},
						name: "GlobEsc",
					},
					&actionExpr{
						pos: position{line: 1273, col: 5, offset: 34860},
						run: (*parser).callonGlobStart4,
						expr: &litMatcher{
							pos:        position{line: 1273, col: 5, offset: 34860},
							val:        "*",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GlobRest",
			pos:  position{line: 1275, col: 1, offset: 34884},
			expr: &choiceExpr{
				pos: position{line: 1276, col: 5, offset: 34897},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1276, col: 5, offset: 34897},
						name: "GlobStart",
					},
					&charClassMatcher{
						pos:        position{line: 1277, col: 5, offset: 34911},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "GlobEsc",
			pos:  position{line: 1279, col: 1, offset: 34918},
			expr: &actionExpr{
				pos: position{line: 1279, col: 11, offset: 34928},
				run: (*parser).callonGlobEsc1,
				expr: &seqExpr{
					pos: position{line: 1279, col: 11, offset: 34928},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1279, col: 11, offset: 34928},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1279, col: 16, offset: 34933},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1279, col: 19, offset: 34936},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1279, col: 19, offset: 34936},
										name: "GlobEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1279, col: 32, offset: 34949},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobEscape",
			pos:  position{line: 1281, col: 1, offset: 34985},
			expr: &choiceExpr{
				pos: position{line: 1282, col: 5, offset: 35000},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1282, col: 5, offset: 35000},
						run: (*parser).callonGlobEscape2,
						expr: &litMatcher{
							pos:        position{line: 1282, col: 5, offset: 35000},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1283, col: 5, offset: 35028},
						run: (*parser).callonGlobEscape4,
						expr: &litMatcher{
							pos:        position{line: 1283, col: 5, offset: 35028},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1284, col: 5, offset: 35058},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 1287, col: 1, offset: 35065},
			expr: &choiceExpr{
				pos: position{line: 1288, col: 5, offset: 35086},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1288, col: 5, offset: 35086},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1288, col: 5, offset: 35086},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1288, col: 5, offset: 35086},
									expr: &choiceExpr{
										pos: position{line: 1288, col: 7, offset: 35088},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1288, col: 7, offset: 35088},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1288, col: 13, offset: 35094},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1288, col: 26, offset: 35107,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1289, col: 5, offset: 35144},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1289, col: 5, offset: 35144},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1289, col: 5, offset: 35144},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1289, col: 10, offset: 35149},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1289, col: 12, offset: 35151},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 1291, col: 1, offset: 35185},
			expr: &choiceExpr{
				pos: position{line: 1292, col: 5, offset: 35204},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1292, col: 5, offset: 35204},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 1293, col: 5, offset: 35225},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 1295, col: 1, offset: 35240},
			expr: &choiceExpr{
				pos: position{line: 1296, col: 5, offset: 35261},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1296, col: 5, offset: 35261},
						val:        "'",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1297, col: 5, offset: 35269},
						run: (*parser).callonSingleCharEscape3,
						expr: &litMatcher{
							pos:        position{line: 1297, col: 5, offset: 35269},
							val:        "\"",
							ignoreCase: false,
						},
					},
					&litMatcher{
						pos:        position{line: 1298, col: 5, offset: 35309},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1299, col: 5, offset: 35318},
						run: (*parser).callonSingleCharEscape6,
						expr: &litMatcher{
							pos:        position{line: 1299, col: 5, offset: 35318},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1300, col: 5, offset: 35347},
						run: (*parser).callonSingleCharEscape8,
						expr: &litMatcher{
							pos:        position{line: 1300, col: 5, offset: 35347},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1301, col: 5, offset: 35376},
						run: (*parser).callonSingleCharEscape10,
						expr: &litMatcher{
							pos:        position{line: 1301, col: 5, offset: 35376},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1302, col: 5, offset: 35405},
						run: (*parser).callonSingleCharEscape12,
						expr: &litMatcher{
							pos:        position{line: 1302, col: 5, offset: 35405},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1303, col: 5, offset: 35434},
						run: (*parser).callonSingleCharEscape14,
						expr: &litMatcher{
							pos:        position{line: 1303, col: 5, offset: 35434},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1304, col: 5, offset: 35463},
						run: (*parser).callonSingleCharEscape16,
						expr: &litMatcher{
							pos:        position{line: 1304, col: 5, offset: 35463},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 1306, col: 1, offset: 35489},
			expr: &choiceExpr{
				pos: position{line: 1307, col: 5, offset: 35507},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1307, col: 5, offset: 35507},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 1307, col: 5, offset: 35507},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1308, col: 5, offset: 35535},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 1308, col: 5, offset: 35535},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1309, col: 5, offset: 35563},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 1311, col: 1, offset: 35569},
			expr: &choiceExpr{
				pos: position{line: 1312, col: 5, offset: 35587},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1312, col: 5, offset: 35587},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 1312, col: 5, offset: 35587},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1312, col: 5, offset: 35587},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1312, col: 9, offset: 35591},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1312, col: 16, offset: 35598},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1312, col: 16, offset: 35598},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1312, col: 25, offset: 35607},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1312, col: 34, offset: 35616},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1312, col: 43, offset: 35625},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1315, col: 5, offset: 35688},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 1315, col: 5, offset: 35688},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1315, col: 5, offset: 35688},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1315, col: 9, offset: 35692},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1315, col: 13, offset: 35696},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1315, col: 20, offset: 35703},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1315, col: 20, offset: 35703},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 1315, col: 29, offset: 35712},
												expr: &ruleRefExpr{
													pos:  position{line: 1315, col: 29, offset: 35712},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1315, col: 39, offset: 35722},
												expr: &ruleRefExpr{
													pos:  position{line: 1315, col: 39, offset: 35722},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1315, col: 49, offset: 35732},
												expr: &ruleRefExpr{
													pos:  position{line: 1315, col: 49, offset: 35732},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1315, col: 59, offset: 35742},
												expr: &ruleRefExpr{
													pos:  position{line: 1315, col: 59, offset: 35742},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1315, col: 69, offset: 35752},
												expr: &ruleRefExpr{
													pos:  position{line: 1315, col: 69, offset: 35752},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1315, col: 80, offset: 35763},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 1319, col: 1, offset: 35817},
			expr: &actionExpr{
				pos: position{line: 1320, col: 5, offset: 35828},
				run: (*parser).callonRegexp1,
				expr: &seqExpr{
					pos: position{line: 1320, col: 5, offset: 35828},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1320, col: 5, offset: 35828},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1320, col: 9, offset: 35832},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1320, col: 14, offset: 35837},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 1320, col: 25, offset: 35848},
							val:        "/",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1320, col: 29, offset: 35852},
							expr: &ruleRefExpr{
								pos:  position{line: 1320, col: 30, offset: 35853},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 1322, col: 1, offset: 35888},
			expr: &actionExpr{
				pos: position{line: 1323, col: 5, offset: 35903},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1323, col: 5, offset: 35903},
					expr: &choiceExpr{
						pos: position{line: 1323, col: 6, offset: 35904},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 1323, col: 6, offset: 35904},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&seqExpr{
								pos: position{line: 1323, col: 15, offset: 35913},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1323, col: 15, offset: 35913},
										val:        "\\",
										ignoreCase: false,
									},
									&anyMatcher{
										line: 1323, col: 20, offset: 35918,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 1325, col: 1, offset: 35954},
			expr: &charClassMatcher{
				pos:        position{line: 1326, col: 5, offset: 35970},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 1328, col: 1, offset: 35985},
			expr: &oneOrMoreExpr{
				pos: position{line: 1328, col: 6, offset: 35990},
				expr: &ruleRefExpr{
					pos:  position{line: 1328, col: 6, offset: 35990},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1330, col: 1, offset: 36001},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1330, col: 6, offset: 36006},
				expr: &ruleRefExpr{
					pos:  position{line: 1330, col: 6, offset: 36006},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 1332, col: 1, offset: 36017},
			expr: &choiceExpr{
				pos: position{line: 1333, col: 5, offset: 36030},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1333, col: 5, offset: 36030},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 1334, col: 5, offset: 36045},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 1335, col: 5, offset: 36064},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 1337, col: 1, offset: 36073},
			expr: &anyMatcher{
				line: 1338, col: 5, offset: 36093,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 1340, col: 1, offset: 36096},
			expr: &choiceExpr{
				pos: position{line: 1341, col: 5, offset: 36124},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1341, col: 5, offset: 36124},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1342, col: 5, offset: 36133},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1343, col: 5, offset: 36142},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1344, col: 5, offset: 36151},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1345, col: 5, offset: 36159},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1346, col: 5, offset: 36172},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 1348, col: 1, offset: 36182},
			expr: &charClassMatcher{
				pos:        position{line: 1349, col: 5, offset: 36201},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 1355, col: 1, offset: 36531},
			expr: &ruleRefExpr{
				pos:  position{line: 1358, col: 5, offset: 36602},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1360, col: 1, offset: 36621},
			expr: &seqExpr{
				pos: position{line: 1361, col: 5, offset: 36642},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1361, col: 5, offset: 36642},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1361, col: 10, offset: 36647},
						expr: &seqExpr{
							pos: position{line: 1361, col: 11, offset: 36648},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1361, col: 11, offset: 36648},
									expr: &litMatcher{
										pos:        position{line: 1361, col: 12, offset: 36649},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1361, col: 17, offset: 36654},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1361, col: 35, offset: 36672},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1363, col: 1, offset: 36678},
			expr: &seqExpr{
				pos: position{line: 1364, col: 5, offset: 36700},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1364, col: 5, offset: 36700},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1364, col: 10, offset: 36705},
						expr: &seqExpr{
							pos: position{line: 1364, col: 11, offset: 36706},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1364, col: 11, offset: 36706},
									expr: &ruleRefExpr{
										pos:  position{line: 1364, col: 12, offset: 36707},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1364, col: 27, offset: 36722},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1366, col: 1, offset: 36741},
			expr: &seqExpr{
				pos: position{line: 1366, col: 7, offset: 36747},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1366, col: 7, offset: 36747},
						expr: &ruleRefExpr{
							pos:  position{line: 1366, col: 7, offset: 36747},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1366, col: 19, offset: 36759},
						name: "LineTerminator",
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 1368, col: 1, offset: 36775},
			expr: &choiceExpr{
				pos: position{line: 1368, col: 7, offset: 36781},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1368, col: 7, offset: 36781},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 1368, col: 11, offset: 36785},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1370, col: 1, offset: 36790},
			expr: &notExpr{
				pos: position{line: 1370, col: 7, offset: 36796},
				expr: &anyMatcher{
					line: 1370, col: 8, offset: 36797,
				},
			},
		},
	},
}

func (c *current) onstart1(ast interface{}) (interface{}, error) {
	return ast, nil
}

func (p *parser) callonstart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart1(stack["ast"])
}

func (c *current) onSequential2(consts, first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": append([]interface{}{first}, (rest.([]interface{}))...), "consts": consts}, nil

}

func (p *parser) callonSequential2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential2(stack["consts"], stack["first"], stack["rest"])
}

func (c *current) onSequential12(consts, op interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": []interface{}{op}, "consts": consts}, nil

}

func (p *parser) callonSequential12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential12(stack["consts"], stack["op"])
}

func (c *current) onSequentialTail1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonSequentialTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequentialTail1(stack["p"])
}

func (c *current) onConsts4() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonConsts4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConsts4()
}

func (c *current) onConst1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonConst1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConst1(stack["v"])
}

func (c *current) onConstDef2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"name": id, "expr": expr}, nil

}

func (p *parser) callonConstDef2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDef2(stack["id"], stack["expr"])
}

func (c *current) onConstDef13(id, typ interface{}) (interface{}, error) {
	return map[string]interface{}{

		"name": id,

		"expr": map[string]interface{}{"kind": "TypeValue", "value": map[string]interface{}{"kind": "TypeDef", "name": id, "type": typ}}}, nil

}

func (p *parser) callonConstDef13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDef13(stack["id"], stack["typ"])
}

func (c *current) onOperation2(procArray interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Parallel", "procs": procArray}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["procArray"])
}

func (c *current) onOperation12(expr, cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": expr, "cases": cases}, nil

}

func (p *parser) callonOperation12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation12(stack["expr"], stack["cases"])
}

func (c *current) onOperation25(cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": nil, "cases": cases}, nil

}

func (p *parser) callonOperation25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation25(stack["cases"])
}

func (c *current) onOperation35(trunks interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": trunks}, nil

}

func (p *parser) callonOperation35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation35(stack["trunks"])
}

func (c *current) onOperation47(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonOperation47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation47(stack["f"])
}

func (c *current) onOperation53(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation53(stack["a"])
}

func (c *current) onOperation59(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation59(stack["a"])
}

func (c *current) onOperation65(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Filter", "expr": expr}, nil

}

func (p *parser) callonOperation65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation65(stack["expr"])
}

func (c *current) onSplitLeg1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSplitLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSplitLeg1(stack["s"])
}

func (c *current) onSwitchLeg1(expr, proc interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": expr, "proc": proc}, nil

}

func (p *parser) callonSwitchLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchLeg1(stack["expr"], stack["proc"])
}

func (c *current) onCase2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonCase2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase2(stack["expr"])
}

func (c *current) onCase8() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonCase8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase8()
}

func (c *current) onFromLeg2(source, seq interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Trunk", "source": source, "seq": seq}, nil

}

func (p *parser) callonFromLeg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromLeg2(stack["source"], stack["seq"])
}

func (c *current) onFromLeg10(source interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Trunk", "source": source, "seq": nil}, nil

}

func (p *parser) callonFromLeg10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromLeg10(stack["source"])
}

func (c *current) onFromHead1(src interface{}) (interface{}, error) {
	return src, nil
}

func (p *parser) callonFromHead1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromHead1(stack["src"])
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor13(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor13(stack["expr"])
}

func (c *current) onSearchExpr2(search interface{}) (interface{}, error) {
	return search, nil
}

func (p *parser) callonSearchExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr2(stack["search"])
}

func (c *current) onSearchExpr5(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Search", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonSearchExpr5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr5(stack["v"])
}

func (c *current) onSearchExpr11() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil

}

func (p *parser) callonSearchExpr11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr11()
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onPatternSearch1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RegexpSearch", "pattern": pattern}, nil

}

func (p *parser) callonPatternSearch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternSearch1(stack["pattern"])
}

func (c *current) onPatternMatch1(f, pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RegexpMatch", "pattern": pattern, "expr": f}, nil

}

func (p *parser) callonPatternMatch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternMatch1(stack["f"], stack["pattern"])
}

func (c *current) onAggregation2(keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Summarize", "keys": keys, "aggs": nil, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["keys"], stack["limit"])
}

func (c *current) onAggregation10(aggs, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"kind": "Summarize", "keys": nil, "aggs": aggs, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation10(stack["aggs"], stack["keys"], stack["limit"])
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAggAssignment2(lval, agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lval, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment2(stack["lval"], stack["agg"])
}

func (c *current) onAggAssignment11(agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment11(stack["agg"])
}

func (c *current) onAgg1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"kind": "Agg", "name": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonAgg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAgg1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onAggAssignments1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonAggAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSortProc8(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc8(stack["l"])
}

func (c *current) onSortProc1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var proc = map[string]interface{}{"kind": "Sort", "args": list, "order": "asc", "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		proc["order"] = "desc"
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			proc["nullsfirst"] = true
		}
	}
	return proc, nil

}

func (p *parser) callonSortProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopProc6(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopProc6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc6(stack["n"])
}

func (c *current) onTopProc18(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopProc18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc18(stack["f"])
}

func (c *current) onTopProc1(limit, flush, fields interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Top", "limit": 0, "args": nil, "flush": false}
	if limit != nil {
		proc["limit"] = limit
	}
	if fields != nil {
		proc["args"] = fields
	}
	if flush != nil {
		proc["flush"] = true
	}
	return proc, nil

}

func (p *parser) callonTopProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cut", "args": args}, nil

}

func (p *parser) callonCutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutProc1(stack["args"])
}

func (c *current) onDropProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Drop", "args": args}, nil

}

func (p *parser) callonDropProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropProc1(stack["args"])
}

func (c *current) onHeadProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": count}, nil
}

func (p *parser) callonHeadProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc2(stack["count"])
}

func (c *current) onHeadProc8() (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": 1}, nil
}

func (p *parser) callonHeadProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc8()
}

func (c *current) onTailProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": count}, nil
}

func (p *parser) callonTailProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc2(stack["count"])
}

func (c *current) onTailProc8() (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": 1}, nil
}

func (p *parser) callonTailProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc8()
}

func (c *current) onFilterProc1(op interface{}) (interface{}, error) {
	return op, nil

}

func (p *parser) callonFilterProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilterProc1(stack["op"])
}

func (c *current) onFilter1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Filter", "expr": expr}, nil

}

func (p *parser) callonFilter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilter1(stack["expr"])
}

func (c *current) onUniqProc2() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": true}, nil

}

func (p *parser) callonUniqProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc2()
}

func (c *current) onUniqProc7() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": false}, nil

}

func (p *parser) callonUniqProc7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc7()
}

func (c *current) onPutProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Put", "args": args}, nil

}

func (p *parser) callonPutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutProc1(stack["args"])
}

func (c *current) onRenameProc9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameProc9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc9(stack["cl"])
}

func (c *current) onRenameProc1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Rename", "args": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc1(stack["first"], stack["rest"])
}

func (c *current) onFuseProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Fuse"}, nil

}

func (p *parser) callonFuseProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseProc1()
}

func (c *current) onShapeProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Shape"}, nil

}

func (p *parser) callonShapeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShapeProc1()
}

func (c *current) onJoinProc2(style, leftKey, rightKey, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Join", "style": style, "left_key": leftKey, "right_key": rightKey, "args": nil}
	if columns != nil {
		proc["args"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc2(stack["style"], stack["leftKey"], stack["rightKey"], stack["columns"])
}

func (c *current) onJoinProc22(style, key, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Join", "style": style, "left_key": key, "right_key": key, "args": nil}
	if columns != nil {
		proc["args"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc22(stack["style"], stack["key"], stack["columns"])
}

func (c *current) onJoinStyle2() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle2()
}

func (c *current) onJoinStyle6() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle6()
}

func (c *current) onJoinStyle10() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle10()
}

func (c *current) onJoinStyle14() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonJoinStyle14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle14()
}

func (c *current) onJoinStyle18() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle18()
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onSampleProc1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "consts": []interface{}{}, "procs": []interface{}{

		map[string]interface{}{"kind": "Summarize",

			"keys": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "shape"},

				"rhs": map[string]interface{}{"kind": "Call", "name": "typeof",

					"args": []interface{}{e},

					"where": nil}}},

			"aggs": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "sample"},

				"rhs": map[string]interface{}{"kind": "Agg",

					"name": "any",

					"expr": e,

					"where": nil}}},

			"limit": 0},

		map[string]interface{}{"kind": "Cut",

			"args": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": nil,

				"rhs": map[string]interface{}{"kind": "ID", "name": "sample"}}}}}}, nil

}

func (p *parser) callonSampleProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleProc1(stack["e"])
}

func (c *current) onOpAssignment1(a interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpAssignment", "assignments": a}, nil

}

func (p *parser) callonOpAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpAssignment1(stack["a"])
}

func (c *current) onSampleExpr2(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonSampleExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr2(stack["lval"])
}

func (c *current) onSampleExpr7() (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": "this"}, nil
}

func (p *parser) callonSampleExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr7()
}

func (c *current) onFromProc1(source interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": []interface{}{map[string]interface{}{"kind": "Trunk", "source": source}}}, nil

}

func (p *parser) callonFromProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromProc1(stack["source"])
}

func (c *current) onFile1(path, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "File", "path": path, "format": format, "layout": layout}, nil

}

func (p *parser) callonFile1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile1(stack["path"], stack["format"], stack["layout"])
}

func (c *current) onFrom1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonFrom1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrom1(stack["body"])
}

func (c *current) onPool1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonPool1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPool1(stack["body"])
}

func (c *current) onPoolBody1(spec, at, over, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pool", "spec": spec, "at": at, "range": over, "scan_order": order}, nil

}

func (p *parser) callonPoolBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBody1(stack["spec"], stack["at"], stack["over"], stack["order"])
}

func (c *current) onGet1(url, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "HTTP", "url": url, "format": format, "layout": layout}, nil

}

func (p *parser) callonGet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGet1(stack["url"], stack["format"], stack["layout"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onPath2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonPath2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath2(stack["v"])
}

func (c *current) onPath5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPath5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath5()
}

func (c *current) onPoolAt1(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonPoolAt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolAt1(stack["id"])
}

func (c *current) onKSUID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKSUID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKSUID1()
}

func (c *current) onPoolRange1(lower, upper interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Range", "lower": lower, "upper": upper}, nil

}

func (p *parser) callonPoolRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolRange1(stack["lower"], stack["upper"])
}

func (c *current) onPoolSpec2(pool, commit, meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": pool, "commit": commit, "meta": meta}, nil

}

func (p *parser) callonPoolSpec2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec2(stack["pool"], stack["commit"], stack["meta"])
}

func (c *current) onPoolSpec12(meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": nil, "commit": nil, "meta": meta}, nil

}

func (p *parser) callonPoolSpec12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec12(stack["meta"])
}

func (c *current) onPoolCommit1(commit interface{}) (interface{}, error) {
	return commit, nil
}

func (p *parser) callonPoolCommit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolCommit1(stack["commit"])
}

func (c *current) onPoolMeta1(meta interface{}) (interface{}, error) {
	return meta, nil
}

func (p *parser) callonPoolMeta1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolMeta1(stack["meta"])
}

func (c *current) onPoolIdentifier1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPoolIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolIdentifier1()
}

func (c *current) onLayoutArg1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Layout", "keys": keys, "order": order}, nil

}

func (p *parser) callonLayoutArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLayoutArg1(stack["keys"], stack["order"])
}

func (c *current) onFormatArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonFormatArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArg1(stack["val"])
}

func (c *current) onOrderSuffix2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix2()
}

func (c *current) onOrderSuffix4() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderSuffix4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix4()
}

func (c *current) onOrderSuffix6() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix6()
}

func (c *current) onOrderArg2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg2()
}

func (c *current) onOrderArg8() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderArg8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg8()
}

func (c *current) onPassProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Pass"}, nil

}

func (p *parser) callonPassProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassProc1()
}

func (c *current) onExplodeProc1(args, typ, as interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Explode", "args": args, "as": as, "type": typ}, nil

}

func (p *parser) callonExplodeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplodeProc1(stack["args"], stack["typ"], stack["as"])
}

func (c *current) onMergeProc1(field interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Merge", "field": field}, nil

}

func (p *parser) callonMergeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMergeProc1(stack["field"])
}

func (c *current) onOverProc2(over interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Let", "locals": nil, "over": over}, nil

}

func (p *parser) callonOverProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverProc2(stack["over"])
}

func (c *current) onOverProc5(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Over", "exprs": exprs, "scope": nil, "as": ""}, nil

}

func (p *parser) callonOverProc5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverProc5(stack["exprs"])
}

func (c *current) onScopedOver1(exprs, as, scope interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Over", "exprs": exprs, "scope": scope, "as": as}, nil

}

func (p *parser) callonScopedOver1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScopedOver1(stack["exprs"], stack["as"], stack["scope"])
}

func (c *current) onOverWith1(exprs, locals, scope interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Let", "locals": locals, "over": map[string]interface{}{"kind": "Over", "exprs": exprs, "scope": scope, "as": ""}}, nil

}

func (p *parser) callonOverWith1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverWith1(stack["exprs"], stack["locals"], stack["scope"])
}

func (c *current) onAs2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonAs2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAs2(stack["id"])
}

func (c *current) onAs9() (interface{}, error) {
	return "", nil
}

func (p *parser) callonAs9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAs9()
}

func (c *current) onLetProc2(locals, over interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Let", "locals": locals, "over": over}, nil

}

func (p *parser) callonLetProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetProc2(stack["locals"], stack["over"])
}

func (c *current) onScope1(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonScope1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope1(stack["seq"])
}

func (c *current) onLetAssignments7(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonLetAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetAssignments7(stack["a"])
}

func (c *current) onLetAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLetAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetAssignments1(stack["first"], stack["rest"])
}

func (c *current) onLetAssignment2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"name": id, "expr": expr}, nil

}

func (p *parser) callonLetAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetAssignment2(stack["id"], stack["expr"])
}

func (c *current) onLetAssignment11(id interface{}) (interface{}, error) {
	return map[string]interface{}{"name": id, "expr": map[string]interface{}{"kind": "ID", "name": id}}, nil

}

func (p *parser) callonLetAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetAssignment11(stack["id"])
}

func (c *current) onYieldProc1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Yield", "exprs": exprs}, nil

}

func (p *parser) callonYieldProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYieldProc1(stack["exprs"])
}

func (c *current) onTypeArg1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeArg1(stack["typ"])
}

func (c *current) onAsArg1(lhs interface{}) (interface{}, error) {
	return lhs, nil
}

func (p *parser) callonAsArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsArg1(stack["lhs"])
}

func (c *current) onLvals7(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonLvals7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals7(stack["lval"])
}

func (c *current) onLvals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLvals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals1(stack["first"], stack["rest"])
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignments7(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments7(stack["a"])
}

func (c *current) onAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr2(condition, thenClause, elseClause interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Conditional", "cond": condition, "then": thenClause, "else": elseClause}, nil

}

func (p *parser) callonConditionalExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr2(stack["condition"], stack["thenClause"], stack["elseClause"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onEqualityCompareExpr9(comp, expr interface{}) (interface{}, error) {
	return []interface{}{comp, expr}, nil
}

func (p *parser) callonEqualityCompareExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr9(stack["comp"], stack["expr"])
}

func (c *current) onEqualityCompareExpr3(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonEqualityCompareExpr3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr3(stack["first"], stack["rest"])
}

func (c *current) onEqualityOperator2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonEqualityOperator2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator2()
}

func (c *current) onEqualityOperator4() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityOperator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator4()
}

func (c *current) onEqualityComparator3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityComparator3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityComparator3()
}

func (c *current) onRelativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonRelativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onRelativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonRelativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onRelativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeOperator1()
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onFuncExpr3(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr3(stack["first"], stack["rest"])
}

func (c *current) onFuncExpr10(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr10(stack["first"], stack["rest"])
}

func (c *current) onMatchExpr1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonMatchExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchExpr1(stack["expr"])
}

func (c *current) onCast1(typ, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": expr, "type": typ}, nil

}

func (p *parser) callonCast1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCast1(stack["typ"], stack["expr"])
}

func (c *current) onFunction1(fn, args, where interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": fn, "args": args, "where": where}, nil

}

func (p *parser) callonFunction1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction1(stack["fn"], stack["args"], stack["where"])
}

func (c *current) onOptionalExprs3() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonOptionalExprs3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalExprs3()
}

func (c *current) onExprs7(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonExprs7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs7(stack["e"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr1(stack["first"], stack["rest"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref13(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": nil, "rhs": to}}, nil

}

func (p *parser) callonDeref13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref13(stack["to"])
}

func (c *current) onDeref22(from interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": nil}}, nil

}

func (p *parser) callonDeref22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref22(stack["from"])
}

func (c *current) onDeref31(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref31(stack["expr"])
}

func (c *current) onDeref37(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref37(stack["id"])
}

func (c *current) onPrimary7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary7(stack["expr"])
}

func (c *current) onRecord1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RecordExpr", "elems": elems}, nil

}

func (p *parser) callonRecord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecord1(stack["elems"])
}

func (c *current) onRecordElems2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonRecordElems2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems2(stack["first"], stack["rest"])
}

func (c *current) onRecordElems9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonRecordElems9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems9()
}

func (c *current) onRecordElemTail1(elem interface{}) (interface{}, error) {
	return elem, nil
}

func (p *parser) callonRecordElemTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElemTail1(stack["elem"])
}

func (c *current) onSpread1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Spread", "expr": expr}, nil

}

func (p *parser) callonSpread1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpread1(stack["expr"])
}

func (c *current) onField1(name, value interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Field", "name": name, "value": value}, nil

}

func (p *parser) callonField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField1(stack["name"], stack["value"])
}

func (c *current) onArray1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ArrayExpr", "exprs": exprs}, nil

}

func (p *parser) callonArray1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArray1(stack["exprs"])
}

func (c *current) onSet1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SetExpr", "exprs": exprs}, nil

}

func (p *parser) callonSet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSet1(stack["exprs"])
}

func (c *current) onMap1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "MapExpr", "entries": exprs}, nil

}

func (p *parser) callonMap1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMap1(stack["exprs"])
}

func (c *current) onEntries2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonEntries2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries2(stack["first"], stack["rest"])
}

func (c *current) onEntries9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonEntries9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries9()
}

func (c *current) onEntryTail1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonEntryTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntryTail1(stack["e"])
}

func (c *current) onEntry1(key, value interface{}) (interface{}, error) {
	return map[string]interface{}{"key": key, "value": value}, nil

}

func (p *parser) callonEntry1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntry1(stack["key"], stack["value"])
}

func (c *current) onSQLProc1(selection, from, joins, where, groupby, having, orderby, limit interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "SQLExpr",

		"select": selection,

		"from": from,

		"joins": joins,

		"where": where,

		"group_by": groupby,

		"having": having,

		"order_by": orderby,

		"limit": limit}, nil

}

func (p *parser) callonSQLProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLProc1(stack["selection"], stack["from"], stack["joins"], stack["where"], stack["groupby"], stack["having"], stack["orderby"], stack["limit"])
}

func (c *current) onSQLSelect2() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLSelect2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect2()
}

func (c *current) onSQLSelect7(assignments interface{}) (interface{}, error) {
	return assignments, nil
}

func (p *parser) callonSQLSelect7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect7(stack["assignments"])
}

func (c *current) onSQLAssignment2(rhs, lhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonSQLAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment2(stack["rhs"], stack["lhs"])
}

func (c *current) onSQLAssignment11(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonSQLAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment11(stack["expr"])
}

func (c *current) onSQLAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments7(stack["expr"])
}

func (c *current) onSQLAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSQLFrom2(table, alias interface{}) (interface{}, error) {
	return map[string]interface{}{"table": table, "alias": alias}, nil

}

func (p *parser) callonSQLFrom2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom2(stack["table"], stack["alias"])
}

func (c *current) onSQLFrom12() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLFrom12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom12()
}

func (c *current) onSQLAlias2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias2(stack["id"])
}

func (c *current) onSQLAlias9(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias9(stack["id"])
}

func (c *current) onSQLJoins7(join interface{}) (interface{}, error) {
	return join, nil
}

func (p *parser) callonSQLJoins7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins7(stack["join"])
}

func (c *current) onSQLJoins1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLJoins1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins1(stack["first"], stack["rest"])
}

func (c *current) onSQLJoin1(style, table, alias, leftKey, rightKey interface{}) (interface{}, error) {
	return map[string]interface{}{

		"table": table,

		"style": style,

		"left_key": leftKey,

		"right_key": rightKey,

		"alias": alias}, nil

}

func (p *parser) callonSQLJoin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoin1(stack["style"], stack["table"], stack["alias"], stack["leftKey"], stack["rightKey"])
}

func (c *current) onSQLJoinStyle2(style interface{}) (interface{}, error) {
	return style, nil
}

func (p *parser) callonSQLJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle2(stack["style"])
}

func (c *current) onSQLJoinStyle11() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonSQLJoinStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle11()
}

func (c *current) onSQLWhere1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLWhere1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLWhere1(stack["expr"])
}

func (c *current) onSQLGroupBy1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonSQLGroupBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLGroupBy1(stack["columns"])
}

func (c *current) onSQLHaving1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLHaving1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLHaving1(stack["expr"])
}

func (c *current) onSQLOrderBy1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SQLOrderBy", "keys": keys, "order": order}, nil

}

func (p *parser) callonSQLOrderBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrderBy1(stack["keys"], stack["order"])
}

func (c *current) onSQLOrder2(dir interface{}) (interface{}, error) {
	return dir, nil
}

func (p *parser) callonSQLOrder2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder2(stack["dir"])
}

func (c *current) onSQLOrder9() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonSQLOrder9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder9()
}

func (c *current) onSQLLimit2(count interface{}) (interface{}, error) {
	return count, nil
}

func (p *parser) callonSQLLimit2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit2(stack["count"])
}

func (c *current) onSQLLimit9() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonSQLLimit9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit9()
}

func (c *current) onSELECT1() (interface{}, error) {
	return "select", nil
}

func (p *parser) callonSELECT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSELECT1()
}

func (c *current) onAS1() (interface{}, error) {
	return "as", nil
}

func (p *parser) callonAS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAS1()
}

func (c *current) onFROM1() (interface{}, error) {
	return "from", nil
}

func (p *parser) callonFROM1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFROM1()
}

func (c *current) onJOIN1() (interface{}, error) {
	return "join", nil
}

func (p *parser) callonJOIN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJOIN1()
}

func (c *current) onWHERE1() (interface{}, error) {
	return "where", nil
}

func (p *parser) callonWHERE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWHERE1()
}

func (c *current) onGROUP1() (interface{}, error) {
	return "group", nil
}

func (p *parser) callonGROUP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGROUP1()
}

func (c *current) onBY1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonBY1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBY1()
}

func (c *current) onHAVING1() (interface{}, error) {
	return "having", nil
}

func (p *parser) callonHAVING1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHAVING1()
}

func (c *current) onORDER1() (interface{}, error) {
	return "order", nil
}

func (p *parser) callonORDER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onORDER1()
}

func (c *current) onON1() (interface{}, error) {
	return "on", nil
}

func (p *parser) callonON1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onON1()
}

func (c *current) onLIMIT1() (interface{}, error) {
	return "limit", nil
}

func (p *parser) callonLIMIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIMIT1()
}

func (c *current) onASC1() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonASC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onASC1()
}

func (c *current) onDESC1() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonDESC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDESC1()
}

func (c *current) onANTI1() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonANTI1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onANTI1()
}

func (c *current) onLEFT1() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonLEFT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLEFT1()
}

func (c *current) onRIGHT1() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonRIGHT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRIGHT1()
}

func (c *current) onINNER1() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonINNER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINNER1()
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "float64", "text": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "int64", "text": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "null", "text": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onBytesLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bytes", "text": string(c.text)}, nil

}

func (p *parser) callonBytesLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBytesLiteral1()
}

func (c *current) onTypeLiteral1(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonTypeLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeLiteral1(stack["typ"])
}

func (c *current) onAmbiguousType2(name interface{}) (interface{}, error) {
	return name, nil
}

func (p *parser) callonAmbiguousType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType2(stack["name"])
}

func (c *current) onAmbiguousType8(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeDef", "name": name, "type": typ}, nil

}

func (p *parser) callonAmbiguousType8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType8(stack["name"], stack["typ"])
}

func (c *current) onAmbiguousType17(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType17(stack["name"])
}

func (c *current) onAmbiguousType20(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonAmbiguousType20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType20(stack["u"])
}

func (c *current) onTypeUnion1(types interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeUnion", "types": types}, nil

}

func (p *parser) callonTypeUnion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeUnion1(stack["types"])
}

func (c *current) onTypeList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeList1(stack["first"], stack["rest"])
}

func (c *current) onTypeListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeListTail1(stack["typ"])
}

func (c *current) onComplexType2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType2(stack["fields"])
}

func (c *current) onComplexType10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexType10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType10(stack["typ"])
}

func (c *current) onComplexType18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexType18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType18(stack["typ"])
}

func (c *current) onComplexType26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexType26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType26(stack["keyType"], stack["valType"])
}

func (c *current) onTemplateLiteral1(v interface{}) (interface{}, error) {
	if len(v.([]interface{})) == 0 {
		return map[string]interface{}{"kind": "Primitive", "type": "string", "text": ""}, nil
	}
	return makeTemplateExprChain(v), nil

}

func (p *parser) callonTemplateLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteral1(stack["v"])
}

func (c *current) onTemplateLiteralParts2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts2(stack["v"])
}

func (c *current) onTemplateLiteralParts9(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts9(stack["v"])
}

func (c *current) onTemplateDoubleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateDoubleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedPart3(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar2(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar7(stack["v"])
}

func (c *current) onTemplateSingleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateSingleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedPart3(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar2(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar7(stack["v"])
}

func (c *current) onTemplateExpr1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonTemplateExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateExpr1(stack["e"])
}

func (c *current) onPrimitiveType1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveType1()
}

func (c *current) onTypeFieldList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList1(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTail1(stack["typ"])
}

func (c *current) onTypeField1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeField1(stack["name"], stack["typ"])
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return "in", nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onIdentifierName19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName19()
}

func (c *current) onIdentifierName21(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName21(stack["id"])
}

func (c *current) onTime1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "time", "text": string(c.text)}, nil

}

func (p *parser) callonTime1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTime1()
}

func (c *current) onDuration1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "duration", "text": string(c.text)}, nil

}

func (p *parser) callonDuration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDuration1()
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordChars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordChars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordChars1()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onGlob1(head, tail interface{}) (interface{}, error) {
	return reglob.Reglob(head.(string) + joinChars(tail)), nil

}

func (p *parser) callonGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlob1(stack["head"], stack["tail"])
}

func (c *current) onGlobStart4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonGlobStart4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobStart4()
}

func (c *current) onGlobEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonGlobEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEsc1(stack["s"])
}

func (c *current) onGlobEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonGlobEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape2()
}

func (c *current) onGlobEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonGlobEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape4()
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onSingleCharEscape3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleCharEscape3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape3()
}

func (c *current) onSingleCharEscape6() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape6()
}

func (c *current) onSingleCharEscape8() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape8()
}

func (c *current) onSingleCharEscape10() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape10()
}

func (c *current) onSingleCharEscape12() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape12()
}

func (c *current) onSingleCharEscape14() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape14()
}

func (c *current) onSingleCharEscape16() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape16()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexp1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
