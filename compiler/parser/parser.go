// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 7, col: 1, offset: 26},
			expr: &choiceExpr{
				pos: position{line: 8, col: 5, offset: 36},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 8, col: 5, offset: 36},
						run: (*parser).callonstart2,
						expr: &seqExpr{
							pos: position{line: 8, col: 5, offset: 36},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 8, col: 5, offset: 36},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 8, col: 8, offset: 39},
									label: "scope",
									expr: &ruleRefExpr{
										pos:  position{line: 8, col: 14, offset: 45},
										name: "Scope",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 8, col: 20, offset: 51},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 8, col: 23, offset: 54},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 9, col: 5, offset: 99},
						run: (*parser).callonstart9,
						expr: &seqExpr{
							pos: position{line: 9, col: 5, offset: 99},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 9, col: 5, offset: 99},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 9, col: 8, offset: 102},
									label: "seq",
									expr: &ruleRefExpr{
										pos:  position{line: 9, col: 12, offset: 106},
										name: "Seq",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 9, col: 16, offset: 110},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 9, col: 19, offset: 113},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Scope",
			pos:  position{line: 11, col: 1, offset: 138},
			expr: &actionExpr{
				pos: position{line: 12, col: 5, offset: 148},
				run: (*parser).callonScope1,
				expr: &seqExpr{
					pos: position{line: 12, col: 5, offset: 148},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 12, col: 5, offset: 148},
							label: "decls",
							expr: &oneOrMoreExpr{
								pos: position{line: 12, col: 11, offset: 154},
								expr: &ruleRefExpr{
									pos:  position{line: 12, col: 11, offset: 154},
									name: "Decl",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 12, col: 17, offset: 160},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 12, col: 22, offset: 165},
								name: "Seq",
							},
						},
					},
				},
			},
		},
		{
			name: "Seq",
			pos:  position{line: 16, col: 1, offset: 266},
			expr: &actionExpr{
				pos: position{line: 17, col: 5, offset: 274},
				run: (*parser).callonSeq1,
				expr: &seqExpr{
					pos: position{line: 17, col: 5, offset: 274},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 5, offset: 274},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 11, offset: 280},
								name: "Operation",
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 21, offset: 290},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 17, col: 26, offset: 295},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 26, offset: 295},
									name: "SeqTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SeqTail",
			pos:  position{line: 21, col: 1, offset: 388},
			expr: &actionExpr{
				pos: position{line: 21, col: 11, offset: 398},
				run: (*parser).callonSeqTail1,
				expr: &seqExpr{
					pos: position{line: 21, col: 11, offset: 398},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 21, col: 11, offset: 398},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 14, offset: 401},
							name: "Pipe",
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 19, offset: 406},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 21, col: 22, offset: 409},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 24, offset: 411},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Decl",
			pos:  position{line: 23, col: 1, offset: 440},
			expr: &actionExpr{
				pos: position{line: 24, col: 5, offset: 449},
				run: (*parser).callonDecl1,
				expr: &seqExpr{
					pos: position{line: 24, col: 5, offset: 449},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 24, col: 5, offset: 449},
							label: "v",
							expr: &choiceExpr{
								pos: position{line: 24, col: 8, offset: 452},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 24, col: 8, offset: 452},
										name: "ConstDecl",
									},
									&ruleRefExpr{
										pos:  position{line: 24, col: 20, offset: 464},
										name: "FuncDecl",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 24, col: 30, offset: 474},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "ConstDecl",
			pos:  position{line: 26, col: 1, offset: 495},
			expr: &choiceExpr{
				pos: position{line: 27, col: 5, offset: 509},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 27, col: 5, offset: 509},
						run: (*parser).callonConstDecl2,
						expr: &seqExpr{
							pos: position{line: 27, col: 5, offset: 509},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 27, col: 5, offset: 509},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 13, offset: 517},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 15, offset: 519},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 18, offset: 522},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 33, offset: 537},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 27, col: 36, offset: 540},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 40, offset: 544},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 43, offset: 547},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 48, offset: 552},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 30, col: 5, offset: 657},
						run: (*parser).callonConstDecl13,
						expr: &seqExpr{
							pos: position{line: 30, col: 5, offset: 657},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 30, col: 5, offset: 657},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 12, offset: 664},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 14, offset: 666},
									label: "id",
									expr: &choiceExpr{
										pos: position{line: 30, col: 18, offset: 670},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 30, col: 18, offset: 670},
												name: "IdentifierName",
											},
											&ruleRefExpr{
												pos:  position{line: 30, col: 35, offset: 687},
												name: "QuotedString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 49, offset: 701},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 30, col: 52, offset: 704},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 56, offset: 708},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 59, offset: 711},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 30, col: 63, offset: 715},
										name: "Type",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuncDecl",
			pos:  position{line: 41, col: 1, offset: 984},
			expr: &actionExpr{
				pos: position{line: 42, col: 5, offset: 997},
				run: (*parser).callonFuncDecl1,
				expr: &seqExpr{
					pos: position{line: 42, col: 5, offset: 997},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 42, col: 5, offset: 997},
							val:        "func",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 12, offset: 1004},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 42, col: 14, offset: 1006},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 17, offset: 1009},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 32, offset: 1024},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 42, col: 35, offset: 1027},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 39, offset: 1031},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 42, col: 42, offset: 1034},
							label: "params",
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 49, offset: 1041},
								name: "IdentifierNames",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 65, offset: 1057},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 42, col: 68, offset: 1060},
							val:        ")",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 72, offset: 1064},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 42, col: 75, offset: 1067},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 79, offset: 1071},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 42, col: 82, offset: 1074},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 86, offset: 1078},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 42, col: 89, offset: 1081},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 94, offset: 1086},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 99, offset: 1091},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 42, col: 102, offset: 1094},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Operation",
			pos:  position{line: 55, col: 1, offset: 1278},
			expr: &choiceExpr{
				pos: position{line: 56, col: 5, offset: 1292},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 56, col: 5, offset: 1292},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 56, col: 5, offset: 1292},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 56, col: 5, offset: 1292},
									val:        "fork",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 56, col: 12, offset: 1299},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 56, col: 15, offset: 1302},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 56, col: 19, offset: 1306},
									label: "paths",
									expr: &oneOrMoreExpr{
										pos: position{line: 56, col: 25, offset: 1312},
										expr: &ruleRefExpr{
											pos:  position{line: 56, col: 25, offset: 1312},
											name: "Leg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 56, col: 30, offset: 1317},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 56, col: 33, offset: 1320},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 59, col: 5, offset: 1413},
						run: (*parser).callonOperation12,
						expr: &seqExpr{
							pos: position{line: 59, col: 5, offset: 1413},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 59, col: 5, offset: 1413},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 59, col: 14, offset: 1422},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 59, col: 16, offset: 1424},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 59, col: 21, offset: 1429},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 59, col: 26, offset: 1434},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 59, col: 28, offset: 1436},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 59, col: 32, offset: 1440},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 59, col: 38, offset: 1446},
										expr: &ruleRefExpr{
											pos:  position{line: 59, col: 38, offset: 1446},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 59, col: 49, offset: 1457},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 59, col: 52, offset: 1460},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 62, col: 5, offset: 1565},
						run: (*parser).callonOperation25,
						expr: &seqExpr{
							pos: position{line: 62, col: 5, offset: 1565},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 62, col: 5, offset: 1565},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 62, col: 14, offset: 1574},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 62, col: 17, offset: 1577},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 62, col: 21, offset: 1581},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 62, col: 27, offset: 1587},
										expr: &ruleRefExpr{
											pos:  position{line: 62, col: 27, offset: 1587},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 62, col: 38, offset: 1598},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 62, col: 41, offset: 1601},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 65, col: 5, offset: 1705},
						run: (*parser).callonOperation35,
						expr: &seqExpr{
							pos: position{line: 65, col: 5, offset: 1705},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 65, col: 5, offset: 1705},
									val:        "from",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 65, col: 12, offset: 1712},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 65, col: 15, offset: 1715},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 65, col: 19, offset: 1719},
									label: "trunks",
									expr: &oneOrMoreExpr{
										pos: position{line: 65, col: 26, offset: 1726},
										expr: &ruleRefExpr{
											pos:  position{line: 65, col: 26, offset: 1726},
											name: "FromLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 65, col: 35, offset: 1735},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 65, col: 38, offset: 1738},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 68, col: 5, offset: 1829},
						run: (*parser).callonOperation45,
						expr: &seqExpr{
							pos: position{line: 68, col: 5, offset: 1829},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 68, col: 5, offset: 1829},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 68, col: 9, offset: 1833},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 68, col: 12, offset: 1836},
									label: "scope",
									expr: &ruleRefExpr{
										pos:  position{line: 68, col: 18, offset: 1842},
										name: "Scope",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 68, col: 24, offset: 1848},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 68, col: 27, offset: 1851},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&labeledExpr{
						pos:   position{line: 69, col: 5, offset: 1881},
						label: "op",
						expr: &ruleRefExpr{
							pos:  position{line: 69, col: 8, offset: 1884},
							name: "Operator",
						},
					},
					&actionExpr{
						pos: position{line: 70, col: 5, offset: 1897},
						run: (*parser).callonOperation55,
						expr: &seqExpr{
							pos: position{line: 70, col: 5, offset: 1897},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 70, col: 5, offset: 1897},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 70, col: 7, offset: 1899},
										name: "OpAssignment",
									},
								},
								&andExpr{
									pos: position{line: 70, col: 20, offset: 1912},
									expr: &ruleRefExpr{
										pos:  position{line: 70, col: 21, offset: 1913},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 71, col: 5, offset: 1943},
						run: (*parser).callonOperation61,
						expr: &seqExpr{
							pos: position{line: 71, col: 5, offset: 1943},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 71, col: 5, offset: 1943},
									expr: &seqExpr{
										pos: position{line: 71, col: 7, offset: 1945},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 71, col: 7, offset: 1945},
												name: "Function",
											},
											&ruleRefExpr{
												pos:  position{line: 71, col: 16, offset: 1954},
												name: "EndOfOp",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 71, col: 25, offset: 1963},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 71, col: 27, offset: 1965},
										name: "Aggregation",
									},
								},
								&andExpr{
									pos: position{line: 71, col: 39, offset: 1977},
									expr: &ruleRefExpr{
										pos:  position{line: 71, col: 40, offset: 1978},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 72, col: 5, offset: 2008},
						run: (*parser).callonOperation71,
						expr: &seqExpr{
							pos: position{line: 72, col: 5, offset: 2008},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 72, col: 5, offset: 2008},
									val:        "search",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 72, col: 14, offset: 2017},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 72, col: 16, offset: 2019},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 72, col: 21, offset: 2024},
										name: "SearchBoolean",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 75, col: 5, offset: 2123},
						run: (*parser).callonOperation77,
						expr: &labeledExpr{
							pos:   position{line: 75, col: 5, offset: 2123},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 75, col: 10, offset: 2128},
								name: "SearchBoolean",
							},
						},
					},
					&actionExpr{
						pos: position{line: 78, col: 5, offset: 2227},
						run: (*parser).callonOperation80,
						expr: &labeledExpr{
							pos:   position{line: 78, col: 5, offset: 2227},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 78, col: 10, offset: 2232},
								name: "Cast",
							},
						},
					},
					&actionExpr{
						pos: position{line: 81, col: 5, offset: 2320},
						run: (*parser).callonOperation83,
						expr: &labeledExpr{
							pos:   position{line: 81, col: 5, offset: 2320},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 81, col: 10, offset: 2325},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "EndOfOp",
			pos:  position{line: 85, col: 1, offset: 2412},
			expr: &seqExpr{
				pos: position{line: 85, col: 11, offset: 2422},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 85, col: 11, offset: 2422},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 85, col: 15, offset: 2426},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 85, col: 15, offset: 2426},
								name: "Pipe",
							},
							&ruleRefExpr{
								pos:  position{line: 85, col: 22, offset: 2433},
								name: "SearchKeywordGuard",
							},
							&litMatcher{
								pos:        position{line: 85, col: 43, offset: 2454},
								val:        "=>",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 85, col: 50, offset: 2461},
								val:        ")",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 85, col: 56, offset: 2467},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "Pipe",
			pos:  position{line: 86, col: 1, offset: 2472},
			expr: &seqExpr{
				pos: position{line: 86, col: 8, offset: 2479},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 86, col: 8, offset: 2479},
						val:        "|",
						ignoreCase: false,
					},
					&notExpr{
						pos: position{line: 86, col: 12, offset: 2483},
						expr: &choiceExpr{
							pos: position{line: 86, col: 14, offset: 2485},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 86, col: 14, offset: 2485},
									val:        "{",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 86, col: 20, offset: 2491},
									val:        "[",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Leg",
			pos:  position{line: 88, col: 1, offset: 2497},
			expr: &actionExpr{
				pos: position{line: 88, col: 7, offset: 2503},
				run: (*parser).callonLeg1,
				expr: &seqExpr{
					pos: position{line: 88, col: 7, offset: 2503},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 88, col: 7, offset: 2503},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 88, col: 10, offset: 2506},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 88, col: 15, offset: 2511},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 88, col: 18, offset: 2514},
							label: "seq",
							expr: &ruleRefExpr{
								pos:  position{line: 88, col: 22, offset: 2518},
								name: "Seq",
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchLeg",
			pos:  position{line: 90, col: 1, offset: 2543},
			expr: &actionExpr{
				pos: position{line: 91, col: 5, offset: 2557},
				run: (*parser).callonSwitchLeg1,
				expr: &seqExpr{
					pos: position{line: 91, col: 5, offset: 2557},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 91, col: 5, offset: 2557},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 91, col: 8, offset: 2560},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 91, col: 13, offset: 2565},
								name: "Case",
							},
						},
						&labeledExpr{
							pos:   position{line: 91, col: 18, offset: 2570},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 91, col: 23, offset: 2575},
								name: "Leg",
							},
						},
					},
				},
			},
		},
		{
			name: "Case",
			pos:  position{line: 95, col: 1, offset: 2657},
			expr: &choiceExpr{
				pos: position{line: 96, col: 5, offset: 2666},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 96, col: 5, offset: 2666},
						run: (*parser).callonCase2,
						expr: &seqExpr{
							pos: position{line: 96, col: 5, offset: 2666},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 96, col: 5, offset: 2666},
									val:        "case",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 96, col: 12, offset: 2673},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 96, col: 14, offset: 2675},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 96, col: 19, offset: 2680},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 97, col: 5, offset: 2710},
						run: (*parser).callonCase8,
						expr: &litMatcher{
							pos:        position{line: 97, col: 5, offset: 2710},
							val:        "default",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromLeg",
			pos:  position{line: 99, col: 1, offset: 2741},
			expr: &actionExpr{
				pos: position{line: 100, col: 5, offset: 2753},
				run: (*parser).callonFromLeg1,
				expr: &seqExpr{
					pos: position{line: 100, col: 5, offset: 2753},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 100, col: 5, offset: 2753},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 100, col: 8, offset: 2756},
							label: "source",
							expr: &ruleRefExpr{
								pos:  position{line: 100, col: 15, offset: 2763},
								name: "FromSource",
							},
						},
						&labeledExpr{
							pos:   position{line: 100, col: 26, offset: 2774},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 100, col: 30, offset: 2778},
								expr: &seqExpr{
									pos: position{line: 100, col: 31, offset: 2779},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 100, col: 31, offset: 2779},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 100, col: 34, offset: 2782},
											val:        "=>",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 100, col: 39, offset: 2787},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 100, col: 42, offset: 2790},
											name: "Seq",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FromSource",
			pos:  position{line: 108, col: 1, offset: 2981},
			expr: &choiceExpr{
				pos: position{line: 109, col: 5, offset: 2996},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 109, col: 5, offset: 2996},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 110, col: 5, offset: 3005},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 111, col: 5, offset: 3013},
						name: "Pool",
					},
					&ruleRefExpr{
						pos:  position{line: 112, col: 5, offset: 3022},
						name: "PassOp",
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 114, col: 1, offset: 3030},
			expr: &seqExpr{
				pos: position{line: 114, col: 13, offset: 3042},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 114, col: 13, offset: 3042},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 114, col: 17, offset: 3046},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 114, col: 18, offset: 3047},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 114, col: 18, offset: 3047},
										expr: &litMatcher{
											pos:        position{line: 114, col: 19, offset: 3048},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 114, col: 24, offset: 3053},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 114, col: 38, offset: 3067},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 114, col: 57, offset: 3086},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 114, col: 82, offset: 3111},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 114, col: 88, offset: 3117},
								val:        "(",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 114, col: 94, offset: 3123},
								val:        "[",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 114, col: 100, offset: 3129},
								val:        "~",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 116, col: 1, offset: 3135},
			expr: &actionExpr{
				pos: position{line: 116, col: 14, offset: 3148},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 116, col: 15, offset: 3149},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 116, col: 15, offset: 3149},
							val:        "==",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 116, col: 22, offset: 3156},
							val:        "!=",
							ignoreCase: false,
						},
						&seqExpr{
							pos: position{line: 116, col: 30, offset: 3164},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 116, col: 30, offset: 3164},
									val:        "in",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 116, col: 35, offset: 3169},
									expr: &ruleRefExpr{
										pos:  position{line: 116, col: 36, offset: 3170},
										name: "IdentifierRest",
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 116, col: 54, offset: 3188},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 116, col: 61, offset: 3195},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 116, col: 67, offset: 3201},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 116, col: 74, offset: 3208},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 118, col: 1, offset: 3245},
			expr: &actionExpr{
				pos: position{line: 119, col: 5, offset: 3263},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 119, col: 5, offset: 3263},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 119, col: 5, offset: 3263},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 119, col: 11, offset: 3269},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 119, col: 21, offset: 3279},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 119, col: 26, offset: 3284},
								expr: &ruleRefExpr{
									pos:  position{line: 119, col: 26, offset: 3284},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 123, col: 1, offset: 3358},
			expr: &actionExpr{
				pos: position{line: 123, col: 16, offset: 3373},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 123, col: 16, offset: 3373},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 123, col: 16, offset: 3373},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 123, col: 18, offset: 3375},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 123, col: 26, offset: 3383},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 123, col: 28, offset: 3385},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 123, col: 30, offset: 3387},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 125, col: 1, offset: 3437},
			expr: &actionExpr{
				pos: position{line: 126, col: 5, offset: 3451},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 126, col: 5, offset: 3451},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 126, col: 5, offset: 3451},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 126, col: 11, offset: 3457},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 127, col: 5, offset: 3474},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 127, col: 10, offset: 3479},
								expr: &actionExpr{
									pos: position{line: 127, col: 11, offset: 3480},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 127, col: 11, offset: 3480},
										exprs: []interface{}{
											&zeroOrOneExpr{
												pos: position{line: 127, col: 11, offset: 3480},
												expr: &seqExpr{
													pos: position{line: 127, col: 12, offset: 3481},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 127, col: 12, offset: 3481},
															name: "_",
														},
														&ruleRefExpr{
															pos:  position{line: 127, col: 14, offset: 3483},
															name: "AndToken",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 127, col: 25, offset: 3494},
												name: "_",
											},
											&notExpr{
												pos: position{line: 127, col: 27, offset: 3496},
												expr: &choiceExpr{
													pos: position{line: 127, col: 29, offset: 3498},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 127, col: 29, offset: 3498},
															name: "OrToken",
														},
														&ruleRefExpr{
															pos:  position{line: 127, col: 39, offset: 3508},
															name: "SearchKeywordGuard",
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 127, col: 59, offset: 3528},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 127, col: 64, offset: 3533},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchKeywordGuard",
			pos:  position{line: 131, col: 1, offset: 3651},
			expr: &choiceExpr{
				pos: position{line: 132, col: 5, offset: 3674},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 132, col: 5, offset: 3674},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 132, col: 5, offset: 3674},
								name: "FromSource",
							},
							&ruleRefExpr{
								pos:  position{line: 132, col: 16, offset: 3685},
								name: "__",
							},
							&litMatcher{
								pos:        position{line: 132, col: 19, offset: 3688},
								val:        "=>",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 132, col: 24, offset: 3693},
								name: "__",
							},
						},
					},
					&seqExpr{
						pos: position{line: 133, col: 5, offset: 3700},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 133, col: 5, offset: 3700},
								name: "Case",
							},
							&ruleRefExpr{
								pos:  position{line: 133, col: 10, offset: 3705},
								name: "__",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 135, col: 1, offset: 3709},
			expr: &choiceExpr{
				pos: position{line: 136, col: 5, offset: 3726},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 136, col: 5, offset: 3726},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 136, col: 5, offset: 3726},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 136, col: 6, offset: 3727},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 136, col: 6, offset: 3727},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 136, col: 6, offset: 3727},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 136, col: 15, offset: 3736},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 136, col: 19, offset: 3740},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 136, col: 19, offset: 3740},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 136, col: 23, offset: 3744},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 136, col: 27, offset: 3748},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 136, col: 29, offset: 3750},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 139, col: 5, offset: 3862},
						run: (*parser).callonSearchFactor13,
						expr: &seqExpr{
							pos: position{line: 139, col: 5, offset: 3862},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 139, col: 5, offset: 3862},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 139, col: 9, offset: 3866},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 139, col: 12, offset: 3869},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 139, col: 17, offset: 3874},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 139, col: 31, offset: 3888},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 139, col: 34, offset: 3891},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 140, col: 5, offset: 3920},
						name: "SearchExpr",
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 142, col: 1, offset: 3932},
			expr: &choiceExpr{
				pos: position{line: 143, col: 5, offset: 3947},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 143, col: 5, offset: 3947},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 144, col: 5, offset: 3958},
						name: "Glob",
					},
					&actionExpr{
						pos: position{line: 145, col: 5, offset: 3967},
						run: (*parser).callonSearchExpr4,
						expr: &seqExpr{
							pos: position{line: 145, col: 5, offset: 3967},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 145, col: 5, offset: 3967},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 145, col: 7, offset: 3969},
										name: "SearchValue",
									},
								},
								&choiceExpr{
									pos: position{line: 145, col: 20, offset: 3982},
									alternatives: []interface{}{
										&notExpr{
											pos: position{line: 145, col: 20, offset: 3982},
											expr: &ruleRefExpr{
												pos:  position{line: 145, col: 21, offset: 3983},
												name: "ExprGuard",
											},
										},
										&andExpr{
											pos: position{line: 145, col: 33, offset: 3995},
											expr: &seqExpr{
												pos: position{line: 145, col: 35, offset: 3997},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 145, col: 35, offset: 3997},
														name: "_",
													},
													&ruleRefExpr{
														pos:  position{line: 145, col: 37, offset: 3999},
														name: "Glob",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 148, col: 5, offset: 4111},
						run: (*parser).callonSearchExpr15,
						expr: &seqExpr{
							pos: position{line: 148, col: 5, offset: 4111},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 148, col: 5, offset: 4111},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 148, col: 9, offset: 4115},
									expr: &ruleRefExpr{
										pos:  position{line: 148, col: 10, offset: 4116},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 151, col: 5, offset: 4232},
						name: "SearchPredicate",
					},
				},
			},
		},
		{
			name: "SearchPredicate",
			pos:  position{line: 153, col: 1, offset: 4249},
			expr: &choiceExpr{
				pos: position{line: 154, col: 5, offset: 4269},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 154, col: 5, offset: 4269},
						run: (*parser).callonSearchPredicate2,
						expr: &seqExpr{
							pos: position{line: 154, col: 5, offset: 4269},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 154, col: 5, offset: 4269},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 154, col: 9, offset: 4273},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 154, col: 22, offset: 4286},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 154, col: 25, offset: 4289},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 154, col: 28, offset: 4292},
										name: "Comparator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 154, col: 39, offset: 4303},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 154, col: 42, offset: 4306},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 154, col: 46, offset: 4310},
										name: "AdditiveExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 157, col: 6, offset: 4433},
						run: (*parser).callonSearchPredicate12,
						expr: &seqExpr{
							pos: position{line: 157, col: 6, offset: 4433},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 157, col: 6, offset: 4433},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 157, col: 12, offset: 4439},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 157, col: 21, offset: 4448},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 157, col: 26, offset: 4453},
										expr: &ruleRefExpr{
											pos:  position{line: 157, col: 27, offset: 4454},
											name: "Deref",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 161, col: 1, offset: 4526},
			expr: &choiceExpr{
				pos: position{line: 162, col: 5, offset: 4542},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 162, col: 5, offset: 4542},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 163, col: 5, offset: 4554},
						run: (*parser).callonSearchValue3,
						expr: &seqExpr{
							pos: position{line: 163, col: 5, offset: 4554},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 163, col: 5, offset: 4554},
									expr: &ruleRefExpr{
										pos:  position{line: 163, col: 6, offset: 4555},
										name: "RegexpPattern",
									},
								},
								&labeledExpr{
									pos:   position{line: 163, col: 20, offset: 4569},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 163, col: 22, offset: 4571},
										name: "KeyWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Glob",
			pos:  position{line: 167, col: 1, offset: 4679},
			expr: &actionExpr{
				pos: position{line: 168, col: 5, offset: 4688},
				run: (*parser).callonGlob1,
				expr: &labeledExpr{
					pos:   position{line: 168, col: 5, offset: 4688},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 168, col: 13, offset: 4696},
						name: "GlobPattern",
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 172, col: 1, offset: 4792},
			expr: &actionExpr{
				pos: position{line: 173, col: 5, offset: 4803},
				run: (*parser).callonRegexp1,
				expr: &labeledExpr{
					pos:   position{line: 173, col: 5, offset: 4803},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 173, col: 13, offset: 4811},
						name: "RegexpPattern",
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 179, col: 1, offset: 4937},
			expr: &choiceExpr{
				pos: position{line: 180, col: 5, offset: 4953},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 180, col: 5, offset: 4953},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 180, col: 5, offset: 4953},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 180, col: 5, offset: 4953},
									expr: &ruleRefExpr{
										pos:  position{line: 180, col: 5, offset: 4953},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 180, col: 16, offset: 4964},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 180, col: 21, offset: 4969},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 180, col: 33, offset: 4981},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 180, col: 39, offset: 4987},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 183, col: 5, offset: 5113},
						run: (*parser).callonAggregation10,
						expr: &seqExpr{
							pos: position{line: 183, col: 5, offset: 5113},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 183, col: 5, offset: 5113},
									expr: &ruleRefExpr{
										pos:  position{line: 183, col: 5, offset: 5113},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 183, col: 16, offset: 5124},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 183, col: 21, offset: 5129},
										name: "AggAssignments",
									},
								},
								&labeledExpr{
									pos:   position{line: 183, col: 36, offset: 5144},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 183, col: 41, offset: 5149},
										expr: &seqExpr{
											pos: position{line: 183, col: 42, offset: 5150},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 183, col: 42, offset: 5150},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 183, col: 44, offset: 5152},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 183, col: 58, offset: 5166},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 183, col: 64, offset: 5172},
										name: "LimitArg",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Summarize",
			pos:  position{line: 191, col: 1, offset: 5386},
			expr: &seqExpr{
				pos: position{line: 191, col: 13, offset: 5398},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 191, col: 13, offset: 5398},
						val:        "summarize",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 191, col: 25, offset: 5410},
						name: "_",
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 193, col: 1, offset: 5413},
			expr: &actionExpr{
				pos: position{line: 194, col: 5, offset: 5429},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 194, col: 5, offset: 5429},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 194, col: 5, offset: 5429},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 194, col: 13, offset: 5437},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 194, col: 15, offset: 5439},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 194, col: 23, offset: 5447},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 196, col: 1, offset: 5488},
			expr: &choiceExpr{
				pos: position{line: 197, col: 5, offset: 5501},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 197, col: 5, offset: 5501},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 197, col: 5, offset: 5501},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 197, col: 5, offset: 5501},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 197, col: 7, offset: 5503},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 197, col: 14, offset: 5510},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 197, col: 16, offset: 5512},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 197, col: 25, offset: 5521},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 197, col: 27, offset: 5523},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 197, col: 33, offset: 5529},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 198, col: 5, offset: 5560},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 198, col: 5, offset: 5560},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 203, col: 1, offset: 5820},
			expr: &choiceExpr{
				pos: position{line: 204, col: 5, offset: 5839},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 204, col: 5, offset: 5839},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 205, col: 5, offset: 5854},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 205, col: 5, offset: 5854},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 205, col: 10, offset: 5859},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 207, col: 1, offset: 5951},
			expr: &actionExpr{
				pos: position{line: 208, col: 5, offset: 5971},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 208, col: 5, offset: 5971},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 208, col: 5, offset: 5971},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 208, col: 11, offset: 5977},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 208, col: 26, offset: 5992},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 208, col: 31, offset: 5997},
								expr: &actionExpr{
									pos: position{line: 208, col: 32, offset: 5998},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 208, col: 32, offset: 5998},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 208, col: 32, offset: 5998},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 208, col: 35, offset: 6001},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 208, col: 39, offset: 6005},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 208, col: 42, offset: 6008},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 208, col: 47, offset: 6013},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignment",
			pos:  position{line: 212, col: 1, offset: 6135},
			expr: &choiceExpr{
				pos: position{line: 213, col: 5, offset: 6153},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 213, col: 5, offset: 6153},
						run: (*parser).callonAggAssignment2,
						expr: &seqExpr{
							pos: position{line: 213, col: 5, offset: 6153},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 213, col: 5, offset: 6153},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 213, col: 10, offset: 6158},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 213, col: 15, offset: 6163},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 213, col: 18, offset: 6166},
									val:        ":=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 213, col: 23, offset: 6171},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 213, col: 26, offset: 6174},
									label: "agg",
									expr: &ruleRefExpr{
										pos:  position{line: 213, col: 30, offset: 6178},
										name: "Agg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 216, col: 5, offset: 6282},
						run: (*parser).callonAggAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 216, col: 5, offset: 6282},
							label: "agg",
							expr: &ruleRefExpr{
								pos:  position{line: 216, col: 9, offset: 6286},
								name: "Agg",
							},
						},
					},
				},
			},
		},
		{
			name: "Agg",
			pos:  position{line: 220, col: 1, offset: 6386},
			expr: &actionExpr{
				pos: position{line: 221, col: 5, offset: 6394},
				run: (*parser).callonAgg1,
				expr: &seqExpr{
					pos: position{line: 221, col: 5, offset: 6394},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 221, col: 5, offset: 6394},
							expr: &ruleRefExpr{
								pos:  position{line: 221, col: 6, offset: 6395},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 221, col: 16, offset: 6405},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 221, col: 19, offset: 6408},
								name: "AggName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 221, col: 27, offset: 6416},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 221, col: 30, offset: 6419},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 221, col: 34, offset: 6423},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 221, col: 37, offset: 6426},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 221, col: 42, offset: 6431},
								expr: &choiceExpr{
									pos: position{line: 221, col: 43, offset: 6432},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 221, col: 43, offset: 6432},
											name: "OverExpr",
										},
										&ruleRefExpr{
											pos:  position{line: 221, col: 54, offset: 6443},
											name: "Expr",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 221, col: 61, offset: 6450},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 221, col: 64, offset: 6453},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 221, col: 68, offset: 6457},
							expr: &seqExpr{
								pos: position{line: 221, col: 70, offset: 6459},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 221, col: 70, offset: 6459},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 221, col: 73, offset: 6462},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 221, col: 78, offset: 6467},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 221, col: 84, offset: 6473},
								expr: &ruleRefExpr{
									pos:  position{line: 221, col: 84, offset: 6473},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggName",
			pos:  position{line: 229, col: 1, offset: 6664},
			expr: &choiceExpr{
				pos: position{line: 230, col: 5, offset: 6676},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 230, col: 5, offset: 6676},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 231, col: 5, offset: 6695},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 232, col: 5, offset: 6708},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 234, col: 1, offset: 6717},
			expr: &actionExpr{
				pos: position{line: 234, col: 15, offset: 6731},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 234, col: 15, offset: 6731},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 234, col: 15, offset: 6731},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 234, col: 17, offset: 6733},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 234, col: 25, offset: 6741},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 234, col: 27, offset: 6743},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 234, col: 32, offset: 6748},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignments",
			pos:  position{line: 236, col: 1, offset: 6784},
			expr: &actionExpr{
				pos: position{line: 237, col: 5, offset: 6803},
				run: (*parser).callonAggAssignments1,
				expr: &seqExpr{
					pos: position{line: 237, col: 5, offset: 6803},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 237, col: 5, offset: 6803},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 237, col: 11, offset: 6809},
								name: "AggAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 237, col: 25, offset: 6823},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 237, col: 30, offset: 6828},
								expr: &seqExpr{
									pos: position{line: 237, col: 31, offset: 6829},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 237, col: 31, offset: 6829},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 237, col: 34, offset: 6832},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 237, col: 38, offset: 6836},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 237, col: 41, offset: 6839},
											name: "AggAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 247, col: 1, offset: 7063},
			expr: &choiceExpr{
				pos: position{line: 248, col: 5, offset: 7076},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 248, col: 5, offset: 7076},
						name: "AssertOp",
					},
					&ruleRefExpr{
						pos:  position{line: 249, col: 5, offset: 7089},
						name: "SortOp",
					},
					&ruleRefExpr{
						pos:  position{line: 250, col: 5, offset: 7100},
						name: "TopOp",
					},
					&ruleRefExpr{
						pos:  position{line: 251, col: 5, offset: 7110},
						name: "CutOp",
					},
					&ruleRefExpr{
						pos:  position{line: 252, col: 5, offset: 7120},
						name: "DropOp",
					},
					&ruleRefExpr{
						pos:  position{line: 253, col: 5, offset: 7131},
						name: "HeadOp",
					},
					&ruleRefExpr{
						pos:  position{line: 254, col: 5, offset: 7142},
						name: "TailOp",
					},
					&ruleRefExpr{
						pos:  position{line: 255, col: 5, offset: 7153},
						name: "WhereOp",
					},
					&ruleRefExpr{
						pos:  position{line: 256, col: 5, offset: 7165},
						name: "UniqOp",
					},
					&ruleRefExpr{
						pos:  position{line: 257, col: 5, offset: 7176},
						name: "PutOp",
					},
					&ruleRefExpr{
						pos:  position{line: 258, col: 5, offset: 7186},
						name: "RenameOp",
					},
					&ruleRefExpr{
						pos:  position{line: 259, col: 5, offset: 7199},
						name: "FuseOp",
					},
					&ruleRefExpr{
						pos:  position{line: 260, col: 5, offset: 7210},
						name: "ShapeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 261, col: 5, offset: 7222},
						name: "JoinOp",
					},
					&ruleRefExpr{
						pos:  position{line: 262, col: 5, offset: 7233},
						name: "SampleOp",
					},
					&ruleRefExpr{
						pos:  position{line: 263, col: 5, offset: 7246},
						name: "SQLOp",
					},
					&ruleRefExpr{
						pos:  position{line: 264, col: 5, offset: 7256},
						name: "FromOp",
					},
					&ruleRefExpr{
						pos:  position{line: 265, col: 5, offset: 7267},
						name: "PassOp",
					},
					&ruleRefExpr{
						pos:  position{line: 266, col: 5, offset: 7278},
						name: "ExplodeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 267, col: 5, offset: 7292},
						name: "MergeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 268, col: 5, offset: 7304},
						name: "OverOp",
					},
					&ruleRefExpr{
						pos:  position{line: 269, col: 5, offset: 7315},
						name: "YieldOp",
					},
					&ruleRefExpr{
						pos:  position{line: 270, col: 5, offset: 7327},
						name: "LoadOp",
					},
				},
			},
		},
		{
			name: "AssertOp",
			pos:  position{line: 272, col: 1, offset: 7335},
			expr: &actionExpr{
				pos: position{line: 273, col: 5, offset: 7348},
				run: (*parser).callonAssertOp1,
				expr: &seqExpr{
					pos: position{line: 273, col: 5, offset: 7348},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 273, col: 5, offset: 7348},
							val:        "assert",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 273, col: 14, offset: 7357},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 273, col: 16, offset: 7359},
							label: "expr",
							expr: &actionExpr{
								pos: position{line: 273, col: 22, offset: 7365},
								run: (*parser).callonAssertOp6,
								expr: &labeledExpr{
									pos:   position{line: 273, col: 22, offset: 7365},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 273, col: 24, offset: 7367},
										name: "Expr",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortOp",
			pos:  position{line: 309, col: 1, offset: 8718},
			expr: &actionExpr{
				pos: position{line: 310, col: 5, offset: 8729},
				run: (*parser).callonSortOp1,
				expr: &seqExpr{
					pos: position{line: 310, col: 5, offset: 8729},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 310, col: 5, offset: 8729},
							val:        "sort",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 310, col: 12, offset: 8736},
							expr: &ruleRefExpr{
								pos:  position{line: 310, col: 13, offset: 8737},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 310, col: 18, offset: 8742},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 310, col: 23, offset: 8747},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 310, col: 32, offset: 8756},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 310, col: 37, offset: 8761},
								expr: &actionExpr{
									pos: position{line: 310, col: 38, offset: 8762},
									run: (*parser).callonSortOp10,
									expr: &seqExpr{
										pos: position{line: 310, col: 38, offset: 8762},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 310, col: 38, offset: 8762},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 310, col: 40, offset: 8764},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 310, col: 42, offset: 8766},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 324, col: 1, offset: 9177},
			expr: &actionExpr{
				pos: position{line: 324, col: 12, offset: 9188},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 324, col: 12, offset: 9188},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 324, col: 17, offset: 9193},
						expr: &actionExpr{
							pos: position{line: 324, col: 18, offset: 9194},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 324, col: 18, offset: 9194},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 324, col: 18, offset: 9194},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 324, col: 20, offset: 9196},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 324, col: 22, offset: 9198},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 326, col: 1, offset: 9255},
			expr: &choiceExpr{
				pos: position{line: 327, col: 5, offset: 9267},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 327, col: 5, offset: 9267},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 327, col: 5, offset: 9267},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 328, col: 5, offset: 9342},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 328, col: 5, offset: 9342},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 328, col: 5, offset: 9342},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 328, col: 14, offset: 9351},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 328, col: 16, offset: 9353},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 328, col: 23, offset: 9360},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 328, col: 24, offset: 9361},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 328, col: 24, offset: 9361},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 328, col: 34, offset: 9371},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopOp",
			pos:  position{line: 330, col: 1, offset: 9484},
			expr: &actionExpr{
				pos: position{line: 331, col: 5, offset: 9494},
				run: (*parser).callonTopOp1,
				expr: &seqExpr{
					pos: position{line: 331, col: 5, offset: 9494},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 331, col: 5, offset: 9494},
							val:        "top",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 331, col: 11, offset: 9500},
							expr: &ruleRefExpr{
								pos:  position{line: 331, col: 12, offset: 9501},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 331, col: 17, offset: 9506},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 331, col: 23, offset: 9512},
								expr: &actionExpr{
									pos: position{line: 331, col: 24, offset: 9513},
									run: (*parser).callonTopOp8,
									expr: &seqExpr{
										pos: position{line: 331, col: 24, offset: 9513},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 331, col: 24, offset: 9513},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 331, col: 26, offset: 9515},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 331, col: 28, offset: 9517},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 331, col: 53, offset: 9542},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 331, col: 59, offset: 9548},
								expr: &seqExpr{
									pos: position{line: 331, col: 60, offset: 9549},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 331, col: 60, offset: 9549},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 331, col: 62, offset: 9551},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 331, col: 73, offset: 9562},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 331, col: 80, offset: 9569},
								expr: &actionExpr{
									pos: position{line: 331, col: 81, offset: 9570},
									run: (*parser).callonTopOp20,
									expr: &seqExpr{
										pos: position{line: 331, col: 81, offset: 9570},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 331, col: 81, offset: 9570},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 331, col: 83, offset: 9572},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 331, col: 85, offset: 9574},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutOp",
			pos:  position{line: 345, col: 1, offset: 9909},
			expr: &actionExpr{
				pos: position{line: 346, col: 5, offset: 9919},
				run: (*parser).callonCutOp1,
				expr: &seqExpr{
					pos: position{line: 346, col: 5, offset: 9919},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 346, col: 5, offset: 9919},
							val:        "cut",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 346, col: 11, offset: 9925},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 346, col: 13, offset: 9927},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 346, col: 18, offset: 9932},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropOp",
			pos:  position{line: 350, col: 1, offset: 10027},
			expr: &actionExpr{
				pos: position{line: 351, col: 5, offset: 10038},
				run: (*parser).callonDropOp1,
				expr: &seqExpr{
					pos: position{line: 351, col: 5, offset: 10038},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 351, col: 5, offset: 10038},
							val:        "drop",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 351, col: 12, offset: 10045},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 351, col: 14, offset: 10047},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 351, col: 19, offset: 10052},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadOp",
			pos:  position{line: 355, col: 1, offset: 10143},
			expr: &choiceExpr{
				pos: position{line: 356, col: 5, offset: 10154},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 356, col: 5, offset: 10154},
						run: (*parser).callonHeadOp2,
						expr: &seqExpr{
							pos: position{line: 356, col: 5, offset: 10154},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 356, col: 5, offset: 10154},
									val:        "head",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 356, col: 12, offset: 10161},
									name: "_",
								},
								&notExpr{
									pos: position{line: 356, col: 14, offset: 10163},
									expr: &ruleRefExpr{
										pos:  position{line: 356, col: 15, offset: 10164},
										name: "EndOfOp",
									},
								},
								&labeledExpr{
									pos:   position{line: 356, col: 23, offset: 10172},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 356, col: 29, offset: 10178},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 357, col: 5, offset: 10258},
						run: (*parser).callonHeadOp10,
						expr: &litMatcher{
							pos:        position{line: 357, col: 5, offset: 10258},
							val:        "head",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TailOp",
			pos:  position{line: 359, col: 1, offset: 10405},
			expr: &choiceExpr{
				pos: position{line: 360, col: 5, offset: 10416},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 360, col: 5, offset: 10416},
						run: (*parser).callonTailOp2,
						expr: &seqExpr{
							pos: position{line: 360, col: 5, offset: 10416},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 360, col: 5, offset: 10416},
									val:        "tail",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 360, col: 12, offset: 10423},
									name: "_",
								},
								&notExpr{
									pos: position{line: 360, col: 14, offset: 10425},
									expr: &ruleRefExpr{
										pos:  position{line: 360, col: 15, offset: 10426},
										name: "EndOfOp",
									},
								},
								&labeledExpr{
									pos:   position{line: 360, col: 23, offset: 10434},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 360, col: 29, offset: 10440},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 361, col: 5, offset: 10520},
						run: (*parser).callonTailOp10,
						expr: &litMatcher{
							pos:        position{line: 361, col: 5, offset: 10520},
							val:        "tail",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "WhereOp",
			pos:  position{line: 363, col: 1, offset: 10667},
			expr: &actionExpr{
				pos: position{line: 364, col: 5, offset: 10679},
				run: (*parser).callonWhereOp1,
				expr: &seqExpr{
					pos: position{line: 364, col: 5, offset: 10679},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 364, col: 5, offset: 10679},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 364, col: 13, offset: 10687},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 364, col: 15, offset: 10689},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 364, col: 20, offset: 10694},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "UniqOp",
			pos:  position{line: 368, col: 1, offset: 10780},
			expr: &choiceExpr{
				pos: position{line: 369, col: 5, offset: 10791},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 369, col: 5, offset: 10791},
						run: (*parser).callonUniqOp2,
						expr: &seqExpr{
							pos: position{line: 369, col: 5, offset: 10791},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 369, col: 5, offset: 10791},
									val:        "uniq",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 369, col: 12, offset: 10798},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 369, col: 14, offset: 10800},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 372, col: 5, offset: 10889},
						run: (*parser).callonUniqOp7,
						expr: &litMatcher{
							pos:        position{line: 372, col: 5, offset: 10889},
							val:        "uniq",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PutOp",
			pos:  position{line: 376, col: 1, offset: 10978},
			expr: &actionExpr{
				pos: position{line: 377, col: 5, offset: 10988},
				run: (*parser).callonPutOp1,
				expr: &seqExpr{
					pos: position{line: 377, col: 5, offset: 10988},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 377, col: 5, offset: 10988},
							val:        "put",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 377, col: 11, offset: 10994},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 377, col: 13, offset: 10996},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 377, col: 18, offset: 11001},
								name: "Assignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameOp",
			pos:  position{line: 381, col: 1, offset: 11092},
			expr: &actionExpr{
				pos: position{line: 382, col: 5, offset: 11105},
				run: (*parser).callonRenameOp1,
				expr: &seqExpr{
					pos: position{line: 382, col: 5, offset: 11105},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 382, col: 5, offset: 11105},
							val:        "rename",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 382, col: 14, offset: 11114},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 382, col: 16, offset: 11116},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 382, col: 22, offset: 11122},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 382, col: 33, offset: 11133},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 382, col: 38, offset: 11138},
								expr: &actionExpr{
									pos: position{line: 382, col: 39, offset: 11139},
									run: (*parser).callonRenameOp9,
									expr: &seqExpr{
										pos: position{line: 382, col: 39, offset: 11139},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 382, col: 39, offset: 11139},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 382, col: 42, offset: 11142},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 382, col: 46, offset: 11146},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 382, col: 49, offset: 11149},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 382, col: 52, offset: 11152},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseOp",
			pos:  position{line: 390, col: 1, offset: 11559},
			expr: &actionExpr{
				pos: position{line: 391, col: 5, offset: 11570},
				run: (*parser).callonFuseOp1,
				expr: &seqExpr{
					pos: position{line: 391, col: 5, offset: 11570},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 391, col: 5, offset: 11570},
							val:        "fuse",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 391, col: 12, offset: 11577},
							expr: &seqExpr{
								pos: position{line: 391, col: 14, offset: 11579},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 391, col: 14, offset: 11579},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 391, col: 17, offset: 11582},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 391, col: 22, offset: 11587},
							expr: &ruleRefExpr{
								pos:  position{line: 391, col: 23, offset: 11588},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "ShapeOp",
			pos:  position{line: 395, col: 1, offset: 11659},
			expr: &actionExpr{
				pos: position{line: 396, col: 5, offset: 11671},
				run: (*parser).callonShapeOp1,
				expr: &seqExpr{
					pos: position{line: 396, col: 5, offset: 11671},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 396, col: 5, offset: 11671},
							val:        "shape",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 396, col: 13, offset: 11679},
							expr: &seqExpr{
								pos: position{line: 396, col: 15, offset: 11681},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 396, col: 15, offset: 11681},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 396, col: 18, offset: 11684},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 396, col: 23, offset: 11689},
							expr: &ruleRefExpr{
								pos:  position{line: 396, col: 24, offset: 11690},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "JoinOp",
			pos:  position{line: 400, col: 1, offset: 11762},
			expr: &actionExpr{
				pos: position{line: 401, col: 5, offset: 11773},
				run: (*parser).callonJoinOp1,
				expr: &seqExpr{
					pos: position{line: 401, col: 5, offset: 11773},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 401, col: 5, offset: 11773},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 401, col: 11, offset: 11779},
								name: "JoinStyle",
							},
						},
						&litMatcher{
							pos:        position{line: 401, col: 21, offset: 11789},
							val:        "join",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 401, col: 28, offset: 11796},
							label: "rightInput",
							expr: &ruleRefExpr{
								pos:  position{line: 401, col: 39, offset: 11807},
								name: "JoinRightInput",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 401, col: 54, offset: 11822},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 401, col: 57, offset: 11825},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 401, col: 59, offset: 11827},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 401, col: 63, offset: 11831},
								name: "JoinKey",
							},
						},
						&labeledExpr{
							pos:   position{line: 401, col: 71, offset: 11839},
							label: "optKey",
							expr: &zeroOrOneExpr{
								pos: position{line: 401, col: 78, offset: 11846},
								expr: &seqExpr{
									pos: position{line: 401, col: 79, offset: 11847},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 401, col: 79, offset: 11847},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 401, col: 82, offset: 11850},
											val:        "=",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 401, col: 86, offset: 11854},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 401, col: 89, offset: 11857},
											name: "JoinKey",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 401, col: 99, offset: 11867},
							label: "optArgs",
							expr: &zeroOrOneExpr{
								pos: position{line: 401, col: 107, offset: 11875},
								expr: &seqExpr{
									pos: position{line: 401, col: 108, offset: 11876},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 401, col: 108, offset: 11876},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 401, col: 110, offset: 11878},
											name: "FlexAssignments",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinStyle",
			pos:  position{line: 412, col: 1, offset: 12234},
			expr: &choiceExpr{
				pos: position{line: 413, col: 5, offset: 12248},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 413, col: 5, offset: 12248},
						run: (*parser).callonJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 413, col: 5, offset: 12248},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 413, col: 5, offset: 12248},
									val:        "anti",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 413, col: 12, offset: 12255},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 414, col: 5, offset: 12285},
						run: (*parser).callonJoinStyle6,
						expr: &seqExpr{
							pos: position{line: 414, col: 5, offset: 12285},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 414, col: 5, offset: 12285},
									val:        "inner",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 414, col: 13, offset: 12293},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 415, col: 5, offset: 12323},
						run: (*parser).callonJoinStyle10,
						expr: &seqExpr{
							pos: position{line: 415, col: 5, offset: 12323},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 415, col: 5, offset: 12323},
									val:        "left",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 415, col: 13, offset: 12331},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 416, col: 5, offset: 12360},
						run: (*parser).callonJoinStyle14,
						expr: &seqExpr{
							pos: position{line: 416, col: 5, offset: 12360},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 416, col: 5, offset: 12360},
									val:        "right",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 416, col: 13, offset: 12368},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 417, col: 5, offset: 12398},
						run: (*parser).callonJoinStyle18,
						expr: &litMatcher{
							pos:        position{line: 417, col: 5, offset: 12398},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "JoinRightInput",
			pos:  position{line: 419, col: 1, offset: 12433},
			expr: &choiceExpr{
				pos: position{line: 420, col: 5, offset: 12452},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 420, col: 5, offset: 12452},
						run: (*parser).callonJoinRightInput2,
						expr: &seqExpr{
							pos: position{line: 420, col: 5, offset: 12452},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 420, col: 5, offset: 12452},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 420, col: 8, offset: 12455},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 420, col: 12, offset: 12459},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 420, col: 15, offset: 12462},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 420, col: 17, offset: 12464},
										name: "Seq",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 420, col: 21, offset: 12468},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 420, col: 24, offset: 12471},
									val:        ")",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 420, col: 28, offset: 12475},
									name: "__",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 421, col: 5, offset: 12500},
						run: (*parser).callonJoinRightInput12,
						expr: &ruleRefExpr{
							pos:  position{line: 421, col: 5, offset: 12500},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 423, col: 1, offset: 12523},
			expr: &choiceExpr{
				pos: position{line: 424, col: 5, offset: 12535},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 424, col: 5, offset: 12535},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 425, col: 5, offset: 12544},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 425, col: 5, offset: 12544},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 425, col: 5, offset: 12544},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 425, col: 9, offset: 12548},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 425, col: 14, offset: 12553},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 425, col: 19, offset: 12558},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SampleOp",
			pos:  position{line: 427, col: 1, offset: 12584},
			expr: &actionExpr{
				pos: position{line: 428, col: 5, offset: 12597},
				run: (*parser).callonSampleOp1,
				expr: &seqExpr{
					pos: position{line: 428, col: 5, offset: 12597},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 428, col: 5, offset: 12597},
							val:        "sample",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 428, col: 14, offset: 12606},
							expr: &ruleRefExpr{
								pos:  position{line: 428, col: 15, offset: 12607},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 428, col: 20, offset: 12612},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 428, col: 22, offset: 12614},
								name: "SampleExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "OpAssignment",
			pos:  position{line: 435, col: 1, offset: 12962},
			expr: &actionExpr{
				pos: position{line: 436, col: 5, offset: 12979},
				run: (*parser).callonOpAssignment1,
				expr: &labeledExpr{
					pos:   position{line: 436, col: 5, offset: 12979},
					label: "a",
					expr: &ruleRefExpr{
						pos:  position{line: 436, col: 7, offset: 12981},
						name: "Assignments",
					},
				},
			},
		},
		{
			name: "SampleExpr",
			pos:  position{line: 440, col: 1, offset: 13081},
			expr: &choiceExpr{
				pos: position{line: 441, col: 5, offset: 13096},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 441, col: 5, offset: 13096},
						run: (*parser).callonSampleExpr2,
						expr: &seqExpr{
							pos: position{line: 441, col: 5, offset: 13096},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 441, col: 5, offset: 13096},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 441, col: 7, offset: 13098},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 441, col: 12, offset: 13103},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 442, col: 5, offset: 13133},
						run: (*parser).callonSampleExpr7,
						expr: &litMatcher{
							pos:        position{line: 442, col: 5, offset: 13133},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LoadOp",
			pos:  position{line: 444, col: 1, offset: 13206},
			expr: &actionExpr{
				pos: position{line: 445, col: 5, offset: 13217},
				run: (*parser).callonLoadOp1,
				expr: &seqExpr{
					pos: position{line: 445, col: 5, offset: 13217},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 445, col: 5, offset: 13217},
							val:        "load",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 445, col: 12, offset: 13224},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 445, col: 14, offset: 13226},
							label: "pool",
							expr: &ruleRefExpr{
								pos:  position{line: 445, col: 19, offset: 13231},
								name: "PoolNameString",
							},
						},
						&labeledExpr{
							pos:   position{line: 445, col: 34, offset: 13246},
							label: "branch",
							expr: &zeroOrOneExpr{
								pos: position{line: 445, col: 41, offset: 13253},
								expr: &ruleRefExpr{
									pos:  position{line: 445, col: 41, offset: 13253},
									name: "PoolBranch",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 445, col: 53, offset: 13265},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 445, col: 60, offset: 13272},
								expr: &ruleRefExpr{
									pos:  position{line: 445, col: 60, offset: 13272},
									name: "AuthorArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 445, col: 71, offset: 13283},
							label: "message",
							expr: &zeroOrOneExpr{
								pos: position{line: 445, col: 79, offset: 13291},
								expr: &ruleRefExpr{
									pos:  position{line: 445, col: 79, offset: 13291},
									name: "MessageArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 445, col: 91, offset: 13303},
							label: "meta",
							expr: &zeroOrOneExpr{
								pos: position{line: 445, col: 96, offset: 13308},
								expr: &ruleRefExpr{
									pos:  position{line: 445, col: 96, offset: 13308},
									name: "MetaArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AuthorArg",
			pos:  position{line: 449, col: 1, offset: 13467},
			expr: &actionExpr{
				pos: position{line: 450, col: 5, offset: 13481},
				run: (*parser).callonAuthorArg1,
				expr: &seqExpr{
					pos: position{line: 450, col: 5, offset: 13481},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 450, col: 5, offset: 13481},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 450, col: 7, offset: 13483},
							val:        "author",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 450, col: 16, offset: 13492},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 450, col: 18, offset: 13494},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 450, col: 22, offset: 13498},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "MessageArg",
			pos:  position{line: 452, col: 1, offset: 13532},
			expr: &actionExpr{
				pos: position{line: 453, col: 5, offset: 13547},
				run: (*parser).callonMessageArg1,
				expr: &seqExpr{
					pos: position{line: 453, col: 5, offset: 13547},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 453, col: 5, offset: 13547},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 453, col: 7, offset: 13549},
							val:        "message",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 453, col: 17, offset: 13559},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 453, col: 19, offset: 13561},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 453, col: 23, offset: 13565},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "MetaArg",
			pos:  position{line: 455, col: 1, offset: 13599},
			expr: &actionExpr{
				pos: position{line: 456, col: 5, offset: 13611},
				run: (*parser).callonMetaArg1,
				expr: &seqExpr{
					pos: position{line: 456, col: 5, offset: 13611},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 456, col: 5, offset: 13611},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 456, col: 7, offset: 13613},
							val:        "meta",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 456, col: 14, offset: 13620},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 456, col: 16, offset: 13622},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 456, col: 20, offset: 13626},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolBranch",
			pos:  position{line: 458, col: 1, offset: 13660},
			expr: &actionExpr{
				pos: position{line: 459, col: 5, offset: 13675},
				run: (*parser).callonPoolBranch1,
				expr: &seqExpr{
					pos: position{line: 459, col: 5, offset: 13675},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 459, col: 5, offset: 13675},
							val:        "@",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 459, col: 9, offset: 13679},
							label: "branch",
							expr: &choiceExpr{
								pos: position{line: 459, col: 17, offset: 13687},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 459, col: 17, offset: 13687},
										name: "PoolIdentifier",
									},
									&ruleRefExpr{
										pos:  position{line: 459, col: 34, offset: 13704},
										name: "QuotedString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FromOp",
			pos:  position{line: 461, col: 1, offset: 13742},
			expr: &actionExpr{
				pos: position{line: 462, col: 5, offset: 13753},
				run: (*parser).callonFromOp1,
				expr: &labeledExpr{
					pos:   position{line: 462, col: 5, offset: 13753},
					label: "source",
					expr: &ruleRefExpr{
						pos:  position{line: 462, col: 12, offset: 13760},
						name: "FromAny",
					},
				},
			},
		},
		{
			name: "FromAny",
			pos:  position{line: 466, col: 1, offset: 13918},
			expr: &choiceExpr{
				pos: position{line: 467, col: 5, offset: 13930},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 467, col: 5, offset: 13930},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 468, col: 5, offset: 13939},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 469, col: 5, offset: 13947},
						name: "From",
					},
				},
			},
		},
		{
			name: "File",
			pos:  position{line: 471, col: 1, offset: 13953},
			expr: &actionExpr{
				pos: position{line: 472, col: 5, offset: 13962},
				run: (*parser).callonFile1,
				expr: &seqExpr{
					pos: position{line: 472, col: 5, offset: 13962},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 472, col: 5, offset: 13962},
							val:        "file",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 472, col: 12, offset: 13969},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 472, col: 14, offset: 13971},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 472, col: 19, offset: 13976},
								name: "Path",
							},
						},
						&labeledExpr{
							pos:   position{line: 472, col: 24, offset: 13981},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 472, col: 31, offset: 13988},
								expr: &ruleRefExpr{
									pos:  position{line: 472, col: 31, offset: 13988},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 472, col: 42, offset: 13999},
							label: "sort_key",
							expr: &zeroOrOneExpr{
								pos: position{line: 472, col: 51, offset: 14008},
								expr: &ruleRefExpr{
									pos:  position{line: 472, col: 51, offset: 14008},
									name: "SortKeyArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "From",
			pos:  position{line: 476, col: 1, offset: 14140},
			expr: &actionExpr{
				pos: position{line: 477, col: 5, offset: 14149},
				run: (*parser).callonFrom1,
				expr: &seqExpr{
					pos: position{line: 477, col: 5, offset: 14149},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 477, col: 5, offset: 14149},
							val:        "from",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 477, col: 12, offset: 14156},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 477, col: 14, offset: 14158},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 477, col: 19, offset: 14163},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "Pool",
			pos:  position{line: 479, col: 1, offset: 14194},
			expr: &actionExpr{
				pos: position{line: 480, col: 5, offset: 14203},
				run: (*parser).callonPool1,
				expr: &seqExpr{
					pos: position{line: 480, col: 5, offset: 14203},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 480, col: 5, offset: 14203},
							val:        "pool",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 480, col: 12, offset: 14210},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 480, col: 14, offset: 14212},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 480, col: 19, offset: 14217},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolBody",
			pos:  position{line: 482, col: 1, offset: 14248},
			expr: &actionExpr{
				pos: position{line: 483, col: 5, offset: 14261},
				run: (*parser).callonPoolBody1,
				expr: &seqExpr{
					pos: position{line: 483, col: 5, offset: 14261},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 483, col: 5, offset: 14261},
							label: "spec",
							expr: &ruleRefExpr{
								pos:  position{line: 483, col: 10, offset: 14266},
								name: "PoolSpec",
							},
						},
						&labeledExpr{
							pos:   position{line: 483, col: 19, offset: 14275},
							label: "at",
							expr: &zeroOrOneExpr{
								pos: position{line: 483, col: 22, offset: 14278},
								expr: &ruleRefExpr{
									pos:  position{line: 483, col: 22, offset: 14278},
									name: "PoolAt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Get",
			pos:  position{line: 487, col: 1, offset: 14376},
			expr: &actionExpr{
				pos: position{line: 488, col: 5, offset: 14384},
				run: (*parser).callonGet1,
				expr: &seqExpr{
					pos: position{line: 488, col: 5, offset: 14384},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 488, col: 5, offset: 14384},
							val:        "get",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 488, col: 11, offset: 14390},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 488, col: 13, offset: 14392},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 488, col: 17, offset: 14396},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 488, col: 21, offset: 14400},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 488, col: 28, offset: 14407},
								expr: &ruleRefExpr{
									pos:  position{line: 488, col: 28, offset: 14407},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 488, col: 39, offset: 14418},
							label: "sort_key",
							expr: &zeroOrOneExpr{
								pos: position{line: 488, col: 48, offset: 14427},
								expr: &ruleRefExpr{
									pos:  position{line: 488, col: 48, offset: 14427},
									name: "SortKeyArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 492, col: 1, offset: 14557},
			expr: &actionExpr{
				pos: position{line: 492, col: 7, offset: 14563},
				run: (*parser).callonURL1,
				expr: &seqExpr{
					pos: position{line: 492, col: 7, offset: 14563},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 492, col: 8, offset: 14564},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 492, col: 8, offset: 14564},
									val:        "http:",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 492, col: 18, offset: 14574},
									val:        "https:",
									ignoreCase: false,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 492, col: 28, offset: 14584},
							name: "Path",
						},
					},
				},
			},
		},
		{
			name: "Path",
			pos:  position{line: 494, col: 1, offset: 14621},
			expr: &choiceExpr{
				pos: position{line: 495, col: 5, offset: 14630},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 495, col: 5, offset: 14630},
						run: (*parser).callonPath2,
						expr: &labeledExpr{
							pos:   position{line: 495, col: 5, offset: 14630},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 495, col: 7, offset: 14632},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 496, col: 5, offset: 14667},
						run: (*parser).callonPath5,
						expr: &oneOrMoreExpr{
							pos: position{line: 496, col: 5, offset: 14667},
							expr: &charClassMatcher{
								pos:        position{line: 496, col: 5, offset: 14667},
								val:        "[0-9a-zA-Z!@$%^&*_=<>,./?:[\\]{}~+-]",
								chars:      []rune{'!', '@', '$', '%', '^', '&', '*', '_', '=', '<', '>', ',', '.', '/', '?', ':', '[', ']', '{', '}', '~', '+', '-'},
								ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PoolAt",
			pos:  position{line: 499, col: 1, offset: 14769},
			expr: &actionExpr{
				pos: position{line: 500, col: 5, offset: 14780},
				run: (*parser).callonPoolAt1,
				expr: &seqExpr{
					pos: position{line: 500, col: 5, offset: 14780},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 500, col: 5, offset: 14780},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 500, col: 7, offset: 14782},
							val:        "at",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 500, col: 12, offset: 14787},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 500, col: 14, offset: 14789},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 500, col: 17, offset: 14792},
								name: "KSUID",
							},
						},
					},
				},
			},
		},
		{
			name: "KSUID",
			pos:  position{line: 503, col: 1, offset: 14858},
			expr: &actionExpr{
				pos: position{line: 503, col: 9, offset: 14866},
				run: (*parser).callonKSUID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 503, col: 9, offset: 14866},
					expr: &charClassMatcher{
						pos:        position{line: 503, col: 10, offset: 14867},
						val:        "[0-9a-zA-Z]",
						ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "PoolSpec",
			pos:  position{line: 505, col: 1, offset: 14913},
			expr: &choiceExpr{
				pos: position{line: 506, col: 5, offset: 14926},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 506, col: 5, offset: 14926},
						run: (*parser).callonPoolSpec2,
						expr: &seqExpr{
							pos: position{line: 506, col: 5, offset: 14926},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 506, col: 5, offset: 14926},
									label: "pool",
									expr: &ruleRefExpr{
										pos:  position{line: 506, col: 10, offset: 14931},
										name: "PoolName",
									},
								},
								&labeledExpr{
									pos:   position{line: 506, col: 19, offset: 14940},
									label: "commit",
									expr: &zeroOrOneExpr{
										pos: position{line: 506, col: 26, offset: 14947},
										expr: &ruleRefExpr{
											pos:  position{line: 506, col: 26, offset: 14947},
											name: "PoolCommit",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 506, col: 38, offset: 14959},
									label: "meta",
									expr: &zeroOrOneExpr{
										pos: position{line: 506, col: 43, offset: 14964},
										expr: &ruleRefExpr{
											pos:  position{line: 506, col: 43, offset: 14964},
											name: "PoolMeta",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 506, col: 53, offset: 14974},
									label: "tap",
									expr: &ruleRefExpr{
										pos:  position{line: 506, col: 57, offset: 14978},
										name: "TapArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 509, col: 5, offset: 15096},
						run: (*parser).callonPoolSpec14,
						expr: &labeledExpr{
							pos:   position{line: 509, col: 5, offset: 15096},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 509, col: 10, offset: 15101},
								name: "PoolMeta",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolCommit",
			pos:  position{line: 513, col: 1, offset: 15202},
			expr: &actionExpr{
				pos: position{line: 514, col: 5, offset: 15217},
				run: (*parser).callonPoolCommit1,
				expr: &seqExpr{
					pos: position{line: 514, col: 5, offset: 15217},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 514, col: 5, offset: 15217},
							val:        "@",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 514, col: 9, offset: 15221},
							label: "commit",
							expr: &ruleRefExpr{
								pos:  position{line: 514, col: 16, offset: 15228},
								name: "PoolNameString",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolMeta",
			pos:  position{line: 516, col: 1, offset: 15267},
			expr: &actionExpr{
				pos: position{line: 517, col: 5, offset: 15280},
				run: (*parser).callonPoolMeta1,
				expr: &seqExpr{
					pos: position{line: 517, col: 5, offset: 15280},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 517, col: 5, offset: 15280},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 517, col: 9, offset: 15284},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 517, col: 14, offset: 15289},
								name: "PoolIdentifier",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolName",
			pos:  position{line: 519, col: 1, offset: 15326},
			expr: &choiceExpr{
				pos: position{line: 520, col: 5, offset: 15339},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 520, col: 5, offset: 15339},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 521, col: 5, offset: 15350},
						name: "Glob",
					},
					&actionExpr{
						pos: position{line: 522, col: 5, offset: 15359},
						run: (*parser).callonPoolName4,
						expr: &seqExpr{
							pos: position{line: 522, col: 5, offset: 15359},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 522, col: 5, offset: 15359},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 522, col: 9, offset: 15363},
									expr: &ruleRefExpr{
										pos:  position{line: 522, col: 10, offset: 15364},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 523, col: 5, offset: 15449},
						run: (*parser).callonPoolName9,
						expr: &labeledExpr{
							pos:   position{line: 523, col: 5, offset: 15449},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 523, col: 10, offset: 15454},
								name: "PoolNameString",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolNameString",
			pos:  position{line: 525, col: 1, offset: 15541},
			expr: &choiceExpr{
				pos: position{line: 526, col: 5, offset: 15560},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 526, col: 5, offset: 15560},
						name: "PoolIdentifier",
					},
					&ruleRefExpr{
						pos:  position{line: 527, col: 5, offset: 15579},
						name: "KSUID",
					},
					&ruleRefExpr{
						pos:  position{line: 528, col: 5, offset: 15589},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "PoolIdentifier",
			pos:  position{line: 530, col: 1, offset: 15603},
			expr: &actionExpr{
				pos: position{line: 531, col: 5, offset: 15622},
				run: (*parser).callonPoolIdentifier1,
				expr: &seqExpr{
					pos: position{line: 531, col: 5, offset: 15622},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 531, col: 6, offset: 15623},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 531, col: 6, offset: 15623},
									name: "IdentifierStart",
								},
								&litMatcher{
									pos:        position{line: 531, col: 24, offset: 15641},
									val:        ".",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 531, col: 29, offset: 15646},
							expr: &choiceExpr{
								pos: position{line: 531, col: 30, offset: 15647},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 531, col: 30, offset: 15647},
										name: "IdentifierRest",
									},
									&litMatcher{
										pos:        position{line: 531, col: 47, offset: 15664},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortKeyArg",
			pos:  position{line: 533, col: 1, offset: 15702},
			expr: &actionExpr{
				pos: position{line: 534, col: 5, offset: 15717},
				run: (*parser).callonSortKeyArg1,
				expr: &seqExpr{
					pos: position{line: 534, col: 5, offset: 15717},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 534, col: 5, offset: 15717},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 534, col: 7, offset: 15719},
							val:        "order",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 534, col: 15, offset: 15727},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 534, col: 17, offset: 15729},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 534, col: 22, offset: 15734},
								name: "FieldExprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 534, col: 33, offset: 15745},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 534, col: 39, offset: 15751},
								name: "OrderSuffix",
							},
						},
					},
				},
			},
		},
		{
			name: "TapArg",
			pos:  position{line: 538, col: 1, offset: 15862},
			expr: &choiceExpr{
				pos: position{line: 539, col: 5, offset: 15873},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 539, col: 5, offset: 15873},
						run: (*parser).callonTapArg2,
						expr: &seqExpr{
							pos: position{line: 539, col: 5, offset: 15873},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 539, col: 5, offset: 15873},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 539, col: 7, offset: 15875},
									val:        "tap",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 540, col: 5, offset: 15906},
						run: (*parser).callonTapArg6,
						expr: &litMatcher{
							pos:        position{line: 540, col: 5, offset: 15906},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FormatArg",
			pos:  position{line: 542, col: 1, offset: 15932},
			expr: &actionExpr{
				pos: position{line: 543, col: 5, offset: 15946},
				run: (*parser).callonFormatArg1,
				expr: &seqExpr{
					pos: position{line: 543, col: 5, offset: 15946},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 543, col: 5, offset: 15946},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 543, col: 7, offset: 15948},
							val:        "format",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 543, col: 16, offset: 15957},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 543, col: 18, offset: 15959},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 543, col: 22, offset: 15963},
								name: "IdentifierName",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderSuffix",
			pos:  position{line: 545, col: 1, offset: 15999},
			expr: &choiceExpr{
				pos: position{line: 546, col: 5, offset: 16015},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 546, col: 5, offset: 16015},
						run: (*parser).callonOrderSuffix2,
						expr: &litMatcher{
							pos:        position{line: 546, col: 5, offset: 16015},
							val:        ":asc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 547, col: 5, offset: 16049},
						run: (*parser).callonOrderSuffix4,
						expr: &litMatcher{
							pos:        position{line: 547, col: 5, offset: 16049},
							val:        ":desc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 548, col: 5, offset: 16084},
						run: (*parser).callonOrderSuffix6,
						expr: &litMatcher{
							pos:        position{line: 548, col: 5, offset: 16084},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PassOp",
			pos:  position{line: 550, col: 1, offset: 16115},
			expr: &actionExpr{
				pos: position{line: 551, col: 5, offset: 16126},
				run: (*parser).callonPassOp1,
				expr: &seqExpr{
					pos: position{line: 551, col: 5, offset: 16126},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 551, col: 5, offset: 16126},
							val:        "pass",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 551, col: 12, offset: 16133},
							expr: &ruleRefExpr{
								pos:  position{line: 551, col: 13, offset: 16134},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "ExplodeOp",
			pos:  position{line: 557, col: 1, offset: 16327},
			expr: &actionExpr{
				pos: position{line: 558, col: 5, offset: 16341},
				run: (*parser).callonExplodeOp1,
				expr: &seqExpr{
					pos: position{line: 558, col: 5, offset: 16341},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 558, col: 5, offset: 16341},
							val:        "explode",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 558, col: 15, offset: 16351},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 558, col: 17, offset: 16353},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 558, col: 22, offset: 16358},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 558, col: 28, offset: 16364},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 558, col: 32, offset: 16368},
								name: "TypeArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 558, col: 40, offset: 16376},
							label: "as",
							expr: &zeroOrOneExpr{
								pos: position{line: 558, col: 43, offset: 16379},
								expr: &ruleRefExpr{
									pos:  position{line: 558, col: 43, offset: 16379},
									name: "AsArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MergeOp",
			pos:  position{line: 562, col: 1, offset: 16492},
			expr: &actionExpr{
				pos: position{line: 563, col: 5, offset: 16504},
				run: (*parser).callonMergeOp1,
				expr: &seqExpr{
					pos: position{line: 563, col: 5, offset: 16504},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 563, col: 5, offset: 16504},
							val:        "merge",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 563, col: 13, offset: 16512},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 563, col: 15, offset: 16514},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 563, col: 20, offset: 16519},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "OverOp",
			pos:  position{line: 567, col: 1, offset: 16605},
			expr: &actionExpr{
				pos: position{line: 568, col: 5, offset: 16616},
				run: (*parser).callonOverOp1,
				expr: &seqExpr{
					pos: position{line: 568, col: 5, offset: 16616},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 568, col: 5, offset: 16616},
							val:        "over",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 568, col: 12, offset: 16623},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 568, col: 14, offset: 16625},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 568, col: 20, offset: 16631},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 568, col: 26, offset: 16637},
							label: "locals",
							expr: &zeroOrOneExpr{
								pos: position{line: 568, col: 33, offset: 16644},
								expr: &ruleRefExpr{
									pos:  position{line: 568, col: 33, offset: 16644},
									name: "Locals",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 568, col: 41, offset: 16652},
							label: "body",
							expr: &zeroOrOneExpr{
								pos: position{line: 568, col: 46, offset: 16657},
								expr: &ruleRefExpr{
									pos:  position{line: 568, col: 46, offset: 16657},
									name: "Lateral",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Lateral",
			pos:  position{line: 572, col: 1, offset: 16780},
			expr: &choiceExpr{
				pos: position{line: 573, col: 5, offset: 16792},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 573, col: 5, offset: 16792},
						run: (*parser).callonLateral2,
						expr: &seqExpr{
							pos: position{line: 573, col: 5, offset: 16792},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 573, col: 5, offset: 16792},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 573, col: 8, offset: 16795},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 573, col: 13, offset: 16800},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 573, col: 16, offset: 16803},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 573, col: 20, offset: 16807},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 573, col: 23, offset: 16810},
									label: "scope",
									expr: &ruleRefExpr{
										pos:  position{line: 573, col: 29, offset: 16816},
										name: "Scope",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 573, col: 35, offset: 16822},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 573, col: 38, offset: 16825},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 574, col: 5, offset: 16855},
						run: (*parser).callonLateral13,
						expr: &seqExpr{
							pos: position{line: 574, col: 5, offset: 16855},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 574, col: 5, offset: 16855},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 574, col: 8, offset: 16858},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 574, col: 13, offset: 16863},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 574, col: 16, offset: 16866},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 574, col: 20, offset: 16870},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 574, col: 23, offset: 16873},
									label: "seq",
									expr: &ruleRefExpr{
										pos:  position{line: 574, col: 27, offset: 16877},
										name: "Seq",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 574, col: 31, offset: 16881},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 574, col: 34, offset: 16884},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Locals",
			pos:  position{line: 576, col: 1, offset: 16909},
			expr: &actionExpr{
				pos: position{line: 577, col: 5, offset: 16920},
				run: (*parser).callonLocals1,
				expr: &seqExpr{
					pos: position{line: 577, col: 5, offset: 16920},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 577, col: 5, offset: 16920},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 577, col: 7, offset: 16922},
							val:        "with",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 577, col: 14, offset: 16929},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 577, col: 16, offset: 16931},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 577, col: 22, offset: 16937},
								name: "LocalsAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 577, col: 39, offset: 16954},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 577, col: 44, offset: 16959},
								expr: &actionExpr{
									pos: position{line: 577, col: 45, offset: 16960},
									run: (*parser).callonLocals10,
									expr: &seqExpr{
										pos: position{line: 577, col: 45, offset: 16960},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 577, col: 45, offset: 16960},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 577, col: 48, offset: 16963},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 577, col: 52, offset: 16967},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 577, col: 55, offset: 16970},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 577, col: 57, offset: 16972},
													name: "LocalsAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocalsAssignment",
			pos:  position{line: 581, col: 1, offset: 17093},
			expr: &actionExpr{
				pos: position{line: 582, col: 5, offset: 17114},
				run: (*parser).callonLocalsAssignment1,
				expr: &seqExpr{
					pos: position{line: 582, col: 5, offset: 17114},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 582, col: 5, offset: 17114},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 582, col: 10, offset: 17119},
								name: "IdentifierName",
							},
						},
						&labeledExpr{
							pos:   position{line: 582, col: 25, offset: 17134},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 582, col: 29, offset: 17138},
								expr: &seqExpr{
									pos: position{line: 582, col: 30, offset: 17139},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 582, col: 30, offset: 17139},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 582, col: 33, offset: 17142},
											val:        "=",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 582, col: 37, offset: 17146},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 582, col: 40, offset: 17149},
											name: "Expr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "YieldOp",
			pos:  position{line: 590, col: 1, offset: 17370},
			expr: &actionExpr{
				pos: position{line: 591, col: 5, offset: 17382},
				run: (*parser).callonYieldOp1,
				expr: &seqExpr{
					pos: position{line: 591, col: 5, offset: 17382},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 591, col: 5, offset: 17382},
							val:        "yield",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 591, col: 13, offset: 17390},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 591, col: 15, offset: 17392},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 591, col: 21, offset: 17398},
								name: "Exprs",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeArg",
			pos:  position{line: 595, col: 1, offset: 17487},
			expr: &actionExpr{
				pos: position{line: 596, col: 5, offset: 17499},
				run: (*parser).callonTypeArg1,
				expr: &seqExpr{
					pos: position{line: 596, col: 5, offset: 17499},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 596, col: 5, offset: 17499},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 596, col: 7, offset: 17501},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 596, col: 10, offset: 17504},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 596, col: 12, offset: 17506},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 596, col: 16, offset: 17510},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "AsArg",
			pos:  position{line: 598, col: 1, offset: 17536},
			expr: &actionExpr{
				pos: position{line: 599, col: 5, offset: 17546},
				run: (*parser).callonAsArg1,
				expr: &seqExpr{
					pos: position{line: 599, col: 5, offset: 17546},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 599, col: 5, offset: 17546},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 599, col: 7, offset: 17548},
							name: "AS",
						},
						&ruleRefExpr{
							pos:  position{line: 599, col: 10, offset: 17551},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 599, col: 12, offset: 17553},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 599, col: 16, offset: 17557},
								name: "Lval",
							},
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 603, col: 1, offset: 17608},
			expr: &ruleRefExpr{
				pos:  position{line: 603, col: 8, offset: 17615},
				name: "DerefExpr",
			},
		},
		{
			name: "Lvals",
			pos:  position{line: 605, col: 1, offset: 17626},
			expr: &actionExpr{
				pos: position{line: 606, col: 5, offset: 17636},
				run: (*parser).callonLvals1,
				expr: &seqExpr{
					pos: position{line: 606, col: 5, offset: 17636},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 606, col: 5, offset: 17636},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 606, col: 11, offset: 17642},
								name: "Lval",
							},
						},
						&labeledExpr{
							pos:   position{line: 606, col: 16, offset: 17647},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 606, col: 21, offset: 17652},
								expr: &actionExpr{
									pos: position{line: 606, col: 22, offset: 17653},
									run: (*parser).callonLvals7,
									expr: &seqExpr{
										pos: position{line: 606, col: 22, offset: 17653},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 606, col: 22, offset: 17653},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 606, col: 25, offset: 17656},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 606, col: 29, offset: 17660},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 606, col: 32, offset: 17663},
												label: "lval",
												expr: &ruleRefExpr{
													pos:  position{line: 606, col: 37, offset: 17668},
													name: "Lval",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 610, col: 1, offset: 17780},
			expr: &ruleRefExpr{
				pos:  position{line: 610, col: 13, offset: 17792},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 612, col: 1, offset: 17798},
			expr: &actionExpr{
				pos: position{line: 613, col: 5, offset: 17813},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 613, col: 5, offset: 17813},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 613, col: 5, offset: 17813},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 613, col: 11, offset: 17819},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 613, col: 21, offset: 17829},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 613, col: 26, offset: 17834},
								expr: &seqExpr{
									pos: position{line: 613, col: 27, offset: 17835},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 613, col: 27, offset: 17835},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 613, col: 30, offset: 17838},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 613, col: 34, offset: 17842},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 613, col: 37, offset: 17845},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignments",
			pos:  position{line: 623, col: 1, offset: 18044},
			expr: &actionExpr{
				pos: position{line: 624, col: 5, offset: 18060},
				run: (*parser).callonAssignments1,
				expr: &seqExpr{
					pos: position{line: 624, col: 5, offset: 18060},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 624, col: 5, offset: 18060},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 624, col: 11, offset: 18066},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 624, col: 22, offset: 18077},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 624, col: 27, offset: 18082},
								expr: &actionExpr{
									pos: position{line: 624, col: 28, offset: 18083},
									run: (*parser).callonAssignments7,
									expr: &seqExpr{
										pos: position{line: 624, col: 28, offset: 18083},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 624, col: 28, offset: 18083},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 624, col: 31, offset: 18086},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 624, col: 35, offset: 18090},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 624, col: 38, offset: 18093},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 624, col: 40, offset: 18095},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 628, col: 1, offset: 18206},
			expr: &actionExpr{
				pos: position{line: 629, col: 5, offset: 18221},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 629, col: 5, offset: 18221},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 629, col: 5, offset: 18221},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 629, col: 9, offset: 18225},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 629, col: 14, offset: 18230},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 629, col: 17, offset: 18233},
							val:        ":=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 629, col: 22, offset: 18238},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 629, col: 25, offset: 18241},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 629, col: 29, offset: 18245},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 631, col: 1, offset: 18336},
			expr: &ruleRefExpr{
				pos:  position{line: 631, col: 8, offset: 18343},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 633, col: 1, offset: 18360},
			expr: &actionExpr{
				pos: position{line: 634, col: 5, offset: 18380},
				run: (*parser).callonConditionalExpr1,
				expr: &seqExpr{
					pos: position{line: 634, col: 5, offset: 18380},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 634, col: 5, offset: 18380},
							label: "cond",
							expr: &ruleRefExpr{
								pos:  position{line: 634, col: 10, offset: 18385},
								name: "LogicalOrExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 634, col: 24, offset: 18399},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 634, col: 28, offset: 18403},
								expr: &seqExpr{
									pos: position{line: 634, col: 29, offset: 18404},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 634, col: 29, offset: 18404},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 634, col: 32, offset: 18407},
											val:        "?",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 634, col: 36, offset: 18411},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 634, col: 39, offset: 18414},
											name: "Expr",
										},
										&ruleRefExpr{
											pos:  position{line: 634, col: 44, offset: 18419},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 634, col: 47, offset: 18422},
											val:        ":",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 634, col: 51, offset: 18426},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 634, col: 54, offset: 18429},
											name: "Expr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 643, col: 1, offset: 18690},
			expr: &actionExpr{
				pos: position{line: 644, col: 5, offset: 18708},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 644, col: 5, offset: 18708},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 644, col: 5, offset: 18708},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 644, col: 11, offset: 18714},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 645, col: 5, offset: 18733},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 645, col: 10, offset: 18738},
								expr: &actionExpr{
									pos: position{line: 645, col: 11, offset: 18739},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 645, col: 11, offset: 18739},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 645, col: 11, offset: 18739},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 645, col: 14, offset: 18742},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 645, col: 17, offset: 18745},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 645, col: 25, offset: 18753},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 645, col: 28, offset: 18756},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 645, col: 33, offset: 18761},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 649, col: 1, offset: 18880},
			expr: &actionExpr{
				pos: position{line: 650, col: 5, offset: 18899},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 650, col: 5, offset: 18899},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 650, col: 5, offset: 18899},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 650, col: 11, offset: 18905},
								name: "ComparisonExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 651, col: 5, offset: 18924},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 651, col: 10, offset: 18929},
								expr: &actionExpr{
									pos: position{line: 651, col: 11, offset: 18930},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 651, col: 11, offset: 18930},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 651, col: 11, offset: 18930},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 651, col: 14, offset: 18933},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 651, col: 17, offset: 18936},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 651, col: 26, offset: 18945},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 651, col: 29, offset: 18948},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 651, col: 34, offset: 18953},
													name: "ComparisonExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ComparisonExpr",
			pos:  position{line: 655, col: 1, offset: 19072},
			expr: &actionExpr{
				pos: position{line: 656, col: 5, offset: 19091},
				run: (*parser).callonComparisonExpr1,
				expr: &seqExpr{
					pos: position{line: 656, col: 5, offset: 19091},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 656, col: 5, offset: 19091},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 656, col: 9, offset: 19095},
								name: "AdditiveExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 656, col: 22, offset: 19108},
							label: "opAndRHS",
							expr: &zeroOrOneExpr{
								pos: position{line: 656, col: 31, offset: 19117},
								expr: &choiceExpr{
									pos: position{line: 656, col: 32, offset: 19118},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 656, col: 32, offset: 19118},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 656, col: 32, offset: 19118},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 656, col: 35, offset: 19121},
													name: "Comparator",
												},
												&ruleRefExpr{
													pos:  position{line: 656, col: 46, offset: 19132},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 656, col: 49, offset: 19135},
													name: "AdditiveExpr",
												},
											},
										},
										&seqExpr{
											pos: position{line: 656, col: 64, offset: 19150},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 656, col: 64, offset: 19150},
													name: "__",
												},
												&actionExpr{
													pos: position{line: 656, col: 68, offset: 19154},
													run: (*parser).callonComparisonExpr15,
													expr: &litMatcher{
														pos:        position{line: 656, col: 68, offset: 19154},
														val:        "~",
														ignoreCase: false,
													},
												},
												&ruleRefExpr{
													pos:  position{line: 656, col: 104, offset: 19190},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 656, col: 107, offset: 19193},
													name: "Regexp",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 665, col: 1, offset: 19454},
			expr: &actionExpr{
				pos: position{line: 666, col: 5, offset: 19471},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 666, col: 5, offset: 19471},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 666, col: 5, offset: 19471},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 666, col: 11, offset: 19477},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 667, col: 5, offset: 19500},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 667, col: 10, offset: 19505},
								expr: &actionExpr{
									pos: position{line: 667, col: 11, offset: 19506},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 667, col: 11, offset: 19506},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 667, col: 11, offset: 19506},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 667, col: 14, offset: 19509},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 667, col: 17, offset: 19512},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 667, col: 34, offset: 19529},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 667, col: 37, offset: 19532},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 667, col: 42, offset: 19537},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 671, col: 1, offset: 19660},
			expr: &actionExpr{
				pos: position{line: 671, col: 20, offset: 19679},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 671, col: 21, offset: 19680},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 671, col: 21, offset: 19680},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 671, col: 27, offset: 19686},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 673, col: 1, offset: 19723},
			expr: &actionExpr{
				pos: position{line: 674, col: 5, offset: 19746},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 674, col: 5, offset: 19746},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 674, col: 5, offset: 19746},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 674, col: 11, offset: 19752},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 675, col: 5, offset: 19764},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 675, col: 10, offset: 19769},
								expr: &actionExpr{
									pos: position{line: 675, col: 11, offset: 19770},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 675, col: 11, offset: 19770},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 675, col: 11, offset: 19770},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 675, col: 14, offset: 19773},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 675, col: 17, offset: 19776},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 675, col: 40, offset: 19799},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 675, col: 43, offset: 19802},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 675, col: 48, offset: 19807},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 679, col: 1, offset: 19919},
			expr: &actionExpr{
				pos: position{line: 679, col: 26, offset: 19944},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 679, col: 27, offset: 19945},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 679, col: 27, offset: 19945},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 679, col: 33, offset: 19951},
							val:        "/",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 679, col: 39, offset: 19957},
							val:        "%",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 681, col: 1, offset: 19994},
			expr: &choiceExpr{
				pos: position{line: 682, col: 5, offset: 20006},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 682, col: 5, offset: 20006},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 682, col: 5, offset: 20006},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 682, col: 5, offset: 20006},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 682, col: 9, offset: 20010},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 682, col: 12, offset: 20013},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 682, col: 14, offset: 20015},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 685, col: 5, offset: 20124},
						name: "NegationExpr",
					},
				},
			},
		},
		{
			name: "NegationExpr",
			pos:  position{line: 687, col: 1, offset: 20138},
			expr: &choiceExpr{
				pos: position{line: 688, col: 5, offset: 20155},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 688, col: 5, offset: 20155},
						run: (*parser).callonNegationExpr2,
						expr: &seqExpr{
							pos: position{line: 688, col: 5, offset: 20155},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 688, col: 5, offset: 20155},
									expr: &ruleRefExpr{
										pos:  position{line: 688, col: 6, offset: 20156},
										name: "Literal",
									},
								},
								&litMatcher{
									pos:        position{line: 688, col: 14, offset: 20164},
									val:        "-",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 688, col: 18, offset: 20168},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 688, col: 21, offset: 20171},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 688, col: 23, offset: 20173},
										name: "FuncExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 691, col: 5, offset: 20283},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 693, col: 1, offset: 20293},
			expr: &choiceExpr{
				pos: position{line: 694, col: 5, offset: 20306},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 694, col: 5, offset: 20306},
						run: (*parser).callonFuncExpr2,
						expr: &seqExpr{
							pos: position{line: 694, col: 5, offset: 20306},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 694, col: 5, offset: 20306},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 694, col: 11, offset: 20312},
										name: "Cast",
									},
								},
								&labeledExpr{
									pos:   position{line: 694, col: 16, offset: 20317},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 694, col: 21, offset: 20322},
										expr: &ruleRefExpr{
											pos:  position{line: 694, col: 22, offset: 20323},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 697, col: 5, offset: 20394},
						run: (*parser).callonFuncExpr9,
						expr: &seqExpr{
							pos: position{line: 697, col: 5, offset: 20394},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 697, col: 5, offset: 20394},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 697, col: 11, offset: 20400},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 697, col: 20, offset: 20409},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 697, col: 25, offset: 20414},
										expr: &ruleRefExpr{
											pos:  position{line: 697, col: 26, offset: 20415},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 700, col: 5, offset: 20486},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 701, col: 5, offset: 20500},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FuncGuard",
			pos:  position{line: 703, col: 1, offset: 20509},
			expr: &seqExpr{
				pos: position{line: 703, col: 13, offset: 20521},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 703, col: 13, offset: 20521},
						name: "NotFuncs",
					},
					&ruleRefExpr{
						pos:  position{line: 703, col: 22, offset: 20530},
						name: "__",
					},
					&litMatcher{
						pos:        position{line: 703, col: 25, offset: 20533},
						val:        "(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "NotFuncs",
			pos:  position{line: 705, col: 1, offset: 20538},
			expr: &choiceExpr{
				pos: position{line: 706, col: 5, offset: 20551},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 706, col: 5, offset: 20551},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 707, col: 5, offset: 20561},
						val:        "select",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Cast",
			pos:  position{line: 709, col: 1, offset: 20571},
			expr: &actionExpr{
				pos: position{line: 710, col: 5, offset: 20580},
				run: (*parser).callonCast1,
				expr: &seqExpr{
					pos: position{line: 710, col: 5, offset: 20580},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 710, col: 5, offset: 20580},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 710, col: 9, offset: 20584},
								name: "CastType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 710, col: 18, offset: 20593},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 710, col: 21, offset: 20596},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 710, col: 25, offset: 20600},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 710, col: 28, offset: 20603},
							label: "expr",
							expr: &choiceExpr{
								pos: position{line: 710, col: 34, offset: 20609},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 710, col: 34, offset: 20609},
										name: "OverExpr",
									},
									&ruleRefExpr{
										pos:  position{line: 710, col: 45, offset: 20620},
										name: "Expr",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 710, col: 51, offset: 20626},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 710, col: 54, offset: 20629},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 714, col: 1, offset: 20726},
			expr: &choiceExpr{
				pos: position{line: 715, col: 5, offset: 20739},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 715, col: 5, offset: 20739},
						name: "Grep",
					},
					&actionExpr{
						pos: position{line: 717, col: 5, offset: 20826},
						run: (*parser).callonFunction3,
						expr: &seqExpr{
							pos: position{line: 717, col: 5, offset: 20826},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 717, col: 5, offset: 20826},
									val:        "regexp",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 717, col: 14, offset: 20835},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 717, col: 17, offset: 20838},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 717, col: 21, offset: 20842},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 717, col: 24, offset: 20845},
									label: "arg0Text",
									expr: &ruleRefExpr{
										pos:  position{line: 717, col: 33, offset: 20854},
										name: "RegexpPattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 717, col: 47, offset: 20868},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 717, col: 50, offset: 20871},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 717, col: 54, offset: 20875},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 717, col: 57, offset: 20878},
									label: "arg1",
									expr: &ruleRefExpr{
										pos:  position{line: 717, col: 62, offset: 20883},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 717, col: 67, offset: 20888},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 717, col: 70, offset: 20891},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 717, col: 74, offset: 20895},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 717, col: 80, offset: 20901},
										expr: &ruleRefExpr{
											pos:  position{line: 717, col: 80, offset: 20901},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 721, col: 5, offset: 21149},
						run: (*parser).callonFunction21,
						expr: &seqExpr{
							pos: position{line: 721, col: 5, offset: 21149},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 721, col: 5, offset: 21149},
									val:        "regexp_replace",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 721, col: 22, offset: 21166},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 721, col: 25, offset: 21169},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 721, col: 29, offset: 21173},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 721, col: 32, offset: 21176},
									label: "arg0",
									expr: &ruleRefExpr{
										pos:  position{line: 721, col: 37, offset: 21181},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 721, col: 42, offset: 21186},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 721, col: 45, offset: 21189},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 721, col: 49, offset: 21193},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 721, col: 52, offset: 21196},
									label: "arg1Text",
									expr: &ruleRefExpr{
										pos:  position{line: 721, col: 61, offset: 21205},
										name: "RegexpPattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 721, col: 75, offset: 21219},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 721, col: 78, offset: 21222},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 721, col: 82, offset: 21226},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 721, col: 85, offset: 21229},
									label: "arg2",
									expr: &ruleRefExpr{
										pos:  position{line: 721, col: 90, offset: 21234},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 721, col: 95, offset: 21239},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 721, col: 98, offset: 21242},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 721, col: 102, offset: 21246},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 721, col: 108, offset: 21252},
										expr: &ruleRefExpr{
											pos:  position{line: 721, col: 108, offset: 21252},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 725, col: 5, offset: 21514},
						run: (*parser).callonFunction44,
						expr: &seqExpr{
							pos: position{line: 725, col: 5, offset: 21514},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 725, col: 5, offset: 21514},
									expr: &ruleRefExpr{
										pos:  position{line: 725, col: 6, offset: 21515},
										name: "FuncGuard",
									},
								},
								&labeledExpr{
									pos:   position{line: 725, col: 16, offset: 21525},
									label: "fn",
									expr: &ruleRefExpr{
										pos:  position{line: 725, col: 19, offset: 21528},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 725, col: 34, offset: 21543},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 725, col: 37, offset: 21546},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 725, col: 41, offset: 21550},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 725, col: 44, offset: 21553},
									label: "args",
									expr: &ruleRefExpr{
										pos:  position{line: 725, col: 49, offset: 21558},
										name: "FunctionArgs",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 725, col: 62, offset: 21571},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 725, col: 65, offset: 21574},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 725, col: 69, offset: 21578},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 725, col: 75, offset: 21584},
										expr: &ruleRefExpr{
											pos:  position{line: 725, col: 75, offset: 21584},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FunctionArgs",
			pos:  position{line: 729, col: 1, offset: 21705},
			expr: &choiceExpr{
				pos: position{line: 730, col: 5, offset: 21722},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 730, col: 5, offset: 21722},
						run: (*parser).callonFunctionArgs2,
						expr: &labeledExpr{
							pos:   position{line: 730, col: 5, offset: 21722},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 730, col: 7, offset: 21724},
								name: "OverExpr",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 731, col: 5, offset: 21770},
						name: "OptionalExprs",
					},
				},
			},
		},
		{
			name: "Grep",
			pos:  position{line: 733, col: 1, offset: 21785},
			expr: &actionExpr{
				pos: position{line: 734, col: 5, offset: 21794},
				run: (*parser).callonGrep1,
				expr: &seqExpr{
					pos: position{line: 734, col: 5, offset: 21794},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 734, col: 5, offset: 21794},
							val:        "grep",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 734, col: 12, offset: 21801},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 734, col: 15, offset: 21804},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 734, col: 19, offset: 21808},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 734, col: 22, offset: 21811},
							label: "pattern",
							expr: &ruleRefExpr{
								pos:  position{line: 734, col: 30, offset: 21819},
								name: "Pattern",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 734, col: 38, offset: 21827},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 734, col: 41, offset: 21830},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 734, col: 45, offset: 21834},
								expr: &seqExpr{
									pos: position{line: 734, col: 46, offset: 21835},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 734, col: 46, offset: 21835},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 734, col: 50, offset: 21839},
											name: "__",
										},
										&choiceExpr{
											pos: position{line: 734, col: 54, offset: 21843},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 734, col: 54, offset: 21843},
													name: "OverExpr",
												},
												&ruleRefExpr{
													pos:  position{line: 734, col: 65, offset: 21854},
													name: "Expr",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 734, col: 71, offset: 21860},
											name: "__",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 734, col: 76, offset: 21865},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Pattern",
			pos:  position{line: 742, col: 1, offset: 22106},
			expr: &choiceExpr{
				pos: position{line: 743, col: 5, offset: 22118},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 743, col: 5, offset: 22118},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 744, col: 5, offset: 22129},
						name: "Glob",
					},
					&actionExpr{
						pos: position{line: 745, col: 5, offset: 22138},
						run: (*parser).callonPattern4,
						expr: &labeledExpr{
							pos:   position{line: 745, col: 5, offset: 22138},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 745, col: 7, offset: 22140},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "OptionalExprs",
			pos:  position{line: 749, col: 1, offset: 22232},
			expr: &choiceExpr{
				pos: position{line: 750, col: 5, offset: 22250},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 750, col: 5, offset: 22250},
						name: "Exprs",
					},
					&actionExpr{
						pos: position{line: 751, col: 5, offset: 22260},
						run: (*parser).callonOptionalExprs3,
						expr: &ruleRefExpr{
							pos:  position{line: 751, col: 5, offset: 22260},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 753, col: 1, offset: 22296},
			expr: &actionExpr{
				pos: position{line: 754, col: 5, offset: 22306},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 754, col: 5, offset: 22306},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 754, col: 5, offset: 22306},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 754, col: 11, offset: 22312},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 754, col: 16, offset: 22317},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 754, col: 21, offset: 22322},
								expr: &actionExpr{
									pos: position{line: 754, col: 22, offset: 22323},
									run: (*parser).callonExprs7,
									expr: &seqExpr{
										pos: position{line: 754, col: 22, offset: 22323},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 754, col: 22, offset: 22323},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 754, col: 25, offset: 22326},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 754, col: 29, offset: 22330},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 754, col: 32, offset: 22333},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 754, col: 34, offset: 22335},
													name: "Expr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 758, col: 1, offset: 22444},
			expr: &actionExpr{
				pos: position{line: 759, col: 5, offset: 22458},
				run: (*parser).callonDerefExpr1,
				expr: &seqExpr{
					pos: position{line: 759, col: 5, offset: 22458},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 759, col: 5, offset: 22458},
							expr: &ruleRefExpr{
								pos:  position{line: 759, col: 6, offset: 22459},
								name: "IP6",
							},
						},
						&labeledExpr{
							pos:   position{line: 759, col: 10, offset: 22463},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 759, col: 16, offset: 22469},
								name: "Identifier",
							},
						},
						&labeledExpr{
							pos:   position{line: 759, col: 27, offset: 22480},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 759, col: 32, offset: 22485},
								expr: &ruleRefExpr{
									pos:  position{line: 759, col: 33, offset: 22486},
									name: "Deref",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 763, col: 1, offset: 22554},
			expr: &choiceExpr{
				pos: position{line: 764, col: 5, offset: 22564},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 764, col: 5, offset: 22564},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 764, col: 5, offset: 22564},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 764, col: 5, offset: 22564},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 764, col: 9, offset: 22568},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 764, col: 14, offset: 22573},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 764, col: 27, offset: 22586},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 764, col: 30, offset: 22589},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 764, col: 34, offset: 22593},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 764, col: 37, offset: 22596},
									label: "to",
									expr: &zeroOrOneExpr{
										pos: position{line: 764, col: 40, offset: 22599},
										expr: &ruleRefExpr{
											pos:  position{line: 764, col: 40, offset: 22599},
											name: "AdditiveExpr",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 764, col: 54, offset: 22613},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 770, col: 5, offset: 22787},
						run: (*parser).callonDeref14,
						expr: &seqExpr{
							pos: position{line: 770, col: 5, offset: 22787},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 770, col: 5, offset: 22787},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 770, col: 9, offset: 22791},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 770, col: 12, offset: 22794},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 770, col: 16, offset: 22798},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 770, col: 19, offset: 22801},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 770, col: 22, offset: 22804},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 770, col: 35, offset: 22817},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 776, col: 5, offset: 22990},
						run: (*parser).callonDeref23,
						expr: &seqExpr{
							pos: position{line: 776, col: 5, offset: 22990},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 776, col: 5, offset: 22990},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 776, col: 9, offset: 22994},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 776, col: 14, offset: 22999},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 776, col: 19, offset: 23004},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 777, col: 5, offset: 23053},
						run: (*parser).callonDeref29,
						expr: &seqExpr{
							pos: position{line: 777, col: 5, offset: 23053},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 777, col: 5, offset: 23053},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 777, col: 9, offset: 23057},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 777, col: 12, offset: 23060},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 779, col: 1, offset: 23111},
			expr: &choiceExpr{
				pos: position{line: 780, col: 5, offset: 23123},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 780, col: 5, offset: 23123},
						name: "Record",
					},
					&ruleRefExpr{
						pos:  position{line: 781, col: 5, offset: 23134},
						name: "Array",
					},
					&ruleRefExpr{
						pos:  position{line: 782, col: 5, offset: 23144},
						name: "Set",
					},
					&ruleRefExpr{
						pos:  position{line: 783, col: 5, offset: 23152},
						name: "Map",
					},
					&ruleRefExpr{
						pos:  position{line: 784, col: 5, offset: 23160},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 785, col: 5, offset: 23172},
						run: (*parser).callonPrimary7,
						expr: &seqExpr{
							pos: position{line: 785, col: 5, offset: 23172},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 785, col: 5, offset: 23172},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 785, col: 9, offset: 23176},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 785, col: 12, offset: 23179},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 785, col: 17, offset: 23184},
										name: "OverExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 785, col: 26, offset: 23193},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 785, col: 29, offset: 23196},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 786, col: 5, offset: 23225},
						run: (*parser).callonPrimary15,
						expr: &seqExpr{
							pos: position{line: 786, col: 5, offset: 23225},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 786, col: 5, offset: 23225},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 786, col: 9, offset: 23229},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 786, col: 12, offset: 23232},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 786, col: 17, offset: 23237},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 786, col: 22, offset: 23242},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 786, col: 25, offset: 23245},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OverExpr",
			pos:  position{line: 788, col: 1, offset: 23271},
			expr: &actionExpr{
				pos: position{line: 789, col: 5, offset: 23284},
				run: (*parser).callonOverExpr1,
				expr: &seqExpr{
					pos: position{line: 789, col: 5, offset: 23284},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 789, col: 5, offset: 23284},
							val:        "over",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 789, col: 12, offset: 23291},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 789, col: 14, offset: 23293},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 789, col: 20, offset: 23299},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 789, col: 26, offset: 23305},
							label: "locals",
							expr: &zeroOrOneExpr{
								pos: position{line: 789, col: 33, offset: 23312},
								expr: &ruleRefExpr{
									pos:  position{line: 789, col: 33, offset: 23312},
									name: "Locals",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 789, col: 41, offset: 23320},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 789, col: 44, offset: 23323},
							val:        "|",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 789, col: 48, offset: 23327},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 789, col: 51, offset: 23330},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 789, col: 56, offset: 23335},
								name: "Seq",
							},
						},
					},
				},
			},
		},
		{
			name: "Record",
			pos:  position{line: 793, col: 1, offset: 23457},
			expr: &actionExpr{
				pos: position{line: 794, col: 5, offset: 23468},
				run: (*parser).callonRecord1,
				expr: &seqExpr{
					pos: position{line: 794, col: 5, offset: 23468},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 794, col: 5, offset: 23468},
							val:        "{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 794, col: 9, offset: 23472},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 794, col: 12, offset: 23475},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 794, col: 18, offset: 23481},
								name: "RecordElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 794, col: 30, offset: 23493},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 794, col: 33, offset: 23496},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RecordElems",
			pos:  position{line: 798, col: 1, offset: 23588},
			expr: &choiceExpr{
				pos: position{line: 799, col: 5, offset: 23604},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 799, col: 5, offset: 23604},
						run: (*parser).callonRecordElems2,
						expr: &seqExpr{
							pos: position{line: 799, col: 5, offset: 23604},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 799, col: 5, offset: 23604},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 799, col: 11, offset: 23610},
										name: "RecordElem",
									},
								},
								&labeledExpr{
									pos:   position{line: 799, col: 22, offset: 23621},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 799, col: 27, offset: 23626},
										expr: &ruleRefExpr{
											pos:  position{line: 799, col: 27, offset: 23626},
											name: "RecordElemTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 802, col: 5, offset: 23725},
						run: (*parser).callonRecordElems9,
						expr: &ruleRefExpr{
							pos:  position{line: 802, col: 5, offset: 23725},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "RecordElemTail",
			pos:  position{line: 804, col: 1, offset: 23761},
			expr: &actionExpr{
				pos: position{line: 804, col: 18, offset: 23778},
				run: (*parser).callonRecordElemTail1,
				expr: &seqExpr{
					pos: position{line: 804, col: 18, offset: 23778},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 804, col: 18, offset: 23778},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 804, col: 21, offset: 23781},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 804, col: 25, offset: 23785},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 804, col: 28, offset: 23788},
							label: "elem",
							expr: &ruleRefExpr{
								pos:  position{line: 804, col: 33, offset: 23793},
								name: "RecordElem",
							},
						},
					},
				},
			},
		},
		{
			name: "RecordElem",
			pos:  position{line: 806, col: 1, offset: 23826},
			expr: &choiceExpr{
				pos: position{line: 807, col: 5, offset: 23841},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 807, col: 5, offset: 23841},
						name: "Spread",
					},
					&ruleRefExpr{
						pos:  position{line: 808, col: 5, offset: 23852},
						name: "Field",
					},
					&ruleRefExpr{
						pos:  position{line: 809, col: 5, offset: 23862},
						name: "Identifier",
					},
				},
			},
		},
		{
			name: "Spread",
			pos:  position{line: 811, col: 1, offset: 23874},
			expr: &actionExpr{
				pos: position{line: 812, col: 5, offset: 23885},
				run: (*parser).callonSpread1,
				expr: &seqExpr{
					pos: position{line: 812, col: 5, offset: 23885},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 812, col: 5, offset: 23885},
							val:        "...",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 812, col: 11, offset: 23891},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 812, col: 14, offset: 23894},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 812, col: 19, offset: 23899},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 816, col: 1, offset: 23986},
			expr: &actionExpr{
				pos: position{line: 817, col: 5, offset: 23996},
				run: (*parser).callonField1,
				expr: &seqExpr{
					pos: position{line: 817, col: 5, offset: 23996},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 817, col: 5, offset: 23996},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 817, col: 10, offset: 24001},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 817, col: 20, offset: 24011},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 817, col: 23, offset: 24014},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 817, col: 27, offset: 24018},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 817, col: 30, offset: 24021},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 817, col: 36, offset: 24027},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Array",
			pos:  position{line: 821, col: 1, offset: 24129},
			expr: &actionExpr{
				pos: position{line: 822, col: 5, offset: 24139},
				run: (*parser).callonArray1,
				expr: &seqExpr{
					pos: position{line: 822, col: 5, offset: 24139},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 822, col: 5, offset: 24139},
							val:        "[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 822, col: 9, offset: 24143},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 822, col: 12, offset: 24146},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 822, col: 18, offset: 24152},
								name: "VectorElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 822, col: 30, offset: 24164},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 822, col: 33, offset: 24167},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Set",
			pos:  position{line: 826, col: 1, offset: 24258},
			expr: &actionExpr{
				pos: position{line: 827, col: 5, offset: 24266},
				run: (*parser).callonSet1,
				expr: &seqExpr{
					pos: position{line: 827, col: 5, offset: 24266},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 827, col: 5, offset: 24266},
							val:        "|[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 827, col: 10, offset: 24271},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 827, col: 13, offset: 24274},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 827, col: 19, offset: 24280},
								name: "VectorElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 827, col: 31, offset: 24292},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 827, col: 34, offset: 24295},
							val:        "]|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "VectorElems",
			pos:  position{line: 831, col: 1, offset: 24385},
			expr: &choiceExpr{
				pos: position{line: 832, col: 5, offset: 24401},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 832, col: 5, offset: 24401},
						run: (*parser).callonVectorElems2,
						expr: &seqExpr{
							pos: position{line: 832, col: 5, offset: 24401},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 832, col: 5, offset: 24401},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 832, col: 11, offset: 24407},
										name: "VectorElem",
									},
								},
								&labeledExpr{
									pos:   position{line: 832, col: 22, offset: 24418},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 832, col: 27, offset: 24423},
										expr: &actionExpr{
											pos: position{line: 832, col: 28, offset: 24424},
											run: (*parser).callonVectorElems8,
											expr: &seqExpr{
												pos: position{line: 832, col: 28, offset: 24424},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 832, col: 28, offset: 24424},
														name: "__",
													},
													&litMatcher{
														pos:        position{line: 832, col: 31, offset: 24427},
														val:        ",",
														ignoreCase: false,
													},
													&ruleRefExpr{
														pos:  position{line: 832, col: 35, offset: 24431},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 832, col: 38, offset: 24434},
														label: "e",
														expr: &ruleRefExpr{
															pos:  position{line: 832, col: 40, offset: 24436},
															name: "VectorElem",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 835, col: 5, offset: 24554},
						run: (*parser).callonVectorElems15,
						expr: &ruleRefExpr{
							pos:  position{line: 835, col: 5, offset: 24554},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "VectorElem",
			pos:  position{line: 837, col: 1, offset: 24590},
			expr: &choiceExpr{
				pos: position{line: 838, col: 5, offset: 24605},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 838, col: 5, offset: 24605},
						name: "Spread",
					},
					&actionExpr{
						pos: position{line: 839, col: 5, offset: 24616},
						run: (*parser).callonVectorElem3,
						expr: &labeledExpr{
							pos:   position{line: 839, col: 5, offset: 24616},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 839, col: 7, offset: 24618},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Map",
			pos:  position{line: 841, col: 1, offset: 24697},
			expr: &actionExpr{
				pos: position{line: 842, col: 5, offset: 24705},
				run: (*parser).callonMap1,
				expr: &seqExpr{
					pos: position{line: 842, col: 5, offset: 24705},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 842, col: 5, offset: 24705},
							val:        "|{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 842, col: 10, offset: 24710},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 842, col: 13, offset: 24713},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 842, col: 19, offset: 24719},
								name: "Entries",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 842, col: 27, offset: 24727},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 842, col: 30, offset: 24730},
							val:        "}|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Entries",
			pos:  position{line: 846, col: 1, offset: 24822},
			expr: &choiceExpr{
				pos: position{line: 847, col: 5, offset: 24834},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 847, col: 5, offset: 24834},
						run: (*parser).callonEntries2,
						expr: &seqExpr{
							pos: position{line: 847, col: 5, offset: 24834},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 847, col: 5, offset: 24834},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 847, col: 11, offset: 24840},
										name: "Entry",
									},
								},
								&labeledExpr{
									pos:   position{line: 847, col: 17, offset: 24846},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 847, col: 22, offset: 24851},
										expr: &ruleRefExpr{
											pos:  position{line: 847, col: 22, offset: 24851},
											name: "EntryTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 850, col: 5, offset: 24945},
						run: (*parser).callonEntries9,
						expr: &ruleRefExpr{
							pos:  position{line: 850, col: 5, offset: 24945},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "EntryTail",
			pos:  position{line: 853, col: 1, offset: 24982},
			expr: &actionExpr{
				pos: position{line: 853, col: 13, offset: 24994},
				run: (*parser).callonEntryTail1,
				expr: &seqExpr{
					pos: position{line: 853, col: 13, offset: 24994},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 853, col: 13, offset: 24994},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 853, col: 16, offset: 24997},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 853, col: 20, offset: 25001},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 853, col: 23, offset: 25004},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 853, col: 25, offset: 25006},
								name: "Entry",
							},
						},
					},
				},
			},
		},
		{
			name: "Entry",
			pos:  position{line: 855, col: 1, offset: 25031},
			expr: &actionExpr{
				pos: position{line: 856, col: 5, offset: 25041},
				run: (*parser).callonEntry1,
				expr: &seqExpr{
					pos: position{line: 856, col: 5, offset: 25041},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 856, col: 5, offset: 25041},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 856, col: 9, offset: 25045},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 856, col: 14, offset: 25050},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 856, col: 17, offset: 25053},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 856, col: 21, offset: 25057},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 856, col: 24, offset: 25060},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 856, col: 30, offset: 25066},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOp",
			pos:  position{line: 862, col: 1, offset: 25173},
			expr: &actionExpr{
				pos: position{line: 863, col: 5, offset: 25183},
				run: (*parser).callonSQLOp1,
				expr: &seqExpr{
					pos: position{line: 863, col: 5, offset: 25183},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 863, col: 5, offset: 25183},
							label: "selection",
							expr: &ruleRefExpr{
								pos:  position{line: 863, col: 15, offset: 25193},
								name: "SQLSelect",
							},
						},
						&labeledExpr{
							pos:   position{line: 864, col: 5, offset: 25207},
							label: "from",
							expr: &zeroOrOneExpr{
								pos: position{line: 864, col: 10, offset: 25212},
								expr: &ruleRefExpr{
									pos:  position{line: 864, col: 10, offset: 25212},
									name: "SQLFrom",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 865, col: 5, offset: 25225},
							label: "joins",
							expr: &zeroOrOneExpr{
								pos: position{line: 865, col: 11, offset: 25231},
								expr: &ruleRefExpr{
									pos:  position{line: 865, col: 11, offset: 25231},
									name: "SQLJoins",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 866, col: 5, offset: 25245},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 866, col: 11, offset: 25251},
								expr: &ruleRefExpr{
									pos:  position{line: 866, col: 11, offset: 25251},
									name: "SQLWhere",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 867, col: 5, offset: 25265},
							label: "groupby",
							expr: &zeroOrOneExpr{
								pos: position{line: 867, col: 13, offset: 25273},
								expr: &ruleRefExpr{
									pos:  position{line: 867, col: 13, offset: 25273},
									name: "SQLGroupBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 868, col: 5, offset: 25289},
							label: "having",
							expr: &zeroOrOneExpr{
								pos: position{line: 868, col: 12, offset: 25296},
								expr: &ruleRefExpr{
									pos:  position{line: 868, col: 12, offset: 25296},
									name: "SQLHaving",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 869, col: 5, offset: 25311},
							label: "orderby",
							expr: &zeroOrOneExpr{
								pos: position{line: 869, col: 13, offset: 25319},
								expr: &ruleRefExpr{
									pos:  position{line: 869, col: 13, offset: 25319},
									name: "SQLOrderBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 870, col: 5, offset: 25335},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 870, col: 11, offset: 25341},
								name: "SQLLimit",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLSelect",
			pos:  position{line: 894, col: 1, offset: 25707},
			expr: &choiceExpr{
				pos: position{line: 895, col: 5, offset: 25721},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 895, col: 5, offset: 25721},
						run: (*parser).callonSQLSelect2,
						expr: &seqExpr{
							pos: position{line: 895, col: 5, offset: 25721},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 895, col: 5, offset: 25721},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 895, col: 12, offset: 25728},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 895, col: 14, offset: 25730},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 896, col: 5, offset: 25758},
						run: (*parser).callonSQLSelect7,
						expr: &seqExpr{
							pos: position{line: 896, col: 5, offset: 25758},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 896, col: 5, offset: 25758},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 896, col: 12, offset: 25765},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 896, col: 14, offset: 25767},
									label: "assignments",
									expr: &ruleRefExpr{
										pos:  position{line: 896, col: 26, offset: 25779},
										name: "SQLAssignments",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignment",
			pos:  position{line: 898, col: 1, offset: 25823},
			expr: &actionExpr{
				pos: position{line: 899, col: 5, offset: 25841},
				run: (*parser).callonSQLAssignment1,
				expr: &seqExpr{
					pos: position{line: 899, col: 5, offset: 25841},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 899, col: 5, offset: 25841},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 899, col: 9, offset: 25845},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 899, col: 14, offset: 25850},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 899, col: 18, offset: 25854},
								expr: &seqExpr{
									pos: position{line: 899, col: 19, offset: 25855},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 899, col: 19, offset: 25855},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 899, col: 21, offset: 25857},
											name: "AS",
										},
										&ruleRefExpr{
											pos:  position{line: 899, col: 24, offset: 25860},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 899, col: 26, offset: 25862},
											name: "Lval",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignments",
			pos:  position{line: 907, col: 1, offset: 26053},
			expr: &actionExpr{
				pos: position{line: 908, col: 5, offset: 26072},
				run: (*parser).callonSQLAssignments1,
				expr: &seqExpr{
					pos: position{line: 908, col: 5, offset: 26072},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 908, col: 5, offset: 26072},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 908, col: 11, offset: 26078},
								name: "SQLAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 908, col: 25, offset: 26092},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 908, col: 30, offset: 26097},
								expr: &actionExpr{
									pos: position{line: 908, col: 31, offset: 26098},
									run: (*parser).callonSQLAssignments7,
									expr: &seqExpr{
										pos: position{line: 908, col: 31, offset: 26098},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 908, col: 31, offset: 26098},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 908, col: 34, offset: 26101},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 908, col: 38, offset: 26105},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 908, col: 41, offset: 26108},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 908, col: 46, offset: 26113},
													name: "SQLAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLFrom",
			pos:  position{line: 912, col: 1, offset: 26234},
			expr: &choiceExpr{
				pos: position{line: 913, col: 5, offset: 26246},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 913, col: 5, offset: 26246},
						run: (*parser).callonSQLFrom2,
						expr: &seqExpr{
							pos: position{line: 913, col: 5, offset: 26246},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 913, col: 5, offset: 26246},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 913, col: 7, offset: 26248},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 913, col: 12, offset: 26253},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 913, col: 14, offset: 26255},
									label: "table",
									expr: &ruleRefExpr{
										pos:  position{line: 913, col: 20, offset: 26261},
										name: "SQLTable",
									},
								},
								&labeledExpr{
									pos:   position{line: 913, col: 29, offset: 26270},
									label: "alias",
									expr: &zeroOrOneExpr{
										pos: position{line: 913, col: 35, offset: 26276},
										expr: &ruleRefExpr{
											pos:  position{line: 913, col: 35, offset: 26276},
											name: "SQLAlias",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 916, col: 5, offset: 26371},
						run: (*parser).callonSQLFrom12,
						expr: &seqExpr{
							pos: position{line: 916, col: 5, offset: 26371},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 916, col: 5, offset: 26371},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 916, col: 7, offset: 26373},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 916, col: 12, offset: 26378},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 916, col: 14, offset: 26380},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAlias",
			pos:  position{line: 918, col: 1, offset: 26405},
			expr: &choiceExpr{
				pos: position{line: 919, col: 5, offset: 26418},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 919, col: 5, offset: 26418},
						run: (*parser).callonSQLAlias2,
						expr: &seqExpr{
							pos: position{line: 919, col: 5, offset: 26418},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 919, col: 5, offset: 26418},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 919, col: 7, offset: 26420},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 919, col: 10, offset: 26423},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 919, col: 12, offset: 26425},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 919, col: 15, offset: 26428},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 920, col: 5, offset: 26456},
						run: (*parser).callonSQLAlias9,
						expr: &seqExpr{
							pos: position{line: 920, col: 5, offset: 26456},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 920, col: 5, offset: 26456},
									name: "_",
								},
								&notExpr{
									pos: position{line: 920, col: 7, offset: 26458},
									expr: &seqExpr{
										pos: position{line: 920, col: 9, offset: 26460},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 920, col: 9, offset: 26460},
												name: "SQLTokenSentinels",
											},
											&ruleRefExpr{
												pos:  position{line: 920, col: 27, offset: 26478},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 920, col: 30, offset: 26481},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 920, col: 33, offset: 26484},
										name: "Lval",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLTable",
			pos:  position{line: 922, col: 1, offset: 26509},
			expr: &ruleRefExpr{
				pos:  position{line: 923, col: 5, offset: 26522},
				name: "Expr",
			},
		},
		{
			name: "SQLJoins",
			pos:  position{line: 925, col: 1, offset: 26528},
			expr: &actionExpr{
				pos: position{line: 926, col: 5, offset: 26541},
				run: (*parser).callonSQLJoins1,
				expr: &seqExpr{
					pos: position{line: 926, col: 5, offset: 26541},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 926, col: 5, offset: 26541},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 926, col: 11, offset: 26547},
								name: "SQLJoin",
							},
						},
						&labeledExpr{
							pos:   position{line: 926, col: 19, offset: 26555},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 926, col: 24, offset: 26560},
								expr: &actionExpr{
									pos: position{line: 926, col: 25, offset: 26561},
									run: (*parser).callonSQLJoins7,
									expr: &labeledExpr{
										pos:   position{line: 926, col: 25, offset: 26561},
										label: "join",
										expr: &ruleRefExpr{
											pos:  position{line: 926, col: 30, offset: 26566},
											name: "SQLJoin",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoin",
			pos:  position{line: 930, col: 1, offset: 26681},
			expr: &actionExpr{
				pos: position{line: 931, col: 5, offset: 26693},
				run: (*parser).callonSQLJoin1,
				expr: &seqExpr{
					pos: position{line: 931, col: 5, offset: 26693},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 931, col: 5, offset: 26693},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 931, col: 11, offset: 26699},
								name: "SQLJoinStyle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 931, col: 24, offset: 26712},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 931, col: 26, offset: 26714},
							name: "JOIN",
						},
						&ruleRefExpr{
							pos:  position{line: 931, col: 31, offset: 26719},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 931, col: 33, offset: 26721},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 931, col: 39, offset: 26727},
								name: "SQLTable",
							},
						},
						&labeledExpr{
							pos:   position{line: 931, col: 48, offset: 26736},
							label: "alias",
							expr: &zeroOrOneExpr{
								pos: position{line: 931, col: 54, offset: 26742},
								expr: &ruleRefExpr{
									pos:  position{line: 931, col: 54, offset: 26742},
									name: "SQLAlias",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 931, col: 64, offset: 26752},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 931, col: 66, offset: 26754},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 931, col: 69, offset: 26757},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 931, col: 71, offset: 26759},
							label: "leftKey",
							expr: &ruleRefExpr{
								pos:  position{line: 931, col: 79, offset: 26767},
								name: "JoinKey",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 931, col: 87, offset: 26775},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 931, col: 90, offset: 26778},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 931, col: 94, offset: 26782},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 931, col: 97, offset: 26785},
							label: "rightKey",
							expr: &ruleRefExpr{
								pos:  position{line: 931, col: 106, offset: 26794},
								name: "JoinKey",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoinStyle",
			pos:  position{line: 946, col: 1, offset: 27025},
			expr: &choiceExpr{
				pos: position{line: 947, col: 5, offset: 27042},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 947, col: 5, offset: 27042},
						run: (*parser).callonSQLJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 947, col: 5, offset: 27042},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 947, col: 5, offset: 27042},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 947, col: 7, offset: 27044},
									label: "style",
									expr: &choiceExpr{
										pos: position{line: 947, col: 14, offset: 27051},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 947, col: 14, offset: 27051},
												name: "ANTI",
											},
											&ruleRefExpr{
												pos:  position{line: 947, col: 21, offset: 27058},
												name: "INNER",
											},
											&ruleRefExpr{
												pos:  position{line: 947, col: 29, offset: 27066},
												name: "LEFT",
											},
											&ruleRefExpr{
												pos:  position{line: 947, col: 36, offset: 27073},
												name: "RIGHT",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 948, col: 5, offset: 27106},
						run: (*parser).callonSQLJoinStyle11,
						expr: &litMatcher{
							pos:        position{line: 948, col: 5, offset: 27106},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLWhere",
			pos:  position{line: 950, col: 1, offset: 27134},
			expr: &actionExpr{
				pos: position{line: 951, col: 5, offset: 27147},
				run: (*parser).callonSQLWhere1,
				expr: &seqExpr{
					pos: position{line: 951, col: 5, offset: 27147},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 951, col: 5, offset: 27147},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 951, col: 7, offset: 27149},
							name: "WHERE",
						},
						&ruleRefExpr{
							pos:  position{line: 951, col: 13, offset: 27155},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 951, col: 15, offset: 27157},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 951, col: 20, offset: 27162},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLGroupBy",
			pos:  position{line: 953, col: 1, offset: 27198},
			expr: &actionExpr{
				pos: position{line: 954, col: 5, offset: 27213},
				run: (*parser).callonSQLGroupBy1,
				expr: &seqExpr{
					pos: position{line: 954, col: 5, offset: 27213},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 954, col: 5, offset: 27213},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 954, col: 7, offset: 27215},
							name: "GROUP",
						},
						&ruleRefExpr{
							pos:  position{line: 954, col: 13, offset: 27221},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 954, col: 15, offset: 27223},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 954, col: 18, offset: 27226},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 954, col: 20, offset: 27228},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 954, col: 28, offset: 27236},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLHaving",
			pos:  position{line: 956, col: 1, offset: 27272},
			expr: &actionExpr{
				pos: position{line: 957, col: 5, offset: 27286},
				run: (*parser).callonSQLHaving1,
				expr: &seqExpr{
					pos: position{line: 957, col: 5, offset: 27286},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 957, col: 5, offset: 27286},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 957, col: 7, offset: 27288},
							name: "HAVING",
						},
						&ruleRefExpr{
							pos:  position{line: 957, col: 14, offset: 27295},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 957, col: 16, offset: 27297},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 957, col: 21, offset: 27302},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrderBy",
			pos:  position{line: 959, col: 1, offset: 27338},
			expr: &actionExpr{
				pos: position{line: 960, col: 5, offset: 27353},
				run: (*parser).callonSQLOrderBy1,
				expr: &seqExpr{
					pos: position{line: 960, col: 5, offset: 27353},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 960, col: 5, offset: 27353},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 960, col: 7, offset: 27355},
							name: "ORDER",
						},
						&ruleRefExpr{
							pos:  position{line: 960, col: 13, offset: 27361},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 960, col: 15, offset: 27363},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 960, col: 18, offset: 27366},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 960, col: 20, offset: 27368},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 960, col: 25, offset: 27373},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 960, col: 31, offset: 27379},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 960, col: 37, offset: 27385},
								name: "SQLOrder",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrder",
			pos:  position{line: 964, col: 1, offset: 27496},
			expr: &choiceExpr{
				pos: position{line: 965, col: 5, offset: 27509},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 965, col: 5, offset: 27509},
						run: (*parser).callonSQLOrder2,
						expr: &seqExpr{
							pos: position{line: 965, col: 5, offset: 27509},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 965, col: 5, offset: 27509},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 965, col: 7, offset: 27511},
									label: "dir",
									expr: &choiceExpr{
										pos: position{line: 965, col: 12, offset: 27516},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 965, col: 12, offset: 27516},
												name: "ASC",
											},
											&ruleRefExpr{
												pos:  position{line: 965, col: 18, offset: 27522},
												name: "DESC",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 966, col: 5, offset: 27552},
						run: (*parser).callonSQLOrder9,
						expr: &litMatcher{
							pos:        position{line: 966, col: 5, offset: 27552},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLLimit",
			pos:  position{line: 968, col: 1, offset: 27578},
			expr: &choiceExpr{
				pos: position{line: 969, col: 5, offset: 27591},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 969, col: 5, offset: 27591},
						run: (*parser).callonSQLLimit2,
						expr: &seqExpr{
							pos: position{line: 969, col: 5, offset: 27591},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 969, col: 5, offset: 27591},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 969, col: 7, offset: 27593},
									name: "LIMIT",
								},
								&ruleRefExpr{
									pos:  position{line: 969, col: 13, offset: 27599},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 969, col: 15, offset: 27601},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 969, col: 21, offset: 27607},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 970, col: 5, offset: 27638},
						run: (*parser).callonSQLLimit9,
						expr: &litMatcher{
							pos:        position{line: 970, col: 5, offset: 27638},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SELECT",
			pos:  position{line: 972, col: 1, offset: 27660},
			expr: &actionExpr{
				pos: position{line: 972, col: 10, offset: 27669},
				run: (*parser).callonSELECT1,
				expr: &litMatcher{
					pos:        position{line: 972, col: 10, offset: 27669},
					val:        "select",
					ignoreCase: true,
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 973, col: 1, offset: 27704},
			expr: &actionExpr{
				pos: position{line: 973, col: 6, offset: 27709},
				run: (*parser).callonAS1,
				expr: &litMatcher{
					pos:        position{line: 973, col: 6, offset: 27709},
					val:        "as",
					ignoreCase: true,
				},
			},
		},
		{
			name: "FROM",
			pos:  position{line: 974, col: 1, offset: 27736},
			expr: &actionExpr{
				pos: position{line: 974, col: 8, offset: 27743},
				run: (*parser).callonFROM1,
				expr: &litMatcher{
					pos:        position{line: 974, col: 8, offset: 27743},
					val:        "from",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JOIN",
			pos:  position{line: 975, col: 1, offset: 27774},
			expr: &actionExpr{
				pos: position{line: 975, col: 8, offset: 27781},
				run: (*parser).callonJOIN1,
				expr: &litMatcher{
					pos:        position{line: 975, col: 8, offset: 27781},
					val:        "join",
					ignoreCase: true,
				},
			},
		},
		{
			name: "WHERE",
			pos:  position{line: 976, col: 1, offset: 27812},
			expr: &actionExpr{
				pos: position{line: 976, col: 9, offset: 27820},
				run: (*parser).callonWHERE1,
				expr: &litMatcher{
					pos:        position{line: 976, col: 9, offset: 27820},
					val:        "where",
					ignoreCase: true,
				},
			},
		},
		{
			name: "GROUP",
			pos:  position{line: 977, col: 1, offset: 27853},
			expr: &actionExpr{
				pos: position{line: 977, col: 9, offset: 27861},
				run: (*parser).callonGROUP1,
				expr: &litMatcher{
					pos:        position{line: 977, col: 9, offset: 27861},
					val:        "group",
					ignoreCase: true,
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 978, col: 1, offset: 27894},
			expr: &actionExpr{
				pos: position{line: 978, col: 6, offset: 27899},
				run: (*parser).callonBY1,
				expr: &litMatcher{
					pos:        position{line: 978, col: 6, offset: 27899},
					val:        "by",
					ignoreCase: true,
				},
			},
		},
		{
			name: "HAVING",
			pos:  position{line: 979, col: 1, offset: 27926},
			expr: &actionExpr{
				pos: position{line: 979, col: 10, offset: 27935},
				run: (*parser).callonHAVING1,
				expr: &litMatcher{
					pos:        position{line: 979, col: 10, offset: 27935},
					val:        "having",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ORDER",
			pos:  position{line: 980, col: 1, offset: 27970},
			expr: &actionExpr{
				pos: position{line: 980, col: 9, offset: 27978},
				run: (*parser).callonORDER1,
				expr: &litMatcher{
					pos:        position{line: 980, col: 9, offset: 27978},
					val:        "order",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ON",
			pos:  position{line: 981, col: 1, offset: 28011},
			expr: &actionExpr{
				pos: position{line: 981, col: 6, offset: 28016},
				run: (*parser).callonON1,
				expr: &litMatcher{
					pos:        position{line: 981, col: 6, offset: 28016},
					val:        "on",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LIMIT",
			pos:  position{line: 982, col: 1, offset: 28043},
			expr: &actionExpr{
				pos: position{line: 982, col: 9, offset: 28051},
				run: (*parser).callonLIMIT1,
				expr: &litMatcher{
					pos:        position{line: 982, col: 9, offset: 28051},
					val:        "limit",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ASC",
			pos:  position{line: 983, col: 1, offset: 28084},
			expr: &actionExpr{
				pos: position{line: 983, col: 7, offset: 28090},
				run: (*parser).callonASC1,
				expr: &litMatcher{
					pos:        position{line: 983, col: 7, offset: 28090},
					val:        "asc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "DESC",
			pos:  position{line: 984, col: 1, offset: 28119},
			expr: &actionExpr{
				pos: position{line: 984, col: 8, offset: 28126},
				run: (*parser).callonDESC1,
				expr: &litMatcher{
					pos:        position{line: 984, col: 8, offset: 28126},
					val:        "desc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ANTI",
			pos:  position{line: 985, col: 1, offset: 28157},
			expr: &actionExpr{
				pos: position{line: 985, col: 8, offset: 28164},
				run: (*parser).callonANTI1,
				expr: &litMatcher{
					pos:        position{line: 985, col: 8, offset: 28164},
					val:        "anti",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LEFT",
			pos:  position{line: 986, col: 1, offset: 28195},
			expr: &actionExpr{
				pos: position{line: 986, col: 8, offset: 28202},
				run: (*parser).callonLEFT1,
				expr: &litMatcher{
					pos:        position{line: 986, col: 8, offset: 28202},
					val:        "left",
					ignoreCase: true,
				},
			},
		},
		{
			name: "RIGHT",
			pos:  position{line: 987, col: 1, offset: 28233},
			expr: &actionExpr{
				pos: position{line: 987, col: 9, offset: 28241},
				run: (*parser).callonRIGHT1,
				expr: &litMatcher{
					pos:        position{line: 987, col: 9, offset: 28241},
					val:        "right",
					ignoreCase: true,
				},
			},
		},
		{
			name: "INNER",
			pos:  position{line: 988, col: 1, offset: 28274},
			expr: &actionExpr{
				pos: position{line: 988, col: 9, offset: 28282},
				run: (*parser).callonINNER1,
				expr: &litMatcher{
					pos:        position{line: 988, col: 9, offset: 28282},
					val:        "inner",
					ignoreCase: true,
				},
			},
		},
		{
			name: "SQLTokenSentinels",
			pos:  position{line: 990, col: 1, offset: 28316},
			expr: &choiceExpr{
				pos: position{line: 991, col: 5, offset: 28338},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 991, col: 5, offset: 28338},
						name: "SELECT",
					},
					&ruleRefExpr{
						pos:  position{line: 991, col: 14, offset: 28347},
						name: "AS",
					},
					&ruleRefExpr{
						pos:  position{line: 991, col: 19, offset: 28352},
						name: "FROM",
					},
					&ruleRefExpr{
						pos:  position{line: 991, col: 26, offset: 28359},
						name: "JOIN",
					},
					&ruleRefExpr{
						pos:  position{line: 991, col: 33, offset: 28366},
						name: "WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 991, col: 41, offset: 28374},
						name: "GROUP",
					},
					&ruleRefExpr{
						pos:  position{line: 991, col: 49, offset: 28382},
						name: "HAVING",
					},
					&ruleRefExpr{
						pos:  position{line: 991, col: 58, offset: 28391},
						name: "ORDER",
					},
					&ruleRefExpr{
						pos:  position{line: 991, col: 66, offset: 28399},
						name: "LIMIT",
					},
					&ruleRefExpr{
						pos:  position{line: 991, col: 74, offset: 28407},
						name: "ON",
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 995, col: 1, offset: 28433},
			expr: &choiceExpr{
				pos: position{line: 996, col: 5, offset: 28445},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 996, col: 5, offset: 28445},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 997, col: 5, offset: 28461},
						name: "TemplateLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 998, col: 5, offset: 28481},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 999, col: 5, offset: 28499},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1000, col: 5, offset: 28518},
						name: "BytesLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1001, col: 5, offset: 28535},
						name: "Duration",
					},
					&ruleRefExpr{
						pos:  position{line: 1002, col: 5, offset: 28548},
						name: "Time",
					},
					&ruleRefExpr{
						pos:  position{line: 1003, col: 5, offset: 28557},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1004, col: 5, offset: 28574},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1005, col: 5, offset: 28593},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1006, col: 5, offset: 28612},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 1008, col: 1, offset: 28625},
			expr: &choiceExpr{
				pos: position{line: 1009, col: 5, offset: 28643},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1009, col: 5, offset: 28643},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 1009, col: 5, offset: 28643},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1009, col: 5, offset: 28643},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1009, col: 7, offset: 28645},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 1009, col: 14, offset: 28652},
									expr: &ruleRefExpr{
										pos:  position{line: 1009, col: 15, offset: 28653},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1012, col: 5, offset: 28768},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 1012, col: 5, offset: 28768},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1012, col: 7, offset: 28770},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 1016, col: 1, offset: 28874},
			expr: &choiceExpr{
				pos: position{line: 1017, col: 5, offset: 28893},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1017, col: 5, offset: 28893},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 1017, col: 5, offset: 28893},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1017, col: 5, offset: 28893},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1017, col: 7, offset: 28895},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 1017, col: 11, offset: 28899},
									expr: &ruleRefExpr{
										pos:  position{line: 1017, col: 12, offset: 28900},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1020, col: 5, offset: 29014},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 1020, col: 5, offset: 29014},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1020, col: 7, offset: 29016},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 1024, col: 1, offset: 29115},
			expr: &actionExpr{
				pos: position{line: 1025, col: 5, offset: 29132},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1025, col: 5, offset: 29132},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1025, col: 7, offset: 29134},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 1029, col: 1, offset: 29247},
			expr: &actionExpr{
				pos: position{line: 1030, col: 5, offset: 29266},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1030, col: 5, offset: 29266},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1030, col: 7, offset: 29268},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 1034, col: 1, offset: 29377},
			expr: &choiceExpr{
				pos: position{line: 1035, col: 5, offset: 29396},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1035, col: 5, offset: 29396},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 1035, col: 5, offset: 29396},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1036, col: 5, offset: 29500},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 1036, col: 5, offset: 29500},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 1038, col: 1, offset: 29602},
			expr: &actionExpr{
				pos: position{line: 1039, col: 5, offset: 29618},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 1039, col: 5, offset: 29618},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "BytesLiteral",
			pos:  position{line: 1041, col: 1, offset: 29714},
			expr: &actionExpr{
				pos: position{line: 1042, col: 5, offset: 29731},
				run: (*parser).callonBytesLiteral1,
				expr: &seqExpr{
					pos: position{line: 1042, col: 5, offset: 29731},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1042, col: 5, offset: 29731},
							val:        "0x",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1042, col: 10, offset: 29736},
							expr: &ruleRefExpr{
								pos:  position{line: 1042, col: 10, offset: 29736},
								name: "HexDigit",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeLiteral",
			pos:  position{line: 1046, col: 1, offset: 29851},
			expr: &actionExpr{
				pos: position{line: 1047, col: 5, offset: 29867},
				run: (*parser).callonTypeLiteral1,
				expr: &seqExpr{
					pos: position{line: 1047, col: 5, offset: 29867},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1047, col: 5, offset: 29867},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1047, col: 9, offset: 29871},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1047, col: 13, offset: 29875},
								name: "Type",
							},
						},
						&litMatcher{
							pos:        position{line: 1047, col: 18, offset: 29880},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "CastType",
			pos:  position{line: 1051, col: 1, offset: 29969},
			expr: &choiceExpr{
				pos: position{line: 1052, col: 5, offset: 29982},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1052, col: 5, offset: 29982},
						name: "TypeLiteral",
					},
					&actionExpr{
						pos: position{line: 1053, col: 5, offset: 29998},
						run: (*parser).callonCastType3,
						expr: &labeledExpr{
							pos:   position{line: 1053, col: 5, offset: 29998},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1053, col: 9, offset: 30002},
								name: "PrimitiveType",
							},
						},
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 1057, col: 1, offset: 30101},
			expr: &choiceExpr{
				pos: position{line: 1058, col: 5, offset: 30110},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1058, col: 5, offset: 30110},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1059, col: 5, offset: 30126},
						name: "AmbiguousType",
					},
					&ruleRefExpr{
						pos:  position{line: 1060, col: 5, offset: 30144},
						name: "ComplexType",
					},
				},
			},
		},
		{
			name: "AmbiguousType",
			pos:  position{line: 1062, col: 1, offset: 30157},
			expr: &choiceExpr{
				pos: position{line: 1063, col: 5, offset: 30175},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1063, col: 5, offset: 30175},
						run: (*parser).callonAmbiguousType2,
						expr: &seqExpr{
							pos: position{line: 1063, col: 5, offset: 30175},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1063, col: 5, offset: 30175},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1063, col: 10, offset: 30180},
										name: "PrimitiveType",
									},
								},
								&notExpr{
									pos: position{line: 1063, col: 24, offset: 30194},
									expr: &ruleRefExpr{
										pos:  position{line: 1063, col: 25, offset: 30195},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1064, col: 5, offset: 30235},
						run: (*parser).callonAmbiguousType8,
						expr: &seqExpr{
							pos: position{line: 1064, col: 5, offset: 30235},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1064, col: 5, offset: 30235},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1064, col: 10, offset: 30240},
										name: "IdentifierName",
									},
								},
								&labeledExpr{
									pos:   position{line: 1064, col: 25, offset: 30255},
									label: "opt",
									expr: &zeroOrOneExpr{
										pos: position{line: 1064, col: 29, offset: 30259},
										expr: &seqExpr{
											pos: position{line: 1064, col: 30, offset: 30260},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1064, col: 30, offset: 30260},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 1064, col: 33, offset: 30263},
													val:        "=",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 1064, col: 37, offset: 30267},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 1064, col: 40, offset: 30270},
													name: "Type",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1070, col: 5, offset: 30502},
						run: (*parser).callonAmbiguousType19,
						expr: &labeledExpr{
							pos:   position{line: 1070, col: 5, offset: 30502},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1070, col: 10, offset: 30507},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1073, col: 5, offset: 30607},
						run: (*parser).callonAmbiguousType22,
						expr: &seqExpr{
							pos: position{line: 1073, col: 5, offset: 30607},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1073, col: 5, offset: 30607},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1073, col: 9, offset: 30611},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1073, col: 12, offset: 30614},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 1073, col: 14, offset: 30616},
										name: "TypeUnion",
									},
								},
								&litMatcher{
									pos:        position{line: 1073, col: 24, offset: 30626},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeUnion",
			pos:  position{line: 1075, col: 1, offset: 30649},
			expr: &actionExpr{
				pos: position{line: 1076, col: 5, offset: 30663},
				run: (*parser).callonTypeUnion1,
				expr: &labeledExpr{
					pos:   position{line: 1076, col: 5, offset: 30663},
					label: "types",
					expr: &ruleRefExpr{
						pos:  position{line: 1076, col: 11, offset: 30669},
						name: "TypeList",
					},
				},
			},
		},
		{
			name: "TypeList",
			pos:  position{line: 1080, col: 1, offset: 30765},
			expr: &actionExpr{
				pos: position{line: 1081, col: 5, offset: 30778},
				run: (*parser).callonTypeList1,
				expr: &seqExpr{
					pos: position{line: 1081, col: 5, offset: 30778},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1081, col: 5, offset: 30778},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1081, col: 11, offset: 30784},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 1081, col: 16, offset: 30789},
							label: "rest",
							expr: &oneOrMoreExpr{
								pos: position{line: 1081, col: 21, offset: 30794},
								expr: &ruleRefExpr{
									pos:  position{line: 1081, col: 21, offset: 30794},
									name: "TypeListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeListTail",
			pos:  position{line: 1085, col: 1, offset: 30888},
			expr: &actionExpr{
				pos: position{line: 1085, col: 16, offset: 30903},
				run: (*parser).callonTypeListTail1,
				expr: &seqExpr{
					pos: position{line: 1085, col: 16, offset: 30903},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1085, col: 16, offset: 30903},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1085, col: 19, offset: 30906},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1085, col: 23, offset: 30910},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1085, col: 26, offset: 30913},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1085, col: 30, offset: 30917},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexType",
			pos:  position{line: 1087, col: 1, offset: 30943},
			expr: &choiceExpr{
				pos: position{line: 1088, col: 5, offset: 30959},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1088, col: 5, offset: 30959},
						run: (*parser).callonComplexType2,
						expr: &seqExpr{
							pos: position{line: 1088, col: 5, offset: 30959},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1088, col: 5, offset: 30959},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1088, col: 9, offset: 30963},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1088, col: 12, offset: 30966},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 1088, col: 19, offset: 30973},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1088, col: 33, offset: 30987},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1088, col: 36, offset: 30990},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1091, col: 5, offset: 31087},
						run: (*parser).callonComplexType10,
						expr: &seqExpr{
							pos: position{line: 1091, col: 5, offset: 31087},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1091, col: 5, offset: 31087},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1091, col: 9, offset: 31091},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1091, col: 12, offset: 31094},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1091, col: 16, offset: 31098},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1091, col: 21, offset: 31103},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1091, col: 24, offset: 31106},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1094, col: 5, offset: 31197},
						run: (*parser).callonComplexType18,
						expr: &seqExpr{
							pos: position{line: 1094, col: 5, offset: 31197},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1094, col: 5, offset: 31197},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1094, col: 10, offset: 31202},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1094, col: 13, offset: 31205},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1094, col: 17, offset: 31209},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1094, col: 22, offset: 31214},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1094, col: 25, offset: 31217},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1097, col: 5, offset: 31307},
						run: (*parser).callonComplexType26,
						expr: &seqExpr{
							pos: position{line: 1097, col: 5, offset: 31307},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1097, col: 5, offset: 31307},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1097, col: 10, offset: 31312},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1097, col: 13, offset: 31315},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 1097, col: 21, offset: 31323},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1097, col: 26, offset: 31328},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1097, col: 29, offset: 31331},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1097, col: 33, offset: 31335},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1097, col: 36, offset: 31338},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 1097, col: 44, offset: 31346},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1097, col: 49, offset: 31351},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1097, col: 52, offset: 31354},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateLiteral",
			pos:  position{line: 1101, col: 1, offset: 31470},
			expr: &actionExpr{
				pos: position{line: 1102, col: 5, offset: 31490},
				run: (*parser).callonTemplateLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1102, col: 5, offset: 31490},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1102, col: 7, offset: 31492},
						name: "TemplateLiteralParts",
					},
				},
			},
		},
		{
			name: "TemplateLiteralParts",
			pos:  position{line: 1109, col: 1, offset: 31708},
			expr: &choiceExpr{
				pos: position{line: 1110, col: 5, offset: 31733},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1110, col: 5, offset: 31733},
						run: (*parser).callonTemplateLiteralParts2,
						expr: &seqExpr{
							pos: position{line: 1110, col: 5, offset: 31733},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1110, col: 5, offset: 31733},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1110, col: 9, offset: 31737},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1110, col: 11, offset: 31739},
										expr: &ruleRefExpr{
											pos:  position{line: 1110, col: 11, offset: 31739},
											name: "TemplateDoubleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1110, col: 37, offset: 31765},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1111, col: 5, offset: 31791},
						run: (*parser).callonTemplateLiteralParts9,
						expr: &seqExpr{
							pos: position{line: 1111, col: 5, offset: 31791},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1111, col: 5, offset: 31791},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1111, col: 9, offset: 31795},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1111, col: 11, offset: 31797},
										expr: &ruleRefExpr{
											pos:  position{line: 1111, col: 11, offset: 31797},
											name: "TemplateSingleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1111, col: 37, offset: 31823},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedPart",
			pos:  position{line: 1113, col: 1, offset: 31846},
			expr: &choiceExpr{
				pos: position{line: 1114, col: 5, offset: 31875},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1114, col: 5, offset: 31875},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 1115, col: 5, offset: 31892},
						run: (*parser).callonTemplateDoubleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 1115, col: 5, offset: 31892},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1115, col: 7, offset: 31894},
								expr: &ruleRefExpr{
									pos:  position{line: 1115, col: 7, offset: 31894},
									name: "TemplateDoubleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedChar",
			pos:  position{line: 1119, col: 1, offset: 32031},
			expr: &choiceExpr{
				pos: position{line: 1120, col: 5, offset: 32060},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1120, col: 5, offset: 32060},
						run: (*parser).callonTemplateDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1120, col: 5, offset: 32060},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1120, col: 5, offset: 32060},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1120, col: 10, offset: 32065},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1120, col: 12, offset: 32067},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1121, col: 5, offset: 32094},
						run: (*parser).callonTemplateDoubleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1121, col: 5, offset: 32094},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1121, col: 5, offset: 32094},
									expr: &litMatcher{
										pos:        position{line: 1121, col: 7, offset: 32096},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1121, col: 13, offset: 32102},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1121, col: 15, offset: 32104},
										name: "DoubleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedPart",
			pos:  position{line: 1123, col: 1, offset: 32140},
			expr: &choiceExpr{
				pos: position{line: 1124, col: 5, offset: 32169},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1124, col: 5, offset: 32169},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 1125, col: 5, offset: 32186},
						run: (*parser).callonTemplateSingleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 1125, col: 5, offset: 32186},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1125, col: 7, offset: 32188},
								expr: &ruleRefExpr{
									pos:  position{line: 1125, col: 7, offset: 32188},
									name: "TemplateSingleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedChar",
			pos:  position{line: 1129, col: 1, offset: 32325},
			expr: &choiceExpr{
				pos: position{line: 1130, col: 5, offset: 32354},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1130, col: 5, offset: 32354},
						run: (*parser).callonTemplateSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1130, col: 5, offset: 32354},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1130, col: 5, offset: 32354},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1130, col: 10, offset: 32359},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1130, col: 12, offset: 32361},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1131, col: 5, offset: 32388},
						run: (*parser).callonTemplateSingleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1131, col: 5, offset: 32388},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1131, col: 5, offset: 32388},
									expr: &litMatcher{
										pos:        position{line: 1131, col: 7, offset: 32390},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1131, col: 13, offset: 32396},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1131, col: 15, offset: 32398},
										name: "SingleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateExpr",
			pos:  position{line: 1133, col: 1, offset: 32434},
			expr: &actionExpr{
				pos: position{line: 1134, col: 5, offset: 32451},
				run: (*parser).callonTemplateExpr1,
				expr: &seqExpr{
					pos: position{line: 1134, col: 5, offset: 32451},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1134, col: 5, offset: 32451},
							val:        "${",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1134, col: 10, offset: 32456},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1134, col: 13, offset: 32459},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 1134, col: 15, offset: 32461},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1134, col: 20, offset: 32466},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1134, col: 23, offset: 32469},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 1149, col: 1, offset: 32765},
			expr: &actionExpr{
				pos: position{line: 1150, col: 5, offset: 32783},
				run: (*parser).callonPrimitiveType1,
				expr: &choiceExpr{
					pos: position{line: 1150, col: 9, offset: 32787},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 1150, col: 9, offset: 32787},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1150, col: 19, offset: 32797},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1150, col: 30, offset: 32808},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1150, col: 41, offset: 32819},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1151, col: 9, offset: 32836},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1151, col: 18, offset: 32845},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1151, col: 28, offset: 32855},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1151, col: 38, offset: 32865},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1152, col: 9, offset: 32881},
							val:        "float16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1152, col: 21, offset: 32893},
							val:        "float32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1152, col: 33, offset: 32905},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1153, col: 9, offset: 32923},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1153, col: 18, offset: 32932},
							val:        "string",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1154, col: 9, offset: 32949},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1154, col: 22, offset: 32962},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1155, col: 9, offset: 32977},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1156, col: 9, offset: 32993},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1156, col: 16, offset: 33000},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1157, col: 9, offset: 33014},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1157, col: 18, offset: 33023},
							val:        "null",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldList",
			pos:  position{line: 1161, col: 1, offset: 33138},
			expr: &choiceExpr{
				pos: position{line: 1162, col: 5, offset: 33156},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1162, col: 5, offset: 33156},
						run: (*parser).callonTypeFieldList2,
						expr: &seqExpr{
							pos: position{line: 1162, col: 5, offset: 33156},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1162, col: 5, offset: 33156},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 1162, col: 11, offset: 33162},
										name: "TypeField",
									},
								},
								&labeledExpr{
									pos:   position{line: 1162, col: 21, offset: 33172},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1162, col: 26, offset: 33177},
										expr: &ruleRefExpr{
											pos:  position{line: 1162, col: 26, offset: 33177},
											name: "TypeFieldListTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1165, col: 5, offset: 33279},
						run: (*parser).callonTypeFieldList9,
						expr: &litMatcher{
							pos:        position{line: 1165, col: 5, offset: 33279},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTail",
			pos:  position{line: 1167, col: 1, offset: 33303},
			expr: &actionExpr{
				pos: position{line: 1167, col: 21, offset: 33323},
				run: (*parser).callonTypeFieldListTail1,
				expr: &seqExpr{
					pos: position{line: 1167, col: 21, offset: 33323},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1167, col: 21, offset: 33323},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1167, col: 24, offset: 33326},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1167, col: 28, offset: 33330},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1167, col: 31, offset: 33333},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1167, col: 35, offset: 33337},
								name: "TypeField",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeField",
			pos:  position{line: 1169, col: 1, offset: 33368},
			expr: &actionExpr{
				pos: position{line: 1170, col: 5, offset: 33382},
				run: (*parser).callonTypeField1,
				expr: &seqExpr{
					pos: position{line: 1170, col: 5, offset: 33382},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1170, col: 5, offset: 33382},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1170, col: 10, offset: 33387},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1170, col: 20, offset: 33397},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1170, col: 23, offset: 33400},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1170, col: 27, offset: 33404},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1170, col: 30, offset: 33407},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1170, col: 34, offset: 33411},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 1174, col: 1, offset: 33493},
			expr: &choiceExpr{
				pos: position{line: 1175, col: 5, offset: 33507},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1175, col: 5, offset: 33507},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 1176, col: 5, offset: 33526},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 1178, col: 1, offset: 33540},
			expr: &actionExpr{
				pos: position{line: 1178, col: 12, offset: 33551},
				run: (*parser).callonAndToken1,
				expr: &seqExpr{
					pos: position{line: 1178, col: 12, offset: 33551},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1178, col: 13, offset: 33552},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1178, col: 13, offset: 33552},
									val:        "and",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1178, col: 21, offset: 33560},
									val:        "AND",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1178, col: 28, offset: 33567},
							expr: &ruleRefExpr{
								pos:  position{line: 1178, col: 29, offset: 33568},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 1179, col: 1, offset: 33605},
			expr: &actionExpr{
				pos: position{line: 1179, col: 11, offset: 33615},
				run: (*parser).callonOrToken1,
				expr: &seqExpr{
					pos: position{line: 1179, col: 11, offset: 33615},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1179, col: 12, offset: 33616},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1179, col: 12, offset: 33616},
									val:        "or",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1179, col: 19, offset: 33623},
									val:        "OR",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1179, col: 25, offset: 33629},
							expr: &ruleRefExpr{
								pos:  position{line: 1179, col: 26, offset: 33630},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 1180, col: 1, offset: 33666},
			expr: &actionExpr{
				pos: position{line: 1180, col: 11, offset: 33676},
				run: (*parser).callonInToken1,
				expr: &seqExpr{
					pos: position{line: 1180, col: 11, offset: 33676},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1180, col: 11, offset: 33676},
							val:        "in",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1180, col: 16, offset: 33681},
							expr: &ruleRefExpr{
								pos:  position{line: 1180, col: 17, offset: 33682},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 1181, col: 1, offset: 33718},
			expr: &actionExpr{
				pos: position{line: 1181, col: 12, offset: 33729},
				run: (*parser).callonNotToken1,
				expr: &seqExpr{
					pos: position{line: 1181, col: 12, offset: 33729},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1181, col: 13, offset: 33730},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1181, col: 13, offset: 33730},
									val:        "not",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1181, col: 21, offset: 33738},
									val:        "NOT",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1181, col: 28, offset: 33745},
							expr: &ruleRefExpr{
								pos:  position{line: 1181, col: 29, offset: 33746},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 1182, col: 1, offset: 33783},
			expr: &actionExpr{
				pos: position{line: 1182, col: 11, offset: 33793},
				run: (*parser).callonByToken1,
				expr: &seqExpr{
					pos: position{line: 1182, col: 11, offset: 33793},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1182, col: 11, offset: 33793},
							val:        "by",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1182, col: 16, offset: 33798},
							expr: &ruleRefExpr{
								pos:  position{line: 1182, col: 17, offset: 33799},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 1184, col: 1, offset: 33836},
			expr: &charClassMatcher{
				pos:        position{line: 1184, col: 19, offset: 33854},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 1186, col: 1, offset: 33866},
			expr: &choiceExpr{
				pos: position{line: 1186, col: 18, offset: 33883},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1186, col: 18, offset: 33883},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 1186, col: 36, offset: 33901},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 1188, col: 1, offset: 33908},
			expr: &actionExpr{
				pos: position{line: 1189, col: 5, offset: 33923},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 1189, col: 5, offset: 33923},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 1189, col: 8, offset: 33926},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 1191, col: 1, offset: 34007},
			expr: &choiceExpr{
				pos: position{line: 1192, col: 5, offset: 34026},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1192, col: 5, offset: 34026},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 1192, col: 5, offset: 34026},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1192, col: 5, offset: 34026},
									expr: &seqExpr{
										pos: position{line: 1192, col: 7, offset: 34028},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1192, col: 7, offset: 34028},
												name: "IDGuard",
											},
											&notExpr{
												pos: position{line: 1192, col: 15, offset: 34036},
												expr: &ruleRefExpr{
													pos:  position{line: 1192, col: 16, offset: 34037},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1192, col: 32, offset: 34053},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1192, col: 48, offset: 34069},
									expr: &ruleRefExpr{
										pos:  position{line: 1192, col: 48, offset: 34069},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1193, col: 5, offset: 34120},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 1193, col: 5, offset: 34120},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1194, col: 5, offset: 34159},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 1194, col: 5, offset: 34159},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1194, col: 5, offset: 34159},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1194, col: 10, offset: 34164},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1194, col: 13, offset: 34167},
										name: "IDGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1196, col: 5, offset: 34258},
						run: (*parser).callonIdentifierName19,
						expr: &litMatcher{
							pos:        position{line: 1196, col: 5, offset: 34258},
							val:        "type",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1197, col: 5, offset: 34300},
						run: (*parser).callonIdentifierName21,
						expr: &seqExpr{
							pos: position{line: 1197, col: 5, offset: 34300},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1197, col: 5, offset: 34300},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1197, col: 8, offset: 34303},
										name: "SQLTokenSentinels",
									},
								},
								&andExpr{
									pos: position{line: 1197, col: 26, offset: 34321},
									expr: &seqExpr{
										pos: position{line: 1197, col: 28, offset: 34323},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1197, col: 28, offset: 34323},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1197, col: 31, offset: 34326},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierNames",
			pos:  position{line: 1199, col: 1, offset: 34351},
			expr: &actionExpr{
				pos: position{line: 1200, col: 5, offset: 34371},
				run: (*parser).callonIdentifierNames1,
				expr: &seqExpr{
					pos: position{line: 1200, col: 5, offset: 34371},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1200, col: 5, offset: 34371},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1200, col: 11, offset: 34377},
								name: "IdentifierName",
							},
						},
						&labeledExpr{
							pos:   position{line: 1200, col: 26, offset: 34392},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1200, col: 31, offset: 34397},
								expr: &actionExpr{
									pos: position{line: 1200, col: 32, offset: 34398},
									run: (*parser).callonIdentifierNames7,
									expr: &seqExpr{
										pos: position{line: 1200, col: 32, offset: 34398},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1200, col: 32, offset: 34398},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1200, col: 35, offset: 34401},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1200, col: 39, offset: 34405},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 1200, col: 42, offset: 34408},
												label: "id",
												expr: &ruleRefExpr{
													pos:  position{line: 1200, col: 45, offset: 34411},
													name: "IdentifierName",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IDGuard",
			pos:  position{line: 1204, col: 1, offset: 34527},
			expr: &choiceExpr{
				pos: position{line: 1205, col: 5, offset: 34539},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1205, col: 5, offset: 34539},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1206, col: 5, offset: 34558},
						name: "NullLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1207, col: 5, offset: 34574},
						name: "NaN",
					},
					&ruleRefExpr{
						pos:  position{line: 1208, col: 5, offset: 34582},
						name: "Infinity",
					},
				},
			},
		},
		{
			name: "Time",
			pos:  position{line: 1210, col: 1, offset: 34592},
			expr: &actionExpr{
				pos: position{line: 1211, col: 5, offset: 34601},
				run: (*parser).callonTime1,
				expr: &seqExpr{
					pos: position{line: 1211, col: 5, offset: 34601},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1211, col: 5, offset: 34601},
							name: "FullDate",
						},
						&litMatcher{
							pos:        position{line: 1211, col: 14, offset: 34610},
							val:        "T",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1211, col: 18, offset: 34614},
							name: "FullTime",
						},
					},
				},
			},
		},
		{
			name: "FullDate",
			pos:  position{line: 1215, col: 1, offset: 34734},
			expr: &seqExpr{
				pos: position{line: 1215, col: 12, offset: 34745},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1215, col: 12, offset: 34745},
						name: "D4",
					},
					&litMatcher{
						pos:        position{line: 1215, col: 15, offset: 34748},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1215, col: 19, offset: 34752},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1215, col: 22, offset: 34755},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1215, col: 26, offset: 34759},
						name: "D2",
					},
				},
			},
		},
		{
			name: "D4",
			pos:  position{line: 1217, col: 1, offset: 34763},
			expr: &seqExpr{
				pos: position{line: 1217, col: 6, offset: 34768},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1217, col: 6, offset: 34768},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1217, col: 11, offset: 34773},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1217, col: 16, offset: 34778},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1217, col: 21, offset: 34783},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "D2",
			pos:  position{line: 1218, col: 1, offset: 34789},
			expr: &seqExpr{
				pos: position{line: 1218, col: 6, offset: 34794},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1218, col: 6, offset: 34794},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1218, col: 11, offset: 34799},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "FullTime",
			pos:  position{line: 1220, col: 1, offset: 34806},
			expr: &seqExpr{
				pos: position{line: 1220, col: 12, offset: 34817},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1220, col: 12, offset: 34817},
						name: "PartialTime",
					},
					&ruleRefExpr{
						pos:  position{line: 1220, col: 24, offset: 34829},
						name: "TimeOffset",
					},
				},
			},
		},
		{
			name: "PartialTime",
			pos:  position{line: 1222, col: 1, offset: 34841},
			expr: &seqExpr{
				pos: position{line: 1222, col: 15, offset: 34855},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1222, col: 15, offset: 34855},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1222, col: 18, offset: 34858},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1222, col: 22, offset: 34862},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1222, col: 25, offset: 34865},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1222, col: 29, offset: 34869},
						name: "D2",
					},
					&zeroOrOneExpr{
						pos: position{line: 1222, col: 32, offset: 34872},
						expr: &seqExpr{
							pos: position{line: 1222, col: 33, offset: 34873},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1222, col: 33, offset: 34873},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1222, col: 37, offset: 34877},
									expr: &charClassMatcher{
										pos:        position{line: 1222, col: 37, offset: 34877},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeOffset",
			pos:  position{line: 1224, col: 1, offset: 34887},
			expr: &choiceExpr{
				pos: position{line: 1225, col: 5, offset: 34902},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1225, col: 5, offset: 34902},
						val:        "Z",
						ignoreCase: false,
					},
					&seqExpr{
						pos: position{line: 1226, col: 5, offset: 34910},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 1226, col: 6, offset: 34911},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1226, col: 6, offset: 34911},
										val:        "+",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 1226, col: 12, offset: 34917},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1226, col: 17, offset: 34922},
								name: "D2",
							},
							&litMatcher{
								pos:        position{line: 1226, col: 20, offset: 34925},
								val:        ":",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 1226, col: 24, offset: 34929},
								name: "D2",
							},
							&zeroOrOneExpr{
								pos: position{line: 1226, col: 27, offset: 34932},
								expr: &seqExpr{
									pos: position{line: 1226, col: 28, offset: 34933},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1226, col: 28, offset: 34933},
											val:        ".",
											ignoreCase: false,
										},
										&oneOrMoreExpr{
											pos: position{line: 1226, col: 32, offset: 34937},
											expr: &charClassMatcher{
												pos:        position{line: 1226, col: 32, offset: 34937},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 1228, col: 1, offset: 34947},
			expr: &actionExpr{
				pos: position{line: 1229, col: 5, offset: 34960},
				run: (*parser).callonDuration1,
				expr: &seqExpr{
					pos: position{line: 1229, col: 5, offset: 34960},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1229, col: 5, offset: 34960},
							expr: &litMatcher{
								pos:        position{line: 1229, col: 5, offset: 34960},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1229, col: 10, offset: 34965},
							expr: &seqExpr{
								pos: position{line: 1229, col: 11, offset: 34966},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1229, col: 11, offset: 34966},
										name: "Decimal",
									},
									&ruleRefExpr{
										pos:  position{line: 1229, col: 19, offset: 34974},
										name: "TimeUnit",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Decimal",
			pos:  position{line: 1233, col: 1, offset: 35100},
			expr: &seqExpr{
				pos: position{line: 1233, col: 11, offset: 35110},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1233, col: 11, offset: 35110},
						name: "UInt",
					},
					&zeroOrOneExpr{
						pos: position{line: 1233, col: 16, offset: 35115},
						expr: &seqExpr{
							pos: position{line: 1233, col: 17, offset: 35116},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1233, col: 17, offset: 35116},
									val:        ".",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1233, col: 21, offset: 35120},
									name: "UInt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeUnit",
			pos:  position{line: 1235, col: 1, offset: 35128},
			expr: &choiceExpr{
				pos: position{line: 1236, col: 5, offset: 35141},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1236, col: 5, offset: 35141},
						val:        "ns",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1237, col: 5, offset: 35150},
						val:        "us",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1238, col: 5, offset: 35159},
						val:        "ms",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1239, col: 5, offset: 35168},
						val:        "s",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1240, col: 5, offset: 35176},
						val:        "m",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1241, col: 5, offset: 35184},
						val:        "h",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1242, col: 5, offset: 35192},
						val:        "d",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1243, col: 5, offset: 35200},
						val:        "w",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1244, col: 5, offset: 35208},
						val:        "y",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 1246, col: 1, offset: 35213},
			expr: &actionExpr{
				pos: position{line: 1247, col: 5, offset: 35220},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 1247, col: 5, offset: 35220},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1247, col: 5, offset: 35220},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1247, col: 10, offset: 35225},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1247, col: 14, offset: 35229},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1247, col: 19, offset: 35234},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1247, col: 23, offset: 35238},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1247, col: 28, offset: 35243},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1247, col: 32, offset: 35247},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 1249, col: 1, offset: 35284},
			expr: &actionExpr{
				pos: position{line: 1250, col: 5, offset: 35292},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 1250, col: 5, offset: 35292},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1250, col: 5, offset: 35292},
							expr: &seqExpr{
								pos: position{line: 1250, col: 7, offset: 35294},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1250, col: 7, offset: 35294},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 1250, col: 11, offset: 35298},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 1250, col: 15, offset: 35302},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 1250, col: 19, offset: 35306},
										expr: &choiceExpr{
											pos: position{line: 1250, col: 21, offset: 35308},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1250, col: 21, offset: 35308},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 1250, col: 32, offset: 35319},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1250, col: 38, offset: 35325},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1250, col: 40, offset: 35327},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 1254, col: 1, offset: 35491},
			expr: &choiceExpr{
				pos: position{line: 1255, col: 5, offset: 35509},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1255, col: 5, offset: 35509},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 1255, col: 5, offset: 35509},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1255, col: 5, offset: 35509},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 1255, col: 7, offset: 35511},
										expr: &ruleRefExpr{
											pos:  position{line: 1255, col: 7, offset: 35511},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1255, col: 17, offset: 35521},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1255, col: 19, offset: 35523},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1258, col: 5, offset: 35587},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 1258, col: 5, offset: 35587},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1258, col: 5, offset: 35587},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1258, col: 7, offset: 35589},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1258, col: 11, offset: 35593},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1258, col: 13, offset: 35595},
										expr: &ruleRefExpr{
											pos:  position{line: 1258, col: 13, offset: 35595},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1258, col: 23, offset: 35605},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1258, col: 28, offset: 35610},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1258, col: 30, offset: 35612},
										expr: &ruleRefExpr{
											pos:  position{line: 1258, col: 30, offset: 35612},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1258, col: 40, offset: 35622},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 1258, col: 42, offset: 35624},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1261, col: 5, offset: 35723},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 1261, col: 5, offset: 35723},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1261, col: 5, offset: 35723},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1261, col: 10, offset: 35728},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1261, col: 12, offset: 35730},
										expr: &ruleRefExpr{
											pos:  position{line: 1261, col: 12, offset: 35730},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1261, col: 22, offset: 35740},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1261, col: 24, offset: 35742},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1264, col: 5, offset: 35813},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 1264, col: 5, offset: 35813},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1264, col: 5, offset: 35813},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1264, col: 7, offset: 35815},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1264, col: 11, offset: 35819},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1264, col: 13, offset: 35821},
										expr: &ruleRefExpr{
											pos:  position{line: 1264, col: 13, offset: 35821},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1264, col: 23, offset: 35831},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1267, col: 5, offset: 35899},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 1267, col: 5, offset: 35899},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 1271, col: 1, offset: 35936},
			expr: &choiceExpr{
				pos: position{line: 1272, col: 5, offset: 35948},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1272, col: 5, offset: 35948},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 1273, col: 5, offset: 35955},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 1275, col: 1, offset: 35960},
			expr: &actionExpr{
				pos: position{line: 1275, col: 12, offset: 35971},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 1275, col: 12, offset: 35971},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1275, col: 12, offset: 35971},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1275, col: 16, offset: 35975},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1275, col: 18, offset: 35977},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 1277, col: 1, offset: 36015},
			expr: &actionExpr{
				pos: position{line: 1277, col: 12, offset: 36026},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 1277, col: 12, offset: 36026},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1277, col: 12, offset: 36026},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1277, col: 14, offset: 36028},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 1277, col: 18, offset: 36032},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 1279, col: 1, offset: 36070},
			expr: &actionExpr{
				pos: position{line: 1280, col: 5, offset: 36081},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 1280, col: 5, offset: 36081},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1280, col: 5, offset: 36081},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1280, col: 7, offset: 36083},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 1280, col: 10, offset: 36086},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1280, col: 14, offset: 36090},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1280, col: 16, offset: 36092},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 1284, col: 1, offset: 36165},
			expr: &actionExpr{
				pos: position{line: 1285, col: 5, offset: 36176},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 1285, col: 5, offset: 36176},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1285, col: 5, offset: 36176},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1285, col: 7, offset: 36178},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 1285, col: 11, offset: 36182},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1285, col: 15, offset: 36186},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1285, col: 17, offset: 36188},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 1289, col: 1, offset: 36251},
			expr: &actionExpr{
				pos: position{line: 1290, col: 4, offset: 36259},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 1290, col: 4, offset: 36259},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 1290, col: 6, offset: 36261},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 1292, col: 1, offset: 36301},
			expr: &choiceExpr{
				pos: position{line: 1293, col: 5, offset: 36315},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1293, col: 5, offset: 36315},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 1294, col: 5, offset: 36330},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 1296, col: 1, offset: 36346},
			expr: &actionExpr{
				pos: position{line: 1296, col: 14, offset: 36359},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1296, col: 14, offset: 36359},
					expr: &charClassMatcher{
						pos:        position{line: 1296, col: 14, offset: 36359},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 1298, col: 1, offset: 36398},
			expr: &actionExpr{
				pos: position{line: 1299, col: 5, offset: 36417},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 1299, col: 5, offset: 36417},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1299, col: 5, offset: 36417},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1299, col: 9, offset: 36421},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 1301, col: 1, offset: 36464},
			expr: &choiceExpr{
				pos: position{line: 1302, col: 5, offset: 36480},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1302, col: 5, offset: 36480},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 1302, col: 5, offset: 36480},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1302, col: 5, offset: 36480},
									expr: &litMatcher{
										pos:        position{line: 1302, col: 5, offset: 36480},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1302, col: 10, offset: 36485},
									expr: &charClassMatcher{
										pos:        position{line: 1302, col: 10, offset: 36485},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 1302, col: 17, offset: 36492},
									val:        ".",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1302, col: 21, offset: 36496},
									expr: &charClassMatcher{
										pos:        position{line: 1302, col: 21, offset: 36496},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1302, col: 28, offset: 36503},
									expr: &ruleRefExpr{
										pos:  position{line: 1302, col: 28, offset: 36503},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1305, col: 5, offset: 36562},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 1305, col: 5, offset: 36562},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1305, col: 5, offset: 36562},
									expr: &litMatcher{
										pos:        position{line: 1305, col: 5, offset: 36562},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1305, col: 10, offset: 36567},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1305, col: 14, offset: 36571},
									expr: &charClassMatcher{
										pos:        position{line: 1305, col: 14, offset: 36571},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1305, col: 21, offset: 36578},
									expr: &ruleRefExpr{
										pos:  position{line: 1305, col: 21, offset: 36578},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1308, col: 5, offset: 36637},
						run: (*parser).callonFloatString22,
						expr: &choiceExpr{
							pos: position{line: 1308, col: 6, offset: 36638},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1308, col: 6, offset: 36638},
									name: "NaN",
								},
								&ruleRefExpr{
									pos:  position{line: 1308, col: 12, offset: 36644},
									name: "Infinity",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 1311, col: 1, offset: 36687},
			expr: &seqExpr{
				pos: position{line: 1311, col: 16, offset: 36702},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1311, col: 16, offset: 36702},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 1311, col: 21, offset: 36707},
						expr: &charClassMatcher{
							pos:        position{line: 1311, col: 21, offset: 36707},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1311, col: 27, offset: 36713},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "NaN",
			pos:  position{line: 1313, col: 1, offset: 36725},
			expr: &litMatcher{
				pos:        position{line: 1313, col: 7, offset: 36731},
				val:        "NaN",
				ignoreCase: false,
			},
		},
		{
			name: "Infinity",
			pos:  position{line: 1315, col: 1, offset: 36738},
			expr: &seqExpr{
				pos: position{line: 1315, col: 12, offset: 36749},
				exprs: []interface{}{
					&zeroOrOneExpr{
						pos: position{line: 1315, col: 12, offset: 36749},
						expr: &choiceExpr{
							pos: position{line: 1315, col: 13, offset: 36750},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1315, col: 13, offset: 36750},
									val:        "-",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1315, col: 19, offset: 36756},
									val:        "+",
									ignoreCase: false,
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1315, col: 25, offset: 36762},
						val:        "Inf",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 1317, col: 1, offset: 36769},
			expr: &actionExpr{
				pos: position{line: 1317, col: 7, offset: 36775},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1317, col: 7, offset: 36775},
					expr: &ruleRefExpr{
						pos:  position{line: 1317, col: 7, offset: 36775},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 1319, col: 1, offset: 36817},
			expr: &charClassMatcher{
				pos:        position{line: 1319, col: 12, offset: 36828},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1321, col: 1, offset: 36841},
			expr: &choiceExpr{
				pos: position{line: 1322, col: 5, offset: 36858},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1322, col: 5, offset: 36858},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 1322, col: 5, offset: 36858},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1322, col: 5, offset: 36858},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1322, col: 9, offset: 36862},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1322, col: 11, offset: 36864},
										expr: &ruleRefExpr{
											pos:  position{line: 1322, col: 11, offset: 36864},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1322, col: 29, offset: 36882},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1323, col: 5, offset: 36919},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 1323, col: 5, offset: 36919},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1323, col: 5, offset: 36919},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1323, col: 9, offset: 36923},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1323, col: 11, offset: 36925},
										expr: &ruleRefExpr{
											pos:  position{line: 1323, col: 11, offset: 36925},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1323, col: 29, offset: 36943},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 1325, col: 1, offset: 36977},
			expr: &choiceExpr{
				pos: position{line: 1326, col: 5, offset: 36998},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1326, col: 5, offset: 36998},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1326, col: 5, offset: 36998},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1326, col: 5, offset: 36998},
									expr: &choiceExpr{
										pos: position{line: 1326, col: 7, offset: 37000},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1326, col: 7, offset: 37000},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1326, col: 13, offset: 37006},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1326, col: 26, offset: 37019,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1327, col: 5, offset: 37056},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1327, col: 5, offset: 37056},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1327, col: 5, offset: 37056},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1327, col: 10, offset: 37061},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1327, col: 12, offset: 37063},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 1329, col: 1, offset: 37097},
			expr: &actionExpr{
				pos: position{line: 1330, col: 5, offset: 37109},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 1330, col: 5, offset: 37109},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1330, col: 5, offset: 37109},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1330, col: 10, offset: 37114},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1330, col: 23, offset: 37127},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1330, col: 28, offset: 37132},
								expr: &ruleRefExpr{
									pos:  position{line: 1330, col: 28, offset: 37132},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 1332, col: 1, offset: 37194},
			expr: &choiceExpr{
				pos: position{line: 1333, col: 5, offset: 37211},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1333, col: 5, offset: 37211},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1334, col: 5, offset: 37228},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordChars",
			pos:  position{line: 1336, col: 1, offset: 37240},
			expr: &actionExpr{
				pos: position{line: 1336, col: 16, offset: 37255},
				run: (*parser).callonKeyWordChars1,
				expr: &charClassMatcher{
					pos:        position{line: 1336, col: 16, offset: 37255},
					val:        "[a-zA-Z_.:/%#@~]",
					chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
					ranges:     []rune{'a', 'z', 'A', 'Z'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 1338, col: 1, offset: 37304},
			expr: &choiceExpr{
				pos: position{line: 1339, col: 5, offset: 37320},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1339, col: 5, offset: 37320},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 1340, col: 5, offset: 37337},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 1342, col: 1, offset: 37344},
			expr: &actionExpr{
				pos: position{line: 1342, col: 14, offset: 37357},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 1342, col: 14, offset: 37357},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1342, col: 14, offset: 37357},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1342, col: 19, offset: 37362},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1342, col: 22, offset: 37365},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1342, col: 22, offset: 37365},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1342, col: 38, offset: 37381},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobPattern",
			pos:  position{line: 1344, col: 1, offset: 37416},
			expr: &actionExpr{
				pos: position{line: 1345, col: 5, offset: 37432},
				run: (*parser).callonGlobPattern1,
				expr: &seqExpr{
					pos: position{line: 1345, col: 5, offset: 37432},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1345, col: 5, offset: 37432},
							expr: &ruleRefExpr{
								pos:  position{line: 1345, col: 6, offset: 37433},
								name: "GlobProperStart",
							},
						},
						&andExpr{
							pos: position{line: 1345, col: 22, offset: 37449},
							expr: &ruleRefExpr{
								pos:  position{line: 1345, col: 23, offset: 37450},
								name: "GlobHasStar",
							},
						},
						&labeledExpr{
							pos:   position{line: 1345, col: 35, offset: 37462},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1345, col: 40, offset: 37467},
								name: "GlobStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1345, col: 50, offset: 37477},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1345, col: 55, offset: 37482},
								expr: &ruleRefExpr{
									pos:  position{line: 1345, col: 55, offset: 37482},
									name: "GlobRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobProperStart",
			pos:  position{line: 1349, col: 1, offset: 37551},
			expr: &choiceExpr{
				pos: position{line: 1349, col: 19, offset: 37569},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1349, col: 19, offset: 37569},
						name: "KeyWordStart",
					},
					&seqExpr{
						pos: position{line: 1349, col: 34, offset: 37584},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1349, col: 34, offset: 37584},
								expr: &litMatcher{
									pos:        position{line: 1349, col: 34, offset: 37584},
									val:        "*",
									ignoreCase: false,
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1349, col: 39, offset: 37589},
								name: "KeyWordRest",
							},
						},
					},
				},
			},
		},
		{
			name: "GlobHasStar",
			pos:  position{line: 1350, col: 1, offset: 37601},
			expr: &seqExpr{
				pos: position{line: 1350, col: 15, offset: 37615},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1350, col: 15, offset: 37615},
						expr: &ruleRefExpr{
							pos:  position{line: 1350, col: 15, offset: 37615},
							name: "KeyWordRest",
						},
					},
					&litMatcher{
						pos:        position{line: 1350, col: 28, offset: 37628},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "GlobStart",
			pos:  position{line: 1352, col: 1, offset: 37633},
			expr: &choiceExpr{
				pos: position{line: 1353, col: 5, offset: 37647},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1353, col: 5, offset: 37647},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1354, col: 5, offset: 37664},
						name: "GlobEsc",
					},
					&actionExpr{
						pos: position{line: 1355, col: 5, offset: 37676},
						run: (*parser).callonGlobStart4,
						expr: &litMatcher{
							pos:        position{line: 1355, col: 5, offset: 37676},
							val:        "*",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GlobRest",
			pos:  position{line: 1357, col: 1, offset: 37701},
			expr: &choiceExpr{
				pos: position{line: 1358, col: 5, offset: 37714},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1358, col: 5, offset: 37714},
						name: "GlobStart",
					},
					&charClassMatcher{
						pos:        position{line: 1359, col: 5, offset: 37728},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "GlobEsc",
			pos:  position{line: 1361, col: 1, offset: 37735},
			expr: &actionExpr{
				pos: position{line: 1361, col: 11, offset: 37745},
				run: (*parser).callonGlobEsc1,
				expr: &seqExpr{
					pos: position{line: 1361, col: 11, offset: 37745},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1361, col: 11, offset: 37745},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1361, col: 16, offset: 37750},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1361, col: 19, offset: 37753},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1361, col: 19, offset: 37753},
										name: "GlobEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1361, col: 32, offset: 37766},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobEscape",
			pos:  position{line: 1363, col: 1, offset: 37801},
			expr: &choiceExpr{
				pos: position{line: 1364, col: 5, offset: 37816},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1364, col: 5, offset: 37816},
						run: (*parser).callonGlobEscape2,
						expr: &litMatcher{
							pos:        position{line: 1364, col: 5, offset: 37816},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1365, col: 5, offset: 37844},
						run: (*parser).callonGlobEscape4,
						expr: &litMatcher{
							pos:        position{line: 1365, col: 5, offset: 37844},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1366, col: 5, offset: 37874},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 1368, col: 1, offset: 37880},
			expr: &choiceExpr{
				pos: position{line: 1369, col: 5, offset: 37901},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1369, col: 5, offset: 37901},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1369, col: 5, offset: 37901},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1369, col: 5, offset: 37901},
									expr: &choiceExpr{
										pos: position{line: 1369, col: 7, offset: 37903},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1369, col: 7, offset: 37903},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1369, col: 13, offset: 37909},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1369, col: 26, offset: 37922,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1370, col: 5, offset: 37959},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1370, col: 5, offset: 37959},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1370, col: 5, offset: 37959},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1370, col: 10, offset: 37964},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1370, col: 12, offset: 37966},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 1372, col: 1, offset: 38000},
			expr: &choiceExpr{
				pos: position{line: 1373, col: 5, offset: 38019},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1373, col: 5, offset: 38019},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 1374, col: 5, offset: 38040},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 1376, col: 1, offset: 38055},
			expr: &choiceExpr{
				pos: position{line: 1377, col: 5, offset: 38076},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1377, col: 5, offset: 38076},
						val:        "'",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1378, col: 5, offset: 38084},
						run: (*parser).callonSingleCharEscape3,
						expr: &litMatcher{
							pos:        position{line: 1378, col: 5, offset: 38084},
							val:        "\"",
							ignoreCase: false,
						},
					},
					&litMatcher{
						pos:        position{line: 1379, col: 5, offset: 38124},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1380, col: 5, offset: 38133},
						run: (*parser).callonSingleCharEscape6,
						expr: &litMatcher{
							pos:        position{line: 1380, col: 5, offset: 38133},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1381, col: 5, offset: 38162},
						run: (*parser).callonSingleCharEscape8,
						expr: &litMatcher{
							pos:        position{line: 1381, col: 5, offset: 38162},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1382, col: 5, offset: 38191},
						run: (*parser).callonSingleCharEscape10,
						expr: &litMatcher{
							pos:        position{line: 1382, col: 5, offset: 38191},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1383, col: 5, offset: 38220},
						run: (*parser).callonSingleCharEscape12,
						expr: &litMatcher{
							pos:        position{line: 1383, col: 5, offset: 38220},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1384, col: 5, offset: 38249},
						run: (*parser).callonSingleCharEscape14,
						expr: &litMatcher{
							pos:        position{line: 1384, col: 5, offset: 38249},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1385, col: 5, offset: 38278},
						run: (*parser).callonSingleCharEscape16,
						expr: &litMatcher{
							pos:        position{line: 1385, col: 5, offset: 38278},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 1387, col: 1, offset: 38304},
			expr: &choiceExpr{
				pos: position{line: 1388, col: 5, offset: 38322},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1388, col: 5, offset: 38322},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 1388, col: 5, offset: 38322},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1389, col: 5, offset: 38350},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 1389, col: 5, offset: 38350},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1390, col: 5, offset: 38378},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 1392, col: 1, offset: 38384},
			expr: &choiceExpr{
				pos: position{line: 1393, col: 5, offset: 38402},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1393, col: 5, offset: 38402},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 1393, col: 5, offset: 38402},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1393, col: 5, offset: 38402},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1393, col: 9, offset: 38406},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1393, col: 16, offset: 38413},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1393, col: 16, offset: 38413},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1393, col: 25, offset: 38422},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1393, col: 34, offset: 38431},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1393, col: 43, offset: 38440},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1396, col: 5, offset: 38503},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 1396, col: 5, offset: 38503},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1396, col: 5, offset: 38503},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1396, col: 9, offset: 38507},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1396, col: 13, offset: 38511},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1396, col: 20, offset: 38518},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1396, col: 20, offset: 38518},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 1396, col: 29, offset: 38527},
												expr: &ruleRefExpr{
													pos:  position{line: 1396, col: 29, offset: 38527},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1396, col: 39, offset: 38537},
												expr: &ruleRefExpr{
													pos:  position{line: 1396, col: 39, offset: 38537},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1396, col: 49, offset: 38547},
												expr: &ruleRefExpr{
													pos:  position{line: 1396, col: 49, offset: 38547},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1396, col: 59, offset: 38557},
												expr: &ruleRefExpr{
													pos:  position{line: 1396, col: 59, offset: 38557},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1396, col: 69, offset: 38567},
												expr: &ruleRefExpr{
													pos:  position{line: 1396, col: 69, offset: 38567},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1396, col: 80, offset: 38578},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpPattern",
			pos:  position{line: 1400, col: 1, offset: 38632},
			expr: &actionExpr{
				pos: position{line: 1401, col: 5, offset: 38650},
				run: (*parser).callonRegexpPattern1,
				expr: &seqExpr{
					pos: position{line: 1401, col: 5, offset: 38650},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1401, col: 5, offset: 38650},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1401, col: 9, offset: 38654},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1401, col: 14, offset: 38659},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 1401, col: 25, offset: 38670},
							val:        "/",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1401, col: 29, offset: 38674},
							expr: &ruleRefExpr{
								pos:  position{line: 1401, col: 30, offset: 38675},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 1403, col: 1, offset: 38710},
			expr: &actionExpr{
				pos: position{line: 1404, col: 5, offset: 38725},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1404, col: 5, offset: 38725},
					expr: &choiceExpr{
						pos: position{line: 1404, col: 6, offset: 38726},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 1404, col: 6, offset: 38726},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&seqExpr{
								pos: position{line: 1404, col: 15, offset: 38735},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1404, col: 15, offset: 38735},
										val:        "\\",
										ignoreCase: false,
									},
									&anyMatcher{
										line: 1404, col: 20, offset: 38740,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 1406, col: 1, offset: 38776},
			expr: &charClassMatcher{
				pos:        position{line: 1407, col: 5, offset: 38792},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 1409, col: 1, offset: 38807},
			expr: &oneOrMoreExpr{
				pos: position{line: 1409, col: 5, offset: 38811},
				expr: &ruleRefExpr{
					pos:  position{line: 1409, col: 5, offset: 38811},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1411, col: 1, offset: 38822},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1411, col: 6, offset: 38827},
				expr: &ruleRefExpr{
					pos:  position{line: 1411, col: 6, offset: 38827},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 1413, col: 1, offset: 38838},
			expr: &choiceExpr{
				pos: position{line: 1414, col: 5, offset: 38851},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1414, col: 5, offset: 38851},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 1415, col: 5, offset: 38866},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 1416, col: 5, offset: 38885},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 1418, col: 1, offset: 38894},
			expr: &anyMatcher{
				line: 1419, col: 5, offset: 38914,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 1421, col: 1, offset: 38917},
			expr: &choiceExpr{
				pos: position{line: 1422, col: 5, offset: 38945},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1422, col: 5, offset: 38945},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1423, col: 5, offset: 38954},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1424, col: 5, offset: 38963},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1425, col: 5, offset: 38972},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1426, col: 5, offset: 38980},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1427, col: 5, offset: 38993},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 1429, col: 1, offset: 39003},
			expr: &charClassMatcher{
				pos:        position{line: 1430, col: 5, offset: 39022},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 1436, col: 1, offset: 39352},
			expr: &ruleRefExpr{
				pos:  position{line: 1439, col: 5, offset: 39423},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1441, col: 1, offset: 39442},
			expr: &seqExpr{
				pos: position{line: 1442, col: 5, offset: 39463},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1442, col: 5, offset: 39463},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1442, col: 10, offset: 39468},
						expr: &seqExpr{
							pos: position{line: 1442, col: 11, offset: 39469},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1442, col: 11, offset: 39469},
									expr: &litMatcher{
										pos:        position{line: 1442, col: 12, offset: 39470},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1442, col: 17, offset: 39475},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1442, col: 35, offset: 39493},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1444, col: 1, offset: 39499},
			expr: &seqExpr{
				pos: position{line: 1445, col: 5, offset: 39521},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1445, col: 5, offset: 39521},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1445, col: 10, offset: 39526},
						expr: &seqExpr{
							pos: position{line: 1445, col: 11, offset: 39527},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1445, col: 11, offset: 39527},
									expr: &ruleRefExpr{
										pos:  position{line: 1445, col: 12, offset: 39528},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1445, col: 27, offset: 39543},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1447, col: 1, offset: 39562},
			expr: &seqExpr{
				pos: position{line: 1447, col: 7, offset: 39568},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1447, col: 7, offset: 39568},
						expr: &ruleRefExpr{
							pos:  position{line: 1447, col: 7, offset: 39568},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1447, col: 19, offset: 39580},
						name: "LineTerminator",
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 1449, col: 1, offset: 39596},
			expr: &choiceExpr{
				pos: position{line: 1449, col: 7, offset: 39602},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1449, col: 7, offset: 39602},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 1449, col: 11, offset: 39606},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1451, col: 1, offset: 39611},
			expr: &notExpr{
				pos: position{line: 1451, col: 7, offset: 39617},
				expr: &anyMatcher{
					line: 1451, col: 8, offset: 39618,
				},
			},
		},
		{
			name: "EOKW",
			pos:  position{line: 1453, col: 1, offset: 39621},
			expr: &notExpr{
				pos: position{line: 1453, col: 8, offset: 39628},
				expr: &ruleRefExpr{
					pos:  position{line: 1453, col: 9, offset: 39629},
					name: "KeyWordChars",
				},
			},
		},
	},
}

func (c *current) onstart2(scope interface{}) (interface{}, error) {
	return []interface{}{scope}, nil
}

func (p *parser) callonstart2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart2(stack["scope"])
}

func (c *current) onstart9(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonstart9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart9(stack["seq"])
}

func (c *current) onScope1(decls, body interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Scope", "decls": decls, "body": body}, nil

}

func (p *parser) callonScope1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope1(stack["decls"], stack["body"])
}

func (c *current) onSeq1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSeq1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSeq1(stack["first"], stack["rest"])
}

func (c *current) onSeqTail1(o interface{}) (interface{}, error) {
	return o, nil
}

func (p *parser) callonSeqTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSeqTail1(stack["o"])
}

func (c *current) onDecl1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonDecl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDecl1(stack["v"])
}

func (c *current) onConstDecl2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ConstDecl", "name": id, "expr": expr}, nil

}

func (p *parser) callonConstDecl2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDecl2(stack["id"], stack["expr"])
}

func (c *current) onConstDecl13(id, typ interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "ConstDecl",

		"name": id,

		"expr": map[string]interface{}{"kind": "TypeValue", "value": map[string]interface{}{"kind": "TypeDef", "name": id, "type": typ}}}, nil

}

func (p *parser) callonConstDecl13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDecl13(stack["id"], stack["typ"])
}

func (c *current) onFuncDecl1(id, params, expr interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "FuncDecl",

		"name": id,

		"params": params,

		"expr": expr}, nil

}

func (p *parser) callonFuncDecl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncDecl1(stack["id"], stack["params"], stack["expr"])
}

func (c *current) onOperation2(paths interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Parallel", "paths": paths}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["paths"])
}

func (c *current) onOperation12(expr, cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": expr, "cases": cases}, nil

}

func (p *parser) callonOperation12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation12(stack["expr"], stack["cases"])
}

func (c *current) onOperation25(cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": nil, "cases": cases}, nil

}

func (p *parser) callonOperation25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation25(stack["cases"])
}

func (c *current) onOperation35(trunks interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": trunks}, nil

}

func (p *parser) callonOperation35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation35(stack["trunks"])
}

func (c *current) onOperation45(scope interface{}) (interface{}, error) {
	return scope, nil
}

func (p *parser) callonOperation45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation45(stack["scope"])
}

func (c *current) onOperation55(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation55(stack["a"])
}

func (c *current) onOperation61(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation61(stack["a"])
}

func (c *current) onOperation71(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Search", "expr": expr}, nil

}

func (p *parser) callonOperation71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation71(stack["expr"])
}

func (c *current) onOperation77(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation77(stack["expr"])
}

func (c *current) onOperation80(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation80(stack["expr"])
}

func (c *current) onOperation83(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation83(stack["expr"])
}

func (c *current) onLeg1(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLeg1(stack["seq"])
}

func (c *current) onSwitchLeg1(expr, path interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": expr, "path": path}, nil

}

func (p *parser) callonSwitchLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchLeg1(stack["expr"], stack["path"])
}

func (c *current) onCase2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonCase2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase2(stack["expr"])
}

func (c *current) onCase8() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonCase8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase8()
}

func (c *current) onFromLeg1(source, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Trunk", "source": source, "seq": nil}
	if opt != nil {
		m["seq"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonFromLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromLeg1(stack["source"], stack["opt"])
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor13(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor13(stack["expr"])
}

func (c *current) onSearchExpr4(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Term", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonSearchExpr4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr4(stack["v"])
}

func (c *current) onSearchExpr15() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil

}

func (p *parser) callonSearchExpr15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr15()
}

func (c *current) onSearchPredicate2(lhs, op, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": op, "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonSearchPredicate2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPredicate2(stack["lhs"], stack["op"], stack["rhs"])
}

func (c *current) onSearchPredicate12(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchPredicate12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPredicate12(stack["first"], stack["rest"])
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onGlob1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Glob", "pattern": pattern}, nil

}

func (p *parser) callonGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlob1(stack["pattern"])
}

func (c *current) onRegexp1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Regexp", "pattern": pattern}, nil

}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["pattern"])
}

func (c *current) onAggregation2(keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Summarize", "keys": keys, "aggs": nil, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["keys"], stack["limit"])
}

func (c *current) onAggregation10(aggs, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"kind": "Summarize", "keys": nil, "aggs": aggs, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation10(stack["aggs"], stack["keys"], stack["limit"])
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAggAssignment2(lval, agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lval, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment2(stack["lval"], stack["agg"])
}

func (c *current) onAggAssignment11(agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment11(stack["agg"])
}

func (c *current) onAgg1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"kind": "Agg", "name": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonAgg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAgg1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onAggAssignments1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonAggAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssertOp6(e interface{}) (interface{}, error) {
	return []interface{}{e, string(c.text)}, nil
}

func (p *parser) callonAssertOp6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssertOp6(stack["e"])
}

func (c *current) onAssertOp1(expr interface{}) (interface{}, error) {
	// 'assert EXPR' is equivalent to
	// 'yield EXPR ? this : error({message: "assertion failed", "expr": EXPR_text, "on": this}'
	// where EXPR_text is the literal text of EXPR.
	return map[string]interface{}{"kind": "Yield", "exprs": []interface{}{map[string]interface{}{

		"kind": "Conditional",

		"cond": expr.([]interface{})[0],

		"then": map[string]interface{}{"kind": "ID", "name": "this"},

		"else": map[string]interface{}{

			"kind": "Call",

			"name": "error",

			"args": []interface{}{map[string]interface{}{"kind": "RecordExpr", "elems": []interface{}{

				map[string]interface{}{"kind": "Field", "name": "message", "value": map[string]interface{}{

					"kind": "Primitive", "text": "assertion failed", "type": "string"}},

				map[string]interface{}{"kind": "Field", "name": "expr", "value": map[string]interface{}{

					"kind": "Primitive", "text": expr.([]interface{})[1], "type": "string"}},

				map[string]interface{}{"kind": "Field", "name": "on", "value": map[string]interface{}{

					"kind": "ID", "name": "this"}}}}},

			"where": nil}}}}, nil

}

func (p *parser) callonAssertOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssertOp1(stack["expr"])
}

func (c *current) onSortOp10(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortOp10(stack["l"])
}

func (c *current) onSortOp1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var op = map[string]interface{}{"kind": "Sort", "args": list, "order": "asc", "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		op["order"] = "desc"
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			op["nullsfirst"] = true
		}
	}
	return op, nil

}

func (p *parser) callonSortOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortOp1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopOp8(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopOp8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp8(stack["n"])
}

func (c *current) onTopOp20(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopOp20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp20(stack["f"])
}

func (c *current) onTopOp1(limit, flush, fields interface{}) (interface{}, error) {
	var op = map[string]interface{}{"kind": "Top", "limit": 0, "args": nil, "flush": false}
	if limit != nil {
		op["limit"] = limit
	}
	if fields != nil {
		op["args"] = fields
	}
	if flush != nil {
		op["flush"] = true
	}
	return op, nil

}

func (p *parser) callonTopOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cut", "args": args}, nil

}

func (p *parser) callonCutOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutOp1(stack["args"])
}

func (c *current) onDropOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Drop", "args": args}, nil

}

func (p *parser) callonDropOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropOp1(stack["args"])
}

func (c *current) onHeadOp2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": count}, nil
}

func (p *parser) callonHeadOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOp2(stack["count"])
}

func (c *current) onHeadOp10() (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": map[string]interface{}{"kind": "Primitive", "type": "int64", "text": "1"}}, nil
}

func (p *parser) callonHeadOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOp10()
}

func (c *current) onTailOp2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": count}, nil
}

func (p *parser) callonTailOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailOp2(stack["count"])
}

func (c *current) onTailOp10() (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": map[string]interface{}{"kind": "Primitive", "type": "int64", "text": "1"}}, nil
}

func (p *parser) callonTailOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailOp10()
}

func (c *current) onWhereOp1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Where", "expr": expr}, nil

}

func (p *parser) callonWhereOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereOp1(stack["expr"])
}

func (c *current) onUniqOp2() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": true}, nil

}

func (p *parser) callonUniqOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqOp2()
}

func (c *current) onUniqOp7() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": false}, nil

}

func (p *parser) callonUniqOp7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqOp7()
}

func (c *current) onPutOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Put", "args": args}, nil

}

func (p *parser) callonPutOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutOp1(stack["args"])
}

func (c *current) onRenameOp9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameOp9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameOp9(stack["cl"])
}

func (c *current) onRenameOp1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Rename", "args": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameOp1(stack["first"], stack["rest"])
}

func (c *current) onFuseOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Fuse"}, nil

}

func (p *parser) callonFuseOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseOp1()
}

func (c *current) onShapeOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Shape"}, nil

}

func (p *parser) callonShapeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShapeOp1()
}

func (c *current) onJoinOp1(style, rightInput, key, optKey, optArgs interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Join", "style": style, "right_input": rightInput, "left_key": key, "right_key": key, "args": nil}
	if optKey != nil {
		m["right_key"] = optKey.([]interface{})[3]
	}
	if optArgs != nil {
		m["args"] = optArgs.([]interface{})[1]
	}
	return m, nil

}

func (p *parser) callonJoinOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinOp1(stack["style"], stack["rightInput"], stack["key"], stack["optKey"], stack["optArgs"])
}

func (c *current) onJoinStyle2() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle2()
}

func (c *current) onJoinStyle6() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle6()
}

func (c *current) onJoinStyle10() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle10()
}

func (c *current) onJoinStyle14() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonJoinStyle14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle14()
}

func (c *current) onJoinStyle18() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle18()
}

func (c *current) onJoinRightInput2(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonJoinRightInput2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinRightInput2(stack["s"])
}

func (c *current) onJoinRightInput12() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonJoinRightInput12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinRightInput12()
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onSampleOp1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sample", "expr": e}, nil
}

func (p *parser) callonSampleOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleOp1(stack["e"])
}

func (c *current) onOpAssignment1(a interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpAssignment", "assignments": a}, nil

}

func (p *parser) callonOpAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpAssignment1(stack["a"])
}

func (c *current) onSampleExpr2(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonSampleExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr2(stack["lval"])
}

func (c *current) onSampleExpr7() (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": "this"}, nil
}

func (p *parser) callonSampleExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr7()
}

func (c *current) onLoadOp1(pool, branch, author, message, meta interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Load", "pool": pool, "branch": branch, "author": author, "message": message, "meta": meta}, nil

}

func (p *parser) callonLoadOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLoadOp1(stack["pool"], stack["branch"], stack["author"], stack["message"], stack["meta"])
}

func (c *current) onAuthorArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonAuthorArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAuthorArg1(stack["val"])
}

func (c *current) onMessageArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonMessageArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMessageArg1(stack["val"])
}

func (c *current) onMetaArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonMetaArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMetaArg1(stack["val"])
}

func (c *current) onPoolBranch1(branch interface{}) (interface{}, error) {
	return branch, nil
}

func (p *parser) callonPoolBranch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBranch1(stack["branch"])
}

func (c *current) onFromOp1(source interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": []interface{}{map[string]interface{}{"kind": "Trunk", "source": source}}}, nil

}

func (p *parser) callonFromOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromOp1(stack["source"])
}

func (c *current) onFile1(path, format, sort_key interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "File", "path": path, "format": format, "sort_key": sort_key}, nil

}

func (p *parser) callonFile1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile1(stack["path"], stack["format"], stack["sort_key"])
}

func (c *current) onFrom1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonFrom1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrom1(stack["body"])
}

func (c *current) onPool1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonPool1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPool1(stack["body"])
}

func (c *current) onPoolBody1(spec, at interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pool", "spec": spec, "at": at}, nil

}

func (p *parser) callonPoolBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBody1(stack["spec"], stack["at"])
}

func (c *current) onGet1(url, format, sort_key interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "HTTP", "url": url, "format": format, "sort_key": sort_key}, nil

}

func (p *parser) callonGet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGet1(stack["url"], stack["format"], stack["sort_key"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onPath2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonPath2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath2(stack["v"])
}

func (c *current) onPath5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPath5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath5()
}

func (c *current) onPoolAt1(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonPoolAt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolAt1(stack["id"])
}

func (c *current) onKSUID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKSUID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKSUID1()
}

func (c *current) onPoolSpec2(pool, commit, meta, tap interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": pool, "commit": commit, "meta": meta, "tap": tap}, nil

}

func (p *parser) callonPoolSpec2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec2(stack["pool"], stack["commit"], stack["meta"], stack["tap"])
}

func (c *current) onPoolSpec14(meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": nil, "commit": nil, "meta": meta}, nil

}

func (p *parser) callonPoolSpec14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec14(stack["meta"])
}

func (c *current) onPoolCommit1(commit interface{}) (interface{}, error) {
	return commit, nil
}

func (p *parser) callonPoolCommit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolCommit1(stack["commit"])
}

func (c *current) onPoolMeta1(meta interface{}) (interface{}, error) {
	return meta, nil
}

func (p *parser) callonPoolMeta1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolMeta1(stack["meta"])
}

func (c *current) onPoolName4() (interface{}, error) {
	return map[string]interface{}{"kind": "Glob", "pattern": "*"}, nil
}

func (p *parser) callonPoolName4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName4()
}

func (c *current) onPoolName9(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "String", "text": name}, nil
}

func (p *parser) callonPoolName9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName9(stack["name"])
}

func (c *current) onPoolIdentifier1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPoolIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolIdentifier1()
}

func (c *current) onSortKeyArg1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SortKey", "keys": keys, "order": order}, nil

}

func (p *parser) callonSortKeyArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortKeyArg1(stack["keys"], stack["order"])
}

func (c *current) onTapArg2() (interface{}, error) {
	return true, nil
}

func (p *parser) callonTapArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTapArg2()
}

func (c *current) onTapArg6() (interface{}, error) {
	return false, nil
}

func (p *parser) callonTapArg6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTapArg6()
}

func (c *current) onFormatArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonFormatArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArg1(stack["val"])
}

func (c *current) onOrderSuffix2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix2()
}

func (c *current) onOrderSuffix4() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderSuffix4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix4()
}

func (c *current) onOrderSuffix6() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix6()
}

func (c *current) onPassOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Pass"}, nil

}

func (p *parser) callonPassOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassOp1()
}

func (c *current) onExplodeOp1(args, typ, as interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Explode", "args": args, "as": as, "type": typ}, nil

}

func (p *parser) callonExplodeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplodeOp1(stack["args"], stack["typ"], stack["as"])
}

func (c *current) onMergeOp1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Merge", "expr": expr}, nil

}

func (p *parser) callonMergeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMergeOp1(stack["expr"])
}

func (c *current) onOverOp1(exprs, locals, body interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Over", "exprs": exprs, "locals": locals, "body": body}, nil

}

func (p *parser) callonOverOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverOp1(stack["exprs"], stack["locals"], stack["body"])
}

func (c *current) onLateral2(scope interface{}) (interface{}, error) {
	return scope, nil
}

func (p *parser) callonLateral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLateral2(stack["scope"])
}

func (c *current) onLateral13(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonLateral13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLateral13(stack["seq"])
}

func (c *current) onLocals10(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonLocals10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocals10(stack["a"])
}

func (c *current) onLocals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLocals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocals1(stack["first"], stack["rest"])
}

func (c *current) onLocalsAssignment1(name, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"name": name, "expr": map[string]interface{}{"kind": "ID", "name": name}}
	if opt != nil {
		m["expr"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonLocalsAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocalsAssignment1(stack["name"], stack["opt"])
}

func (c *current) onYieldOp1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Yield", "exprs": exprs}, nil

}

func (p *parser) callonYieldOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYieldOp1(stack["exprs"])
}

func (c *current) onTypeArg1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeArg1(stack["typ"])
}

func (c *current) onAsArg1(lhs interface{}) (interface{}, error) {
	return lhs, nil
}

func (p *parser) callonAsArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsArg1(stack["lhs"])
}

func (c *current) onLvals7(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonLvals7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals7(stack["lval"])
}

func (c *current) onLvals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLvals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals1(stack["first"], stack["rest"])
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignments7(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments7(stack["a"])
}

func (c *current) onAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr1(cond, opt interface{}) (interface{}, error) {
	if opt != nil {
		var Then = opt.([]interface{})[3]
		var Else = opt.([]interface{})[7]
		return map[string]interface{}{"kind": "Conditional", "cond": cond, "then": Then, "else": Else}, nil
	}
	return cond, nil

}

func (p *parser) callonConditionalExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr1(stack["cond"], stack["opt"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onComparisonExpr15() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparisonExpr15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr15()
}

func (c *current) onComparisonExpr1(lhs, opAndRHS interface{}) (interface{}, error) {
	if opAndRHS == nil {
		return lhs, nil
	}
	var op = opAndRHS.([]interface{})[1]
	var rhs = opAndRHS.([]interface{})[3]
	return map[string]interface{}{"kind": "BinaryExpr", "op": op, "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonComparisonExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr1(stack["lhs"], stack["opAndRHS"])
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onNegationExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "-", "operand": e}, nil

}

func (p *parser) callonNegationExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNegationExpr2(stack["e"])
}

func (c *current) onFuncExpr2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr2(stack["first"], stack["rest"])
}

func (c *current) onFuncExpr9(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr9(stack["first"], stack["rest"])
}

func (c *current) onCast1(typ, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": expr, "type": typ}, nil

}

func (p *parser) callonCast1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCast1(stack["typ"], stack["expr"])
}

func (c *current) onFunction3(arg0Text, arg1, where interface{}) (interface{}, error) {
	var arg0 = map[string]interface{}{"kind": "Primitive", "type": "string", "text": arg0Text}
	return map[string]interface{}{"kind": "Call", "name": "regexp", "args": []interface{}{arg0, arg1}, "where": where}, nil

}

func (p *parser) callonFunction3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction3(stack["arg0Text"], stack["arg1"], stack["where"])
}

func (c *current) onFunction21(arg0, arg1Text, arg2, where interface{}) (interface{}, error) {
	var arg1 = map[string]interface{}{"kind": "Primitive", "type": "string", "text": arg1Text}
	return map[string]interface{}{"kind": "Call", "name": "regexp_replace", "args": []interface{}{arg0, arg1, arg2}, "where": where}, nil

}

func (p *parser) callonFunction21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction21(stack["arg0"], stack["arg1Text"], stack["arg2"], stack["where"])
}

func (c *current) onFunction44(fn, args, where interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": fn, "args": args, "where": where}, nil

}

func (p *parser) callonFunction44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction44(stack["fn"], stack["args"], stack["where"])
}

func (c *current) onFunctionArgs2(o interface{}) (interface{}, error) {
	return []interface{}{o}, nil
}

func (p *parser) callonFunctionArgs2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunctionArgs2(stack["o"])
}

func (c *current) onGrep1(pattern, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Grep", "pattern": pattern, "expr": map[string]interface{}{"kind": "ID", "name": "this"}}
	if opt != nil {
		m["expr"] = opt.([]interface{})[2]
	}
	return m, nil

}

func (p *parser) callonGrep1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrep1(stack["pattern"], stack["opt"])
}

func (c *current) onPattern4(s interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "String", "text": s}, nil

}

func (p *parser) callonPattern4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPattern4(stack["s"])
}

func (c *current) onOptionalExprs3() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonOptionalExprs3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalExprs3()
}

func (c *current) onExprs7(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonExprs7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs7(stack["e"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr1(stack["first"], stack["rest"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref14(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": nil, "rhs": to}}, nil

}

func (p *parser) callonDeref14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref14(stack["to"])
}

func (c *current) onDeref23(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref23(stack["expr"])
}

func (c *current) onDeref29(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref29(stack["id"])
}

func (c *current) onPrimary7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary7(stack["expr"])
}

func (c *current) onPrimary15(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary15(stack["expr"])
}

func (c *current) onOverExpr1(exprs, locals, body interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OverExpr", "locals": locals, "exprs": exprs, "body": body}, nil

}

func (p *parser) callonOverExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverExpr1(stack["exprs"], stack["locals"], stack["body"])
}

func (c *current) onRecord1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RecordExpr", "elems": elems}, nil

}

func (p *parser) callonRecord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecord1(stack["elems"])
}

func (c *current) onRecordElems2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonRecordElems2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems2(stack["first"], stack["rest"])
}

func (c *current) onRecordElems9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonRecordElems9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems9()
}

func (c *current) onRecordElemTail1(elem interface{}) (interface{}, error) {
	return elem, nil
}

func (p *parser) callonRecordElemTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElemTail1(stack["elem"])
}

func (c *current) onSpread1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Spread", "expr": expr}, nil

}

func (p *parser) callonSpread1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpread1(stack["expr"])
}

func (c *current) onField1(name, value interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Field", "name": name, "value": value}, nil

}

func (p *parser) callonField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField1(stack["name"], stack["value"])
}

func (c *current) onArray1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ArrayExpr", "elems": elems}, nil

}

func (p *parser) callonArray1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArray1(stack["elems"])
}

func (c *current) onSet1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SetExpr", "elems": elems}, nil

}

func (p *parser) callonSet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSet1(stack["elems"])
}

func (c *current) onVectorElems8(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonVectorElems8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems8(stack["e"])
}

func (c *current) onVectorElems2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonVectorElems2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems2(stack["first"], stack["rest"])
}

func (c *current) onVectorElems15() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonVectorElems15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems15()
}

func (c *current) onVectorElem3(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "VectorValue", "expr": e}, nil
}

func (p *parser) callonVectorElem3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElem3(stack["e"])
}

func (c *current) onMap1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "MapExpr", "entries": exprs}, nil

}

func (p *parser) callonMap1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMap1(stack["exprs"])
}

func (c *current) onEntries2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonEntries2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries2(stack["first"], stack["rest"])
}

func (c *current) onEntries9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonEntries9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries9()
}

func (c *current) onEntryTail1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonEntryTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntryTail1(stack["e"])
}

func (c *current) onEntry1(key, value interface{}) (interface{}, error) {
	return map[string]interface{}{"key": key, "value": value}, nil

}

func (p *parser) callonEntry1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntry1(stack["key"], stack["value"])
}

func (c *current) onSQLOp1(selection, from, joins, where, groupby, having, orderby, limit interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "SQLExpr",

		"select": selection,

		"from": from,

		"joins": joins,

		"where": where,

		"group_by": groupby,

		"having": having,

		"order_by": orderby,

		"limit": limit}, nil

}

func (p *parser) callonSQLOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOp1(stack["selection"], stack["from"], stack["joins"], stack["where"], stack["groupby"], stack["having"], stack["orderby"], stack["limit"])
}

func (c *current) onSQLSelect2() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLSelect2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect2()
}

func (c *current) onSQLSelect7(assignments interface{}) (interface{}, error) {
	return assignments, nil
}

func (p *parser) callonSQLSelect7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect7(stack["assignments"])
}

func (c *current) onSQLAssignment1(rhs, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": rhs}
	if opt != nil {
		m["lhs"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonSQLAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment1(stack["rhs"], stack["opt"])
}

func (c *current) onSQLAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments7(stack["expr"])
}

func (c *current) onSQLAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSQLFrom2(table, alias interface{}) (interface{}, error) {
	return map[string]interface{}{"table": table, "alias": alias}, nil

}

func (p *parser) callonSQLFrom2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom2(stack["table"], stack["alias"])
}

func (c *current) onSQLFrom12() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLFrom12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom12()
}

func (c *current) onSQLAlias2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias2(stack["id"])
}

func (c *current) onSQLAlias9(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias9(stack["id"])
}

func (c *current) onSQLJoins7(join interface{}) (interface{}, error) {
	return join, nil
}

func (p *parser) callonSQLJoins7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins7(stack["join"])
}

func (c *current) onSQLJoins1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLJoins1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins1(stack["first"], stack["rest"])
}

func (c *current) onSQLJoin1(style, table, alias, leftKey, rightKey interface{}) (interface{}, error) {
	return map[string]interface{}{

		"table": table,

		"style": style,

		"left_key": leftKey,

		"right_key": rightKey,

		"alias": alias}, nil

}

func (p *parser) callonSQLJoin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoin1(stack["style"], stack["table"], stack["alias"], stack["leftKey"], stack["rightKey"])
}

func (c *current) onSQLJoinStyle2(style interface{}) (interface{}, error) {
	return style, nil
}

func (p *parser) callonSQLJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle2(stack["style"])
}

func (c *current) onSQLJoinStyle11() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonSQLJoinStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle11()
}

func (c *current) onSQLWhere1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLWhere1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLWhere1(stack["expr"])
}

func (c *current) onSQLGroupBy1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonSQLGroupBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLGroupBy1(stack["columns"])
}

func (c *current) onSQLHaving1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLHaving1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLHaving1(stack["expr"])
}

func (c *current) onSQLOrderBy1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SQLOrderBy", "keys": keys, "order": order}, nil

}

func (p *parser) callonSQLOrderBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrderBy1(stack["keys"], stack["order"])
}

func (c *current) onSQLOrder2(dir interface{}) (interface{}, error) {
	return dir, nil
}

func (p *parser) callonSQLOrder2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder2(stack["dir"])
}

func (c *current) onSQLOrder9() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonSQLOrder9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder9()
}

func (c *current) onSQLLimit2(count interface{}) (interface{}, error) {
	return count, nil
}

func (p *parser) callonSQLLimit2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit2(stack["count"])
}

func (c *current) onSQLLimit9() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonSQLLimit9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit9()
}

func (c *current) onSELECT1() (interface{}, error) {
	return "select", nil
}

func (p *parser) callonSELECT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSELECT1()
}

func (c *current) onAS1() (interface{}, error) {
	return "as", nil
}

func (p *parser) callonAS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAS1()
}

func (c *current) onFROM1() (interface{}, error) {
	return "from", nil
}

func (p *parser) callonFROM1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFROM1()
}

func (c *current) onJOIN1() (interface{}, error) {
	return "join", nil
}

func (p *parser) callonJOIN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJOIN1()
}

func (c *current) onWHERE1() (interface{}, error) {
	return "where", nil
}

func (p *parser) callonWHERE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWHERE1()
}

func (c *current) onGROUP1() (interface{}, error) {
	return "group", nil
}

func (p *parser) callonGROUP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGROUP1()
}

func (c *current) onBY1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonBY1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBY1()
}

func (c *current) onHAVING1() (interface{}, error) {
	return "having", nil
}

func (p *parser) callonHAVING1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHAVING1()
}

func (c *current) onORDER1() (interface{}, error) {
	return "order", nil
}

func (p *parser) callonORDER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onORDER1()
}

func (c *current) onON1() (interface{}, error) {
	return "on", nil
}

func (p *parser) callonON1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onON1()
}

func (c *current) onLIMIT1() (interface{}, error) {
	return "limit", nil
}

func (p *parser) callonLIMIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIMIT1()
}

func (c *current) onASC1() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonASC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onASC1()
}

func (c *current) onDESC1() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonDESC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDESC1()
}

func (c *current) onANTI1() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonANTI1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onANTI1()
}

func (c *current) onLEFT1() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonLEFT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLEFT1()
}

func (c *current) onRIGHT1() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonRIGHT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRIGHT1()
}

func (c *current) onINNER1() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonINNER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINNER1()
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "float64", "text": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "int64", "text": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "null", "text": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onBytesLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bytes", "text": string(c.text)}, nil

}

func (p *parser) callonBytesLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBytesLiteral1()
}

func (c *current) onTypeLiteral1(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonTypeLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeLiteral1(stack["typ"])
}

func (c *current) onCastType3(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonCastType3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCastType3(stack["typ"])
}

func (c *current) onAmbiguousType2(name interface{}) (interface{}, error) {
	return name, nil
}

func (p *parser) callonAmbiguousType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType2(stack["name"])
}

func (c *current) onAmbiguousType8(name, opt interface{}) (interface{}, error) {
	if opt != nil {
		return map[string]interface{}{"kind": "TypeDef", "name": name, "type": opt.([]interface{})[3]}, nil
	}
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType8(stack["name"], stack["opt"])
}

func (c *current) onAmbiguousType19(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType19(stack["name"])
}

func (c *current) onAmbiguousType22(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonAmbiguousType22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType22(stack["u"])
}

func (c *current) onTypeUnion1(types interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeUnion", "types": types}, nil

}

func (p *parser) callonTypeUnion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeUnion1(stack["types"])
}

func (c *current) onTypeList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeList1(stack["first"], stack["rest"])
}

func (c *current) onTypeListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeListTail1(stack["typ"])
}

func (c *current) onComplexType2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType2(stack["fields"])
}

func (c *current) onComplexType10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexType10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType10(stack["typ"])
}

func (c *current) onComplexType18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexType18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType18(stack["typ"])
}

func (c *current) onComplexType26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexType26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType26(stack["keyType"], stack["valType"])
}

func (c *current) onTemplateLiteral1(v interface{}) (interface{}, error) {
	if len(v.([]interface{})) == 0 {
		return map[string]interface{}{"kind": "Primitive", "type": "string", "text": ""}, nil
	}
	return makeTemplateExprChain(v), nil

}

func (p *parser) callonTemplateLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteral1(stack["v"])
}

func (c *current) onTemplateLiteralParts2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts2(stack["v"])
}

func (c *current) onTemplateLiteralParts9(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts9(stack["v"])
}

func (c *current) onTemplateDoubleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateDoubleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedPart3(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar2(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar7(stack["v"])
}

func (c *current) onTemplateSingleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateSingleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedPart3(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar2(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar7(stack["v"])
}

func (c *current) onTemplateExpr1(e interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "Cast",

		"expr": e,

		"type": map[string]interface{}{

			"kind": "TypeValue",

			"value": map[string]interface{}{"kind": "TypePrimitive", "name": "string"}}}, nil

}

func (p *parser) callonTemplateExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateExpr1(stack["e"])
}

func (c *current) onPrimitiveType1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveType1()
}

func (c *current) onTypeFieldList2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList2(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldList9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonTypeFieldList9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList9()
}

func (c *current) onTypeFieldListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTail1(stack["typ"])
}

func (c *current) onTypeField1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeField1(stack["name"], stack["typ"])
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return "in", nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onIdentifierName19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName19()
}

func (c *current) onIdentifierName21(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName21(stack["id"])
}

func (c *current) onIdentifierNames7(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierNames7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierNames7(stack["id"])
}

func (c *current) onIdentifierNames1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonIdentifierNames1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierNames1(stack["first"], stack["rest"])
}

func (c *current) onTime1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "time", "text": string(c.text)}, nil

}

func (p *parser) callonTime1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTime1()
}

func (c *current) onDuration1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "duration", "text": string(c.text)}, nil

}

func (p *parser) callonDuration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDuration1()
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onFloatString22() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFloatString22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString22()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordChars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordChars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordChars1()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onGlobPattern1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil

}

func (p *parser) callonGlobPattern1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobPattern1(stack["head"], stack["tail"])
}

func (c *current) onGlobStart4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonGlobStart4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobStart4()
}

func (c *current) onGlobEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonGlobEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEsc1(stack["s"])
}

func (c *current) onGlobEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonGlobEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape2()
}

func (c *current) onGlobEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonGlobEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape4()
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onSingleCharEscape3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleCharEscape3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape3()
}

func (c *current) onSingleCharEscape6() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape6()
}

func (c *current) onSingleCharEscape8() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape8()
}

func (c *current) onSingleCharEscape10() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape10()
}

func (c *current) onSingleCharEscape12() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape12()
}

func (c *current) onSingleCharEscape14() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape14()
}

func (c *current) onSingleCharEscape16() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape16()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexpPattern1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexpPattern1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpPattern1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
