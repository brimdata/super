// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 7, col: 1, offset: 26},
			expr: &actionExpr{
				pos: position{line: 7, col: 9, offset: 34},
				run: (*parser).callonstart1,
				expr: &seqExpr{
					pos: position{line: 7, col: 9, offset: 34},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 7, col: 9, offset: 34},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 7, col: 12, offset: 37},
							label: "ast",
							expr: &ruleRefExpr{
								pos:  position{line: 7, col: 16, offset: 41},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 27, offset: 52},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 30, offset: 55},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Sequential",
			pos:  position{line: 9, col: 1, offset: 80},
			expr: &choiceExpr{
				pos: position{line: 10, col: 5, offset: 95},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 10, col: 5, offset: 95},
						run: (*parser).callonSequential2,
						expr: &seqExpr{
							pos: position{line: 10, col: 5, offset: 95},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 10, col: 5, offset: 95},
									label: "consts",
									expr: &ruleRefExpr{
										pos:  position{line: 10, col: 12, offset: 102},
										name: "Consts",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 10, col: 19, offset: 109},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 10, col: 22, offset: 112},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 10, col: 28, offset: 118},
										name: "Operation",
									},
								},
								&labeledExpr{
									pos:   position{line: 10, col: 38, offset: 128},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 10, col: 43, offset: 133},
										expr: &ruleRefExpr{
											pos:  position{line: 10, col: 43, offset: 133},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 13, col: 5, offset: 308},
						run: (*parser).callonSequential12,
						expr: &seqExpr{
							pos: position{line: 13, col: 5, offset: 308},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 13, col: 5, offset: 308},
									label: "consts",
									expr: &ruleRefExpr{
										pos:  position{line: 13, col: 12, offset: 315},
										name: "Consts",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 13, col: 19, offset: 322},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 13, col: 22, offset: 325},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 13, col: 25, offset: 328},
										name: "Operation",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SequentialTail",
			pos:  position{line: 17, col: 1, offset: 455},
			expr: &actionExpr{
				pos: position{line: 17, col: 18, offset: 472},
				run: (*parser).callonSequentialTail1,
				expr: &seqExpr{
					pos: position{line: 17, col: 18, offset: 472},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 17, col: 18, offset: 472},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 21, offset: 475},
							name: "Pipe",
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 26, offset: 480},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 17, col: 29, offset: 483},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 31, offset: 485},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Consts",
			pos:  position{line: 19, col: 1, offset: 514},
			expr: &choiceExpr{
				pos: position{line: 20, col: 5, offset: 525},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 20, col: 5, offset: 525},
						expr: &ruleRefExpr{
							pos:  position{line: 20, col: 5, offset: 525},
							name: "Const",
						},
					},
					&actionExpr{
						pos: position{line: 21, col: 5, offset: 536},
						run: (*parser).callonConsts4,
						expr: &ruleRefExpr{
							pos:  position{line: 21, col: 5, offset: 536},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Const",
			pos:  position{line: 23, col: 1, offset: 572},
			expr: &actionExpr{
				pos: position{line: 23, col: 9, offset: 580},
				run: (*parser).callonConst1,
				expr: &seqExpr{
					pos: position{line: 23, col: 9, offset: 580},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 23, col: 9, offset: 580},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 23, col: 12, offset: 583},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 23, col: 14, offset: 585},
								name: "ConstDef",
							},
						},
					},
				},
			},
		},
		{
			name: "ConstDef",
			pos:  position{line: 25, col: 1, offset: 613},
			expr: &choiceExpr{
				pos: position{line: 26, col: 5, offset: 626},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 26, col: 5, offset: 626},
						run: (*parser).callonConstDef2,
						expr: &seqExpr{
							pos: position{line: 26, col: 5, offset: 626},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 26, col: 5, offset: 626},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 26, col: 13, offset: 634},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 26, col: 15, offset: 636},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 26, col: 18, offset: 639},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 26, col: 33, offset: 654},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 26, col: 36, offset: 657},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 26, col: 40, offset: 661},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 26, col: 43, offset: 664},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 26, col: 48, offset: 669},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 29, col: 5, offset: 751},
						run: (*parser).callonConstDef13,
						expr: &seqExpr{
							pos: position{line: 29, col: 5, offset: 751},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 29, col: 5, offset: 751},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 29, col: 12, offset: 758},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 29, col: 14, offset: 760},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 29, col: 17, offset: 763},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 29, col: 32, offset: 778},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 29, col: 35, offset: 781},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 29, col: 39, offset: 785},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 29, col: 42, offset: 788},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 29, col: 46, offset: 792},
										name: "Type",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operation",
			pos:  position{line: 39, col: 1, offset: 1016},
			expr: &choiceExpr{
				pos: position{line: 40, col: 5, offset: 1030},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 40, col: 5, offset: 1030},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 40, col: 5, offset: 1030},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 40, col: 5, offset: 1030},
									val:        "fork",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 40, col: 12, offset: 1037},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 40, col: 15, offset: 1040},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 40, col: 19, offset: 1044},
									label: "procArray",
									expr: &oneOrMoreExpr{
										pos: position{line: 40, col: 29, offset: 1054},
										expr: &ruleRefExpr{
											pos:  position{line: 40, col: 29, offset: 1054},
											name: "Leg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 40, col: 34, offset: 1059},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 40, col: 37, offset: 1062},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 43, col: 5, offset: 1159},
						run: (*parser).callonOperation12,
						expr: &seqExpr{
							pos: position{line: 43, col: 5, offset: 1159},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 43, col: 5, offset: 1159},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 43, col: 14, offset: 1168},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 43, col: 16, offset: 1170},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 43, col: 21, offset: 1175},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 43, col: 26, offset: 1180},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 43, col: 28, offset: 1182},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 43, col: 32, offset: 1186},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 43, col: 38, offset: 1192},
										expr: &ruleRefExpr{
											pos:  position{line: 43, col: 38, offset: 1192},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 43, col: 49, offset: 1203},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 43, col: 52, offset: 1206},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 46, col: 5, offset: 1311},
						run: (*parser).callonOperation25,
						expr: &seqExpr{
							pos: position{line: 46, col: 5, offset: 1311},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 46, col: 5, offset: 1311},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 46, col: 14, offset: 1320},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 46, col: 17, offset: 1323},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 46, col: 21, offset: 1327},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 46, col: 27, offset: 1333},
										expr: &ruleRefExpr{
											pos:  position{line: 46, col: 27, offset: 1333},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 46, col: 38, offset: 1344},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 46, col: 41, offset: 1347},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 49, col: 5, offset: 1451},
						run: (*parser).callonOperation35,
						expr: &seqExpr{
							pos: position{line: 49, col: 5, offset: 1451},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 49, col: 5, offset: 1451},
									val:        "from",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 49, col: 12, offset: 1458},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 49, col: 15, offset: 1461},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 49, col: 19, offset: 1465},
									label: "trunks",
									expr: &oneOrMoreExpr{
										pos: position{line: 49, col: 26, offset: 1472},
										expr: &ruleRefExpr{
											pos:  position{line: 49, col: 26, offset: 1472},
											name: "FromLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 49, col: 35, offset: 1481},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 49, col: 38, offset: 1484},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&labeledExpr{
						pos:   position{line: 52, col: 5, offset: 1575},
						label: "op",
						expr: &ruleRefExpr{
							pos:  position{line: 52, col: 8, offset: 1578},
							name: "Operator",
						},
					},
					&actionExpr{
						pos: position{line: 53, col: 5, offset: 1591},
						run: (*parser).callonOperation47,
						expr: &seqExpr{
							pos: position{line: 53, col: 5, offset: 1591},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 53, col: 5, offset: 1591},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 53, col: 7, offset: 1593},
										name: "OpAssignment",
									},
								},
								&andExpr{
									pos: position{line: 53, col: 20, offset: 1606},
									expr: &ruleRefExpr{
										pos:  position{line: 53, col: 21, offset: 1607},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 54, col: 5, offset: 1637},
						run: (*parser).callonOperation53,
						expr: &seqExpr{
							pos: position{line: 54, col: 5, offset: 1637},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 54, col: 5, offset: 1637},
									expr: &seqExpr{
										pos: position{line: 54, col: 7, offset: 1639},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 54, col: 7, offset: 1639},
												name: "Function",
											},
											&ruleRefExpr{
												pos:  position{line: 54, col: 16, offset: 1648},
												name: "EndOfOp",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 54, col: 25, offset: 1657},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 54, col: 27, offset: 1659},
										name: "Aggregation",
									},
								},
								&andExpr{
									pos: position{line: 54, col: 39, offset: 1671},
									expr: &ruleRefExpr{
										pos:  position{line: 54, col: 40, offset: 1672},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 55, col: 5, offset: 1703},
						run: (*parser).callonOperation63,
						expr: &seqExpr{
							pos: position{line: 55, col: 5, offset: 1703},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 55, col: 5, offset: 1703},
									val:        "search",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 55, col: 14, offset: 1712},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 55, col: 16, offset: 1714},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 55, col: 21, offset: 1719},
										name: "SearchBoolean",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 58, col: 5, offset: 1818},
						run: (*parser).callonOperation69,
						expr: &labeledExpr{
							pos:   position{line: 58, col: 5, offset: 1818},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 58, col: 10, offset: 1823},
								name: "SearchBoolean",
							},
						},
					},
					&actionExpr{
						pos: position{line: 61, col: 5, offset: 1922},
						run: (*parser).callonOperation72,
						expr: &labeledExpr{
							pos:   position{line: 61, col: 5, offset: 1922},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 61, col: 10, offset: 1927},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "EndOfOp",
			pos:  position{line: 65, col: 1, offset: 2014},
			expr: &seqExpr{
				pos: position{line: 65, col: 11, offset: 2024},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 65, col: 11, offset: 2024},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 65, col: 15, offset: 2028},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 65, col: 15, offset: 2028},
								name: "Pipe",
							},
							&ruleRefExpr{
								pos:  position{line: 65, col: 22, offset: 2035},
								name: "SearchKeywordGuard",
							},
							&litMatcher{
								pos:        position{line: 65, col: 43, offset: 2056},
								val:        "=>",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 65, col: 50, offset: 2063},
								val:        ")",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 65, col: 56, offset: 2069},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "Pipe",
			pos:  position{line: 66, col: 1, offset: 2074},
			expr: &seqExpr{
				pos: position{line: 66, col: 8, offset: 2081},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 66, col: 8, offset: 2081},
						val:        "|",
						ignoreCase: false,
					},
					&notExpr{
						pos: position{line: 66, col: 12, offset: 2085},
						expr: &choiceExpr{
							pos: position{line: 66, col: 14, offset: 2087},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 66, col: 14, offset: 2087},
									val:        "{",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 66, col: 20, offset: 2093},
									val:        "[",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Leg",
			pos:  position{line: 68, col: 1, offset: 2099},
			expr: &actionExpr{
				pos: position{line: 69, col: 5, offset: 2107},
				run: (*parser).callonLeg1,
				expr: &seqExpr{
					pos: position{line: 69, col: 5, offset: 2107},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 69, col: 5, offset: 2107},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 69, col: 8, offset: 2110},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 69, col: 13, offset: 2115},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 69, col: 16, offset: 2118},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 69, col: 18, offset: 2120},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchLeg",
			pos:  position{line: 71, col: 1, offset: 2150},
			expr: &actionExpr{
				pos: position{line: 72, col: 5, offset: 2164},
				run: (*parser).callonSwitchLeg1,
				expr: &seqExpr{
					pos: position{line: 72, col: 5, offset: 2164},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 72, col: 5, offset: 2164},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 72, col: 8, offset: 2167},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 72, col: 13, offset: 2172},
								name: "Case",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 72, col: 18, offset: 2177},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 72, col: 21, offset: 2180},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 72, col: 26, offset: 2185},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 72, col: 29, offset: 2188},
							label: "proc",
							expr: &ruleRefExpr{
								pos:  position{line: 72, col: 34, offset: 2193},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "Case",
			pos:  position{line: 76, col: 1, offset: 2282},
			expr: &choiceExpr{
				pos: position{line: 77, col: 5, offset: 2291},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 77, col: 5, offset: 2291},
						run: (*parser).callonCase2,
						expr: &seqExpr{
							pos: position{line: 77, col: 5, offset: 2291},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 77, col: 5, offset: 2291},
									val:        "case",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 77, col: 12, offset: 2298},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 77, col: 14, offset: 2300},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 77, col: 19, offset: 2305},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 78, col: 5, offset: 2335},
						run: (*parser).callonCase8,
						expr: &litMatcher{
							pos:        position{line: 78, col: 5, offset: 2335},
							val:        "default",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromLeg",
			pos:  position{line: 80, col: 1, offset: 2366},
			expr: &choiceExpr{
				pos: position{line: 81, col: 5, offset: 2378},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 81, col: 5, offset: 2378},
						run: (*parser).callonFromLeg2,
						expr: &seqExpr{
							pos: position{line: 81, col: 5, offset: 2378},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 81, col: 5, offset: 2378},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 81, col: 8, offset: 2381},
									label: "source",
									expr: &ruleRefExpr{
										pos:  position{line: 81, col: 15, offset: 2388},
										name: "FromHead",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 81, col: 24, offset: 2397},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 81, col: 28, offset: 2401},
									label: "seq",
									expr: &ruleRefExpr{
										pos:  position{line: 81, col: 32, offset: 2405},
										name: "Sequential",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 84, col: 5, offset: 2516},
						run: (*parser).callonFromLeg10,
						expr: &seqExpr{
							pos: position{line: 84, col: 5, offset: 2516},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 84, col: 5, offset: 2516},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 84, col: 8, offset: 2519},
									label: "source",
									expr: &ruleRefExpr{
										pos:  position{line: 84, col: 15, offset: 2526},
										name: "FromSource",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FromHead",
			pos:  position{line: 88, col: 1, offset: 2634},
			expr: &actionExpr{
				pos: position{line: 89, col: 5, offset: 2647},
				run: (*parser).callonFromHead1,
				expr: &seqExpr{
					pos: position{line: 89, col: 5, offset: 2647},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 89, col: 5, offset: 2647},
							label: "src",
							expr: &ruleRefExpr{
								pos:  position{line: 89, col: 9, offset: 2651},
								name: "FromSource",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 89, col: 20, offset: 2662},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 89, col: 23, offset: 2665},
							val:        "=>",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromSource",
			pos:  position{line: 91, col: 1, offset: 2691},
			expr: &choiceExpr{
				pos: position{line: 92, col: 5, offset: 2706},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 92, col: 5, offset: 2706},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 93, col: 5, offset: 2715},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 94, col: 5, offset: 2723},
						name: "Pool",
					},
					&ruleRefExpr{
						pos:  position{line: 95, col: 5, offset: 2732},
						name: "PassProc",
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 97, col: 1, offset: 2742},
			expr: &seqExpr{
				pos: position{line: 97, col: 13, offset: 2754},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 97, col: 13, offset: 2754},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 97, col: 17, offset: 2758},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 97, col: 18, offset: 2759},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 97, col: 18, offset: 2759},
										expr: &litMatcher{
											pos:        position{line: 97, col: 19, offset: 2760},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 97, col: 24, offset: 2765},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 97, col: 38, offset: 2779},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 97, col: 57, offset: 2798},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 97, col: 82, offset: 2823},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 97, col: 88, offset: 2829},
								val:        "(",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 97, col: 94, offset: 2835},
								val:        "[",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 97, col: 100, offset: 2841},
								val:        "~",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 99, col: 1, offset: 2847},
			expr: &actionExpr{
				pos: position{line: 99, col: 14, offset: 2860},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 99, col: 15, offset: 2861},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 99, col: 15, offset: 2861},
							val:        "==",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 99, col: 22, offset: 2868},
							val:        "!=",
							ignoreCase: false,
						},
						&seqExpr{
							pos: position{line: 99, col: 30, offset: 2876},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 99, col: 30, offset: 2876},
									val:        "in",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 99, col: 35, offset: 2881},
									expr: &ruleRefExpr{
										pos:  position{line: 99, col: 36, offset: 2882},
										name: "IdentifierRest",
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 99, col: 54, offset: 2900},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 99, col: 61, offset: 2907},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 99, col: 67, offset: 2913},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 99, col: 74, offset: 2920},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 101, col: 1, offset: 2957},
			expr: &actionExpr{
				pos: position{line: 102, col: 5, offset: 2975},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 102, col: 5, offset: 2975},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 102, col: 5, offset: 2975},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 102, col: 11, offset: 2981},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 102, col: 21, offset: 2991},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 102, col: 26, offset: 2996},
								expr: &ruleRefExpr{
									pos:  position{line: 102, col: 26, offset: 2996},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 106, col: 1, offset: 3070},
			expr: &actionExpr{
				pos: position{line: 106, col: 16, offset: 3085},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 106, col: 16, offset: 3085},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 106, col: 16, offset: 3085},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 106, col: 18, offset: 3087},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 106, col: 26, offset: 3095},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 106, col: 28, offset: 3097},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 106, col: 30, offset: 3099},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 108, col: 1, offset: 3149},
			expr: &actionExpr{
				pos: position{line: 109, col: 5, offset: 3163},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 109, col: 5, offset: 3163},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 109, col: 5, offset: 3163},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 109, col: 11, offset: 3169},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 110, col: 5, offset: 3186},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 110, col: 10, offset: 3191},
								expr: &actionExpr{
									pos: position{line: 110, col: 11, offset: 3192},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 110, col: 11, offset: 3192},
										exprs: []interface{}{
											&zeroOrOneExpr{
												pos: position{line: 110, col: 11, offset: 3192},
												expr: &seqExpr{
													pos: position{line: 110, col: 12, offset: 3193},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 110, col: 12, offset: 3193},
															name: "_",
														},
														&ruleRefExpr{
															pos:  position{line: 110, col: 14, offset: 3195},
															name: "AndToken",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 110, col: 25, offset: 3206},
												name: "_",
											},
											&notExpr{
												pos: position{line: 110, col: 27, offset: 3208},
												expr: &choiceExpr{
													pos: position{line: 110, col: 29, offset: 3210},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 110, col: 29, offset: 3210},
															name: "OrToken",
														},
														&ruleRefExpr{
															pos:  position{line: 110, col: 39, offset: 3220},
															name: "SearchKeywordGuard",
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 110, col: 59, offset: 3240},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 110, col: 64, offset: 3245},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchKeywordGuard",
			pos:  position{line: 114, col: 1, offset: 3361},
			expr: &choiceExpr{
				pos: position{line: 115, col: 5, offset: 3384},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 115, col: 5, offset: 3384},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 115, col: 5, offset: 3384},
								name: "FromHead",
							},
							&ruleRefExpr{
								pos:  position{line: 115, col: 14, offset: 3393},
								name: "__",
							},
						},
					},
					&seqExpr{
						pos: position{line: 116, col: 5, offset: 3400},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 116, col: 5, offset: 3400},
								name: "Case",
							},
							&ruleRefExpr{
								pos:  position{line: 116, col: 10, offset: 3405},
								name: "__",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 118, col: 1, offset: 3409},
			expr: &choiceExpr{
				pos: position{line: 119, col: 5, offset: 3426},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 119, col: 5, offset: 3426},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 119, col: 5, offset: 3426},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 119, col: 6, offset: 3427},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 119, col: 6, offset: 3427},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 119, col: 6, offset: 3427},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 119, col: 15, offset: 3436},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 119, col: 19, offset: 3440},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 119, col: 19, offset: 3440},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 119, col: 23, offset: 3444},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 119, col: 27, offset: 3448},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 119, col: 29, offset: 3450},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 122, col: 5, offset: 3562},
						run: (*parser).callonSearchFactor13,
						expr: &seqExpr{
							pos: position{line: 122, col: 5, offset: 3562},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 122, col: 5, offset: 3562},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 122, col: 9, offset: 3566},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 122, col: 12, offset: 3569},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 122, col: 17, offset: 3574},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 122, col: 31, offset: 3588},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 122, col: 34, offset: 3591},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 123, col: 5, offset: 3620},
						name: "SearchExpr",
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 125, col: 1, offset: 3632},
			expr: &choiceExpr{
				pos: position{line: 126, col: 5, offset: 3647},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 126, col: 5, offset: 3647},
						name: "Glob",
					},
					&ruleRefExpr{
						pos:  position{line: 127, col: 5, offset: 3656},
						name: "Regexp",
					},
					&actionExpr{
						pos: position{line: 128, col: 5, offset: 3667},
						run: (*parser).callonSearchExpr4,
						expr: &seqExpr{
							pos: position{line: 128, col: 5, offset: 3667},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 128, col: 5, offset: 3667},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 128, col: 7, offset: 3669},
										name: "SearchValue",
									},
								},
								&andExpr{
									pos: position{line: 128, col: 19, offset: 3681},
									expr: &seqExpr{
										pos: position{line: 128, col: 21, offset: 3683},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 128, col: 21, offset: 3683},
												name: "_",
											},
											&ruleRefExpr{
												pos:  position{line: 128, col: 23, offset: 3685},
												name: "Glob",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 131, col: 5, offset: 3796},
						run: (*parser).callonSearchExpr12,
						expr: &seqExpr{
							pos: position{line: 131, col: 5, offset: 3796},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 131, col: 5, offset: 3796},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 131, col: 7, offset: 3798},
										name: "SearchValue",
									},
								},
								&notExpr{
									pos: position{line: 131, col: 19, offset: 3810},
									expr: &ruleRefExpr{
										pos:  position{line: 131, col: 20, offset: 3811},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 134, col: 5, offset: 3926},
						run: (*parser).callonSearchExpr18,
						expr: &seqExpr{
							pos: position{line: 134, col: 5, offset: 3926},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 134, col: 5, offset: 3926},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 134, col: 9, offset: 3930},
									expr: &ruleRefExpr{
										pos:  position{line: 134, col: 10, offset: 3931},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 137, col: 5, offset: 4047},
						name: "SearchPredicate",
					},
				},
			},
		},
		{
			name: "SearchPredicate",
			pos:  position{line: 139, col: 1, offset: 4064},
			expr: &choiceExpr{
				pos: position{line: 140, col: 5, offset: 4084},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 140, col: 5, offset: 4084},
						run: (*parser).callonSearchPredicate2,
						expr: &seqExpr{
							pos: position{line: 140, col: 5, offset: 4084},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 140, col: 5, offset: 4084},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 140, col: 9, offset: 4088},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 140, col: 22, offset: 4101},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 140, col: 25, offset: 4104},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 140, col: 28, offset: 4107},
										name: "Comparator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 140, col: 39, offset: 4118},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 140, col: 42, offset: 4121},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 140, col: 46, offset: 4125},
										name: "AdditiveExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 143, col: 6, offset: 4248},
						run: (*parser).callonSearchPredicate12,
						expr: &seqExpr{
							pos: position{line: 143, col: 6, offset: 4248},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 143, col: 6, offset: 4248},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 143, col: 12, offset: 4254},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 143, col: 21, offset: 4263},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 143, col: 26, offset: 4268},
										expr: &ruleRefExpr{
											pos:  position{line: 143, col: 27, offset: 4269},
											name: "Deref",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 147, col: 1, offset: 4341},
			expr: &choiceExpr{
				pos: position{line: 148, col: 5, offset: 4357},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 148, col: 5, offset: 4357},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 149, col: 5, offset: 4369},
						run: (*parser).callonSearchValue3,
						expr: &seqExpr{
							pos: position{line: 149, col: 5, offset: 4369},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 149, col: 5, offset: 4369},
									expr: &ruleRefExpr{
										pos:  position{line: 149, col: 6, offset: 4370},
										name: "RegexpPattern",
									},
								},
								&labeledExpr{
									pos:   position{line: 149, col: 20, offset: 4384},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 149, col: 22, offset: 4386},
										name: "KeyWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Glob",
			pos:  position{line: 153, col: 1, offset: 4494},
			expr: &actionExpr{
				pos: position{line: 154, col: 5, offset: 4503},
				run: (*parser).callonGlob1,
				expr: &labeledExpr{
					pos:   position{line: 154, col: 5, offset: 4503},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 154, col: 13, offset: 4511},
						name: "GlobPattern",
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 158, col: 1, offset: 4607},
			expr: &actionExpr{
				pos: position{line: 159, col: 5, offset: 4618},
				run: (*parser).callonRegexp1,
				expr: &labeledExpr{
					pos:   position{line: 159, col: 5, offset: 4618},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 159, col: 13, offset: 4626},
						name: "RegexpPattern",
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 165, col: 1, offset: 4752},
			expr: &choiceExpr{
				pos: position{line: 166, col: 5, offset: 4768},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 166, col: 5, offset: 4768},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 166, col: 5, offset: 4768},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 166, col: 5, offset: 4768},
									expr: &ruleRefExpr{
										pos:  position{line: 166, col: 5, offset: 4768},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 166, col: 16, offset: 4779},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 166, col: 21, offset: 4784},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 166, col: 33, offset: 4796},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 166, col: 39, offset: 4802},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 169, col: 5, offset: 4928},
						run: (*parser).callonAggregation10,
						expr: &seqExpr{
							pos: position{line: 169, col: 5, offset: 4928},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 169, col: 5, offset: 4928},
									expr: &ruleRefExpr{
										pos:  position{line: 169, col: 5, offset: 4928},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 169, col: 16, offset: 4939},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 169, col: 21, offset: 4944},
										name: "AggAssignments",
									},
								},
								&labeledExpr{
									pos:   position{line: 169, col: 36, offset: 4959},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 169, col: 41, offset: 4964},
										expr: &seqExpr{
											pos: position{line: 169, col: 42, offset: 4965},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 169, col: 42, offset: 4965},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 169, col: 44, offset: 4967},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 169, col: 58, offset: 4981},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 169, col: 64, offset: 4987},
										name: "LimitArg",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Summarize",
			pos:  position{line: 177, col: 1, offset: 5201},
			expr: &seqExpr{
				pos: position{line: 177, col: 13, offset: 5213},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 177, col: 13, offset: 5213},
						val:        "summarize",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 177, col: 25, offset: 5225},
						name: "_",
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 179, col: 1, offset: 5228},
			expr: &actionExpr{
				pos: position{line: 180, col: 5, offset: 5244},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 180, col: 5, offset: 5244},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 180, col: 5, offset: 5244},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 180, col: 13, offset: 5252},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 180, col: 15, offset: 5254},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 180, col: 23, offset: 5262},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 182, col: 1, offset: 5303},
			expr: &choiceExpr{
				pos: position{line: 183, col: 5, offset: 5316},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 183, col: 5, offset: 5316},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 183, col: 5, offset: 5316},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 183, col: 5, offset: 5316},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 183, col: 7, offset: 5318},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 183, col: 14, offset: 5325},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 183, col: 16, offset: 5327},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 183, col: 25, offset: 5336},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 183, col: 27, offset: 5338},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 183, col: 33, offset: 5344},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 184, col: 5, offset: 5375},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 184, col: 5, offset: 5375},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 189, col: 1, offset: 5635},
			expr: &choiceExpr{
				pos: position{line: 190, col: 5, offset: 5654},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 190, col: 5, offset: 5654},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 191, col: 5, offset: 5669},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 191, col: 5, offset: 5669},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 191, col: 10, offset: 5674},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 193, col: 1, offset: 5766},
			expr: &actionExpr{
				pos: position{line: 194, col: 5, offset: 5786},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 194, col: 5, offset: 5786},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 194, col: 5, offset: 5786},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 194, col: 11, offset: 5792},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 194, col: 26, offset: 5807},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 194, col: 31, offset: 5812},
								expr: &actionExpr{
									pos: position{line: 194, col: 32, offset: 5813},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 194, col: 32, offset: 5813},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 194, col: 32, offset: 5813},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 194, col: 35, offset: 5816},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 194, col: 39, offset: 5820},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 194, col: 42, offset: 5823},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 194, col: 47, offset: 5828},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignment",
			pos:  position{line: 198, col: 1, offset: 5950},
			expr: &choiceExpr{
				pos: position{line: 199, col: 5, offset: 5968},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 199, col: 5, offset: 5968},
						run: (*parser).callonAggAssignment2,
						expr: &seqExpr{
							pos: position{line: 199, col: 5, offset: 5968},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 199, col: 5, offset: 5968},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 199, col: 10, offset: 5973},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 199, col: 15, offset: 5978},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 199, col: 18, offset: 5981},
									val:        ":=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 199, col: 23, offset: 5986},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 199, col: 26, offset: 5989},
									label: "agg",
									expr: &ruleRefExpr{
										pos:  position{line: 199, col: 30, offset: 5993},
										name: "Agg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 202, col: 5, offset: 6097},
						run: (*parser).callonAggAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 202, col: 5, offset: 6097},
							label: "agg",
							expr: &ruleRefExpr{
								pos:  position{line: 202, col: 9, offset: 6101},
								name: "Agg",
							},
						},
					},
				},
			},
		},
		{
			name: "Agg",
			pos:  position{line: 206, col: 1, offset: 6201},
			expr: &actionExpr{
				pos: position{line: 207, col: 5, offset: 6209},
				run: (*parser).callonAgg1,
				expr: &seqExpr{
					pos: position{line: 207, col: 5, offset: 6209},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 207, col: 5, offset: 6209},
							expr: &ruleRefExpr{
								pos:  position{line: 207, col: 6, offset: 6210},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 207, col: 16, offset: 6220},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 207, col: 19, offset: 6223},
								name: "AggName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 207, col: 27, offset: 6231},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 207, col: 30, offset: 6234},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 207, col: 34, offset: 6238},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 207, col: 37, offset: 6241},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 207, col: 42, offset: 6246},
								expr: &ruleRefExpr{
									pos:  position{line: 207, col: 42, offset: 6246},
									name: "Expr",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 207, col: 49, offset: 6253},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 207, col: 52, offset: 6256},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 207, col: 56, offset: 6260},
							expr: &seqExpr{
								pos: position{line: 207, col: 58, offset: 6262},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 207, col: 58, offset: 6262},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 207, col: 61, offset: 6265},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 207, col: 66, offset: 6270},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 207, col: 72, offset: 6276},
								expr: &ruleRefExpr{
									pos:  position{line: 207, col: 72, offset: 6276},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggName",
			pos:  position{line: 215, col: 1, offset: 6466},
			expr: &choiceExpr{
				pos: position{line: 216, col: 5, offset: 6478},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 216, col: 5, offset: 6478},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 217, col: 5, offset: 6497},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 218, col: 5, offset: 6510},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 220, col: 1, offset: 6519},
			expr: &actionExpr{
				pos: position{line: 220, col: 15, offset: 6533},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 220, col: 15, offset: 6533},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 220, col: 15, offset: 6533},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 220, col: 17, offset: 6535},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 220, col: 25, offset: 6543},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 220, col: 27, offset: 6545},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 220, col: 32, offset: 6550},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignments",
			pos:  position{line: 222, col: 1, offset: 6586},
			expr: &actionExpr{
				pos: position{line: 223, col: 5, offset: 6605},
				run: (*parser).callonAggAssignments1,
				expr: &seqExpr{
					pos: position{line: 223, col: 5, offset: 6605},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 223, col: 5, offset: 6605},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 223, col: 11, offset: 6611},
								name: "AggAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 223, col: 25, offset: 6625},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 223, col: 30, offset: 6630},
								expr: &seqExpr{
									pos: position{line: 223, col: 31, offset: 6631},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 223, col: 31, offset: 6631},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 223, col: 34, offset: 6634},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 223, col: 38, offset: 6638},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 223, col: 41, offset: 6641},
											name: "AggAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 233, col: 1, offset: 6877},
			expr: &choiceExpr{
				pos: position{line: 234, col: 5, offset: 6890},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 234, col: 5, offset: 6890},
						name: "SortProc",
					},
					&ruleRefExpr{
						pos:  position{line: 235, col: 5, offset: 6903},
						name: "TopProc",
					},
					&ruleRefExpr{
						pos:  position{line: 236, col: 5, offset: 6915},
						name: "CutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 237, col: 5, offset: 6927},
						name: "DropProc",
					},
					&ruleRefExpr{
						pos:  position{line: 238, col: 5, offset: 6940},
						name: "HeadProc",
					},
					&ruleRefExpr{
						pos:  position{line: 239, col: 5, offset: 6953},
						name: "TailProc",
					},
					&ruleRefExpr{
						pos:  position{line: 240, col: 5, offset: 6966},
						name: "WhereProc",
					},
					&ruleRefExpr{
						pos:  position{line: 241, col: 5, offset: 6980},
						name: "UniqProc",
					},
					&ruleRefExpr{
						pos:  position{line: 242, col: 5, offset: 6993},
						name: "PutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 243, col: 5, offset: 7005},
						name: "RenameProc",
					},
					&ruleRefExpr{
						pos:  position{line: 244, col: 5, offset: 7020},
						name: "FuseProc",
					},
					&ruleRefExpr{
						pos:  position{line: 245, col: 5, offset: 7033},
						name: "ShapeProc",
					},
					&ruleRefExpr{
						pos:  position{line: 246, col: 5, offset: 7047},
						name: "JoinProc",
					},
					&ruleRefExpr{
						pos:  position{line: 247, col: 5, offset: 7060},
						name: "SampleProc",
					},
					&ruleRefExpr{
						pos:  position{line: 248, col: 5, offset: 7075},
						name: "SQLProc",
					},
					&ruleRefExpr{
						pos:  position{line: 249, col: 5, offset: 7087},
						name: "FromProc",
					},
					&ruleRefExpr{
						pos:  position{line: 250, col: 5, offset: 7100},
						name: "PassProc",
					},
					&ruleRefExpr{
						pos:  position{line: 251, col: 5, offset: 7113},
						name: "ExplodeProc",
					},
					&ruleRefExpr{
						pos:  position{line: 252, col: 5, offset: 7129},
						name: "LetProc",
					},
					&ruleRefExpr{
						pos:  position{line: 253, col: 5, offset: 7141},
						name: "MergeProc",
					},
					&ruleRefExpr{
						pos:  position{line: 254, col: 5, offset: 7155},
						name: "OverProc",
					},
					&ruleRefExpr{
						pos:  position{line: 255, col: 5, offset: 7168},
						name: "YieldProc",
					},
				},
			},
		},
		{
			name: "SortProc",
			pos:  position{line: 257, col: 1, offset: 7179},
			expr: &actionExpr{
				pos: position{line: 258, col: 5, offset: 7192},
				run: (*parser).callonSortProc1,
				expr: &seqExpr{
					pos: position{line: 258, col: 5, offset: 7192},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 258, col: 5, offset: 7192},
							val:        "sort",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 258, col: 12, offset: 7199},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 258, col: 17, offset: 7204},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 258, col: 26, offset: 7213},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 258, col: 31, offset: 7218},
								expr: &actionExpr{
									pos: position{line: 258, col: 32, offset: 7219},
									run: (*parser).callonSortProc8,
									expr: &seqExpr{
										pos: position{line: 258, col: 32, offset: 7219},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 258, col: 32, offset: 7219},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 258, col: 34, offset: 7221},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 258, col: 36, offset: 7223},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 272, col: 1, offset: 7642},
			expr: &actionExpr{
				pos: position{line: 272, col: 12, offset: 7653},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 272, col: 12, offset: 7653},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 272, col: 17, offset: 7658},
						expr: &actionExpr{
							pos: position{line: 272, col: 18, offset: 7659},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 272, col: 18, offset: 7659},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 272, col: 18, offset: 7659},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 272, col: 20, offset: 7661},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 272, col: 22, offset: 7663},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 274, col: 1, offset: 7719},
			expr: &choiceExpr{
				pos: position{line: 275, col: 5, offset: 7731},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 275, col: 5, offset: 7731},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 275, col: 5, offset: 7731},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 276, col: 5, offset: 7806},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 276, col: 5, offset: 7806},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 276, col: 5, offset: 7806},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 276, col: 14, offset: 7815},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 276, col: 16, offset: 7817},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 276, col: 23, offset: 7824},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 276, col: 24, offset: 7825},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 276, col: 24, offset: 7825},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 276, col: 34, offset: 7835},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopProc",
			pos:  position{line: 278, col: 1, offset: 7949},
			expr: &actionExpr{
				pos: position{line: 279, col: 5, offset: 7961},
				run: (*parser).callonTopProc1,
				expr: &seqExpr{
					pos: position{line: 279, col: 5, offset: 7961},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 279, col: 5, offset: 7961},
							val:        "top",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 279, col: 11, offset: 7967},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 279, col: 17, offset: 7973},
								expr: &actionExpr{
									pos: position{line: 279, col: 18, offset: 7974},
									run: (*parser).callonTopProc6,
									expr: &seqExpr{
										pos: position{line: 279, col: 18, offset: 7974},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 279, col: 18, offset: 7974},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 279, col: 20, offset: 7976},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 279, col: 22, offset: 7978},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 279, col: 46, offset: 8002},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 279, col: 52, offset: 8008},
								expr: &seqExpr{
									pos: position{line: 279, col: 53, offset: 8009},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 279, col: 53, offset: 8009},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 279, col: 55, offset: 8011},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 279, col: 66, offset: 8022},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 279, col: 73, offset: 8029},
								expr: &actionExpr{
									pos: position{line: 279, col: 74, offset: 8030},
									run: (*parser).callonTopProc18,
									expr: &seqExpr{
										pos: position{line: 279, col: 74, offset: 8030},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 279, col: 74, offset: 8030},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 279, col: 76, offset: 8032},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 279, col: 78, offset: 8034},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutProc",
			pos:  position{line: 293, col: 1, offset: 8379},
			expr: &actionExpr{
				pos: position{line: 294, col: 5, offset: 8391},
				run: (*parser).callonCutProc1,
				expr: &seqExpr{
					pos: position{line: 294, col: 5, offset: 8391},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 294, col: 5, offset: 8391},
							val:        "cut",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 294, col: 11, offset: 8397},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 294, col: 13, offset: 8399},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 294, col: 18, offset: 8404},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropProc",
			pos:  position{line: 298, col: 1, offset: 8499},
			expr: &actionExpr{
				pos: position{line: 299, col: 5, offset: 8512},
				run: (*parser).callonDropProc1,
				expr: &seqExpr{
					pos: position{line: 299, col: 5, offset: 8512},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 299, col: 5, offset: 8512},
							val:        "drop",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 299, col: 12, offset: 8519},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 299, col: 14, offset: 8521},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 299, col: 19, offset: 8526},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadProc",
			pos:  position{line: 303, col: 1, offset: 8617},
			expr: &choiceExpr{
				pos: position{line: 304, col: 5, offset: 8630},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 304, col: 5, offset: 8630},
						run: (*parser).callonHeadProc2,
						expr: &seqExpr{
							pos: position{line: 304, col: 5, offset: 8630},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 304, col: 5, offset: 8630},
									val:        "head",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 304, col: 12, offset: 8637},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 304, col: 14, offset: 8639},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 304, col: 20, offset: 8645},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 305, col: 5, offset: 8725},
						run: (*parser).callonHeadProc8,
						expr: &litMatcher{
							pos:        position{line: 305, col: 5, offset: 8725},
							val:        "head",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TailProc",
			pos:  position{line: 307, col: 1, offset: 8800},
			expr: &choiceExpr{
				pos: position{line: 308, col: 5, offset: 8813},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 308, col: 5, offset: 8813},
						run: (*parser).callonTailProc2,
						expr: &seqExpr{
							pos: position{line: 308, col: 5, offset: 8813},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 308, col: 5, offset: 8813},
									val:        "tail",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 308, col: 12, offset: 8820},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 308, col: 14, offset: 8822},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 308, col: 20, offset: 8828},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 309, col: 5, offset: 8908},
						run: (*parser).callonTailProc8,
						expr: &litMatcher{
							pos:        position{line: 309, col: 5, offset: 8908},
							val:        "tail",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "WhereProc",
			pos:  position{line: 311, col: 1, offset: 8983},
			expr: &actionExpr{
				pos: position{line: 312, col: 5, offset: 8997},
				run: (*parser).callonWhereProc1,
				expr: &seqExpr{
					pos: position{line: 312, col: 5, offset: 8997},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 312, col: 5, offset: 8997},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 312, col: 13, offset: 9005},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 312, col: 15, offset: 9007},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 312, col: 20, offset: 9012},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "UniqProc",
			pos:  position{line: 316, col: 1, offset: 9098},
			expr: &choiceExpr{
				pos: position{line: 317, col: 5, offset: 9111},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 317, col: 5, offset: 9111},
						run: (*parser).callonUniqProc2,
						expr: &seqExpr{
							pos: position{line: 317, col: 5, offset: 9111},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 317, col: 5, offset: 9111},
									val:        "uniq",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 317, col: 12, offset: 9118},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 317, col: 14, offset: 9120},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 320, col: 5, offset: 9209},
						run: (*parser).callonUniqProc7,
						expr: &litMatcher{
							pos:        position{line: 320, col: 5, offset: 9209},
							val:        "uniq",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PutProc",
			pos:  position{line: 324, col: 1, offset: 9298},
			expr: &actionExpr{
				pos: position{line: 325, col: 5, offset: 9310},
				run: (*parser).callonPutProc1,
				expr: &seqExpr{
					pos: position{line: 325, col: 5, offset: 9310},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 325, col: 5, offset: 9310},
							val:        "put",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 325, col: 11, offset: 9316},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 325, col: 13, offset: 9318},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 325, col: 18, offset: 9323},
								name: "Assignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameProc",
			pos:  position{line: 329, col: 1, offset: 9414},
			expr: &actionExpr{
				pos: position{line: 330, col: 5, offset: 9429},
				run: (*parser).callonRenameProc1,
				expr: &seqExpr{
					pos: position{line: 330, col: 5, offset: 9429},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 330, col: 5, offset: 9429},
							val:        "rename",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 330, col: 14, offset: 9438},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 330, col: 16, offset: 9440},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 330, col: 22, offset: 9446},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 330, col: 33, offset: 9457},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 330, col: 38, offset: 9462},
								expr: &actionExpr{
									pos: position{line: 330, col: 39, offset: 9463},
									run: (*parser).callonRenameProc9,
									expr: &seqExpr{
										pos: position{line: 330, col: 39, offset: 9463},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 330, col: 39, offset: 9463},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 330, col: 42, offset: 9466},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 330, col: 46, offset: 9470},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 330, col: 49, offset: 9473},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 330, col: 52, offset: 9476},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseProc",
			pos:  position{line: 338, col: 1, offset: 9885},
			expr: &actionExpr{
				pos: position{line: 339, col: 5, offset: 9898},
				run: (*parser).callonFuseProc1,
				expr: &seqExpr{
					pos: position{line: 339, col: 5, offset: 9898},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 339, col: 5, offset: 9898},
							val:        "fuse",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 339, col: 12, offset: 9905},
							expr: &seqExpr{
								pos: position{line: 339, col: 14, offset: 9907},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 339, col: 14, offset: 9907},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 339, col: 17, offset: 9910},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShapeProc",
			pos:  position{line: 343, col: 1, offset: 9981},
			expr: &actionExpr{
				pos: position{line: 344, col: 5, offset: 9995},
				run: (*parser).callonShapeProc1,
				expr: &seqExpr{
					pos: position{line: 344, col: 5, offset: 9995},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 344, col: 5, offset: 9995},
							val:        "shape",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 344, col: 13, offset: 10003},
							expr: &seqExpr{
								pos: position{line: 344, col: 15, offset: 10005},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 344, col: 15, offset: 10005},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 344, col: 18, offset: 10008},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinProc",
			pos:  position{line: 348, col: 1, offset: 10080},
			expr: &choiceExpr{
				pos: position{line: 349, col: 5, offset: 10093},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 349, col: 5, offset: 10093},
						run: (*parser).callonJoinProc2,
						expr: &seqExpr{
							pos: position{line: 349, col: 5, offset: 10093},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 349, col: 5, offset: 10093},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 349, col: 11, offset: 10099},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 349, col: 21, offset: 10109},
									val:        "join",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 349, col: 28, offset: 10116},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 349, col: 30, offset: 10118},
									name: "ON",
								},
								&ruleRefExpr{
									pos:  position{line: 349, col: 33, offset: 10121},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 349, col: 35, offset: 10123},
									label: "leftKey",
									expr: &ruleRefExpr{
										pos:  position{line: 349, col: 43, offset: 10131},
										name: "JoinKey",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 349, col: 51, offset: 10139},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 349, col: 54, offset: 10142},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 349, col: 58, offset: 10146},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 349, col: 61, offset: 10149},
									label: "rightKey",
									expr: &ruleRefExpr{
										pos:  position{line: 349, col: 70, offset: 10158},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 349, col: 78, offset: 10166},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 349, col: 86, offset: 10174},
										expr: &seqExpr{
											pos: position{line: 349, col: 87, offset: 10175},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 349, col: 87, offset: 10175},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 349, col: 89, offset: 10177},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 356, col: 5, offset: 10443},
						run: (*parser).callonJoinProc22,
						expr: &seqExpr{
							pos: position{line: 356, col: 5, offset: 10443},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 356, col: 5, offset: 10443},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 356, col: 11, offset: 10449},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 356, col: 22, offset: 10460},
									val:        "join",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 356, col: 29, offset: 10467},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 356, col: 31, offset: 10469},
									name: "ON",
								},
								&ruleRefExpr{
									pos:  position{line: 356, col: 34, offset: 10472},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 356, col: 36, offset: 10474},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 356, col: 40, offset: 10478},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 356, col: 48, offset: 10486},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 356, col: 56, offset: 10494},
										expr: &seqExpr{
											pos: position{line: 356, col: 57, offset: 10495},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 356, col: 57, offset: 10495},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 356, col: 59, offset: 10497},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinStyle",
			pos:  position{line: 364, col: 1, offset: 10751},
			expr: &choiceExpr{
				pos: position{line: 365, col: 5, offset: 10765},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 365, col: 5, offset: 10765},
						run: (*parser).callonJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 365, col: 5, offset: 10765},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 365, col: 5, offset: 10765},
									val:        "anti",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 365, col: 12, offset: 10772},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 366, col: 5, offset: 10802},
						run: (*parser).callonJoinStyle6,
						expr: &seqExpr{
							pos: position{line: 366, col: 5, offset: 10802},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 366, col: 5, offset: 10802},
									val:        "inner",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 366, col: 13, offset: 10810},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 367, col: 5, offset: 10840},
						run: (*parser).callonJoinStyle10,
						expr: &seqExpr{
							pos: position{line: 367, col: 5, offset: 10840},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 367, col: 5, offset: 10840},
									val:        "left",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 367, col: 13, offset: 10848},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 368, col: 5, offset: 10877},
						run: (*parser).callonJoinStyle14,
						expr: &seqExpr{
							pos: position{line: 368, col: 5, offset: 10877},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 368, col: 5, offset: 10877},
									val:        "right",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 368, col: 13, offset: 10885},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 369, col: 5, offset: 10915},
						run: (*parser).callonJoinStyle18,
						expr: &litMatcher{
							pos:        position{line: 369, col: 5, offset: 10915},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 371, col: 1, offset: 10951},
			expr: &choiceExpr{
				pos: position{line: 372, col: 5, offset: 10963},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 372, col: 5, offset: 10963},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 373, col: 5, offset: 10972},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 373, col: 5, offset: 10972},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 373, col: 5, offset: 10972},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 373, col: 9, offset: 10976},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 373, col: 14, offset: 10981},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 373, col: 19, offset: 10986},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SampleProc",
			pos:  position{line: 375, col: 1, offset: 11012},
			expr: &actionExpr{
				pos: position{line: 376, col: 5, offset: 11027},
				run: (*parser).callonSampleProc1,
				expr: &seqExpr{
					pos: position{line: 376, col: 5, offset: 11027},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 376, col: 5, offset: 11027},
							val:        "sample",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 376, col: 14, offset: 11036},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 376, col: 16, offset: 11038},
								name: "SampleExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "OpAssignment",
			pos:  position{line: 418, col: 1, offset: 12532},
			expr: &actionExpr{
				pos: position{line: 419, col: 5, offset: 12549},
				run: (*parser).callonOpAssignment1,
				expr: &labeledExpr{
					pos:   position{line: 419, col: 5, offset: 12549},
					label: "a",
					expr: &ruleRefExpr{
						pos:  position{line: 419, col: 7, offset: 12551},
						name: "Assignments",
					},
				},
			},
		},
		{
			name: "SampleExpr",
			pos:  position{line: 423, col: 1, offset: 12651},
			expr: &choiceExpr{
				pos: position{line: 424, col: 5, offset: 12666},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 424, col: 5, offset: 12666},
						run: (*parser).callonSampleExpr2,
						expr: &seqExpr{
							pos: position{line: 424, col: 5, offset: 12666},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 424, col: 5, offset: 12666},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 424, col: 7, offset: 12668},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 424, col: 12, offset: 12673},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 425, col: 5, offset: 12702},
						run: (*parser).callonSampleExpr7,
						expr: &litMatcher{
							pos:        position{line: 425, col: 5, offset: 12702},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromProc",
			pos:  position{line: 427, col: 1, offset: 12773},
			expr: &actionExpr{
				pos: position{line: 428, col: 5, offset: 12786},
				run: (*parser).callonFromProc1,
				expr: &labeledExpr{
					pos:   position{line: 428, col: 5, offset: 12786},
					label: "source",
					expr: &ruleRefExpr{
						pos:  position{line: 428, col: 12, offset: 12793},
						name: "FromAny",
					},
				},
			},
		},
		{
			name: "FromAny",
			pos:  position{line: 432, col: 1, offset: 12949},
			expr: &choiceExpr{
				pos: position{line: 433, col: 5, offset: 12961},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 433, col: 5, offset: 12961},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 434, col: 5, offset: 12970},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 435, col: 5, offset: 12978},
						name: "From",
					},
				},
			},
		},
		{
			name: "File",
			pos:  position{line: 437, col: 1, offset: 12984},
			expr: &actionExpr{
				pos: position{line: 438, col: 5, offset: 12993},
				run: (*parser).callonFile1,
				expr: &seqExpr{
					pos: position{line: 438, col: 5, offset: 12993},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 438, col: 5, offset: 12993},
							val:        "file",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 438, col: 12, offset: 13000},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 438, col: 14, offset: 13002},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 438, col: 19, offset: 13007},
								name: "Path",
							},
						},
						&labeledExpr{
							pos:   position{line: 438, col: 24, offset: 13012},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 438, col: 31, offset: 13019},
								expr: &ruleRefExpr{
									pos:  position{line: 438, col: 31, offset: 13019},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 438, col: 42, offset: 13030},
							label: "layout",
							expr: &zeroOrOneExpr{
								pos: position{line: 438, col: 49, offset: 13037},
								expr: &ruleRefExpr{
									pos:  position{line: 438, col: 49, offset: 13037},
									name: "LayoutArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "From",
			pos:  position{line: 442, col: 1, offset: 13166},
			expr: &actionExpr{
				pos: position{line: 443, col: 5, offset: 13175},
				run: (*parser).callonFrom1,
				expr: &seqExpr{
					pos: position{line: 443, col: 5, offset: 13175},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 443, col: 5, offset: 13175},
							val:        "from",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 443, col: 12, offset: 13182},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 443, col: 14, offset: 13184},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 443, col: 19, offset: 13189},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "Pool",
			pos:  position{line: 445, col: 1, offset: 13220},
			expr: &actionExpr{
				pos: position{line: 446, col: 5, offset: 13229},
				run: (*parser).callonPool1,
				expr: &seqExpr{
					pos: position{line: 446, col: 5, offset: 13229},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 446, col: 5, offset: 13229},
							val:        "pool",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 446, col: 12, offset: 13236},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 446, col: 14, offset: 13238},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 446, col: 19, offset: 13243},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolBody",
			pos:  position{line: 448, col: 1, offset: 13274},
			expr: &actionExpr{
				pos: position{line: 449, col: 5, offset: 13287},
				run: (*parser).callonPoolBody1,
				expr: &seqExpr{
					pos: position{line: 449, col: 5, offset: 13287},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 449, col: 5, offset: 13287},
							label: "spec",
							expr: &ruleRefExpr{
								pos:  position{line: 449, col: 10, offset: 13292},
								name: "PoolSpec",
							},
						},
						&labeledExpr{
							pos:   position{line: 449, col: 19, offset: 13301},
							label: "at",
							expr: &zeroOrOneExpr{
								pos: position{line: 449, col: 22, offset: 13304},
								expr: &ruleRefExpr{
									pos:  position{line: 449, col: 22, offset: 13304},
									name: "PoolAt",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 449, col: 30, offset: 13312},
							label: "over",
							expr: &zeroOrOneExpr{
								pos: position{line: 449, col: 35, offset: 13317},
								expr: &ruleRefExpr{
									pos:  position{line: 449, col: 35, offset: 13317},
									name: "PoolRange",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 449, col: 46, offset: 13328},
							label: "order",
							expr: &zeroOrOneExpr{
								pos: position{line: 449, col: 52, offset: 13334},
								expr: &ruleRefExpr{
									pos:  position{line: 449, col: 52, offset: 13334},
									name: "OrderArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Get",
			pos:  position{line: 453, col: 1, offset: 13470},
			expr: &actionExpr{
				pos: position{line: 454, col: 5, offset: 13478},
				run: (*parser).callonGet1,
				expr: &seqExpr{
					pos: position{line: 454, col: 5, offset: 13478},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 454, col: 5, offset: 13478},
							val:        "get",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 454, col: 11, offset: 13484},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 454, col: 13, offset: 13486},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 454, col: 17, offset: 13490},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 454, col: 21, offset: 13494},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 454, col: 28, offset: 13501},
								expr: &ruleRefExpr{
									pos:  position{line: 454, col: 28, offset: 13501},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 454, col: 39, offset: 13512},
							label: "layout",
							expr: &zeroOrOneExpr{
								pos: position{line: 454, col: 46, offset: 13519},
								expr: &ruleRefExpr{
									pos:  position{line: 454, col: 46, offset: 13519},
									name: "LayoutArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 458, col: 1, offset: 13645},
			expr: &actionExpr{
				pos: position{line: 458, col: 7, offset: 13651},
				run: (*parser).callonURL1,
				expr: &seqExpr{
					pos: position{line: 458, col: 7, offset: 13651},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 458, col: 8, offset: 13652},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 458, col: 8, offset: 13652},
									val:        "http:",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 458, col: 18, offset: 13662},
									val:        "https:",
									ignoreCase: false,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 458, col: 28, offset: 13672},
							name: "Path",
						},
					},
				},
			},
		},
		{
			name: "Path",
			pos:  position{line: 460, col: 1, offset: 13709},
			expr: &choiceExpr{
				pos: position{line: 461, col: 5, offset: 13718},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 461, col: 5, offset: 13718},
						run: (*parser).callonPath2,
						expr: &labeledExpr{
							pos:   position{line: 461, col: 5, offset: 13718},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 461, col: 7, offset: 13720},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 462, col: 5, offset: 13755},
						run: (*parser).callonPath5,
						expr: &oneOrMoreExpr{
							pos: position{line: 462, col: 5, offset: 13755},
							expr: &charClassMatcher{
								pos:        position{line: 462, col: 5, offset: 13755},
								val:        "[0-9a-zA-Z!@$%^&*()_=<>,./?:[\\]{}~|+-]",
								chars:      []rune{'!', '@', '$', '%', '^', '&', '*', '(', ')', '_', '=', '<', '>', ',', '.', '/', '?', ':', '[', ']', '{', '}', '~', '|', '+', '-'},
								ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PoolAt",
			pos:  position{line: 465, col: 1, offset: 13860},
			expr: &actionExpr{
				pos: position{line: 466, col: 5, offset: 13871},
				run: (*parser).callonPoolAt1,
				expr: &seqExpr{
					pos: position{line: 466, col: 5, offset: 13871},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 466, col: 5, offset: 13871},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 466, col: 7, offset: 13873},
							val:        "at",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 466, col: 12, offset: 13878},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 466, col: 14, offset: 13880},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 466, col: 17, offset: 13883},
								name: "KSUID",
							},
						},
					},
				},
			},
		},
		{
			name: "KSUID",
			pos:  position{line: 469, col: 1, offset: 13949},
			expr: &actionExpr{
				pos: position{line: 469, col: 9, offset: 13957},
				run: (*parser).callonKSUID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 469, col: 9, offset: 13957},
					expr: &charClassMatcher{
						pos:        position{line: 469, col: 10, offset: 13958},
						val:        "[0-9a-zA-Z]",
						ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "PoolRange",
			pos:  position{line: 471, col: 1, offset: 14004},
			expr: &actionExpr{
				pos: position{line: 472, col: 5, offset: 14018},
				run: (*parser).callonPoolRange1,
				expr: &seqExpr{
					pos: position{line: 472, col: 5, offset: 14018},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 472, col: 5, offset: 14018},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 472, col: 7, offset: 14020},
							val:        "range",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 472, col: 15, offset: 14028},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 472, col: 17, offset: 14030},
							label: "lower",
							expr: &ruleRefExpr{
								pos:  position{line: 472, col: 23, offset: 14036},
								name: "Literal",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 472, col: 31, offset: 14044},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 472, col: 33, offset: 14046},
							val:        "to",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 472, col: 38, offset: 14051},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 472, col: 40, offset: 14053},
							label: "upper",
							expr: &ruleRefExpr{
								pos:  position{line: 472, col: 46, offset: 14059},
								name: "Literal",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolSpec",
			pos:  position{line: 476, col: 1, offset: 14164},
			expr: &choiceExpr{
				pos: position{line: 477, col: 5, offset: 14177},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 477, col: 5, offset: 14177},
						run: (*parser).callonPoolSpec2,
						expr: &seqExpr{
							pos: position{line: 477, col: 5, offset: 14177},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 477, col: 5, offset: 14177},
									label: "pool",
									expr: &ruleRefExpr{
										pos:  position{line: 477, col: 10, offset: 14182},
										name: "PoolName",
									},
								},
								&labeledExpr{
									pos:   position{line: 477, col: 19, offset: 14191},
									label: "commit",
									expr: &zeroOrOneExpr{
										pos: position{line: 477, col: 26, offset: 14198},
										expr: &ruleRefExpr{
											pos:  position{line: 477, col: 26, offset: 14198},
											name: "PoolCommit",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 477, col: 38, offset: 14210},
									label: "meta",
									expr: &zeroOrOneExpr{
										pos: position{line: 477, col: 43, offset: 14215},
										expr: &ruleRefExpr{
											pos:  position{line: 477, col: 43, offset: 14215},
											name: "PoolMeta",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 480, col: 5, offset: 14324},
						run: (*parser).callonPoolSpec12,
						expr: &labeledExpr{
							pos:   position{line: 480, col: 5, offset: 14324},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 480, col: 10, offset: 14329},
								name: "PoolMeta",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolCommit",
			pos:  position{line: 484, col: 1, offset: 14430},
			expr: &actionExpr{
				pos: position{line: 485, col: 5, offset: 14445},
				run: (*parser).callonPoolCommit1,
				expr: &seqExpr{
					pos: position{line: 485, col: 5, offset: 14445},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 485, col: 5, offset: 14445},
							val:        "@",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 485, col: 9, offset: 14449},
							label: "commit",
							expr: &ruleRefExpr{
								pos:  position{line: 485, col: 16, offset: 14456},
								name: "PoolName",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolMeta",
			pos:  position{line: 487, col: 1, offset: 14489},
			expr: &actionExpr{
				pos: position{line: 488, col: 5, offset: 14502},
				run: (*parser).callonPoolMeta1,
				expr: &seqExpr{
					pos: position{line: 488, col: 5, offset: 14502},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 488, col: 5, offset: 14502},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 488, col: 9, offset: 14506},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 488, col: 14, offset: 14511},
								name: "PoolIdentifier",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolName",
			pos:  position{line: 490, col: 1, offset: 14548},
			expr: &choiceExpr{
				pos: position{line: 491, col: 5, offset: 14561},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 491, col: 5, offset: 14561},
						name: "PoolIdentifier",
					},
					&ruleRefExpr{
						pos:  position{line: 492, col: 5, offset: 14580},
						name: "KSUID",
					},
					&ruleRefExpr{
						pos:  position{line: 493, col: 5, offset: 14590},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "PoolIdentifier",
			pos:  position{line: 495, col: 1, offset: 14604},
			expr: &actionExpr{
				pos: position{line: 496, col: 5, offset: 14623},
				run: (*parser).callonPoolIdentifier1,
				expr: &seqExpr{
					pos: position{line: 496, col: 5, offset: 14623},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 496, col: 6, offset: 14624},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 496, col: 6, offset: 14624},
									name: "IdentifierStart",
								},
								&litMatcher{
									pos:        position{line: 496, col: 24, offset: 14642},
									val:        ".",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 496, col: 29, offset: 14647},
							expr: &choiceExpr{
								pos: position{line: 496, col: 30, offset: 14648},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 496, col: 30, offset: 14648},
										name: "IdentifierRest",
									},
									&litMatcher{
										pos:        position{line: 496, col: 47, offset: 14665},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LayoutArg",
			pos:  position{line: 498, col: 1, offset: 14704},
			expr: &actionExpr{
				pos: position{line: 499, col: 5, offset: 14718},
				run: (*parser).callonLayoutArg1,
				expr: &seqExpr{
					pos: position{line: 499, col: 5, offset: 14718},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 499, col: 5, offset: 14718},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 499, col: 7, offset: 14720},
							val:        "order",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 499, col: 15, offset: 14728},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 499, col: 17, offset: 14730},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 499, col: 22, offset: 14735},
								name: "FieldExprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 499, col: 33, offset: 14746},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 499, col: 39, offset: 14752},
								name: "OrderSuffix",
							},
						},
					},
				},
			},
		},
		{
			name: "FormatArg",
			pos:  position{line: 503, col: 1, offset: 14862},
			expr: &actionExpr{
				pos: position{line: 504, col: 5, offset: 14876},
				run: (*parser).callonFormatArg1,
				expr: &seqExpr{
					pos: position{line: 504, col: 5, offset: 14876},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 504, col: 5, offset: 14876},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 504, col: 7, offset: 14878},
							val:        "format",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 504, col: 16, offset: 14887},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 504, col: 18, offset: 14889},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 504, col: 22, offset: 14893},
								name: "IdentifierName",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderSuffix",
			pos:  position{line: 506, col: 1, offset: 14929},
			expr: &choiceExpr{
				pos: position{line: 507, col: 5, offset: 14945},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 507, col: 5, offset: 14945},
						run: (*parser).callonOrderSuffix2,
						expr: &litMatcher{
							pos:        position{line: 507, col: 5, offset: 14945},
							val:        ":asc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 508, col: 5, offset: 14979},
						run: (*parser).callonOrderSuffix4,
						expr: &litMatcher{
							pos:        position{line: 508, col: 5, offset: 14979},
							val:        ":desc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 509, col: 5, offset: 15015},
						run: (*parser).callonOrderSuffix6,
						expr: &litMatcher{
							pos:        position{line: 509, col: 5, offset: 15015},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OrderArg",
			pos:  position{line: 511, col: 1, offset: 15041},
			expr: &choiceExpr{
				pos: position{line: 512, col: 5, offset: 15054},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 512, col: 5, offset: 15054},
						run: (*parser).callonOrderArg2,
						expr: &seqExpr{
							pos: position{line: 512, col: 5, offset: 15054},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 512, col: 5, offset: 15054},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 512, col: 7, offset: 15056},
									val:        "order",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 512, col: 15, offset: 15064},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 512, col: 17, offset: 15066},
									val:        "asc",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 513, col: 5, offset: 15099},
						run: (*parser).callonOrderArg8,
						expr: &seqExpr{
							pos: position{line: 513, col: 5, offset: 15099},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 513, col: 5, offset: 15099},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 513, col: 7, offset: 15101},
									val:        "order",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 513, col: 15, offset: 15109},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 513, col: 17, offset: 15111},
									val:        "desc",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassProc",
			pos:  position{line: 515, col: 1, offset: 15143},
			expr: &actionExpr{
				pos: position{line: 516, col: 5, offset: 15156},
				run: (*parser).callonPassProc1,
				expr: &litMatcher{
					pos:        position{line: 516, col: 5, offset: 15156},
					val:        "pass",
					ignoreCase: false,
				},
			},
		},
		{
			name: "ExplodeProc",
			pos:  position{line: 522, col: 1, offset: 15350},
			expr: &actionExpr{
				pos: position{line: 523, col: 5, offset: 15366},
				run: (*parser).callonExplodeProc1,
				expr: &seqExpr{
					pos: position{line: 523, col: 5, offset: 15366},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 523, col: 5, offset: 15366},
							val:        "explode",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 523, col: 15, offset: 15376},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 523, col: 17, offset: 15378},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 523, col: 22, offset: 15383},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 523, col: 28, offset: 15389},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 523, col: 32, offset: 15393},
								name: "TypeArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 523, col: 40, offset: 15401},
							label: "as",
							expr: &zeroOrOneExpr{
								pos: position{line: 523, col: 43, offset: 15404},
								expr: &ruleRefExpr{
									pos:  position{line: 523, col: 43, offset: 15404},
									name: "AsArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MergeProc",
			pos:  position{line: 527, col: 1, offset: 15516},
			expr: &actionExpr{
				pos: position{line: 528, col: 5, offset: 15530},
				run: (*parser).callonMergeProc1,
				expr: &seqExpr{
					pos: position{line: 528, col: 5, offset: 15530},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 528, col: 5, offset: 15530},
							val:        "merge",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 528, col: 13, offset: 15538},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 528, col: 15, offset: 15540},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 528, col: 21, offset: 15546},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "OverProc",
			pos:  position{line: 532, col: 1, offset: 15629},
			expr: &choiceExpr{
				pos: position{line: 533, col: 5, offset: 15642},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 533, col: 5, offset: 15642},
						run: (*parser).callonOverProc2,
						expr: &labeledExpr{
							pos:   position{line: 533, col: 5, offset: 15642},
							label: "over",
							expr: &ruleRefExpr{
								pos:  position{line: 533, col: 10, offset: 15647},
								name: "ScopedOver",
							},
						},
					},
					&actionExpr{
						pos: position{line: 536, col: 5, offset: 15752},
						run: (*parser).callonOverProc5,
						expr: &seqExpr{
							pos: position{line: 536, col: 5, offset: 15752},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 536, col: 5, offset: 15752},
									val:        "over",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 536, col: 12, offset: 15759},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 536, col: 14, offset: 15761},
									label: "exprs",
									expr: &ruleRefExpr{
										pos:  position{line: 536, col: 20, offset: 15767},
										name: "Exprs",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ScopedOver",
			pos:  position{line: 540, col: 1, offset: 15875},
			expr: &actionExpr{
				pos: position{line: 541, col: 5, offset: 15890},
				run: (*parser).callonScopedOver1,
				expr: &seqExpr{
					pos: position{line: 541, col: 5, offset: 15890},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 541, col: 5, offset: 15890},
							val:        "over",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 541, col: 12, offset: 15897},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 541, col: 14, offset: 15899},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 541, col: 20, offset: 15905},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 541, col: 26, offset: 15911},
							label: "as",
							expr: &ruleRefExpr{
								pos:  position{line: 541, col: 29, offset: 15914},
								name: "As",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 541, col: 32, offset: 15917},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 541, col: 35, offset: 15920},
							label: "scope",
							expr: &ruleRefExpr{
								pos:  position{line: 541, col: 41, offset: 15926},
								name: "Scope",
							},
						},
					},
				},
			},
		},
		{
			name: "OverWith",
			pos:  position{line: 545, col: 1, offset: 16036},
			expr: &actionExpr{
				pos: position{line: 546, col: 5, offset: 16049},
				run: (*parser).callonOverWith1,
				expr: &seqExpr{
					pos: position{line: 546, col: 5, offset: 16049},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 546, col: 5, offset: 16049},
							val:        "over",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 546, col: 12, offset: 16056},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 546, col: 14, offset: 16058},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 546, col: 20, offset: 16064},
								name: "Exprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 546, col: 26, offset: 16070},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 546, col: 28, offset: 16072},
							val:        "with",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 546, col: 35, offset: 16079},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 546, col: 37, offset: 16081},
							label: "locals",
							expr: &ruleRefExpr{
								pos:  position{line: 546, col: 44, offset: 16088},
								name: "LetAssignments",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 546, col: 59, offset: 16103},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 546, col: 62, offset: 16106},
							label: "scope",
							expr: &ruleRefExpr{
								pos:  position{line: 546, col: 68, offset: 16112},
								name: "Scope",
							},
						},
					},
				},
			},
		},
		{
			name: "As",
			pos:  position{line: 550, col: 1, offset: 16284},
			expr: &choiceExpr{
				pos: position{line: 551, col: 5, offset: 16291},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 551, col: 5, offset: 16291},
						run: (*parser).callonAs2,
						expr: &seqExpr{
							pos: position{line: 551, col: 5, offset: 16291},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 551, col: 5, offset: 16291},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 551, col: 7, offset: 16293},
									val:        "as",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 551, col: 12, offset: 16298},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 551, col: 14, offset: 16300},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 551, col: 17, offset: 16303},
										name: "IdentifierName",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 552, col: 5, offset: 16341},
						run: (*parser).callonAs9,
						expr: &litMatcher{
							pos:        position{line: 552, col: 5, offset: 16341},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LetProc",
			pos:  position{line: 554, col: 1, offset: 16364},
			expr: &choiceExpr{
				pos: position{line: 555, col: 5, offset: 16376},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 555, col: 5, offset: 16376},
						run: (*parser).callonLetProc2,
						expr: &seqExpr{
							pos: position{line: 555, col: 5, offset: 16376},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 555, col: 5, offset: 16376},
									val:        "let",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 555, col: 11, offset: 16382},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 555, col: 13, offset: 16384},
									label: "locals",
									expr: &ruleRefExpr{
										pos:  position{line: 555, col: 20, offset: 16391},
										name: "LetAssignments",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 555, col: 35, offset: 16406},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 555, col: 38, offset: 16409},
									label: "over",
									expr: &ruleRefExpr{
										pos:  position{line: 555, col: 43, offset: 16414},
										name: "ScopedOver",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 558, col: 5, offset: 16522},
						name: "OverWith",
					},
				},
			},
		},
		{
			name: "Scope",
			pos:  position{line: 560, col: 1, offset: 16532},
			expr: &actionExpr{
				pos: position{line: 560, col: 9, offset: 16540},
				run: (*parser).callonScope1,
				expr: &seqExpr{
					pos: position{line: 560, col: 9, offset: 16540},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 560, col: 9, offset: 16540},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 560, col: 14, offset: 16545},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 560, col: 17, offset: 16548},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 560, col: 21, offset: 16552},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 560, col: 24, offset: 16555},
							label: "seq",
							expr: &ruleRefExpr{
								pos:  position{line: 560, col: 28, offset: 16559},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 560, col: 39, offset: 16570},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 560, col: 42, offset: 16573},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LetAssignments",
			pos:  position{line: 562, col: 1, offset: 16598},
			expr: &actionExpr{
				pos: position{line: 563, col: 5, offset: 16617},
				run: (*parser).callonLetAssignments1,
				expr: &seqExpr{
					pos: position{line: 563, col: 5, offset: 16617},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 563, col: 5, offset: 16617},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 563, col: 11, offset: 16623},
								name: "LetAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 563, col: 25, offset: 16637},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 563, col: 30, offset: 16642},
								expr: &actionExpr{
									pos: position{line: 563, col: 31, offset: 16643},
									run: (*parser).callonLetAssignments7,
									expr: &seqExpr{
										pos: position{line: 563, col: 31, offset: 16643},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 563, col: 31, offset: 16643},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 563, col: 34, offset: 16646},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 563, col: 38, offset: 16650},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 563, col: 41, offset: 16653},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 563, col: 43, offset: 16655},
													name: "LetAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LetAssignment",
			pos:  position{line: 567, col: 1, offset: 16773},
			expr: &choiceExpr{
				pos: position{line: 568, col: 5, offset: 16791},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 568, col: 5, offset: 16791},
						run: (*parser).callonLetAssignment2,
						expr: &seqExpr{
							pos: position{line: 568, col: 5, offset: 16791},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 568, col: 5, offset: 16791},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 568, col: 8, offset: 16794},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 568, col: 23, offset: 16809},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 568, col: 26, offset: 16812},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 568, col: 30, offset: 16816},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 568, col: 33, offset: 16819},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 568, col: 38, offset: 16824},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 571, col: 5, offset: 16906},
						run: (*parser).callonLetAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 571, col: 5, offset: 16906},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 571, col: 8, offset: 16909},
								name: "IdentifierName",
							},
						},
					},
				},
			},
		},
		{
			name: "YieldProc",
			pos:  position{line: 575, col: 1, offset: 17039},
			expr: &actionExpr{
				pos: position{line: 576, col: 5, offset: 17053},
				run: (*parser).callonYieldProc1,
				expr: &seqExpr{
					pos: position{line: 576, col: 5, offset: 17053},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 576, col: 5, offset: 17053},
							val:        "yield",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 576, col: 13, offset: 17061},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 576, col: 15, offset: 17063},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 576, col: 21, offset: 17069},
								name: "Exprs",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeArg",
			pos:  position{line: 580, col: 1, offset: 17153},
			expr: &actionExpr{
				pos: position{line: 581, col: 5, offset: 17165},
				run: (*parser).callonTypeArg1,
				expr: &seqExpr{
					pos: position{line: 581, col: 5, offset: 17165},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 581, col: 5, offset: 17165},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 581, col: 7, offset: 17167},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 581, col: 10, offset: 17170},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 581, col: 12, offset: 17172},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 581, col: 16, offset: 17176},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "AsArg",
			pos:  position{line: 583, col: 1, offset: 17201},
			expr: &actionExpr{
				pos: position{line: 584, col: 5, offset: 17211},
				run: (*parser).callonAsArg1,
				expr: &seqExpr{
					pos: position{line: 584, col: 5, offset: 17211},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 584, col: 5, offset: 17211},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 584, col: 7, offset: 17213},
							name: "AS",
						},
						&ruleRefExpr{
							pos:  position{line: 584, col: 10, offset: 17216},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 584, col: 12, offset: 17218},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 584, col: 16, offset: 17222},
								name: "Lval",
							},
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 588, col: 1, offset: 17273},
			expr: &ruleRefExpr{
				pos:  position{line: 588, col: 8, offset: 17280},
				name: "DerefExpr",
			},
		},
		{
			name: "Lvals",
			pos:  position{line: 590, col: 1, offset: 17291},
			expr: &actionExpr{
				pos: position{line: 591, col: 5, offset: 17301},
				run: (*parser).callonLvals1,
				expr: &seqExpr{
					pos: position{line: 591, col: 5, offset: 17301},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 591, col: 5, offset: 17301},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 591, col: 11, offset: 17307},
								name: "Lval",
							},
						},
						&labeledExpr{
							pos:   position{line: 591, col: 16, offset: 17312},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 591, col: 21, offset: 17317},
								expr: &actionExpr{
									pos: position{line: 591, col: 22, offset: 17318},
									run: (*parser).callonLvals7,
									expr: &seqExpr{
										pos: position{line: 591, col: 22, offset: 17318},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 591, col: 22, offset: 17318},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 591, col: 25, offset: 17321},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 591, col: 29, offset: 17325},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 591, col: 32, offset: 17328},
												label: "lval",
												expr: &ruleRefExpr{
													pos:  position{line: 591, col: 37, offset: 17333},
													name: "Lval",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 595, col: 1, offset: 17445},
			expr: &ruleRefExpr{
				pos:  position{line: 595, col: 13, offset: 17457},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 597, col: 1, offset: 17463},
			expr: &actionExpr{
				pos: position{line: 598, col: 5, offset: 17478},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 598, col: 5, offset: 17478},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 598, col: 5, offset: 17478},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 598, col: 11, offset: 17484},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 598, col: 21, offset: 17494},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 598, col: 26, offset: 17499},
								expr: &seqExpr{
									pos: position{line: 598, col: 27, offset: 17500},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 598, col: 27, offset: 17500},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 598, col: 30, offset: 17503},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 598, col: 34, offset: 17507},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 598, col: 37, offset: 17510},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignments",
			pos:  position{line: 608, col: 1, offset: 17709},
			expr: &actionExpr{
				pos: position{line: 609, col: 5, offset: 17725},
				run: (*parser).callonAssignments1,
				expr: &seqExpr{
					pos: position{line: 609, col: 5, offset: 17725},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 609, col: 5, offset: 17725},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 609, col: 11, offset: 17731},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 609, col: 22, offset: 17742},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 609, col: 27, offset: 17747},
								expr: &actionExpr{
									pos: position{line: 609, col: 28, offset: 17748},
									run: (*parser).callonAssignments7,
									expr: &seqExpr{
										pos: position{line: 609, col: 28, offset: 17748},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 609, col: 28, offset: 17748},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 609, col: 31, offset: 17751},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 609, col: 35, offset: 17755},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 609, col: 38, offset: 17758},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 609, col: 40, offset: 17760},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 613, col: 1, offset: 17871},
			expr: &actionExpr{
				pos: position{line: 614, col: 5, offset: 17886},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 614, col: 5, offset: 17886},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 614, col: 5, offset: 17886},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 614, col: 9, offset: 17890},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 614, col: 14, offset: 17895},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 614, col: 17, offset: 17898},
							val:        ":=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 614, col: 22, offset: 17903},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 614, col: 25, offset: 17906},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 614, col: 29, offset: 17910},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 616, col: 1, offset: 18001},
			expr: &ruleRefExpr{
				pos:  position{line: 616, col: 8, offset: 18008},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 618, col: 1, offset: 18025},
			expr: &choiceExpr{
				pos: position{line: 619, col: 5, offset: 18045},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 619, col: 5, offset: 18045},
						run: (*parser).callonConditionalExpr2,
						expr: &seqExpr{
							pos: position{line: 619, col: 5, offset: 18045},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 619, col: 5, offset: 18045},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 619, col: 15, offset: 18055},
										name: "LogicalOrExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 619, col: 29, offset: 18069},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 619, col: 32, offset: 18072},
									val:        "?",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 619, col: 36, offset: 18076},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 619, col: 39, offset: 18079},
									label: "thenClause",
									expr: &ruleRefExpr{
										pos:  position{line: 619, col: 50, offset: 18090},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 619, col: 55, offset: 18095},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 619, col: 58, offset: 18098},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 619, col: 62, offset: 18102},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 619, col: 65, offset: 18105},
									label: "elseClause",
									expr: &ruleRefExpr{
										pos:  position{line: 619, col: 76, offset: 18116},
										name: "Expr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 622, col: 5, offset: 18256},
						name: "LogicalOrExpr",
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 624, col: 1, offset: 18271},
			expr: &actionExpr{
				pos: position{line: 625, col: 5, offset: 18289},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 625, col: 5, offset: 18289},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 625, col: 5, offset: 18289},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 625, col: 11, offset: 18295},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 626, col: 5, offset: 18314},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 626, col: 10, offset: 18319},
								expr: &actionExpr{
									pos: position{line: 626, col: 11, offset: 18320},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 626, col: 11, offset: 18320},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 626, col: 11, offset: 18320},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 626, col: 14, offset: 18323},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 626, col: 17, offset: 18326},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 626, col: 25, offset: 18334},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 626, col: 28, offset: 18337},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 626, col: 33, offset: 18342},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 630, col: 1, offset: 18460},
			expr: &actionExpr{
				pos: position{line: 631, col: 5, offset: 18479},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 631, col: 5, offset: 18479},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 631, col: 5, offset: 18479},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 631, col: 11, offset: 18485},
								name: "ComparisonExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 632, col: 5, offset: 18504},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 632, col: 10, offset: 18509},
								expr: &actionExpr{
									pos: position{line: 632, col: 11, offset: 18510},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 632, col: 11, offset: 18510},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 632, col: 11, offset: 18510},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 632, col: 14, offset: 18513},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 632, col: 17, offset: 18516},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 632, col: 26, offset: 18525},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 632, col: 29, offset: 18528},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 632, col: 34, offset: 18533},
													name: "ComparisonExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ComparisonExpr",
			pos:  position{line: 636, col: 1, offset: 18651},
			expr: &choiceExpr{
				pos: position{line: 637, col: 5, offset: 18670},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 637, col: 5, offset: 18670},
						run: (*parser).callonComparisonExpr2,
						expr: &seqExpr{
							pos: position{line: 637, col: 5, offset: 18670},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 637, col: 5, offset: 18670},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 637, col: 9, offset: 18674},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 637, col: 22, offset: 18687},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 637, col: 25, offset: 18690},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 637, col: 28, offset: 18693},
										name: "Comparator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 637, col: 39, offset: 18704},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 637, col: 42, offset: 18707},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 637, col: 46, offset: 18711},
										name: "AdditiveExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 640, col: 5, offset: 18835},
						run: (*parser).callonComparisonExpr12,
						expr: &seqExpr{
							pos: position{line: 640, col: 5, offset: 18835},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 640, col: 5, offset: 18835},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 640, col: 9, offset: 18839},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 640, col: 22, offset: 18852},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 640, col: 25, offset: 18855},
									val:        "~",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 640, col: 29, offset: 18859},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 640, col: 32, offset: 18862},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 640, col: 36, offset: 18866},
										name: "Regexp",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 643, col: 5, offset: 18985},
						name: "AdditiveExpr",
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 645, col: 1, offset: 18999},
			expr: &actionExpr{
				pos: position{line: 646, col: 5, offset: 19016},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 646, col: 5, offset: 19016},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 646, col: 5, offset: 19016},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 646, col: 11, offset: 19022},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 647, col: 5, offset: 19045},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 647, col: 10, offset: 19050},
								expr: &actionExpr{
									pos: position{line: 647, col: 11, offset: 19051},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 647, col: 11, offset: 19051},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 647, col: 11, offset: 19051},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 647, col: 14, offset: 19054},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 647, col: 17, offset: 19057},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 647, col: 34, offset: 19074},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 647, col: 37, offset: 19077},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 647, col: 42, offset: 19082},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 651, col: 1, offset: 19204},
			expr: &actionExpr{
				pos: position{line: 651, col: 20, offset: 19223},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 651, col: 21, offset: 19224},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 651, col: 21, offset: 19224},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 651, col: 27, offset: 19230},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 653, col: 1, offset: 19267},
			expr: &actionExpr{
				pos: position{line: 654, col: 5, offset: 19290},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 654, col: 5, offset: 19290},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 654, col: 5, offset: 19290},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 654, col: 11, offset: 19296},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 655, col: 5, offset: 19308},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 655, col: 10, offset: 19313},
								expr: &actionExpr{
									pos: position{line: 655, col: 11, offset: 19314},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 655, col: 11, offset: 19314},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 655, col: 11, offset: 19314},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 655, col: 14, offset: 19317},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 655, col: 17, offset: 19320},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 655, col: 40, offset: 19343},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 655, col: 43, offset: 19346},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 655, col: 48, offset: 19351},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 659, col: 1, offset: 19462},
			expr: &actionExpr{
				pos: position{line: 659, col: 26, offset: 19487},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 659, col: 27, offset: 19488},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 659, col: 27, offset: 19488},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 659, col: 33, offset: 19494},
							val:        "/",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 659, col: 39, offset: 19500},
							val:        "%",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 661, col: 1, offset: 19537},
			expr: &choiceExpr{
				pos: position{line: 662, col: 5, offset: 19549},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 662, col: 5, offset: 19549},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 662, col: 5, offset: 19549},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 662, col: 5, offset: 19549},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 662, col: 9, offset: 19553},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 662, col: 12, offset: 19556},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 662, col: 14, offset: 19558},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 665, col: 5, offset: 19667},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 667, col: 1, offset: 19677},
			expr: &choiceExpr{
				pos: position{line: 668, col: 5, offset: 19690},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 668, col: 5, offset: 19690},
						run: (*parser).callonFuncExpr2,
						expr: &seqExpr{
							pos: position{line: 668, col: 5, offset: 19690},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 668, col: 5, offset: 19690},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 668, col: 11, offset: 19696},
										name: "Cast",
									},
								},
								&labeledExpr{
									pos:   position{line: 668, col: 16, offset: 19701},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 668, col: 21, offset: 19706},
										expr: &ruleRefExpr{
											pos:  position{line: 668, col: 22, offset: 19707},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 671, col: 5, offset: 19778},
						run: (*parser).callonFuncExpr9,
						expr: &seqExpr{
							pos: position{line: 671, col: 5, offset: 19778},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 671, col: 5, offset: 19778},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 671, col: 11, offset: 19784},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 671, col: 20, offset: 19793},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 671, col: 25, offset: 19798},
										expr: &ruleRefExpr{
											pos:  position{line: 671, col: 26, offset: 19799},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 674, col: 5, offset: 19870},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 675, col: 5, offset: 19884},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FuncGuard",
			pos:  position{line: 677, col: 1, offset: 19893},
			expr: &seqExpr{
				pos: position{line: 677, col: 13, offset: 19905},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 677, col: 13, offset: 19905},
						name: "NotFuncs",
					},
					&ruleRefExpr{
						pos:  position{line: 677, col: 22, offset: 19914},
						name: "__",
					},
					&litMatcher{
						pos:        position{line: 677, col: 25, offset: 19917},
						val:        "(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "NotFuncs",
			pos:  position{line: 679, col: 1, offset: 19922},
			expr: &choiceExpr{
				pos: position{line: 680, col: 5, offset: 19935},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 680, col: 5, offset: 19935},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 681, col: 5, offset: 19945},
						val:        "select",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Cast",
			pos:  position{line: 683, col: 1, offset: 19955},
			expr: &actionExpr{
				pos: position{line: 684, col: 5, offset: 19964},
				run: (*parser).callonCast1,
				expr: &seqExpr{
					pos: position{line: 684, col: 5, offset: 19964},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 684, col: 5, offset: 19964},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 684, col: 9, offset: 19968},
								name: "CastType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 684, col: 18, offset: 19977},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 684, col: 21, offset: 19980},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 684, col: 25, offset: 19984},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 684, col: 28, offset: 19987},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 684, col: 33, offset: 19992},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 684, col: 38, offset: 19997},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 684, col: 41, offset: 20000},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 688, col: 1, offset: 20097},
			expr: &choiceExpr{
				pos: position{line: 689, col: 5, offset: 20110},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 689, col: 5, offset: 20110},
						name: "Grep",
					},
					&actionExpr{
						pos: position{line: 690, col: 5, offset: 20119},
						run: (*parser).callonFunction3,
						expr: &seqExpr{
							pos: position{line: 690, col: 5, offset: 20119},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 690, col: 5, offset: 20119},
									expr: &ruleRefExpr{
										pos:  position{line: 690, col: 6, offset: 20120},
										name: "FuncGuard",
									},
								},
								&labeledExpr{
									pos:   position{line: 690, col: 16, offset: 20130},
									label: "fn",
									expr: &ruleRefExpr{
										pos:  position{line: 690, col: 19, offset: 20133},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 690, col: 34, offset: 20148},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 690, col: 37, offset: 20151},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 690, col: 41, offset: 20155},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 690, col: 44, offset: 20158},
									label: "args",
									expr: &ruleRefExpr{
										pos:  position{line: 690, col: 49, offset: 20163},
										name: "OptionalExprs",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 690, col: 63, offset: 20177},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 690, col: 66, offset: 20180},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 690, col: 70, offset: 20184},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 690, col: 76, offset: 20190},
										expr: &ruleRefExpr{
											pos:  position{line: 690, col: 76, offset: 20190},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Grep",
			pos:  position{line: 694, col: 1, offset: 20311},
			expr: &choiceExpr{
				pos: position{line: 695, col: 5, offset: 20320},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 695, col: 5, offset: 20320},
						run: (*parser).callonGrep2,
						expr: &seqExpr{
							pos: position{line: 695, col: 5, offset: 20320},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 695, col: 5, offset: 20320},
									val:        "grep",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 695, col: 12, offset: 20327},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 695, col: 15, offset: 20330},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 695, col: 19, offset: 20334},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 695, col: 22, offset: 20337},
									label: "pattern",
									expr: &ruleRefExpr{
										pos:  position{line: 695, col: 30, offset: 20345},
										name: "Pattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 695, col: 38, offset: 20353},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 695, col: 41, offset: 20356},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 698, col: 5, offset: 20511},
						run: (*parser).callonGrep12,
						expr: &seqExpr{
							pos: position{line: 698, col: 5, offset: 20511},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 698, col: 5, offset: 20511},
									val:        "grep",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 698, col: 12, offset: 20518},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 698, col: 15, offset: 20521},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 698, col: 19, offset: 20525},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 698, col: 22, offset: 20528},
									label: "pattern",
									expr: &ruleRefExpr{
										pos:  position{line: 698, col: 30, offset: 20536},
										name: "Pattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 698, col: 38, offset: 20544},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 698, col: 42, offset: 20548},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 698, col: 46, offset: 20552},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 698, col: 49, offset: 20555},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 698, col: 54, offset: 20560},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 698, col: 59, offset: 20565},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 698, col: 62, offset: 20568},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Pattern",
			pos:  position{line: 702, col: 1, offset: 20672},
			expr: &choiceExpr{
				pos: position{line: 703, col: 5, offset: 20684},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 703, col: 5, offset: 20684},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 704, col: 5, offset: 20695},
						name: "Glob",
					},
					&actionExpr{
						pos: position{line: 705, col: 5, offset: 20704},
						run: (*parser).callonPattern4,
						expr: &labeledExpr{
							pos:   position{line: 705, col: 5, offset: 20704},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 705, col: 7, offset: 20706},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "OptionalExprs",
			pos:  position{line: 709, col: 1, offset: 20798},
			expr: &choiceExpr{
				pos: position{line: 710, col: 5, offset: 20816},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 710, col: 5, offset: 20816},
						name: "Exprs",
					},
					&actionExpr{
						pos: position{line: 711, col: 5, offset: 20826},
						run: (*parser).callonOptionalExprs3,
						expr: &ruleRefExpr{
							pos:  position{line: 711, col: 5, offset: 20826},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 713, col: 1, offset: 20862},
			expr: &actionExpr{
				pos: position{line: 714, col: 5, offset: 20872},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 714, col: 5, offset: 20872},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 714, col: 5, offset: 20872},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 714, col: 11, offset: 20878},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 714, col: 16, offset: 20883},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 714, col: 21, offset: 20888},
								expr: &actionExpr{
									pos: position{line: 714, col: 22, offset: 20889},
									run: (*parser).callonExprs7,
									expr: &seqExpr{
										pos: position{line: 714, col: 22, offset: 20889},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 714, col: 22, offset: 20889},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 714, col: 25, offset: 20892},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 714, col: 29, offset: 20896},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 714, col: 32, offset: 20899},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 714, col: 34, offset: 20901},
													name: "Expr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 718, col: 1, offset: 21010},
			expr: &actionExpr{
				pos: position{line: 719, col: 5, offset: 21024},
				run: (*parser).callonDerefExpr1,
				expr: &seqExpr{
					pos: position{line: 719, col: 5, offset: 21024},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 719, col: 5, offset: 21024},
							expr: &ruleRefExpr{
								pos:  position{line: 719, col: 6, offset: 21025},
								name: "IP6",
							},
						},
						&labeledExpr{
							pos:   position{line: 719, col: 10, offset: 21029},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 719, col: 16, offset: 21035},
								name: "Identifier",
							},
						},
						&labeledExpr{
							pos:   position{line: 719, col: 27, offset: 21046},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 719, col: 32, offset: 21051},
								expr: &ruleRefExpr{
									pos:  position{line: 719, col: 33, offset: 21052},
									name: "Deref",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 723, col: 1, offset: 21120},
			expr: &choiceExpr{
				pos: position{line: 724, col: 5, offset: 21130},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 724, col: 5, offset: 21130},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 724, col: 5, offset: 21130},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 724, col: 5, offset: 21130},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 724, col: 9, offset: 21134},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 724, col: 14, offset: 21139},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 724, col: 27, offset: 21152},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 724, col: 30, offset: 21155},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 724, col: 34, offset: 21159},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 724, col: 37, offset: 21162},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 724, col: 40, offset: 21165},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 724, col: 53, offset: 21178},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 730, col: 5, offset: 21349},
						run: (*parser).callonDeref13,
						expr: &seqExpr{
							pos: position{line: 730, col: 5, offset: 21349},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 730, col: 5, offset: 21349},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 730, col: 9, offset: 21353},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 730, col: 12, offset: 21356},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 730, col: 16, offset: 21360},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 730, col: 19, offset: 21363},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 730, col: 22, offset: 21366},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 730, col: 35, offset: 21379},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 736, col: 5, offset: 21550},
						run: (*parser).callonDeref22,
						expr: &seqExpr{
							pos: position{line: 736, col: 5, offset: 21550},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 736, col: 5, offset: 21550},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 736, col: 9, offset: 21554},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 736, col: 14, offset: 21559},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 736, col: 27, offset: 21572},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 736, col: 30, offset: 21575},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 736, col: 34, offset: 21579},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 736, col: 37, offset: 21582},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 742, col: 5, offset: 21755},
						run: (*parser).callonDeref31,
						expr: &seqExpr{
							pos: position{line: 742, col: 5, offset: 21755},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 742, col: 5, offset: 21755},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 742, col: 9, offset: 21759},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 742, col: 14, offset: 21764},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 742, col: 19, offset: 21769},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 743, col: 5, offset: 21818},
						run: (*parser).callonDeref37,
						expr: &seqExpr{
							pos: position{line: 743, col: 5, offset: 21818},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 743, col: 5, offset: 21818},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 743, col: 9, offset: 21822},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 743, col: 12, offset: 21825},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 745, col: 1, offset: 21876},
			expr: &choiceExpr{
				pos: position{line: 746, col: 5, offset: 21888},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 746, col: 5, offset: 21888},
						name: "Record",
					},
					&ruleRefExpr{
						pos:  position{line: 747, col: 5, offset: 21899},
						name: "Array",
					},
					&ruleRefExpr{
						pos:  position{line: 748, col: 5, offset: 21909},
						name: "Set",
					},
					&ruleRefExpr{
						pos:  position{line: 749, col: 5, offset: 21917},
						name: "Map",
					},
					&ruleRefExpr{
						pos:  position{line: 750, col: 5, offset: 21925},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 751, col: 5, offset: 21937},
						run: (*parser).callonPrimary7,
						expr: &seqExpr{
							pos: position{line: 751, col: 5, offset: 21937},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 751, col: 5, offset: 21937},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 751, col: 9, offset: 21941},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 751, col: 12, offset: 21944},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 751, col: 17, offset: 21949},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 751, col: 22, offset: 21954},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 751, col: 25, offset: 21957},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Record",
			pos:  position{line: 753, col: 1, offset: 21983},
			expr: &actionExpr{
				pos: position{line: 754, col: 5, offset: 21994},
				run: (*parser).callonRecord1,
				expr: &seqExpr{
					pos: position{line: 754, col: 5, offset: 21994},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 754, col: 5, offset: 21994},
							val:        "{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 754, col: 9, offset: 21998},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 754, col: 12, offset: 22001},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 754, col: 18, offset: 22007},
								name: "RecordElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 754, col: 30, offset: 22019},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 754, col: 33, offset: 22022},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RecordElems",
			pos:  position{line: 758, col: 1, offset: 22112},
			expr: &choiceExpr{
				pos: position{line: 759, col: 5, offset: 22128},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 759, col: 5, offset: 22128},
						run: (*parser).callonRecordElems2,
						expr: &seqExpr{
							pos: position{line: 759, col: 5, offset: 22128},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 759, col: 5, offset: 22128},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 759, col: 11, offset: 22134},
										name: "RecordElem",
									},
								},
								&labeledExpr{
									pos:   position{line: 759, col: 22, offset: 22145},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 759, col: 27, offset: 22150},
										expr: &ruleRefExpr{
											pos:  position{line: 759, col: 27, offset: 22150},
											name: "RecordElemTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 762, col: 5, offset: 22249},
						run: (*parser).callonRecordElems9,
						expr: &ruleRefExpr{
							pos:  position{line: 762, col: 5, offset: 22249},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "RecordElemTail",
			pos:  position{line: 764, col: 1, offset: 22285},
			expr: &actionExpr{
				pos: position{line: 764, col: 18, offset: 22302},
				run: (*parser).callonRecordElemTail1,
				expr: &seqExpr{
					pos: position{line: 764, col: 18, offset: 22302},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 764, col: 18, offset: 22302},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 764, col: 21, offset: 22305},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 764, col: 25, offset: 22309},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 764, col: 28, offset: 22312},
							label: "elem",
							expr: &ruleRefExpr{
								pos:  position{line: 764, col: 33, offset: 22317},
								name: "RecordElem",
							},
						},
					},
				},
			},
		},
		{
			name: "RecordElem",
			pos:  position{line: 766, col: 1, offset: 22350},
			expr: &choiceExpr{
				pos: position{line: 767, col: 5, offset: 22365},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 767, col: 5, offset: 22365},
						name: "Spread",
					},
					&ruleRefExpr{
						pos:  position{line: 768, col: 5, offset: 22376},
						name: "Field",
					},
					&ruleRefExpr{
						pos:  position{line: 769, col: 5, offset: 22386},
						name: "Identifier",
					},
				},
			},
		},
		{
			name: "Spread",
			pos:  position{line: 771, col: 1, offset: 22398},
			expr: &actionExpr{
				pos: position{line: 772, col: 5, offset: 22409},
				run: (*parser).callonSpread1,
				expr: &seqExpr{
					pos: position{line: 772, col: 5, offset: 22409},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 772, col: 5, offset: 22409},
							val:        "...",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 772, col: 11, offset: 22415},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 772, col: 14, offset: 22418},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 772, col: 19, offset: 22423},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 776, col: 1, offset: 22509},
			expr: &actionExpr{
				pos: position{line: 777, col: 5, offset: 22519},
				run: (*parser).callonField1,
				expr: &seqExpr{
					pos: position{line: 777, col: 5, offset: 22519},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 777, col: 5, offset: 22519},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 777, col: 10, offset: 22524},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 777, col: 20, offset: 22534},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 777, col: 23, offset: 22537},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 777, col: 27, offset: 22541},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 777, col: 30, offset: 22544},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 777, col: 36, offset: 22550},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Array",
			pos:  position{line: 781, col: 1, offset: 22650},
			expr: &actionExpr{
				pos: position{line: 782, col: 5, offset: 22660},
				run: (*parser).callonArray1,
				expr: &seqExpr{
					pos: position{line: 782, col: 5, offset: 22660},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 782, col: 5, offset: 22660},
							val:        "[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 782, col: 9, offset: 22664},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 782, col: 12, offset: 22667},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 782, col: 18, offset: 22673},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 782, col: 32, offset: 22687},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 782, col: 35, offset: 22690},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Set",
			pos:  position{line: 786, col: 1, offset: 22780},
			expr: &actionExpr{
				pos: position{line: 787, col: 5, offset: 22788},
				run: (*parser).callonSet1,
				expr: &seqExpr{
					pos: position{line: 787, col: 5, offset: 22788},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 787, col: 5, offset: 22788},
							val:        "|[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 787, col: 10, offset: 22793},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 787, col: 13, offset: 22796},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 787, col: 19, offset: 22802},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 787, col: 33, offset: 22816},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 787, col: 36, offset: 22819},
							val:        "]|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Map",
			pos:  position{line: 791, col: 1, offset: 22908},
			expr: &actionExpr{
				pos: position{line: 792, col: 5, offset: 22916},
				run: (*parser).callonMap1,
				expr: &seqExpr{
					pos: position{line: 792, col: 5, offset: 22916},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 792, col: 5, offset: 22916},
							val:        "|{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 792, col: 10, offset: 22921},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 792, col: 13, offset: 22924},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 792, col: 19, offset: 22930},
								name: "Entries",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 792, col: 27, offset: 22938},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 792, col: 30, offset: 22941},
							val:        "}|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Entries",
			pos:  position{line: 796, col: 1, offset: 23032},
			expr: &choiceExpr{
				pos: position{line: 797, col: 5, offset: 23044},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 797, col: 5, offset: 23044},
						run: (*parser).callonEntries2,
						expr: &seqExpr{
							pos: position{line: 797, col: 5, offset: 23044},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 797, col: 5, offset: 23044},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 797, col: 11, offset: 23050},
										name: "Entry",
									},
								},
								&labeledExpr{
									pos:   position{line: 797, col: 17, offset: 23056},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 797, col: 22, offset: 23061},
										expr: &ruleRefExpr{
											pos:  position{line: 797, col: 22, offset: 23061},
											name: "EntryTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 800, col: 5, offset: 23155},
						run: (*parser).callonEntries9,
						expr: &ruleRefExpr{
							pos:  position{line: 800, col: 5, offset: 23155},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "EntryTail",
			pos:  position{line: 803, col: 1, offset: 23192},
			expr: &actionExpr{
				pos: position{line: 803, col: 13, offset: 23204},
				run: (*parser).callonEntryTail1,
				expr: &seqExpr{
					pos: position{line: 803, col: 13, offset: 23204},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 803, col: 13, offset: 23204},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 803, col: 16, offset: 23207},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 803, col: 20, offset: 23211},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 803, col: 23, offset: 23214},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 803, col: 25, offset: 23216},
								name: "Entry",
							},
						},
					},
				},
			},
		},
		{
			name: "Entry",
			pos:  position{line: 805, col: 1, offset: 23241},
			expr: &actionExpr{
				pos: position{line: 806, col: 5, offset: 23251},
				run: (*parser).callonEntry1,
				expr: &seqExpr{
					pos: position{line: 806, col: 5, offset: 23251},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 806, col: 5, offset: 23251},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 806, col: 9, offset: 23255},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 806, col: 14, offset: 23260},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 806, col: 17, offset: 23263},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 806, col: 21, offset: 23267},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 806, col: 24, offset: 23270},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 806, col: 30, offset: 23276},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLProc",
			pos:  position{line: 812, col: 1, offset: 23383},
			expr: &actionExpr{
				pos: position{line: 813, col: 5, offset: 23395},
				run: (*parser).callonSQLProc1,
				expr: &seqExpr{
					pos: position{line: 813, col: 5, offset: 23395},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 813, col: 5, offset: 23395},
							label: "selection",
							expr: &ruleRefExpr{
								pos:  position{line: 813, col: 15, offset: 23405},
								name: "SQLSelect",
							},
						},
						&labeledExpr{
							pos:   position{line: 814, col: 5, offset: 23419},
							label: "from",
							expr: &zeroOrOneExpr{
								pos: position{line: 814, col: 10, offset: 23424},
								expr: &ruleRefExpr{
									pos:  position{line: 814, col: 10, offset: 23424},
									name: "SQLFrom",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 815, col: 5, offset: 23437},
							label: "joins",
							expr: &zeroOrOneExpr{
								pos: position{line: 815, col: 11, offset: 23443},
								expr: &ruleRefExpr{
									pos:  position{line: 815, col: 11, offset: 23443},
									name: "SQLJoins",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 816, col: 5, offset: 23457},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 816, col: 11, offset: 23463},
								expr: &ruleRefExpr{
									pos:  position{line: 816, col: 11, offset: 23463},
									name: "SQLWhere",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 817, col: 5, offset: 23477},
							label: "groupby",
							expr: &zeroOrOneExpr{
								pos: position{line: 817, col: 13, offset: 23485},
								expr: &ruleRefExpr{
									pos:  position{line: 817, col: 13, offset: 23485},
									name: "SQLGroupBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 818, col: 5, offset: 23501},
							label: "having",
							expr: &zeroOrOneExpr{
								pos: position{line: 818, col: 12, offset: 23508},
								expr: &ruleRefExpr{
									pos:  position{line: 818, col: 12, offset: 23508},
									name: "SQLHaving",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 819, col: 5, offset: 23523},
							label: "orderby",
							expr: &zeroOrOneExpr{
								pos: position{line: 819, col: 13, offset: 23531},
								expr: &ruleRefExpr{
									pos:  position{line: 819, col: 13, offset: 23531},
									name: "SQLOrderBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 820, col: 5, offset: 23547},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 820, col: 11, offset: 23553},
								name: "SQLLimit",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLSelect",
			pos:  position{line: 844, col: 1, offset: 23920},
			expr: &choiceExpr{
				pos: position{line: 845, col: 5, offset: 23934},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 845, col: 5, offset: 23934},
						run: (*parser).callonSQLSelect2,
						expr: &seqExpr{
							pos: position{line: 845, col: 5, offset: 23934},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 845, col: 5, offset: 23934},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 845, col: 12, offset: 23941},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 845, col: 14, offset: 23943},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 846, col: 5, offset: 23971},
						run: (*parser).callonSQLSelect7,
						expr: &seqExpr{
							pos: position{line: 846, col: 5, offset: 23971},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 846, col: 5, offset: 23971},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 846, col: 12, offset: 23978},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 846, col: 14, offset: 23980},
									label: "assignments",
									expr: &ruleRefExpr{
										pos:  position{line: 846, col: 26, offset: 23992},
										name: "SQLAssignments",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignment",
			pos:  position{line: 848, col: 1, offset: 24036},
			expr: &choiceExpr{
				pos: position{line: 849, col: 5, offset: 24054},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 849, col: 5, offset: 24054},
						run: (*parser).callonSQLAssignment2,
						expr: &seqExpr{
							pos: position{line: 849, col: 5, offset: 24054},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 849, col: 5, offset: 24054},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 849, col: 9, offset: 24058},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 849, col: 14, offset: 24063},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 849, col: 16, offset: 24065},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 849, col: 19, offset: 24068},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 849, col: 21, offset: 24070},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 849, col: 25, offset: 24074},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 850, col: 5, offset: 24168},
						run: (*parser).callonSQLAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 850, col: 5, offset: 24168},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 850, col: 10, offset: 24173},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignments",
			pos:  position{line: 852, col: 1, offset: 24265},
			expr: &actionExpr{
				pos: position{line: 853, col: 5, offset: 24284},
				run: (*parser).callonSQLAssignments1,
				expr: &seqExpr{
					pos: position{line: 853, col: 5, offset: 24284},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 853, col: 5, offset: 24284},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 853, col: 11, offset: 24290},
								name: "SQLAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 853, col: 25, offset: 24304},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 853, col: 30, offset: 24309},
								expr: &actionExpr{
									pos: position{line: 853, col: 31, offset: 24310},
									run: (*parser).callonSQLAssignments7,
									expr: &seqExpr{
										pos: position{line: 853, col: 31, offset: 24310},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 853, col: 31, offset: 24310},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 853, col: 34, offset: 24313},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 853, col: 38, offset: 24317},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 853, col: 41, offset: 24320},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 853, col: 46, offset: 24325},
													name: "SQLAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLFrom",
			pos:  position{line: 857, col: 1, offset: 24446},
			expr: &choiceExpr{
				pos: position{line: 858, col: 5, offset: 24458},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 858, col: 5, offset: 24458},
						run: (*parser).callonSQLFrom2,
						expr: &seqExpr{
							pos: position{line: 858, col: 5, offset: 24458},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 858, col: 5, offset: 24458},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 858, col: 7, offset: 24460},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 858, col: 12, offset: 24465},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 858, col: 14, offset: 24467},
									label: "table",
									expr: &ruleRefExpr{
										pos:  position{line: 858, col: 20, offset: 24473},
										name: "SQLTable",
									},
								},
								&labeledExpr{
									pos:   position{line: 858, col: 29, offset: 24482},
									label: "alias",
									expr: &zeroOrOneExpr{
										pos: position{line: 858, col: 35, offset: 24488},
										expr: &ruleRefExpr{
											pos:  position{line: 858, col: 35, offset: 24488},
											name: "SQLAlias",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 861, col: 5, offset: 24583},
						run: (*parser).callonSQLFrom12,
						expr: &seqExpr{
							pos: position{line: 861, col: 5, offset: 24583},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 861, col: 5, offset: 24583},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 861, col: 7, offset: 24585},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 861, col: 12, offset: 24590},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 861, col: 14, offset: 24592},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAlias",
			pos:  position{line: 863, col: 1, offset: 24617},
			expr: &choiceExpr{
				pos: position{line: 864, col: 5, offset: 24630},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 864, col: 5, offset: 24630},
						run: (*parser).callonSQLAlias2,
						expr: &seqExpr{
							pos: position{line: 864, col: 5, offset: 24630},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 864, col: 5, offset: 24630},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 864, col: 7, offset: 24632},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 864, col: 10, offset: 24635},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 864, col: 12, offset: 24637},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 864, col: 15, offset: 24640},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 865, col: 5, offset: 24668},
						run: (*parser).callonSQLAlias9,
						expr: &seqExpr{
							pos: position{line: 865, col: 5, offset: 24668},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 865, col: 5, offset: 24668},
									name: "_",
								},
								&notExpr{
									pos: position{line: 865, col: 7, offset: 24670},
									expr: &seqExpr{
										pos: position{line: 865, col: 9, offset: 24672},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 865, col: 9, offset: 24672},
												name: "SQLTokenSentinels",
											},
											&ruleRefExpr{
												pos:  position{line: 865, col: 27, offset: 24690},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 865, col: 30, offset: 24693},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 865, col: 33, offset: 24696},
										name: "Lval",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLTable",
			pos:  position{line: 867, col: 1, offset: 24721},
			expr: &ruleRefExpr{
				pos:  position{line: 868, col: 5, offset: 24734},
				name: "Expr",
			},
		},
		{
			name: "SQLJoins",
			pos:  position{line: 870, col: 1, offset: 24740},
			expr: &actionExpr{
				pos: position{line: 871, col: 5, offset: 24753},
				run: (*parser).callonSQLJoins1,
				expr: &seqExpr{
					pos: position{line: 871, col: 5, offset: 24753},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 871, col: 5, offset: 24753},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 871, col: 11, offset: 24759},
								name: "SQLJoin",
							},
						},
						&labeledExpr{
							pos:   position{line: 871, col: 19, offset: 24767},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 871, col: 24, offset: 24772},
								expr: &actionExpr{
									pos: position{line: 871, col: 25, offset: 24773},
									run: (*parser).callonSQLJoins7,
									expr: &labeledExpr{
										pos:   position{line: 871, col: 25, offset: 24773},
										label: "join",
										expr: &ruleRefExpr{
											pos:  position{line: 871, col: 30, offset: 24778},
											name: "SQLJoin",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoin",
			pos:  position{line: 875, col: 1, offset: 24893},
			expr: &actionExpr{
				pos: position{line: 876, col: 5, offset: 24905},
				run: (*parser).callonSQLJoin1,
				expr: &seqExpr{
					pos: position{line: 876, col: 5, offset: 24905},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 876, col: 5, offset: 24905},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 876, col: 11, offset: 24911},
								name: "SQLJoinStyle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 876, col: 24, offset: 24924},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 876, col: 26, offset: 24926},
							name: "JOIN",
						},
						&ruleRefExpr{
							pos:  position{line: 876, col: 31, offset: 24931},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 876, col: 33, offset: 24933},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 876, col: 39, offset: 24939},
								name: "SQLTable",
							},
						},
						&labeledExpr{
							pos:   position{line: 876, col: 48, offset: 24948},
							label: "alias",
							expr: &zeroOrOneExpr{
								pos: position{line: 876, col: 54, offset: 24954},
								expr: &ruleRefExpr{
									pos:  position{line: 876, col: 54, offset: 24954},
									name: "SQLAlias",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 876, col: 64, offset: 24964},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 876, col: 66, offset: 24966},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 876, col: 69, offset: 24969},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 876, col: 71, offset: 24971},
							label: "leftKey",
							expr: &ruleRefExpr{
								pos:  position{line: 876, col: 79, offset: 24979},
								name: "JoinKey",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 876, col: 87, offset: 24987},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 876, col: 90, offset: 24990},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 876, col: 94, offset: 24994},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 876, col: 97, offset: 24997},
							label: "rightKey",
							expr: &ruleRefExpr{
								pos:  position{line: 876, col: 106, offset: 25006},
								name: "JoinKey",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoinStyle",
			pos:  position{line: 895, col: 1, offset: 25241},
			expr: &choiceExpr{
				pos: position{line: 896, col: 5, offset: 25258},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 896, col: 5, offset: 25258},
						run: (*parser).callonSQLJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 896, col: 5, offset: 25258},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 896, col: 5, offset: 25258},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 896, col: 7, offset: 25260},
									label: "style",
									expr: &choiceExpr{
										pos: position{line: 896, col: 14, offset: 25267},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 896, col: 14, offset: 25267},
												name: "ANTI",
											},
											&ruleRefExpr{
												pos:  position{line: 896, col: 21, offset: 25274},
												name: "INNER",
											},
											&ruleRefExpr{
												pos:  position{line: 896, col: 29, offset: 25282},
												name: "LEFT",
											},
											&ruleRefExpr{
												pos:  position{line: 896, col: 36, offset: 25289},
												name: "RIGHT",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 897, col: 5, offset: 25322},
						run: (*parser).callonSQLJoinStyle11,
						expr: &litMatcher{
							pos:        position{line: 897, col: 5, offset: 25322},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLWhere",
			pos:  position{line: 899, col: 1, offset: 25350},
			expr: &actionExpr{
				pos: position{line: 900, col: 5, offset: 25363},
				run: (*parser).callonSQLWhere1,
				expr: &seqExpr{
					pos: position{line: 900, col: 5, offset: 25363},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 900, col: 5, offset: 25363},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 900, col: 7, offset: 25365},
							name: "WHERE",
						},
						&ruleRefExpr{
							pos:  position{line: 900, col: 13, offset: 25371},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 900, col: 15, offset: 25373},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 900, col: 20, offset: 25378},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLGroupBy",
			pos:  position{line: 902, col: 1, offset: 25414},
			expr: &actionExpr{
				pos: position{line: 903, col: 5, offset: 25429},
				run: (*parser).callonSQLGroupBy1,
				expr: &seqExpr{
					pos: position{line: 903, col: 5, offset: 25429},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 903, col: 5, offset: 25429},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 903, col: 7, offset: 25431},
							name: "GROUP",
						},
						&ruleRefExpr{
							pos:  position{line: 903, col: 13, offset: 25437},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 903, col: 15, offset: 25439},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 903, col: 18, offset: 25442},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 903, col: 20, offset: 25444},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 903, col: 28, offset: 25452},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLHaving",
			pos:  position{line: 905, col: 1, offset: 25488},
			expr: &actionExpr{
				pos: position{line: 906, col: 5, offset: 25502},
				run: (*parser).callonSQLHaving1,
				expr: &seqExpr{
					pos: position{line: 906, col: 5, offset: 25502},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 906, col: 5, offset: 25502},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 906, col: 7, offset: 25504},
							name: "HAVING",
						},
						&ruleRefExpr{
							pos:  position{line: 906, col: 14, offset: 25511},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 906, col: 16, offset: 25513},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 906, col: 21, offset: 25518},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrderBy",
			pos:  position{line: 908, col: 1, offset: 25554},
			expr: &actionExpr{
				pos: position{line: 909, col: 5, offset: 25569},
				run: (*parser).callonSQLOrderBy1,
				expr: &seqExpr{
					pos: position{line: 909, col: 5, offset: 25569},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 909, col: 5, offset: 25569},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 909, col: 7, offset: 25571},
							name: "ORDER",
						},
						&ruleRefExpr{
							pos:  position{line: 909, col: 13, offset: 25577},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 909, col: 15, offset: 25579},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 909, col: 18, offset: 25582},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 909, col: 20, offset: 25584},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 909, col: 25, offset: 25589},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 909, col: 31, offset: 25595},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 909, col: 37, offset: 25601},
								name: "SQLOrder",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrder",
			pos:  position{line: 913, col: 1, offset: 25711},
			expr: &choiceExpr{
				pos: position{line: 914, col: 5, offset: 25724},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 914, col: 5, offset: 25724},
						run: (*parser).callonSQLOrder2,
						expr: &seqExpr{
							pos: position{line: 914, col: 5, offset: 25724},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 914, col: 5, offset: 25724},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 914, col: 7, offset: 25726},
									label: "dir",
									expr: &choiceExpr{
										pos: position{line: 914, col: 12, offset: 25731},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 914, col: 12, offset: 25731},
												name: "ASC",
											},
											&ruleRefExpr{
												pos:  position{line: 914, col: 18, offset: 25737},
												name: "DESC",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 915, col: 5, offset: 25767},
						run: (*parser).callonSQLOrder9,
						expr: &litMatcher{
							pos:        position{line: 915, col: 5, offset: 25767},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLLimit",
			pos:  position{line: 917, col: 1, offset: 25793},
			expr: &choiceExpr{
				pos: position{line: 918, col: 5, offset: 25806},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 918, col: 5, offset: 25806},
						run: (*parser).callonSQLLimit2,
						expr: &seqExpr{
							pos: position{line: 918, col: 5, offset: 25806},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 918, col: 5, offset: 25806},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 918, col: 7, offset: 25808},
									name: "LIMIT",
								},
								&ruleRefExpr{
									pos:  position{line: 918, col: 13, offset: 25814},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 918, col: 15, offset: 25816},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 918, col: 21, offset: 25822},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 919, col: 5, offset: 25853},
						run: (*parser).callonSQLLimit9,
						expr: &litMatcher{
							pos:        position{line: 919, col: 5, offset: 25853},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SELECT",
			pos:  position{line: 921, col: 1, offset: 25875},
			expr: &actionExpr{
				pos: position{line: 921, col: 10, offset: 25884},
				run: (*parser).callonSELECT1,
				expr: &litMatcher{
					pos:        position{line: 921, col: 10, offset: 25884},
					val:        "select",
					ignoreCase: true,
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 922, col: 1, offset: 25919},
			expr: &actionExpr{
				pos: position{line: 922, col: 6, offset: 25924},
				run: (*parser).callonAS1,
				expr: &litMatcher{
					pos:        position{line: 922, col: 6, offset: 25924},
					val:        "as",
					ignoreCase: true,
				},
			},
		},
		{
			name: "FROM",
			pos:  position{line: 923, col: 1, offset: 25951},
			expr: &actionExpr{
				pos: position{line: 923, col: 8, offset: 25958},
				run: (*parser).callonFROM1,
				expr: &litMatcher{
					pos:        position{line: 923, col: 8, offset: 25958},
					val:        "from",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JOIN",
			pos:  position{line: 924, col: 1, offset: 25989},
			expr: &actionExpr{
				pos: position{line: 924, col: 8, offset: 25996},
				run: (*parser).callonJOIN1,
				expr: &litMatcher{
					pos:        position{line: 924, col: 8, offset: 25996},
					val:        "join",
					ignoreCase: true,
				},
			},
		},
		{
			name: "WHERE",
			pos:  position{line: 925, col: 1, offset: 26027},
			expr: &actionExpr{
				pos: position{line: 925, col: 9, offset: 26035},
				run: (*parser).callonWHERE1,
				expr: &litMatcher{
					pos:        position{line: 925, col: 9, offset: 26035},
					val:        "where",
					ignoreCase: true,
				},
			},
		},
		{
			name: "GROUP",
			pos:  position{line: 926, col: 1, offset: 26068},
			expr: &actionExpr{
				pos: position{line: 926, col: 9, offset: 26076},
				run: (*parser).callonGROUP1,
				expr: &litMatcher{
					pos:        position{line: 926, col: 9, offset: 26076},
					val:        "group",
					ignoreCase: true,
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 927, col: 1, offset: 26109},
			expr: &actionExpr{
				pos: position{line: 927, col: 6, offset: 26114},
				run: (*parser).callonBY1,
				expr: &litMatcher{
					pos:        position{line: 927, col: 6, offset: 26114},
					val:        "by",
					ignoreCase: true,
				},
			},
		},
		{
			name: "HAVING",
			pos:  position{line: 928, col: 1, offset: 26141},
			expr: &actionExpr{
				pos: position{line: 928, col: 10, offset: 26150},
				run: (*parser).callonHAVING1,
				expr: &litMatcher{
					pos:        position{line: 928, col: 10, offset: 26150},
					val:        "having",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ORDER",
			pos:  position{line: 929, col: 1, offset: 26185},
			expr: &actionExpr{
				pos: position{line: 929, col: 9, offset: 26193},
				run: (*parser).callonORDER1,
				expr: &litMatcher{
					pos:        position{line: 929, col: 9, offset: 26193},
					val:        "order",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ON",
			pos:  position{line: 930, col: 1, offset: 26226},
			expr: &actionExpr{
				pos: position{line: 930, col: 6, offset: 26231},
				run: (*parser).callonON1,
				expr: &litMatcher{
					pos:        position{line: 930, col: 6, offset: 26231},
					val:        "on",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LIMIT",
			pos:  position{line: 931, col: 1, offset: 26258},
			expr: &actionExpr{
				pos: position{line: 931, col: 9, offset: 26266},
				run: (*parser).callonLIMIT1,
				expr: &litMatcher{
					pos:        position{line: 931, col: 9, offset: 26266},
					val:        "limit",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ASC",
			pos:  position{line: 932, col: 1, offset: 26299},
			expr: &actionExpr{
				pos: position{line: 932, col: 7, offset: 26305},
				run: (*parser).callonASC1,
				expr: &litMatcher{
					pos:        position{line: 932, col: 7, offset: 26305},
					val:        "asc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "DESC",
			pos:  position{line: 933, col: 1, offset: 26334},
			expr: &actionExpr{
				pos: position{line: 933, col: 8, offset: 26341},
				run: (*parser).callonDESC1,
				expr: &litMatcher{
					pos:        position{line: 933, col: 8, offset: 26341},
					val:        "desc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ANTI",
			pos:  position{line: 934, col: 1, offset: 26372},
			expr: &actionExpr{
				pos: position{line: 934, col: 8, offset: 26379},
				run: (*parser).callonANTI1,
				expr: &litMatcher{
					pos:        position{line: 934, col: 8, offset: 26379},
					val:        "anti",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LEFT",
			pos:  position{line: 935, col: 1, offset: 26410},
			expr: &actionExpr{
				pos: position{line: 935, col: 8, offset: 26417},
				run: (*parser).callonLEFT1,
				expr: &litMatcher{
					pos:        position{line: 935, col: 8, offset: 26417},
					val:        "left",
					ignoreCase: true,
				},
			},
		},
		{
			name: "RIGHT",
			pos:  position{line: 936, col: 1, offset: 26448},
			expr: &actionExpr{
				pos: position{line: 936, col: 9, offset: 26456},
				run: (*parser).callonRIGHT1,
				expr: &litMatcher{
					pos:        position{line: 936, col: 9, offset: 26456},
					val:        "right",
					ignoreCase: true,
				},
			},
		},
		{
			name: "INNER",
			pos:  position{line: 937, col: 1, offset: 26489},
			expr: &actionExpr{
				pos: position{line: 937, col: 9, offset: 26497},
				run: (*parser).callonINNER1,
				expr: &litMatcher{
					pos:        position{line: 937, col: 9, offset: 26497},
					val:        "inner",
					ignoreCase: true,
				},
			},
		},
		{
			name: "SQLTokenSentinels",
			pos:  position{line: 939, col: 1, offset: 26531},
			expr: &choiceExpr{
				pos: position{line: 940, col: 5, offset: 26553},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 940, col: 5, offset: 26553},
						name: "SELECT",
					},
					&ruleRefExpr{
						pos:  position{line: 940, col: 14, offset: 26562},
						name: "AS",
					},
					&ruleRefExpr{
						pos:  position{line: 940, col: 19, offset: 26567},
						name: "FROM",
					},
					&ruleRefExpr{
						pos:  position{line: 940, col: 27, offset: 26575},
						name: "JOIN",
					},
					&ruleRefExpr{
						pos:  position{line: 940, col: 34, offset: 26582},
						name: "WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 940, col: 42, offset: 26590},
						name: "GROUP",
					},
					&ruleRefExpr{
						pos:  position{line: 940, col: 50, offset: 26598},
						name: "HAVING",
					},
					&ruleRefExpr{
						pos:  position{line: 940, col: 59, offset: 26607},
						name: "ORDER",
					},
					&ruleRefExpr{
						pos:  position{line: 940, col: 67, offset: 26615},
						name: "LIMIT",
					},
					&ruleRefExpr{
						pos:  position{line: 940, col: 75, offset: 26623},
						name: "ON",
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 944, col: 1, offset: 26649},
			expr: &choiceExpr{
				pos: position{line: 945, col: 5, offset: 26661},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 945, col: 5, offset: 26661},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 946, col: 5, offset: 26677},
						name: "TemplateLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 947, col: 5, offset: 26697},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 948, col: 5, offset: 26715},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 949, col: 5, offset: 26734},
						name: "BytesLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 950, col: 5, offset: 26751},
						name: "Duration",
					},
					&ruleRefExpr{
						pos:  position{line: 951, col: 5, offset: 26764},
						name: "Time",
					},
					&ruleRefExpr{
						pos:  position{line: 952, col: 5, offset: 26773},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 953, col: 5, offset: 26790},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 954, col: 5, offset: 26809},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 955, col: 5, offset: 26828},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 957, col: 1, offset: 26841},
			expr: &choiceExpr{
				pos: position{line: 958, col: 5, offset: 26859},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 958, col: 5, offset: 26859},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 958, col: 5, offset: 26859},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 958, col: 5, offset: 26859},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 958, col: 7, offset: 26861},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 958, col: 14, offset: 26868},
									expr: &ruleRefExpr{
										pos:  position{line: 958, col: 15, offset: 26869},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 961, col: 5, offset: 26984},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 961, col: 5, offset: 26984},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 961, col: 7, offset: 26986},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 965, col: 1, offset: 27090},
			expr: &choiceExpr{
				pos: position{line: 966, col: 5, offset: 27109},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 966, col: 5, offset: 27109},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 966, col: 5, offset: 27109},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 966, col: 5, offset: 27109},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 966, col: 7, offset: 27111},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 966, col: 11, offset: 27115},
									expr: &ruleRefExpr{
										pos:  position{line: 966, col: 12, offset: 27116},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 969, col: 5, offset: 27230},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 969, col: 5, offset: 27230},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 969, col: 7, offset: 27232},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 973, col: 1, offset: 27331},
			expr: &actionExpr{
				pos: position{line: 974, col: 5, offset: 27348},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 974, col: 5, offset: 27348},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 974, col: 7, offset: 27350},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 978, col: 1, offset: 27463},
			expr: &actionExpr{
				pos: position{line: 979, col: 5, offset: 27482},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 979, col: 5, offset: 27482},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 979, col: 7, offset: 27484},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 983, col: 1, offset: 27593},
			expr: &choiceExpr{
				pos: position{line: 984, col: 5, offset: 27612},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 984, col: 5, offset: 27612},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 984, col: 5, offset: 27612},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 985, col: 5, offset: 27725},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 985, col: 5, offset: 27725},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 987, col: 1, offset: 27836},
			expr: &actionExpr{
				pos: position{line: 988, col: 5, offset: 27852},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 988, col: 5, offset: 27852},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "BytesLiteral",
			pos:  position{line: 990, col: 1, offset: 27958},
			expr: &actionExpr{
				pos: position{line: 991, col: 5, offset: 27975},
				run: (*parser).callonBytesLiteral1,
				expr: &seqExpr{
					pos: position{line: 991, col: 5, offset: 27975},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 991, col: 5, offset: 27975},
							val:        "0x",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 991, col: 10, offset: 27980},
							expr: &ruleRefExpr{
								pos:  position{line: 991, col: 10, offset: 27980},
								name: "HexDigit",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeLiteral",
			pos:  position{line: 995, col: 1, offset: 28095},
			expr: &actionExpr{
				pos: position{line: 996, col: 5, offset: 28111},
				run: (*parser).callonTypeLiteral1,
				expr: &seqExpr{
					pos: position{line: 996, col: 5, offset: 28111},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 996, col: 5, offset: 28111},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 996, col: 9, offset: 28115},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 996, col: 13, offset: 28119},
								name: "Type",
							},
						},
						&litMatcher{
							pos:        position{line: 996, col: 18, offset: 28124},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "CastType",
			pos:  position{line: 1000, col: 1, offset: 28213},
			expr: &choiceExpr{
				pos: position{line: 1001, col: 5, offset: 28226},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1001, col: 5, offset: 28226},
						name: "TypeLiteral",
					},
					&actionExpr{
						pos: position{line: 1002, col: 5, offset: 28242},
						run: (*parser).callonCastType3,
						expr: &labeledExpr{
							pos:   position{line: 1002, col: 5, offset: 28242},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1002, col: 9, offset: 28246},
								name: "PrimitiveType",
							},
						},
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 1006, col: 1, offset: 28345},
			expr: &choiceExpr{
				pos: position{line: 1007, col: 5, offset: 28354},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1007, col: 5, offset: 28354},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1008, col: 5, offset: 28370},
						name: "AmbiguousType",
					},
					&ruleRefExpr{
						pos:  position{line: 1009, col: 5, offset: 28388},
						name: "ComplexType",
					},
				},
			},
		},
		{
			name: "AmbiguousType",
			pos:  position{line: 1011, col: 1, offset: 28401},
			expr: &choiceExpr{
				pos: position{line: 1012, col: 5, offset: 28419},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1012, col: 5, offset: 28419},
						run: (*parser).callonAmbiguousType2,
						expr: &seqExpr{
							pos: position{line: 1012, col: 5, offset: 28419},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1012, col: 5, offset: 28419},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1012, col: 10, offset: 28424},
										name: "PrimitiveType",
									},
								},
								&notExpr{
									pos: position{line: 1012, col: 24, offset: 28438},
									expr: &ruleRefExpr{
										pos:  position{line: 1012, col: 25, offset: 28439},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1013, col: 5, offset: 28479},
						run: (*parser).callonAmbiguousType8,
						expr: &seqExpr{
							pos: position{line: 1013, col: 5, offset: 28479},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1013, col: 5, offset: 28479},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1013, col: 10, offset: 28484},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1013, col: 25, offset: 28499},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1013, col: 28, offset: 28502},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1013, col: 32, offset: 28506},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1013, col: 35, offset: 28509},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1013, col: 39, offset: 28513},
										name: "Type",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1016, col: 5, offset: 28615},
						run: (*parser).callonAmbiguousType17,
						expr: &labeledExpr{
							pos:   position{line: 1016, col: 5, offset: 28615},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1016, col: 10, offset: 28620},
								name: "IdentifierName",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1019, col: 5, offset: 28722},
						run: (*parser).callonAmbiguousType20,
						expr: &seqExpr{
							pos: position{line: 1019, col: 5, offset: 28722},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1019, col: 5, offset: 28722},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1019, col: 9, offset: 28726},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1019, col: 12, offset: 28729},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 1019, col: 14, offset: 28731},
										name: "TypeUnion",
									},
								},
								&litMatcher{
									pos:        position{line: 1019, col: 25, offset: 28742},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeUnion",
			pos:  position{line: 1021, col: 1, offset: 28765},
			expr: &actionExpr{
				pos: position{line: 1022, col: 5, offset: 28779},
				run: (*parser).callonTypeUnion1,
				expr: &labeledExpr{
					pos:   position{line: 1022, col: 5, offset: 28779},
					label: "types",
					expr: &ruleRefExpr{
						pos:  position{line: 1022, col: 11, offset: 28785},
						name: "TypeList",
					},
				},
			},
		},
		{
			name: "TypeList",
			pos:  position{line: 1026, col: 1, offset: 28881},
			expr: &actionExpr{
				pos: position{line: 1027, col: 5, offset: 28894},
				run: (*parser).callonTypeList1,
				expr: &seqExpr{
					pos: position{line: 1027, col: 5, offset: 28894},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1027, col: 5, offset: 28894},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1027, col: 11, offset: 28900},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 1027, col: 16, offset: 28905},
							label: "rest",
							expr: &oneOrMoreExpr{
								pos: position{line: 1027, col: 21, offset: 28910},
								expr: &ruleRefExpr{
									pos:  position{line: 1027, col: 21, offset: 28910},
									name: "TypeListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeListTail",
			pos:  position{line: 1031, col: 1, offset: 29004},
			expr: &actionExpr{
				pos: position{line: 1031, col: 16, offset: 29019},
				run: (*parser).callonTypeListTail1,
				expr: &seqExpr{
					pos: position{line: 1031, col: 16, offset: 29019},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1031, col: 16, offset: 29019},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1031, col: 19, offset: 29022},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1031, col: 23, offset: 29026},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1031, col: 26, offset: 29029},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1031, col: 30, offset: 29033},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexType",
			pos:  position{line: 1033, col: 1, offset: 29059},
			expr: &choiceExpr{
				pos: position{line: 1034, col: 5, offset: 29075},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1034, col: 5, offset: 29075},
						run: (*parser).callonComplexType2,
						expr: &seqExpr{
							pos: position{line: 1034, col: 5, offset: 29075},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1034, col: 5, offset: 29075},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1034, col: 9, offset: 29079},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1034, col: 12, offset: 29082},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 1034, col: 19, offset: 29089},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1034, col: 33, offset: 29103},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1034, col: 36, offset: 29106},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1037, col: 5, offset: 29201},
						run: (*parser).callonComplexType10,
						expr: &seqExpr{
							pos: position{line: 1037, col: 5, offset: 29201},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1037, col: 5, offset: 29201},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1037, col: 9, offset: 29205},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1037, col: 12, offset: 29208},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1037, col: 16, offset: 29212},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1037, col: 21, offset: 29217},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1037, col: 24, offset: 29220},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1040, col: 5, offset: 29309},
						run: (*parser).callonComplexType18,
						expr: &seqExpr{
							pos: position{line: 1040, col: 5, offset: 29309},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1040, col: 5, offset: 29309},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1040, col: 10, offset: 29314},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1040, col: 14, offset: 29318},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1040, col: 18, offset: 29322},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1040, col: 23, offset: 29327},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1040, col: 26, offset: 29330},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1043, col: 5, offset: 29418},
						run: (*parser).callonComplexType26,
						expr: &seqExpr{
							pos: position{line: 1043, col: 5, offset: 29418},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1043, col: 5, offset: 29418},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1043, col: 10, offset: 29423},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1043, col: 13, offset: 29426},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 1043, col: 21, offset: 29434},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1043, col: 26, offset: 29439},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1043, col: 29, offset: 29442},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1043, col: 33, offset: 29446},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1043, col: 36, offset: 29449},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 1043, col: 44, offset: 29457},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1043, col: 49, offset: 29462},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1043, col: 52, offset: 29465},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateLiteral",
			pos:  position{line: 1047, col: 1, offset: 29579},
			expr: &actionExpr{
				pos: position{line: 1048, col: 5, offset: 29599},
				run: (*parser).callonTemplateLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1048, col: 5, offset: 29599},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1048, col: 7, offset: 29601},
						name: "TemplateLiteralParts",
					},
				},
			},
		},
		{
			name: "TemplateLiteralParts",
			pos:  position{line: 1055, col: 1, offset: 29817},
			expr: &choiceExpr{
				pos: position{line: 1056, col: 5, offset: 29842},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1056, col: 5, offset: 29842},
						run: (*parser).callonTemplateLiteralParts2,
						expr: &seqExpr{
							pos: position{line: 1056, col: 5, offset: 29842},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1056, col: 5, offset: 29842},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1056, col: 9, offset: 29846},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1056, col: 11, offset: 29848},
										expr: &ruleRefExpr{
											pos:  position{line: 1056, col: 11, offset: 29848},
											name: "TemplateDoubleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1056, col: 37, offset: 29874},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1057, col: 5, offset: 29900},
						run: (*parser).callonTemplateLiteralParts9,
						expr: &seqExpr{
							pos: position{line: 1057, col: 5, offset: 29900},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1057, col: 5, offset: 29900},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1057, col: 9, offset: 29904},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1057, col: 11, offset: 29906},
										expr: &ruleRefExpr{
											pos:  position{line: 1057, col: 11, offset: 29906},
											name: "TemplateSingleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1057, col: 37, offset: 29932},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedPart",
			pos:  position{line: 1059, col: 1, offset: 29955},
			expr: &choiceExpr{
				pos: position{line: 1060, col: 5, offset: 29984},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1060, col: 5, offset: 29984},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 1061, col: 5, offset: 30001},
						run: (*parser).callonTemplateDoubleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 1061, col: 5, offset: 30001},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1061, col: 7, offset: 30003},
								expr: &ruleRefExpr{
									pos:  position{line: 1061, col: 7, offset: 30003},
									name: "TemplateDoubleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedChar",
			pos:  position{line: 1065, col: 1, offset: 30140},
			expr: &choiceExpr{
				pos: position{line: 1066, col: 5, offset: 30169},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1066, col: 5, offset: 30169},
						run: (*parser).callonTemplateDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1066, col: 5, offset: 30169},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1066, col: 5, offset: 30169},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1066, col: 10, offset: 30174},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1066, col: 12, offset: 30176},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1067, col: 5, offset: 30203},
						run: (*parser).callonTemplateDoubleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1067, col: 5, offset: 30203},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1067, col: 5, offset: 30203},
									expr: &litMatcher{
										pos:        position{line: 1067, col: 8, offset: 30206},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1067, col: 15, offset: 30213},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1067, col: 17, offset: 30215},
										name: "DoubleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedPart",
			pos:  position{line: 1069, col: 1, offset: 30251},
			expr: &choiceExpr{
				pos: position{line: 1070, col: 5, offset: 30280},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1070, col: 5, offset: 30280},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 1071, col: 5, offset: 30297},
						run: (*parser).callonTemplateSingleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 1071, col: 5, offset: 30297},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1071, col: 7, offset: 30299},
								expr: &ruleRefExpr{
									pos:  position{line: 1071, col: 7, offset: 30299},
									name: "TemplateSingleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedChar",
			pos:  position{line: 1075, col: 1, offset: 30436},
			expr: &choiceExpr{
				pos: position{line: 1076, col: 5, offset: 30465},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1076, col: 5, offset: 30465},
						run: (*parser).callonTemplateSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1076, col: 5, offset: 30465},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1076, col: 5, offset: 30465},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1076, col: 10, offset: 30470},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1076, col: 12, offset: 30472},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1077, col: 5, offset: 30499},
						run: (*parser).callonTemplateSingleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1077, col: 5, offset: 30499},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1077, col: 5, offset: 30499},
									expr: &litMatcher{
										pos:        position{line: 1077, col: 8, offset: 30502},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1077, col: 15, offset: 30509},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1077, col: 17, offset: 30511},
										name: "SingleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateExpr",
			pos:  position{line: 1079, col: 1, offset: 30547},
			expr: &actionExpr{
				pos: position{line: 1080, col: 5, offset: 30564},
				run: (*parser).callonTemplateExpr1,
				expr: &seqExpr{
					pos: position{line: 1080, col: 5, offset: 30564},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1080, col: 5, offset: 30564},
							val:        "${",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1080, col: 10, offset: 30569},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1080, col: 13, offset: 30572},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 1080, col: 15, offset: 30574},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1080, col: 20, offset: 30579},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1080, col: 23, offset: 30582},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 1082, col: 1, offset: 30605},
			expr: &actionExpr{
				pos: position{line: 1083, col: 5, offset: 30623},
				run: (*parser).callonPrimitiveType1,
				expr: &choiceExpr{
					pos: position{line: 1083, col: 9, offset: 30627},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 1083, col: 9, offset: 30627},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1083, col: 19, offset: 30637},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1083, col: 30, offset: 30648},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1083, col: 41, offset: 30659},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1084, col: 9, offset: 30676},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1084, col: 18, offset: 30685},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1084, col: 28, offset: 30695},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1084, col: 38, offset: 30705},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1085, col: 9, offset: 30721},
							val:        "float32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1085, col: 21, offset: 30733},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1086, col: 9, offset: 30751},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1086, col: 18, offset: 30760},
							val:        "string",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1087, col: 9, offset: 30777},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1087, col: 22, offset: 30790},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1088, col: 9, offset: 30805},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1089, col: 9, offset: 30821},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1089, col: 16, offset: 30828},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1090, col: 9, offset: 30842},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1090, col: 18, offset: 30851},
							val:        "null",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldList",
			pos:  position{line: 1094, col: 1, offset: 30967},
			expr: &choiceExpr{
				pos: position{line: 1095, col: 5, offset: 30985},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1095, col: 5, offset: 30985},
						run: (*parser).callonTypeFieldList2,
						expr: &seqExpr{
							pos: position{line: 1095, col: 5, offset: 30985},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1095, col: 5, offset: 30985},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 1095, col: 11, offset: 30991},
										name: "TypeField",
									},
								},
								&labeledExpr{
									pos:   position{line: 1095, col: 21, offset: 31001},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1095, col: 26, offset: 31006},
										expr: &ruleRefExpr{
											pos:  position{line: 1095, col: 26, offset: 31006},
											name: "TypeFieldListTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1098, col: 5, offset: 31108},
						run: (*parser).callonTypeFieldList9,
						expr: &litMatcher{
							pos:        position{line: 1098, col: 5, offset: 31108},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTail",
			pos:  position{line: 1100, col: 1, offset: 31132},
			expr: &actionExpr{
				pos: position{line: 1100, col: 21, offset: 31152},
				run: (*parser).callonTypeFieldListTail1,
				expr: &seqExpr{
					pos: position{line: 1100, col: 21, offset: 31152},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1100, col: 21, offset: 31152},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1100, col: 24, offset: 31155},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1100, col: 28, offset: 31159},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1100, col: 31, offset: 31162},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1100, col: 35, offset: 31166},
								name: "TypeField",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeField",
			pos:  position{line: 1102, col: 1, offset: 31197},
			expr: &actionExpr{
				pos: position{line: 1103, col: 5, offset: 31211},
				run: (*parser).callonTypeField1,
				expr: &seqExpr{
					pos: position{line: 1103, col: 5, offset: 31211},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1103, col: 5, offset: 31211},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1103, col: 10, offset: 31216},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1103, col: 20, offset: 31226},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1103, col: 23, offset: 31229},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1103, col: 27, offset: 31233},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1103, col: 30, offset: 31236},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1103, col: 34, offset: 31240},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 1107, col: 1, offset: 31322},
			expr: &choiceExpr{
				pos: position{line: 1108, col: 5, offset: 31336},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1108, col: 5, offset: 31336},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 1109, col: 5, offset: 31355},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 1111, col: 1, offset: 31369},
			expr: &actionExpr{
				pos: position{line: 1111, col: 12, offset: 31380},
				run: (*parser).callonAndToken1,
				expr: &seqExpr{
					pos: position{line: 1111, col: 12, offset: 31380},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1111, col: 13, offset: 31381},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1111, col: 13, offset: 31381},
									val:        "and",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1111, col: 21, offset: 31389},
									val:        "AND",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1111, col: 28, offset: 31396},
							expr: &ruleRefExpr{
								pos:  position{line: 1111, col: 29, offset: 31397},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 1112, col: 1, offset: 31434},
			expr: &actionExpr{
				pos: position{line: 1112, col: 11, offset: 31444},
				run: (*parser).callonOrToken1,
				expr: &seqExpr{
					pos: position{line: 1112, col: 11, offset: 31444},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1112, col: 12, offset: 31445},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1112, col: 12, offset: 31445},
									val:        "or",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1112, col: 19, offset: 31452},
									val:        "OR",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1112, col: 25, offset: 31458},
							expr: &ruleRefExpr{
								pos:  position{line: 1112, col: 26, offset: 31459},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 1113, col: 1, offset: 31495},
			expr: &actionExpr{
				pos: position{line: 1113, col: 11, offset: 31505},
				run: (*parser).callonInToken1,
				expr: &seqExpr{
					pos: position{line: 1113, col: 11, offset: 31505},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1113, col: 11, offset: 31505},
							val:        "in",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1113, col: 16, offset: 31510},
							expr: &ruleRefExpr{
								pos:  position{line: 1113, col: 17, offset: 31511},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 1114, col: 1, offset: 31547},
			expr: &actionExpr{
				pos: position{line: 1114, col: 12, offset: 31558},
				run: (*parser).callonNotToken1,
				expr: &seqExpr{
					pos: position{line: 1114, col: 12, offset: 31558},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1114, col: 13, offset: 31559},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1114, col: 13, offset: 31559},
									val:        "not",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1114, col: 21, offset: 31567},
									val:        "NOT",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1114, col: 28, offset: 31574},
							expr: &ruleRefExpr{
								pos:  position{line: 1114, col: 29, offset: 31575},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 1115, col: 1, offset: 31612},
			expr: &actionExpr{
				pos: position{line: 1115, col: 11, offset: 31622},
				run: (*parser).callonByToken1,
				expr: &seqExpr{
					pos: position{line: 1115, col: 11, offset: 31622},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1115, col: 11, offset: 31622},
							val:        "by",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1115, col: 16, offset: 31627},
							expr: &ruleRefExpr{
								pos:  position{line: 1115, col: 17, offset: 31628},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 1117, col: 1, offset: 31665},
			expr: &charClassMatcher{
				pos:        position{line: 1117, col: 19, offset: 31683},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 1119, col: 1, offset: 31695},
			expr: &choiceExpr{
				pos: position{line: 1119, col: 18, offset: 31712},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1119, col: 18, offset: 31712},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 1119, col: 36, offset: 31730},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 1121, col: 1, offset: 31737},
			expr: &actionExpr{
				pos: position{line: 1122, col: 5, offset: 31752},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 1122, col: 5, offset: 31752},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 1122, col: 8, offset: 31755},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 1124, col: 1, offset: 31836},
			expr: &choiceExpr{
				pos: position{line: 1125, col: 5, offset: 31855},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1125, col: 5, offset: 31855},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 1125, col: 5, offset: 31855},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1125, col: 5, offset: 31855},
									expr: &seqExpr{
										pos: position{line: 1125, col: 7, offset: 31857},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1125, col: 7, offset: 31857},
												name: "IDGuard",
											},
											&notExpr{
												pos: position{line: 1125, col: 15, offset: 31865},
												expr: &ruleRefExpr{
													pos:  position{line: 1125, col: 16, offset: 31866},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1125, col: 32, offset: 31882},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1125, col: 48, offset: 31898},
									expr: &ruleRefExpr{
										pos:  position{line: 1125, col: 48, offset: 31898},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1126, col: 5, offset: 31950},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 1126, col: 5, offset: 31950},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1127, col: 5, offset: 31989},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 1127, col: 5, offset: 31989},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1127, col: 5, offset: 31989},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1127, col: 10, offset: 31994},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1127, col: 13, offset: 31997},
										name: "IDGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1129, col: 5, offset: 32088},
						run: (*parser).callonIdentifierName19,
						expr: &litMatcher{
							pos:        position{line: 1129, col: 5, offset: 32088},
							val:        "type",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1130, col: 5, offset: 32130},
						run: (*parser).callonIdentifierName21,
						expr: &seqExpr{
							pos: position{line: 1130, col: 5, offset: 32130},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1130, col: 5, offset: 32130},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1130, col: 8, offset: 32133},
										name: "SQLTokenSentinels",
									},
								},
								&andExpr{
									pos: position{line: 1130, col: 26, offset: 32151},
									expr: &seqExpr{
										pos: position{line: 1130, col: 28, offset: 32153},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1130, col: 28, offset: 32153},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1130, col: 31, offset: 32156},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IDGuard",
			pos:  position{line: 1132, col: 1, offset: 32181},
			expr: &choiceExpr{
				pos: position{line: 1133, col: 5, offset: 32193},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1133, col: 5, offset: 32193},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1134, col: 5, offset: 32212},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "Time",
			pos:  position{line: 1136, col: 1, offset: 32225},
			expr: &actionExpr{
				pos: position{line: 1137, col: 5, offset: 32234},
				run: (*parser).callonTime1,
				expr: &seqExpr{
					pos: position{line: 1137, col: 5, offset: 32234},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1137, col: 5, offset: 32234},
							name: "FullDate",
						},
						&litMatcher{
							pos:        position{line: 1137, col: 14, offset: 32243},
							val:        "T",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1137, col: 18, offset: 32247},
							name: "FullTime",
						},
					},
				},
			},
		},
		{
			name: "FullDate",
			pos:  position{line: 1141, col: 1, offset: 32367},
			expr: &seqExpr{
				pos: position{line: 1141, col: 12, offset: 32378},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1141, col: 12, offset: 32378},
						name: "D4",
					},
					&litMatcher{
						pos:        position{line: 1141, col: 15, offset: 32381},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1141, col: 19, offset: 32385},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1141, col: 22, offset: 32388},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1141, col: 26, offset: 32392},
						name: "D2",
					},
				},
			},
		},
		{
			name: "D4",
			pos:  position{line: 1143, col: 1, offset: 32396},
			expr: &seqExpr{
				pos: position{line: 1143, col: 6, offset: 32401},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1143, col: 6, offset: 32401},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1143, col: 11, offset: 32406},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1143, col: 16, offset: 32411},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1143, col: 21, offset: 32416},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "D2",
			pos:  position{line: 1144, col: 1, offset: 32422},
			expr: &seqExpr{
				pos: position{line: 1144, col: 6, offset: 32427},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1144, col: 6, offset: 32427},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1144, col: 11, offset: 32432},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "FullTime",
			pos:  position{line: 1146, col: 1, offset: 32439},
			expr: &seqExpr{
				pos: position{line: 1146, col: 12, offset: 32450},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1146, col: 12, offset: 32450},
						name: "PartialTime",
					},
					&ruleRefExpr{
						pos:  position{line: 1146, col: 24, offset: 32462},
						name: "TimeOffset",
					},
				},
			},
		},
		{
			name: "PartialTime",
			pos:  position{line: 1148, col: 1, offset: 32474},
			expr: &seqExpr{
				pos: position{line: 1148, col: 15, offset: 32488},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1148, col: 15, offset: 32488},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1148, col: 18, offset: 32491},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1148, col: 22, offset: 32495},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1148, col: 25, offset: 32498},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1148, col: 29, offset: 32502},
						name: "D2",
					},
					&zeroOrOneExpr{
						pos: position{line: 1148, col: 32, offset: 32505},
						expr: &seqExpr{
							pos: position{line: 1148, col: 33, offset: 32506},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1148, col: 33, offset: 32506},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1148, col: 37, offset: 32510},
									expr: &charClassMatcher{
										pos:        position{line: 1148, col: 37, offset: 32510},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeOffset",
			pos:  position{line: 1150, col: 1, offset: 32520},
			expr: &choiceExpr{
				pos: position{line: 1151, col: 5, offset: 32535},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1151, col: 5, offset: 32535},
						val:        "Z",
						ignoreCase: false,
					},
					&seqExpr{
						pos: position{line: 1152, col: 5, offset: 32543},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 1152, col: 6, offset: 32544},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1152, col: 6, offset: 32544},
										val:        "+",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 1152, col: 12, offset: 32550},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1152, col: 17, offset: 32555},
								name: "D2",
							},
							&litMatcher{
								pos:        position{line: 1152, col: 20, offset: 32558},
								val:        ":",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 1152, col: 24, offset: 32562},
								name: "D2",
							},
							&zeroOrOneExpr{
								pos: position{line: 1152, col: 27, offset: 32565},
								expr: &seqExpr{
									pos: position{line: 1152, col: 28, offset: 32566},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1152, col: 28, offset: 32566},
											val:        ".",
											ignoreCase: false,
										},
										&oneOrMoreExpr{
											pos: position{line: 1152, col: 32, offset: 32570},
											expr: &charClassMatcher{
												pos:        position{line: 1152, col: 32, offset: 32570},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 1154, col: 1, offset: 32580},
			expr: &actionExpr{
				pos: position{line: 1155, col: 5, offset: 32593},
				run: (*parser).callonDuration1,
				expr: &seqExpr{
					pos: position{line: 1155, col: 5, offset: 32593},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1155, col: 5, offset: 32593},
							expr: &litMatcher{
								pos:        position{line: 1155, col: 5, offset: 32593},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1155, col: 10, offset: 32598},
							expr: &seqExpr{
								pos: position{line: 1155, col: 11, offset: 32599},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1155, col: 11, offset: 32599},
										name: "Decimal",
									},
									&ruleRefExpr{
										pos:  position{line: 1155, col: 19, offset: 32607},
										name: "TimeUnit",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Decimal",
			pos:  position{line: 1159, col: 1, offset: 32733},
			expr: &seqExpr{
				pos: position{line: 1159, col: 11, offset: 32743},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1159, col: 11, offset: 32743},
						name: "UInt",
					},
					&zeroOrOneExpr{
						pos: position{line: 1159, col: 16, offset: 32748},
						expr: &seqExpr{
							pos: position{line: 1159, col: 17, offset: 32749},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1159, col: 17, offset: 32749},
									val:        ".",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1159, col: 21, offset: 32753},
									name: "UInt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeUnit",
			pos:  position{line: 1161, col: 1, offset: 32761},
			expr: &choiceExpr{
				pos: position{line: 1162, col: 5, offset: 32774},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1162, col: 5, offset: 32774},
						val:        "ns",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1163, col: 5, offset: 32783},
						val:        "us",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1164, col: 5, offset: 32792},
						val:        "ms",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1165, col: 5, offset: 32801},
						val:        "s",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1166, col: 5, offset: 32809},
						val:        "m",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1167, col: 5, offset: 32817},
						val:        "h",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1168, col: 5, offset: 32825},
						val:        "d",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1169, col: 5, offset: 32833},
						val:        "w",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1170, col: 5, offset: 32841},
						val:        "y",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 1172, col: 1, offset: 32846},
			expr: &actionExpr{
				pos: position{line: 1173, col: 5, offset: 32853},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 1173, col: 5, offset: 32853},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1173, col: 5, offset: 32853},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1173, col: 10, offset: 32858},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1173, col: 14, offset: 32862},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1173, col: 19, offset: 32867},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1173, col: 23, offset: 32871},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1173, col: 28, offset: 32876},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1173, col: 32, offset: 32880},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 1175, col: 1, offset: 32917},
			expr: &actionExpr{
				pos: position{line: 1176, col: 5, offset: 32925},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 1176, col: 5, offset: 32925},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1176, col: 5, offset: 32925},
							expr: &seqExpr{
								pos: position{line: 1176, col: 8, offset: 32928},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1176, col: 8, offset: 32928},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 1176, col: 12, offset: 32932},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 1176, col: 16, offset: 32936},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 1176, col: 20, offset: 32940},
										expr: &choiceExpr{
											pos: position{line: 1176, col: 22, offset: 32942},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1176, col: 22, offset: 32942},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 1176, col: 33, offset: 32953},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1176, col: 39, offset: 32959},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1176, col: 41, offset: 32961},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 1180, col: 1, offset: 33125},
			expr: &choiceExpr{
				pos: position{line: 1181, col: 5, offset: 33143},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1181, col: 5, offset: 33143},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 1181, col: 5, offset: 33143},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1181, col: 5, offset: 33143},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 1181, col: 7, offset: 33145},
										expr: &ruleRefExpr{
											pos:  position{line: 1181, col: 7, offset: 33145},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1181, col: 17, offset: 33155},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1181, col: 19, offset: 33157},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1184, col: 5, offset: 33221},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 1184, col: 5, offset: 33221},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1184, col: 5, offset: 33221},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1184, col: 7, offset: 33223},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1184, col: 11, offset: 33227},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1184, col: 13, offset: 33229},
										expr: &ruleRefExpr{
											pos:  position{line: 1184, col: 13, offset: 33229},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1184, col: 23, offset: 33239},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1184, col: 28, offset: 33244},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1184, col: 30, offset: 33246},
										expr: &ruleRefExpr{
											pos:  position{line: 1184, col: 30, offset: 33246},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1184, col: 40, offset: 33256},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 1184, col: 42, offset: 33258},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1187, col: 5, offset: 33357},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 1187, col: 5, offset: 33357},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1187, col: 5, offset: 33357},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1187, col: 10, offset: 33362},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1187, col: 12, offset: 33364},
										expr: &ruleRefExpr{
											pos:  position{line: 1187, col: 12, offset: 33364},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1187, col: 22, offset: 33374},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1187, col: 24, offset: 33376},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1190, col: 5, offset: 33447},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 1190, col: 5, offset: 33447},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1190, col: 5, offset: 33447},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1190, col: 7, offset: 33449},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1190, col: 11, offset: 33453},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1190, col: 13, offset: 33455},
										expr: &ruleRefExpr{
											pos:  position{line: 1190, col: 13, offset: 33455},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1190, col: 23, offset: 33465},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1193, col: 5, offset: 33533},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 1193, col: 5, offset: 33533},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 1197, col: 1, offset: 33570},
			expr: &choiceExpr{
				pos: position{line: 1198, col: 5, offset: 33582},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1198, col: 5, offset: 33582},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 1199, col: 5, offset: 33589},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 1201, col: 1, offset: 33594},
			expr: &actionExpr{
				pos: position{line: 1201, col: 12, offset: 33605},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 1201, col: 12, offset: 33605},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1201, col: 12, offset: 33605},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1201, col: 16, offset: 33609},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1201, col: 18, offset: 33611},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 1203, col: 1, offset: 33649},
			expr: &actionExpr{
				pos: position{line: 1203, col: 12, offset: 33660},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 1203, col: 12, offset: 33660},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1203, col: 12, offset: 33660},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1203, col: 14, offset: 33662},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 1203, col: 18, offset: 33666},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 1205, col: 1, offset: 33704},
			expr: &actionExpr{
				pos: position{line: 1206, col: 5, offset: 33715},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 1206, col: 5, offset: 33715},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1206, col: 5, offset: 33715},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1206, col: 7, offset: 33717},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 1206, col: 10, offset: 33720},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1206, col: 14, offset: 33724},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1206, col: 16, offset: 33726},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 1210, col: 1, offset: 33799},
			expr: &actionExpr{
				pos: position{line: 1211, col: 5, offset: 33810},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 1211, col: 5, offset: 33810},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1211, col: 5, offset: 33810},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1211, col: 7, offset: 33812},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 1211, col: 11, offset: 33816},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1211, col: 15, offset: 33820},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1211, col: 17, offset: 33822},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 1215, col: 1, offset: 33885},
			expr: &actionExpr{
				pos: position{line: 1216, col: 4, offset: 33893},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 1216, col: 4, offset: 33893},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 1216, col: 6, offset: 33895},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 1218, col: 1, offset: 33935},
			expr: &choiceExpr{
				pos: position{line: 1219, col: 5, offset: 33949},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1219, col: 5, offset: 33949},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 1220, col: 5, offset: 33964},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 1222, col: 1, offset: 33980},
			expr: &actionExpr{
				pos: position{line: 1222, col: 14, offset: 33993},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1222, col: 14, offset: 33993},
					expr: &charClassMatcher{
						pos:        position{line: 1222, col: 14, offset: 33993},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 1224, col: 1, offset: 34032},
			expr: &actionExpr{
				pos: position{line: 1225, col: 5, offset: 34051},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 1225, col: 5, offset: 34051},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1225, col: 5, offset: 34051},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1225, col: 9, offset: 34055},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 1227, col: 1, offset: 34098},
			expr: &choiceExpr{
				pos: position{line: 1228, col: 5, offset: 34114},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1228, col: 5, offset: 34114},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 1228, col: 5, offset: 34114},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1228, col: 5, offset: 34114},
									expr: &litMatcher{
										pos:        position{line: 1228, col: 5, offset: 34114},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1228, col: 10, offset: 34119},
									expr: &charClassMatcher{
										pos:        position{line: 1228, col: 10, offset: 34119},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 1228, col: 17, offset: 34126},
									val:        ".",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1228, col: 21, offset: 34130},
									expr: &charClassMatcher{
										pos:        position{line: 1228, col: 21, offset: 34130},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1228, col: 28, offset: 34137},
									expr: &ruleRefExpr{
										pos:  position{line: 1228, col: 28, offset: 34137},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1231, col: 5, offset: 34196},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 1231, col: 5, offset: 34196},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1231, col: 5, offset: 34196},
									expr: &litMatcher{
										pos:        position{line: 1231, col: 5, offset: 34196},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1231, col: 10, offset: 34201},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1231, col: 14, offset: 34205},
									expr: &charClassMatcher{
										pos:        position{line: 1231, col: 14, offset: 34205},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1231, col: 21, offset: 34212},
									expr: &ruleRefExpr{
										pos:  position{line: 1231, col: 21, offset: 34212},
										name: "ExponentPart",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 1235, col: 1, offset: 34268},
			expr: &seqExpr{
				pos: position{line: 1235, col: 16, offset: 34283},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1235, col: 16, offset: 34283},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 1235, col: 21, offset: 34288},
						expr: &charClassMatcher{
							pos:        position{line: 1235, col: 21, offset: 34288},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1235, col: 27, offset: 34294},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 1237, col: 1, offset: 34306},
			expr: &actionExpr{
				pos: position{line: 1237, col: 7, offset: 34312},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1237, col: 7, offset: 34312},
					expr: &ruleRefExpr{
						pos:  position{line: 1237, col: 7, offset: 34312},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 1239, col: 1, offset: 34354},
			expr: &charClassMatcher{
				pos:        position{line: 1239, col: 12, offset: 34365},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1241, col: 1, offset: 34378},
			expr: &choiceExpr{
				pos: position{line: 1242, col: 5, offset: 34395},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1242, col: 5, offset: 34395},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 1242, col: 5, offset: 34395},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1242, col: 5, offset: 34395},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1242, col: 9, offset: 34399},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1242, col: 11, offset: 34401},
										expr: &ruleRefExpr{
											pos:  position{line: 1242, col: 11, offset: 34401},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1242, col: 29, offset: 34419},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1243, col: 5, offset: 34456},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 1243, col: 5, offset: 34456},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1243, col: 5, offset: 34456},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1243, col: 9, offset: 34460},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1243, col: 11, offset: 34462},
										expr: &ruleRefExpr{
											pos:  position{line: 1243, col: 11, offset: 34462},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1243, col: 29, offset: 34480},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 1245, col: 1, offset: 34514},
			expr: &choiceExpr{
				pos: position{line: 1246, col: 5, offset: 34535},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1246, col: 5, offset: 34535},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1246, col: 5, offset: 34535},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1246, col: 5, offset: 34535},
									expr: &choiceExpr{
										pos: position{line: 1246, col: 7, offset: 34537},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1246, col: 7, offset: 34537},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1246, col: 13, offset: 34543},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1246, col: 26, offset: 34556,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1247, col: 5, offset: 34593},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1247, col: 5, offset: 34593},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1247, col: 5, offset: 34593},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1247, col: 10, offset: 34598},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1247, col: 12, offset: 34600},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 1249, col: 1, offset: 34634},
			expr: &actionExpr{
				pos: position{line: 1250, col: 5, offset: 34646},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 1250, col: 5, offset: 34646},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1250, col: 5, offset: 34646},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1250, col: 10, offset: 34651},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1250, col: 23, offset: 34664},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1250, col: 28, offset: 34669},
								expr: &ruleRefExpr{
									pos:  position{line: 1250, col: 28, offset: 34669},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 1252, col: 1, offset: 34731},
			expr: &choiceExpr{
				pos: position{line: 1253, col: 5, offset: 34748},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1253, col: 5, offset: 34748},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1254, col: 5, offset: 34765},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordChars",
			pos:  position{line: 1256, col: 1, offset: 34777},
			expr: &actionExpr{
				pos: position{line: 1256, col: 16, offset: 34792},
				run: (*parser).callonKeyWordChars1,
				expr: &charClassMatcher{
					pos:        position{line: 1256, col: 16, offset: 34792},
					val:        "[a-zA-Z_.:/%#@~]",
					chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
					ranges:     []rune{'a', 'z', 'A', 'Z'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 1258, col: 1, offset: 34841},
			expr: &choiceExpr{
				pos: position{line: 1259, col: 5, offset: 34857},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1259, col: 5, offset: 34857},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 1260, col: 5, offset: 34874},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 1262, col: 1, offset: 34881},
			expr: &actionExpr{
				pos: position{line: 1262, col: 14, offset: 34894},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 1262, col: 14, offset: 34894},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1262, col: 14, offset: 34894},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1262, col: 19, offset: 34899},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1262, col: 22, offset: 34902},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1262, col: 22, offset: 34902},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1262, col: 38, offset: 34918},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobPattern",
			pos:  position{line: 1264, col: 1, offset: 34954},
			expr: &actionExpr{
				pos: position{line: 1265, col: 5, offset: 34970},
				run: (*parser).callonGlobPattern1,
				expr: &seqExpr{
					pos: position{line: 1265, col: 5, offset: 34970},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1265, col: 5, offset: 34970},
							expr: &ruleRefExpr{
								pos:  position{line: 1265, col: 6, offset: 34971},
								name: "GlobProperStart",
							},
						},
						&andExpr{
							pos: position{line: 1265, col: 22, offset: 34987},
							expr: &ruleRefExpr{
								pos:  position{line: 1265, col: 23, offset: 34988},
								name: "GlobHasStar",
							},
						},
						&labeledExpr{
							pos:   position{line: 1265, col: 35, offset: 35000},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1265, col: 40, offset: 35005},
								name: "GlobStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1265, col: 50, offset: 35015},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1265, col: 55, offset: 35020},
								expr: &ruleRefExpr{
									pos:  position{line: 1265, col: 55, offset: 35020},
									name: "GlobRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobProperStart",
			pos:  position{line: 1269, col: 1, offset: 35089},
			expr: &seqExpr{
				pos: position{line: 1269, col: 19, offset: 35107},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1269, col: 19, offset: 35107},
						expr: &litMatcher{
							pos:        position{line: 1269, col: 19, offset: 35107},
							val:        "*",
							ignoreCase: false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1269, col: 24, offset: 35112},
						name: "KeyWordStart",
					},
				},
			},
		},
		{
			name: "GlobHasStar",
			pos:  position{line: 1270, col: 1, offset: 35125},
			expr: &seqExpr{
				pos: position{line: 1270, col: 15, offset: 35139},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1270, col: 15, offset: 35139},
						expr: &ruleRefExpr{
							pos:  position{line: 1270, col: 15, offset: 35139},
							name: "KeyWordRest",
						},
					},
					&litMatcher{
						pos:        position{line: 1270, col: 28, offset: 35152},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "GlobStart",
			pos:  position{line: 1272, col: 1, offset: 35157},
			expr: &choiceExpr{
				pos: position{line: 1273, col: 5, offset: 35171},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1273, col: 5, offset: 35171},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1274, col: 5, offset: 35188},
						name: "GlobEsc",
					},
					&actionExpr{
						pos: position{line: 1275, col: 5, offset: 35200},
						run: (*parser).callonGlobStart4,
						expr: &litMatcher{
							pos:        position{line: 1275, col: 5, offset: 35200},
							val:        "*",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GlobRest",
			pos:  position{line: 1277, col: 1, offset: 35224},
			expr: &choiceExpr{
				pos: position{line: 1278, col: 5, offset: 35237},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1278, col: 5, offset: 35237},
						name: "GlobStart",
					},
					&charClassMatcher{
						pos:        position{line: 1279, col: 5, offset: 35251},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "GlobEsc",
			pos:  position{line: 1281, col: 1, offset: 35258},
			expr: &actionExpr{
				pos: position{line: 1281, col: 11, offset: 35268},
				run: (*parser).callonGlobEsc1,
				expr: &seqExpr{
					pos: position{line: 1281, col: 11, offset: 35268},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1281, col: 11, offset: 35268},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1281, col: 16, offset: 35273},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1281, col: 19, offset: 35276},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1281, col: 19, offset: 35276},
										name: "GlobEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1281, col: 32, offset: 35289},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobEscape",
			pos:  position{line: 1283, col: 1, offset: 35325},
			expr: &choiceExpr{
				pos: position{line: 1284, col: 5, offset: 35340},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1284, col: 5, offset: 35340},
						run: (*parser).callonGlobEscape2,
						expr: &litMatcher{
							pos:        position{line: 1284, col: 5, offset: 35340},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1285, col: 5, offset: 35368},
						run: (*parser).callonGlobEscape4,
						expr: &litMatcher{
							pos:        position{line: 1285, col: 5, offset: 35368},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1286, col: 5, offset: 35398},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 1289, col: 1, offset: 35405},
			expr: &choiceExpr{
				pos: position{line: 1290, col: 5, offset: 35426},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1290, col: 5, offset: 35426},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1290, col: 5, offset: 35426},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1290, col: 5, offset: 35426},
									expr: &choiceExpr{
										pos: position{line: 1290, col: 7, offset: 35428},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1290, col: 7, offset: 35428},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1290, col: 13, offset: 35434},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1290, col: 26, offset: 35447,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1291, col: 5, offset: 35484},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1291, col: 5, offset: 35484},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1291, col: 5, offset: 35484},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1291, col: 10, offset: 35489},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1291, col: 12, offset: 35491},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 1293, col: 1, offset: 35525},
			expr: &choiceExpr{
				pos: position{line: 1294, col: 5, offset: 35544},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1294, col: 5, offset: 35544},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 1295, col: 5, offset: 35565},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 1297, col: 1, offset: 35580},
			expr: &choiceExpr{
				pos: position{line: 1298, col: 5, offset: 35601},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1298, col: 5, offset: 35601},
						val:        "'",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1299, col: 5, offset: 35609},
						run: (*parser).callonSingleCharEscape3,
						expr: &litMatcher{
							pos:        position{line: 1299, col: 5, offset: 35609},
							val:        "\"",
							ignoreCase: false,
						},
					},
					&litMatcher{
						pos:        position{line: 1300, col: 5, offset: 35649},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1301, col: 5, offset: 35658},
						run: (*parser).callonSingleCharEscape6,
						expr: &litMatcher{
							pos:        position{line: 1301, col: 5, offset: 35658},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1302, col: 5, offset: 35687},
						run: (*parser).callonSingleCharEscape8,
						expr: &litMatcher{
							pos:        position{line: 1302, col: 5, offset: 35687},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1303, col: 5, offset: 35716},
						run: (*parser).callonSingleCharEscape10,
						expr: &litMatcher{
							pos:        position{line: 1303, col: 5, offset: 35716},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1304, col: 5, offset: 35745},
						run: (*parser).callonSingleCharEscape12,
						expr: &litMatcher{
							pos:        position{line: 1304, col: 5, offset: 35745},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1305, col: 5, offset: 35774},
						run: (*parser).callonSingleCharEscape14,
						expr: &litMatcher{
							pos:        position{line: 1305, col: 5, offset: 35774},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1306, col: 5, offset: 35803},
						run: (*parser).callonSingleCharEscape16,
						expr: &litMatcher{
							pos:        position{line: 1306, col: 5, offset: 35803},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 1308, col: 1, offset: 35829},
			expr: &choiceExpr{
				pos: position{line: 1309, col: 5, offset: 35847},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1309, col: 5, offset: 35847},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 1309, col: 5, offset: 35847},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1310, col: 5, offset: 35875},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 1310, col: 5, offset: 35875},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1311, col: 5, offset: 35903},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 1313, col: 1, offset: 35909},
			expr: &choiceExpr{
				pos: position{line: 1314, col: 5, offset: 35927},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1314, col: 5, offset: 35927},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 1314, col: 5, offset: 35927},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1314, col: 5, offset: 35927},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1314, col: 9, offset: 35931},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1314, col: 16, offset: 35938},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1314, col: 16, offset: 35938},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1314, col: 25, offset: 35947},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1314, col: 34, offset: 35956},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1314, col: 43, offset: 35965},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1317, col: 5, offset: 36028},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 1317, col: 5, offset: 36028},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1317, col: 5, offset: 36028},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1317, col: 9, offset: 36032},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1317, col: 13, offset: 36036},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1317, col: 20, offset: 36043},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1317, col: 20, offset: 36043},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 1317, col: 29, offset: 36052},
												expr: &ruleRefExpr{
													pos:  position{line: 1317, col: 29, offset: 36052},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1317, col: 39, offset: 36062},
												expr: &ruleRefExpr{
													pos:  position{line: 1317, col: 39, offset: 36062},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1317, col: 49, offset: 36072},
												expr: &ruleRefExpr{
													pos:  position{line: 1317, col: 49, offset: 36072},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1317, col: 59, offset: 36082},
												expr: &ruleRefExpr{
													pos:  position{line: 1317, col: 59, offset: 36082},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1317, col: 69, offset: 36092},
												expr: &ruleRefExpr{
													pos:  position{line: 1317, col: 69, offset: 36092},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1317, col: 80, offset: 36103},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpPattern",
			pos:  position{line: 1321, col: 1, offset: 36157},
			expr: &actionExpr{
				pos: position{line: 1322, col: 5, offset: 36175},
				run: (*parser).callonRegexpPattern1,
				expr: &seqExpr{
					pos: position{line: 1322, col: 5, offset: 36175},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1322, col: 5, offset: 36175},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1322, col: 9, offset: 36179},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1322, col: 14, offset: 36184},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 1322, col: 25, offset: 36195},
							val:        "/",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1322, col: 29, offset: 36199},
							expr: &ruleRefExpr{
								pos:  position{line: 1322, col: 30, offset: 36200},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 1324, col: 1, offset: 36235},
			expr: &actionExpr{
				pos: position{line: 1325, col: 5, offset: 36250},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1325, col: 5, offset: 36250},
					expr: &choiceExpr{
						pos: position{line: 1325, col: 6, offset: 36251},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 1325, col: 6, offset: 36251},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&seqExpr{
								pos: position{line: 1325, col: 15, offset: 36260},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1325, col: 15, offset: 36260},
										val:        "\\",
										ignoreCase: false,
									},
									&anyMatcher{
										line: 1325, col: 20, offset: 36265,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 1327, col: 1, offset: 36301},
			expr: &charClassMatcher{
				pos:        position{line: 1328, col: 5, offset: 36317},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 1330, col: 1, offset: 36332},
			expr: &oneOrMoreExpr{
				pos: position{line: 1330, col: 6, offset: 36337},
				expr: &ruleRefExpr{
					pos:  position{line: 1330, col: 6, offset: 36337},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1332, col: 1, offset: 36348},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1332, col: 6, offset: 36353},
				expr: &ruleRefExpr{
					pos:  position{line: 1332, col: 6, offset: 36353},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 1334, col: 1, offset: 36364},
			expr: &choiceExpr{
				pos: position{line: 1335, col: 5, offset: 36377},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1335, col: 5, offset: 36377},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 1336, col: 5, offset: 36392},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 1337, col: 5, offset: 36411},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 1339, col: 1, offset: 36420},
			expr: &anyMatcher{
				line: 1340, col: 5, offset: 36440,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 1342, col: 1, offset: 36443},
			expr: &choiceExpr{
				pos: position{line: 1343, col: 5, offset: 36471},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1343, col: 5, offset: 36471},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1344, col: 5, offset: 36480},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1345, col: 5, offset: 36489},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1346, col: 5, offset: 36498},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1347, col: 5, offset: 36506},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1348, col: 5, offset: 36519},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 1350, col: 1, offset: 36529},
			expr: &charClassMatcher{
				pos:        position{line: 1351, col: 5, offset: 36548},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 1357, col: 1, offset: 36878},
			expr: &ruleRefExpr{
				pos:  position{line: 1360, col: 5, offset: 36949},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1362, col: 1, offset: 36968},
			expr: &seqExpr{
				pos: position{line: 1363, col: 5, offset: 36989},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1363, col: 5, offset: 36989},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1363, col: 10, offset: 36994},
						expr: &seqExpr{
							pos: position{line: 1363, col: 11, offset: 36995},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1363, col: 11, offset: 36995},
									expr: &litMatcher{
										pos:        position{line: 1363, col: 12, offset: 36996},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1363, col: 17, offset: 37001},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1363, col: 35, offset: 37019},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1365, col: 1, offset: 37025},
			expr: &seqExpr{
				pos: position{line: 1366, col: 5, offset: 37047},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1366, col: 5, offset: 37047},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1366, col: 10, offset: 37052},
						expr: &seqExpr{
							pos: position{line: 1366, col: 11, offset: 37053},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1366, col: 11, offset: 37053},
									expr: &ruleRefExpr{
										pos:  position{line: 1366, col: 12, offset: 37054},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1366, col: 27, offset: 37069},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1368, col: 1, offset: 37088},
			expr: &seqExpr{
				pos: position{line: 1368, col: 7, offset: 37094},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1368, col: 7, offset: 37094},
						expr: &ruleRefExpr{
							pos:  position{line: 1368, col: 7, offset: 37094},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1368, col: 19, offset: 37106},
						name: "LineTerminator",
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 1370, col: 1, offset: 37122},
			expr: &choiceExpr{
				pos: position{line: 1370, col: 7, offset: 37128},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1370, col: 7, offset: 37128},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 1370, col: 11, offset: 37132},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1372, col: 1, offset: 37137},
			expr: &notExpr{
				pos: position{line: 1372, col: 7, offset: 37143},
				expr: &anyMatcher{
					line: 1372, col: 8, offset: 37144,
				},
			},
		},
	},
}

func (c *current) onstart1(ast interface{}) (interface{}, error) {
	return ast, nil
}

func (p *parser) callonstart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart1(stack["ast"])
}

func (c *current) onSequential2(consts, first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": append([]interface{}{first}, (rest.([]interface{}))...), "consts": consts}, nil

}

func (p *parser) callonSequential2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential2(stack["consts"], stack["first"], stack["rest"])
}

func (c *current) onSequential12(consts, op interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": []interface{}{op}, "consts": consts}, nil

}

func (p *parser) callonSequential12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential12(stack["consts"], stack["op"])
}

func (c *current) onSequentialTail1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonSequentialTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequentialTail1(stack["p"])
}

func (c *current) onConsts4() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonConsts4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConsts4()
}

func (c *current) onConst1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonConst1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConst1(stack["v"])
}

func (c *current) onConstDef2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"name": id, "expr": expr}, nil

}

func (p *parser) callonConstDef2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDef2(stack["id"], stack["expr"])
}

func (c *current) onConstDef13(id, typ interface{}) (interface{}, error) {
	return map[string]interface{}{

		"name": id,

		"expr": map[string]interface{}{"kind": "TypeValue", "value": map[string]interface{}{"kind": "TypeDef", "name": id, "type": typ}}}, nil

}

func (p *parser) callonConstDef13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDef13(stack["id"], stack["typ"])
}

func (c *current) onOperation2(procArray interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Parallel", "procs": procArray}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["procArray"])
}

func (c *current) onOperation12(expr, cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": expr, "cases": cases}, nil

}

func (p *parser) callonOperation12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation12(stack["expr"], stack["cases"])
}

func (c *current) onOperation25(cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": nil, "cases": cases}, nil

}

func (p *parser) callonOperation25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation25(stack["cases"])
}

func (c *current) onOperation35(trunks interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": trunks}, nil

}

func (p *parser) callonOperation35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation35(stack["trunks"])
}

func (c *current) onOperation47(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation47(stack["a"])
}

func (c *current) onOperation53(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation53(stack["a"])
}

func (c *current) onOperation63(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Search", "expr": expr}, nil

}

func (p *parser) callonOperation63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation63(stack["expr"])
}

func (c *current) onOperation69(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation69(stack["expr"])
}

func (c *current) onOperation72(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation72(stack["expr"])
}

func (c *current) onLeg1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLeg1(stack["s"])
}

func (c *current) onSwitchLeg1(expr, proc interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": expr, "proc": proc}, nil

}

func (p *parser) callonSwitchLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchLeg1(stack["expr"], stack["proc"])
}

func (c *current) onCase2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonCase2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase2(stack["expr"])
}

func (c *current) onCase8() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonCase8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase8()
}

func (c *current) onFromLeg2(source, seq interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Trunk", "source": source, "seq": seq}, nil

}

func (p *parser) callonFromLeg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromLeg2(stack["source"], stack["seq"])
}

func (c *current) onFromLeg10(source interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Trunk", "source": source, "seq": nil}, nil

}

func (p *parser) callonFromLeg10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromLeg10(stack["source"])
}

func (c *current) onFromHead1(src interface{}) (interface{}, error) {
	return src, nil
}

func (p *parser) callonFromHead1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromHead1(stack["src"])
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor13(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor13(stack["expr"])
}

func (c *current) onSearchExpr4(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Term", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonSearchExpr4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr4(stack["v"])
}

func (c *current) onSearchExpr12(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Term", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonSearchExpr12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr12(stack["v"])
}

func (c *current) onSearchExpr18() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil

}

func (p *parser) callonSearchExpr18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr18()
}

func (c *current) onSearchPredicate2(lhs, op, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": op, "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonSearchPredicate2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPredicate2(stack["lhs"], stack["op"], stack["rhs"])
}

func (c *current) onSearchPredicate12(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchPredicate12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPredicate12(stack["first"], stack["rest"])
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onGlob1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Glob", "pattern": pattern}, nil

}

func (p *parser) callonGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlob1(stack["pattern"])
}

func (c *current) onRegexp1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Regexp", "pattern": pattern}, nil

}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["pattern"])
}

func (c *current) onAggregation2(keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Summarize", "keys": keys, "aggs": nil, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["keys"], stack["limit"])
}

func (c *current) onAggregation10(aggs, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"kind": "Summarize", "keys": nil, "aggs": aggs, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation10(stack["aggs"], stack["keys"], stack["limit"])
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAggAssignment2(lval, agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lval, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment2(stack["lval"], stack["agg"])
}

func (c *current) onAggAssignment11(agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment11(stack["agg"])
}

func (c *current) onAgg1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"kind": "Agg", "name": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonAgg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAgg1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onAggAssignments1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonAggAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSortProc8(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc8(stack["l"])
}

func (c *current) onSortProc1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var proc = map[string]interface{}{"kind": "Sort", "args": list, "order": "asc", "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		proc["order"] = "desc"
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			proc["nullsfirst"] = true
		}
	}
	return proc, nil

}

func (p *parser) callonSortProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopProc6(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopProc6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc6(stack["n"])
}

func (c *current) onTopProc18(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopProc18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc18(stack["f"])
}

func (c *current) onTopProc1(limit, flush, fields interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Top", "limit": 0, "args": nil, "flush": false}
	if limit != nil {
		proc["limit"] = limit
	}
	if fields != nil {
		proc["args"] = fields
	}
	if flush != nil {
		proc["flush"] = true
	}
	return proc, nil

}

func (p *parser) callonTopProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cut", "args": args}, nil

}

func (p *parser) callonCutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutProc1(stack["args"])
}

func (c *current) onDropProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Drop", "args": args}, nil

}

func (p *parser) callonDropProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropProc1(stack["args"])
}

func (c *current) onHeadProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": count}, nil
}

func (p *parser) callonHeadProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc2(stack["count"])
}

func (c *current) onHeadProc8() (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": 1}, nil
}

func (p *parser) callonHeadProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc8()
}

func (c *current) onTailProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": count}, nil
}

func (p *parser) callonTailProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc2(stack["count"])
}

func (c *current) onTailProc8() (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": 1}, nil
}

func (p *parser) callonTailProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc8()
}

func (c *current) onWhereProc1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Where", "expr": expr}, nil

}

func (p *parser) callonWhereProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereProc1(stack["expr"])
}

func (c *current) onUniqProc2() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": true}, nil

}

func (p *parser) callonUniqProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc2()
}

func (c *current) onUniqProc7() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": false}, nil

}

func (p *parser) callonUniqProc7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc7()
}

func (c *current) onPutProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Put", "args": args}, nil

}

func (p *parser) callonPutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutProc1(stack["args"])
}

func (c *current) onRenameProc9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameProc9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc9(stack["cl"])
}

func (c *current) onRenameProc1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Rename", "args": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc1(stack["first"], stack["rest"])
}

func (c *current) onFuseProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Fuse"}, nil

}

func (p *parser) callonFuseProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseProc1()
}

func (c *current) onShapeProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Shape"}, nil

}

func (p *parser) callonShapeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShapeProc1()
}

func (c *current) onJoinProc2(style, leftKey, rightKey, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Join", "style": style, "left_key": leftKey, "right_key": rightKey, "args": nil}
	if columns != nil {
		proc["args"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc2(stack["style"], stack["leftKey"], stack["rightKey"], stack["columns"])
}

func (c *current) onJoinProc22(style, key, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Join", "style": style, "left_key": key, "right_key": key, "args": nil}
	if columns != nil {
		proc["args"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc22(stack["style"], stack["key"], stack["columns"])
}

func (c *current) onJoinStyle2() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle2()
}

func (c *current) onJoinStyle6() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle6()
}

func (c *current) onJoinStyle10() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle10()
}

func (c *current) onJoinStyle14() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonJoinStyle14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle14()
}

func (c *current) onJoinStyle18() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle18()
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onSampleProc1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "consts": []interface{}{}, "procs": []interface{}{

		map[string]interface{}{"kind": "Summarize",

			"keys": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "shape"},

				"rhs": map[string]interface{}{"kind": "Call", "name": "typeof",

					"args": []interface{}{e},

					"where": nil}}},

			"aggs": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "sample"},

				"rhs": map[string]interface{}{"kind": "Agg",

					"name": "any",

					"expr": e,

					"where": nil}}},

			"limit": 0},

		map[string]interface{}{"kind": "Yield",

			"exprs": []interface{}{

				map[string]interface{}{"kind": "ID", "name": "sample"}}}}}, nil

}

func (p *parser) callonSampleProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleProc1(stack["e"])
}

func (c *current) onOpAssignment1(a interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpAssignment", "assignments": a}, nil

}

func (p *parser) callonOpAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpAssignment1(stack["a"])
}

func (c *current) onSampleExpr2(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonSampleExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr2(stack["lval"])
}

func (c *current) onSampleExpr7() (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": "this"}, nil
}

func (p *parser) callonSampleExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr7()
}

func (c *current) onFromProc1(source interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": []interface{}{map[string]interface{}{"kind": "Trunk", "source": source}}}, nil

}

func (p *parser) callonFromProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromProc1(stack["source"])
}

func (c *current) onFile1(path, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "File", "path": path, "format": format, "layout": layout}, nil

}

func (p *parser) callonFile1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile1(stack["path"], stack["format"], stack["layout"])
}

func (c *current) onFrom1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonFrom1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrom1(stack["body"])
}

func (c *current) onPool1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonPool1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPool1(stack["body"])
}

func (c *current) onPoolBody1(spec, at, over, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pool", "spec": spec, "at": at, "range": over, "scan_order": order}, nil

}

func (p *parser) callonPoolBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBody1(stack["spec"], stack["at"], stack["over"], stack["order"])
}

func (c *current) onGet1(url, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "HTTP", "url": url, "format": format, "layout": layout}, nil

}

func (p *parser) callonGet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGet1(stack["url"], stack["format"], stack["layout"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onPath2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonPath2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath2(stack["v"])
}

func (c *current) onPath5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPath5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath5()
}

func (c *current) onPoolAt1(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonPoolAt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolAt1(stack["id"])
}

func (c *current) onKSUID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKSUID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKSUID1()
}

func (c *current) onPoolRange1(lower, upper interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Range", "lower": lower, "upper": upper}, nil

}

func (p *parser) callonPoolRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolRange1(stack["lower"], stack["upper"])
}

func (c *current) onPoolSpec2(pool, commit, meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": pool, "commit": commit, "meta": meta}, nil

}

func (p *parser) callonPoolSpec2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec2(stack["pool"], stack["commit"], stack["meta"])
}

func (c *current) onPoolSpec12(meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": nil, "commit": nil, "meta": meta}, nil

}

func (p *parser) callonPoolSpec12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec12(stack["meta"])
}

func (c *current) onPoolCommit1(commit interface{}) (interface{}, error) {
	return commit, nil
}

func (p *parser) callonPoolCommit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolCommit1(stack["commit"])
}

func (c *current) onPoolMeta1(meta interface{}) (interface{}, error) {
	return meta, nil
}

func (p *parser) callonPoolMeta1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolMeta1(stack["meta"])
}

func (c *current) onPoolIdentifier1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPoolIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolIdentifier1()
}

func (c *current) onLayoutArg1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Layout", "keys": keys, "order": order}, nil

}

func (p *parser) callonLayoutArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLayoutArg1(stack["keys"], stack["order"])
}

func (c *current) onFormatArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonFormatArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArg1(stack["val"])
}

func (c *current) onOrderSuffix2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix2()
}

func (c *current) onOrderSuffix4() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderSuffix4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix4()
}

func (c *current) onOrderSuffix6() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix6()
}

func (c *current) onOrderArg2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg2()
}

func (c *current) onOrderArg8() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderArg8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg8()
}

func (c *current) onPassProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Pass"}, nil

}

func (p *parser) callonPassProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassProc1()
}

func (c *current) onExplodeProc1(args, typ, as interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Explode", "args": args, "as": as, "type": typ}, nil

}

func (p *parser) callonExplodeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplodeProc1(stack["args"], stack["typ"], stack["as"])
}

func (c *current) onMergeProc1(field interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Merge", "field": field}, nil

}

func (p *parser) callonMergeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMergeProc1(stack["field"])
}

func (c *current) onOverProc2(over interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Let", "locals": nil, "over": over}, nil

}

func (p *parser) callonOverProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverProc2(stack["over"])
}

func (c *current) onOverProc5(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Over", "exprs": exprs, "scope": nil, "as": ""}, nil

}

func (p *parser) callonOverProc5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverProc5(stack["exprs"])
}

func (c *current) onScopedOver1(exprs, as, scope interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Over", "exprs": exprs, "scope": scope, "as": as}, nil

}

func (p *parser) callonScopedOver1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScopedOver1(stack["exprs"], stack["as"], stack["scope"])
}

func (c *current) onOverWith1(exprs, locals, scope interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Let", "locals": locals, "over": map[string]interface{}{"kind": "Over", "exprs": exprs, "scope": scope, "as": ""}}, nil

}

func (p *parser) callonOverWith1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverWith1(stack["exprs"], stack["locals"], stack["scope"])
}

func (c *current) onAs2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonAs2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAs2(stack["id"])
}

func (c *current) onAs9() (interface{}, error) {
	return "", nil
}

func (p *parser) callonAs9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAs9()
}

func (c *current) onLetProc2(locals, over interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Let", "locals": locals, "over": over}, nil

}

func (p *parser) callonLetProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetProc2(stack["locals"], stack["over"])
}

func (c *current) onScope1(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonScope1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope1(stack["seq"])
}

func (c *current) onLetAssignments7(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonLetAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetAssignments7(stack["a"])
}

func (c *current) onLetAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLetAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetAssignments1(stack["first"], stack["rest"])
}

func (c *current) onLetAssignment2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"name": id, "expr": expr}, nil

}

func (p *parser) callonLetAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetAssignment2(stack["id"], stack["expr"])
}

func (c *current) onLetAssignment11(id interface{}) (interface{}, error) {
	return map[string]interface{}{"name": id, "expr": map[string]interface{}{"kind": "ID", "name": id}}, nil

}

func (p *parser) callonLetAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetAssignment11(stack["id"])
}

func (c *current) onYieldProc1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Yield", "exprs": exprs}, nil

}

func (p *parser) callonYieldProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYieldProc1(stack["exprs"])
}

func (c *current) onTypeArg1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeArg1(stack["typ"])
}

func (c *current) onAsArg1(lhs interface{}) (interface{}, error) {
	return lhs, nil
}

func (p *parser) callonAsArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsArg1(stack["lhs"])
}

func (c *current) onLvals7(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonLvals7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals7(stack["lval"])
}

func (c *current) onLvals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLvals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals1(stack["first"], stack["rest"])
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignments7(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments7(stack["a"])
}

func (c *current) onAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr2(condition, thenClause, elseClause interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Conditional", "cond": condition, "then": thenClause, "else": elseClause}, nil

}

func (p *parser) callonConditionalExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr2(stack["condition"], stack["thenClause"], stack["elseClause"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onComparisonExpr2(lhs, op, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": op, "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonComparisonExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr2(stack["lhs"], stack["op"], stack["rhs"])
}

func (c *current) onComparisonExpr12(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": "~", "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonComparisonExpr12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr12(stack["lhs"], stack["rhs"])
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onFuncExpr2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr2(stack["first"], stack["rest"])
}

func (c *current) onFuncExpr9(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr9(stack["first"], stack["rest"])
}

func (c *current) onCast1(typ, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": expr, "type": typ}, nil

}

func (p *parser) callonCast1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCast1(stack["typ"], stack["expr"])
}

func (c *current) onFunction3(fn, args, where interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": fn, "args": args, "where": where}, nil

}

func (p *parser) callonFunction3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction3(stack["fn"], stack["args"], stack["where"])
}

func (c *current) onGrep2(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Grep", "pattern": pattern, "expr": map[string]interface{}{"kind": "ID", "name": "this"}}, nil

}

func (p *parser) callonGrep2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrep2(stack["pattern"])
}

func (c *current) onGrep12(pattern, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Grep", "pattern": pattern, "expr": expr}, nil

}

func (p *parser) callonGrep12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrep12(stack["pattern"], stack["expr"])
}

func (c *current) onPattern4(s interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "String", "text": s}, nil

}

func (p *parser) callonPattern4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPattern4(stack["s"])
}

func (c *current) onOptionalExprs3() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonOptionalExprs3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalExprs3()
}

func (c *current) onExprs7(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonExprs7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs7(stack["e"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr1(stack["first"], stack["rest"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref13(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": nil, "rhs": to}}, nil

}

func (p *parser) callonDeref13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref13(stack["to"])
}

func (c *current) onDeref22(from interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": nil}}, nil

}

func (p *parser) callonDeref22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref22(stack["from"])
}

func (c *current) onDeref31(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref31(stack["expr"])
}

func (c *current) onDeref37(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref37(stack["id"])
}

func (c *current) onPrimary7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary7(stack["expr"])
}

func (c *current) onRecord1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RecordExpr", "elems": elems}, nil

}

func (p *parser) callonRecord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecord1(stack["elems"])
}

func (c *current) onRecordElems2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonRecordElems2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems2(stack["first"], stack["rest"])
}

func (c *current) onRecordElems9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonRecordElems9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems9()
}

func (c *current) onRecordElemTail1(elem interface{}) (interface{}, error) {
	return elem, nil
}

func (p *parser) callonRecordElemTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElemTail1(stack["elem"])
}

func (c *current) onSpread1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Spread", "expr": expr}, nil

}

func (p *parser) callonSpread1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpread1(stack["expr"])
}

func (c *current) onField1(name, value interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Field", "name": name, "value": value}, nil

}

func (p *parser) callonField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField1(stack["name"], stack["value"])
}

func (c *current) onArray1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ArrayExpr", "exprs": exprs}, nil

}

func (p *parser) callonArray1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArray1(stack["exprs"])
}

func (c *current) onSet1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SetExpr", "exprs": exprs}, nil

}

func (p *parser) callonSet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSet1(stack["exprs"])
}

func (c *current) onMap1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "MapExpr", "entries": exprs}, nil

}

func (p *parser) callonMap1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMap1(stack["exprs"])
}

func (c *current) onEntries2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonEntries2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries2(stack["first"], stack["rest"])
}

func (c *current) onEntries9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonEntries9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries9()
}

func (c *current) onEntryTail1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonEntryTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntryTail1(stack["e"])
}

func (c *current) onEntry1(key, value interface{}) (interface{}, error) {
	return map[string]interface{}{"key": key, "value": value}, nil

}

func (p *parser) callonEntry1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntry1(stack["key"], stack["value"])
}

func (c *current) onSQLProc1(selection, from, joins, where, groupby, having, orderby, limit interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "SQLExpr",

		"select": selection,

		"from": from,

		"joins": joins,

		"where": where,

		"group_by": groupby,

		"having": having,

		"order_by": orderby,

		"limit": limit}, nil

}

func (p *parser) callonSQLProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLProc1(stack["selection"], stack["from"], stack["joins"], stack["where"], stack["groupby"], stack["having"], stack["orderby"], stack["limit"])
}

func (c *current) onSQLSelect2() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLSelect2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect2()
}

func (c *current) onSQLSelect7(assignments interface{}) (interface{}, error) {
	return assignments, nil
}

func (p *parser) callonSQLSelect7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect7(stack["assignments"])
}

func (c *current) onSQLAssignment2(rhs, lhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonSQLAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment2(stack["rhs"], stack["lhs"])
}

func (c *current) onSQLAssignment11(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonSQLAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment11(stack["expr"])
}

func (c *current) onSQLAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments7(stack["expr"])
}

func (c *current) onSQLAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSQLFrom2(table, alias interface{}) (interface{}, error) {
	return map[string]interface{}{"table": table, "alias": alias}, nil

}

func (p *parser) callonSQLFrom2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom2(stack["table"], stack["alias"])
}

func (c *current) onSQLFrom12() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLFrom12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom12()
}

func (c *current) onSQLAlias2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias2(stack["id"])
}

func (c *current) onSQLAlias9(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias9(stack["id"])
}

func (c *current) onSQLJoins7(join interface{}) (interface{}, error) {
	return join, nil
}

func (p *parser) callonSQLJoins7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins7(stack["join"])
}

func (c *current) onSQLJoins1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLJoins1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins1(stack["first"], stack["rest"])
}

func (c *current) onSQLJoin1(style, table, alias, leftKey, rightKey interface{}) (interface{}, error) {
	return map[string]interface{}{

		"table": table,

		"style": style,

		"left_key": leftKey,

		"right_key": rightKey,

		"alias": alias}, nil

}

func (p *parser) callonSQLJoin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoin1(stack["style"], stack["table"], stack["alias"], stack["leftKey"], stack["rightKey"])
}

func (c *current) onSQLJoinStyle2(style interface{}) (interface{}, error) {
	return style, nil
}

func (p *parser) callonSQLJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle2(stack["style"])
}

func (c *current) onSQLJoinStyle11() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonSQLJoinStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle11()
}

func (c *current) onSQLWhere1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLWhere1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLWhere1(stack["expr"])
}

func (c *current) onSQLGroupBy1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonSQLGroupBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLGroupBy1(stack["columns"])
}

func (c *current) onSQLHaving1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLHaving1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLHaving1(stack["expr"])
}

func (c *current) onSQLOrderBy1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SQLOrderBy", "keys": keys, "order": order}, nil

}

func (p *parser) callonSQLOrderBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrderBy1(stack["keys"], stack["order"])
}

func (c *current) onSQLOrder2(dir interface{}) (interface{}, error) {
	return dir, nil
}

func (p *parser) callonSQLOrder2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder2(stack["dir"])
}

func (c *current) onSQLOrder9() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonSQLOrder9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder9()
}

func (c *current) onSQLLimit2(count interface{}) (interface{}, error) {
	return count, nil
}

func (p *parser) callonSQLLimit2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit2(stack["count"])
}

func (c *current) onSQLLimit9() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonSQLLimit9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit9()
}

func (c *current) onSELECT1() (interface{}, error) {
	return "select", nil
}

func (p *parser) callonSELECT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSELECT1()
}

func (c *current) onAS1() (interface{}, error) {
	return "as", nil
}

func (p *parser) callonAS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAS1()
}

func (c *current) onFROM1() (interface{}, error) {
	return "from", nil
}

func (p *parser) callonFROM1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFROM1()
}

func (c *current) onJOIN1() (interface{}, error) {
	return "join", nil
}

func (p *parser) callonJOIN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJOIN1()
}

func (c *current) onWHERE1() (interface{}, error) {
	return "where", nil
}

func (p *parser) callonWHERE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWHERE1()
}

func (c *current) onGROUP1() (interface{}, error) {
	return "group", nil
}

func (p *parser) callonGROUP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGROUP1()
}

func (c *current) onBY1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonBY1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBY1()
}

func (c *current) onHAVING1() (interface{}, error) {
	return "having", nil
}

func (p *parser) callonHAVING1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHAVING1()
}

func (c *current) onORDER1() (interface{}, error) {
	return "order", nil
}

func (p *parser) callonORDER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onORDER1()
}

func (c *current) onON1() (interface{}, error) {
	return "on", nil
}

func (p *parser) callonON1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onON1()
}

func (c *current) onLIMIT1() (interface{}, error) {
	return "limit", nil
}

func (p *parser) callonLIMIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIMIT1()
}

func (c *current) onASC1() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonASC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onASC1()
}

func (c *current) onDESC1() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonDESC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDESC1()
}

func (c *current) onANTI1() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonANTI1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onANTI1()
}

func (c *current) onLEFT1() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonLEFT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLEFT1()
}

func (c *current) onRIGHT1() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonRIGHT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRIGHT1()
}

func (c *current) onINNER1() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonINNER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINNER1()
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "float64", "text": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "int64", "text": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "null", "text": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onBytesLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bytes", "text": string(c.text)}, nil

}

func (p *parser) callonBytesLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBytesLiteral1()
}

func (c *current) onTypeLiteral1(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonTypeLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeLiteral1(stack["typ"])
}

func (c *current) onCastType3(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonCastType3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCastType3(stack["typ"])
}

func (c *current) onAmbiguousType2(name interface{}) (interface{}, error) {
	return name, nil
}

func (p *parser) callonAmbiguousType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType2(stack["name"])
}

func (c *current) onAmbiguousType8(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeDef", "name": name, "type": typ}, nil

}

func (p *parser) callonAmbiguousType8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType8(stack["name"], stack["typ"])
}

func (c *current) onAmbiguousType17(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType17(stack["name"])
}

func (c *current) onAmbiguousType20(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonAmbiguousType20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType20(stack["u"])
}

func (c *current) onTypeUnion1(types interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeUnion", "types": types}, nil

}

func (p *parser) callonTypeUnion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeUnion1(stack["types"])
}

func (c *current) onTypeList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeList1(stack["first"], stack["rest"])
}

func (c *current) onTypeListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeListTail1(stack["typ"])
}

func (c *current) onComplexType2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType2(stack["fields"])
}

func (c *current) onComplexType10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexType10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType10(stack["typ"])
}

func (c *current) onComplexType18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexType18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType18(stack["typ"])
}

func (c *current) onComplexType26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexType26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType26(stack["keyType"], stack["valType"])
}

func (c *current) onTemplateLiteral1(v interface{}) (interface{}, error) {
	if len(v.([]interface{})) == 0 {
		return map[string]interface{}{"kind": "Primitive", "type": "string", "text": ""}, nil
	}
	return makeTemplateExprChain(v), nil

}

func (p *parser) callonTemplateLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteral1(stack["v"])
}

func (c *current) onTemplateLiteralParts2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts2(stack["v"])
}

func (c *current) onTemplateLiteralParts9(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts9(stack["v"])
}

func (c *current) onTemplateDoubleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateDoubleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedPart3(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar2(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar7(stack["v"])
}

func (c *current) onTemplateSingleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateSingleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedPart3(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar2(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar7(stack["v"])
}

func (c *current) onTemplateExpr1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonTemplateExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateExpr1(stack["e"])
}

func (c *current) onPrimitiveType1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveType1()
}

func (c *current) onTypeFieldList2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList2(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldList9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonTypeFieldList9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList9()
}

func (c *current) onTypeFieldListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTail1(stack["typ"])
}

func (c *current) onTypeField1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeField1(stack["name"], stack["typ"])
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return "in", nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onIdentifierName19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName19()
}

func (c *current) onIdentifierName21(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName21(stack["id"])
}

func (c *current) onTime1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "time", "text": string(c.text)}, nil

}

func (p *parser) callonTime1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTime1()
}

func (c *current) onDuration1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "duration", "text": string(c.text)}, nil

}

func (p *parser) callonDuration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDuration1()
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordChars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordChars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordChars1()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onGlobPattern1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil

}

func (p *parser) callonGlobPattern1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobPattern1(stack["head"], stack["tail"])
}

func (c *current) onGlobStart4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonGlobStart4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobStart4()
}

func (c *current) onGlobEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonGlobEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEsc1(stack["s"])
}

func (c *current) onGlobEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonGlobEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape2()
}

func (c *current) onGlobEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonGlobEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape4()
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onSingleCharEscape3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleCharEscape3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape3()
}

func (c *current) onSingleCharEscape6() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape6()
}

func (c *current) onSingleCharEscape8() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape8()
}

func (c *current) onSingleCharEscape10() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape10()
}

func (c *current) onSingleCharEscape12() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape12()
}

func (c *current) onSingleCharEscape14() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape14()
}

func (c *current) onSingleCharEscape16() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape16()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexpPattern1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexpPattern1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpPattern1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
