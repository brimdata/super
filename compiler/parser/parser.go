// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/brimdata/zed/reglob"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 7, col: 1, offset: 26},
			expr: &actionExpr{
				pos: position{line: 7, col: 9, offset: 34},
				run: (*parser).callonstart1,
				expr: &seqExpr{
					pos: position{line: 7, col: 9, offset: 34},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 7, col: 9, offset: 34},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 7, col: 12, offset: 37},
							label: "ast",
							expr: &ruleRefExpr{
								pos:  position{line: 7, col: 16, offset: 41},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 27, offset: 52},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 30, offset: 55},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Sequential",
			pos:  position{line: 9, col: 1, offset: 80},
			expr: &choiceExpr{
				pos: position{line: 10, col: 5, offset: 95},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 10, col: 5, offset: 95},
						run: (*parser).callonSequential2,
						expr: &seqExpr{
							pos: position{line: 10, col: 5, offset: 95},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 10, col: 5, offset: 95},
									label: "consts",
									expr: &zeroOrMoreExpr{
										pos: position{line: 10, col: 12, offset: 102},
										expr: &ruleRefExpr{
											pos:  position{line: 10, col: 12, offset: 102},
											name: "Const",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 10, col: 19, offset: 109},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 10, col: 22, offset: 112},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 10, col: 28, offset: 118},
										name: "Operation",
									},
								},
								&labeledExpr{
									pos:   position{line: 10, col: 38, offset: 128},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 10, col: 43, offset: 133},
										expr: &ruleRefExpr{
											pos:  position{line: 10, col: 43, offset: 133},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 13, col: 5, offset: 308},
						run: (*parser).callonSequential13,
						expr: &seqExpr{
							pos: position{line: 13, col: 5, offset: 308},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 13, col: 5, offset: 308},
									label: "consts",
									expr: &zeroOrMoreExpr{
										pos: position{line: 13, col: 12, offset: 315},
										expr: &ruleRefExpr{
											pos:  position{line: 13, col: 12, offset: 315},
											name: "Const",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 13, col: 19, offset: 322},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 13, col: 22, offset: 325},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 13, col: 25, offset: 328},
										name: "Operation",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SequentialTail",
			pos:  position{line: 17, col: 1, offset: 455},
			expr: &actionExpr{
				pos: position{line: 17, col: 18, offset: 472},
				run: (*parser).callonSequentialTail1,
				expr: &seqExpr{
					pos: position{line: 17, col: 18, offset: 472},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 17, col: 18, offset: 472},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 21, offset: 475},
							name: "Pipe",
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 26, offset: 480},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 17, col: 29, offset: 483},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 31, offset: 485},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Const",
			pos:  position{line: 19, col: 1, offset: 514},
			expr: &actionExpr{
				pos: position{line: 19, col: 9, offset: 522},
				run: (*parser).callonConst1,
				expr: &seqExpr{
					pos: position{line: 19, col: 9, offset: 522},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 19, col: 9, offset: 522},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 19, col: 12, offset: 525},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 19, col: 14, offset: 527},
								name: "ConstDef",
							},
						},
					},
				},
			},
		},
		{
			name: "ConstDef",
			pos:  position{line: 21, col: 1, offset: 555},
			expr: &choiceExpr{
				pos: position{line: 22, col: 5, offset: 568},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 22, col: 5, offset: 568},
						run: (*parser).callonConstDef2,
						expr: &seqExpr{
							pos: position{line: 22, col: 5, offset: 568},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 22, col: 5, offset: 568},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 22, col: 13, offset: 576},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 22, col: 15, offset: 578},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 22, col: 18, offset: 581},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 22, col: 33, offset: 596},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 22, col: 36, offset: 599},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 22, col: 40, offset: 603},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 22, col: 43, offset: 606},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 22, col: 48, offset: 611},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 22, col: 53, offset: 616},
									name: "__",
								},
								&zeroOrOneExpr{
									pos: position{line: 22, col: 56, offset: 619},
									expr: &litMatcher{
										pos:        position{line: 22, col: 56, offset: 619},
										val:        ";",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 25, col: 5, offset: 701},
						run: (*parser).callonConstDef16,
						expr: &seqExpr{
							pos: position{line: 25, col: 5, offset: 701},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 25, col: 5, offset: 701},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 25, col: 12, offset: 708},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 25, col: 14, offset: 710},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 25, col: 17, offset: 713},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 25, col: 32, offset: 728},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 25, col: 35, offset: 731},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 25, col: 39, offset: 735},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 25, col: 42, offset: 738},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 25, col: 46, offset: 742},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 25, col: 51, offset: 747},
									name: "__",
								},
								&zeroOrOneExpr{
									pos: position{line: 25, col: 54, offset: 750},
									expr: &litMatcher{
										pos:        position{line: 25, col: 54, offset: 750},
										val:        ";",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Parallel",
			pos:  position{line: 35, col: 1, offset: 974},
			expr: &actionExpr{
				pos: position{line: 36, col: 5, offset: 987},
				run: (*parser).callonParallel1,
				expr: &seqExpr{
					pos: position{line: 36, col: 5, offset: 987},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 36, col: 5, offset: 987},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 36, col: 8, offset: 990},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 36, col: 13, offset: 995},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 36, col: 16, offset: 998},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 36, col: 18, offset: 1000},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 36, col: 29, offset: 1011},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 36, col: 32, offset: 1014},
							val:        ";",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromTrunk",
			pos:  position{line: 38, col: 1, offset: 1037},
			expr: &actionExpr{
				pos: position{line: 39, col: 5, offset: 1051},
				run: (*parser).callonFromTrunk1,
				expr: &seqExpr{
					pos: position{line: 39, col: 5, offset: 1051},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 39, col: 5, offset: 1051},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 39, col: 8, offset: 1054},
							label: "source",
							expr: &ruleRefExpr{
								pos:  position{line: 39, col: 15, offset: 1061},
								name: "FromSource",
							},
						},
						&labeledExpr{
							pos:   position{line: 39, col: 27, offset: 1073},
							label: "seq",
							expr: &zeroOrOneExpr{
								pos: position{line: 39, col: 31, offset: 1077},
								expr: &ruleRefExpr{
									pos:  position{line: 39, col: 31, offset: 1077},
									name: "FromTrunkSeq",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 39, col: 45, offset: 1091},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 39, col: 48, offset: 1094},
							val:        ";",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromTrunkSeq",
			pos:  position{line: 43, col: 1, offset: 1195},
			expr: &actionExpr{
				pos: position{line: 44, col: 5, offset: 1212},
				run: (*parser).callonFromTrunkSeq1,
				expr: &seqExpr{
					pos: position{line: 44, col: 5, offset: 1212},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 44, col: 5, offset: 1212},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 44, col: 8, offset: 1215},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 44, col: 13, offset: 1220},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 44, col: 16, offset: 1223},
							label: "seq",
							expr: &ruleRefExpr{
								pos:  position{line: 44, col: 20, offset: 1227},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "FromSource",
			pos:  position{line: 46, col: 1, offset: 1259},
			expr: &choiceExpr{
				pos: position{line: 47, col: 5, offset: 1274},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 47, col: 5, offset: 1274},
						name: "FileProc",
					},
					&ruleRefExpr{
						pos:  position{line: 48, col: 5, offset: 1287},
						name: "HTTPProc",
					},
					&ruleRefExpr{
						pos:  position{line: 49, col: 5, offset: 1300},
						name: "PassProc",
					},
					&ruleRefExpr{
						pos:  position{line: 50, col: 5, offset: 1313},
						name: "PoolBody",
					},
				},
			},
		},
		{
			name: "Operation",
			pos:  position{line: 52, col: 1, offset: 1323},
			expr: &choiceExpr{
				pos: position{line: 53, col: 5, offset: 1337},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 53, col: 5, offset: 1337},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 53, col: 5, offset: 1337},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 53, col: 5, offset: 1337},
									val:        "split",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 53, col: 13, offset: 1345},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 53, col: 16, offset: 1348},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 53, col: 20, offset: 1352},
									label: "procArray",
									expr: &oneOrMoreExpr{
										pos: position{line: 53, col: 30, offset: 1362},
										expr: &ruleRefExpr{
											pos:  position{line: 53, col: 30, offset: 1362},
											name: "Parallel",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 53, col: 40, offset: 1372},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 53, col: 43, offset: 1375},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 56, col: 5, offset: 1472},
						run: (*parser).callonOperation12,
						expr: &seqExpr{
							pos: position{line: 56, col: 5, offset: 1472},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 56, col: 5, offset: 1472},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 56, col: 14, offset: 1481},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 56, col: 16, offset: 1483},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 56, col: 21, offset: 1488},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 56, col: 26, offset: 1493},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 56, col: 28, offset: 1495},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 56, col: 32, offset: 1499},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 56, col: 38, offset: 1505},
										expr: &ruleRefExpr{
											pos:  position{line: 56, col: 38, offset: 1505},
											name: "SwitchLiteralClause",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 56, col: 59, offset: 1526},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 56, col: 62, offset: 1529},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 59, col: 5, offset: 1634},
						run: (*parser).callonOperation25,
						expr: &seqExpr{
							pos: position{line: 59, col: 5, offset: 1634},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 59, col: 5, offset: 1634},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 59, col: 14, offset: 1643},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 59, col: 17, offset: 1646},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 59, col: 21, offset: 1650},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 59, col: 27, offset: 1656},
										expr: &ruleRefExpr{
											pos:  position{line: 59, col: 27, offset: 1656},
											name: "SwitchSearchBooleanClause",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 59, col: 54, offset: 1683},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 59, col: 57, offset: 1686},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 62, col: 5, offset: 1790},
						run: (*parser).callonOperation35,
						expr: &seqExpr{
							pos: position{line: 62, col: 5, offset: 1790},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 62, col: 5, offset: 1790},
									val:        "from",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 62, col: 12, offset: 1797},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 62, col: 15, offset: 1800},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 62, col: 19, offset: 1804},
									label: "trunks",
									expr: &oneOrMoreExpr{
										pos: position{line: 62, col: 26, offset: 1811},
										expr: &ruleRefExpr{
											pos:  position{line: 62, col: 26, offset: 1811},
											name: "FromTrunk",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 62, col: 37, offset: 1822},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 62, col: 40, offset: 1825},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 65, col: 5, offset: 1916},
						name: "Operator",
					},
					&actionExpr{
						pos: position{line: 66, col: 5, offset: 1929},
						run: (*parser).callonOperation46,
						expr: &seqExpr{
							pos: position{line: 66, col: 5, offset: 1929},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 66, col: 5, offset: 1929},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 66, col: 7, offset: 1931},
										name: "Function",
									},
								},
								&andExpr{
									pos: position{line: 66, col: 16, offset: 1940},
									expr: &ruleRefExpr{
										pos:  position{line: 66, col: 17, offset: 1941},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 67, col: 5, offset: 1971},
						run: (*parser).callonOperation52,
						expr: &seqExpr{
							pos: position{line: 67, col: 5, offset: 1971},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 67, col: 5, offset: 1971},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 67, col: 7, offset: 1973},
										name: "OpAssignment",
									},
								},
								&andExpr{
									pos: position{line: 67, col: 20, offset: 1986},
									expr: &ruleRefExpr{
										pos:  position{line: 67, col: 21, offset: 1987},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 68, col: 5, offset: 2017},
						run: (*parser).callonOperation58,
						expr: &seqExpr{
							pos: position{line: 68, col: 5, offset: 2017},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 68, col: 5, offset: 2017},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 68, col: 7, offset: 2019},
										name: "Aggregation",
									},
								},
								&andExpr{
									pos: position{line: 68, col: 19, offset: 2031},
									expr: &ruleRefExpr{
										pos:  position{line: 68, col: 20, offset: 2032},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 69, col: 5, offset: 2063},
						run: (*parser).callonOperation64,
						expr: &seqExpr{
							pos: position{line: 69, col: 5, offset: 2063},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 69, col: 5, offset: 2063},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 69, col: 10, offset: 2068},
										name: "SearchBoolean",
									},
								},
								&notExpr{
									pos: position{line: 69, col: 24, offset: 2082},
									expr: &ruleRefExpr{
										pos:  position{line: 69, col: 25, offset: 2083},
										name: "AggGuard",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchLiteralClause",
			pos:  position{line: 73, col: 1, offset: 2174},
			expr: &actionExpr{
				pos: position{line: 74, col: 5, offset: 2198},
				run: (*parser).callonSwitchLiteralClause1,
				expr: &seqExpr{
					pos: position{line: 74, col: 5, offset: 2198},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 74, col: 5, offset: 2198},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 74, col: 8, offset: 2201},
							label: "expr",
							expr: &choiceExpr{
								pos: position{line: 74, col: 14, offset: 2207},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 74, col: 14, offset: 2207},
										name: "DefaultToken",
									},
									&ruleRefExpr{
										pos:  position{line: 74, col: 29, offset: 2222},
										name: "Literal",
									},
									&ruleRefExpr{
										pos:  position{line: 74, col: 39, offset: 2232},
										name: "Identifier",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 74, col: 51, offset: 2244},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 74, col: 54, offset: 2247},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 74, col: 59, offset: 2252},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 74, col: 62, offset: 2255},
							label: "proc",
							expr: &ruleRefExpr{
								pos:  position{line: 74, col: 67, offset: 2260},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 74, col: 78, offset: 2271},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 74, col: 81, offset: 2274},
							val:        ";",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SwitchSearchBooleanClause",
			pos:  position{line: 78, col: 1, offset: 2356},
			expr: &actionExpr{
				pos: position{line: 79, col: 5, offset: 2386},
				run: (*parser).callonSwitchSearchBooleanClause1,
				expr: &seqExpr{
					pos: position{line: 79, col: 5, offset: 2386},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 79, col: 5, offset: 2386},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 79, col: 8, offset: 2389},
							label: "expr",
							expr: &choiceExpr{
								pos: position{line: 79, col: 14, offset: 2395},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 79, col: 14, offset: 2395},
										name: "DefaultToken",
									},
									&ruleRefExpr{
										pos:  position{line: 79, col: 29, offset: 2410},
										name: "SearchBoolean",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 79, col: 44, offset: 2425},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 79, col: 47, offset: 2428},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 79, col: 52, offset: 2433},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 79, col: 55, offset: 2436},
							label: "proc",
							expr: &ruleRefExpr{
								pos:  position{line: 79, col: 60, offset: 2441},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 79, col: 71, offset: 2452},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 79, col: 74, offset: 2455},
							val:        ";",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DefaultToken",
			pos:  position{line: 83, col: 1, offset: 2537},
			expr: &actionExpr{
				pos: position{line: 83, col: 16, offset: 2552},
				run: (*parser).callonDefaultToken1,
				expr: &litMatcher{
					pos:        position{line: 83, col: 16, offset: 2552},
					val:        "default",
					ignoreCase: true,
				},
			},
		},
		{
			name: "EndOfOp",
			pos:  position{line: 85, col: 1, offset: 2584},
			expr: &seqExpr{
				pos: position{line: 85, col: 11, offset: 2594},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 85, col: 11, offset: 2594},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 85, col: 15, offset: 2598},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 85, col: 15, offset: 2598},
								name: "Pipe",
							},
							&litMatcher{
								pos:        position{line: 85, col: 22, offset: 2605},
								val:        "=>",
								ignoreCase: false,
							},
							&charClassMatcher{
								pos:        position{line: 85, col: 29, offset: 2612},
								val:        "[);]",
								chars:      []rune{')', ';'},
								ignoreCase: false,
								inverted:   false,
							},
							&ruleRefExpr{
								pos:  position{line: 85, col: 36, offset: 2619},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "Pipe",
			pos:  position{line: 86, col: 1, offset: 2624},
			expr: &seqExpr{
				pos: position{line: 86, col: 8, offset: 2631},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 86, col: 8, offset: 2631},
						val:        "|",
						ignoreCase: false,
					},
					&notExpr{
						pos: position{line: 86, col: 12, offset: 2635},
						expr: &choiceExpr{
							pos: position{line: 86, col: 14, offset: 2637},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 86, col: 14, offset: 2637},
									val:        "{",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 86, col: 20, offset: 2643},
									val:        "[",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 88, col: 1, offset: 2649},
			expr: &seqExpr{
				pos: position{line: 88, col: 13, offset: 2661},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 88, col: 13, offset: 2661},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 88, col: 17, offset: 2665},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 88, col: 18, offset: 2666},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 88, col: 18, offset: 2666},
										expr: &litMatcher{
											pos:        position{line: 88, col: 19, offset: 2667},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 88, col: 24, offset: 2672},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 88, col: 38, offset: 2686},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 88, col: 57, offset: 2705},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 88, col: 82, offset: 2730},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 88, col: 88, offset: 2736},
								val:        "(",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 88, col: 94, offset: 2742},
								val:        "[",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 88, col: 100, offset: 2748},
								val:        "matches",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 90, col: 1, offset: 2760},
			expr: &actionExpr{
				pos: position{line: 90, col: 14, offset: 2773},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 90, col: 15, offset: 2774},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 90, col: 15, offset: 2774},
							val:        "==",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 90, col: 22, offset: 2781},
							val:        "!=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 90, col: 29, offset: 2788},
							val:        "in",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 90, col: 36, offset: 2795},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 90, col: 43, offset: 2802},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 90, col: 49, offset: 2808},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 90, col: 56, offset: 2815},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AggGuard",
			pos:  position{line: 92, col: 1, offset: 2852},
			expr: &choiceExpr{
				pos: position{line: 92, col: 12, offset: 2863},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 92, col: 13, offset: 2864},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 92, col: 13, offset: 2864},
								name: "_",
							},
							&choiceExpr{
								pos: position{line: 92, col: 16, offset: 2867},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 92, col: 16, offset: 2867},
										name: "ByToken",
									},
									&litMatcher{
										pos:        position{line: 92, col: 26, offset: 2877},
										val:        "-with",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 92, col: 35, offset: 2886},
								name: "EOT",
							},
						},
					},
					&seqExpr{
						pos: position{line: 92, col: 43, offset: 2894},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 92, col: 43, offset: 2894},
								name: "__",
							},
							&litMatcher{
								pos:        position{line: 92, col: 46, offset: 2897},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 94, col: 1, offset: 2903},
			expr: &actionExpr{
				pos: position{line: 95, col: 5, offset: 2921},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 95, col: 5, offset: 2921},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 95, col: 5, offset: 2921},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 95, col: 11, offset: 2927},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 95, col: 21, offset: 2937},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 95, col: 26, offset: 2942},
								expr: &ruleRefExpr{
									pos:  position{line: 95, col: 26, offset: 2942},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 99, col: 1, offset: 3016},
			expr: &actionExpr{
				pos: position{line: 99, col: 16, offset: 3031},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 99, col: 16, offset: 3031},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 99, col: 16, offset: 3031},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 99, col: 18, offset: 3033},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 99, col: 26, offset: 3041},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 99, col: 28, offset: 3043},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 99, col: 30, offset: 3045},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 101, col: 1, offset: 3095},
			expr: &actionExpr{
				pos: position{line: 102, col: 5, offset: 3109},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 102, col: 5, offset: 3109},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 102, col: 5, offset: 3109},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 102, col: 11, offset: 3115},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 103, col: 5, offset: 3132},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 103, col: 10, offset: 3137},
								expr: &actionExpr{
									pos: position{line: 103, col: 11, offset: 3138},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 103, col: 11, offset: 3138},
										exprs: []interface{}{
											&zeroOrOneExpr{
												pos: position{line: 103, col: 11, offset: 3138},
												expr: &seqExpr{
													pos: position{line: 103, col: 12, offset: 3139},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 103, col: 12, offset: 3139},
															name: "_",
														},
														&ruleRefExpr{
															pos:  position{line: 103, col: 14, offset: 3141},
															name: "AndToken",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 103, col: 25, offset: 3152},
												name: "_",
											},
											&notExpr{
												pos: position{line: 103, col: 27, offset: 3154},
												expr: &ruleRefExpr{
													pos:  position{line: 103, col: 28, offset: 3155},
													name: "OrToken",
												},
											},
											&labeledExpr{
												pos:   position{line: 103, col: 36, offset: 3163},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 103, col: 41, offset: 3168},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 107, col: 1, offset: 3284},
			expr: &choiceExpr{
				pos: position{line: 108, col: 5, offset: 3301},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 108, col: 5, offset: 3301},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 108, col: 5, offset: 3301},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 108, col: 6, offset: 3302},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 108, col: 6, offset: 3302},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 108, col: 6, offset: 3302},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 108, col: 15, offset: 3311},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 108, col: 19, offset: 3315},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 108, col: 19, offset: 3315},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 108, col: 23, offset: 3319},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 108, col: 27, offset: 3323},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 108, col: 29, offset: 3325},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 111, col: 5, offset: 3437},
						run: (*parser).callonSearchFactor13,
						expr: &seqExpr{
							pos: position{line: 111, col: 5, offset: 3437},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 111, col: 5, offset: 3437},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 111, col: 9, offset: 3441},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 111, col: 12, offset: 3444},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 111, col: 17, offset: 3449},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 111, col: 31, offset: 3463},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 111, col: 34, offset: 3466},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 112, col: 5, offset: 3495},
						name: "SearchExpr",
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 115, col: 1, offset: 3508},
			expr: &choiceExpr{
				pos: position{line: 116, col: 5, offset: 3523},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 116, col: 5, offset: 3523},
						run: (*parser).callonSearchExpr2,
						expr: &labeledExpr{
							pos:   position{line: 116, col: 5, offset: 3523},
							label: "search",
							expr: &ruleRefExpr{
								pos:  position{line: 116, col: 12, offset: 3530},
								name: "PatternSearch",
							},
						},
					},
					&actionExpr{
						pos: position{line: 117, col: 5, offset: 3571},
						run: (*parser).callonSearchExpr5,
						expr: &seqExpr{
							pos: position{line: 117, col: 5, offset: 3571},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 117, col: 5, offset: 3571},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 117, col: 7, offset: 3573},
										name: "SearchValue",
									},
								},
								&notExpr{
									pos: position{line: 117, col: 19, offset: 3585},
									expr: &ruleRefExpr{
										pos:  position{line: 117, col: 20, offset: 3586},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 120, col: 5, offset: 3703},
						run: (*parser).callonSearchExpr11,
						expr: &seqExpr{
							pos: position{line: 120, col: 5, offset: 3703},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 120, col: 5, offset: 3703},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 120, col: 9, offset: 3707},
									expr: &ruleRefExpr{
										pos:  position{line: 120, col: 10, offset: 3708},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 123, col: 5, offset: 3824},
						name: "EqualityCompareExpr",
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 125, col: 1, offset: 3845},
			expr: &choiceExpr{
				pos: position{line: 126, col: 5, offset: 3861},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 126, col: 5, offset: 3861},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 127, col: 5, offset: 3873},
						run: (*parser).callonSearchValue3,
						expr: &seqExpr{
							pos: position{line: 127, col: 5, offset: 3873},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 127, col: 5, offset: 3873},
									expr: &ruleRefExpr{
										pos:  position{line: 127, col: 6, offset: 3874},
										name: "Regexp",
									},
								},
								&labeledExpr{
									pos:   position{line: 127, col: 13, offset: 3881},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 127, col: 15, offset: 3883},
										name: "KeyWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PatternSearch",
			pos:  position{line: 131, col: 1, offset: 3991},
			expr: &actionExpr{
				pos: position{line: 132, col: 5, offset: 4009},
				run: (*parser).callonPatternSearch1,
				expr: &labeledExpr{
					pos:   position{line: 132, col: 5, offset: 4009},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 132, col: 13, offset: 4017},
						name: "Pattern",
					},
				},
			},
		},
		{
			name: "PatternMatch",
			pos:  position{line: 136, col: 1, offset: 4119},
			expr: &actionExpr{
				pos: position{line: 137, col: 5, offset: 4136},
				run: (*parser).callonPatternMatch1,
				expr: &seqExpr{
					pos: position{line: 137, col: 5, offset: 4136},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 137, col: 5, offset: 4136},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 137, col: 7, offset: 4138},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 137, col: 12, offset: 4143},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 137, col: 14, offset: 4145},
							val:        "matches",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 137, col: 25, offset: 4156},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 137, col: 28, offset: 4159},
							label: "pattern",
							expr: &ruleRefExpr{
								pos:  position{line: 137, col: 36, offset: 4167},
								name: "Pattern",
							},
						},
					},
				},
			},
		},
		{
			name: "Pattern",
			pos:  position{line: 141, col: 1, offset: 4279},
			expr: &choiceExpr{
				pos: position{line: 141, col: 11, offset: 4289},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 141, col: 11, offset: 4289},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 141, col: 20, offset: 4298},
						name: "Glob",
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 145, col: 1, offset: 4330},
			expr: &choiceExpr{
				pos: position{line: 146, col: 5, offset: 4346},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 146, col: 5, offset: 4346},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 146, col: 5, offset: 4346},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 146, col: 5, offset: 4346},
									expr: &ruleRefExpr{
										pos:  position{line: 146, col: 5, offset: 4346},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 146, col: 16, offset: 4357},
									label: "every",
									expr: &zeroOrOneExpr{
										pos: position{line: 146, col: 22, offset: 4363},
										expr: &ruleRefExpr{
											pos:  position{line: 146, col: 22, offset: 4363},
											name: "EveryDur",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 146, col: 32, offset: 4373},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 146, col: 37, offset: 4378},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 146, col: 49, offset: 4390},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 146, col: 55, offset: 4396},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 149, col: 5, offset: 4541},
						run: (*parser).callonAggregation13,
						expr: &seqExpr{
							pos: position{line: 149, col: 5, offset: 4541},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 149, col: 5, offset: 4541},
									expr: &ruleRefExpr{
										pos:  position{line: 149, col: 5, offset: 4541},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 149, col: 16, offset: 4552},
									label: "every",
									expr: &zeroOrOneExpr{
										pos: position{line: 149, col: 22, offset: 4558},
										expr: &ruleRefExpr{
											pos:  position{line: 149, col: 22, offset: 4558},
											name: "EveryDur",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 149, col: 32, offset: 4568},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 149, col: 37, offset: 4573},
										name: "AggAssignments",
									},
								},
								&labeledExpr{
									pos:   position{line: 149, col: 52, offset: 4588},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 149, col: 57, offset: 4593},
										expr: &seqExpr{
											pos: position{line: 149, col: 58, offset: 4594},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 149, col: 58, offset: 4594},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 149, col: 60, offset: 4596},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 149, col: 74, offset: 4610},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 149, col: 80, offset: 4616},
										name: "LimitArg",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Summarize",
			pos:  position{line: 157, col: 1, offset: 4849},
			expr: &seqExpr{
				pos: position{line: 157, col: 13, offset: 4861},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 157, col: 13, offset: 4861},
						val:        "summarize",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 157, col: 25, offset: 4873},
						name: "_",
					},
				},
			},
		},
		{
			name: "EveryDur",
			pos:  position{line: 159, col: 1, offset: 4876},
			expr: &actionExpr{
				pos: position{line: 160, col: 5, offset: 4889},
				run: (*parser).callonEveryDur1,
				expr: &seqExpr{
					pos: position{line: 160, col: 5, offset: 4889},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 160, col: 5, offset: 4889},
							val:        "every",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 160, col: 14, offset: 4898},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 160, col: 16, offset: 4900},
							label: "dur",
							expr: &ruleRefExpr{
								pos:  position{line: 160, col: 20, offset: 4904},
								name: "Duration",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 160, col: 29, offset: 4913},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 162, col: 1, offset: 4936},
			expr: &actionExpr{
				pos: position{line: 163, col: 5, offset: 4952},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 163, col: 5, offset: 4952},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 163, col: 5, offset: 4952},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 163, col: 13, offset: 4960},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 163, col: 15, offset: 4962},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 163, col: 23, offset: 4970},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 165, col: 1, offset: 5011},
			expr: &choiceExpr{
				pos: position{line: 166, col: 5, offset: 5024},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 166, col: 5, offset: 5024},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 166, col: 5, offset: 5024},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 166, col: 5, offset: 5024},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 166, col: 7, offset: 5026},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 166, col: 14, offset: 5033},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 166, col: 16, offset: 5035},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 166, col: 25, offset: 5044},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 166, col: 27, offset: 5046},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 166, col: 33, offset: 5052},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 167, col: 5, offset: 5083},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 167, col: 5, offset: 5083},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 172, col: 1, offset: 5343},
			expr: &choiceExpr{
				pos: position{line: 173, col: 5, offset: 5362},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 173, col: 5, offset: 5362},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 174, col: 5, offset: 5377},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 174, col: 5, offset: 5377},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 174, col: 10, offset: 5382},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 176, col: 1, offset: 5474},
			expr: &actionExpr{
				pos: position{line: 177, col: 5, offset: 5494},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 177, col: 5, offset: 5494},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 177, col: 5, offset: 5494},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 177, col: 11, offset: 5500},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 177, col: 26, offset: 5515},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 177, col: 31, offset: 5520},
								expr: &actionExpr{
									pos: position{line: 177, col: 32, offset: 5521},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 177, col: 32, offset: 5521},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 177, col: 32, offset: 5521},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 177, col: 35, offset: 5524},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 177, col: 39, offset: 5528},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 177, col: 42, offset: 5531},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 177, col: 47, offset: 5536},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignment",
			pos:  position{line: 181, col: 1, offset: 5658},
			expr: &choiceExpr{
				pos: position{line: 182, col: 5, offset: 5676},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 182, col: 5, offset: 5676},
						run: (*parser).callonAggAssignment2,
						expr: &seqExpr{
							pos: position{line: 182, col: 5, offset: 5676},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 182, col: 5, offset: 5676},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 182, col: 10, offset: 5681},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 182, col: 15, offset: 5686},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 182, col: 18, offset: 5689},
									val:        ":=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 182, col: 23, offset: 5694},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 182, col: 26, offset: 5697},
									label: "agg",
									expr: &ruleRefExpr{
										pos:  position{line: 182, col: 30, offset: 5701},
										name: "Agg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 185, col: 5, offset: 5805},
						run: (*parser).callonAggAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 185, col: 5, offset: 5805},
							label: "agg",
							expr: &ruleRefExpr{
								pos:  position{line: 185, col: 9, offset: 5809},
								name: "Agg",
							},
						},
					},
				},
			},
		},
		{
			name: "Agg",
			pos:  position{line: 189, col: 1, offset: 5909},
			expr: &actionExpr{
				pos: position{line: 190, col: 5, offset: 5917},
				run: (*parser).callonAgg1,
				expr: &seqExpr{
					pos: position{line: 190, col: 5, offset: 5917},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 190, col: 5, offset: 5917},
							expr: &ruleRefExpr{
								pos:  position{line: 190, col: 6, offset: 5918},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 190, col: 16, offset: 5928},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 190, col: 19, offset: 5931},
								name: "AggName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 190, col: 27, offset: 5939},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 190, col: 30, offset: 5942},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 190, col: 34, offset: 5946},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 190, col: 37, offset: 5949},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 190, col: 42, offset: 5954},
								expr: &ruleRefExpr{
									pos:  position{line: 190, col: 42, offset: 5954},
									name: "Expr",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 190, col: 49, offset: 5961},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 190, col: 52, offset: 5964},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 190, col: 56, offset: 5968},
							expr: &seqExpr{
								pos: position{line: 190, col: 58, offset: 5970},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 190, col: 58, offset: 5970},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 190, col: 61, offset: 5973},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 190, col: 66, offset: 5978},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 190, col: 72, offset: 5984},
								expr: &ruleRefExpr{
									pos:  position{line: 190, col: 72, offset: 5984},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggName",
			pos:  position{line: 198, col: 1, offset: 6174},
			expr: &choiceExpr{
				pos: position{line: 199, col: 5, offset: 6186},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 199, col: 5, offset: 6186},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 200, col: 5, offset: 6205},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 201, col: 5, offset: 6218},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 203, col: 1, offset: 6227},
			expr: &actionExpr{
				pos: position{line: 203, col: 15, offset: 6241},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 203, col: 15, offset: 6241},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 203, col: 15, offset: 6241},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 203, col: 17, offset: 6243},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 203, col: 25, offset: 6251},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 203, col: 27, offset: 6253},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 203, col: 32, offset: 6258},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignments",
			pos:  position{line: 205, col: 1, offset: 6294},
			expr: &actionExpr{
				pos: position{line: 206, col: 5, offset: 6313},
				run: (*parser).callonAggAssignments1,
				expr: &seqExpr{
					pos: position{line: 206, col: 5, offset: 6313},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 206, col: 5, offset: 6313},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 206, col: 11, offset: 6319},
								name: "AggAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 206, col: 25, offset: 6333},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 206, col: 30, offset: 6338},
								expr: &seqExpr{
									pos: position{line: 206, col: 31, offset: 6339},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 206, col: 31, offset: 6339},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 206, col: 34, offset: 6342},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 206, col: 38, offset: 6346},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 206, col: 41, offset: 6349},
											name: "AggAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 216, col: 1, offset: 6585},
			expr: &choiceExpr{
				pos: position{line: 217, col: 5, offset: 6598},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 217, col: 5, offset: 6598},
						name: "SortProc",
					},
					&ruleRefExpr{
						pos:  position{line: 218, col: 5, offset: 6611},
						name: "TopProc",
					},
					&ruleRefExpr{
						pos:  position{line: 219, col: 5, offset: 6623},
						name: "CutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 220, col: 5, offset: 6635},
						name: "DropProc",
					},
					&ruleRefExpr{
						pos:  position{line: 221, col: 5, offset: 6648},
						name: "HeadProc",
					},
					&ruleRefExpr{
						pos:  position{line: 222, col: 5, offset: 6661},
						name: "TailProc",
					},
					&ruleRefExpr{
						pos:  position{line: 223, col: 5, offset: 6674},
						name: "FilterProc",
					},
					&ruleRefExpr{
						pos:  position{line: 224, col: 5, offset: 6689},
						name: "UniqProc",
					},
					&ruleRefExpr{
						pos:  position{line: 225, col: 5, offset: 6702},
						name: "PutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 226, col: 5, offset: 6714},
						name: "RenameProc",
					},
					&ruleRefExpr{
						pos:  position{line: 227, col: 5, offset: 6729},
						name: "FuseProc",
					},
					&ruleRefExpr{
						pos:  position{line: 228, col: 5, offset: 6742},
						name: "ShapeProc",
					},
					&ruleRefExpr{
						pos:  position{line: 229, col: 5, offset: 6756},
						name: "JoinProc",
					},
					&ruleRefExpr{
						pos:  position{line: 230, col: 5, offset: 6769},
						name: "SampleProc",
					},
					&ruleRefExpr{
						pos:  position{line: 231, col: 5, offset: 6784},
						name: "SQLProc",
					},
					&ruleRefExpr{
						pos:  position{line: 232, col: 5, offset: 6796},
						name: "FromProc",
					},
					&ruleRefExpr{
						pos:  position{line: 233, col: 5, offset: 6809},
						name: "PassProc",
					},
					&ruleRefExpr{
						pos:  position{line: 234, col: 5, offset: 6822},
						name: "ExplodeProc",
					},
					&ruleRefExpr{
						pos:  position{line: 235, col: 5, offset: 6838},
						name: "OverProc",
					},
					&ruleRefExpr{
						pos:  position{line: 236, col: 5, offset: 6851},
						name: "YieldProc",
					},
				},
			},
		},
		{
			name: "SortProc",
			pos:  position{line: 238, col: 1, offset: 6862},
			expr: &actionExpr{
				pos: position{line: 239, col: 5, offset: 6875},
				run: (*parser).callonSortProc1,
				expr: &seqExpr{
					pos: position{line: 239, col: 5, offset: 6875},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 239, col: 5, offset: 6875},
							val:        "sort",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 239, col: 13, offset: 6883},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 239, col: 18, offset: 6888},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 239, col: 27, offset: 6897},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 239, col: 32, offset: 6902},
								expr: &actionExpr{
									pos: position{line: 239, col: 33, offset: 6903},
									run: (*parser).callonSortProc8,
									expr: &seqExpr{
										pos: position{line: 239, col: 33, offset: 6903},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 239, col: 33, offset: 6903},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 239, col: 35, offset: 6905},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 239, col: 37, offset: 6907},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 253, col: 1, offset: 7326},
			expr: &actionExpr{
				pos: position{line: 253, col: 12, offset: 7337},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 253, col: 12, offset: 7337},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 253, col: 17, offset: 7342},
						expr: &actionExpr{
							pos: position{line: 253, col: 18, offset: 7343},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 253, col: 18, offset: 7343},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 253, col: 18, offset: 7343},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 253, col: 20, offset: 7345},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 253, col: 22, offset: 7347},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 255, col: 1, offset: 7403},
			expr: &choiceExpr{
				pos: position{line: 256, col: 5, offset: 7415},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 256, col: 5, offset: 7415},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 256, col: 5, offset: 7415},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 257, col: 5, offset: 7490},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 257, col: 5, offset: 7490},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 257, col: 5, offset: 7490},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 257, col: 14, offset: 7499},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 257, col: 16, offset: 7501},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 257, col: 23, offset: 7508},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 257, col: 24, offset: 7509},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 257, col: 24, offset: 7509},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 257, col: 34, offset: 7519},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopProc",
			pos:  position{line: 259, col: 1, offset: 7633},
			expr: &actionExpr{
				pos: position{line: 260, col: 5, offset: 7645},
				run: (*parser).callonTopProc1,
				expr: &seqExpr{
					pos: position{line: 260, col: 5, offset: 7645},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 260, col: 5, offset: 7645},
							val:        "top",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 260, col: 12, offset: 7652},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 260, col: 18, offset: 7658},
								expr: &actionExpr{
									pos: position{line: 260, col: 19, offset: 7659},
									run: (*parser).callonTopProc6,
									expr: &seqExpr{
										pos: position{line: 260, col: 19, offset: 7659},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 260, col: 19, offset: 7659},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 260, col: 21, offset: 7661},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 260, col: 23, offset: 7663},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 260, col: 47, offset: 7687},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 260, col: 53, offset: 7693},
								expr: &seqExpr{
									pos: position{line: 260, col: 54, offset: 7694},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 260, col: 54, offset: 7694},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 260, col: 56, offset: 7696},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 260, col: 67, offset: 7707},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 260, col: 74, offset: 7714},
								expr: &actionExpr{
									pos: position{line: 260, col: 75, offset: 7715},
									run: (*parser).callonTopProc18,
									expr: &seqExpr{
										pos: position{line: 260, col: 75, offset: 7715},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 260, col: 75, offset: 7715},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 260, col: 77, offset: 7717},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 260, col: 79, offset: 7719},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutProc",
			pos:  position{line: 274, col: 1, offset: 8064},
			expr: &actionExpr{
				pos: position{line: 275, col: 5, offset: 8076},
				run: (*parser).callonCutProc1,
				expr: &seqExpr{
					pos: position{line: 275, col: 5, offset: 8076},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 275, col: 5, offset: 8076},
							val:        "cut",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 275, col: 12, offset: 8083},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 275, col: 14, offset: 8085},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 275, col: 19, offset: 8090},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropProc",
			pos:  position{line: 279, col: 1, offset: 8185},
			expr: &actionExpr{
				pos: position{line: 280, col: 5, offset: 8198},
				run: (*parser).callonDropProc1,
				expr: &seqExpr{
					pos: position{line: 280, col: 5, offset: 8198},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 280, col: 5, offset: 8198},
							val:        "drop",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 280, col: 13, offset: 8206},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 280, col: 15, offset: 8208},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 280, col: 20, offset: 8213},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadProc",
			pos:  position{line: 284, col: 1, offset: 8304},
			expr: &choiceExpr{
				pos: position{line: 285, col: 5, offset: 8317},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 285, col: 5, offset: 8317},
						run: (*parser).callonHeadProc2,
						expr: &seqExpr{
							pos: position{line: 285, col: 5, offset: 8317},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 285, col: 5, offset: 8317},
									val:        "head",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 285, col: 13, offset: 8325},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 285, col: 15, offset: 8327},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 285, col: 21, offset: 8333},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 286, col: 5, offset: 8413},
						run: (*parser).callonHeadProc8,
						expr: &litMatcher{
							pos:        position{line: 286, col: 5, offset: 8413},
							val:        "head",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "TailProc",
			pos:  position{line: 288, col: 1, offset: 8489},
			expr: &choiceExpr{
				pos: position{line: 289, col: 5, offset: 8502},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 289, col: 5, offset: 8502},
						run: (*parser).callonTailProc2,
						expr: &seqExpr{
							pos: position{line: 289, col: 5, offset: 8502},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 289, col: 5, offset: 8502},
									val:        "tail",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 289, col: 13, offset: 8510},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 289, col: 15, offset: 8512},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 289, col: 21, offset: 8518},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 290, col: 5, offset: 8598},
						run: (*parser).callonTailProc8,
						expr: &litMatcher{
							pos:        position{line: 290, col: 5, offset: 8598},
							val:        "tail",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "FilterProc",
			pos:  position{line: 292, col: 1, offset: 8674},
			expr: &actionExpr{
				pos: position{line: 293, col: 5, offset: 8689},
				run: (*parser).callonFilterProc1,
				expr: &seqExpr{
					pos: position{line: 293, col: 5, offset: 8689},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 293, col: 5, offset: 8689},
							val:        "filter",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 293, col: 15, offset: 8699},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 293, col: 17, offset: 8701},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 293, col: 20, offset: 8704},
								name: "Filter",
							},
						},
					},
				},
			},
		},
		{
			name: "Filter",
			pos:  position{line: 297, col: 1, offset: 8741},
			expr: &actionExpr{
				pos: position{line: 298, col: 5, offset: 8752},
				run: (*parser).callonFilter1,
				expr: &labeledExpr{
					pos:   position{line: 298, col: 5, offset: 8752},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 298, col: 10, offset: 8757},
						name: "SearchBoolean",
					},
				},
			},
		},
		{
			name: "UniqProc",
			pos:  position{line: 302, col: 1, offset: 8853},
			expr: &choiceExpr{
				pos: position{line: 303, col: 5, offset: 8866},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 303, col: 5, offset: 8866},
						run: (*parser).callonUniqProc2,
						expr: &seqExpr{
							pos: position{line: 303, col: 5, offset: 8866},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 303, col: 5, offset: 8866},
									val:        "uniq",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 303, col: 13, offset: 8874},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 303, col: 15, offset: 8876},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 306, col: 5, offset: 8965},
						run: (*parser).callonUniqProc7,
						expr: &litMatcher{
							pos:        position{line: 306, col: 5, offset: 8965},
							val:        "uniq",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "PutProc",
			pos:  position{line: 310, col: 1, offset: 9055},
			expr: &actionExpr{
				pos: position{line: 311, col: 5, offset: 9067},
				run: (*parser).callonPutProc1,
				expr: &seqExpr{
					pos: position{line: 311, col: 5, offset: 9067},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 311, col: 5, offset: 9067},
							val:        "put",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 311, col: 12, offset: 9074},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 311, col: 14, offset: 9076},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 311, col: 19, offset: 9081},
								name: "Assignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameProc",
			pos:  position{line: 315, col: 1, offset: 9172},
			expr: &actionExpr{
				pos: position{line: 316, col: 5, offset: 9187},
				run: (*parser).callonRenameProc1,
				expr: &seqExpr{
					pos: position{line: 316, col: 5, offset: 9187},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 316, col: 5, offset: 9187},
							val:        "rename",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 316, col: 15, offset: 9197},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 316, col: 17, offset: 9199},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 316, col: 23, offset: 9205},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 316, col: 34, offset: 9216},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 316, col: 39, offset: 9221},
								expr: &actionExpr{
									pos: position{line: 316, col: 40, offset: 9222},
									run: (*parser).callonRenameProc9,
									expr: &seqExpr{
										pos: position{line: 316, col: 40, offset: 9222},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 316, col: 40, offset: 9222},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 316, col: 43, offset: 9225},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 316, col: 47, offset: 9229},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 316, col: 50, offset: 9232},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 316, col: 53, offset: 9235},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseProc",
			pos:  position{line: 324, col: 1, offset: 9644},
			expr: &actionExpr{
				pos: position{line: 325, col: 5, offset: 9657},
				run: (*parser).callonFuseProc1,
				expr: &seqExpr{
					pos: position{line: 325, col: 5, offset: 9657},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 325, col: 5, offset: 9657},
							val:        "fuse",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 325, col: 13, offset: 9665},
							expr: &seqExpr{
								pos: position{line: 325, col: 15, offset: 9667},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 325, col: 15, offset: 9667},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 325, col: 18, offset: 9670},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShapeProc",
			pos:  position{line: 329, col: 1, offset: 9741},
			expr: &actionExpr{
				pos: position{line: 330, col: 5, offset: 9755},
				run: (*parser).callonShapeProc1,
				expr: &litMatcher{
					pos:        position{line: 330, col: 5, offset: 9755},
					val:        "shape",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JoinProc",
			pos:  position{line: 334, col: 1, offset: 9831},
			expr: &choiceExpr{
				pos: position{line: 335, col: 5, offset: 9844},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 335, col: 5, offset: 9844},
						run: (*parser).callonJoinProc2,
						expr: &seqExpr{
							pos: position{line: 335, col: 5, offset: 9844},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 335, col: 5, offset: 9844},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 335, col: 11, offset: 9850},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 335, col: 21, offset: 9860},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 335, col: 29, offset: 9868},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 335, col: 31, offset: 9870},
									name: "ON",
								},
								&ruleRefExpr{
									pos:  position{line: 335, col: 34, offset: 9873},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 335, col: 36, offset: 9875},
									label: "leftKey",
									expr: &ruleRefExpr{
										pos:  position{line: 335, col: 44, offset: 9883},
										name: "JoinKey",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 335, col: 52, offset: 9891},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 335, col: 55, offset: 9894},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 335, col: 59, offset: 9898},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 335, col: 62, offset: 9901},
									label: "rightKey",
									expr: &ruleRefExpr{
										pos:  position{line: 335, col: 71, offset: 9910},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 335, col: 79, offset: 9918},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 335, col: 87, offset: 9926},
										expr: &seqExpr{
											pos: position{line: 335, col: 88, offset: 9927},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 335, col: 88, offset: 9927},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 335, col: 90, offset: 9929},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 342, col: 5, offset: 10195},
						run: (*parser).callonJoinProc22,
						expr: &seqExpr{
							pos: position{line: 342, col: 5, offset: 10195},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 342, col: 5, offset: 10195},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 342, col: 11, offset: 10201},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 342, col: 22, offset: 10212},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 342, col: 30, offset: 10220},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 342, col: 32, offset: 10222},
									name: "ON",
								},
								&ruleRefExpr{
									pos:  position{line: 342, col: 35, offset: 10225},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 342, col: 37, offset: 10227},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 342, col: 41, offset: 10231},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 342, col: 49, offset: 10239},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 342, col: 57, offset: 10247},
										expr: &seqExpr{
											pos: position{line: 342, col: 58, offset: 10248},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 342, col: 58, offset: 10248},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 342, col: 60, offset: 10250},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinStyle",
			pos:  position{line: 350, col: 1, offset: 10504},
			expr: &choiceExpr{
				pos: position{line: 351, col: 5, offset: 10518},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 351, col: 5, offset: 10518},
						run: (*parser).callonJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 351, col: 5, offset: 10518},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 351, col: 5, offset: 10518},
									val:        "anti",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 351, col: 13, offset: 10526},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 352, col: 5, offset: 10556},
						run: (*parser).callonJoinStyle6,
						expr: &seqExpr{
							pos: position{line: 352, col: 5, offset: 10556},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 352, col: 5, offset: 10556},
									val:        "inner",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 352, col: 14, offset: 10565},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 353, col: 5, offset: 10595},
						run: (*parser).callonJoinStyle10,
						expr: &seqExpr{
							pos: position{line: 353, col: 5, offset: 10595},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 353, col: 5, offset: 10595},
									val:        "left",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 353, col: 14, offset: 10604},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 354, col: 5, offset: 10633},
						run: (*parser).callonJoinStyle14,
						expr: &seqExpr{
							pos: position{line: 354, col: 5, offset: 10633},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 354, col: 5, offset: 10633},
									val:        "right",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 354, col: 14, offset: 10642},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 355, col: 5, offset: 10672},
						run: (*parser).callonJoinStyle18,
						expr: &litMatcher{
							pos:        position{line: 355, col: 5, offset: 10672},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 357, col: 1, offset: 10708},
			expr: &choiceExpr{
				pos: position{line: 358, col: 5, offset: 10720},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 358, col: 5, offset: 10720},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 359, col: 5, offset: 10729},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 359, col: 5, offset: 10729},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 359, col: 5, offset: 10729},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 359, col: 9, offset: 10733},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 359, col: 14, offset: 10738},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 359, col: 19, offset: 10743},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SampleProc",
			pos:  position{line: 361, col: 1, offset: 10769},
			expr: &actionExpr{
				pos: position{line: 362, col: 5, offset: 10784},
				run: (*parser).callonSampleProc1,
				expr: &seqExpr{
					pos: position{line: 362, col: 5, offset: 10784},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 362, col: 5, offset: 10784},
							val:        "sample",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 362, col: 15, offset: 10794},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 362, col: 17, offset: 10796},
								name: "SampleExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "OpAssignment",
			pos:  position{line: 406, col: 1, offset: 12429},
			expr: &actionExpr{
				pos: position{line: 407, col: 5, offset: 12446},
				run: (*parser).callonOpAssignment1,
				expr: &labeledExpr{
					pos:   position{line: 407, col: 5, offset: 12446},
					label: "a",
					expr: &ruleRefExpr{
						pos:  position{line: 407, col: 7, offset: 12448},
						name: "Assignments",
					},
				},
			},
		},
		{
			name: "SampleExpr",
			pos:  position{line: 411, col: 1, offset: 12548},
			expr: &choiceExpr{
				pos: position{line: 412, col: 5, offset: 12563},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 412, col: 5, offset: 12563},
						run: (*parser).callonSampleExpr2,
						expr: &seqExpr{
							pos: position{line: 412, col: 5, offset: 12563},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 412, col: 5, offset: 12563},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 412, col: 7, offset: 12565},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 412, col: 12, offset: 12570},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 413, col: 5, offset: 12599},
						run: (*parser).callonSampleExpr7,
						expr: &litMatcher{
							pos:        position{line: 413, col: 5, offset: 12599},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromProc",
			pos:  position{line: 415, col: 1, offset: 12657},
			expr: &actionExpr{
				pos: position{line: 416, col: 5, offset: 12670},
				run: (*parser).callonFromProc1,
				expr: &labeledExpr{
					pos:   position{line: 416, col: 5, offset: 12670},
					label: "source",
					expr: &ruleRefExpr{
						pos:  position{line: 416, col: 12, offset: 12677},
						name: "FromAny",
					},
				},
			},
		},
		{
			name: "FromAny",
			pos:  position{line: 420, col: 1, offset: 12833},
			expr: &choiceExpr{
				pos: position{line: 421, col: 5, offset: 12845},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 421, col: 5, offset: 12845},
						name: "FileProc",
					},
					&ruleRefExpr{
						pos:  position{line: 422, col: 5, offset: 12858},
						name: "HTTPProc",
					},
					&ruleRefExpr{
						pos:  position{line: 423, col: 5, offset: 12871},
						name: "PoolProc",
					},
				},
			},
		},
		{
			name: "FileProc",
			pos:  position{line: 425, col: 1, offset: 12881},
			expr: &actionExpr{
				pos: position{line: 426, col: 5, offset: 12894},
				run: (*parser).callonFileProc1,
				expr: &seqExpr{
					pos: position{line: 426, col: 5, offset: 12894},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 426, col: 5, offset: 12894},
							val:        "file",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 426, col: 13, offset: 12902},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 426, col: 15, offset: 12904},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 426, col: 20, offset: 12909},
								name: "Path",
							},
						},
						&labeledExpr{
							pos:   position{line: 426, col: 25, offset: 12914},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 426, col: 32, offset: 12921},
								expr: &ruleRefExpr{
									pos:  position{line: 426, col: 32, offset: 12921},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 426, col: 43, offset: 12932},
							label: "layout",
							expr: &zeroOrOneExpr{
								pos: position{line: 426, col: 50, offset: 12939},
								expr: &ruleRefExpr{
									pos:  position{line: 426, col: 50, offset: 12939},
									name: "LayoutArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PoolProc",
			pos:  position{line: 430, col: 1, offset: 13068},
			expr: &actionExpr{
				pos: position{line: 431, col: 5, offset: 13081},
				run: (*parser).callonPoolProc1,
				expr: &seqExpr{
					pos: position{line: 431, col: 5, offset: 13081},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 431, col: 5, offset: 13081},
							val:        "from",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 431, col: 13, offset: 13089},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 431, col: 15, offset: 13091},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 431, col: 20, offset: 13096},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolBody",
			pos:  position{line: 433, col: 1, offset: 13127},
			expr: &actionExpr{
				pos: position{line: 434, col: 5, offset: 13140},
				run: (*parser).callonPoolBody1,
				expr: &seqExpr{
					pos: position{line: 434, col: 5, offset: 13140},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 434, col: 5, offset: 13140},
							label: "spec",
							expr: &ruleRefExpr{
								pos:  position{line: 434, col: 10, offset: 13145},
								name: "PoolSpec",
							},
						},
						&labeledExpr{
							pos:   position{line: 434, col: 19, offset: 13154},
							label: "at",
							expr: &zeroOrOneExpr{
								pos: position{line: 434, col: 22, offset: 13157},
								expr: &ruleRefExpr{
									pos:  position{line: 434, col: 22, offset: 13157},
									name: "PoolAt",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 434, col: 30, offset: 13165},
							label: "over",
							expr: &zeroOrOneExpr{
								pos: position{line: 434, col: 35, offset: 13170},
								expr: &ruleRefExpr{
									pos:  position{line: 434, col: 35, offset: 13170},
									name: "PoolRange",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 434, col: 46, offset: 13181},
							label: "order",
							expr: &zeroOrOneExpr{
								pos: position{line: 434, col: 52, offset: 13187},
								expr: &ruleRefExpr{
									pos:  position{line: 434, col: 52, offset: 13187},
									name: "OrderArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "HTTPProc",
			pos:  position{line: 438, col: 1, offset: 13323},
			expr: &actionExpr{
				pos: position{line: 439, col: 5, offset: 13336},
				run: (*parser).callonHTTPProc1,
				expr: &seqExpr{
					pos: position{line: 439, col: 5, offset: 13336},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 439, col: 5, offset: 13336},
							val:        "get",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 439, col: 12, offset: 13343},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 439, col: 14, offset: 13345},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 439, col: 18, offset: 13349},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 439, col: 22, offset: 13353},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 439, col: 29, offset: 13360},
								expr: &ruleRefExpr{
									pos:  position{line: 439, col: 29, offset: 13360},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 439, col: 40, offset: 13371},
							label: "layout",
							expr: &zeroOrOneExpr{
								pos: position{line: 439, col: 47, offset: 13378},
								expr: &ruleRefExpr{
									pos:  position{line: 439, col: 47, offset: 13378},
									name: "LayoutArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 443, col: 1, offset: 13504},
			expr: &actionExpr{
				pos: position{line: 443, col: 7, offset: 13510},
				run: (*parser).callonURL1,
				expr: &seqExpr{
					pos: position{line: 443, col: 7, offset: 13510},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 443, col: 8, offset: 13511},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 443, col: 8, offset: 13511},
									val:        "http:",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 443, col: 18, offset: 13521},
									val:        "https:",
									ignoreCase: false,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 443, col: 28, offset: 13531},
							name: "Path",
						},
					},
				},
			},
		},
		{
			name: "Path",
			pos:  position{line: 445, col: 1, offset: 13568},
			expr: &choiceExpr{
				pos: position{line: 446, col: 5, offset: 13577},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 446, col: 5, offset: 13577},
						run: (*parser).callonPath2,
						expr: &labeledExpr{
							pos:   position{line: 446, col: 5, offset: 13577},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 446, col: 7, offset: 13579},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 447, col: 5, offset: 13614},
						run: (*parser).callonPath5,
						expr: &oneOrMoreExpr{
							pos: position{line: 447, col: 5, offset: 13614},
							expr: &charClassMatcher{
								pos:        position{line: 447, col: 5, offset: 13614},
								val:        "[0-9a-zA-Z!@$%^&*()_=<>,./?:[\\]{}~|+-]",
								chars:      []rune{'!', '@', '$', '%', '^', '&', '*', '(', ')', '_', '=', '<', '>', ',', '.', '/', '?', ':', '[', ']', '{', '}', '~', '|', '+', '-'},
								ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PoolAt",
			pos:  position{line: 450, col: 1, offset: 13719},
			expr: &actionExpr{
				pos: position{line: 451, col: 5, offset: 13730},
				run: (*parser).callonPoolAt1,
				expr: &seqExpr{
					pos: position{line: 451, col: 5, offset: 13730},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 451, col: 5, offset: 13730},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 451, col: 7, offset: 13732},
							val:        "at",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 451, col: 13, offset: 13738},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 451, col: 15, offset: 13740},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 451, col: 18, offset: 13743},
								name: "KSUID",
							},
						},
					},
				},
			},
		},
		{
			name: "KSUID",
			pos:  position{line: 454, col: 1, offset: 13809},
			expr: &actionExpr{
				pos: position{line: 454, col: 9, offset: 13817},
				run: (*parser).callonKSUID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 454, col: 9, offset: 13817},
					expr: &charClassMatcher{
						pos:        position{line: 454, col: 10, offset: 13818},
						val:        "[0-9a-zA-Z]",
						ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "PoolRange",
			pos:  position{line: 456, col: 1, offset: 13864},
			expr: &actionExpr{
				pos: position{line: 457, col: 5, offset: 13878},
				run: (*parser).callonPoolRange1,
				expr: &seqExpr{
					pos: position{line: 457, col: 5, offset: 13878},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 457, col: 5, offset: 13878},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 457, col: 7, offset: 13880},
							val:        "range",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 457, col: 16, offset: 13889},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 457, col: 18, offset: 13891},
							label: "lower",
							expr: &ruleRefExpr{
								pos:  position{line: 457, col: 24, offset: 13897},
								name: "Literal",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 457, col: 32, offset: 13905},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 457, col: 34, offset: 13907},
							val:        "to",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 457, col: 40, offset: 13913},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 457, col: 42, offset: 13915},
							label: "upper",
							expr: &ruleRefExpr{
								pos:  position{line: 457, col: 48, offset: 13921},
								name: "Literal",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolSpec",
			pos:  position{line: 461, col: 1, offset: 14026},
			expr: &choiceExpr{
				pos: position{line: 462, col: 5, offset: 14039},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 462, col: 5, offset: 14039},
						run: (*parser).callonPoolSpec2,
						expr: &seqExpr{
							pos: position{line: 462, col: 5, offset: 14039},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 462, col: 5, offset: 14039},
									label: "pool",
									expr: &ruleRefExpr{
										pos:  position{line: 462, col: 10, offset: 14044},
										name: "PoolName",
									},
								},
								&labeledExpr{
									pos:   position{line: 462, col: 19, offset: 14053},
									label: "commit",
									expr: &zeroOrOneExpr{
										pos: position{line: 462, col: 26, offset: 14060},
										expr: &ruleRefExpr{
											pos:  position{line: 462, col: 26, offset: 14060},
											name: "PoolCommit",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 462, col: 38, offset: 14072},
									label: "meta",
									expr: &zeroOrOneExpr{
										pos: position{line: 462, col: 43, offset: 14077},
										expr: &ruleRefExpr{
											pos:  position{line: 462, col: 43, offset: 14077},
											name: "PoolMeta",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 465, col: 5, offset: 14186},
						run: (*parser).callonPoolSpec12,
						expr: &labeledExpr{
							pos:   position{line: 465, col: 5, offset: 14186},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 465, col: 10, offset: 14191},
								name: "PoolMeta",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolCommit",
			pos:  position{line: 469, col: 1, offset: 14292},
			expr: &actionExpr{
				pos: position{line: 470, col: 5, offset: 14307},
				run: (*parser).callonPoolCommit1,
				expr: &seqExpr{
					pos: position{line: 470, col: 5, offset: 14307},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 470, col: 5, offset: 14307},
							val:        "@",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 470, col: 9, offset: 14311},
							label: "commit",
							expr: &ruleRefExpr{
								pos:  position{line: 470, col: 16, offset: 14318},
								name: "PoolName",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolMeta",
			pos:  position{line: 472, col: 1, offset: 14351},
			expr: &actionExpr{
				pos: position{line: 473, col: 5, offset: 14364},
				run: (*parser).callonPoolMeta1,
				expr: &seqExpr{
					pos: position{line: 473, col: 5, offset: 14364},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 473, col: 5, offset: 14364},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 473, col: 9, offset: 14368},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 473, col: 14, offset: 14373},
								name: "PoolIdentifier",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolName",
			pos:  position{line: 475, col: 1, offset: 14410},
			expr: &choiceExpr{
				pos: position{line: 476, col: 5, offset: 14423},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 476, col: 5, offset: 14423},
						name: "PoolIdentifier",
					},
					&ruleRefExpr{
						pos:  position{line: 477, col: 5, offset: 14442},
						name: "KSUID",
					},
					&ruleRefExpr{
						pos:  position{line: 478, col: 5, offset: 14452},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "PoolIdentifier",
			pos:  position{line: 480, col: 1, offset: 14466},
			expr: &actionExpr{
				pos: position{line: 481, col: 5, offset: 14485},
				run: (*parser).callonPoolIdentifier1,
				expr: &seqExpr{
					pos: position{line: 481, col: 5, offset: 14485},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 481, col: 6, offset: 14486},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 481, col: 6, offset: 14486},
									name: "IdentifierStart",
								},
								&litMatcher{
									pos:        position{line: 481, col: 24, offset: 14504},
									val:        ".",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 481, col: 29, offset: 14509},
							expr: &choiceExpr{
								pos: position{line: 481, col: 30, offset: 14510},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 481, col: 30, offset: 14510},
										name: "IdentifierRest",
									},
									&litMatcher{
										pos:        position{line: 481, col: 47, offset: 14527},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LayoutArg",
			pos:  position{line: 483, col: 1, offset: 14566},
			expr: &actionExpr{
				pos: position{line: 484, col: 5, offset: 14580},
				run: (*parser).callonLayoutArg1,
				expr: &seqExpr{
					pos: position{line: 484, col: 5, offset: 14580},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 484, col: 5, offset: 14580},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 484, col: 7, offset: 14582},
							val:        "order",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 484, col: 16, offset: 14591},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 484, col: 18, offset: 14593},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 484, col: 23, offset: 14598},
								name: "FieldExprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 484, col: 34, offset: 14609},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 484, col: 40, offset: 14615},
								name: "OrderSuffix",
							},
						},
					},
				},
			},
		},
		{
			name: "FormatArg",
			pos:  position{line: 488, col: 1, offset: 14725},
			expr: &actionExpr{
				pos: position{line: 489, col: 5, offset: 14739},
				run: (*parser).callonFormatArg1,
				expr: &seqExpr{
					pos: position{line: 489, col: 5, offset: 14739},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 489, col: 5, offset: 14739},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 489, col: 7, offset: 14741},
							val:        "format",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 489, col: 17, offset: 14751},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 489, col: 19, offset: 14753},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 489, col: 23, offset: 14757},
								name: "IdentifierName",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderSuffix",
			pos:  position{line: 491, col: 1, offset: 14793},
			expr: &choiceExpr{
				pos: position{line: 492, col: 5, offset: 14809},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 492, col: 5, offset: 14809},
						run: (*parser).callonOrderSuffix2,
						expr: &litMatcher{
							pos:        position{line: 492, col: 5, offset: 14809},
							val:        ":asc",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 493, col: 5, offset: 14844},
						run: (*parser).callonOrderSuffix4,
						expr: &litMatcher{
							pos:        position{line: 493, col: 5, offset: 14844},
							val:        ":desc",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 494, col: 5, offset: 14881},
						run: (*parser).callonOrderSuffix6,
						expr: &litMatcher{
							pos:        position{line: 494, col: 5, offset: 14881},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OrderArg",
			pos:  position{line: 496, col: 1, offset: 14907},
			expr: &choiceExpr{
				pos: position{line: 497, col: 5, offset: 14920},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 497, col: 5, offset: 14920},
						run: (*parser).callonOrderArg2,
						expr: &seqExpr{
							pos: position{line: 497, col: 5, offset: 14920},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 497, col: 5, offset: 14920},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 497, col: 7, offset: 14922},
									val:        "order",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 497, col: 16, offset: 14931},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 497, col: 18, offset: 14933},
									val:        "asc",
									ignoreCase: true,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 498, col: 5, offset: 14967},
						run: (*parser).callonOrderArg8,
						expr: &seqExpr{
							pos: position{line: 498, col: 5, offset: 14967},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 498, col: 5, offset: 14967},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 498, col: 7, offset: 14969},
									val:        "order",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 498, col: 16, offset: 14978},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 498, col: 18, offset: 14980},
									val:        "desc",
									ignoreCase: true,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassProc",
			pos:  position{line: 500, col: 1, offset: 15013},
			expr: &actionExpr{
				pos: position{line: 501, col: 5, offset: 15026},
				run: (*parser).callonPassProc1,
				expr: &litMatcher{
					pos:        position{line: 501, col: 5, offset: 15026},
					val:        "pass",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ExplodeProc",
			pos:  position{line: 507, col: 1, offset: 15221},
			expr: &actionExpr{
				pos: position{line: 508, col: 5, offset: 15237},
				run: (*parser).callonExplodeProc1,
				expr: &seqExpr{
					pos: position{line: 508, col: 5, offset: 15237},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 508, col: 5, offset: 15237},
							val:        "explode",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 508, col: 16, offset: 15248},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 508, col: 18, offset: 15250},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 508, col: 23, offset: 15255},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 508, col: 29, offset: 15261},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 508, col: 33, offset: 15265},
								name: "TypeArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 508, col: 41, offset: 15273},
							label: "as",
							expr: &zeroOrOneExpr{
								pos: position{line: 508, col: 44, offset: 15276},
								expr: &ruleRefExpr{
									pos:  position{line: 508, col: 44, offset: 15276},
									name: "AsArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OverProc",
			pos:  position{line: 512, col: 1, offset: 15388},
			expr: &actionExpr{
				pos: position{line: 513, col: 5, offset: 15401},
				run: (*parser).callonOverProc1,
				expr: &seqExpr{
					pos: position{line: 513, col: 5, offset: 15401},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 513, col: 5, offset: 15401},
							val:        "over",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 513, col: 13, offset: 15409},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 513, col: 15, offset: 15411},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 513, col: 21, offset: 15417},
								name: "Exprs",
							},
						},
					},
				},
			},
		},
		{
			name: "LetProc",
			pos:  position{line: 517, col: 1, offset: 15500},
			expr: &actionExpr{
				pos: position{line: 518, col: 5, offset: 15512},
				run: (*parser).callonLetProc1,
				expr: &seqExpr{
					pos: position{line: 518, col: 5, offset: 15512},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 518, col: 5, offset: 15512},
							val:        "let",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 518, col: 12, offset: 15519},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 518, col: 14, offset: 15521},
							label: "locals",
							expr: &ruleRefExpr{
								pos:  position{line: 518, col: 21, offset: 15528},
								name: "FlexAssignments",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 518, col: 37, offset: 15544},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 518, col: 40, offset: 15547},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 518, col: 45, offset: 15552},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 518, col: 48, offset: 15555},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 518, col: 52, offset: 15559},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 518, col: 55, offset: 15562},
							label: "seq",
							expr: &ruleRefExpr{
								pos:  position{line: 518, col: 59, offset: 15566},
								name: "Sequential",
							},
						},
						&litMatcher{
							pos:        position{line: 518, col: 70, offset: 15577},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "YieldProc",
			pos:  position{line: 522, col: 1, offset: 15672},
			expr: &actionExpr{
				pos: position{line: 523, col: 5, offset: 15686},
				run: (*parser).callonYieldProc1,
				expr: &seqExpr{
					pos: position{line: 523, col: 5, offset: 15686},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 523, col: 5, offset: 15686},
							val:        "yield",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 523, col: 14, offset: 15695},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 523, col: 16, offset: 15697},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 523, col: 22, offset: 15703},
								name: "Exprs",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeArg",
			pos:  position{line: 527, col: 1, offset: 15787},
			expr: &actionExpr{
				pos: position{line: 528, col: 5, offset: 15799},
				run: (*parser).callonTypeArg1,
				expr: &seqExpr{
					pos: position{line: 528, col: 5, offset: 15799},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 528, col: 5, offset: 15799},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 528, col: 7, offset: 15801},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 528, col: 10, offset: 15804},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 528, col: 12, offset: 15806},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 528, col: 16, offset: 15810},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "AsArg",
			pos:  position{line: 530, col: 1, offset: 15835},
			expr: &actionExpr{
				pos: position{line: 531, col: 5, offset: 15845},
				run: (*parser).callonAsArg1,
				expr: &seqExpr{
					pos: position{line: 531, col: 5, offset: 15845},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 531, col: 5, offset: 15845},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 531, col: 7, offset: 15847},
							name: "AS",
						},
						&ruleRefExpr{
							pos:  position{line: 531, col: 10, offset: 15850},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 531, col: 12, offset: 15852},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 531, col: 16, offset: 15856},
								name: "Lval",
							},
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 535, col: 1, offset: 15907},
			expr: &ruleRefExpr{
				pos:  position{line: 535, col: 8, offset: 15914},
				name: "DerefExpr",
			},
		},
		{
			name: "Lvals",
			pos:  position{line: 537, col: 1, offset: 15925},
			expr: &actionExpr{
				pos: position{line: 538, col: 5, offset: 15935},
				run: (*parser).callonLvals1,
				expr: &seqExpr{
					pos: position{line: 538, col: 5, offset: 15935},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 538, col: 5, offset: 15935},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 538, col: 11, offset: 15941},
								name: "Lval",
							},
						},
						&labeledExpr{
							pos:   position{line: 538, col: 16, offset: 15946},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 538, col: 21, offset: 15951},
								expr: &actionExpr{
									pos: position{line: 538, col: 22, offset: 15952},
									run: (*parser).callonLvals7,
									expr: &seqExpr{
										pos: position{line: 538, col: 22, offset: 15952},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 538, col: 22, offset: 15952},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 538, col: 25, offset: 15955},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 538, col: 29, offset: 15959},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 538, col: 32, offset: 15962},
												label: "lval",
												expr: &ruleRefExpr{
													pos:  position{line: 538, col: 37, offset: 15967},
													name: "Lval",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 542, col: 1, offset: 16079},
			expr: &ruleRefExpr{
				pos:  position{line: 542, col: 13, offset: 16091},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 544, col: 1, offset: 16097},
			expr: &actionExpr{
				pos: position{line: 545, col: 5, offset: 16112},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 545, col: 5, offset: 16112},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 545, col: 5, offset: 16112},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 545, col: 11, offset: 16118},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 545, col: 21, offset: 16128},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 545, col: 26, offset: 16133},
								expr: &seqExpr{
									pos: position{line: 545, col: 27, offset: 16134},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 545, col: 27, offset: 16134},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 545, col: 30, offset: 16137},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 545, col: 34, offset: 16141},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 545, col: 37, offset: 16144},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignments",
			pos:  position{line: 555, col: 1, offset: 16343},
			expr: &actionExpr{
				pos: position{line: 556, col: 5, offset: 16359},
				run: (*parser).callonAssignments1,
				expr: &seqExpr{
					pos: position{line: 556, col: 5, offset: 16359},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 556, col: 5, offset: 16359},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 556, col: 11, offset: 16365},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 556, col: 22, offset: 16376},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 556, col: 27, offset: 16381},
								expr: &actionExpr{
									pos: position{line: 556, col: 28, offset: 16382},
									run: (*parser).callonAssignments7,
									expr: &seqExpr{
										pos: position{line: 556, col: 28, offset: 16382},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 556, col: 28, offset: 16382},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 556, col: 31, offset: 16385},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 556, col: 35, offset: 16389},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 556, col: 38, offset: 16392},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 556, col: 40, offset: 16394},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 560, col: 1, offset: 16505},
			expr: &actionExpr{
				pos: position{line: 561, col: 5, offset: 16520},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 561, col: 5, offset: 16520},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 561, col: 5, offset: 16520},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 561, col: 9, offset: 16524},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 561, col: 14, offset: 16529},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 561, col: 17, offset: 16532},
							val:        ":=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 561, col: 22, offset: 16537},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 561, col: 25, offset: 16540},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 561, col: 29, offset: 16544},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 563, col: 1, offset: 16635},
			expr: &ruleRefExpr{
				pos:  position{line: 563, col: 8, offset: 16642},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 565, col: 1, offset: 16659},
			expr: &choiceExpr{
				pos: position{line: 566, col: 5, offset: 16679},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 566, col: 5, offset: 16679},
						run: (*parser).callonConditionalExpr2,
						expr: &seqExpr{
							pos: position{line: 566, col: 5, offset: 16679},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 566, col: 5, offset: 16679},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 566, col: 15, offset: 16689},
										name: "LogicalOrExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 566, col: 29, offset: 16703},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 566, col: 32, offset: 16706},
									val:        "?",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 566, col: 36, offset: 16710},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 566, col: 39, offset: 16713},
									label: "thenClause",
									expr: &ruleRefExpr{
										pos:  position{line: 566, col: 50, offset: 16724},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 566, col: 55, offset: 16729},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 566, col: 58, offset: 16732},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 566, col: 62, offset: 16736},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 566, col: 65, offset: 16739},
									label: "elseClause",
									expr: &ruleRefExpr{
										pos:  position{line: 566, col: 76, offset: 16750},
										name: "Expr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 569, col: 5, offset: 16890},
						name: "LogicalOrExpr",
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 571, col: 1, offset: 16905},
			expr: &actionExpr{
				pos: position{line: 572, col: 5, offset: 16923},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 572, col: 5, offset: 16923},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 572, col: 5, offset: 16923},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 572, col: 11, offset: 16929},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 573, col: 5, offset: 16948},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 573, col: 10, offset: 16953},
								expr: &actionExpr{
									pos: position{line: 573, col: 11, offset: 16954},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 573, col: 11, offset: 16954},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 573, col: 11, offset: 16954},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 573, col: 14, offset: 16957},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 573, col: 17, offset: 16960},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 573, col: 25, offset: 16968},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 573, col: 28, offset: 16971},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 573, col: 33, offset: 16976},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 577, col: 1, offset: 17094},
			expr: &actionExpr{
				pos: position{line: 578, col: 5, offset: 17113},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 578, col: 5, offset: 17113},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 578, col: 5, offset: 17113},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 578, col: 11, offset: 17119},
								name: "EqualityCompareExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 579, col: 5, offset: 17143},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 579, col: 10, offset: 17148},
								expr: &actionExpr{
									pos: position{line: 579, col: 11, offset: 17149},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 579, col: 11, offset: 17149},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 579, col: 11, offset: 17149},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 579, col: 14, offset: 17152},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 579, col: 17, offset: 17155},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 579, col: 26, offset: 17164},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 579, col: 29, offset: 17167},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 579, col: 34, offset: 17172},
													name: "EqualityCompareExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityCompareExpr",
			pos:  position{line: 583, col: 1, offset: 17295},
			expr: &choiceExpr{
				pos: position{line: 584, col: 5, offset: 17319},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 584, col: 5, offset: 17319},
						name: "PatternMatch",
					},
					&actionExpr{
						pos: position{line: 585, col: 5, offset: 17336},
						run: (*parser).callonEqualityCompareExpr3,
						expr: &seqExpr{
							pos: position{line: 585, col: 5, offset: 17336},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 585, col: 5, offset: 17336},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 585, col: 11, offset: 17342},
										name: "RelativeExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 586, col: 5, offset: 17359},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 586, col: 10, offset: 17364},
										expr: &actionExpr{
											pos: position{line: 586, col: 11, offset: 17365},
											run: (*parser).callonEqualityCompareExpr9,
											expr: &seqExpr{
												pos: position{line: 586, col: 11, offset: 17365},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 586, col: 11, offset: 17365},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 586, col: 14, offset: 17368},
														label: "comp",
														expr: &ruleRefExpr{
															pos:  position{line: 586, col: 19, offset: 17373},
															name: "EqualityComparator",
														},
													},
													&ruleRefExpr{
														pos:  position{line: 586, col: 38, offset: 17392},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 586, col: 41, offset: 17395},
														label: "expr",
														expr: &ruleRefExpr{
															pos:  position{line: 586, col: 46, offset: 17400},
															name: "RelativeExpr",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityOperator",
			pos:  position{line: 590, col: 1, offset: 17518},
			expr: &choiceExpr{
				pos: position{line: 591, col: 5, offset: 17539},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 591, col: 5, offset: 17539},
						run: (*parser).callonEqualityOperator2,
						expr: &litMatcher{
							pos:        position{line: 591, col: 5, offset: 17539},
							val:        "==",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 592, col: 5, offset: 17568},
						run: (*parser).callonEqualityOperator4,
						expr: &litMatcher{
							pos:        position{line: 592, col: 5, offset: 17568},
							val:        "!=",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "EqualityComparator",
			pos:  position{line: 594, col: 1, offset: 17605},
			expr: &choiceExpr{
				pos: position{line: 595, col: 5, offset: 17628},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 595, col: 5, offset: 17628},
						name: "EqualityOperator",
					},
					&actionExpr{
						pos: position{line: 596, col: 5, offset: 17649},
						run: (*parser).callonEqualityComparator3,
						expr: &seqExpr{
							pos: position{line: 596, col: 5, offset: 17649},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 596, col: 5, offset: 17649},
									val:        "in",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 596, col: 10, offset: 17654},
									expr: &ruleRefExpr{
										pos:  position{line: 596, col: 11, offset: 17655},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeExpr",
			pos:  position{line: 598, col: 1, offset: 17702},
			expr: &actionExpr{
				pos: position{line: 599, col: 5, offset: 17719},
				run: (*parser).callonRelativeExpr1,
				expr: &seqExpr{
					pos: position{line: 599, col: 5, offset: 17719},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 599, col: 5, offset: 17719},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 599, col: 11, offset: 17725},
								name: "AdditiveExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 600, col: 5, offset: 17742},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 600, col: 10, offset: 17747},
								expr: &actionExpr{
									pos: position{line: 600, col: 11, offset: 17748},
									run: (*parser).callonRelativeExpr7,
									expr: &seqExpr{
										pos: position{line: 600, col: 11, offset: 17748},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 600, col: 11, offset: 17748},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 600, col: 14, offset: 17751},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 600, col: 17, offset: 17754},
													name: "RelativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 600, col: 34, offset: 17771},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 600, col: 37, offset: 17774},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 600, col: 42, offset: 17779},
													name: "AdditiveExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeOperator",
			pos:  position{line: 604, col: 1, offset: 17895},
			expr: &actionExpr{
				pos: position{line: 604, col: 20, offset: 17914},
				run: (*parser).callonRelativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 604, col: 21, offset: 17915},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 604, col: 21, offset: 17915},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 604, col: 28, offset: 17922},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 604, col: 34, offset: 17928},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 604, col: 41, offset: 17935},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 606, col: 1, offset: 17972},
			expr: &actionExpr{
				pos: position{line: 607, col: 5, offset: 17989},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 607, col: 5, offset: 17989},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 607, col: 5, offset: 17989},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 607, col: 11, offset: 17995},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 608, col: 5, offset: 18018},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 608, col: 10, offset: 18023},
								expr: &actionExpr{
									pos: position{line: 608, col: 11, offset: 18024},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 608, col: 11, offset: 18024},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 608, col: 11, offset: 18024},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 608, col: 14, offset: 18027},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 608, col: 17, offset: 18030},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 608, col: 34, offset: 18047},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 608, col: 37, offset: 18050},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 608, col: 42, offset: 18055},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 612, col: 1, offset: 18177},
			expr: &actionExpr{
				pos: position{line: 612, col: 20, offset: 18196},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 612, col: 21, offset: 18197},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 612, col: 21, offset: 18197},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 612, col: 27, offset: 18203},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 614, col: 1, offset: 18240},
			expr: &actionExpr{
				pos: position{line: 615, col: 5, offset: 18263},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 615, col: 5, offset: 18263},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 615, col: 5, offset: 18263},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 615, col: 11, offset: 18269},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 616, col: 5, offset: 18281},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 616, col: 10, offset: 18286},
								expr: &actionExpr{
									pos: position{line: 616, col: 11, offset: 18287},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 616, col: 11, offset: 18287},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 616, col: 11, offset: 18287},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 616, col: 14, offset: 18290},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 616, col: 17, offset: 18293},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 616, col: 40, offset: 18316},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 616, col: 43, offset: 18319},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 616, col: 48, offset: 18324},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 620, col: 1, offset: 18435},
			expr: &actionExpr{
				pos: position{line: 620, col: 26, offset: 18460},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 620, col: 27, offset: 18461},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 620, col: 27, offset: 18461},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 620, col: 33, offset: 18467},
							val:        "/",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 620, col: 39, offset: 18473},
							val:        "%",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 622, col: 1, offset: 18510},
			expr: &choiceExpr{
				pos: position{line: 623, col: 5, offset: 18522},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 623, col: 5, offset: 18522},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 623, col: 5, offset: 18522},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 623, col: 5, offset: 18522},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 623, col: 9, offset: 18526},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 623, col: 12, offset: 18529},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 623, col: 14, offset: 18531},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 626, col: 5, offset: 18640},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 628, col: 1, offset: 18650},
			expr: &choiceExpr{
				pos: position{line: 629, col: 5, offset: 18663},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 629, col: 5, offset: 18663},
						name: "MatchExpr",
					},
					&actionExpr{
						pos: position{line: 630, col: 5, offset: 18677},
						run: (*parser).callonFuncExpr3,
						expr: &seqExpr{
							pos: position{line: 630, col: 5, offset: 18677},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 630, col: 5, offset: 18677},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 630, col: 11, offset: 18683},
										name: "Cast",
									},
								},
								&labeledExpr{
									pos:   position{line: 630, col: 16, offset: 18688},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 630, col: 21, offset: 18693},
										expr: &ruleRefExpr{
											pos:  position{line: 630, col: 22, offset: 18694},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 633, col: 5, offset: 18765},
						run: (*parser).callonFuncExpr10,
						expr: &seqExpr{
							pos: position{line: 633, col: 5, offset: 18765},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 633, col: 5, offset: 18765},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 633, col: 11, offset: 18771},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 633, col: 20, offset: 18780},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 633, col: 25, offset: 18785},
										expr: &ruleRefExpr{
											pos:  position{line: 633, col: 26, offset: 18786},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 636, col: 5, offset: 18857},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 637, col: 5, offset: 18871},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FuncGuard",
			pos:  position{line: 639, col: 1, offset: 18880},
			expr: &seqExpr{
				pos: position{line: 639, col: 13, offset: 18892},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 639, col: 13, offset: 18892},
						name: "NotFuncs",
					},
					&ruleRefExpr{
						pos:  position{line: 639, col: 22, offset: 18901},
						name: "__",
					},
					&litMatcher{
						pos:        position{line: 639, col: 25, offset: 18904},
						val:        "(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "NotFuncs",
			pos:  position{line: 641, col: 1, offset: 18909},
			expr: &choiceExpr{
				pos: position{line: 642, col: 5, offset: 18922},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 642, col: 5, offset: 18922},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 643, col: 5, offset: 18932},
						val:        "match",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 644, col: 5, offset: 18944},
						val:        "select",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 645, col: 5, offset: 18957},
						val:        "type",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "MatchExpr",
			pos:  position{line: 647, col: 1, offset: 18965},
			expr: &actionExpr{
				pos: position{line: 648, col: 5, offset: 18979},
				run: (*parser).callonMatchExpr1,
				expr: &seqExpr{
					pos: position{line: 648, col: 5, offset: 18979},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 648, col: 5, offset: 18979},
							val:        "match",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 648, col: 13, offset: 18987},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 648, col: 16, offset: 18990},
							val:        "(",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 648, col: 20, offset: 18994},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 648, col: 25, offset: 18999},
								name: "SearchBoolean",
							},
						},
						&litMatcher{
							pos:        position{line: 648, col: 39, offset: 19013},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Cast",
			pos:  position{line: 650, col: 1, offset: 19039},
			expr: &actionExpr{
				pos: position{line: 651, col: 5, offset: 19048},
				run: (*parser).callonCast1,
				expr: &seqExpr{
					pos: position{line: 651, col: 5, offset: 19048},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 651, col: 5, offset: 19048},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 651, col: 9, offset: 19052},
								name: "CastType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 651, col: 18, offset: 19061},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 651, col: 21, offset: 19064},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 651, col: 25, offset: 19068},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 651, col: 28, offset: 19071},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 651, col: 33, offset: 19076},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 651, col: 38, offset: 19081},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 651, col: 41, offset: 19084},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 655, col: 1, offset: 19181},
			expr: &actionExpr{
				pos: position{line: 656, col: 5, offset: 19194},
				run: (*parser).callonFunction1,
				expr: &seqExpr{
					pos: position{line: 656, col: 5, offset: 19194},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 656, col: 5, offset: 19194},
							expr: &ruleRefExpr{
								pos:  position{line: 656, col: 6, offset: 19195},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 656, col: 16, offset: 19205},
							label: "fn",
							expr: &ruleRefExpr{
								pos:  position{line: 656, col: 19, offset: 19208},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 656, col: 34, offset: 19223},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 656, col: 37, offset: 19226},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 656, col: 41, offset: 19230},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 656, col: 44, offset: 19233},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 656, col: 49, offset: 19238},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 656, col: 63, offset: 19252},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 656, col: 66, offset: 19255},
							val:        ")",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 656, col: 70, offset: 19259},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 656, col: 76, offset: 19265},
								expr: &ruleRefExpr{
									pos:  position{line: 656, col: 76, offset: 19265},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OptionalExprs",
			pos:  position{line: 660, col: 1, offset: 19386},
			expr: &choiceExpr{
				pos: position{line: 661, col: 5, offset: 19404},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 661, col: 5, offset: 19404},
						name: "Exprs",
					},
					&actionExpr{
						pos: position{line: 662, col: 5, offset: 19414},
						run: (*parser).callonOptionalExprs3,
						expr: &ruleRefExpr{
							pos:  position{line: 662, col: 5, offset: 19414},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 664, col: 1, offset: 19450},
			expr: &actionExpr{
				pos: position{line: 665, col: 5, offset: 19460},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 665, col: 5, offset: 19460},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 665, col: 5, offset: 19460},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 665, col: 11, offset: 19466},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 665, col: 16, offset: 19471},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 665, col: 21, offset: 19476},
								expr: &actionExpr{
									pos: position{line: 665, col: 22, offset: 19477},
									run: (*parser).callonExprs7,
									expr: &seqExpr{
										pos: position{line: 665, col: 22, offset: 19477},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 665, col: 22, offset: 19477},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 665, col: 25, offset: 19480},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 665, col: 29, offset: 19484},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 665, col: 32, offset: 19487},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 665, col: 34, offset: 19489},
													name: "Expr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 669, col: 1, offset: 19598},
			expr: &actionExpr{
				pos: position{line: 669, col: 13, offset: 19610},
				run: (*parser).callonDerefExpr1,
				expr: &seqExpr{
					pos: position{line: 669, col: 13, offset: 19610},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 669, col: 13, offset: 19610},
							expr: &ruleRefExpr{
								pos:  position{line: 669, col: 14, offset: 19611},
								name: "IP6",
							},
						},
						&labeledExpr{
							pos:   position{line: 669, col: 18, offset: 19615},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 669, col: 20, offset: 19617},
								name: "DerefExprPattern",
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExprPattern",
			pos:  position{line: 671, col: 1, offset: 19653},
			expr: &choiceExpr{
				pos: position{line: 672, col: 5, offset: 19674},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 672, col: 5, offset: 19674},
						run: (*parser).callonDerefExprPattern2,
						expr: &seqExpr{
							pos: position{line: 672, col: 5, offset: 19674},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 672, col: 5, offset: 19674},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 672, col: 11, offset: 19680},
										name: "DotID",
									},
								},
								&labeledExpr{
									pos:   position{line: 672, col: 17, offset: 19686},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 672, col: 22, offset: 19691},
										expr: &ruleRefExpr{
											pos:  position{line: 672, col: 23, offset: 19692},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 675, col: 5, offset: 19763},
						run: (*parser).callonDerefExprPattern9,
						expr: &seqExpr{
							pos: position{line: 675, col: 5, offset: 19763},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 675, col: 5, offset: 19763},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 675, col: 11, offset: 19769},
										name: "This",
									},
								},
								&labeledExpr{
									pos:   position{line: 675, col: 16, offset: 19774},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 675, col: 21, offset: 19779},
										expr: &ruleRefExpr{
											pos:  position{line: 675, col: 22, offset: 19780},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 678, col: 5, offset: 19851},
						run: (*parser).callonDerefExprPattern16,
						expr: &seqExpr{
							pos: position{line: 678, col: 5, offset: 19851},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 678, col: 5, offset: 19851},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 678, col: 11, offset: 19857},
										name: "Identifier",
									},
								},
								&labeledExpr{
									pos:   position{line: 678, col: 22, offset: 19868},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 678, col: 27, offset: 19873},
										expr: &ruleRefExpr{
											pos:  position{line: 678, col: 28, offset: 19874},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 681, col: 5, offset: 19945},
						run: (*parser).callonDerefExprPattern23,
						expr: &litMatcher{
							pos:        position{line: 681, col: 5, offset: 19945},
							val:        ".",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "This",
			pos:  position{line: 685, col: 1, offset: 20014},
			expr: &actionExpr{
				pos: position{line: 685, col: 8, offset: 20021},
				run: (*parser).callonThis1,
				expr: &litMatcher{
					pos:        position{line: 685, col: 8, offset: 20021},
					val:        "this",
					ignoreCase: false,
				},
			},
		},
		{
			name: "DotID",
			pos:  position{line: 687, col: 1, offset: 20083},
			expr: &choiceExpr{
				pos: position{line: 688, col: 5, offset: 20093},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 688, col: 5, offset: 20093},
						run: (*parser).callonDotID2,
						expr: &seqExpr{
							pos: position{line: 688, col: 5, offset: 20093},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 688, col: 5, offset: 20093},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 688, col: 9, offset: 20097},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 688, col: 15, offset: 20103},
										name: "Identifier",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 697, col: 5, offset: 20319},
						run: (*parser).callonDotID7,
						expr: &seqExpr{
							pos: position{line: 697, col: 5, offset: 20319},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 697, col: 5, offset: 20319},
									val:        ".",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 697, col: 9, offset: 20323},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 697, col: 13, offset: 20327},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 697, col: 18, offset: 20332},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 697, col: 23, offset: 20337},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 707, col: 1, offset: 20542},
			expr: &choiceExpr{
				pos: position{line: 708, col: 5, offset: 20552},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 708, col: 5, offset: 20552},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 708, col: 5, offset: 20552},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 708, col: 5, offset: 20552},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 708, col: 9, offset: 20556},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 708, col: 14, offset: 20561},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 708, col: 27, offset: 20574},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 708, col: 30, offset: 20577},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 708, col: 34, offset: 20581},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 708, col: 37, offset: 20584},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 708, col: 40, offset: 20587},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 708, col: 53, offset: 20600},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 714, col: 5, offset: 20771},
						run: (*parser).callonDeref13,
						expr: &seqExpr{
							pos: position{line: 714, col: 5, offset: 20771},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 714, col: 5, offset: 20771},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 714, col: 9, offset: 20775},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 714, col: 12, offset: 20778},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 714, col: 16, offset: 20782},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 714, col: 19, offset: 20785},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 714, col: 22, offset: 20788},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 714, col: 35, offset: 20801},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 720, col: 5, offset: 20972},
						run: (*parser).callonDeref22,
						expr: &seqExpr{
							pos: position{line: 720, col: 5, offset: 20972},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 720, col: 5, offset: 20972},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 720, col: 9, offset: 20976},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 720, col: 14, offset: 20981},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 720, col: 27, offset: 20994},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 720, col: 30, offset: 20997},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 720, col: 34, offset: 21001},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 720, col: 37, offset: 21004},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 726, col: 5, offset: 21177},
						run: (*parser).callonDeref31,
						expr: &seqExpr{
							pos: position{line: 726, col: 5, offset: 21177},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 726, col: 5, offset: 21177},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 726, col: 9, offset: 21181},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 726, col: 14, offset: 21186},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 726, col: 19, offset: 21191},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 727, col: 5, offset: 21240},
						run: (*parser).callonDeref37,
						expr: &seqExpr{
							pos: position{line: 727, col: 5, offset: 21240},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 727, col: 5, offset: 21240},
									val:        ".",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 727, col: 9, offset: 21244},
									expr: &litMatcher{
										pos:        position{line: 727, col: 11, offset: 21246},
										val:        ".",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 727, col: 16, offset: 21251},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 727, col: 19, offset: 21254},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 729, col: 1, offset: 21305},
			expr: &choiceExpr{
				pos: position{line: 730, col: 5, offset: 21317},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 730, col: 5, offset: 21317},
						name: "Record",
					},
					&ruleRefExpr{
						pos:  position{line: 731, col: 5, offset: 21328},
						name: "Array",
					},
					&ruleRefExpr{
						pos:  position{line: 732, col: 5, offset: 21338},
						name: "Set",
					},
					&ruleRefExpr{
						pos:  position{line: 733, col: 5, offset: 21346},
						name: "Map",
					},
					&ruleRefExpr{
						pos:  position{line: 734, col: 5, offset: 21354},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 735, col: 5, offset: 21366},
						run: (*parser).callonPrimary7,
						expr: &seqExpr{
							pos: position{line: 735, col: 5, offset: 21366},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 735, col: 5, offset: 21366},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 735, col: 9, offset: 21370},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 735, col: 12, offset: 21373},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 735, col: 17, offset: 21378},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 735, col: 22, offset: 21383},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 735, col: 25, offset: 21386},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Record",
			pos:  position{line: 737, col: 1, offset: 21412},
			expr: &actionExpr{
				pos: position{line: 738, col: 5, offset: 21423},
				run: (*parser).callonRecord1,
				expr: &seqExpr{
					pos: position{line: 738, col: 5, offset: 21423},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 738, col: 5, offset: 21423},
							val:        "{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 738, col: 9, offset: 21427},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 738, col: 12, offset: 21430},
							label: "fields",
							expr: &ruleRefExpr{
								pos:  position{line: 738, col: 19, offset: 21437},
								name: "Fields",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 738, col: 26, offset: 21444},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 738, col: 29, offset: 21447},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Fields",
			pos:  position{line: 742, col: 1, offset: 21540},
			expr: &choiceExpr{
				pos: position{line: 743, col: 5, offset: 21551},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 743, col: 5, offset: 21551},
						run: (*parser).callonFields2,
						expr: &seqExpr{
							pos: position{line: 743, col: 5, offset: 21551},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 743, col: 5, offset: 21551},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 743, col: 11, offset: 21557},
										name: "Field",
									},
								},
								&labeledExpr{
									pos:   position{line: 743, col: 17, offset: 21563},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 743, col: 22, offset: 21568},
										expr: &ruleRefExpr{
											pos:  position{line: 743, col: 22, offset: 21568},
											name: "FieldTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 746, col: 5, offset: 21662},
						run: (*parser).callonFields9,
						expr: &ruleRefExpr{
							pos:  position{line: 746, col: 5, offset: 21662},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "FieldTail",
			pos:  position{line: 748, col: 1, offset: 21698},
			expr: &actionExpr{
				pos: position{line: 748, col: 13, offset: 21710},
				run: (*parser).callonFieldTail1,
				expr: &seqExpr{
					pos: position{line: 748, col: 13, offset: 21710},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 748, col: 13, offset: 21710},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 748, col: 16, offset: 21713},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 748, col: 20, offset: 21717},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 748, col: 23, offset: 21720},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 748, col: 25, offset: 21722},
								name: "Field",
							},
						},
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 750, col: 1, offset: 21747},
			expr: &actionExpr{
				pos: position{line: 751, col: 5, offset: 21757},
				run: (*parser).callonField1,
				expr: &seqExpr{
					pos: position{line: 751, col: 5, offset: 21757},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 751, col: 5, offset: 21757},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 751, col: 10, offset: 21762},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 751, col: 20, offset: 21772},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 751, col: 23, offset: 21775},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 751, col: 27, offset: 21779},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 751, col: 30, offset: 21782},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 751, col: 36, offset: 21788},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Array",
			pos:  position{line: 755, col: 1, offset: 21873},
			expr: &actionExpr{
				pos: position{line: 756, col: 5, offset: 21883},
				run: (*parser).callonArray1,
				expr: &seqExpr{
					pos: position{line: 756, col: 5, offset: 21883},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 756, col: 5, offset: 21883},
							val:        "[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 756, col: 9, offset: 21887},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 756, col: 12, offset: 21890},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 756, col: 18, offset: 21896},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 756, col: 32, offset: 21910},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 756, col: 35, offset: 21913},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Set",
			pos:  position{line: 760, col: 1, offset: 22003},
			expr: &actionExpr{
				pos: position{line: 761, col: 5, offset: 22011},
				run: (*parser).callonSet1,
				expr: &seqExpr{
					pos: position{line: 761, col: 5, offset: 22011},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 761, col: 5, offset: 22011},
							val:        "|[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 761, col: 10, offset: 22016},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 761, col: 13, offset: 22019},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 761, col: 19, offset: 22025},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 761, col: 33, offset: 22039},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 761, col: 36, offset: 22042},
							val:        "]|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Map",
			pos:  position{line: 765, col: 1, offset: 22131},
			expr: &actionExpr{
				pos: position{line: 766, col: 5, offset: 22139},
				run: (*parser).callonMap1,
				expr: &seqExpr{
					pos: position{line: 766, col: 5, offset: 22139},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 766, col: 5, offset: 22139},
							val:        "|{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 766, col: 10, offset: 22144},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 766, col: 13, offset: 22147},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 766, col: 19, offset: 22153},
								name: "Entries",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 766, col: 27, offset: 22161},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 766, col: 30, offset: 22164},
							val:        "}|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Entries",
			pos:  position{line: 770, col: 1, offset: 22255},
			expr: &choiceExpr{
				pos: position{line: 771, col: 5, offset: 22267},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 771, col: 5, offset: 22267},
						run: (*parser).callonEntries2,
						expr: &seqExpr{
							pos: position{line: 771, col: 5, offset: 22267},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 771, col: 5, offset: 22267},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 771, col: 11, offset: 22273},
										name: "Entry",
									},
								},
								&labeledExpr{
									pos:   position{line: 771, col: 17, offset: 22279},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 771, col: 22, offset: 22284},
										expr: &ruleRefExpr{
											pos:  position{line: 771, col: 22, offset: 22284},
											name: "EntryTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 774, col: 5, offset: 22378},
						run: (*parser).callonEntries9,
						expr: &ruleRefExpr{
							pos:  position{line: 774, col: 5, offset: 22378},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "EntryTail",
			pos:  position{line: 777, col: 1, offset: 22415},
			expr: &actionExpr{
				pos: position{line: 777, col: 13, offset: 22427},
				run: (*parser).callonEntryTail1,
				expr: &seqExpr{
					pos: position{line: 777, col: 13, offset: 22427},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 777, col: 13, offset: 22427},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 777, col: 16, offset: 22430},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 777, col: 20, offset: 22434},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 777, col: 23, offset: 22437},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 777, col: 25, offset: 22439},
								name: "Entry",
							},
						},
					},
				},
			},
		},
		{
			name: "Entry",
			pos:  position{line: 779, col: 1, offset: 22464},
			expr: &actionExpr{
				pos: position{line: 780, col: 5, offset: 22474},
				run: (*parser).callonEntry1,
				expr: &seqExpr{
					pos: position{line: 780, col: 5, offset: 22474},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 780, col: 5, offset: 22474},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 780, col: 9, offset: 22478},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 780, col: 14, offset: 22483},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 780, col: 17, offset: 22486},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 780, col: 21, offset: 22490},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 780, col: 24, offset: 22493},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 780, col: 30, offset: 22499},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLProc",
			pos:  position{line: 786, col: 1, offset: 22606},
			expr: &actionExpr{
				pos: position{line: 787, col: 5, offset: 22618},
				run: (*parser).callonSQLProc1,
				expr: &seqExpr{
					pos: position{line: 787, col: 5, offset: 22618},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 787, col: 5, offset: 22618},
							label: "selection",
							expr: &ruleRefExpr{
								pos:  position{line: 787, col: 15, offset: 22628},
								name: "SQLSelect",
							},
						},
						&labeledExpr{
							pos:   position{line: 788, col: 5, offset: 22642},
							label: "from",
							expr: &zeroOrOneExpr{
								pos: position{line: 788, col: 10, offset: 22647},
								expr: &ruleRefExpr{
									pos:  position{line: 788, col: 10, offset: 22647},
									name: "SQLFrom",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 789, col: 5, offset: 22660},
							label: "joins",
							expr: &zeroOrOneExpr{
								pos: position{line: 789, col: 11, offset: 22666},
								expr: &ruleRefExpr{
									pos:  position{line: 789, col: 11, offset: 22666},
									name: "SQLJoins",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 790, col: 5, offset: 22680},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 790, col: 11, offset: 22686},
								expr: &ruleRefExpr{
									pos:  position{line: 790, col: 11, offset: 22686},
									name: "SQLWhere",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 791, col: 5, offset: 22700},
							label: "groupby",
							expr: &zeroOrOneExpr{
								pos: position{line: 791, col: 13, offset: 22708},
								expr: &ruleRefExpr{
									pos:  position{line: 791, col: 13, offset: 22708},
									name: "SQLGroupBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 792, col: 5, offset: 22724},
							label: "having",
							expr: &zeroOrOneExpr{
								pos: position{line: 792, col: 12, offset: 22731},
								expr: &ruleRefExpr{
									pos:  position{line: 792, col: 12, offset: 22731},
									name: "SQLHaving",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 793, col: 5, offset: 22746},
							label: "orderby",
							expr: &zeroOrOneExpr{
								pos: position{line: 793, col: 13, offset: 22754},
								expr: &ruleRefExpr{
									pos:  position{line: 793, col: 13, offset: 22754},
									name: "SQLOrderBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 794, col: 5, offset: 22770},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 794, col: 11, offset: 22776},
								name: "SQLLimit",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLSelect",
			pos:  position{line: 818, col: 1, offset: 23143},
			expr: &choiceExpr{
				pos: position{line: 819, col: 5, offset: 23157},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 819, col: 5, offset: 23157},
						run: (*parser).callonSQLSelect2,
						expr: &seqExpr{
							pos: position{line: 819, col: 5, offset: 23157},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 819, col: 5, offset: 23157},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 819, col: 12, offset: 23164},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 819, col: 14, offset: 23166},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 820, col: 5, offset: 23194},
						run: (*parser).callonSQLSelect7,
						expr: &seqExpr{
							pos: position{line: 820, col: 5, offset: 23194},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 820, col: 5, offset: 23194},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 820, col: 12, offset: 23201},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 820, col: 14, offset: 23203},
									label: "assignments",
									expr: &ruleRefExpr{
										pos:  position{line: 820, col: 26, offset: 23215},
										name: "SQLAssignments",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignment",
			pos:  position{line: 822, col: 1, offset: 23259},
			expr: &choiceExpr{
				pos: position{line: 823, col: 5, offset: 23277},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 823, col: 5, offset: 23277},
						run: (*parser).callonSQLAssignment2,
						expr: &seqExpr{
							pos: position{line: 823, col: 5, offset: 23277},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 823, col: 5, offset: 23277},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 823, col: 9, offset: 23281},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 823, col: 14, offset: 23286},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 823, col: 16, offset: 23288},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 823, col: 19, offset: 23291},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 823, col: 21, offset: 23293},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 823, col: 25, offset: 23297},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 824, col: 5, offset: 23391},
						run: (*parser).callonSQLAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 824, col: 5, offset: 23391},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 824, col: 10, offset: 23396},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignments",
			pos:  position{line: 826, col: 1, offset: 23488},
			expr: &actionExpr{
				pos: position{line: 827, col: 5, offset: 23507},
				run: (*parser).callonSQLAssignments1,
				expr: &seqExpr{
					pos: position{line: 827, col: 5, offset: 23507},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 827, col: 5, offset: 23507},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 827, col: 11, offset: 23513},
								name: "SQLAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 827, col: 25, offset: 23527},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 827, col: 30, offset: 23532},
								expr: &actionExpr{
									pos: position{line: 827, col: 31, offset: 23533},
									run: (*parser).callonSQLAssignments7,
									expr: &seqExpr{
										pos: position{line: 827, col: 31, offset: 23533},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 827, col: 31, offset: 23533},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 827, col: 34, offset: 23536},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 827, col: 38, offset: 23540},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 827, col: 41, offset: 23543},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 827, col: 46, offset: 23548},
													name: "SQLAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLFrom",
			pos:  position{line: 831, col: 1, offset: 23669},
			expr: &choiceExpr{
				pos: position{line: 832, col: 5, offset: 23681},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 832, col: 5, offset: 23681},
						run: (*parser).callonSQLFrom2,
						expr: &seqExpr{
							pos: position{line: 832, col: 5, offset: 23681},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 832, col: 5, offset: 23681},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 832, col: 7, offset: 23683},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 832, col: 12, offset: 23688},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 832, col: 14, offset: 23690},
									label: "table",
									expr: &ruleRefExpr{
										pos:  position{line: 832, col: 20, offset: 23696},
										name: "SQLTable",
									},
								},
								&labeledExpr{
									pos:   position{line: 832, col: 29, offset: 23705},
									label: "alias",
									expr: &zeroOrOneExpr{
										pos: position{line: 832, col: 35, offset: 23711},
										expr: &ruleRefExpr{
											pos:  position{line: 832, col: 35, offset: 23711},
											name: "SQLAlias",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 835, col: 5, offset: 23806},
						run: (*parser).callonSQLFrom12,
						expr: &seqExpr{
							pos: position{line: 835, col: 5, offset: 23806},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 835, col: 5, offset: 23806},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 835, col: 7, offset: 23808},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 835, col: 12, offset: 23813},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 835, col: 14, offset: 23815},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAlias",
			pos:  position{line: 837, col: 1, offset: 23840},
			expr: &choiceExpr{
				pos: position{line: 838, col: 5, offset: 23853},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 838, col: 5, offset: 23853},
						run: (*parser).callonSQLAlias2,
						expr: &seqExpr{
							pos: position{line: 838, col: 5, offset: 23853},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 838, col: 5, offset: 23853},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 838, col: 7, offset: 23855},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 838, col: 10, offset: 23858},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 838, col: 12, offset: 23860},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 838, col: 15, offset: 23863},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 839, col: 5, offset: 23891},
						run: (*parser).callonSQLAlias9,
						expr: &seqExpr{
							pos: position{line: 839, col: 5, offset: 23891},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 839, col: 5, offset: 23891},
									name: "_",
								},
								&notExpr{
									pos: position{line: 839, col: 7, offset: 23893},
									expr: &seqExpr{
										pos: position{line: 839, col: 9, offset: 23895},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 839, col: 9, offset: 23895},
												name: "SQLTokenSentinels",
											},
											&ruleRefExpr{
												pos:  position{line: 839, col: 27, offset: 23913},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 839, col: 30, offset: 23916},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 839, col: 33, offset: 23919},
										name: "Lval",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLTable",
			pos:  position{line: 841, col: 1, offset: 23944},
			expr: &ruleRefExpr{
				pos:  position{line: 842, col: 5, offset: 23957},
				name: "Expr",
			},
		},
		{
			name: "SQLJoins",
			pos:  position{line: 844, col: 1, offset: 23963},
			expr: &actionExpr{
				pos: position{line: 845, col: 5, offset: 23976},
				run: (*parser).callonSQLJoins1,
				expr: &seqExpr{
					pos: position{line: 845, col: 5, offset: 23976},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 845, col: 5, offset: 23976},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 845, col: 11, offset: 23982},
								name: "SQLJoin",
							},
						},
						&labeledExpr{
							pos:   position{line: 845, col: 19, offset: 23990},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 845, col: 24, offset: 23995},
								expr: &actionExpr{
									pos: position{line: 845, col: 25, offset: 23996},
									run: (*parser).callonSQLJoins7,
									expr: &labeledExpr{
										pos:   position{line: 845, col: 25, offset: 23996},
										label: "join",
										expr: &ruleRefExpr{
											pos:  position{line: 845, col: 30, offset: 24001},
											name: "SQLJoin",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoin",
			pos:  position{line: 849, col: 1, offset: 24116},
			expr: &actionExpr{
				pos: position{line: 850, col: 5, offset: 24128},
				run: (*parser).callonSQLJoin1,
				expr: &seqExpr{
					pos: position{line: 850, col: 5, offset: 24128},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 850, col: 5, offset: 24128},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 850, col: 11, offset: 24134},
								name: "SQLJoinStyle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 850, col: 24, offset: 24147},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 850, col: 26, offset: 24149},
							name: "JOIN",
						},
						&ruleRefExpr{
							pos:  position{line: 850, col: 31, offset: 24154},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 850, col: 33, offset: 24156},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 850, col: 39, offset: 24162},
								name: "SQLTable",
							},
						},
						&labeledExpr{
							pos:   position{line: 850, col: 48, offset: 24171},
							label: "alias",
							expr: &zeroOrOneExpr{
								pos: position{line: 850, col: 54, offset: 24177},
								expr: &ruleRefExpr{
									pos:  position{line: 850, col: 54, offset: 24177},
									name: "SQLAlias",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 850, col: 64, offset: 24187},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 850, col: 66, offset: 24189},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 850, col: 69, offset: 24192},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 850, col: 71, offset: 24194},
							label: "leftKey",
							expr: &ruleRefExpr{
								pos:  position{line: 850, col: 79, offset: 24202},
								name: "JoinKey",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 850, col: 87, offset: 24210},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 850, col: 90, offset: 24213},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 850, col: 94, offset: 24217},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 850, col: 97, offset: 24220},
							label: "rightKey",
							expr: &ruleRefExpr{
								pos:  position{line: 850, col: 106, offset: 24229},
								name: "JoinKey",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoinStyle",
			pos:  position{line: 869, col: 1, offset: 24464},
			expr: &choiceExpr{
				pos: position{line: 870, col: 5, offset: 24481},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 870, col: 5, offset: 24481},
						run: (*parser).callonSQLJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 870, col: 5, offset: 24481},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 870, col: 5, offset: 24481},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 870, col: 7, offset: 24483},
									label: "style",
									expr: &choiceExpr{
										pos: position{line: 870, col: 14, offset: 24490},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 870, col: 14, offset: 24490},
												name: "ANTI",
											},
											&ruleRefExpr{
												pos:  position{line: 870, col: 21, offset: 24497},
												name: "INNER",
											},
											&ruleRefExpr{
												pos:  position{line: 870, col: 29, offset: 24505},
												name: "LEFT",
											},
											&ruleRefExpr{
												pos:  position{line: 870, col: 36, offset: 24512},
												name: "RIGHT",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 871, col: 5, offset: 24545},
						run: (*parser).callonSQLJoinStyle11,
						expr: &litMatcher{
							pos:        position{line: 871, col: 5, offset: 24545},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLWhere",
			pos:  position{line: 873, col: 1, offset: 24573},
			expr: &actionExpr{
				pos: position{line: 874, col: 5, offset: 24586},
				run: (*parser).callonSQLWhere1,
				expr: &seqExpr{
					pos: position{line: 874, col: 5, offset: 24586},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 874, col: 5, offset: 24586},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 874, col: 7, offset: 24588},
							name: "WHERE",
						},
						&ruleRefExpr{
							pos:  position{line: 874, col: 13, offset: 24594},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 874, col: 15, offset: 24596},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 874, col: 20, offset: 24601},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLGroupBy",
			pos:  position{line: 876, col: 1, offset: 24637},
			expr: &actionExpr{
				pos: position{line: 877, col: 5, offset: 24652},
				run: (*parser).callonSQLGroupBy1,
				expr: &seqExpr{
					pos: position{line: 877, col: 5, offset: 24652},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 877, col: 5, offset: 24652},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 877, col: 7, offset: 24654},
							name: "GROUP",
						},
						&ruleRefExpr{
							pos:  position{line: 877, col: 13, offset: 24660},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 877, col: 15, offset: 24662},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 877, col: 18, offset: 24665},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 877, col: 20, offset: 24667},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 877, col: 28, offset: 24675},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLHaving",
			pos:  position{line: 879, col: 1, offset: 24711},
			expr: &actionExpr{
				pos: position{line: 880, col: 5, offset: 24725},
				run: (*parser).callonSQLHaving1,
				expr: &seqExpr{
					pos: position{line: 880, col: 5, offset: 24725},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 880, col: 5, offset: 24725},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 880, col: 7, offset: 24727},
							name: "HAVING",
						},
						&ruleRefExpr{
							pos:  position{line: 880, col: 14, offset: 24734},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 880, col: 16, offset: 24736},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 880, col: 21, offset: 24741},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrderBy",
			pos:  position{line: 882, col: 1, offset: 24777},
			expr: &actionExpr{
				pos: position{line: 883, col: 5, offset: 24792},
				run: (*parser).callonSQLOrderBy1,
				expr: &seqExpr{
					pos: position{line: 883, col: 5, offset: 24792},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 883, col: 5, offset: 24792},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 883, col: 7, offset: 24794},
							name: "ORDER",
						},
						&ruleRefExpr{
							pos:  position{line: 883, col: 13, offset: 24800},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 883, col: 15, offset: 24802},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 883, col: 18, offset: 24805},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 883, col: 20, offset: 24807},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 883, col: 25, offset: 24812},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 883, col: 31, offset: 24818},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 883, col: 37, offset: 24824},
								name: "SQLOrder",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrder",
			pos:  position{line: 887, col: 1, offset: 24934},
			expr: &choiceExpr{
				pos: position{line: 888, col: 5, offset: 24947},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 888, col: 5, offset: 24947},
						run: (*parser).callonSQLOrder2,
						expr: &seqExpr{
							pos: position{line: 888, col: 5, offset: 24947},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 888, col: 5, offset: 24947},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 888, col: 7, offset: 24949},
									label: "dir",
									expr: &choiceExpr{
										pos: position{line: 888, col: 12, offset: 24954},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 888, col: 12, offset: 24954},
												name: "ASC",
											},
											&ruleRefExpr{
												pos:  position{line: 888, col: 18, offset: 24960},
												name: "DESC",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 889, col: 5, offset: 24990},
						run: (*parser).callonSQLOrder9,
						expr: &litMatcher{
							pos:        position{line: 889, col: 5, offset: 24990},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLLimit",
			pos:  position{line: 891, col: 1, offset: 25016},
			expr: &choiceExpr{
				pos: position{line: 892, col: 5, offset: 25029},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 892, col: 5, offset: 25029},
						run: (*parser).callonSQLLimit2,
						expr: &seqExpr{
							pos: position{line: 892, col: 5, offset: 25029},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 892, col: 5, offset: 25029},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 892, col: 7, offset: 25031},
									name: "LIMIT",
								},
								&ruleRefExpr{
									pos:  position{line: 892, col: 13, offset: 25037},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 892, col: 15, offset: 25039},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 892, col: 21, offset: 25045},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 893, col: 5, offset: 25076},
						run: (*parser).callonSQLLimit9,
						expr: &litMatcher{
							pos:        position{line: 893, col: 5, offset: 25076},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SELECT",
			pos:  position{line: 895, col: 1, offset: 25098},
			expr: &actionExpr{
				pos: position{line: 895, col: 10, offset: 25107},
				run: (*parser).callonSELECT1,
				expr: &litMatcher{
					pos:        position{line: 895, col: 10, offset: 25107},
					val:        "select",
					ignoreCase: true,
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 896, col: 1, offset: 25142},
			expr: &actionExpr{
				pos: position{line: 896, col: 6, offset: 25147},
				run: (*parser).callonAS1,
				expr: &litMatcher{
					pos:        position{line: 896, col: 6, offset: 25147},
					val:        "as",
					ignoreCase: true,
				},
			},
		},
		{
			name: "FROM",
			pos:  position{line: 897, col: 1, offset: 25174},
			expr: &actionExpr{
				pos: position{line: 897, col: 8, offset: 25181},
				run: (*parser).callonFROM1,
				expr: &litMatcher{
					pos:        position{line: 897, col: 8, offset: 25181},
					val:        "from",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JOIN",
			pos:  position{line: 898, col: 1, offset: 25212},
			expr: &actionExpr{
				pos: position{line: 898, col: 8, offset: 25219},
				run: (*parser).callonJOIN1,
				expr: &litMatcher{
					pos:        position{line: 898, col: 8, offset: 25219},
					val:        "join",
					ignoreCase: true,
				},
			},
		},
		{
			name: "WHERE",
			pos:  position{line: 899, col: 1, offset: 25250},
			expr: &actionExpr{
				pos: position{line: 899, col: 9, offset: 25258},
				run: (*parser).callonWHERE1,
				expr: &litMatcher{
					pos:        position{line: 899, col: 9, offset: 25258},
					val:        "where",
					ignoreCase: true,
				},
			},
		},
		{
			name: "GROUP",
			pos:  position{line: 900, col: 1, offset: 25291},
			expr: &actionExpr{
				pos: position{line: 900, col: 9, offset: 25299},
				run: (*parser).callonGROUP1,
				expr: &litMatcher{
					pos:        position{line: 900, col: 9, offset: 25299},
					val:        "group",
					ignoreCase: true,
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 901, col: 1, offset: 25332},
			expr: &ruleRefExpr{
				pos:  position{line: 901, col: 6, offset: 25337},
				name: "ByToken",
			},
		},
		{
			name: "HAVING",
			pos:  position{line: 902, col: 1, offset: 25345},
			expr: &actionExpr{
				pos: position{line: 902, col: 10, offset: 25354},
				run: (*parser).callonHAVING1,
				expr: &litMatcher{
					pos:        position{line: 902, col: 10, offset: 25354},
					val:        "having",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ORDER",
			pos:  position{line: 903, col: 1, offset: 25389},
			expr: &actionExpr{
				pos: position{line: 903, col: 9, offset: 25397},
				run: (*parser).callonORDER1,
				expr: &litMatcher{
					pos:        position{line: 903, col: 9, offset: 25397},
					val:        "order",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ON",
			pos:  position{line: 904, col: 1, offset: 25430},
			expr: &actionExpr{
				pos: position{line: 904, col: 6, offset: 25435},
				run: (*parser).callonON1,
				expr: &litMatcher{
					pos:        position{line: 904, col: 6, offset: 25435},
					val:        "on",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LIMIT",
			pos:  position{line: 905, col: 1, offset: 25462},
			expr: &actionExpr{
				pos: position{line: 905, col: 9, offset: 25470},
				run: (*parser).callonLIMIT1,
				expr: &litMatcher{
					pos:        position{line: 905, col: 9, offset: 25470},
					val:        "limit",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ASC",
			pos:  position{line: 906, col: 1, offset: 25503},
			expr: &actionExpr{
				pos: position{line: 906, col: 7, offset: 25509},
				run: (*parser).callonASC1,
				expr: &litMatcher{
					pos:        position{line: 906, col: 7, offset: 25509},
					val:        "asc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "DESC",
			pos:  position{line: 907, col: 1, offset: 25538},
			expr: &actionExpr{
				pos: position{line: 907, col: 8, offset: 25545},
				run: (*parser).callonDESC1,
				expr: &litMatcher{
					pos:        position{line: 907, col: 8, offset: 25545},
					val:        "desc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ANTI",
			pos:  position{line: 908, col: 1, offset: 25576},
			expr: &actionExpr{
				pos: position{line: 908, col: 8, offset: 25583},
				run: (*parser).callonANTI1,
				expr: &litMatcher{
					pos:        position{line: 908, col: 8, offset: 25583},
					val:        "anti",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LEFT",
			pos:  position{line: 909, col: 1, offset: 25614},
			expr: &actionExpr{
				pos: position{line: 909, col: 8, offset: 25621},
				run: (*parser).callonLEFT1,
				expr: &litMatcher{
					pos:        position{line: 909, col: 8, offset: 25621},
					val:        "left",
					ignoreCase: true,
				},
			},
		},
		{
			name: "RIGHT",
			pos:  position{line: 910, col: 1, offset: 25652},
			expr: &actionExpr{
				pos: position{line: 910, col: 9, offset: 25660},
				run: (*parser).callonRIGHT1,
				expr: &litMatcher{
					pos:        position{line: 910, col: 9, offset: 25660},
					val:        "right",
					ignoreCase: true,
				},
			},
		},
		{
			name: "INNER",
			pos:  position{line: 911, col: 1, offset: 25693},
			expr: &actionExpr{
				pos: position{line: 911, col: 9, offset: 25701},
				run: (*parser).callonINNER1,
				expr: &litMatcher{
					pos:        position{line: 911, col: 9, offset: 25701},
					val:        "inner",
					ignoreCase: true,
				},
			},
		},
		{
			name: "SQLTokenSentinels",
			pos:  position{line: 913, col: 1, offset: 25735},
			expr: &choiceExpr{
				pos: position{line: 914, col: 5, offset: 25757},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 914, col: 5, offset: 25757},
						name: "SELECT",
					},
					&ruleRefExpr{
						pos:  position{line: 914, col: 14, offset: 25766},
						name: "AS",
					},
					&ruleRefExpr{
						pos:  position{line: 914, col: 19, offset: 25771},
						name: "FROM",
					},
					&ruleRefExpr{
						pos:  position{line: 914, col: 27, offset: 25779},
						name: "JOIN",
					},
					&ruleRefExpr{
						pos:  position{line: 914, col: 34, offset: 25786},
						name: "WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 914, col: 42, offset: 25794},
						name: "GROUP",
					},
					&ruleRefExpr{
						pos:  position{line: 914, col: 50, offset: 25802},
						name: "HAVING",
					},
					&ruleRefExpr{
						pos:  position{line: 914, col: 59, offset: 25811},
						name: "ORDER",
					},
					&ruleRefExpr{
						pos:  position{line: 914, col: 67, offset: 25819},
						name: "LIMIT",
					},
					&ruleRefExpr{
						pos:  position{line: 914, col: 75, offset: 25827},
						name: "ON",
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 918, col: 1, offset: 25853},
			expr: &choiceExpr{
				pos: position{line: 919, col: 5, offset: 25865},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 919, col: 5, offset: 25865},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 920, col: 5, offset: 25881},
						name: "StringLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 921, col: 5, offset: 25899},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 922, col: 5, offset: 25917},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 923, col: 5, offset: 25936},
						name: "BytesLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 924, col: 5, offset: 25953},
						name: "Duration",
					},
					&ruleRefExpr{
						pos:  position{line: 925, col: 5, offset: 25966},
						name: "Time",
					},
					&ruleRefExpr{
						pos:  position{line: 926, col: 5, offset: 25975},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 927, col: 5, offset: 25992},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 928, col: 5, offset: 26011},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 929, col: 5, offset: 26030},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "StringLiteral",
			pos:  position{line: 931, col: 1, offset: 26043},
			expr: &actionExpr{
				pos: position{line: 932, col: 5, offset: 26061},
				run: (*parser).callonStringLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 932, col: 5, offset: 26061},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 932, col: 7, offset: 26063},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 936, col: 1, offset: 26176},
			expr: &choiceExpr{
				pos: position{line: 937, col: 5, offset: 26194},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 937, col: 5, offset: 26194},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 937, col: 5, offset: 26194},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 937, col: 5, offset: 26194},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 937, col: 7, offset: 26196},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 937, col: 14, offset: 26203},
									expr: &ruleRefExpr{
										pos:  position{line: 937, col: 15, offset: 26204},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 940, col: 5, offset: 26319},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 940, col: 5, offset: 26319},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 940, col: 7, offset: 26321},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 944, col: 1, offset: 26425},
			expr: &choiceExpr{
				pos: position{line: 945, col: 5, offset: 26444},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 945, col: 5, offset: 26444},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 945, col: 5, offset: 26444},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 945, col: 5, offset: 26444},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 945, col: 7, offset: 26446},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 945, col: 11, offset: 26450},
									expr: &ruleRefExpr{
										pos:  position{line: 945, col: 12, offset: 26451},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 948, col: 5, offset: 26565},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 948, col: 5, offset: 26565},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 948, col: 7, offset: 26567},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 952, col: 1, offset: 26666},
			expr: &actionExpr{
				pos: position{line: 953, col: 5, offset: 26683},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 953, col: 5, offset: 26683},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 953, col: 7, offset: 26685},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 957, col: 1, offset: 26798},
			expr: &actionExpr{
				pos: position{line: 958, col: 5, offset: 26817},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 958, col: 5, offset: 26817},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 958, col: 7, offset: 26819},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 962, col: 1, offset: 26928},
			expr: &choiceExpr{
				pos: position{line: 963, col: 5, offset: 26947},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 963, col: 5, offset: 26947},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 963, col: 5, offset: 26947},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 964, col: 5, offset: 27060},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 964, col: 5, offset: 27060},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 966, col: 1, offset: 27171},
			expr: &actionExpr{
				pos: position{line: 967, col: 5, offset: 27187},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 967, col: 5, offset: 27187},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "BytesLiteral",
			pos:  position{line: 969, col: 1, offset: 27293},
			expr: &actionExpr{
				pos: position{line: 970, col: 5, offset: 27310},
				run: (*parser).callonBytesLiteral1,
				expr: &seqExpr{
					pos: position{line: 970, col: 5, offset: 27310},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 970, col: 5, offset: 27310},
							val:        "0x",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 970, col: 10, offset: 27315},
							expr: &ruleRefExpr{
								pos:  position{line: 970, col: 10, offset: 27315},
								name: "HexDigit",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeLiteral",
			pos:  position{line: 974, col: 1, offset: 27430},
			expr: &actionExpr{
				pos: position{line: 975, col: 5, offset: 27446},
				run: (*parser).callonTypeLiteral1,
				expr: &seqExpr{
					pos: position{line: 975, col: 5, offset: 27446},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 975, col: 5, offset: 27446},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 975, col: 9, offset: 27450},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 975, col: 13, offset: 27454},
								name: "Type",
							},
						},
						&litMatcher{
							pos:        position{line: 975, col: 18, offset: 27459},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "CastType",
			pos:  position{line: 979, col: 1, offset: 27548},
			expr: &choiceExpr{
				pos: position{line: 980, col: 5, offset: 27561},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 980, col: 5, offset: 27561},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 981, col: 5, offset: 27577},
						name: "PrimitiveType",
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 983, col: 1, offset: 27592},
			expr: &choiceExpr{
				pos: position{line: 984, col: 5, offset: 27601},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 984, col: 5, offset: 27601},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 985, col: 5, offset: 27617},
						name: "AmbiguousType",
					},
					&ruleRefExpr{
						pos:  position{line: 986, col: 5, offset: 27635},
						name: "ComplexType",
					},
				},
			},
		},
		{
			name: "AmbiguousType",
			pos:  position{line: 988, col: 1, offset: 27648},
			expr: &choiceExpr{
				pos: position{line: 989, col: 5, offset: 27666},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 989, col: 5, offset: 27666},
						run: (*parser).callonAmbiguousType2,
						expr: &seqExpr{
							pos: position{line: 989, col: 5, offset: 27666},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 989, col: 5, offset: 27666},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 989, col: 10, offset: 27671},
										name: "PrimitiveType",
									},
								},
								&notExpr{
									pos: position{line: 989, col: 24, offset: 27685},
									expr: &ruleRefExpr{
										pos:  position{line: 989, col: 25, offset: 27686},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 990, col: 5, offset: 27726},
						run: (*parser).callonAmbiguousType8,
						expr: &seqExpr{
							pos: position{line: 990, col: 5, offset: 27726},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 990, col: 5, offset: 27726},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 990, col: 10, offset: 27731},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 990, col: 25, offset: 27746},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 990, col: 28, offset: 27749},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 990, col: 32, offset: 27753},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 990, col: 35, offset: 27756},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 990, col: 39, offset: 27760},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 990, col: 42, offset: 27763},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 990, col: 46, offset: 27767},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 990, col: 51, offset: 27772},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 990, col: 54, offset: 27775},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 993, col: 5, offset: 27876},
						run: (*parser).callonAmbiguousType21,
						expr: &labeledExpr{
							pos:   position{line: 993, col: 5, offset: 27876},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 993, col: 10, offset: 27881},
								name: "IdentifierName",
							},
						},
					},
					&actionExpr{
						pos: position{line: 996, col: 5, offset: 27983},
						run: (*parser).callonAmbiguousType24,
						expr: &seqExpr{
							pos: position{line: 996, col: 5, offset: 27983},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 996, col: 5, offset: 27983},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 996, col: 9, offset: 27987},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 996, col: 12, offset: 27990},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 996, col: 14, offset: 27992},
										name: "TypeUnion",
									},
								},
								&litMatcher{
									pos:        position{line: 996, col: 25, offset: 28003},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeUnion",
			pos:  position{line: 998, col: 1, offset: 28026},
			expr: &actionExpr{
				pos: position{line: 999, col: 5, offset: 28040},
				run: (*parser).callonTypeUnion1,
				expr: &labeledExpr{
					pos:   position{line: 999, col: 5, offset: 28040},
					label: "types",
					expr: &ruleRefExpr{
						pos:  position{line: 999, col: 11, offset: 28046},
						name: "TypeList",
					},
				},
			},
		},
		{
			name: "TypeList",
			pos:  position{line: 1003, col: 1, offset: 28142},
			expr: &actionExpr{
				pos: position{line: 1004, col: 5, offset: 28155},
				run: (*parser).callonTypeList1,
				expr: &seqExpr{
					pos: position{line: 1004, col: 5, offset: 28155},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1004, col: 5, offset: 28155},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1004, col: 11, offset: 28161},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 1004, col: 16, offset: 28166},
							label: "rest",
							expr: &oneOrMoreExpr{
								pos: position{line: 1004, col: 21, offset: 28171},
								expr: &ruleRefExpr{
									pos:  position{line: 1004, col: 21, offset: 28171},
									name: "TypeListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeListTail",
			pos:  position{line: 1008, col: 1, offset: 28265},
			expr: &actionExpr{
				pos: position{line: 1008, col: 16, offset: 28280},
				run: (*parser).callonTypeListTail1,
				expr: &seqExpr{
					pos: position{line: 1008, col: 16, offset: 28280},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1008, col: 16, offset: 28280},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1008, col: 19, offset: 28283},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1008, col: 23, offset: 28287},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1008, col: 26, offset: 28290},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1008, col: 30, offset: 28294},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexType",
			pos:  position{line: 1010, col: 1, offset: 28320},
			expr: &choiceExpr{
				pos: position{line: 1011, col: 5, offset: 28336},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1011, col: 5, offset: 28336},
						run: (*parser).callonComplexType2,
						expr: &seqExpr{
							pos: position{line: 1011, col: 5, offset: 28336},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1011, col: 5, offset: 28336},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1011, col: 9, offset: 28340},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1011, col: 12, offset: 28343},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 1011, col: 19, offset: 28350},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1011, col: 33, offset: 28364},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1011, col: 36, offset: 28367},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1014, col: 5, offset: 28462},
						run: (*parser).callonComplexType10,
						expr: &seqExpr{
							pos: position{line: 1014, col: 5, offset: 28462},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1014, col: 5, offset: 28462},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1014, col: 9, offset: 28466},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1014, col: 12, offset: 28469},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1014, col: 16, offset: 28473},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1014, col: 21, offset: 28478},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1014, col: 24, offset: 28481},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1017, col: 5, offset: 28570},
						run: (*parser).callonComplexType18,
						expr: &seqExpr{
							pos: position{line: 1017, col: 5, offset: 28570},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1017, col: 5, offset: 28570},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1017, col: 10, offset: 28575},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1017, col: 14, offset: 28579},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1017, col: 18, offset: 28583},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1017, col: 23, offset: 28588},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1017, col: 26, offset: 28591},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1020, col: 5, offset: 28679},
						run: (*parser).callonComplexType26,
						expr: &seqExpr{
							pos: position{line: 1020, col: 5, offset: 28679},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1020, col: 5, offset: 28679},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1020, col: 10, offset: 28684},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1020, col: 13, offset: 28687},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 1020, col: 21, offset: 28695},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1020, col: 26, offset: 28700},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1020, col: 29, offset: 28703},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1020, col: 33, offset: 28707},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1020, col: 36, offset: 28710},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 1020, col: 44, offset: 28718},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1020, col: 49, offset: 28723},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1020, col: 52, offset: 28726},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 1024, col: 1, offset: 28840},
			expr: &actionExpr{
				pos: position{line: 1025, col: 5, offset: 28858},
				run: (*parser).callonPrimitiveType1,
				expr: &choiceExpr{
					pos: position{line: 1025, col: 9, offset: 28862},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 1025, col: 9, offset: 28862},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1025, col: 19, offset: 28872},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1025, col: 30, offset: 28883},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1025, col: 41, offset: 28894},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1026, col: 9, offset: 28911},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1026, col: 18, offset: 28920},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1026, col: 28, offset: 28930},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1026, col: 38, offset: 28940},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1027, col: 9, offset: 28956},
							val:        "float32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1027, col: 21, offset: 28968},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1028, col: 9, offset: 28986},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1028, col: 18, offset: 28995},
							val:        "string",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1029, col: 9, offset: 29012},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1029, col: 22, offset: 29025},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1030, col: 9, offset: 29040},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1031, col: 9, offset: 29056},
							val:        "bstring",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1032, col: 9, offset: 29074},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1032, col: 16, offset: 29081},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1033, col: 9, offset: 29095},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1033, col: 18, offset: 29104},
							val:        "error",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1033, col: 28, offset: 29114},
							val:        "null",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldList",
			pos:  position{line: 1037, col: 1, offset: 29230},
			expr: &actionExpr{
				pos: position{line: 1038, col: 5, offset: 29248},
				run: (*parser).callonTypeFieldList1,
				expr: &seqExpr{
					pos: position{line: 1038, col: 5, offset: 29248},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1038, col: 5, offset: 29248},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1038, col: 11, offset: 29254},
								name: "TypeField",
							},
						},
						&labeledExpr{
							pos:   position{line: 1038, col: 21, offset: 29264},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1038, col: 26, offset: 29269},
								expr: &ruleRefExpr{
									pos:  position{line: 1038, col: 26, offset: 29269},
									name: "TypeFieldListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTail",
			pos:  position{line: 1042, col: 1, offset: 29368},
			expr: &actionExpr{
				pos: position{line: 1042, col: 21, offset: 29388},
				run: (*parser).callonTypeFieldListTail1,
				expr: &seqExpr{
					pos: position{line: 1042, col: 21, offset: 29388},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1042, col: 21, offset: 29388},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1042, col: 24, offset: 29391},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1042, col: 28, offset: 29395},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1042, col: 31, offset: 29398},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1042, col: 35, offset: 29402},
								name: "TypeField",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeField",
			pos:  position{line: 1044, col: 1, offset: 29433},
			expr: &actionExpr{
				pos: position{line: 1045, col: 5, offset: 29447},
				run: (*parser).callonTypeField1,
				expr: &seqExpr{
					pos: position{line: 1045, col: 5, offset: 29447},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1045, col: 5, offset: 29447},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1045, col: 10, offset: 29452},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1045, col: 20, offset: 29462},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1045, col: 23, offset: 29465},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1045, col: 27, offset: 29469},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1045, col: 30, offset: 29472},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1045, col: 34, offset: 29476},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 1049, col: 1, offset: 29558},
			expr: &choiceExpr{
				pos: position{line: 1050, col: 5, offset: 29572},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1050, col: 5, offset: 29572},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 1051, col: 5, offset: 29591},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "EqualityToken",
			pos:  position{line: 1053, col: 1, offset: 29605},
			expr: &choiceExpr{
				pos: position{line: 1054, col: 5, offset: 29623},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1054, col: 5, offset: 29623},
						name: "EqualityOperator",
					},
					&ruleRefExpr{
						pos:  position{line: 1054, col: 24, offset: 29642},
						name: "RelativeOperator",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 1056, col: 1, offset: 29660},
			expr: &actionExpr{
				pos: position{line: 1056, col: 12, offset: 29671},
				run: (*parser).callonAndToken1,
				expr: &seqExpr{
					pos: position{line: 1056, col: 12, offset: 29671},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1056, col: 12, offset: 29671},
							val:        "and",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1056, col: 19, offset: 29678},
							expr: &ruleRefExpr{
								pos:  position{line: 1056, col: 20, offset: 29679},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 1057, col: 1, offset: 29716},
			expr: &actionExpr{
				pos: position{line: 1057, col: 11, offset: 29726},
				run: (*parser).callonOrToken1,
				expr: &seqExpr{
					pos: position{line: 1057, col: 11, offset: 29726},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1057, col: 11, offset: 29726},
							val:        "or",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1057, col: 17, offset: 29732},
							expr: &ruleRefExpr{
								pos:  position{line: 1057, col: 18, offset: 29733},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 1058, col: 1, offset: 29769},
			expr: &actionExpr{
				pos: position{line: 1058, col: 11, offset: 29779},
				run: (*parser).callonInToken1,
				expr: &seqExpr{
					pos: position{line: 1058, col: 11, offset: 29779},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1058, col: 11, offset: 29779},
							val:        "in",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1058, col: 17, offset: 29785},
							expr: &ruleRefExpr{
								pos:  position{line: 1058, col: 18, offset: 29786},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 1059, col: 1, offset: 29822},
			expr: &actionExpr{
				pos: position{line: 1059, col: 12, offset: 29833},
				run: (*parser).callonNotToken1,
				expr: &seqExpr{
					pos: position{line: 1059, col: 12, offset: 29833},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1059, col: 12, offset: 29833},
							val:        "not",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1059, col: 19, offset: 29840},
							expr: &ruleRefExpr{
								pos:  position{line: 1059, col: 20, offset: 29841},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 1060, col: 1, offset: 29878},
			expr: &actionExpr{
				pos: position{line: 1060, col: 11, offset: 29888},
				run: (*parser).callonByToken1,
				expr: &seqExpr{
					pos: position{line: 1060, col: 11, offset: 29888},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1060, col: 11, offset: 29888},
							val:        "by",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1060, col: 17, offset: 29894},
							expr: &ruleRefExpr{
								pos:  position{line: 1060, col: 18, offset: 29895},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 1062, col: 1, offset: 29932},
			expr: &charClassMatcher{
				pos:        position{line: 1062, col: 19, offset: 29950},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 1064, col: 1, offset: 29962},
			expr: &choiceExpr{
				pos: position{line: 1064, col: 18, offset: 29979},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1064, col: 18, offset: 29979},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 1064, col: 36, offset: 29997},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 1066, col: 1, offset: 30004},
			expr: &actionExpr{
				pos: position{line: 1067, col: 5, offset: 30019},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 1067, col: 5, offset: 30019},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 1067, col: 8, offset: 30022},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 1069, col: 1, offset: 30103},
			expr: &choiceExpr{
				pos: position{line: 1070, col: 5, offset: 30122},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1070, col: 5, offset: 30122},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 1070, col: 5, offset: 30122},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1070, col: 5, offset: 30122},
									expr: &seqExpr{
										pos: position{line: 1070, col: 7, offset: 30124},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1070, col: 7, offset: 30124},
												name: "IDGuard",
											},
											&notExpr{
												pos: position{line: 1070, col: 15, offset: 30132},
												expr: &ruleRefExpr{
													pos:  position{line: 1070, col: 16, offset: 30133},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1070, col: 32, offset: 30149},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1070, col: 48, offset: 30165},
									expr: &ruleRefExpr{
										pos:  position{line: 1070, col: 48, offset: 30165},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1071, col: 5, offset: 30217},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 1071, col: 5, offset: 30217},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1072, col: 5, offset: 30256},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 1072, col: 5, offset: 30256},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1072, col: 5, offset: 30256},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1072, col: 10, offset: 30261},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1072, col: 13, offset: 30264},
										name: "IDGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1074, col: 5, offset: 30355},
						run: (*parser).callonIdentifierName19,
						expr: &litMatcher{
							pos:        position{line: 1074, col: 5, offset: 30355},
							val:        "type",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1075, col: 5, offset: 30397},
						run: (*parser).callonIdentifierName21,
						expr: &seqExpr{
							pos: position{line: 1075, col: 5, offset: 30397},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1075, col: 5, offset: 30397},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1075, col: 8, offset: 30400},
										name: "SQLTokenSentinels",
									},
								},
								&andExpr{
									pos: position{line: 1075, col: 26, offset: 30418},
									expr: &seqExpr{
										pos: position{line: 1075, col: 28, offset: 30420},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1075, col: 28, offset: 30420},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1075, col: 31, offset: 30423},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IDGuard",
			pos:  position{line: 1077, col: 1, offset: 30448},
			expr: &choiceExpr{
				pos: position{line: 1078, col: 5, offset: 30460},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1078, col: 5, offset: 30460},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1079, col: 5, offset: 30479},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "Time",
			pos:  position{line: 1081, col: 1, offset: 30492},
			expr: &actionExpr{
				pos: position{line: 1082, col: 5, offset: 30501},
				run: (*parser).callonTime1,
				expr: &seqExpr{
					pos: position{line: 1082, col: 5, offset: 30501},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1082, col: 5, offset: 30501},
							name: "FullDate",
						},
						&litMatcher{
							pos:        position{line: 1082, col: 14, offset: 30510},
							val:        "T",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1082, col: 18, offset: 30514},
							name: "FullTime",
						},
					},
				},
			},
		},
		{
			name: "FullDate",
			pos:  position{line: 1086, col: 1, offset: 30634},
			expr: &seqExpr{
				pos: position{line: 1086, col: 12, offset: 30645},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1086, col: 12, offset: 30645},
						name: "D4",
					},
					&litMatcher{
						pos:        position{line: 1086, col: 15, offset: 30648},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1086, col: 19, offset: 30652},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1086, col: 22, offset: 30655},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1086, col: 26, offset: 30659},
						name: "D2",
					},
				},
			},
		},
		{
			name: "D4",
			pos:  position{line: 1088, col: 1, offset: 30663},
			expr: &seqExpr{
				pos: position{line: 1088, col: 6, offset: 30668},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1088, col: 6, offset: 30668},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1088, col: 11, offset: 30673},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1088, col: 16, offset: 30678},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1088, col: 21, offset: 30683},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "D2",
			pos:  position{line: 1089, col: 1, offset: 30689},
			expr: &seqExpr{
				pos: position{line: 1089, col: 6, offset: 30694},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1089, col: 6, offset: 30694},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1089, col: 11, offset: 30699},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "FullTime",
			pos:  position{line: 1091, col: 1, offset: 30706},
			expr: &seqExpr{
				pos: position{line: 1091, col: 12, offset: 30717},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1091, col: 12, offset: 30717},
						name: "PartialTime",
					},
					&ruleRefExpr{
						pos:  position{line: 1091, col: 24, offset: 30729},
						name: "TimeOffset",
					},
				},
			},
		},
		{
			name: "PartialTime",
			pos:  position{line: 1093, col: 1, offset: 30741},
			expr: &seqExpr{
				pos: position{line: 1093, col: 15, offset: 30755},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1093, col: 15, offset: 30755},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1093, col: 18, offset: 30758},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1093, col: 22, offset: 30762},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1093, col: 25, offset: 30765},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1093, col: 29, offset: 30769},
						name: "D2",
					},
					&zeroOrOneExpr{
						pos: position{line: 1093, col: 32, offset: 30772},
						expr: &seqExpr{
							pos: position{line: 1093, col: 33, offset: 30773},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1093, col: 33, offset: 30773},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1093, col: 37, offset: 30777},
									expr: &charClassMatcher{
										pos:        position{line: 1093, col: 37, offset: 30777},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeOffset",
			pos:  position{line: 1095, col: 1, offset: 30787},
			expr: &choiceExpr{
				pos: position{line: 1096, col: 5, offset: 30802},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1096, col: 5, offset: 30802},
						val:        "Z",
						ignoreCase: false,
					},
					&seqExpr{
						pos: position{line: 1097, col: 5, offset: 30810},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 1097, col: 6, offset: 30811},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1097, col: 6, offset: 30811},
										val:        "+",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 1097, col: 12, offset: 30817},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1097, col: 17, offset: 30822},
								name: "D2",
							},
							&litMatcher{
								pos:        position{line: 1097, col: 20, offset: 30825},
								val:        ":",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 1097, col: 24, offset: 30829},
								name: "D2",
							},
							&zeroOrOneExpr{
								pos: position{line: 1097, col: 27, offset: 30832},
								expr: &seqExpr{
									pos: position{line: 1097, col: 28, offset: 30833},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1097, col: 28, offset: 30833},
											val:        ".",
											ignoreCase: false,
										},
										&oneOrMoreExpr{
											pos: position{line: 1097, col: 32, offset: 30837},
											expr: &charClassMatcher{
												pos:        position{line: 1097, col: 32, offset: 30837},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 1099, col: 1, offset: 30847},
			expr: &actionExpr{
				pos: position{line: 1100, col: 5, offset: 30860},
				run: (*parser).callonDuration1,
				expr: &seqExpr{
					pos: position{line: 1100, col: 5, offset: 30860},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1100, col: 5, offset: 30860},
							expr: &litMatcher{
								pos:        position{line: 1100, col: 5, offset: 30860},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1100, col: 10, offset: 30865},
							expr: &seqExpr{
								pos: position{line: 1100, col: 11, offset: 30866},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1100, col: 11, offset: 30866},
										name: "Decimal",
									},
									&ruleRefExpr{
										pos:  position{line: 1100, col: 19, offset: 30874},
										name: "TimeUnit",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Decimal",
			pos:  position{line: 1104, col: 1, offset: 31000},
			expr: &seqExpr{
				pos: position{line: 1104, col: 11, offset: 31010},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1104, col: 11, offset: 31010},
						name: "UInt",
					},
					&zeroOrOneExpr{
						pos: position{line: 1104, col: 16, offset: 31015},
						expr: &seqExpr{
							pos: position{line: 1104, col: 17, offset: 31016},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1104, col: 17, offset: 31016},
									val:        ".",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1104, col: 21, offset: 31020},
									name: "UInt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeUnit",
			pos:  position{line: 1106, col: 1, offset: 31028},
			expr: &choiceExpr{
				pos: position{line: 1107, col: 5, offset: 31041},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1107, col: 5, offset: 31041},
						val:        "ns",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1108, col: 5, offset: 31051},
						val:        "us",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1109, col: 5, offset: 31061},
						val:        "ms",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1110, col: 5, offset: 31071},
						val:        "s",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1111, col: 5, offset: 31080},
						val:        "m",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1112, col: 5, offset: 31089},
						val:        "h",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1113, col: 5, offset: 31098},
						val:        "d",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1114, col: 5, offset: 31107},
						val:        "w",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1115, col: 5, offset: 31116},
						val:        "y",
						ignoreCase: true,
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 1117, col: 1, offset: 31122},
			expr: &actionExpr{
				pos: position{line: 1118, col: 5, offset: 31129},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 1118, col: 5, offset: 31129},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1118, col: 5, offset: 31129},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1118, col: 10, offset: 31134},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1118, col: 14, offset: 31138},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1118, col: 19, offset: 31143},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1118, col: 23, offset: 31147},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1118, col: 28, offset: 31152},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1118, col: 32, offset: 31156},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 1120, col: 1, offset: 31193},
			expr: &actionExpr{
				pos: position{line: 1121, col: 5, offset: 31201},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 1121, col: 5, offset: 31201},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1121, col: 5, offset: 31201},
							expr: &seqExpr{
								pos: position{line: 1121, col: 8, offset: 31204},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1121, col: 8, offset: 31204},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 1121, col: 12, offset: 31208},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 1121, col: 16, offset: 31212},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 1121, col: 20, offset: 31216},
										expr: &choiceExpr{
											pos: position{line: 1121, col: 22, offset: 31218},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1121, col: 22, offset: 31218},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 1121, col: 33, offset: 31229},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1121, col: 39, offset: 31235},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1121, col: 41, offset: 31237},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 1125, col: 1, offset: 31401},
			expr: &choiceExpr{
				pos: position{line: 1126, col: 5, offset: 31419},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1126, col: 5, offset: 31419},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 1126, col: 5, offset: 31419},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1126, col: 5, offset: 31419},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 1126, col: 7, offset: 31421},
										expr: &ruleRefExpr{
											pos:  position{line: 1126, col: 7, offset: 31421},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1126, col: 17, offset: 31431},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1126, col: 19, offset: 31433},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1129, col: 5, offset: 31497},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 1129, col: 5, offset: 31497},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1129, col: 5, offset: 31497},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1129, col: 7, offset: 31499},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1129, col: 11, offset: 31503},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1129, col: 13, offset: 31505},
										expr: &ruleRefExpr{
											pos:  position{line: 1129, col: 13, offset: 31505},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1129, col: 23, offset: 31515},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1129, col: 28, offset: 31520},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1129, col: 30, offset: 31522},
										expr: &ruleRefExpr{
											pos:  position{line: 1129, col: 30, offset: 31522},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1129, col: 40, offset: 31532},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 1129, col: 42, offset: 31534},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1132, col: 5, offset: 31633},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 1132, col: 5, offset: 31633},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1132, col: 5, offset: 31633},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1132, col: 10, offset: 31638},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1132, col: 12, offset: 31640},
										expr: &ruleRefExpr{
											pos:  position{line: 1132, col: 12, offset: 31640},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1132, col: 22, offset: 31650},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1132, col: 24, offset: 31652},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1135, col: 5, offset: 31723},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 1135, col: 5, offset: 31723},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1135, col: 5, offset: 31723},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1135, col: 7, offset: 31725},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1135, col: 11, offset: 31729},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1135, col: 13, offset: 31731},
										expr: &ruleRefExpr{
											pos:  position{line: 1135, col: 13, offset: 31731},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1135, col: 23, offset: 31741},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1138, col: 5, offset: 31809},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 1138, col: 5, offset: 31809},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 1142, col: 1, offset: 31846},
			expr: &choiceExpr{
				pos: position{line: 1143, col: 5, offset: 31858},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1143, col: 5, offset: 31858},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 1144, col: 5, offset: 31865},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 1146, col: 1, offset: 31870},
			expr: &actionExpr{
				pos: position{line: 1146, col: 12, offset: 31881},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 1146, col: 12, offset: 31881},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1146, col: 12, offset: 31881},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1146, col: 16, offset: 31885},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1146, col: 18, offset: 31887},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 1148, col: 1, offset: 31925},
			expr: &actionExpr{
				pos: position{line: 1148, col: 12, offset: 31936},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 1148, col: 12, offset: 31936},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1148, col: 12, offset: 31936},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1148, col: 14, offset: 31938},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 1148, col: 18, offset: 31942},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 1150, col: 1, offset: 31980},
			expr: &actionExpr{
				pos: position{line: 1151, col: 5, offset: 31991},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 1151, col: 5, offset: 31991},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1151, col: 5, offset: 31991},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1151, col: 7, offset: 31993},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 1151, col: 10, offset: 31996},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1151, col: 14, offset: 32000},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1151, col: 16, offset: 32002},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 1155, col: 1, offset: 32075},
			expr: &actionExpr{
				pos: position{line: 1156, col: 5, offset: 32086},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 1156, col: 5, offset: 32086},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1156, col: 5, offset: 32086},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1156, col: 7, offset: 32088},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 1156, col: 11, offset: 32092},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1156, col: 15, offset: 32096},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1156, col: 17, offset: 32098},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 1160, col: 1, offset: 32161},
			expr: &actionExpr{
				pos: position{line: 1161, col: 4, offset: 32169},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 1161, col: 4, offset: 32169},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 1161, col: 6, offset: 32171},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 1163, col: 1, offset: 32211},
			expr: &choiceExpr{
				pos: position{line: 1164, col: 5, offset: 32225},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1164, col: 5, offset: 32225},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 1165, col: 5, offset: 32240},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 1167, col: 1, offset: 32256},
			expr: &actionExpr{
				pos: position{line: 1167, col: 14, offset: 32269},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1167, col: 14, offset: 32269},
					expr: &charClassMatcher{
						pos:        position{line: 1167, col: 14, offset: 32269},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 1169, col: 1, offset: 32308},
			expr: &actionExpr{
				pos: position{line: 1170, col: 5, offset: 32327},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 1170, col: 5, offset: 32327},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1170, col: 5, offset: 32327},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1170, col: 9, offset: 32331},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 1172, col: 1, offset: 32374},
			expr: &choiceExpr{
				pos: position{line: 1173, col: 5, offset: 32390},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1173, col: 5, offset: 32390},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 1173, col: 5, offset: 32390},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1173, col: 5, offset: 32390},
									expr: &litMatcher{
										pos:        position{line: 1173, col: 5, offset: 32390},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1173, col: 10, offset: 32395},
									expr: &charClassMatcher{
										pos:        position{line: 1173, col: 10, offset: 32395},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 1173, col: 17, offset: 32402},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1173, col: 21, offset: 32406},
									expr: &charClassMatcher{
										pos:        position{line: 1173, col: 21, offset: 32406},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1173, col: 28, offset: 32413},
									expr: &ruleRefExpr{
										pos:  position{line: 1173, col: 28, offset: 32413},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1176, col: 5, offset: 32472},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 1176, col: 5, offset: 32472},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1176, col: 5, offset: 32472},
									expr: &litMatcher{
										pos:        position{line: 1176, col: 5, offset: 32472},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1176, col: 10, offset: 32477},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1176, col: 14, offset: 32481},
									expr: &charClassMatcher{
										pos:        position{line: 1176, col: 14, offset: 32481},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1176, col: 21, offset: 32488},
									expr: &ruleRefExpr{
										pos:  position{line: 1176, col: 21, offset: 32488},
										name: "ExponentPart",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 1180, col: 1, offset: 32544},
			expr: &seqExpr{
				pos: position{line: 1180, col: 16, offset: 32559},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1180, col: 16, offset: 32559},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 1180, col: 21, offset: 32564},
						expr: &charClassMatcher{
							pos:        position{line: 1180, col: 21, offset: 32564},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1180, col: 27, offset: 32570},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 1182, col: 1, offset: 32582},
			expr: &actionExpr{
				pos: position{line: 1182, col: 7, offset: 32588},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1182, col: 7, offset: 32588},
					expr: &ruleRefExpr{
						pos:  position{line: 1182, col: 7, offset: 32588},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 1184, col: 1, offset: 32630},
			expr: &charClassMatcher{
				pos:        position{line: 1184, col: 12, offset: 32641},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1187, col: 1, offset: 32655},
			expr: &choiceExpr{
				pos: position{line: 1188, col: 5, offset: 32672},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1188, col: 5, offset: 32672},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 1188, col: 5, offset: 32672},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1188, col: 5, offset: 32672},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1188, col: 9, offset: 32676},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1188, col: 11, offset: 32678},
										expr: &ruleRefExpr{
											pos:  position{line: 1188, col: 11, offset: 32678},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1188, col: 29, offset: 32696},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1189, col: 5, offset: 32733},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 1189, col: 5, offset: 32733},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1189, col: 5, offset: 32733},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1189, col: 9, offset: 32737},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1189, col: 11, offset: 32739},
										expr: &ruleRefExpr{
											pos:  position{line: 1189, col: 11, offset: 32739},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1189, col: 29, offset: 32757},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 1191, col: 1, offset: 32791},
			expr: &choiceExpr{
				pos: position{line: 1192, col: 5, offset: 32812},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1192, col: 5, offset: 32812},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1192, col: 5, offset: 32812},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1192, col: 5, offset: 32812},
									expr: &choiceExpr{
										pos: position{line: 1192, col: 7, offset: 32814},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1192, col: 7, offset: 32814},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1192, col: 13, offset: 32820},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1192, col: 26, offset: 32833,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1193, col: 5, offset: 32870},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1193, col: 5, offset: 32870},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1193, col: 5, offset: 32870},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1193, col: 10, offset: 32875},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1193, col: 12, offset: 32877},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 1195, col: 1, offset: 32911},
			expr: &actionExpr{
				pos: position{line: 1196, col: 5, offset: 32923},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 1196, col: 5, offset: 32923},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1196, col: 5, offset: 32923},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1196, col: 10, offset: 32928},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1196, col: 23, offset: 32941},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1196, col: 28, offset: 32946},
								expr: &ruleRefExpr{
									pos:  position{line: 1196, col: 28, offset: 32946},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 1198, col: 1, offset: 33008},
			expr: &choiceExpr{
				pos: position{line: 1199, col: 5, offset: 33025},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1199, col: 5, offset: 33025},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1200, col: 5, offset: 33042},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordChars",
			pos:  position{line: 1202, col: 1, offset: 33054},
			expr: &actionExpr{
				pos: position{line: 1202, col: 16, offset: 33069},
				run: (*parser).callonKeyWordChars1,
				expr: &charClassMatcher{
					pos:        position{line: 1202, col: 16, offset: 33069},
					val:        "[a-zA-Z_.:/%#@~]",
					chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
					ranges:     []rune{'a', 'z', 'A', 'Z'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 1204, col: 1, offset: 33118},
			expr: &choiceExpr{
				pos: position{line: 1205, col: 5, offset: 33134},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1205, col: 5, offset: 33134},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 1206, col: 5, offset: 33151},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 1208, col: 1, offset: 33158},
			expr: &actionExpr{
				pos: position{line: 1208, col: 14, offset: 33171},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 1208, col: 14, offset: 33171},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1208, col: 14, offset: 33171},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1208, col: 19, offset: 33176},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1208, col: 22, offset: 33179},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1208, col: 22, offset: 33179},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1208, col: 38, offset: 33195},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Glob",
			pos:  position{line: 1210, col: 1, offset: 33231},
			expr: &actionExpr{
				pos: position{line: 1211, col: 5, offset: 33240},
				run: (*parser).callonGlob1,
				expr: &seqExpr{
					pos: position{line: 1211, col: 5, offset: 33240},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1211, col: 5, offset: 33240},
							expr: &ruleRefExpr{
								pos:  position{line: 1211, col: 6, offset: 33241},
								name: "GlobProperStart",
							},
						},
						&andExpr{
							pos: position{line: 1211, col: 22, offset: 33257},
							expr: &ruleRefExpr{
								pos:  position{line: 1211, col: 23, offset: 33258},
								name: "GlobHasStar",
							},
						},
						&labeledExpr{
							pos:   position{line: 1211, col: 35, offset: 33270},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1211, col: 40, offset: 33275},
								name: "GlobStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1211, col: 50, offset: 33285},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1211, col: 55, offset: 33290},
								expr: &ruleRefExpr{
									pos:  position{line: 1211, col: 55, offset: 33290},
									name: "GlobRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobProperStart",
			pos:  position{line: 1215, col: 1, offset: 33374},
			expr: &seqExpr{
				pos: position{line: 1215, col: 19, offset: 33392},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1215, col: 19, offset: 33392},
						expr: &litMatcher{
							pos:        position{line: 1215, col: 19, offset: 33392},
							val:        "*",
							ignoreCase: false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1215, col: 24, offset: 33397},
						name: "KeyWordStart",
					},
				},
			},
		},
		{
			name: "GlobHasStar",
			pos:  position{line: 1216, col: 1, offset: 33410},
			expr: &seqExpr{
				pos: position{line: 1216, col: 15, offset: 33424},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1216, col: 15, offset: 33424},
						expr: &ruleRefExpr{
							pos:  position{line: 1216, col: 15, offset: 33424},
							name: "KeyWordRest",
						},
					},
					&litMatcher{
						pos:        position{line: 1216, col: 28, offset: 33437},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "GlobStart",
			pos:  position{line: 1218, col: 1, offset: 33442},
			expr: &choiceExpr{
				pos: position{line: 1219, col: 5, offset: 33456},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1219, col: 5, offset: 33456},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1220, col: 5, offset: 33473},
						name: "GlobEsc",
					},
					&actionExpr{
						pos: position{line: 1221, col: 5, offset: 33485},
						run: (*parser).callonGlobStart4,
						expr: &litMatcher{
							pos:        position{line: 1221, col: 5, offset: 33485},
							val:        "*",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GlobRest",
			pos:  position{line: 1223, col: 1, offset: 33509},
			expr: &choiceExpr{
				pos: position{line: 1224, col: 5, offset: 33522},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1224, col: 5, offset: 33522},
						name: "GlobStart",
					},
					&charClassMatcher{
						pos:        position{line: 1225, col: 5, offset: 33536},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "GlobEsc",
			pos:  position{line: 1227, col: 1, offset: 33543},
			expr: &actionExpr{
				pos: position{line: 1227, col: 11, offset: 33553},
				run: (*parser).callonGlobEsc1,
				expr: &seqExpr{
					pos: position{line: 1227, col: 11, offset: 33553},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1227, col: 11, offset: 33553},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1227, col: 16, offset: 33558},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1227, col: 19, offset: 33561},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1227, col: 19, offset: 33561},
										name: "GlobEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1227, col: 32, offset: 33574},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobEscape",
			pos:  position{line: 1229, col: 1, offset: 33610},
			expr: &choiceExpr{
				pos: position{line: 1230, col: 5, offset: 33625},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1230, col: 5, offset: 33625},
						run: (*parser).callonGlobEscape2,
						expr: &litMatcher{
							pos:        position{line: 1230, col: 5, offset: 33625},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1231, col: 5, offset: 33653},
						run: (*parser).callonGlobEscape4,
						expr: &litMatcher{
							pos:        position{line: 1231, col: 5, offset: 33653},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1232, col: 5, offset: 33683},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 1235, col: 1, offset: 33690},
			expr: &choiceExpr{
				pos: position{line: 1236, col: 5, offset: 33711},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1236, col: 5, offset: 33711},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1236, col: 5, offset: 33711},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1236, col: 5, offset: 33711},
									expr: &choiceExpr{
										pos: position{line: 1236, col: 7, offset: 33713},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1236, col: 7, offset: 33713},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1236, col: 13, offset: 33719},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1236, col: 26, offset: 33732,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1237, col: 5, offset: 33769},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1237, col: 5, offset: 33769},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1237, col: 5, offset: 33769},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1237, col: 10, offset: 33774},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1237, col: 12, offset: 33776},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 1239, col: 1, offset: 33810},
			expr: &choiceExpr{
				pos: position{line: 1240, col: 5, offset: 33829},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1240, col: 5, offset: 33829},
						run: (*parser).callonEscapeSequence2,
						expr: &seqExpr{
							pos: position{line: 1240, col: 5, offset: 33829},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1240, col: 5, offset: 33829},
									val:        "x",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1240, col: 9, offset: 33833},
									name: "HexDigit",
								},
								&ruleRefExpr{
									pos:  position{line: 1240, col: 18, offset: 33842},
									name: "HexDigit",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1241, col: 5, offset: 33893},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 1242, col: 5, offset: 33914},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 1244, col: 1, offset: 33929},
			expr: &choiceExpr{
				pos: position{line: 1245, col: 5, offset: 33950},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1245, col: 5, offset: 33950},
						val:        "'",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1246, col: 5, offset: 33958},
						run: (*parser).callonSingleCharEscape3,
						expr: &litMatcher{
							pos:        position{line: 1246, col: 5, offset: 33958},
							val:        "\"",
							ignoreCase: false,
						},
					},
					&litMatcher{
						pos:        position{line: 1247, col: 5, offset: 33998},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1248, col: 5, offset: 34007},
						run: (*parser).callonSingleCharEscape6,
						expr: &litMatcher{
							pos:        position{line: 1248, col: 5, offset: 34007},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1249, col: 5, offset: 34036},
						run: (*parser).callonSingleCharEscape8,
						expr: &litMatcher{
							pos:        position{line: 1249, col: 5, offset: 34036},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1250, col: 5, offset: 34065},
						run: (*parser).callonSingleCharEscape10,
						expr: &litMatcher{
							pos:        position{line: 1250, col: 5, offset: 34065},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1251, col: 5, offset: 34094},
						run: (*parser).callonSingleCharEscape12,
						expr: &litMatcher{
							pos:        position{line: 1251, col: 5, offset: 34094},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1252, col: 5, offset: 34123},
						run: (*parser).callonSingleCharEscape14,
						expr: &litMatcher{
							pos:        position{line: 1252, col: 5, offset: 34123},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1253, col: 5, offset: 34152},
						run: (*parser).callonSingleCharEscape16,
						expr: &litMatcher{
							pos:        position{line: 1253, col: 5, offset: 34152},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 1255, col: 1, offset: 34178},
			expr: &choiceExpr{
				pos: position{line: 1256, col: 5, offset: 34196},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1256, col: 5, offset: 34196},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 1256, col: 5, offset: 34196},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1257, col: 5, offset: 34224},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 1257, col: 5, offset: 34224},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1258, col: 5, offset: 34252},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 1260, col: 1, offset: 34258},
			expr: &choiceExpr{
				pos: position{line: 1261, col: 5, offset: 34276},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1261, col: 5, offset: 34276},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 1261, col: 5, offset: 34276},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1261, col: 5, offset: 34276},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1261, col: 9, offset: 34280},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1261, col: 16, offset: 34287},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1261, col: 16, offset: 34287},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1261, col: 25, offset: 34296},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1261, col: 34, offset: 34305},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1261, col: 43, offset: 34314},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1264, col: 5, offset: 34377},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 1264, col: 5, offset: 34377},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1264, col: 5, offset: 34377},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1264, col: 9, offset: 34381},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1264, col: 13, offset: 34385},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1264, col: 20, offset: 34392},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1264, col: 20, offset: 34392},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 1264, col: 29, offset: 34401},
												expr: &ruleRefExpr{
													pos:  position{line: 1264, col: 29, offset: 34401},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1264, col: 39, offset: 34411},
												expr: &ruleRefExpr{
													pos:  position{line: 1264, col: 39, offset: 34411},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1264, col: 49, offset: 34421},
												expr: &ruleRefExpr{
													pos:  position{line: 1264, col: 49, offset: 34421},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1264, col: 59, offset: 34431},
												expr: &ruleRefExpr{
													pos:  position{line: 1264, col: 59, offset: 34431},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1264, col: 69, offset: 34441},
												expr: &ruleRefExpr{
													pos:  position{line: 1264, col: 69, offset: 34441},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1264, col: 80, offset: 34452},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 1268, col: 1, offset: 34506},
			expr: &actionExpr{
				pos: position{line: 1269, col: 5, offset: 34517},
				run: (*parser).callonRegexp1,
				expr: &seqExpr{
					pos: position{line: 1269, col: 5, offset: 34517},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1269, col: 5, offset: 34517},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1269, col: 9, offset: 34521},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1269, col: 14, offset: 34526},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 1269, col: 25, offset: 34537},
							val:        "/",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1269, col: 29, offset: 34541},
							expr: &ruleRefExpr{
								pos:  position{line: 1269, col: 30, offset: 34542},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 1271, col: 1, offset: 34577},
			expr: &actionExpr{
				pos: position{line: 1272, col: 5, offset: 34592},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1272, col: 5, offset: 34592},
					expr: &choiceExpr{
						pos: position{line: 1272, col: 6, offset: 34593},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 1272, col: 6, offset: 34593},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&seqExpr{
								pos: position{line: 1272, col: 15, offset: 34602},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1272, col: 15, offset: 34602},
										val:        "\\",
										ignoreCase: false,
									},
									&anyMatcher{
										line: 1272, col: 20, offset: 34607,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 1274, col: 1, offset: 34643},
			expr: &charClassMatcher{
				pos:        position{line: 1275, col: 5, offset: 34659},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 1277, col: 1, offset: 34674},
			expr: &oneOrMoreExpr{
				pos: position{line: 1277, col: 6, offset: 34679},
				expr: &ruleRefExpr{
					pos:  position{line: 1277, col: 6, offset: 34679},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1279, col: 1, offset: 34690},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1279, col: 6, offset: 34695},
				expr: &ruleRefExpr{
					pos:  position{line: 1279, col: 6, offset: 34695},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 1281, col: 1, offset: 34706},
			expr: &choiceExpr{
				pos: position{line: 1282, col: 5, offset: 34719},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1282, col: 5, offset: 34719},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 1283, col: 5, offset: 34734},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 1284, col: 5, offset: 34753},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 1286, col: 1, offset: 34762},
			expr: &anyMatcher{
				line: 1287, col: 5, offset: 34782,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 1289, col: 1, offset: 34785},
			expr: &choiceExpr{
				pos: position{line: 1290, col: 5, offset: 34813},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1290, col: 5, offset: 34813},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1291, col: 5, offset: 34822},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1292, col: 5, offset: 34831},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1293, col: 5, offset: 34840},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1294, col: 5, offset: 34848},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1295, col: 5, offset: 34861},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 1297, col: 1, offset: 34871},
			expr: &charClassMatcher{
				pos:        position{line: 1298, col: 5, offset: 34890},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 1304, col: 1, offset: 35220},
			expr: &ruleRefExpr{
				pos:  position{line: 1307, col: 5, offset: 35291},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1309, col: 1, offset: 35310},
			expr: &seqExpr{
				pos: position{line: 1310, col: 5, offset: 35331},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1310, col: 5, offset: 35331},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1310, col: 10, offset: 35336},
						expr: &seqExpr{
							pos: position{line: 1310, col: 11, offset: 35337},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1310, col: 11, offset: 35337},
									expr: &litMatcher{
										pos:        position{line: 1310, col: 12, offset: 35338},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1310, col: 17, offset: 35343},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1310, col: 35, offset: 35361},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1312, col: 1, offset: 35367},
			expr: &seqExpr{
				pos: position{line: 1313, col: 5, offset: 35389},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1313, col: 5, offset: 35389},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1313, col: 10, offset: 35394},
						expr: &seqExpr{
							pos: position{line: 1313, col: 11, offset: 35395},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1313, col: 11, offset: 35395},
									expr: &ruleRefExpr{
										pos:  position{line: 1313, col: 12, offset: 35396},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1313, col: 27, offset: 35411},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1315, col: 1, offset: 35430},
			expr: &seqExpr{
				pos: position{line: 1315, col: 7, offset: 35436},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1315, col: 7, offset: 35436},
						expr: &ruleRefExpr{
							pos:  position{line: 1315, col: 7, offset: 35436},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1315, col: 19, offset: 35448},
						name: "LineTerminator",
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 1317, col: 1, offset: 35464},
			expr: &choiceExpr{
				pos: position{line: 1317, col: 7, offset: 35470},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1317, col: 7, offset: 35470},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 1317, col: 11, offset: 35474},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1319, col: 1, offset: 35479},
			expr: &notExpr{
				pos: position{line: 1319, col: 7, offset: 35485},
				expr: &anyMatcher{
					line: 1319, col: 8, offset: 35486,
				},
			},
		},
	},
}

func (c *current) onstart1(ast interface{}) (interface{}, error) {
	return ast, nil
}

func (p *parser) callonstart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart1(stack["ast"])
}

func (c *current) onSequential2(consts, first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": append([]interface{}{first}, (rest.([]interface{}))...), "consts": consts}, nil

}

func (p *parser) callonSequential2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential2(stack["consts"], stack["first"], stack["rest"])
}

func (c *current) onSequential13(consts, op interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": []interface{}{op}, "consts": consts}, nil

}

func (p *parser) callonSequential13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential13(stack["consts"], stack["op"])
}

func (c *current) onSequentialTail1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonSequentialTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequentialTail1(stack["p"])
}

func (c *current) onConst1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonConst1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConst1(stack["v"])
}

func (c *current) onConstDef2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"name": id, "expr": expr}, nil

}

func (p *parser) callonConstDef2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDef2(stack["id"], stack["expr"])
}

func (c *current) onConstDef16(id, typ interface{}) (interface{}, error) {
	return map[string]interface{}{

		"name": id,

		"expr": map[string]interface{}{"kind": "TypeValue", "value": map[string]interface{}{"kind": "TypeDef", "name": id, "type": typ}}}, nil

}

func (p *parser) callonConstDef16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDef16(stack["id"], stack["typ"])
}

func (c *current) onParallel1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonParallel1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallel1(stack["s"])
}

func (c *current) onFromTrunk1(source, seq interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Trunk", "source": source, "seq": seq}, nil

}

func (p *parser) callonFromTrunk1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromTrunk1(stack["source"], stack["seq"])
}

func (c *current) onFromTrunkSeq1(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonFromTrunkSeq1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromTrunkSeq1(stack["seq"])
}

func (c *current) onOperation2(procArray interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Parallel", "procs": procArray}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["procArray"])
}

func (c *current) onOperation12(expr, cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": expr, "cases": cases}, nil

}

func (p *parser) callonOperation12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation12(stack["expr"], stack["cases"])
}

func (c *current) onOperation25(cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": nil, "cases": cases}, nil

}

func (p *parser) callonOperation25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation25(stack["cases"])
}

func (c *current) onOperation35(trunks interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": trunks}, nil

}

func (p *parser) callonOperation35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation35(stack["trunks"])
}

func (c *current) onOperation46(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonOperation46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation46(stack["f"])
}

func (c *current) onOperation52(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation52(stack["a"])
}

func (c *current) onOperation58(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation58(stack["a"])
}

func (c *current) onOperation64(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Filter", "expr": expr}, nil

}

func (p *parser) callonOperation64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation64(stack["expr"])
}

func (c *current) onSwitchLiteralClause1(expr, proc interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": expr, "proc": proc}, nil

}

func (p *parser) callonSwitchLiteralClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchLiteralClause1(stack["expr"], stack["proc"])
}

func (c *current) onSwitchSearchBooleanClause1(expr, proc interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": expr, "proc": proc}, nil

}

func (p *parser) callonSwitchSearchBooleanClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchSearchBooleanClause1(stack["expr"], stack["proc"])
}

func (c *current) onDefaultToken1() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonDefaultToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultToken1()
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor13(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor13(stack["expr"])
}

func (c *current) onSearchExpr2(search interface{}) (interface{}, error) {
	return search, nil
}

func (p *parser) callonSearchExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr2(stack["search"])
}

func (c *current) onSearchExpr5(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Search", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonSearchExpr5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr5(stack["v"])
}

func (c *current) onSearchExpr11() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil

}

func (p *parser) callonSearchExpr11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr11()
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onPatternSearch1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RegexpSearch", "pattern": pattern}, nil

}

func (p *parser) callonPatternSearch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternSearch1(stack["pattern"])
}

func (c *current) onPatternMatch1(f, pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RegexpMatch", "pattern": pattern, "expr": f}, nil

}

func (p *parser) callonPatternMatch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternMatch1(stack["f"], stack["pattern"])
}

func (c *current) onAggregation2(every, keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Summarize", "keys": keys, "aggs": nil, "duration": every, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["every"], stack["keys"], stack["limit"])
}

func (c *current) onAggregation13(every, aggs, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"kind": "Summarize", "keys": nil, "aggs": aggs, "duration": every, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation13(stack["every"], stack["aggs"], stack["keys"], stack["limit"])
}

func (c *current) onEveryDur1(dur interface{}) (interface{}, error) {
	return dur, nil
}

func (p *parser) callonEveryDur1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEveryDur1(stack["dur"])
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAggAssignment2(lval, agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lval, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment2(stack["lval"], stack["agg"])
}

func (c *current) onAggAssignment11(agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment11(stack["agg"])
}

func (c *current) onAgg1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"kind": "Agg", "name": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonAgg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAgg1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onAggAssignments1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonAggAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSortProc8(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc8(stack["l"])
}

func (c *current) onSortProc1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var proc = map[string]interface{}{"kind": "Sort", "args": list, "order": "asc", "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		proc["order"] = "desc"
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			proc["nullsfirst"] = true
		}
	}
	return proc, nil

}

func (p *parser) callonSortProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopProc6(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopProc6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc6(stack["n"])
}

func (c *current) onTopProc18(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopProc18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc18(stack["f"])
}

func (c *current) onTopProc1(limit, flush, fields interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Top", "limit": 0, "args": nil, "flush": false}
	if limit != nil {
		proc["limit"] = limit
	}
	if fields != nil {
		proc["args"] = fields
	}
	if flush != nil {
		proc["flush"] = true
	}
	return proc, nil

}

func (p *parser) callonTopProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cut", "args": args}, nil

}

func (p *parser) callonCutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutProc1(stack["args"])
}

func (c *current) onDropProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Drop", "args": args}, nil

}

func (p *parser) callonDropProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropProc1(stack["args"])
}

func (c *current) onHeadProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": count}, nil
}

func (p *parser) callonHeadProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc2(stack["count"])
}

func (c *current) onHeadProc8() (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": 1}, nil
}

func (p *parser) callonHeadProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc8()
}

func (c *current) onTailProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": count}, nil
}

func (p *parser) callonTailProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc2(stack["count"])
}

func (c *current) onTailProc8() (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": 1}, nil
}

func (p *parser) callonTailProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc8()
}

func (c *current) onFilterProc1(op interface{}) (interface{}, error) {
	return op, nil

}

func (p *parser) callonFilterProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilterProc1(stack["op"])
}

func (c *current) onFilter1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Filter", "expr": expr}, nil

}

func (p *parser) callonFilter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilter1(stack["expr"])
}

func (c *current) onUniqProc2() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": true}, nil

}

func (p *parser) callonUniqProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc2()
}

func (c *current) onUniqProc7() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": false}, nil

}

func (p *parser) callonUniqProc7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc7()
}

func (c *current) onPutProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Put", "args": args}, nil

}

func (p *parser) callonPutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutProc1(stack["args"])
}

func (c *current) onRenameProc9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameProc9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc9(stack["cl"])
}

func (c *current) onRenameProc1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Rename", "args": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc1(stack["first"], stack["rest"])
}

func (c *current) onFuseProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Fuse"}, nil

}

func (p *parser) callonFuseProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseProc1()
}

func (c *current) onShapeProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Shape"}, nil

}

func (p *parser) callonShapeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShapeProc1()
}

func (c *current) onJoinProc2(style, leftKey, rightKey, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Join", "style": style, "left_key": leftKey, "right_key": rightKey, "args": nil}
	if columns != nil {
		proc["args"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc2(stack["style"], stack["leftKey"], stack["rightKey"], stack["columns"])
}

func (c *current) onJoinProc22(style, key, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Join", "style": style, "left_key": key, "right_key": key, "args": nil}
	if columns != nil {
		proc["args"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc22(stack["style"], stack["key"], stack["columns"])
}

func (c *current) onJoinStyle2() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle2()
}

func (c *current) onJoinStyle6() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle6()
}

func (c *current) onJoinStyle10() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle10()
}

func (c *current) onJoinStyle14() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonJoinStyle14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle14()
}

func (c *current) onJoinStyle18() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle18()
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onSampleProc1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "consts": []interface{}{}, "procs": []interface{}{

		map[string]interface{}{"kind": "Summarize",

			"keys": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "shape"},

				"rhs": map[string]interface{}{"kind": "Call", "name": "typeof",

					"args": []interface{}{e},

					"where": nil}}},

			"aggs": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "sample"},

				"rhs": map[string]interface{}{"kind": "Agg",

					"name": "any",

					"expr": e,

					"where": nil}}},

			"duration": nil, "limit": 0},

		map[string]interface{}{"kind": "Cut",

			"args": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": nil,

				"rhs": map[string]interface{}{"kind": "ID", "name": "sample"}}}}}}, nil

}

func (p *parser) callonSampleProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleProc1(stack["e"])
}

func (c *current) onOpAssignment1(a interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpAssignment", "assignments": a}, nil

}

func (p *parser) callonOpAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpAssignment1(stack["a"])
}

func (c *current) onSampleExpr2(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonSampleExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr2(stack["lval"])
}

func (c *current) onSampleExpr7() (interface{}, error) {
	return map[string]interface{}{"kind": "This"}, nil
}

func (p *parser) callonSampleExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr7()
}

func (c *current) onFromProc1(source interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": []interface{}{map[string]interface{}{"kind": "Trunk", "source": source}}}, nil

}

func (p *parser) callonFromProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromProc1(stack["source"])
}

func (c *current) onFileProc1(path, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "File", "path": path, "format": format, "layout": layout}, nil

}

func (p *parser) callonFileProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileProc1(stack["path"], stack["format"], stack["layout"])
}

func (c *current) onPoolProc1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonPoolProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolProc1(stack["body"])
}

func (c *current) onPoolBody1(spec, at, over, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pool", "spec": spec, "at": at, "range": over, "scan_order": order}, nil

}

func (p *parser) callonPoolBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBody1(stack["spec"], stack["at"], stack["over"], stack["order"])
}

func (c *current) onHTTPProc1(url, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "HTTP", "url": url, "format": format, "layout": layout}, nil

}

func (p *parser) callonHTTPProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHTTPProc1(stack["url"], stack["format"], stack["layout"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onPath2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonPath2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath2(stack["v"])
}

func (c *current) onPath5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPath5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath5()
}

func (c *current) onPoolAt1(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonPoolAt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolAt1(stack["id"])
}

func (c *current) onKSUID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKSUID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKSUID1()
}

func (c *current) onPoolRange1(lower, upper interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Range", "lower": lower, "upper": upper}, nil

}

func (p *parser) callonPoolRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolRange1(stack["lower"], stack["upper"])
}

func (c *current) onPoolSpec2(pool, commit, meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": pool, "commit": commit, "meta": meta}, nil

}

func (p *parser) callonPoolSpec2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec2(stack["pool"], stack["commit"], stack["meta"])
}

func (c *current) onPoolSpec12(meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": nil, "commit": nil, "meta": meta}, nil

}

func (p *parser) callonPoolSpec12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec12(stack["meta"])
}

func (c *current) onPoolCommit1(commit interface{}) (interface{}, error) {
	return commit, nil
}

func (p *parser) callonPoolCommit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolCommit1(stack["commit"])
}

func (c *current) onPoolMeta1(meta interface{}) (interface{}, error) {
	return meta, nil
}

func (p *parser) callonPoolMeta1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolMeta1(stack["meta"])
}

func (c *current) onPoolIdentifier1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPoolIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolIdentifier1()
}

func (c *current) onLayoutArg1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Layout", "keys": keys, "order": order}, nil

}

func (p *parser) callonLayoutArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLayoutArg1(stack["keys"], stack["order"])
}

func (c *current) onFormatArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonFormatArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArg1(stack["val"])
}

func (c *current) onOrderSuffix2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix2()
}

func (c *current) onOrderSuffix4() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderSuffix4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix4()
}

func (c *current) onOrderSuffix6() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix6()
}

func (c *current) onOrderArg2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg2()
}

func (c *current) onOrderArg8() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderArg8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg8()
}

func (c *current) onPassProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Pass"}, nil

}

func (p *parser) callonPassProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassProc1()
}

func (c *current) onExplodeProc1(args, typ, as interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Explode", "args": args, "as": as, "type": typ}, nil

}

func (p *parser) callonExplodeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplodeProc1(stack["args"], stack["typ"], stack["as"])
}

func (c *current) onOverProc1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Over", "exprs": exprs}, nil

}

func (p *parser) callonOverProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverProc1(stack["exprs"])
}

func (c *current) onLetProc1(locals, seq interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Scope", "locals": locals, "seq": seq}, nil

}

func (p *parser) callonLetProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetProc1(stack["locals"], stack["seq"])
}

func (c *current) onYieldProc1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Yield", "exprs": exprs}, nil

}

func (p *parser) callonYieldProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYieldProc1(stack["exprs"])
}

func (c *current) onTypeArg1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeArg1(stack["typ"])
}

func (c *current) onAsArg1(lhs interface{}) (interface{}, error) {
	return lhs, nil
}

func (p *parser) callonAsArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsArg1(stack["lhs"])
}

func (c *current) onLvals7(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonLvals7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals7(stack["lval"])
}

func (c *current) onLvals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLvals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals1(stack["first"], stack["rest"])
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignments7(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments7(stack["a"])
}

func (c *current) onAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr2(condition, thenClause, elseClause interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Conditional", "cond": condition, "then": thenClause, "else": elseClause}, nil

}

func (p *parser) callonConditionalExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr2(stack["condition"], stack["thenClause"], stack["elseClause"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onEqualityCompareExpr9(comp, expr interface{}) (interface{}, error) {
	return []interface{}{comp, expr}, nil
}

func (p *parser) callonEqualityCompareExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr9(stack["comp"], stack["expr"])
}

func (c *current) onEqualityCompareExpr3(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonEqualityCompareExpr3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr3(stack["first"], stack["rest"])
}

func (c *current) onEqualityOperator2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonEqualityOperator2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator2()
}

func (c *current) onEqualityOperator4() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityOperator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator4()
}

func (c *current) onEqualityComparator3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityComparator3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityComparator3()
}

func (c *current) onRelativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonRelativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onRelativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonRelativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onRelativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeOperator1()
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onFuncExpr3(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr3(stack["first"], stack["rest"])
}

func (c *current) onFuncExpr10(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr10(stack["first"], stack["rest"])
}

func (c *current) onMatchExpr1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonMatchExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchExpr1(stack["expr"])
}

func (c *current) onCast1(typ, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": expr, "type": typ}, nil

}

func (p *parser) callonCast1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCast1(stack["typ"], stack["expr"])
}

func (c *current) onFunction1(fn, args, where interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": fn, "args": args, "where": where}, nil

}

func (p *parser) callonFunction1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction1(stack["fn"], stack["args"], stack["where"])
}

func (c *current) onOptionalExprs3() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonOptionalExprs3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalExprs3()
}

func (c *current) onExprs7(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonExprs7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs7(stack["e"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonDerefExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr1(stack["e"])
}

func (c *current) onDerefExprPattern2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExprPattern2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExprPattern2(stack["first"], stack["rest"])
}

func (c *current) onDerefExprPattern9(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExprPattern9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExprPattern9(stack["first"], stack["rest"])
}

func (c *current) onDerefExprPattern16(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExprPattern16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExprPattern16(stack["first"], stack["rest"])
}

func (c *current) onDerefExprPattern23() (interface{}, error) {
	return map[string]interface{}{"kind": "This"}, nil

}

func (p *parser) callonDerefExprPattern23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExprPattern23()
}

func (c *current) onThis1() (interface{}, error) {
	return map[string]interface{}{"kind": "This"}, nil
}

func (p *parser) callonThis1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThis1()
}

func (c *current) onDotID2(field interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": ".",

		"lhs": map[string]interface{}{"kind": "This"},

		"rhs": field}, nil

}

func (p *parser) callonDotID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotID2(stack["field"])
}

func (c *current) onDotID7(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": "[",

		"lhs": map[string]interface{}{"kind": "This"},

		"rhs": expr}, nil

}

func (p *parser) callonDotID7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotID7(stack["expr"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref13(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": nil, "rhs": to}}, nil

}

func (p *parser) callonDeref13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref13(stack["to"])
}

func (c *current) onDeref22(from interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": nil}}, nil

}

func (p *parser) callonDeref22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref22(stack["from"])
}

func (c *current) onDeref31(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref31(stack["expr"])
}

func (c *current) onDeref37(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref37(stack["id"])
}

func (c *current) onPrimary7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary7(stack["expr"])
}

func (c *current) onRecord1(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RecordExpr", "fields": fields}, nil

}

func (p *parser) callonRecord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecord1(stack["fields"])
}

func (c *current) onFields2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFields2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFields2(stack["first"], stack["rest"])
}

func (c *current) onFields9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonFields9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFields9()
}

func (c *current) onFieldTail1(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonFieldTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldTail1(stack["f"])
}

func (c *current) onField1(name, value interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "value": value}, nil

}

func (p *parser) callonField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField1(stack["name"], stack["value"])
}

func (c *current) onArray1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ArrayExpr", "exprs": exprs}, nil

}

func (p *parser) callonArray1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArray1(stack["exprs"])
}

func (c *current) onSet1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SetExpr", "exprs": exprs}, nil

}

func (p *parser) callonSet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSet1(stack["exprs"])
}

func (c *current) onMap1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "MapExpr", "entries": exprs}, nil

}

func (p *parser) callonMap1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMap1(stack["exprs"])
}

func (c *current) onEntries2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonEntries2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries2(stack["first"], stack["rest"])
}

func (c *current) onEntries9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonEntries9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries9()
}

func (c *current) onEntryTail1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonEntryTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntryTail1(stack["e"])
}

func (c *current) onEntry1(key, value interface{}) (interface{}, error) {
	return map[string]interface{}{"key": key, "value": value}, nil

}

func (p *parser) callonEntry1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntry1(stack["key"], stack["value"])
}

func (c *current) onSQLProc1(selection, from, joins, where, groupby, having, orderby, limit interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "SQLExpr",

		"select": selection,

		"from": from,

		"joins": joins,

		"where": where,

		"group_by": groupby,

		"having": having,

		"order_by": orderby,

		"limit": limit}, nil

}

func (p *parser) callonSQLProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLProc1(stack["selection"], stack["from"], stack["joins"], stack["where"], stack["groupby"], stack["having"], stack["orderby"], stack["limit"])
}

func (c *current) onSQLSelect2() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLSelect2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect2()
}

func (c *current) onSQLSelect7(assignments interface{}) (interface{}, error) {
	return assignments, nil
}

func (p *parser) callonSQLSelect7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect7(stack["assignments"])
}

func (c *current) onSQLAssignment2(rhs, lhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonSQLAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment2(stack["rhs"], stack["lhs"])
}

func (c *current) onSQLAssignment11(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonSQLAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment11(stack["expr"])
}

func (c *current) onSQLAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments7(stack["expr"])
}

func (c *current) onSQLAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSQLFrom2(table, alias interface{}) (interface{}, error) {
	return map[string]interface{}{"table": table, "alias": alias}, nil

}

func (p *parser) callonSQLFrom2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom2(stack["table"], stack["alias"])
}

func (c *current) onSQLFrom12() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLFrom12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom12()
}

func (c *current) onSQLAlias2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias2(stack["id"])
}

func (c *current) onSQLAlias9(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias9(stack["id"])
}

func (c *current) onSQLJoins7(join interface{}) (interface{}, error) {
	return join, nil
}

func (p *parser) callonSQLJoins7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins7(stack["join"])
}

func (c *current) onSQLJoins1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLJoins1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins1(stack["first"], stack["rest"])
}

func (c *current) onSQLJoin1(style, table, alias, leftKey, rightKey interface{}) (interface{}, error) {
	return map[string]interface{}{

		"table": table,

		"style": style,

		"left_key": leftKey,

		"right_key": rightKey,

		"alias": alias}, nil

}

func (p *parser) callonSQLJoin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoin1(stack["style"], stack["table"], stack["alias"], stack["leftKey"], stack["rightKey"])
}

func (c *current) onSQLJoinStyle2(style interface{}) (interface{}, error) {
	return style, nil
}

func (p *parser) callonSQLJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle2(stack["style"])
}

func (c *current) onSQLJoinStyle11() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonSQLJoinStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle11()
}

func (c *current) onSQLWhere1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLWhere1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLWhere1(stack["expr"])
}

func (c *current) onSQLGroupBy1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonSQLGroupBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLGroupBy1(stack["columns"])
}

func (c *current) onSQLHaving1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLHaving1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLHaving1(stack["expr"])
}

func (c *current) onSQLOrderBy1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SQLOrderBy", "keys": keys, "order": order}, nil

}

func (p *parser) callonSQLOrderBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrderBy1(stack["keys"], stack["order"])
}

func (c *current) onSQLOrder2(dir interface{}) (interface{}, error) {
	return dir, nil
}

func (p *parser) callonSQLOrder2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder2(stack["dir"])
}

func (c *current) onSQLOrder9() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonSQLOrder9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder9()
}

func (c *current) onSQLLimit2(count interface{}) (interface{}, error) {
	return count, nil
}

func (p *parser) callonSQLLimit2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit2(stack["count"])
}

func (c *current) onSQLLimit9() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonSQLLimit9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit9()
}

func (c *current) onSELECT1() (interface{}, error) {
	return "select", nil
}

func (p *parser) callonSELECT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSELECT1()
}

func (c *current) onAS1() (interface{}, error) {
	return "as", nil
}

func (p *parser) callonAS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAS1()
}

func (c *current) onFROM1() (interface{}, error) {
	return "from", nil
}

func (p *parser) callonFROM1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFROM1()
}

func (c *current) onJOIN1() (interface{}, error) {
	return "join", nil
}

func (p *parser) callonJOIN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJOIN1()
}

func (c *current) onWHERE1() (interface{}, error) {
	return "where", nil
}

func (p *parser) callonWHERE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWHERE1()
}

func (c *current) onGROUP1() (interface{}, error) {
	return "group", nil
}

func (p *parser) callonGROUP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGROUP1()
}

func (c *current) onHAVING1() (interface{}, error) {
	return "having", nil
}

func (p *parser) callonHAVING1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHAVING1()
}

func (c *current) onORDER1() (interface{}, error) {
	return "order", nil
}

func (p *parser) callonORDER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onORDER1()
}

func (c *current) onON1() (interface{}, error) {
	return "on", nil
}

func (p *parser) callonON1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onON1()
}

func (c *current) onLIMIT1() (interface{}, error) {
	return "limit", nil
}

func (p *parser) callonLIMIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIMIT1()
}

func (c *current) onASC1() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonASC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onASC1()
}

func (c *current) onDESC1() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonDESC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDESC1()
}

func (c *current) onANTI1() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonANTI1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onANTI1()
}

func (c *current) onLEFT1() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonLEFT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLEFT1()
}

func (c *current) onRIGHT1() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonRIGHT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRIGHT1()
}

func (c *current) onINNER1() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonINNER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINNER1()
}

func (c *current) onStringLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonStringLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringLiteral1(stack["v"])
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "float64", "text": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "int64", "text": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "null", "text": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onBytesLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bytes", "text": string(c.text)}, nil

}

func (p *parser) callonBytesLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBytesLiteral1()
}

func (c *current) onTypeLiteral1(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonTypeLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeLiteral1(stack["typ"])
}

func (c *current) onAmbiguousType2(name interface{}) (interface{}, error) {
	return name, nil
}

func (p *parser) callonAmbiguousType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType2(stack["name"])
}

func (c *current) onAmbiguousType8(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeDef", "name": name, "type": typ}, nil

}

func (p *parser) callonAmbiguousType8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType8(stack["name"], stack["typ"])
}

func (c *current) onAmbiguousType21(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType21(stack["name"])
}

func (c *current) onAmbiguousType24(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonAmbiguousType24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType24(stack["u"])
}

func (c *current) onTypeUnion1(types interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeUnion", "types": types}, nil

}

func (p *parser) callonTypeUnion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeUnion1(stack["types"])
}

func (c *current) onTypeList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeList1(stack["first"], stack["rest"])
}

func (c *current) onTypeListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeListTail1(stack["typ"])
}

func (c *current) onComplexType2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType2(stack["fields"])
}

func (c *current) onComplexType10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexType10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType10(stack["typ"])
}

func (c *current) onComplexType18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexType18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType18(stack["typ"])
}

func (c *current) onComplexType26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexType26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType26(stack["keyType"], stack["valType"])
}

func (c *current) onPrimitiveType1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveType1()
}

func (c *current) onTypeFieldList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList1(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTail1(stack["typ"])
}

func (c *current) onTypeField1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeField1(stack["name"], stack["typ"])
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return "in", nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onIdentifierName19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName19()
}

func (c *current) onIdentifierName21(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName21(stack["id"])
}

func (c *current) onTime1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "time", "text": string(c.text)}, nil

}

func (p *parser) callonTime1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTime1()
}

func (c *current) onDuration1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "duration", "text": string(c.text)}, nil

}

func (p *parser) callonDuration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDuration1()
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordChars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordChars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordChars1()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onGlob1(head, tail interface{}) (interface{}, error) {
	return reglob.Reglob(head.(string) + joinChars(tail)), nil

}

func (p *parser) callonGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlob1(stack["head"], stack["tail"])
}

func (c *current) onGlobStart4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonGlobStart4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobStart4()
}

func (c *current) onGlobEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonGlobEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEsc1(stack["s"])
}

func (c *current) onGlobEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonGlobEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape2()
}

func (c *current) onGlobEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonGlobEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape4()
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onEscapeSequence2() (interface{}, error) {
	return "\\" + string(c.text), nil
}

func (p *parser) callonEscapeSequence2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapeSequence2()
}

func (c *current) onSingleCharEscape3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleCharEscape3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape3()
}

func (c *current) onSingleCharEscape6() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape6()
}

func (c *current) onSingleCharEscape8() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape8()
}

func (c *current) onSingleCharEscape10() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape10()
}

func (c *current) onSingleCharEscape12() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape12()
}

func (c *current) onSingleCharEscape14() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape14()
}

func (c *current) onSingleCharEscape16() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape16()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexp1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
