// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 7, col: 1, offset: 26},
			expr: &actionExpr{
				pos: position{line: 7, col: 9, offset: 34},
				run: (*parser).callonstart1,
				expr: &seqExpr{
					pos: position{line: 7, col: 9, offset: 34},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 7, col: 9, offset: 34},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 7, col: 12, offset: 37},
							label: "ast",
							expr: &ruleRefExpr{
								pos:  position{line: 7, col: 16, offset: 41},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 27, offset: 52},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 30, offset: 55},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Sequential",
			pos:  position{line: 9, col: 1, offset: 80},
			expr: &actionExpr{
				pos: position{line: 10, col: 5, offset: 95},
				run: (*parser).callonSequential1,
				expr: &seqExpr{
					pos: position{line: 10, col: 5, offset: 95},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 10, col: 5, offset: 95},
							label: "decls",
							expr: &ruleRefExpr{
								pos:  position{line: 10, col: 11, offset: 101},
								name: "Decls",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 10, col: 17, offset: 107},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 10, col: 20, offset: 110},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 10, col: 26, offset: 116},
								name: "Operation",
							},
						},
						&labeledExpr{
							pos:   position{line: 10, col: 36, offset: 126},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 10, col: 41, offset: 131},
								expr: &ruleRefExpr{
									pos:  position{line: 10, col: 41, offset: 131},
									name: "SequentialTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SequentialTail",
			pos:  position{line: 14, col: 1, offset: 300},
			expr: &actionExpr{
				pos: position{line: 14, col: 18, offset: 317},
				run: (*parser).callonSequentialTail1,
				expr: &seqExpr{
					pos: position{line: 14, col: 18, offset: 317},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 14, col: 18, offset: 317},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 14, col: 21, offset: 320},
							name: "Pipe",
						},
						&ruleRefExpr{
							pos:  position{line: 14, col: 26, offset: 325},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 14, col: 29, offset: 328},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 14, col: 31, offset: 330},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Decls",
			pos:  position{line: 16, col: 1, offset: 359},
			expr: &choiceExpr{
				pos: position{line: 17, col: 5, offset: 369},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 17, col: 5, offset: 369},
						expr: &ruleRefExpr{
							pos:  position{line: 17, col: 5, offset: 369},
							name: "Decl",
						},
					},
					&actionExpr{
						pos: position{line: 18, col: 5, offset: 379},
						run: (*parser).callonDecls4,
						expr: &ruleRefExpr{
							pos:  position{line: 18, col: 5, offset: 379},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Decl",
			pos:  position{line: 20, col: 1, offset: 415},
			expr: &actionExpr{
				pos: position{line: 21, col: 5, offset: 424},
				run: (*parser).callonDecl1,
				expr: &seqExpr{
					pos: position{line: 21, col: 5, offset: 424},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 21, col: 5, offset: 424},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 21, col: 8, offset: 427},
							label: "v",
							expr: &choiceExpr{
								pos: position{line: 21, col: 11, offset: 430},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 21, col: 11, offset: 430},
										name: "ConstDecl",
									},
									&ruleRefExpr{
										pos:  position{line: 21, col: 23, offset: 442},
										name: "FuncDecl",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConstDecl",
			pos:  position{line: 23, col: 1, offset: 471},
			expr: &choiceExpr{
				pos: position{line: 24, col: 5, offset: 485},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 24, col: 5, offset: 485},
						run: (*parser).callonConstDecl2,
						expr: &seqExpr{
							pos: position{line: 24, col: 5, offset: 485},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 24, col: 5, offset: 485},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 24, col: 13, offset: 493},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 24, col: 15, offset: 495},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 24, col: 18, offset: 498},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 24, col: 33, offset: 513},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 24, col: 36, offset: 516},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 24, col: 40, offset: 520},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 24, col: 43, offset: 523},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 24, col: 48, offset: 528},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 27, col: 5, offset: 630},
						run: (*parser).callonConstDecl13,
						expr: &seqExpr{
							pos: position{line: 27, col: 5, offset: 630},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 27, col: 5, offset: 630},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 12, offset: 637},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 14, offset: 639},
									label: "id",
									expr: &choiceExpr{
										pos: position{line: 27, col: 18, offset: 643},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 27, col: 18, offset: 643},
												name: "IdentifierName",
											},
											&ruleRefExpr{
												pos:  position{line: 27, col: 35, offset: 660},
												name: "QuotedString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 49, offset: 674},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 27, col: 52, offset: 677},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 56, offset: 681},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 59, offset: 684},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 63, offset: 688},
										name: "Type",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuncDecl",
			pos:  position{line: 38, col: 1, offset: 946},
			expr: &actionExpr{
				pos: position{line: 39, col: 5, offset: 959},
				run: (*parser).callonFuncDecl1,
				expr: &seqExpr{
					pos: position{line: 39, col: 5, offset: 959},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 39, col: 5, offset: 959},
							val:        "func",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 39, col: 12, offset: 966},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 39, col: 14, offset: 968},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 39, col: 17, offset: 971},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 39, col: 32, offset: 986},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 39, col: 35, offset: 989},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 39, col: 39, offset: 993},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 39, col: 42, offset: 996},
							label: "params",
							expr: &ruleRefExpr{
								pos:  position{line: 39, col: 49, offset: 1003},
								name: "IdentifierNames",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 39, col: 65, offset: 1019},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 39, col: 68, offset: 1022},
							val:        ")",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 39, col: 72, offset: 1026},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 39, col: 75, offset: 1029},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 39, col: 79, offset: 1033},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 39, col: 82, offset: 1036},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 39, col: 86, offset: 1040},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 39, col: 89, offset: 1043},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 39, col: 94, offset: 1048},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 39, col: 99, offset: 1053},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 39, col: 102, offset: 1056},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Operation",
			pos:  position{line: 52, col: 1, offset: 1236},
			expr: &choiceExpr{
				pos: position{line: 53, col: 5, offset: 1250},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 53, col: 5, offset: 1250},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 53, col: 5, offset: 1250},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 53, col: 5, offset: 1250},
									val:        "fork",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 53, col: 12, offset: 1257},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 53, col: 15, offset: 1260},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 53, col: 19, offset: 1264},
									label: "ops",
									expr: &oneOrMoreExpr{
										pos: position{line: 53, col: 23, offset: 1268},
										expr: &ruleRefExpr{
											pos:  position{line: 53, col: 23, offset: 1268},
											name: "Leg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 53, col: 28, offset: 1273},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 53, col: 31, offset: 1276},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 56, col: 5, offset: 1365},
						run: (*parser).callonOperation12,
						expr: &seqExpr{
							pos: position{line: 56, col: 5, offset: 1365},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 56, col: 5, offset: 1365},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 56, col: 14, offset: 1374},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 56, col: 16, offset: 1376},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 56, col: 21, offset: 1381},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 56, col: 26, offset: 1386},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 56, col: 28, offset: 1388},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 56, col: 32, offset: 1392},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 56, col: 38, offset: 1398},
										expr: &ruleRefExpr{
											pos:  position{line: 56, col: 38, offset: 1398},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 56, col: 49, offset: 1409},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 56, col: 52, offset: 1412},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 59, col: 5, offset: 1517},
						run: (*parser).callonOperation25,
						expr: &seqExpr{
							pos: position{line: 59, col: 5, offset: 1517},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 59, col: 5, offset: 1517},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 59, col: 14, offset: 1526},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 59, col: 17, offset: 1529},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 59, col: 21, offset: 1533},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 59, col: 27, offset: 1539},
										expr: &ruleRefExpr{
											pos:  position{line: 59, col: 27, offset: 1539},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 59, col: 38, offset: 1550},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 59, col: 41, offset: 1553},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 62, col: 5, offset: 1657},
						run: (*parser).callonOperation35,
						expr: &seqExpr{
							pos: position{line: 62, col: 5, offset: 1657},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 62, col: 5, offset: 1657},
									val:        "from",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 62, col: 12, offset: 1664},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 62, col: 15, offset: 1667},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 62, col: 19, offset: 1671},
									label: "trunks",
									expr: &oneOrMoreExpr{
										pos: position{line: 62, col: 26, offset: 1678},
										expr: &ruleRefExpr{
											pos:  position{line: 62, col: 26, offset: 1678},
											name: "FromLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 62, col: 35, offset: 1687},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 62, col: 38, offset: 1690},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&labeledExpr{
						pos:   position{line: 65, col: 5, offset: 1781},
						label: "op",
						expr: &ruleRefExpr{
							pos:  position{line: 65, col: 8, offset: 1784},
							name: "Operator",
						},
					},
					&actionExpr{
						pos: position{line: 66, col: 5, offset: 1797},
						run: (*parser).callonOperation47,
						expr: &seqExpr{
							pos: position{line: 66, col: 5, offset: 1797},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 66, col: 5, offset: 1797},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 66, col: 7, offset: 1799},
										name: "OpAssignment",
									},
								},
								&andExpr{
									pos: position{line: 66, col: 20, offset: 1812},
									expr: &ruleRefExpr{
										pos:  position{line: 66, col: 21, offset: 1813},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 67, col: 5, offset: 1843},
						run: (*parser).callonOperation53,
						expr: &seqExpr{
							pos: position{line: 67, col: 5, offset: 1843},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 67, col: 5, offset: 1843},
									expr: &seqExpr{
										pos: position{line: 67, col: 7, offset: 1845},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 67, col: 7, offset: 1845},
												name: "Function",
											},
											&ruleRefExpr{
												pos:  position{line: 67, col: 16, offset: 1854},
												name: "EndOfOp",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 67, col: 25, offset: 1863},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 67, col: 27, offset: 1865},
										name: "Aggregation",
									},
								},
								&andExpr{
									pos: position{line: 67, col: 39, offset: 1877},
									expr: &ruleRefExpr{
										pos:  position{line: 67, col: 40, offset: 1878},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 68, col: 5, offset: 1909},
						run: (*parser).callonOperation63,
						expr: &seqExpr{
							pos: position{line: 68, col: 5, offset: 1909},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 68, col: 5, offset: 1909},
									val:        "search",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 68, col: 14, offset: 1918},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 68, col: 16, offset: 1920},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 68, col: 21, offset: 1925},
										name: "SearchBoolean",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 71, col: 5, offset: 2024},
						run: (*parser).callonOperation69,
						expr: &labeledExpr{
							pos:   position{line: 71, col: 5, offset: 2024},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 71, col: 10, offset: 2029},
								name: "SearchBoolean",
							},
						},
					},
					&actionExpr{
						pos: position{line: 74, col: 5, offset: 2128},
						run: (*parser).callonOperation72,
						expr: &labeledExpr{
							pos:   position{line: 74, col: 5, offset: 2128},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 74, col: 10, offset: 2133},
								name: "Cast",
							},
						},
					},
					&actionExpr{
						pos: position{line: 77, col: 5, offset: 2221},
						run: (*parser).callonOperation75,
						expr: &labeledExpr{
							pos:   position{line: 77, col: 5, offset: 2221},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 77, col: 10, offset: 2226},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "EndOfOp",
			pos:  position{line: 81, col: 1, offset: 2313},
			expr: &seqExpr{
				pos: position{line: 81, col: 11, offset: 2323},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 81, col: 11, offset: 2323},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 81, col: 15, offset: 2327},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 81, col: 15, offset: 2327},
								name: "Pipe",
							},
							&ruleRefExpr{
								pos:  position{line: 81, col: 22, offset: 2334},
								name: "SearchKeywordGuard",
							},
							&litMatcher{
								pos:        position{line: 81, col: 43, offset: 2355},
								val:        "=>",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 81, col: 50, offset: 2362},
								val:        ")",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 81, col: 56, offset: 2368},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "Pipe",
			pos:  position{line: 82, col: 1, offset: 2373},
			expr: &seqExpr{
				pos: position{line: 82, col: 8, offset: 2380},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 82, col: 8, offset: 2380},
						val:        "|",
						ignoreCase: false,
					},
					&notExpr{
						pos: position{line: 82, col: 12, offset: 2384},
						expr: &choiceExpr{
							pos: position{line: 82, col: 14, offset: 2386},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 82, col: 14, offset: 2386},
									val:        "{",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 82, col: 20, offset: 2392},
									val:        "[",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Leg",
			pos:  position{line: 84, col: 1, offset: 2398},
			expr: &actionExpr{
				pos: position{line: 85, col: 5, offset: 2406},
				run: (*parser).callonLeg1,
				expr: &seqExpr{
					pos: position{line: 85, col: 5, offset: 2406},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 85, col: 5, offset: 2406},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 85, col: 8, offset: 2409},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 85, col: 13, offset: 2414},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 85, col: 16, offset: 2417},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 85, col: 18, offset: 2419},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchLeg",
			pos:  position{line: 87, col: 1, offset: 2449},
			expr: &actionExpr{
				pos: position{line: 88, col: 5, offset: 2463},
				run: (*parser).callonSwitchLeg1,
				expr: &seqExpr{
					pos: position{line: 88, col: 5, offset: 2463},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 88, col: 5, offset: 2463},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 88, col: 8, offset: 2466},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 88, col: 13, offset: 2471},
								name: "Case",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 88, col: 18, offset: 2476},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 88, col: 21, offset: 2479},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 88, col: 26, offset: 2484},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 88, col: 29, offset: 2487},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 88, col: 32, offset: 2490},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "Case",
			pos:  position{line: 92, col: 1, offset: 2575},
			expr: &choiceExpr{
				pos: position{line: 93, col: 5, offset: 2584},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 93, col: 5, offset: 2584},
						run: (*parser).callonCase2,
						expr: &seqExpr{
							pos: position{line: 93, col: 5, offset: 2584},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 93, col: 5, offset: 2584},
									val:        "case",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 93, col: 12, offset: 2591},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 93, col: 14, offset: 2593},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 93, col: 19, offset: 2598},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 94, col: 5, offset: 2628},
						run: (*parser).callonCase8,
						expr: &litMatcher{
							pos:        position{line: 94, col: 5, offset: 2628},
							val:        "default",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromLeg",
			pos:  position{line: 96, col: 1, offset: 2659},
			expr: &actionExpr{
				pos: position{line: 97, col: 5, offset: 2671},
				run: (*parser).callonFromLeg1,
				expr: &seqExpr{
					pos: position{line: 97, col: 5, offset: 2671},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 97, col: 5, offset: 2671},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 97, col: 8, offset: 2674},
							label: "source",
							expr: &ruleRefExpr{
								pos:  position{line: 97, col: 15, offset: 2681},
								name: "FromSource",
							},
						},
						&labeledExpr{
							pos:   position{line: 97, col: 26, offset: 2692},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 97, col: 30, offset: 2696},
								expr: &seqExpr{
									pos: position{line: 97, col: 31, offset: 2697},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 97, col: 31, offset: 2697},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 97, col: 34, offset: 2700},
											val:        "=>",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 97, col: 39, offset: 2705},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 97, col: 43, offset: 2709},
											name: "Sequential",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FromSource",
			pos:  position{line: 105, col: 1, offset: 2907},
			expr: &choiceExpr{
				pos: position{line: 106, col: 5, offset: 2922},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 106, col: 5, offset: 2922},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 107, col: 5, offset: 2931},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 108, col: 5, offset: 2939},
						name: "Pool",
					},
					&ruleRefExpr{
						pos:  position{line: 109, col: 5, offset: 2948},
						name: "PassOp",
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 111, col: 1, offset: 2956},
			expr: &seqExpr{
				pos: position{line: 111, col: 13, offset: 2968},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 111, col: 13, offset: 2968},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 111, col: 17, offset: 2972},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 111, col: 18, offset: 2973},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 111, col: 18, offset: 2973},
										expr: &litMatcher{
											pos:        position{line: 111, col: 19, offset: 2974},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 111, col: 24, offset: 2979},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 111, col: 38, offset: 2993},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 111, col: 57, offset: 3012},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 111, col: 82, offset: 3037},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 111, col: 88, offset: 3043},
								val:        "(",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 111, col: 94, offset: 3049},
								val:        "[",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 111, col: 100, offset: 3055},
								val:        "~",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 113, col: 1, offset: 3061},
			expr: &actionExpr{
				pos: position{line: 113, col: 14, offset: 3074},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 113, col: 15, offset: 3075},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 113, col: 15, offset: 3075},
							val:        "==",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 113, col: 22, offset: 3082},
							val:        "!=",
							ignoreCase: false,
						},
						&seqExpr{
							pos: position{line: 113, col: 30, offset: 3090},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 113, col: 30, offset: 3090},
									val:        "in",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 113, col: 35, offset: 3095},
									expr: &ruleRefExpr{
										pos:  position{line: 113, col: 36, offset: 3096},
										name: "IdentifierRest",
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 113, col: 54, offset: 3114},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 113, col: 61, offset: 3121},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 113, col: 67, offset: 3127},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 113, col: 74, offset: 3134},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 115, col: 1, offset: 3171},
			expr: &actionExpr{
				pos: position{line: 116, col: 5, offset: 3189},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 116, col: 5, offset: 3189},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 116, col: 5, offset: 3189},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 116, col: 11, offset: 3195},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 116, col: 21, offset: 3205},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 116, col: 26, offset: 3210},
								expr: &ruleRefExpr{
									pos:  position{line: 116, col: 26, offset: 3210},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 120, col: 1, offset: 3284},
			expr: &actionExpr{
				pos: position{line: 120, col: 16, offset: 3299},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 120, col: 16, offset: 3299},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 120, col: 16, offset: 3299},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 120, col: 18, offset: 3301},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 120, col: 26, offset: 3309},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 120, col: 28, offset: 3311},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 120, col: 30, offset: 3313},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 122, col: 1, offset: 3363},
			expr: &actionExpr{
				pos: position{line: 123, col: 5, offset: 3377},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 123, col: 5, offset: 3377},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 123, col: 5, offset: 3377},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 123, col: 11, offset: 3383},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 124, col: 5, offset: 3400},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 124, col: 10, offset: 3405},
								expr: &actionExpr{
									pos: position{line: 124, col: 11, offset: 3406},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 124, col: 11, offset: 3406},
										exprs: []interface{}{
											&zeroOrOneExpr{
												pos: position{line: 124, col: 11, offset: 3406},
												expr: &seqExpr{
													pos: position{line: 124, col: 12, offset: 3407},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 124, col: 12, offset: 3407},
															name: "_",
														},
														&ruleRefExpr{
															pos:  position{line: 124, col: 14, offset: 3409},
															name: "AndToken",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 124, col: 25, offset: 3420},
												name: "_",
											},
											&notExpr{
												pos: position{line: 124, col: 27, offset: 3422},
												expr: &choiceExpr{
													pos: position{line: 124, col: 29, offset: 3424},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 124, col: 29, offset: 3424},
															name: "OrToken",
														},
														&ruleRefExpr{
															pos:  position{line: 124, col: 39, offset: 3434},
															name: "SearchKeywordGuard",
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 124, col: 59, offset: 3454},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 124, col: 64, offset: 3459},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchKeywordGuard",
			pos:  position{line: 128, col: 1, offset: 3575},
			expr: &choiceExpr{
				pos: position{line: 129, col: 5, offset: 3598},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 129, col: 5, offset: 3598},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 129, col: 5, offset: 3598},
								name: "FromSource",
							},
							&ruleRefExpr{
								pos:  position{line: 129, col: 16, offset: 3609},
								name: "__",
							},
							&litMatcher{
								pos:        position{line: 129, col: 19, offset: 3612},
								val:        "=>",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 129, col: 24, offset: 3617},
								name: "__",
							},
						},
					},
					&seqExpr{
						pos: position{line: 130, col: 5, offset: 3624},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 130, col: 5, offset: 3624},
								name: "Case",
							},
							&ruleRefExpr{
								pos:  position{line: 130, col: 10, offset: 3629},
								name: "__",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 132, col: 1, offset: 3633},
			expr: &choiceExpr{
				pos: position{line: 133, col: 5, offset: 3650},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 133, col: 5, offset: 3650},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 133, col: 5, offset: 3650},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 133, col: 6, offset: 3651},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 133, col: 6, offset: 3651},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 133, col: 6, offset: 3651},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 133, col: 15, offset: 3660},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 133, col: 19, offset: 3664},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 133, col: 19, offset: 3664},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 133, col: 23, offset: 3668},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 133, col: 27, offset: 3672},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 133, col: 29, offset: 3674},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 136, col: 5, offset: 3786},
						run: (*parser).callonSearchFactor13,
						expr: &seqExpr{
							pos: position{line: 136, col: 5, offset: 3786},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 136, col: 5, offset: 3786},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 136, col: 9, offset: 3790},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 136, col: 12, offset: 3793},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 136, col: 17, offset: 3798},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 136, col: 31, offset: 3812},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 136, col: 34, offset: 3815},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 137, col: 5, offset: 3844},
						name: "SearchExpr",
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 139, col: 1, offset: 3856},
			expr: &choiceExpr{
				pos: position{line: 140, col: 5, offset: 3871},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 140, col: 5, offset: 3871},
						name: "Glob",
					},
					&ruleRefExpr{
						pos:  position{line: 141, col: 5, offset: 3880},
						name: "Regexp",
					},
					&actionExpr{
						pos: position{line: 142, col: 5, offset: 3891},
						run: (*parser).callonSearchExpr4,
						expr: &seqExpr{
							pos: position{line: 142, col: 5, offset: 3891},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 142, col: 5, offset: 3891},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 142, col: 7, offset: 3893},
										name: "SearchValue",
									},
								},
								&choiceExpr{
									pos: position{line: 142, col: 20, offset: 3906},
									alternatives: []interface{}{
										&notExpr{
											pos: position{line: 142, col: 20, offset: 3906},
											expr: &ruleRefExpr{
												pos:  position{line: 142, col: 21, offset: 3907},
												name: "ExprGuard",
											},
										},
										&andExpr{
											pos: position{line: 142, col: 33, offset: 3919},
											expr: &seqExpr{
												pos: position{line: 142, col: 35, offset: 3921},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 142, col: 35, offset: 3921},
														name: "_",
													},
													&ruleRefExpr{
														pos:  position{line: 142, col: 37, offset: 3923},
														name: "Glob",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 145, col: 5, offset: 4035},
						run: (*parser).callonSearchExpr15,
						expr: &seqExpr{
							pos: position{line: 145, col: 5, offset: 4035},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 145, col: 5, offset: 4035},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 145, col: 9, offset: 4039},
									expr: &ruleRefExpr{
										pos:  position{line: 145, col: 10, offset: 4040},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 148, col: 5, offset: 4156},
						name: "SearchPredicate",
					},
				},
			},
		},
		{
			name: "SearchPredicate",
			pos:  position{line: 150, col: 1, offset: 4173},
			expr: &choiceExpr{
				pos: position{line: 151, col: 5, offset: 4193},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 151, col: 5, offset: 4193},
						run: (*parser).callonSearchPredicate2,
						expr: &seqExpr{
							pos: position{line: 151, col: 5, offset: 4193},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 151, col: 5, offset: 4193},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 151, col: 9, offset: 4197},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 151, col: 22, offset: 4210},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 151, col: 25, offset: 4213},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 151, col: 28, offset: 4216},
										name: "Comparator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 151, col: 39, offset: 4227},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 151, col: 42, offset: 4230},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 151, col: 46, offset: 4234},
										name: "AdditiveExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 154, col: 6, offset: 4357},
						run: (*parser).callonSearchPredicate12,
						expr: &seqExpr{
							pos: position{line: 154, col: 6, offset: 4357},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 154, col: 6, offset: 4357},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 154, col: 12, offset: 4363},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 154, col: 21, offset: 4372},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 154, col: 26, offset: 4377},
										expr: &ruleRefExpr{
											pos:  position{line: 154, col: 27, offset: 4378},
											name: "Deref",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 158, col: 1, offset: 4450},
			expr: &choiceExpr{
				pos: position{line: 159, col: 5, offset: 4466},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 159, col: 5, offset: 4466},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 160, col: 5, offset: 4478},
						run: (*parser).callonSearchValue3,
						expr: &seqExpr{
							pos: position{line: 160, col: 5, offset: 4478},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 160, col: 5, offset: 4478},
									expr: &ruleRefExpr{
										pos:  position{line: 160, col: 6, offset: 4479},
										name: "RegexpPattern",
									},
								},
								&labeledExpr{
									pos:   position{line: 160, col: 20, offset: 4493},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 160, col: 22, offset: 4495},
										name: "KeyWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Glob",
			pos:  position{line: 164, col: 1, offset: 4603},
			expr: &actionExpr{
				pos: position{line: 165, col: 5, offset: 4612},
				run: (*parser).callonGlob1,
				expr: &labeledExpr{
					pos:   position{line: 165, col: 5, offset: 4612},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 165, col: 13, offset: 4620},
						name: "GlobPattern",
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 169, col: 1, offset: 4716},
			expr: &actionExpr{
				pos: position{line: 170, col: 5, offset: 4727},
				run: (*parser).callonRegexp1,
				expr: &labeledExpr{
					pos:   position{line: 170, col: 5, offset: 4727},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 170, col: 13, offset: 4735},
						name: "RegexpPattern",
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 176, col: 1, offset: 4861},
			expr: &choiceExpr{
				pos: position{line: 177, col: 5, offset: 4877},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 177, col: 5, offset: 4877},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 177, col: 5, offset: 4877},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 177, col: 5, offset: 4877},
									expr: &ruleRefExpr{
										pos:  position{line: 177, col: 5, offset: 4877},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 177, col: 16, offset: 4888},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 177, col: 21, offset: 4893},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 177, col: 33, offset: 4905},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 177, col: 39, offset: 4911},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 180, col: 5, offset: 5037},
						run: (*parser).callonAggregation10,
						expr: &seqExpr{
							pos: position{line: 180, col: 5, offset: 5037},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 180, col: 5, offset: 5037},
									expr: &ruleRefExpr{
										pos:  position{line: 180, col: 5, offset: 5037},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 180, col: 16, offset: 5048},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 180, col: 21, offset: 5053},
										name: "AggAssignments",
									},
								},
								&labeledExpr{
									pos:   position{line: 180, col: 36, offset: 5068},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 180, col: 41, offset: 5073},
										expr: &seqExpr{
											pos: position{line: 180, col: 42, offset: 5074},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 180, col: 42, offset: 5074},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 180, col: 44, offset: 5076},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 180, col: 58, offset: 5090},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 180, col: 64, offset: 5096},
										name: "LimitArg",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Summarize",
			pos:  position{line: 188, col: 1, offset: 5310},
			expr: &seqExpr{
				pos: position{line: 188, col: 13, offset: 5322},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 188, col: 13, offset: 5322},
						val:        "summarize",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 188, col: 25, offset: 5334},
						name: "_",
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 190, col: 1, offset: 5337},
			expr: &actionExpr{
				pos: position{line: 191, col: 5, offset: 5353},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 191, col: 5, offset: 5353},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 191, col: 5, offset: 5353},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 191, col: 13, offset: 5361},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 191, col: 15, offset: 5363},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 191, col: 23, offset: 5371},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 193, col: 1, offset: 5412},
			expr: &choiceExpr{
				pos: position{line: 194, col: 5, offset: 5425},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 194, col: 5, offset: 5425},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 194, col: 5, offset: 5425},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 194, col: 5, offset: 5425},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 194, col: 7, offset: 5427},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 194, col: 14, offset: 5434},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 194, col: 16, offset: 5436},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 194, col: 25, offset: 5445},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 194, col: 27, offset: 5447},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 194, col: 33, offset: 5453},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 195, col: 5, offset: 5484},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 195, col: 5, offset: 5484},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 200, col: 1, offset: 5744},
			expr: &choiceExpr{
				pos: position{line: 201, col: 5, offset: 5763},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 201, col: 5, offset: 5763},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 202, col: 5, offset: 5778},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 202, col: 5, offset: 5778},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 202, col: 10, offset: 5783},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 204, col: 1, offset: 5875},
			expr: &actionExpr{
				pos: position{line: 205, col: 5, offset: 5895},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 205, col: 5, offset: 5895},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 205, col: 5, offset: 5895},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 205, col: 11, offset: 5901},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 205, col: 26, offset: 5916},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 205, col: 31, offset: 5921},
								expr: &actionExpr{
									pos: position{line: 205, col: 32, offset: 5922},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 205, col: 32, offset: 5922},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 205, col: 32, offset: 5922},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 205, col: 35, offset: 5925},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 205, col: 39, offset: 5929},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 205, col: 42, offset: 5932},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 205, col: 47, offset: 5937},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignment",
			pos:  position{line: 209, col: 1, offset: 6059},
			expr: &choiceExpr{
				pos: position{line: 210, col: 5, offset: 6077},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 210, col: 5, offset: 6077},
						run: (*parser).callonAggAssignment2,
						expr: &seqExpr{
							pos: position{line: 210, col: 5, offset: 6077},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 210, col: 5, offset: 6077},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 210, col: 10, offset: 6082},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 210, col: 15, offset: 6087},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 210, col: 18, offset: 6090},
									val:        ":=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 210, col: 23, offset: 6095},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 210, col: 26, offset: 6098},
									label: "agg",
									expr: &ruleRefExpr{
										pos:  position{line: 210, col: 30, offset: 6102},
										name: "Agg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 213, col: 5, offset: 6206},
						run: (*parser).callonAggAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 213, col: 5, offset: 6206},
							label: "agg",
							expr: &ruleRefExpr{
								pos:  position{line: 213, col: 9, offset: 6210},
								name: "Agg",
							},
						},
					},
				},
			},
		},
		{
			name: "Agg",
			pos:  position{line: 217, col: 1, offset: 6310},
			expr: &actionExpr{
				pos: position{line: 218, col: 5, offset: 6318},
				run: (*parser).callonAgg1,
				expr: &seqExpr{
					pos: position{line: 218, col: 5, offset: 6318},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 218, col: 5, offset: 6318},
							expr: &ruleRefExpr{
								pos:  position{line: 218, col: 6, offset: 6319},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 218, col: 16, offset: 6329},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 218, col: 19, offset: 6332},
								name: "AggName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 218, col: 27, offset: 6340},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 218, col: 30, offset: 6343},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 218, col: 34, offset: 6347},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 218, col: 37, offset: 6350},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 218, col: 42, offset: 6355},
								expr: &choiceExpr{
									pos: position{line: 218, col: 43, offset: 6356},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 218, col: 43, offset: 6356},
											name: "OverExpr",
										},
										&ruleRefExpr{
											pos:  position{line: 218, col: 54, offset: 6367},
											name: "Expr",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 218, col: 62, offset: 6375},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 218, col: 65, offset: 6378},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 218, col: 69, offset: 6382},
							expr: &seqExpr{
								pos: position{line: 218, col: 71, offset: 6384},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 218, col: 71, offset: 6384},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 218, col: 74, offset: 6387},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 218, col: 79, offset: 6392},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 218, col: 85, offset: 6398},
								expr: &ruleRefExpr{
									pos:  position{line: 218, col: 85, offset: 6398},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggName",
			pos:  position{line: 226, col: 1, offset: 6588},
			expr: &choiceExpr{
				pos: position{line: 227, col: 5, offset: 6600},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 227, col: 5, offset: 6600},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 228, col: 5, offset: 6619},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 229, col: 5, offset: 6632},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 231, col: 1, offset: 6641},
			expr: &actionExpr{
				pos: position{line: 231, col: 15, offset: 6655},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 231, col: 15, offset: 6655},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 231, col: 15, offset: 6655},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 231, col: 17, offset: 6657},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 231, col: 25, offset: 6665},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 231, col: 27, offset: 6667},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 231, col: 32, offset: 6672},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignments",
			pos:  position{line: 233, col: 1, offset: 6708},
			expr: &actionExpr{
				pos: position{line: 234, col: 5, offset: 6727},
				run: (*parser).callonAggAssignments1,
				expr: &seqExpr{
					pos: position{line: 234, col: 5, offset: 6727},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 234, col: 5, offset: 6727},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 234, col: 11, offset: 6733},
								name: "AggAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 234, col: 25, offset: 6747},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 234, col: 30, offset: 6752},
								expr: &seqExpr{
									pos: position{line: 234, col: 31, offset: 6753},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 234, col: 31, offset: 6753},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 234, col: 34, offset: 6756},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 234, col: 38, offset: 6760},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 234, col: 41, offset: 6763},
											name: "AggAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 244, col: 1, offset: 6987},
			expr: &choiceExpr{
				pos: position{line: 245, col: 5, offset: 7000},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 245, col: 5, offset: 7000},
						name: "AssertOp",
					},
					&ruleRefExpr{
						pos:  position{line: 246, col: 5, offset: 7013},
						name: "SortOp",
					},
					&ruleRefExpr{
						pos:  position{line: 247, col: 5, offset: 7024},
						name: "TopOp",
					},
					&ruleRefExpr{
						pos:  position{line: 248, col: 5, offset: 7034},
						name: "CutOp",
					},
					&ruleRefExpr{
						pos:  position{line: 249, col: 5, offset: 7044},
						name: "DropOp",
					},
					&ruleRefExpr{
						pos:  position{line: 250, col: 5, offset: 7055},
						name: "HeadOp",
					},
					&ruleRefExpr{
						pos:  position{line: 251, col: 5, offset: 7066},
						name: "TailOp",
					},
					&ruleRefExpr{
						pos:  position{line: 252, col: 5, offset: 7077},
						name: "WhereOp",
					},
					&ruleRefExpr{
						pos:  position{line: 253, col: 5, offset: 7089},
						name: "UniqOp",
					},
					&ruleRefExpr{
						pos:  position{line: 254, col: 5, offset: 7100},
						name: "PutOp",
					},
					&ruleRefExpr{
						pos:  position{line: 255, col: 5, offset: 7110},
						name: "RenameOp",
					},
					&ruleRefExpr{
						pos:  position{line: 256, col: 5, offset: 7123},
						name: "FuseOp",
					},
					&ruleRefExpr{
						pos:  position{line: 257, col: 5, offset: 7134},
						name: "ShapeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 258, col: 5, offset: 7146},
						name: "JoinOp",
					},
					&ruleRefExpr{
						pos:  position{line: 259, col: 5, offset: 7157},
						name: "SampleOp",
					},
					&ruleRefExpr{
						pos:  position{line: 260, col: 5, offset: 7170},
						name: "SQLOp",
					},
					&ruleRefExpr{
						pos:  position{line: 261, col: 5, offset: 7180},
						name: "FromOp",
					},
					&ruleRefExpr{
						pos:  position{line: 262, col: 5, offset: 7191},
						name: "PassOp",
					},
					&ruleRefExpr{
						pos:  position{line: 263, col: 5, offset: 7202},
						name: "ExplodeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 264, col: 5, offset: 7216},
						name: "MergeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 265, col: 5, offset: 7228},
						name: "OverOp",
					},
					&ruleRefExpr{
						pos:  position{line: 266, col: 5, offset: 7239},
						name: "YieldOp",
					},
				},
			},
		},
		{
			name: "AssertOp",
			pos:  position{line: 268, col: 1, offset: 7248},
			expr: &actionExpr{
				pos: position{line: 269, col: 5, offset: 7261},
				run: (*parser).callonAssertOp1,
				expr: &seqExpr{
					pos: position{line: 269, col: 5, offset: 7261},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 269, col: 5, offset: 7261},
							val:        "assert",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 269, col: 14, offset: 7270},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 269, col: 16, offset: 7272},
							label: "expr",
							expr: &actionExpr{
								pos: position{line: 269, col: 22, offset: 7278},
								run: (*parser).callonAssertOp6,
								expr: &labeledExpr{
									pos:   position{line: 269, col: 22, offset: 7278},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 269, col: 24, offset: 7280},
										name: "Expr",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortOp",
			pos:  position{line: 305, col: 1, offset: 8631},
			expr: &actionExpr{
				pos: position{line: 306, col: 5, offset: 8642},
				run: (*parser).callonSortOp1,
				expr: &seqExpr{
					pos: position{line: 306, col: 5, offset: 8642},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 306, col: 5, offset: 8642},
							val:        "sort",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 306, col: 12, offset: 8649},
							expr: &ruleRefExpr{
								pos:  position{line: 306, col: 13, offset: 8650},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 306, col: 18, offset: 8655},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 306, col: 23, offset: 8660},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 306, col: 32, offset: 8669},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 306, col: 37, offset: 8674},
								expr: &actionExpr{
									pos: position{line: 306, col: 38, offset: 8675},
									run: (*parser).callonSortOp10,
									expr: &seqExpr{
										pos: position{line: 306, col: 38, offset: 8675},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 306, col: 38, offset: 8675},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 306, col: 40, offset: 8677},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 306, col: 42, offset: 8679},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 320, col: 1, offset: 9090},
			expr: &actionExpr{
				pos: position{line: 320, col: 12, offset: 9101},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 320, col: 12, offset: 9101},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 320, col: 17, offset: 9106},
						expr: &actionExpr{
							pos: position{line: 320, col: 18, offset: 9107},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 320, col: 18, offset: 9107},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 320, col: 18, offset: 9107},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 320, col: 20, offset: 9109},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 320, col: 22, offset: 9111},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 322, col: 1, offset: 9167},
			expr: &choiceExpr{
				pos: position{line: 323, col: 5, offset: 9179},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 323, col: 5, offset: 9179},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 323, col: 5, offset: 9179},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 324, col: 5, offset: 9254},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 324, col: 5, offset: 9254},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 324, col: 5, offset: 9254},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 324, col: 14, offset: 9263},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 324, col: 16, offset: 9265},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 324, col: 23, offset: 9272},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 324, col: 24, offset: 9273},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 324, col: 24, offset: 9273},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 324, col: 34, offset: 9283},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopOp",
			pos:  position{line: 326, col: 1, offset: 9397},
			expr: &actionExpr{
				pos: position{line: 327, col: 5, offset: 9407},
				run: (*parser).callonTopOp1,
				expr: &seqExpr{
					pos: position{line: 327, col: 5, offset: 9407},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 327, col: 5, offset: 9407},
							val:        "top",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 327, col: 11, offset: 9413},
							expr: &ruleRefExpr{
								pos:  position{line: 327, col: 12, offset: 9414},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 327, col: 17, offset: 9419},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 327, col: 23, offset: 9425},
								expr: &actionExpr{
									pos: position{line: 327, col: 24, offset: 9426},
									run: (*parser).callonTopOp8,
									expr: &seqExpr{
										pos: position{line: 327, col: 24, offset: 9426},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 327, col: 24, offset: 9426},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 327, col: 26, offset: 9428},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 327, col: 28, offset: 9430},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 327, col: 52, offset: 9454},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 327, col: 58, offset: 9460},
								expr: &seqExpr{
									pos: position{line: 327, col: 59, offset: 9461},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 327, col: 59, offset: 9461},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 327, col: 61, offset: 9463},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 327, col: 72, offset: 9474},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 327, col: 79, offset: 9481},
								expr: &actionExpr{
									pos: position{line: 327, col: 80, offset: 9482},
									run: (*parser).callonTopOp20,
									expr: &seqExpr{
										pos: position{line: 327, col: 80, offset: 9482},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 327, col: 80, offset: 9482},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 327, col: 82, offset: 9484},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 327, col: 84, offset: 9486},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutOp",
			pos:  position{line: 341, col: 1, offset: 9821},
			expr: &actionExpr{
				pos: position{line: 342, col: 5, offset: 9831},
				run: (*parser).callonCutOp1,
				expr: &seqExpr{
					pos: position{line: 342, col: 5, offset: 9831},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 342, col: 5, offset: 9831},
							val:        "cut",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 342, col: 11, offset: 9837},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 342, col: 13, offset: 9839},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 342, col: 18, offset: 9844},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropOp",
			pos:  position{line: 346, col: 1, offset: 9939},
			expr: &actionExpr{
				pos: position{line: 347, col: 5, offset: 9950},
				run: (*parser).callonDropOp1,
				expr: &seqExpr{
					pos: position{line: 347, col: 5, offset: 9950},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 347, col: 5, offset: 9950},
							val:        "drop",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 347, col: 12, offset: 9957},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 347, col: 14, offset: 9959},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 347, col: 19, offset: 9964},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadOp",
			pos:  position{line: 351, col: 1, offset: 10055},
			expr: &choiceExpr{
				pos: position{line: 352, col: 5, offset: 10066},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 352, col: 5, offset: 10066},
						run: (*parser).callonHeadOp2,
						expr: &seqExpr{
							pos: position{line: 352, col: 5, offset: 10066},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 352, col: 5, offset: 10066},
									val:        "head",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 352, col: 12, offset: 10073},
									name: "_",
								},
								&notExpr{
									pos: position{line: 352, col: 14, offset: 10075},
									expr: &ruleRefExpr{
										pos:  position{line: 352, col: 15, offset: 10076},
										name: "EndOfOp",
									},
								},
								&labeledExpr{
									pos:   position{line: 352, col: 23, offset: 10084},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 352, col: 29, offset: 10090},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 353, col: 5, offset: 10170},
						run: (*parser).callonHeadOp10,
						expr: &litMatcher{
							pos:        position{line: 353, col: 5, offset: 10170},
							val:        "head",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TailOp",
			pos:  position{line: 355, col: 1, offset: 10317},
			expr: &choiceExpr{
				pos: position{line: 356, col: 5, offset: 10328},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 356, col: 5, offset: 10328},
						run: (*parser).callonTailOp2,
						expr: &seqExpr{
							pos: position{line: 356, col: 5, offset: 10328},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 356, col: 5, offset: 10328},
									val:        "tail",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 356, col: 12, offset: 10335},
									name: "_",
								},
								&notExpr{
									pos: position{line: 356, col: 14, offset: 10337},
									expr: &ruleRefExpr{
										pos:  position{line: 356, col: 15, offset: 10338},
										name: "EndOfOp",
									},
								},
								&labeledExpr{
									pos:   position{line: 356, col: 23, offset: 10346},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 356, col: 29, offset: 10352},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 357, col: 5, offset: 10432},
						run: (*parser).callonTailOp10,
						expr: &litMatcher{
							pos:        position{line: 357, col: 5, offset: 10432},
							val:        "tail",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "WhereOp",
			pos:  position{line: 359, col: 1, offset: 10579},
			expr: &actionExpr{
				pos: position{line: 360, col: 5, offset: 10591},
				run: (*parser).callonWhereOp1,
				expr: &seqExpr{
					pos: position{line: 360, col: 5, offset: 10591},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 360, col: 5, offset: 10591},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 360, col: 13, offset: 10599},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 360, col: 15, offset: 10601},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 360, col: 20, offset: 10606},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "UniqOp",
			pos:  position{line: 364, col: 1, offset: 10692},
			expr: &choiceExpr{
				pos: position{line: 365, col: 5, offset: 10703},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 365, col: 5, offset: 10703},
						run: (*parser).callonUniqOp2,
						expr: &seqExpr{
							pos: position{line: 365, col: 5, offset: 10703},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 365, col: 5, offset: 10703},
									val:        "uniq",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 365, col: 12, offset: 10710},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 365, col: 14, offset: 10712},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 368, col: 5, offset: 10801},
						run: (*parser).callonUniqOp7,
						expr: &litMatcher{
							pos:        position{line: 368, col: 5, offset: 10801},
							val:        "uniq",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PutOp",
			pos:  position{line: 372, col: 1, offset: 10890},
			expr: &actionExpr{
				pos: position{line: 373, col: 5, offset: 10900},
				run: (*parser).callonPutOp1,
				expr: &seqExpr{
					pos: position{line: 373, col: 5, offset: 10900},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 373, col: 5, offset: 10900},
							val:        "put",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 373, col: 11, offset: 10906},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 373, col: 13, offset: 10908},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 373, col: 18, offset: 10913},
								name: "Assignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameOp",
			pos:  position{line: 377, col: 1, offset: 11004},
			expr: &actionExpr{
				pos: position{line: 378, col: 5, offset: 11017},
				run: (*parser).callonRenameOp1,
				expr: &seqExpr{
					pos: position{line: 378, col: 5, offset: 11017},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 378, col: 5, offset: 11017},
							val:        "rename",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 378, col: 14, offset: 11026},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 378, col: 16, offset: 11028},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 378, col: 22, offset: 11034},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 378, col: 33, offset: 11045},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 378, col: 38, offset: 11050},
								expr: &actionExpr{
									pos: position{line: 378, col: 39, offset: 11051},
									run: (*parser).callonRenameOp9,
									expr: &seqExpr{
										pos: position{line: 378, col: 39, offset: 11051},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 378, col: 39, offset: 11051},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 378, col: 42, offset: 11054},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 378, col: 46, offset: 11058},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 378, col: 49, offset: 11061},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 378, col: 52, offset: 11064},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseOp",
			pos:  position{line: 386, col: 1, offset: 11471},
			expr: &actionExpr{
				pos: position{line: 387, col: 5, offset: 11482},
				run: (*parser).callonFuseOp1,
				expr: &seqExpr{
					pos: position{line: 387, col: 5, offset: 11482},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 387, col: 5, offset: 11482},
							val:        "fuse",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 387, col: 12, offset: 11489},
							expr: &seqExpr{
								pos: position{line: 387, col: 14, offset: 11491},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 387, col: 14, offset: 11491},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 387, col: 17, offset: 11494},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 387, col: 22, offset: 11499},
							expr: &ruleRefExpr{
								pos:  position{line: 387, col: 23, offset: 11500},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "ShapeOp",
			pos:  position{line: 391, col: 1, offset: 11571},
			expr: &actionExpr{
				pos: position{line: 392, col: 5, offset: 11583},
				run: (*parser).callonShapeOp1,
				expr: &seqExpr{
					pos: position{line: 392, col: 5, offset: 11583},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 392, col: 5, offset: 11583},
							val:        "shape",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 392, col: 13, offset: 11591},
							expr: &seqExpr{
								pos: position{line: 392, col: 15, offset: 11593},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 392, col: 15, offset: 11593},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 392, col: 18, offset: 11596},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 392, col: 23, offset: 11601},
							expr: &ruleRefExpr{
								pos:  position{line: 392, col: 24, offset: 11602},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "JoinOp",
			pos:  position{line: 396, col: 1, offset: 11674},
			expr: &actionExpr{
				pos: position{line: 397, col: 5, offset: 11685},
				run: (*parser).callonJoinOp1,
				expr: &seqExpr{
					pos: position{line: 397, col: 5, offset: 11685},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 397, col: 5, offset: 11685},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 397, col: 11, offset: 11691},
								name: "JoinStyle",
							},
						},
						&litMatcher{
							pos:        position{line: 397, col: 21, offset: 11701},
							val:        "join",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 397, col: 28, offset: 11708},
							label: "rightInput",
							expr: &ruleRefExpr{
								pos:  position{line: 397, col: 39, offset: 11719},
								name: "JoinRightInput",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 397, col: 54, offset: 11734},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 397, col: 57, offset: 11737},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 397, col: 59, offset: 11739},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 397, col: 63, offset: 11743},
								name: "JoinKey",
							},
						},
						&labeledExpr{
							pos:   position{line: 397, col: 71, offset: 11751},
							label: "optKey",
							expr: &zeroOrOneExpr{
								pos: position{line: 397, col: 78, offset: 11758},
								expr: &seqExpr{
									pos: position{line: 397, col: 79, offset: 11759},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 397, col: 79, offset: 11759},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 397, col: 82, offset: 11762},
											val:        "=",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 397, col: 86, offset: 11766},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 397, col: 89, offset: 11769},
											name: "JoinKey",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 397, col: 99, offset: 11779},
							label: "optArgs",
							expr: &zeroOrOneExpr{
								pos: position{line: 397, col: 107, offset: 11787},
								expr: &seqExpr{
									pos: position{line: 397, col: 108, offset: 11788},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 397, col: 108, offset: 11788},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 397, col: 110, offset: 11790},
											name: "FlexAssignments",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinStyle",
			pos:  position{line: 408, col: 1, offset: 12146},
			expr: &choiceExpr{
				pos: position{line: 409, col: 5, offset: 12160},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 409, col: 5, offset: 12160},
						run: (*parser).callonJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 409, col: 5, offset: 12160},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 409, col: 5, offset: 12160},
									val:        "anti",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 409, col: 12, offset: 12167},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 410, col: 5, offset: 12197},
						run: (*parser).callonJoinStyle6,
						expr: &seqExpr{
							pos: position{line: 410, col: 5, offset: 12197},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 410, col: 5, offset: 12197},
									val:        "inner",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 410, col: 13, offset: 12205},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 411, col: 5, offset: 12235},
						run: (*parser).callonJoinStyle10,
						expr: &seqExpr{
							pos: position{line: 411, col: 5, offset: 12235},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 411, col: 5, offset: 12235},
									val:        "left",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 411, col: 13, offset: 12243},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 412, col: 5, offset: 12272},
						run: (*parser).callonJoinStyle14,
						expr: &seqExpr{
							pos: position{line: 412, col: 5, offset: 12272},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 412, col: 5, offset: 12272},
									val:        "right",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 412, col: 13, offset: 12280},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 413, col: 5, offset: 12310},
						run: (*parser).callonJoinStyle18,
						expr: &litMatcher{
							pos:        position{line: 413, col: 5, offset: 12310},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "JoinRightInput",
			pos:  position{line: 415, col: 1, offset: 12346},
			expr: &choiceExpr{
				pos: position{line: 416, col: 5, offset: 12365},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 416, col: 5, offset: 12365},
						run: (*parser).callonJoinRightInput2,
						expr: &seqExpr{
							pos: position{line: 416, col: 5, offset: 12365},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 416, col: 5, offset: 12365},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 416, col: 8, offset: 12368},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 416, col: 12, offset: 12372},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 416, col: 15, offset: 12375},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 416, col: 17, offset: 12377},
										name: "Sequential",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 416, col: 28, offset: 12388},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 416, col: 31, offset: 12391},
									val:        ")",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 416, col: 35, offset: 12395},
									name: "__",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 417, col: 5, offset: 12420},
						run: (*parser).callonJoinRightInput12,
						expr: &ruleRefExpr{
							pos:  position{line: 417, col: 5, offset: 12420},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 419, col: 1, offset: 12443},
			expr: &choiceExpr{
				pos: position{line: 420, col: 5, offset: 12455},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 420, col: 5, offset: 12455},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 421, col: 5, offset: 12464},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 421, col: 5, offset: 12464},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 421, col: 5, offset: 12464},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 421, col: 9, offset: 12468},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 421, col: 14, offset: 12473},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 421, col: 19, offset: 12478},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SampleOp",
			pos:  position{line: 423, col: 1, offset: 12504},
			expr: &actionExpr{
				pos: position{line: 424, col: 5, offset: 12517},
				run: (*parser).callonSampleOp1,
				expr: &seqExpr{
					pos: position{line: 424, col: 5, offset: 12517},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 424, col: 5, offset: 12517},
							val:        "sample",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 424, col: 14, offset: 12526},
							expr: &ruleRefExpr{
								pos:  position{line: 424, col: 15, offset: 12527},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 424, col: 20, offset: 12532},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 424, col: 22, offset: 12534},
								name: "SampleExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "OpAssignment",
			pos:  position{line: 466, col: 1, offset: 14033},
			expr: &actionExpr{
				pos: position{line: 467, col: 5, offset: 14050},
				run: (*parser).callonOpAssignment1,
				expr: &labeledExpr{
					pos:   position{line: 467, col: 5, offset: 14050},
					label: "a",
					expr: &ruleRefExpr{
						pos:  position{line: 467, col: 7, offset: 14052},
						name: "Assignments",
					},
				},
			},
		},
		{
			name: "SampleExpr",
			pos:  position{line: 471, col: 1, offset: 14152},
			expr: &choiceExpr{
				pos: position{line: 472, col: 5, offset: 14167},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 472, col: 5, offset: 14167},
						run: (*parser).callonSampleExpr2,
						expr: &seqExpr{
							pos: position{line: 472, col: 5, offset: 14167},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 472, col: 5, offset: 14167},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 472, col: 7, offset: 14169},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 472, col: 12, offset: 14174},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 473, col: 5, offset: 14203},
						run: (*parser).callonSampleExpr7,
						expr: &litMatcher{
							pos:        position{line: 473, col: 5, offset: 14203},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromOp",
			pos:  position{line: 475, col: 1, offset: 14274},
			expr: &actionExpr{
				pos: position{line: 476, col: 5, offset: 14285},
				run: (*parser).callonFromOp1,
				expr: &labeledExpr{
					pos:   position{line: 476, col: 5, offset: 14285},
					label: "source",
					expr: &ruleRefExpr{
						pos:  position{line: 476, col: 12, offset: 14292},
						name: "FromAny",
					},
				},
			},
		},
		{
			name: "FromAny",
			pos:  position{line: 480, col: 1, offset: 14448},
			expr: &choiceExpr{
				pos: position{line: 481, col: 5, offset: 14460},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 481, col: 5, offset: 14460},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 482, col: 5, offset: 14469},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 483, col: 5, offset: 14477},
						name: "From",
					},
				},
			},
		},
		{
			name: "File",
			pos:  position{line: 485, col: 1, offset: 14483},
			expr: &actionExpr{
				pos: position{line: 486, col: 5, offset: 14492},
				run: (*parser).callonFile1,
				expr: &seqExpr{
					pos: position{line: 486, col: 5, offset: 14492},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 486, col: 5, offset: 14492},
							val:        "file",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 486, col: 12, offset: 14499},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 486, col: 14, offset: 14501},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 486, col: 19, offset: 14506},
								name: "Path",
							},
						},
						&labeledExpr{
							pos:   position{line: 486, col: 24, offset: 14511},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 486, col: 31, offset: 14518},
								expr: &ruleRefExpr{
									pos:  position{line: 486, col: 31, offset: 14518},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 486, col: 42, offset: 14529},
							label: "layout",
							expr: &zeroOrOneExpr{
								pos: position{line: 486, col: 49, offset: 14536},
								expr: &ruleRefExpr{
									pos:  position{line: 486, col: 49, offset: 14536},
									name: "LayoutArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "From",
			pos:  position{line: 490, col: 1, offset: 14665},
			expr: &actionExpr{
				pos: position{line: 491, col: 5, offset: 14674},
				run: (*parser).callonFrom1,
				expr: &seqExpr{
					pos: position{line: 491, col: 5, offset: 14674},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 491, col: 5, offset: 14674},
							val:        "from",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 491, col: 12, offset: 14681},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 491, col: 14, offset: 14683},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 491, col: 19, offset: 14688},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "Pool",
			pos:  position{line: 493, col: 1, offset: 14719},
			expr: &actionExpr{
				pos: position{line: 494, col: 5, offset: 14728},
				run: (*parser).callonPool1,
				expr: &seqExpr{
					pos: position{line: 494, col: 5, offset: 14728},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 494, col: 5, offset: 14728},
							val:        "pool",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 494, col: 12, offset: 14735},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 494, col: 14, offset: 14737},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 494, col: 19, offset: 14742},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolBody",
			pos:  position{line: 496, col: 1, offset: 14773},
			expr: &actionExpr{
				pos: position{line: 497, col: 5, offset: 14786},
				run: (*parser).callonPoolBody1,
				expr: &seqExpr{
					pos: position{line: 497, col: 5, offset: 14786},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 497, col: 5, offset: 14786},
							label: "spec",
							expr: &ruleRefExpr{
								pos:  position{line: 497, col: 10, offset: 14791},
								name: "PoolSpec",
							},
						},
						&labeledExpr{
							pos:   position{line: 497, col: 19, offset: 14800},
							label: "at",
							expr: &zeroOrOneExpr{
								pos: position{line: 497, col: 22, offset: 14803},
								expr: &ruleRefExpr{
									pos:  position{line: 497, col: 22, offset: 14803},
									name: "PoolAt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Get",
			pos:  position{line: 501, col: 1, offset: 14901},
			expr: &actionExpr{
				pos: position{line: 502, col: 5, offset: 14909},
				run: (*parser).callonGet1,
				expr: &seqExpr{
					pos: position{line: 502, col: 5, offset: 14909},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 502, col: 5, offset: 14909},
							val:        "get",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 502, col: 11, offset: 14915},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 502, col: 13, offset: 14917},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 502, col: 17, offset: 14921},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 502, col: 21, offset: 14925},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 502, col: 28, offset: 14932},
								expr: &ruleRefExpr{
									pos:  position{line: 502, col: 28, offset: 14932},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 502, col: 39, offset: 14943},
							label: "layout",
							expr: &zeroOrOneExpr{
								pos: position{line: 502, col: 46, offset: 14950},
								expr: &ruleRefExpr{
									pos:  position{line: 502, col: 46, offset: 14950},
									name: "LayoutArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 506, col: 1, offset: 15076},
			expr: &actionExpr{
				pos: position{line: 506, col: 7, offset: 15082},
				run: (*parser).callonURL1,
				expr: &seqExpr{
					pos: position{line: 506, col: 7, offset: 15082},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 506, col: 8, offset: 15083},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 506, col: 8, offset: 15083},
									val:        "http:",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 506, col: 18, offset: 15093},
									val:        "https:",
									ignoreCase: false,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 506, col: 28, offset: 15103},
							name: "Path",
						},
					},
				},
			},
		},
		{
			name: "Path",
			pos:  position{line: 508, col: 1, offset: 15140},
			expr: &choiceExpr{
				pos: position{line: 509, col: 5, offset: 15149},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 509, col: 5, offset: 15149},
						run: (*parser).callonPath2,
						expr: &labeledExpr{
							pos:   position{line: 509, col: 5, offset: 15149},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 509, col: 7, offset: 15151},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 510, col: 5, offset: 15186},
						run: (*parser).callonPath5,
						expr: &oneOrMoreExpr{
							pos: position{line: 510, col: 5, offset: 15186},
							expr: &charClassMatcher{
								pos:        position{line: 510, col: 5, offset: 15186},
								val:        "[0-9a-zA-Z!@$%^&*_=<>,./?:[\\]{}~+-]",
								chars:      []rune{'!', '@', '$', '%', '^', '&', '*', '_', '=', '<', '>', ',', '.', '/', '?', ':', '[', ']', '{', '}', '~', '+', '-'},
								ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PoolAt",
			pos:  position{line: 513, col: 1, offset: 15288},
			expr: &actionExpr{
				pos: position{line: 514, col: 5, offset: 15299},
				run: (*parser).callonPoolAt1,
				expr: &seqExpr{
					pos: position{line: 514, col: 5, offset: 15299},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 514, col: 5, offset: 15299},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 514, col: 7, offset: 15301},
							val:        "at",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 514, col: 12, offset: 15306},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 514, col: 14, offset: 15308},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 514, col: 17, offset: 15311},
								name: "KSUID",
							},
						},
					},
				},
			},
		},
		{
			name: "KSUID",
			pos:  position{line: 517, col: 1, offset: 15377},
			expr: &actionExpr{
				pos: position{line: 517, col: 9, offset: 15385},
				run: (*parser).callonKSUID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 517, col: 9, offset: 15385},
					expr: &charClassMatcher{
						pos:        position{line: 517, col: 10, offset: 15386},
						val:        "[0-9a-zA-Z]",
						ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "PoolSpec",
			pos:  position{line: 519, col: 1, offset: 15432},
			expr: &choiceExpr{
				pos: position{line: 520, col: 5, offset: 15445},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 520, col: 5, offset: 15445},
						run: (*parser).callonPoolSpec2,
						expr: &seqExpr{
							pos: position{line: 520, col: 5, offset: 15445},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 520, col: 5, offset: 15445},
									label: "pool",
									expr: &ruleRefExpr{
										pos:  position{line: 520, col: 10, offset: 15450},
										name: "PoolName",
									},
								},
								&labeledExpr{
									pos:   position{line: 520, col: 19, offset: 15459},
									label: "commit",
									expr: &zeroOrOneExpr{
										pos: position{line: 520, col: 26, offset: 15466},
										expr: &ruleRefExpr{
											pos:  position{line: 520, col: 26, offset: 15466},
											name: "PoolCommit",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 520, col: 38, offset: 15478},
									label: "meta",
									expr: &zeroOrOneExpr{
										pos: position{line: 520, col: 43, offset: 15483},
										expr: &ruleRefExpr{
											pos:  position{line: 520, col: 43, offset: 15483},
											name: "PoolMeta",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 520, col: 53, offset: 15493},
									label: "tap",
									expr: &ruleRefExpr{
										pos:  position{line: 520, col: 57, offset: 15497},
										name: "TapArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 523, col: 5, offset: 15614},
						run: (*parser).callonPoolSpec14,
						expr: &labeledExpr{
							pos:   position{line: 523, col: 5, offset: 15614},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 523, col: 10, offset: 15619},
								name: "PoolMeta",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolCommit",
			pos:  position{line: 527, col: 1, offset: 15720},
			expr: &actionExpr{
				pos: position{line: 528, col: 5, offset: 15735},
				run: (*parser).callonPoolCommit1,
				expr: &seqExpr{
					pos: position{line: 528, col: 5, offset: 15735},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 528, col: 5, offset: 15735},
							val:        "@",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 528, col: 9, offset: 15739},
							label: "commit",
							expr: &ruleRefExpr{
								pos:  position{line: 528, col: 16, offset: 15746},
								name: "PoolNameString",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolMeta",
			pos:  position{line: 530, col: 1, offset: 15785},
			expr: &actionExpr{
				pos: position{line: 531, col: 5, offset: 15798},
				run: (*parser).callonPoolMeta1,
				expr: &seqExpr{
					pos: position{line: 531, col: 5, offset: 15798},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 531, col: 5, offset: 15798},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 531, col: 9, offset: 15802},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 531, col: 14, offset: 15807},
								name: "PoolIdentifier",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolName",
			pos:  position{line: 533, col: 1, offset: 15844},
			expr: &choiceExpr{
				pos: position{line: 534, col: 5, offset: 15857},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 534, col: 5, offset: 15857},
						name: "Glob",
					},
					&actionExpr{
						pos: position{line: 535, col: 5, offset: 15866},
						run: (*parser).callonPoolName3,
						expr: &seqExpr{
							pos: position{line: 535, col: 5, offset: 15866},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 535, col: 5, offset: 15866},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 535, col: 9, offset: 15870},
									expr: &ruleRefExpr{
										pos:  position{line: 535, col: 10, offset: 15871},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 536, col: 5, offset: 15956},
						name: "Regexp",
					},
					&actionExpr{
						pos: position{line: 537, col: 5, offset: 15967},
						run: (*parser).callonPoolName9,
						expr: &labeledExpr{
							pos:   position{line: 537, col: 5, offset: 15967},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 537, col: 10, offset: 15972},
								name: "PoolNameString",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolNameString",
			pos:  position{line: 539, col: 1, offset: 16059},
			expr: &choiceExpr{
				pos: position{line: 540, col: 5, offset: 16078},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 540, col: 5, offset: 16078},
						name: "PoolIdentifier",
					},
					&ruleRefExpr{
						pos:  position{line: 541, col: 5, offset: 16097},
						name: "KSUID",
					},
					&ruleRefExpr{
						pos:  position{line: 542, col: 5, offset: 16107},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "PoolIdentifier",
			pos:  position{line: 544, col: 1, offset: 16121},
			expr: &actionExpr{
				pos: position{line: 545, col: 5, offset: 16140},
				run: (*parser).callonPoolIdentifier1,
				expr: &seqExpr{
					pos: position{line: 545, col: 5, offset: 16140},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 545, col: 6, offset: 16141},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 545, col: 6, offset: 16141},
									name: "IdentifierStart",
								},
								&litMatcher{
									pos:        position{line: 545, col: 24, offset: 16159},
									val:        ".",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 545, col: 29, offset: 16164},
							expr: &choiceExpr{
								pos: position{line: 545, col: 30, offset: 16165},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 545, col: 30, offset: 16165},
										name: "IdentifierRest",
									},
									&litMatcher{
										pos:        position{line: 545, col: 47, offset: 16182},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LayoutArg",
			pos:  position{line: 547, col: 1, offset: 16221},
			expr: &actionExpr{
				pos: position{line: 548, col: 5, offset: 16235},
				run: (*parser).callonLayoutArg1,
				expr: &seqExpr{
					pos: position{line: 548, col: 5, offset: 16235},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 548, col: 5, offset: 16235},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 548, col: 7, offset: 16237},
							val:        "order",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 548, col: 15, offset: 16245},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 548, col: 17, offset: 16247},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 548, col: 22, offset: 16252},
								name: "FieldExprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 548, col: 33, offset: 16263},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 548, col: 39, offset: 16269},
								name: "OrderSuffix",
							},
						},
					},
				},
			},
		},
		{
			name: "TapArg",
			pos:  position{line: 552, col: 1, offset: 16379},
			expr: &choiceExpr{
				pos: position{line: 553, col: 5, offset: 16390},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 553, col: 5, offset: 16390},
						run: (*parser).callonTapArg2,
						expr: &seqExpr{
							pos: position{line: 553, col: 5, offset: 16390},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 553, col: 5, offset: 16390},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 553, col: 7, offset: 16392},
									val:        "tap",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 554, col: 5, offset: 16423},
						run: (*parser).callonTapArg6,
						expr: &litMatcher{
							pos:        position{line: 554, col: 5, offset: 16423},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FormatArg",
			pos:  position{line: 556, col: 1, offset: 16449},
			expr: &actionExpr{
				pos: position{line: 557, col: 5, offset: 16463},
				run: (*parser).callonFormatArg1,
				expr: &seqExpr{
					pos: position{line: 557, col: 5, offset: 16463},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 557, col: 5, offset: 16463},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 557, col: 7, offset: 16465},
							val:        "format",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 557, col: 16, offset: 16474},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 557, col: 18, offset: 16476},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 557, col: 22, offset: 16480},
								name: "IdentifierName",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderSuffix",
			pos:  position{line: 559, col: 1, offset: 16516},
			expr: &choiceExpr{
				pos: position{line: 560, col: 5, offset: 16532},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 560, col: 5, offset: 16532},
						run: (*parser).callonOrderSuffix2,
						expr: &litMatcher{
							pos:        position{line: 560, col: 5, offset: 16532},
							val:        ":asc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 561, col: 5, offset: 16566},
						run: (*parser).callonOrderSuffix4,
						expr: &litMatcher{
							pos:        position{line: 561, col: 5, offset: 16566},
							val:        ":desc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 562, col: 5, offset: 16602},
						run: (*parser).callonOrderSuffix6,
						expr: &litMatcher{
							pos:        position{line: 562, col: 5, offset: 16602},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PassOp",
			pos:  position{line: 564, col: 1, offset: 16628},
			expr: &actionExpr{
				pos: position{line: 565, col: 5, offset: 16639},
				run: (*parser).callonPassOp1,
				expr: &seqExpr{
					pos: position{line: 565, col: 5, offset: 16639},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 565, col: 5, offset: 16639},
							val:        "pass",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 565, col: 12, offset: 16646},
							expr: &ruleRefExpr{
								pos:  position{line: 565, col: 13, offset: 16647},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "ExplodeOp",
			pos:  position{line: 571, col: 1, offset: 16839},
			expr: &actionExpr{
				pos: position{line: 572, col: 5, offset: 16853},
				run: (*parser).callonExplodeOp1,
				expr: &seqExpr{
					pos: position{line: 572, col: 5, offset: 16853},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 572, col: 5, offset: 16853},
							val:        "explode",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 572, col: 15, offset: 16863},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 572, col: 17, offset: 16865},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 572, col: 22, offset: 16870},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 572, col: 28, offset: 16876},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 572, col: 32, offset: 16880},
								name: "TypeArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 572, col: 40, offset: 16888},
							label: "as",
							expr: &zeroOrOneExpr{
								pos: position{line: 572, col: 43, offset: 16891},
								expr: &ruleRefExpr{
									pos:  position{line: 572, col: 43, offset: 16891},
									name: "AsArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MergeOp",
			pos:  position{line: 576, col: 1, offset: 17003},
			expr: &actionExpr{
				pos: position{line: 577, col: 5, offset: 17015},
				run: (*parser).callonMergeOp1,
				expr: &seqExpr{
					pos: position{line: 577, col: 5, offset: 17015},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 577, col: 5, offset: 17015},
							val:        "merge",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 577, col: 13, offset: 17023},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 577, col: 15, offset: 17025},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 577, col: 20, offset: 17030},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "OverOp",
			pos:  position{line: 581, col: 1, offset: 17111},
			expr: &actionExpr{
				pos: position{line: 582, col: 5, offset: 17122},
				run: (*parser).callonOverOp1,
				expr: &seqExpr{
					pos: position{line: 582, col: 5, offset: 17122},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 582, col: 5, offset: 17122},
							val:        "over",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 582, col: 12, offset: 17129},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 582, col: 14, offset: 17131},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 582, col: 20, offset: 17137},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 582, col: 26, offset: 17143},
							label: "locals",
							expr: &zeroOrOneExpr{
								pos: position{line: 582, col: 33, offset: 17150},
								expr: &ruleRefExpr{
									pos:  position{line: 582, col: 33, offset: 17150},
									name: "Locals",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 582, col: 41, offset: 17158},
							label: "scope",
							expr: &zeroOrOneExpr{
								pos: position{line: 582, col: 47, offset: 17164},
								expr: &ruleRefExpr{
									pos:  position{line: 582, col: 47, offset: 17164},
									name: "Scope",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Scope",
			pos:  position{line: 590, col: 1, offset: 17414},
			expr: &actionExpr{
				pos: position{line: 591, col: 5, offset: 17424},
				run: (*parser).callonScope1,
				expr: &seqExpr{
					pos: position{line: 591, col: 5, offset: 17424},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 591, col: 5, offset: 17424},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 591, col: 8, offset: 17427},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 591, col: 13, offset: 17432},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 591, col: 16, offset: 17435},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 591, col: 20, offset: 17439},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 591, col: 23, offset: 17442},
							label: "seq",
							expr: &ruleRefExpr{
								pos:  position{line: 591, col: 27, offset: 17446},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 591, col: 38, offset: 17457},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 591, col: 41, offset: 17460},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Locals",
			pos:  position{line: 593, col: 1, offset: 17485},
			expr: &actionExpr{
				pos: position{line: 594, col: 5, offset: 17496},
				run: (*parser).callonLocals1,
				expr: &seqExpr{
					pos: position{line: 594, col: 5, offset: 17496},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 594, col: 5, offset: 17496},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 594, col: 7, offset: 17498},
							val:        "with",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 594, col: 14, offset: 17505},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 594, col: 16, offset: 17507},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 594, col: 22, offset: 17513},
								name: "LocalsAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 594, col: 39, offset: 17530},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 594, col: 44, offset: 17535},
								expr: &actionExpr{
									pos: position{line: 594, col: 45, offset: 17536},
									run: (*parser).callonLocals10,
									expr: &seqExpr{
										pos: position{line: 594, col: 45, offset: 17536},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 594, col: 45, offset: 17536},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 594, col: 48, offset: 17539},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 594, col: 52, offset: 17543},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 594, col: 55, offset: 17546},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 594, col: 57, offset: 17548},
													name: "LocalsAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocalsAssignment",
			pos:  position{line: 598, col: 1, offset: 17669},
			expr: &actionExpr{
				pos: position{line: 599, col: 5, offset: 17690},
				run: (*parser).callonLocalsAssignment1,
				expr: &seqExpr{
					pos: position{line: 599, col: 5, offset: 17690},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 599, col: 5, offset: 17690},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 599, col: 10, offset: 17695},
								name: "IdentifierName",
							},
						},
						&labeledExpr{
							pos:   position{line: 599, col: 25, offset: 17710},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 599, col: 29, offset: 17714},
								expr: &seqExpr{
									pos: position{line: 599, col: 30, offset: 17715},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 599, col: 30, offset: 17715},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 599, col: 33, offset: 17718},
											val:        "=",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 599, col: 37, offset: 17722},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 599, col: 40, offset: 17725},
											name: "Expr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "YieldOp",
			pos:  position{line: 607, col: 1, offset: 17946},
			expr: &actionExpr{
				pos: position{line: 608, col: 5, offset: 17958},
				run: (*parser).callonYieldOp1,
				expr: &seqExpr{
					pos: position{line: 608, col: 5, offset: 17958},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 608, col: 5, offset: 17958},
							val:        "yield",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 608, col: 13, offset: 17966},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 608, col: 15, offset: 17968},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 608, col: 21, offset: 17974},
								name: "Exprs",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeArg",
			pos:  position{line: 612, col: 1, offset: 18058},
			expr: &actionExpr{
				pos: position{line: 613, col: 5, offset: 18070},
				run: (*parser).callonTypeArg1,
				expr: &seqExpr{
					pos: position{line: 613, col: 5, offset: 18070},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 613, col: 5, offset: 18070},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 613, col: 7, offset: 18072},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 613, col: 10, offset: 18075},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 613, col: 12, offset: 18077},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 613, col: 16, offset: 18081},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "AsArg",
			pos:  position{line: 615, col: 1, offset: 18106},
			expr: &actionExpr{
				pos: position{line: 616, col: 5, offset: 18116},
				run: (*parser).callonAsArg1,
				expr: &seqExpr{
					pos: position{line: 616, col: 5, offset: 18116},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 616, col: 5, offset: 18116},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 616, col: 7, offset: 18118},
							name: "AS",
						},
						&ruleRefExpr{
							pos:  position{line: 616, col: 10, offset: 18121},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 616, col: 12, offset: 18123},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 616, col: 16, offset: 18127},
								name: "Lval",
							},
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 620, col: 1, offset: 18178},
			expr: &ruleRefExpr{
				pos:  position{line: 620, col: 8, offset: 18185},
				name: "DerefExpr",
			},
		},
		{
			name: "Lvals",
			pos:  position{line: 622, col: 1, offset: 18196},
			expr: &actionExpr{
				pos: position{line: 623, col: 5, offset: 18206},
				run: (*parser).callonLvals1,
				expr: &seqExpr{
					pos: position{line: 623, col: 5, offset: 18206},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 623, col: 5, offset: 18206},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 623, col: 11, offset: 18212},
								name: "Lval",
							},
						},
						&labeledExpr{
							pos:   position{line: 623, col: 16, offset: 18217},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 623, col: 21, offset: 18222},
								expr: &actionExpr{
									pos: position{line: 623, col: 22, offset: 18223},
									run: (*parser).callonLvals7,
									expr: &seqExpr{
										pos: position{line: 623, col: 22, offset: 18223},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 623, col: 22, offset: 18223},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 623, col: 25, offset: 18226},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 623, col: 29, offset: 18230},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 623, col: 32, offset: 18233},
												label: "lval",
												expr: &ruleRefExpr{
													pos:  position{line: 623, col: 37, offset: 18238},
													name: "Lval",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 627, col: 1, offset: 18350},
			expr: &ruleRefExpr{
				pos:  position{line: 627, col: 13, offset: 18362},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 629, col: 1, offset: 18368},
			expr: &actionExpr{
				pos: position{line: 630, col: 5, offset: 18383},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 630, col: 5, offset: 18383},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 630, col: 5, offset: 18383},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 630, col: 11, offset: 18389},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 630, col: 21, offset: 18399},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 630, col: 26, offset: 18404},
								expr: &seqExpr{
									pos: position{line: 630, col: 27, offset: 18405},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 630, col: 27, offset: 18405},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 630, col: 30, offset: 18408},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 630, col: 34, offset: 18412},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 630, col: 37, offset: 18415},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignments",
			pos:  position{line: 640, col: 1, offset: 18614},
			expr: &actionExpr{
				pos: position{line: 641, col: 5, offset: 18630},
				run: (*parser).callonAssignments1,
				expr: &seqExpr{
					pos: position{line: 641, col: 5, offset: 18630},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 641, col: 5, offset: 18630},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 641, col: 11, offset: 18636},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 641, col: 22, offset: 18647},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 641, col: 27, offset: 18652},
								expr: &actionExpr{
									pos: position{line: 641, col: 28, offset: 18653},
									run: (*parser).callonAssignments7,
									expr: &seqExpr{
										pos: position{line: 641, col: 28, offset: 18653},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 641, col: 28, offset: 18653},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 641, col: 31, offset: 18656},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 641, col: 35, offset: 18660},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 641, col: 38, offset: 18663},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 641, col: 40, offset: 18665},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 645, col: 1, offset: 18776},
			expr: &actionExpr{
				pos: position{line: 646, col: 5, offset: 18791},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 646, col: 5, offset: 18791},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 646, col: 5, offset: 18791},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 646, col: 9, offset: 18795},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 646, col: 14, offset: 18800},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 646, col: 17, offset: 18803},
							val:        ":=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 646, col: 22, offset: 18808},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 646, col: 25, offset: 18811},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 646, col: 29, offset: 18815},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 648, col: 1, offset: 18906},
			expr: &ruleRefExpr{
				pos:  position{line: 648, col: 8, offset: 18913},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 650, col: 1, offset: 18930},
			expr: &actionExpr{
				pos: position{line: 651, col: 5, offset: 18950},
				run: (*parser).callonConditionalExpr1,
				expr: &seqExpr{
					pos: position{line: 651, col: 5, offset: 18950},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 651, col: 5, offset: 18950},
							label: "cond",
							expr: &ruleRefExpr{
								pos:  position{line: 651, col: 10, offset: 18955},
								name: "LogicalOrExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 651, col: 24, offset: 18969},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 651, col: 28, offset: 18973},
								expr: &seqExpr{
									pos: position{line: 651, col: 29, offset: 18974},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 651, col: 29, offset: 18974},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 651, col: 32, offset: 18977},
											val:        "?",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 651, col: 36, offset: 18981},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 651, col: 39, offset: 18984},
											name: "Expr",
										},
										&ruleRefExpr{
											pos:  position{line: 651, col: 44, offset: 18989},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 651, col: 47, offset: 18992},
											val:        ":",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 651, col: 51, offset: 18996},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 651, col: 54, offset: 18999},
											name: "Expr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 660, col: 1, offset: 19260},
			expr: &actionExpr{
				pos: position{line: 661, col: 5, offset: 19278},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 661, col: 5, offset: 19278},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 661, col: 5, offset: 19278},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 661, col: 11, offset: 19284},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 662, col: 5, offset: 19303},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 662, col: 10, offset: 19308},
								expr: &actionExpr{
									pos: position{line: 662, col: 11, offset: 19309},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 662, col: 11, offset: 19309},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 662, col: 11, offset: 19309},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 662, col: 14, offset: 19312},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 662, col: 17, offset: 19315},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 662, col: 25, offset: 19323},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 662, col: 28, offset: 19326},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 662, col: 33, offset: 19331},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 666, col: 1, offset: 19449},
			expr: &actionExpr{
				pos: position{line: 667, col: 5, offset: 19468},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 667, col: 5, offset: 19468},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 667, col: 5, offset: 19468},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 667, col: 11, offset: 19474},
								name: "ComparisonExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 668, col: 5, offset: 19493},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 668, col: 10, offset: 19498},
								expr: &actionExpr{
									pos: position{line: 668, col: 11, offset: 19499},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 668, col: 11, offset: 19499},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 668, col: 11, offset: 19499},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 668, col: 14, offset: 19502},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 668, col: 17, offset: 19505},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 668, col: 26, offset: 19514},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 668, col: 29, offset: 19517},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 668, col: 34, offset: 19522},
													name: "ComparisonExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ComparisonExpr",
			pos:  position{line: 672, col: 1, offset: 19640},
			expr: &actionExpr{
				pos: position{line: 673, col: 5, offset: 19659},
				run: (*parser).callonComparisonExpr1,
				expr: &seqExpr{
					pos: position{line: 673, col: 5, offset: 19659},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 673, col: 5, offset: 19659},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 673, col: 9, offset: 19663},
								name: "AdditiveExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 673, col: 22, offset: 19676},
							label: "opAndRHS",
							expr: &zeroOrOneExpr{
								pos: position{line: 673, col: 31, offset: 19685},
								expr: &choiceExpr{
									pos: position{line: 673, col: 32, offset: 19686},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 673, col: 32, offset: 19686},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 673, col: 32, offset: 19686},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 673, col: 35, offset: 19689},
													name: "Comparator",
												},
												&ruleRefExpr{
													pos:  position{line: 673, col: 46, offset: 19700},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 673, col: 49, offset: 19703},
													name: "AdditiveExpr",
												},
											},
										},
										&seqExpr{
											pos: position{line: 673, col: 64, offset: 19718},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 673, col: 64, offset: 19718},
													name: "__",
												},
												&actionExpr{
													pos: position{line: 673, col: 68, offset: 19722},
													run: (*parser).callonComparisonExpr15,
													expr: &litMatcher{
														pos:        position{line: 673, col: 68, offset: 19722},
														val:        "~",
														ignoreCase: false,
													},
												},
												&ruleRefExpr{
													pos:  position{line: 673, col: 104, offset: 19758},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 673, col: 107, offset: 19761},
													name: "Regexp",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 682, col: 1, offset: 20022},
			expr: &actionExpr{
				pos: position{line: 683, col: 5, offset: 20039},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 683, col: 5, offset: 20039},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 683, col: 5, offset: 20039},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 683, col: 11, offset: 20045},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 684, col: 5, offset: 20068},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 684, col: 10, offset: 20073},
								expr: &actionExpr{
									pos: position{line: 684, col: 11, offset: 20074},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 684, col: 11, offset: 20074},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 684, col: 11, offset: 20074},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 684, col: 14, offset: 20077},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 684, col: 17, offset: 20080},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 684, col: 34, offset: 20097},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 684, col: 37, offset: 20100},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 684, col: 42, offset: 20105},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 688, col: 1, offset: 20227},
			expr: &actionExpr{
				pos: position{line: 688, col: 20, offset: 20246},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 688, col: 21, offset: 20247},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 688, col: 21, offset: 20247},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 688, col: 27, offset: 20253},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 690, col: 1, offset: 20290},
			expr: &actionExpr{
				pos: position{line: 691, col: 5, offset: 20313},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 691, col: 5, offset: 20313},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 691, col: 5, offset: 20313},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 691, col: 11, offset: 20319},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 692, col: 5, offset: 20331},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 692, col: 10, offset: 20336},
								expr: &actionExpr{
									pos: position{line: 692, col: 11, offset: 20337},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 692, col: 11, offset: 20337},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 692, col: 11, offset: 20337},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 692, col: 14, offset: 20340},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 692, col: 17, offset: 20343},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 692, col: 40, offset: 20366},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 692, col: 43, offset: 20369},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 692, col: 48, offset: 20374},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 696, col: 1, offset: 20485},
			expr: &actionExpr{
				pos: position{line: 696, col: 26, offset: 20510},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 696, col: 27, offset: 20511},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 696, col: 27, offset: 20511},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 696, col: 33, offset: 20517},
							val:        "/",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 696, col: 39, offset: 20523},
							val:        "%",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 698, col: 1, offset: 20560},
			expr: &choiceExpr{
				pos: position{line: 699, col: 5, offset: 20572},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 699, col: 5, offset: 20572},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 699, col: 5, offset: 20572},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 699, col: 5, offset: 20572},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 699, col: 9, offset: 20576},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 699, col: 12, offset: 20579},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 699, col: 14, offset: 20581},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 702, col: 5, offset: 20690},
						name: "NegationExpr",
					},
				},
			},
		},
		{
			name: "NegationExpr",
			pos:  position{line: 704, col: 1, offset: 20704},
			expr: &choiceExpr{
				pos: position{line: 705, col: 5, offset: 20721},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 705, col: 5, offset: 20721},
						run: (*parser).callonNegationExpr2,
						expr: &seqExpr{
							pos: position{line: 705, col: 5, offset: 20721},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 705, col: 5, offset: 20721},
									expr: &ruleRefExpr{
										pos:  position{line: 705, col: 6, offset: 20722},
										name: "Literal",
									},
								},
								&litMatcher{
									pos:        position{line: 705, col: 14, offset: 20730},
									val:        "-",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 705, col: 18, offset: 20734},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 705, col: 21, offset: 20737},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 705, col: 23, offset: 20739},
										name: "FuncExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 708, col: 5, offset: 20849},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 710, col: 1, offset: 20859},
			expr: &choiceExpr{
				pos: position{line: 711, col: 5, offset: 20872},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 711, col: 5, offset: 20872},
						run: (*parser).callonFuncExpr2,
						expr: &seqExpr{
							pos: position{line: 711, col: 5, offset: 20872},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 711, col: 5, offset: 20872},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 711, col: 11, offset: 20878},
										name: "Cast",
									},
								},
								&labeledExpr{
									pos:   position{line: 711, col: 16, offset: 20883},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 711, col: 21, offset: 20888},
										expr: &ruleRefExpr{
											pos:  position{line: 711, col: 22, offset: 20889},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 714, col: 5, offset: 20960},
						run: (*parser).callonFuncExpr9,
						expr: &seqExpr{
							pos: position{line: 714, col: 5, offset: 20960},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 714, col: 5, offset: 20960},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 714, col: 11, offset: 20966},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 714, col: 20, offset: 20975},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 714, col: 25, offset: 20980},
										expr: &ruleRefExpr{
											pos:  position{line: 714, col: 26, offset: 20981},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 717, col: 5, offset: 21052},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 718, col: 5, offset: 21066},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FuncGuard",
			pos:  position{line: 720, col: 1, offset: 21075},
			expr: &seqExpr{
				pos: position{line: 720, col: 13, offset: 21087},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 720, col: 13, offset: 21087},
						name: "NotFuncs",
					},
					&ruleRefExpr{
						pos:  position{line: 720, col: 22, offset: 21096},
						name: "__",
					},
					&litMatcher{
						pos:        position{line: 720, col: 25, offset: 21099},
						val:        "(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "NotFuncs",
			pos:  position{line: 722, col: 1, offset: 21104},
			expr: &choiceExpr{
				pos: position{line: 723, col: 5, offset: 21117},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 723, col: 5, offset: 21117},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 724, col: 5, offset: 21127},
						val:        "select",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Cast",
			pos:  position{line: 726, col: 1, offset: 21137},
			expr: &actionExpr{
				pos: position{line: 727, col: 5, offset: 21146},
				run: (*parser).callonCast1,
				expr: &seqExpr{
					pos: position{line: 727, col: 5, offset: 21146},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 727, col: 5, offset: 21146},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 727, col: 9, offset: 21150},
								name: "CastType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 727, col: 18, offset: 21159},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 727, col: 21, offset: 21162},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 727, col: 25, offset: 21166},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 727, col: 28, offset: 21169},
							label: "expr",
							expr: &choiceExpr{
								pos: position{line: 727, col: 34, offset: 21175},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 727, col: 34, offset: 21175},
										name: "OverExpr",
									},
									&ruleRefExpr{
										pos:  position{line: 727, col: 45, offset: 21186},
										name: "Expr",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 727, col: 51, offset: 21192},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 727, col: 54, offset: 21195},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 731, col: 1, offset: 21292},
			expr: &choiceExpr{
				pos: position{line: 732, col: 5, offset: 21305},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 732, col: 5, offset: 21305},
						name: "Grep",
					},
					&actionExpr{
						pos: position{line: 734, col: 5, offset: 21392},
						run: (*parser).callonFunction3,
						expr: &seqExpr{
							pos: position{line: 734, col: 5, offset: 21392},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 734, col: 5, offset: 21392},
									val:        "regexp",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 734, col: 14, offset: 21401},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 734, col: 17, offset: 21404},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 734, col: 21, offset: 21408},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 734, col: 24, offset: 21411},
									label: "arg0Text",
									expr: &ruleRefExpr{
										pos:  position{line: 734, col: 33, offset: 21420},
										name: "RegexpPattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 734, col: 47, offset: 21434},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 734, col: 50, offset: 21437},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 734, col: 54, offset: 21441},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 734, col: 57, offset: 21444},
									label: "arg1",
									expr: &ruleRefExpr{
										pos:  position{line: 734, col: 62, offset: 21449},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 734, col: 67, offset: 21454},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 734, col: 70, offset: 21457},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 734, col: 74, offset: 21461},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 734, col: 80, offset: 21467},
										expr: &ruleRefExpr{
											pos:  position{line: 734, col: 80, offset: 21467},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 738, col: 5, offset: 21715},
						run: (*parser).callonFunction21,
						expr: &seqExpr{
							pos: position{line: 738, col: 5, offset: 21715},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 738, col: 5, offset: 21715},
									val:        "regexp_replace",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 738, col: 22, offset: 21732},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 738, col: 25, offset: 21735},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 738, col: 29, offset: 21739},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 738, col: 32, offset: 21742},
									label: "arg0",
									expr: &ruleRefExpr{
										pos:  position{line: 738, col: 37, offset: 21747},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 738, col: 42, offset: 21752},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 738, col: 45, offset: 21755},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 738, col: 49, offset: 21759},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 738, col: 52, offset: 21762},
									label: "arg1Text",
									expr: &ruleRefExpr{
										pos:  position{line: 738, col: 61, offset: 21771},
										name: "RegexpPattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 738, col: 75, offset: 21785},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 738, col: 78, offset: 21788},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 738, col: 82, offset: 21792},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 738, col: 85, offset: 21795},
									label: "arg2",
									expr: &ruleRefExpr{
										pos:  position{line: 738, col: 90, offset: 21800},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 738, col: 95, offset: 21805},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 738, col: 98, offset: 21808},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 738, col: 102, offset: 21812},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 738, col: 108, offset: 21818},
										expr: &ruleRefExpr{
											pos:  position{line: 738, col: 108, offset: 21818},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 742, col: 5, offset: 22080},
						run: (*parser).callonFunction44,
						expr: &seqExpr{
							pos: position{line: 742, col: 5, offset: 22080},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 742, col: 5, offset: 22080},
									expr: &ruleRefExpr{
										pos:  position{line: 742, col: 6, offset: 22081},
										name: "FuncGuard",
									},
								},
								&labeledExpr{
									pos:   position{line: 742, col: 16, offset: 22091},
									label: "fn",
									expr: &ruleRefExpr{
										pos:  position{line: 742, col: 19, offset: 22094},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 742, col: 34, offset: 22109},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 742, col: 37, offset: 22112},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 742, col: 41, offset: 22116},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 742, col: 44, offset: 22119},
									label: "args",
									expr: &ruleRefExpr{
										pos:  position{line: 742, col: 49, offset: 22124},
										name: "FunctionArgs",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 742, col: 62, offset: 22137},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 742, col: 65, offset: 22140},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 742, col: 69, offset: 22144},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 742, col: 75, offset: 22150},
										expr: &ruleRefExpr{
											pos:  position{line: 742, col: 75, offset: 22150},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FunctionArgs",
			pos:  position{line: 746, col: 1, offset: 22271},
			expr: &choiceExpr{
				pos: position{line: 747, col: 5, offset: 22288},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 747, col: 5, offset: 22288},
						run: (*parser).callonFunctionArgs2,
						expr: &labeledExpr{
							pos:   position{line: 747, col: 5, offset: 22288},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 747, col: 7, offset: 22290},
								name: "OverExpr",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 748, col: 5, offset: 22336},
						name: "OptionalExprs",
					},
				},
			},
		},
		{
			name: "Grep",
			pos:  position{line: 750, col: 1, offset: 22351},
			expr: &actionExpr{
				pos: position{line: 751, col: 5, offset: 22360},
				run: (*parser).callonGrep1,
				expr: &seqExpr{
					pos: position{line: 751, col: 5, offset: 22360},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 751, col: 5, offset: 22360},
							val:        "grep",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 751, col: 12, offset: 22367},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 751, col: 15, offset: 22370},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 751, col: 19, offset: 22374},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 751, col: 22, offset: 22377},
							label: "pattern",
							expr: &ruleRefExpr{
								pos:  position{line: 751, col: 30, offset: 22385},
								name: "Pattern",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 751, col: 38, offset: 22393},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 751, col: 42, offset: 22397},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 751, col: 46, offset: 22401},
								expr: &seqExpr{
									pos: position{line: 751, col: 47, offset: 22402},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 751, col: 47, offset: 22402},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 751, col: 51, offset: 22406},
											name: "__",
										},
										&choiceExpr{
											pos: position{line: 751, col: 56, offset: 22411},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 751, col: 56, offset: 22411},
													name: "OverExpr",
												},
												&ruleRefExpr{
													pos:  position{line: 751, col: 67, offset: 22422},
													name: "Expr",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 751, col: 73, offset: 22428},
											name: "__",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 751, col: 78, offset: 22433},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Pattern",
			pos:  position{line: 759, col: 1, offset: 22674},
			expr: &choiceExpr{
				pos: position{line: 760, col: 5, offset: 22686},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 760, col: 5, offset: 22686},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 761, col: 5, offset: 22697},
						name: "Glob",
					},
					&actionExpr{
						pos: position{line: 762, col: 5, offset: 22706},
						run: (*parser).callonPattern4,
						expr: &labeledExpr{
							pos:   position{line: 762, col: 5, offset: 22706},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 762, col: 7, offset: 22708},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "OptionalExprs",
			pos:  position{line: 766, col: 1, offset: 22800},
			expr: &choiceExpr{
				pos: position{line: 767, col: 5, offset: 22818},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 767, col: 5, offset: 22818},
						name: "Exprs",
					},
					&actionExpr{
						pos: position{line: 768, col: 5, offset: 22828},
						run: (*parser).callonOptionalExprs3,
						expr: &ruleRefExpr{
							pos:  position{line: 768, col: 5, offset: 22828},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 770, col: 1, offset: 22864},
			expr: &actionExpr{
				pos: position{line: 771, col: 5, offset: 22874},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 771, col: 5, offset: 22874},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 771, col: 5, offset: 22874},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 771, col: 11, offset: 22880},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 771, col: 16, offset: 22885},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 771, col: 21, offset: 22890},
								expr: &actionExpr{
									pos: position{line: 771, col: 22, offset: 22891},
									run: (*parser).callonExprs7,
									expr: &seqExpr{
										pos: position{line: 771, col: 22, offset: 22891},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 771, col: 22, offset: 22891},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 771, col: 25, offset: 22894},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 771, col: 29, offset: 22898},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 771, col: 32, offset: 22901},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 771, col: 34, offset: 22903},
													name: "Expr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 775, col: 1, offset: 23012},
			expr: &actionExpr{
				pos: position{line: 776, col: 5, offset: 23026},
				run: (*parser).callonDerefExpr1,
				expr: &seqExpr{
					pos: position{line: 776, col: 5, offset: 23026},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 776, col: 5, offset: 23026},
							expr: &ruleRefExpr{
								pos:  position{line: 776, col: 6, offset: 23027},
								name: "IP6",
							},
						},
						&labeledExpr{
							pos:   position{line: 776, col: 10, offset: 23031},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 776, col: 16, offset: 23037},
								name: "Identifier",
							},
						},
						&labeledExpr{
							pos:   position{line: 776, col: 27, offset: 23048},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 776, col: 32, offset: 23053},
								expr: &ruleRefExpr{
									pos:  position{line: 776, col: 33, offset: 23054},
									name: "Deref",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 780, col: 1, offset: 23122},
			expr: &choiceExpr{
				pos: position{line: 781, col: 5, offset: 23132},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 781, col: 5, offset: 23132},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 781, col: 5, offset: 23132},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 781, col: 5, offset: 23132},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 781, col: 9, offset: 23136},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 781, col: 14, offset: 23141},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 781, col: 27, offset: 23154},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 781, col: 30, offset: 23157},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 781, col: 34, offset: 23161},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 781, col: 37, offset: 23164},
									label: "to",
									expr: &zeroOrOneExpr{
										pos: position{line: 781, col: 40, offset: 23167},
										expr: &ruleRefExpr{
											pos:  position{line: 781, col: 40, offset: 23167},
											name: "AdditiveExpr",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 781, col: 54, offset: 23181},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 787, col: 5, offset: 23352},
						run: (*parser).callonDeref14,
						expr: &seqExpr{
							pos: position{line: 787, col: 5, offset: 23352},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 787, col: 5, offset: 23352},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 787, col: 9, offset: 23356},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 787, col: 12, offset: 23359},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 787, col: 16, offset: 23363},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 787, col: 19, offset: 23366},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 787, col: 22, offset: 23369},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 787, col: 35, offset: 23382},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 793, col: 5, offset: 23553},
						run: (*parser).callonDeref23,
						expr: &seqExpr{
							pos: position{line: 793, col: 5, offset: 23553},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 793, col: 5, offset: 23553},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 793, col: 9, offset: 23557},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 793, col: 14, offset: 23562},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 793, col: 19, offset: 23567},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 794, col: 5, offset: 23616},
						run: (*parser).callonDeref29,
						expr: &seqExpr{
							pos: position{line: 794, col: 5, offset: 23616},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 794, col: 5, offset: 23616},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 794, col: 9, offset: 23620},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 794, col: 12, offset: 23623},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 796, col: 1, offset: 23674},
			expr: &choiceExpr{
				pos: position{line: 797, col: 5, offset: 23686},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 797, col: 5, offset: 23686},
						name: "Record",
					},
					&ruleRefExpr{
						pos:  position{line: 798, col: 5, offset: 23697},
						name: "Array",
					},
					&ruleRefExpr{
						pos:  position{line: 799, col: 5, offset: 23707},
						name: "Set",
					},
					&ruleRefExpr{
						pos:  position{line: 800, col: 5, offset: 23715},
						name: "Map",
					},
					&ruleRefExpr{
						pos:  position{line: 801, col: 5, offset: 23723},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 802, col: 5, offset: 23735},
						run: (*parser).callonPrimary7,
						expr: &seqExpr{
							pos: position{line: 802, col: 5, offset: 23735},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 802, col: 5, offset: 23735},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 802, col: 9, offset: 23739},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 802, col: 12, offset: 23742},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 802, col: 17, offset: 23747},
										name: "OverExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 802, col: 26, offset: 23756},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 802, col: 29, offset: 23759},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 803, col: 5, offset: 23789},
						run: (*parser).callonPrimary15,
						expr: &seqExpr{
							pos: position{line: 803, col: 5, offset: 23789},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 803, col: 5, offset: 23789},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 803, col: 9, offset: 23793},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 803, col: 12, offset: 23796},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 803, col: 17, offset: 23801},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 803, col: 22, offset: 23806},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 803, col: 25, offset: 23809},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OverExpr",
			pos:  position{line: 805, col: 1, offset: 23835},
			expr: &actionExpr{
				pos: position{line: 806, col: 5, offset: 23848},
				run: (*parser).callonOverExpr1,
				expr: &seqExpr{
					pos: position{line: 806, col: 5, offset: 23848},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 806, col: 5, offset: 23848},
							val:        "over",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 806, col: 12, offset: 23855},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 806, col: 14, offset: 23857},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 806, col: 20, offset: 23863},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 806, col: 26, offset: 23869},
							label: "locals",
							expr: &zeroOrOneExpr{
								pos: position{line: 806, col: 33, offset: 23876},
								expr: &ruleRefExpr{
									pos:  position{line: 806, col: 33, offset: 23876},
									name: "Locals",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 806, col: 41, offset: 23884},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 806, col: 44, offset: 23887},
							val:        "|",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 806, col: 48, offset: 23891},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 806, col: 51, offset: 23894},
							label: "scope",
							expr: &ruleRefExpr{
								pos:  position{line: 806, col: 57, offset: 23900},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "Record",
			pos:  position{line: 810, col: 1, offset: 24031},
			expr: &actionExpr{
				pos: position{line: 811, col: 5, offset: 24042},
				run: (*parser).callonRecord1,
				expr: &seqExpr{
					pos: position{line: 811, col: 5, offset: 24042},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 811, col: 5, offset: 24042},
							val:        "{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 811, col: 9, offset: 24046},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 811, col: 12, offset: 24049},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 811, col: 18, offset: 24055},
								name: "RecordElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 811, col: 30, offset: 24067},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 811, col: 33, offset: 24070},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RecordElems",
			pos:  position{line: 815, col: 1, offset: 24160},
			expr: &choiceExpr{
				pos: position{line: 816, col: 5, offset: 24176},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 816, col: 5, offset: 24176},
						run: (*parser).callonRecordElems2,
						expr: &seqExpr{
							pos: position{line: 816, col: 5, offset: 24176},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 816, col: 5, offset: 24176},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 816, col: 11, offset: 24182},
										name: "RecordElem",
									},
								},
								&labeledExpr{
									pos:   position{line: 816, col: 22, offset: 24193},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 816, col: 27, offset: 24198},
										expr: &ruleRefExpr{
											pos:  position{line: 816, col: 27, offset: 24198},
											name: "RecordElemTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 819, col: 5, offset: 24297},
						run: (*parser).callonRecordElems9,
						expr: &ruleRefExpr{
							pos:  position{line: 819, col: 5, offset: 24297},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "RecordElemTail",
			pos:  position{line: 821, col: 1, offset: 24333},
			expr: &actionExpr{
				pos: position{line: 821, col: 18, offset: 24350},
				run: (*parser).callonRecordElemTail1,
				expr: &seqExpr{
					pos: position{line: 821, col: 18, offset: 24350},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 821, col: 18, offset: 24350},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 821, col: 21, offset: 24353},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 821, col: 25, offset: 24357},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 821, col: 28, offset: 24360},
							label: "elem",
							expr: &ruleRefExpr{
								pos:  position{line: 821, col: 33, offset: 24365},
								name: "RecordElem",
							},
						},
					},
				},
			},
		},
		{
			name: "RecordElem",
			pos:  position{line: 823, col: 1, offset: 24398},
			expr: &choiceExpr{
				pos: position{line: 824, col: 5, offset: 24413},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 824, col: 5, offset: 24413},
						name: "Spread",
					},
					&ruleRefExpr{
						pos:  position{line: 825, col: 5, offset: 24424},
						name: "Field",
					},
					&ruleRefExpr{
						pos:  position{line: 826, col: 5, offset: 24434},
						name: "Identifier",
					},
				},
			},
		},
		{
			name: "Spread",
			pos:  position{line: 828, col: 1, offset: 24446},
			expr: &actionExpr{
				pos: position{line: 829, col: 5, offset: 24457},
				run: (*parser).callonSpread1,
				expr: &seqExpr{
					pos: position{line: 829, col: 5, offset: 24457},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 829, col: 5, offset: 24457},
							val:        "...",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 829, col: 11, offset: 24463},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 829, col: 14, offset: 24466},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 829, col: 19, offset: 24471},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 833, col: 1, offset: 24557},
			expr: &actionExpr{
				pos: position{line: 834, col: 5, offset: 24567},
				run: (*parser).callonField1,
				expr: &seqExpr{
					pos: position{line: 834, col: 5, offset: 24567},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 834, col: 5, offset: 24567},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 834, col: 10, offset: 24572},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 834, col: 20, offset: 24582},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 834, col: 23, offset: 24585},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 834, col: 27, offset: 24589},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 834, col: 30, offset: 24592},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 834, col: 36, offset: 24598},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Array",
			pos:  position{line: 838, col: 1, offset: 24698},
			expr: &actionExpr{
				pos: position{line: 839, col: 5, offset: 24708},
				run: (*parser).callonArray1,
				expr: &seqExpr{
					pos: position{line: 839, col: 5, offset: 24708},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 839, col: 5, offset: 24708},
							val:        "[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 839, col: 9, offset: 24712},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 839, col: 12, offset: 24715},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 839, col: 18, offset: 24721},
								name: "VectorElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 839, col: 30, offset: 24733},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 839, col: 33, offset: 24736},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Set",
			pos:  position{line: 843, col: 1, offset: 24826},
			expr: &actionExpr{
				pos: position{line: 844, col: 5, offset: 24834},
				run: (*parser).callonSet1,
				expr: &seqExpr{
					pos: position{line: 844, col: 5, offset: 24834},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 844, col: 5, offset: 24834},
							val:        "|[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 844, col: 10, offset: 24839},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 844, col: 13, offset: 24842},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 844, col: 19, offset: 24848},
								name: "VectorElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 844, col: 31, offset: 24860},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 844, col: 34, offset: 24863},
							val:        "]|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "VectorElems",
			pos:  position{line: 848, col: 1, offset: 24952},
			expr: &choiceExpr{
				pos: position{line: 849, col: 5, offset: 24968},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 849, col: 5, offset: 24968},
						run: (*parser).callonVectorElems2,
						expr: &seqExpr{
							pos: position{line: 849, col: 5, offset: 24968},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 849, col: 5, offset: 24968},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 849, col: 11, offset: 24974},
										name: "VectorElem",
									},
								},
								&labeledExpr{
									pos:   position{line: 849, col: 22, offset: 24985},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 849, col: 27, offset: 24990},
										expr: &actionExpr{
											pos: position{line: 849, col: 28, offset: 24991},
											run: (*parser).callonVectorElems8,
											expr: &seqExpr{
												pos: position{line: 849, col: 28, offset: 24991},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 849, col: 28, offset: 24991},
														name: "__",
													},
													&litMatcher{
														pos:        position{line: 849, col: 31, offset: 24994},
														val:        ",",
														ignoreCase: false,
													},
													&ruleRefExpr{
														pos:  position{line: 849, col: 35, offset: 24998},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 849, col: 38, offset: 25001},
														label: "e",
														expr: &ruleRefExpr{
															pos:  position{line: 849, col: 40, offset: 25003},
															name: "VectorElem",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 852, col: 5, offset: 25121},
						run: (*parser).callonVectorElems15,
						expr: &ruleRefExpr{
							pos:  position{line: 852, col: 5, offset: 25121},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "VectorElem",
			pos:  position{line: 854, col: 1, offset: 25157},
			expr: &choiceExpr{
				pos: position{line: 855, col: 5, offset: 25172},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 855, col: 5, offset: 25172},
						name: "Spread",
					},
					&actionExpr{
						pos: position{line: 856, col: 5, offset: 25183},
						run: (*parser).callonVectorElem3,
						expr: &labeledExpr{
							pos:   position{line: 856, col: 5, offset: 25183},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 856, col: 7, offset: 25185},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Map",
			pos:  position{line: 858, col: 1, offset: 25261},
			expr: &actionExpr{
				pos: position{line: 859, col: 5, offset: 25269},
				run: (*parser).callonMap1,
				expr: &seqExpr{
					pos: position{line: 859, col: 5, offset: 25269},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 859, col: 5, offset: 25269},
							val:        "|{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 859, col: 10, offset: 25274},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 859, col: 13, offset: 25277},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 859, col: 19, offset: 25283},
								name: "Entries",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 859, col: 27, offset: 25291},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 859, col: 30, offset: 25294},
							val:        "}|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Entries",
			pos:  position{line: 863, col: 1, offset: 25385},
			expr: &choiceExpr{
				pos: position{line: 864, col: 5, offset: 25397},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 864, col: 5, offset: 25397},
						run: (*parser).callonEntries2,
						expr: &seqExpr{
							pos: position{line: 864, col: 5, offset: 25397},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 864, col: 5, offset: 25397},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 864, col: 11, offset: 25403},
										name: "Entry",
									},
								},
								&labeledExpr{
									pos:   position{line: 864, col: 17, offset: 25409},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 864, col: 22, offset: 25414},
										expr: &ruleRefExpr{
											pos:  position{line: 864, col: 22, offset: 25414},
											name: "EntryTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 867, col: 5, offset: 25508},
						run: (*parser).callonEntries9,
						expr: &ruleRefExpr{
							pos:  position{line: 867, col: 5, offset: 25508},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "EntryTail",
			pos:  position{line: 870, col: 1, offset: 25545},
			expr: &actionExpr{
				pos: position{line: 870, col: 13, offset: 25557},
				run: (*parser).callonEntryTail1,
				expr: &seqExpr{
					pos: position{line: 870, col: 13, offset: 25557},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 870, col: 13, offset: 25557},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 870, col: 16, offset: 25560},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 870, col: 20, offset: 25564},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 870, col: 23, offset: 25567},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 870, col: 25, offset: 25569},
								name: "Entry",
							},
						},
					},
				},
			},
		},
		{
			name: "Entry",
			pos:  position{line: 872, col: 1, offset: 25594},
			expr: &actionExpr{
				pos: position{line: 873, col: 5, offset: 25604},
				run: (*parser).callonEntry1,
				expr: &seqExpr{
					pos: position{line: 873, col: 5, offset: 25604},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 873, col: 5, offset: 25604},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 873, col: 9, offset: 25608},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 873, col: 14, offset: 25613},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 873, col: 17, offset: 25616},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 873, col: 21, offset: 25620},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 873, col: 24, offset: 25623},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 873, col: 30, offset: 25629},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOp",
			pos:  position{line: 879, col: 1, offset: 25736},
			expr: &actionExpr{
				pos: position{line: 880, col: 5, offset: 25746},
				run: (*parser).callonSQLOp1,
				expr: &seqExpr{
					pos: position{line: 880, col: 5, offset: 25746},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 880, col: 5, offset: 25746},
							label: "selection",
							expr: &ruleRefExpr{
								pos:  position{line: 880, col: 15, offset: 25756},
								name: "SQLSelect",
							},
						},
						&labeledExpr{
							pos:   position{line: 881, col: 5, offset: 25770},
							label: "from",
							expr: &zeroOrOneExpr{
								pos: position{line: 881, col: 10, offset: 25775},
								expr: &ruleRefExpr{
									pos:  position{line: 881, col: 10, offset: 25775},
									name: "SQLFrom",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 882, col: 5, offset: 25788},
							label: "joins",
							expr: &zeroOrOneExpr{
								pos: position{line: 882, col: 11, offset: 25794},
								expr: &ruleRefExpr{
									pos:  position{line: 882, col: 11, offset: 25794},
									name: "SQLJoins",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 883, col: 5, offset: 25808},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 883, col: 11, offset: 25814},
								expr: &ruleRefExpr{
									pos:  position{line: 883, col: 11, offset: 25814},
									name: "SQLWhere",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 884, col: 5, offset: 25828},
							label: "groupby",
							expr: &zeroOrOneExpr{
								pos: position{line: 884, col: 13, offset: 25836},
								expr: &ruleRefExpr{
									pos:  position{line: 884, col: 13, offset: 25836},
									name: "SQLGroupBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 885, col: 5, offset: 25852},
							label: "having",
							expr: &zeroOrOneExpr{
								pos: position{line: 885, col: 12, offset: 25859},
								expr: &ruleRefExpr{
									pos:  position{line: 885, col: 12, offset: 25859},
									name: "SQLHaving",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 886, col: 5, offset: 25874},
							label: "orderby",
							expr: &zeroOrOneExpr{
								pos: position{line: 886, col: 13, offset: 25882},
								expr: &ruleRefExpr{
									pos:  position{line: 886, col: 13, offset: 25882},
									name: "SQLOrderBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 887, col: 5, offset: 25898},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 887, col: 11, offset: 25904},
								name: "SQLLimit",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLSelect",
			pos:  position{line: 911, col: 1, offset: 26271},
			expr: &choiceExpr{
				pos: position{line: 912, col: 5, offset: 26285},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 912, col: 5, offset: 26285},
						run: (*parser).callonSQLSelect2,
						expr: &seqExpr{
							pos: position{line: 912, col: 5, offset: 26285},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 912, col: 5, offset: 26285},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 912, col: 12, offset: 26292},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 912, col: 14, offset: 26294},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 913, col: 5, offset: 26322},
						run: (*parser).callonSQLSelect7,
						expr: &seqExpr{
							pos: position{line: 913, col: 5, offset: 26322},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 913, col: 5, offset: 26322},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 913, col: 12, offset: 26329},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 913, col: 14, offset: 26331},
									label: "assignments",
									expr: &ruleRefExpr{
										pos:  position{line: 913, col: 26, offset: 26343},
										name: "SQLAssignments",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignment",
			pos:  position{line: 915, col: 1, offset: 26387},
			expr: &actionExpr{
				pos: position{line: 916, col: 5, offset: 26405},
				run: (*parser).callonSQLAssignment1,
				expr: &seqExpr{
					pos: position{line: 916, col: 5, offset: 26405},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 916, col: 5, offset: 26405},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 916, col: 9, offset: 26409},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 916, col: 14, offset: 26414},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 916, col: 18, offset: 26418},
								expr: &seqExpr{
									pos: position{line: 916, col: 19, offset: 26419},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 916, col: 19, offset: 26419},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 916, col: 21, offset: 26421},
											name: "AS",
										},
										&ruleRefExpr{
											pos:  position{line: 916, col: 24, offset: 26424},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 916, col: 26, offset: 26426},
											name: "Lval",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignments",
			pos:  position{line: 924, col: 1, offset: 26617},
			expr: &actionExpr{
				pos: position{line: 925, col: 5, offset: 26636},
				run: (*parser).callonSQLAssignments1,
				expr: &seqExpr{
					pos: position{line: 925, col: 5, offset: 26636},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 925, col: 5, offset: 26636},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 925, col: 11, offset: 26642},
								name: "SQLAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 925, col: 25, offset: 26656},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 925, col: 30, offset: 26661},
								expr: &actionExpr{
									pos: position{line: 925, col: 31, offset: 26662},
									run: (*parser).callonSQLAssignments7,
									expr: &seqExpr{
										pos: position{line: 925, col: 31, offset: 26662},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 925, col: 31, offset: 26662},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 925, col: 34, offset: 26665},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 925, col: 38, offset: 26669},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 925, col: 41, offset: 26672},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 925, col: 46, offset: 26677},
													name: "SQLAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLFrom",
			pos:  position{line: 929, col: 1, offset: 26798},
			expr: &choiceExpr{
				pos: position{line: 930, col: 5, offset: 26810},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 930, col: 5, offset: 26810},
						run: (*parser).callonSQLFrom2,
						expr: &seqExpr{
							pos: position{line: 930, col: 5, offset: 26810},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 930, col: 5, offset: 26810},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 930, col: 7, offset: 26812},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 930, col: 12, offset: 26817},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 930, col: 14, offset: 26819},
									label: "table",
									expr: &ruleRefExpr{
										pos:  position{line: 930, col: 20, offset: 26825},
										name: "SQLTable",
									},
								},
								&labeledExpr{
									pos:   position{line: 930, col: 29, offset: 26834},
									label: "alias",
									expr: &zeroOrOneExpr{
										pos: position{line: 930, col: 35, offset: 26840},
										expr: &ruleRefExpr{
											pos:  position{line: 930, col: 35, offset: 26840},
											name: "SQLAlias",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 933, col: 5, offset: 26935},
						run: (*parser).callonSQLFrom12,
						expr: &seqExpr{
							pos: position{line: 933, col: 5, offset: 26935},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 933, col: 5, offset: 26935},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 933, col: 7, offset: 26937},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 933, col: 12, offset: 26942},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 933, col: 14, offset: 26944},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAlias",
			pos:  position{line: 935, col: 1, offset: 26969},
			expr: &choiceExpr{
				pos: position{line: 936, col: 5, offset: 26982},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 936, col: 5, offset: 26982},
						run: (*parser).callonSQLAlias2,
						expr: &seqExpr{
							pos: position{line: 936, col: 5, offset: 26982},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 936, col: 5, offset: 26982},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 936, col: 7, offset: 26984},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 936, col: 10, offset: 26987},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 936, col: 12, offset: 26989},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 936, col: 15, offset: 26992},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 937, col: 5, offset: 27020},
						run: (*parser).callonSQLAlias9,
						expr: &seqExpr{
							pos: position{line: 937, col: 5, offset: 27020},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 937, col: 5, offset: 27020},
									name: "_",
								},
								&notExpr{
									pos: position{line: 937, col: 7, offset: 27022},
									expr: &seqExpr{
										pos: position{line: 937, col: 9, offset: 27024},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 937, col: 9, offset: 27024},
												name: "SQLTokenSentinels",
											},
											&ruleRefExpr{
												pos:  position{line: 937, col: 27, offset: 27042},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 937, col: 30, offset: 27045},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 937, col: 33, offset: 27048},
										name: "Lval",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLTable",
			pos:  position{line: 939, col: 1, offset: 27073},
			expr: &ruleRefExpr{
				pos:  position{line: 940, col: 5, offset: 27086},
				name: "Expr",
			},
		},
		{
			name: "SQLJoins",
			pos:  position{line: 942, col: 1, offset: 27092},
			expr: &actionExpr{
				pos: position{line: 943, col: 5, offset: 27105},
				run: (*parser).callonSQLJoins1,
				expr: &seqExpr{
					pos: position{line: 943, col: 5, offset: 27105},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 943, col: 5, offset: 27105},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 943, col: 11, offset: 27111},
								name: "SQLJoin",
							},
						},
						&labeledExpr{
							pos:   position{line: 943, col: 19, offset: 27119},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 943, col: 24, offset: 27124},
								expr: &actionExpr{
									pos: position{line: 943, col: 25, offset: 27125},
									run: (*parser).callonSQLJoins7,
									expr: &labeledExpr{
										pos:   position{line: 943, col: 25, offset: 27125},
										label: "join",
										expr: &ruleRefExpr{
											pos:  position{line: 943, col: 30, offset: 27130},
											name: "SQLJoin",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoin",
			pos:  position{line: 947, col: 1, offset: 27245},
			expr: &actionExpr{
				pos: position{line: 948, col: 5, offset: 27257},
				run: (*parser).callonSQLJoin1,
				expr: &seqExpr{
					pos: position{line: 948, col: 5, offset: 27257},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 948, col: 5, offset: 27257},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 948, col: 11, offset: 27263},
								name: "SQLJoinStyle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 948, col: 24, offset: 27276},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 948, col: 26, offset: 27278},
							name: "JOIN",
						},
						&ruleRefExpr{
							pos:  position{line: 948, col: 31, offset: 27283},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 948, col: 33, offset: 27285},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 948, col: 39, offset: 27291},
								name: "SQLTable",
							},
						},
						&labeledExpr{
							pos:   position{line: 948, col: 48, offset: 27300},
							label: "alias",
							expr: &zeroOrOneExpr{
								pos: position{line: 948, col: 54, offset: 27306},
								expr: &ruleRefExpr{
									pos:  position{line: 948, col: 54, offset: 27306},
									name: "SQLAlias",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 948, col: 64, offset: 27316},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 948, col: 66, offset: 27318},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 948, col: 69, offset: 27321},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 948, col: 71, offset: 27323},
							label: "leftKey",
							expr: &ruleRefExpr{
								pos:  position{line: 948, col: 79, offset: 27331},
								name: "JoinKey",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 948, col: 87, offset: 27339},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 948, col: 90, offset: 27342},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 948, col: 94, offset: 27346},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 948, col: 97, offset: 27349},
							label: "rightKey",
							expr: &ruleRefExpr{
								pos:  position{line: 948, col: 106, offset: 27358},
								name: "JoinKey",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoinStyle",
			pos:  position{line: 963, col: 1, offset: 27589},
			expr: &choiceExpr{
				pos: position{line: 964, col: 5, offset: 27606},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 964, col: 5, offset: 27606},
						run: (*parser).callonSQLJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 964, col: 5, offset: 27606},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 964, col: 5, offset: 27606},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 964, col: 7, offset: 27608},
									label: "style",
									expr: &choiceExpr{
										pos: position{line: 964, col: 14, offset: 27615},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 964, col: 14, offset: 27615},
												name: "ANTI",
											},
											&ruleRefExpr{
												pos:  position{line: 964, col: 21, offset: 27622},
												name: "INNER",
											},
											&ruleRefExpr{
												pos:  position{line: 964, col: 29, offset: 27630},
												name: "LEFT",
											},
											&ruleRefExpr{
												pos:  position{line: 964, col: 36, offset: 27637},
												name: "RIGHT",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 965, col: 5, offset: 27670},
						run: (*parser).callonSQLJoinStyle11,
						expr: &litMatcher{
							pos:        position{line: 965, col: 5, offset: 27670},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLWhere",
			pos:  position{line: 967, col: 1, offset: 27698},
			expr: &actionExpr{
				pos: position{line: 968, col: 5, offset: 27711},
				run: (*parser).callonSQLWhere1,
				expr: &seqExpr{
					pos: position{line: 968, col: 5, offset: 27711},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 968, col: 5, offset: 27711},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 968, col: 7, offset: 27713},
							name: "WHERE",
						},
						&ruleRefExpr{
							pos:  position{line: 968, col: 13, offset: 27719},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 968, col: 15, offset: 27721},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 968, col: 20, offset: 27726},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLGroupBy",
			pos:  position{line: 970, col: 1, offset: 27762},
			expr: &actionExpr{
				pos: position{line: 971, col: 5, offset: 27777},
				run: (*parser).callonSQLGroupBy1,
				expr: &seqExpr{
					pos: position{line: 971, col: 5, offset: 27777},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 971, col: 5, offset: 27777},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 971, col: 7, offset: 27779},
							name: "GROUP",
						},
						&ruleRefExpr{
							pos:  position{line: 971, col: 13, offset: 27785},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 971, col: 15, offset: 27787},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 971, col: 18, offset: 27790},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 971, col: 20, offset: 27792},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 971, col: 28, offset: 27800},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLHaving",
			pos:  position{line: 973, col: 1, offset: 27836},
			expr: &actionExpr{
				pos: position{line: 974, col: 5, offset: 27850},
				run: (*parser).callonSQLHaving1,
				expr: &seqExpr{
					pos: position{line: 974, col: 5, offset: 27850},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 974, col: 5, offset: 27850},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 974, col: 7, offset: 27852},
							name: "HAVING",
						},
						&ruleRefExpr{
							pos:  position{line: 974, col: 14, offset: 27859},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 974, col: 16, offset: 27861},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 974, col: 21, offset: 27866},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrderBy",
			pos:  position{line: 976, col: 1, offset: 27902},
			expr: &actionExpr{
				pos: position{line: 977, col: 5, offset: 27917},
				run: (*parser).callonSQLOrderBy1,
				expr: &seqExpr{
					pos: position{line: 977, col: 5, offset: 27917},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 977, col: 5, offset: 27917},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 977, col: 7, offset: 27919},
							name: "ORDER",
						},
						&ruleRefExpr{
							pos:  position{line: 977, col: 13, offset: 27925},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 977, col: 15, offset: 27927},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 977, col: 18, offset: 27930},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 977, col: 20, offset: 27932},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 977, col: 25, offset: 27937},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 977, col: 31, offset: 27943},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 977, col: 37, offset: 27949},
								name: "SQLOrder",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrder",
			pos:  position{line: 981, col: 1, offset: 28059},
			expr: &choiceExpr{
				pos: position{line: 982, col: 5, offset: 28072},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 982, col: 5, offset: 28072},
						run: (*parser).callonSQLOrder2,
						expr: &seqExpr{
							pos: position{line: 982, col: 5, offset: 28072},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 982, col: 5, offset: 28072},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 982, col: 7, offset: 28074},
									label: "dir",
									expr: &choiceExpr{
										pos: position{line: 982, col: 12, offset: 28079},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 982, col: 12, offset: 28079},
												name: "ASC",
											},
											&ruleRefExpr{
												pos:  position{line: 982, col: 18, offset: 28085},
												name: "DESC",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 983, col: 5, offset: 28115},
						run: (*parser).callonSQLOrder9,
						expr: &litMatcher{
							pos:        position{line: 983, col: 5, offset: 28115},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLLimit",
			pos:  position{line: 985, col: 1, offset: 28141},
			expr: &choiceExpr{
				pos: position{line: 986, col: 5, offset: 28154},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 986, col: 5, offset: 28154},
						run: (*parser).callonSQLLimit2,
						expr: &seqExpr{
							pos: position{line: 986, col: 5, offset: 28154},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 986, col: 5, offset: 28154},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 986, col: 7, offset: 28156},
									name: "LIMIT",
								},
								&ruleRefExpr{
									pos:  position{line: 986, col: 13, offset: 28162},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 986, col: 15, offset: 28164},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 986, col: 21, offset: 28170},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 987, col: 5, offset: 28201},
						run: (*parser).callonSQLLimit9,
						expr: &litMatcher{
							pos:        position{line: 987, col: 5, offset: 28201},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SELECT",
			pos:  position{line: 989, col: 1, offset: 28223},
			expr: &actionExpr{
				pos: position{line: 989, col: 10, offset: 28232},
				run: (*parser).callonSELECT1,
				expr: &litMatcher{
					pos:        position{line: 989, col: 10, offset: 28232},
					val:        "select",
					ignoreCase: true,
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 990, col: 1, offset: 28267},
			expr: &actionExpr{
				pos: position{line: 990, col: 6, offset: 28272},
				run: (*parser).callonAS1,
				expr: &litMatcher{
					pos:        position{line: 990, col: 6, offset: 28272},
					val:        "as",
					ignoreCase: true,
				},
			},
		},
		{
			name: "FROM",
			pos:  position{line: 991, col: 1, offset: 28299},
			expr: &actionExpr{
				pos: position{line: 991, col: 8, offset: 28306},
				run: (*parser).callonFROM1,
				expr: &litMatcher{
					pos:        position{line: 991, col: 8, offset: 28306},
					val:        "from",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JOIN",
			pos:  position{line: 992, col: 1, offset: 28337},
			expr: &actionExpr{
				pos: position{line: 992, col: 8, offset: 28344},
				run: (*parser).callonJOIN1,
				expr: &litMatcher{
					pos:        position{line: 992, col: 8, offset: 28344},
					val:        "join",
					ignoreCase: true,
				},
			},
		},
		{
			name: "WHERE",
			pos:  position{line: 993, col: 1, offset: 28375},
			expr: &actionExpr{
				pos: position{line: 993, col: 9, offset: 28383},
				run: (*parser).callonWHERE1,
				expr: &litMatcher{
					pos:        position{line: 993, col: 9, offset: 28383},
					val:        "where",
					ignoreCase: true,
				},
			},
		},
		{
			name: "GROUP",
			pos:  position{line: 994, col: 1, offset: 28416},
			expr: &actionExpr{
				pos: position{line: 994, col: 9, offset: 28424},
				run: (*parser).callonGROUP1,
				expr: &litMatcher{
					pos:        position{line: 994, col: 9, offset: 28424},
					val:        "group",
					ignoreCase: true,
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 995, col: 1, offset: 28457},
			expr: &actionExpr{
				pos: position{line: 995, col: 6, offset: 28462},
				run: (*parser).callonBY1,
				expr: &litMatcher{
					pos:        position{line: 995, col: 6, offset: 28462},
					val:        "by",
					ignoreCase: true,
				},
			},
		},
		{
			name: "HAVING",
			pos:  position{line: 996, col: 1, offset: 28489},
			expr: &actionExpr{
				pos: position{line: 996, col: 10, offset: 28498},
				run: (*parser).callonHAVING1,
				expr: &litMatcher{
					pos:        position{line: 996, col: 10, offset: 28498},
					val:        "having",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ORDER",
			pos:  position{line: 997, col: 1, offset: 28533},
			expr: &actionExpr{
				pos: position{line: 997, col: 9, offset: 28541},
				run: (*parser).callonORDER1,
				expr: &litMatcher{
					pos:        position{line: 997, col: 9, offset: 28541},
					val:        "order",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ON",
			pos:  position{line: 998, col: 1, offset: 28574},
			expr: &actionExpr{
				pos: position{line: 998, col: 6, offset: 28579},
				run: (*parser).callonON1,
				expr: &litMatcher{
					pos:        position{line: 998, col: 6, offset: 28579},
					val:        "on",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LIMIT",
			pos:  position{line: 999, col: 1, offset: 28606},
			expr: &actionExpr{
				pos: position{line: 999, col: 9, offset: 28614},
				run: (*parser).callonLIMIT1,
				expr: &litMatcher{
					pos:        position{line: 999, col: 9, offset: 28614},
					val:        "limit",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ASC",
			pos:  position{line: 1000, col: 1, offset: 28647},
			expr: &actionExpr{
				pos: position{line: 1000, col: 7, offset: 28653},
				run: (*parser).callonASC1,
				expr: &litMatcher{
					pos:        position{line: 1000, col: 7, offset: 28653},
					val:        "asc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "DESC",
			pos:  position{line: 1001, col: 1, offset: 28682},
			expr: &actionExpr{
				pos: position{line: 1001, col: 8, offset: 28689},
				run: (*parser).callonDESC1,
				expr: &litMatcher{
					pos:        position{line: 1001, col: 8, offset: 28689},
					val:        "desc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ANTI",
			pos:  position{line: 1002, col: 1, offset: 28720},
			expr: &actionExpr{
				pos: position{line: 1002, col: 8, offset: 28727},
				run: (*parser).callonANTI1,
				expr: &litMatcher{
					pos:        position{line: 1002, col: 8, offset: 28727},
					val:        "anti",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LEFT",
			pos:  position{line: 1003, col: 1, offset: 28758},
			expr: &actionExpr{
				pos: position{line: 1003, col: 8, offset: 28765},
				run: (*parser).callonLEFT1,
				expr: &litMatcher{
					pos:        position{line: 1003, col: 8, offset: 28765},
					val:        "left",
					ignoreCase: true,
				},
			},
		},
		{
			name: "RIGHT",
			pos:  position{line: 1004, col: 1, offset: 28796},
			expr: &actionExpr{
				pos: position{line: 1004, col: 9, offset: 28804},
				run: (*parser).callonRIGHT1,
				expr: &litMatcher{
					pos:        position{line: 1004, col: 9, offset: 28804},
					val:        "right",
					ignoreCase: true,
				},
			},
		},
		{
			name: "INNER",
			pos:  position{line: 1005, col: 1, offset: 28837},
			expr: &actionExpr{
				pos: position{line: 1005, col: 9, offset: 28845},
				run: (*parser).callonINNER1,
				expr: &litMatcher{
					pos:        position{line: 1005, col: 9, offset: 28845},
					val:        "inner",
					ignoreCase: true,
				},
			},
		},
		{
			name: "SQLTokenSentinels",
			pos:  position{line: 1007, col: 1, offset: 28879},
			expr: &choiceExpr{
				pos: position{line: 1008, col: 5, offset: 28901},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1008, col: 5, offset: 28901},
						name: "SELECT",
					},
					&ruleRefExpr{
						pos:  position{line: 1008, col: 14, offset: 28910},
						name: "AS",
					},
					&ruleRefExpr{
						pos:  position{line: 1008, col: 19, offset: 28915},
						name: "FROM",
					},
					&ruleRefExpr{
						pos:  position{line: 1008, col: 27, offset: 28923},
						name: "JOIN",
					},
					&ruleRefExpr{
						pos:  position{line: 1008, col: 34, offset: 28930},
						name: "WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 1008, col: 42, offset: 28938},
						name: "GROUP",
					},
					&ruleRefExpr{
						pos:  position{line: 1008, col: 50, offset: 28946},
						name: "HAVING",
					},
					&ruleRefExpr{
						pos:  position{line: 1008, col: 59, offset: 28955},
						name: "ORDER",
					},
					&ruleRefExpr{
						pos:  position{line: 1008, col: 67, offset: 28963},
						name: "LIMIT",
					},
					&ruleRefExpr{
						pos:  position{line: 1008, col: 75, offset: 28971},
						name: "ON",
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 1012, col: 1, offset: 28997},
			expr: &choiceExpr{
				pos: position{line: 1013, col: 5, offset: 29009},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1013, col: 5, offset: 29009},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1014, col: 5, offset: 29025},
						name: "TemplateLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1015, col: 5, offset: 29045},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1016, col: 5, offset: 29063},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1017, col: 5, offset: 29082},
						name: "BytesLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1018, col: 5, offset: 29099},
						name: "Duration",
					},
					&ruleRefExpr{
						pos:  position{line: 1019, col: 5, offset: 29112},
						name: "Time",
					},
					&ruleRefExpr{
						pos:  position{line: 1020, col: 5, offset: 29121},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1021, col: 5, offset: 29138},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1022, col: 5, offset: 29157},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1023, col: 5, offset: 29176},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 1025, col: 1, offset: 29189},
			expr: &choiceExpr{
				pos: position{line: 1026, col: 5, offset: 29207},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1026, col: 5, offset: 29207},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 1026, col: 5, offset: 29207},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1026, col: 5, offset: 29207},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1026, col: 7, offset: 29209},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 1026, col: 14, offset: 29216},
									expr: &ruleRefExpr{
										pos:  position{line: 1026, col: 15, offset: 29217},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1029, col: 5, offset: 29332},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 1029, col: 5, offset: 29332},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1029, col: 7, offset: 29334},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 1033, col: 1, offset: 29438},
			expr: &choiceExpr{
				pos: position{line: 1034, col: 5, offset: 29457},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1034, col: 5, offset: 29457},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 1034, col: 5, offset: 29457},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1034, col: 5, offset: 29457},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1034, col: 7, offset: 29459},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 1034, col: 11, offset: 29463},
									expr: &ruleRefExpr{
										pos:  position{line: 1034, col: 12, offset: 29464},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1037, col: 5, offset: 29578},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 1037, col: 5, offset: 29578},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1037, col: 7, offset: 29580},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 1041, col: 1, offset: 29679},
			expr: &actionExpr{
				pos: position{line: 1042, col: 5, offset: 29696},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1042, col: 5, offset: 29696},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1042, col: 7, offset: 29698},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 1046, col: 1, offset: 29811},
			expr: &actionExpr{
				pos: position{line: 1047, col: 5, offset: 29830},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1047, col: 5, offset: 29830},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1047, col: 7, offset: 29832},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 1051, col: 1, offset: 29941},
			expr: &choiceExpr{
				pos: position{line: 1052, col: 5, offset: 29960},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1052, col: 5, offset: 29960},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 1052, col: 5, offset: 29960},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1053, col: 5, offset: 30073},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 1053, col: 5, offset: 30073},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 1055, col: 1, offset: 30184},
			expr: &actionExpr{
				pos: position{line: 1056, col: 5, offset: 30200},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 1056, col: 5, offset: 30200},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "BytesLiteral",
			pos:  position{line: 1058, col: 1, offset: 30306},
			expr: &actionExpr{
				pos: position{line: 1059, col: 5, offset: 30323},
				run: (*parser).callonBytesLiteral1,
				expr: &seqExpr{
					pos: position{line: 1059, col: 5, offset: 30323},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1059, col: 5, offset: 30323},
							val:        "0x",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1059, col: 10, offset: 30328},
							expr: &ruleRefExpr{
								pos:  position{line: 1059, col: 10, offset: 30328},
								name: "HexDigit",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeLiteral",
			pos:  position{line: 1063, col: 1, offset: 30443},
			expr: &actionExpr{
				pos: position{line: 1064, col: 5, offset: 30459},
				run: (*parser).callonTypeLiteral1,
				expr: &seqExpr{
					pos: position{line: 1064, col: 5, offset: 30459},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1064, col: 5, offset: 30459},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1064, col: 9, offset: 30463},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1064, col: 13, offset: 30467},
								name: "Type",
							},
						},
						&litMatcher{
							pos:        position{line: 1064, col: 18, offset: 30472},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "CastType",
			pos:  position{line: 1068, col: 1, offset: 30561},
			expr: &choiceExpr{
				pos: position{line: 1069, col: 5, offset: 30574},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1069, col: 5, offset: 30574},
						name: "TypeLiteral",
					},
					&actionExpr{
						pos: position{line: 1070, col: 5, offset: 30590},
						run: (*parser).callonCastType3,
						expr: &labeledExpr{
							pos:   position{line: 1070, col: 5, offset: 30590},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1070, col: 9, offset: 30594},
								name: "PrimitiveType",
							},
						},
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 1074, col: 1, offset: 30693},
			expr: &choiceExpr{
				pos: position{line: 1075, col: 5, offset: 30702},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1075, col: 5, offset: 30702},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1076, col: 5, offset: 30718},
						name: "AmbiguousType",
					},
					&ruleRefExpr{
						pos:  position{line: 1077, col: 5, offset: 30736},
						name: "ComplexType",
					},
				},
			},
		},
		{
			name: "AmbiguousType",
			pos:  position{line: 1079, col: 1, offset: 30749},
			expr: &choiceExpr{
				pos: position{line: 1080, col: 5, offset: 30767},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1080, col: 5, offset: 30767},
						run: (*parser).callonAmbiguousType2,
						expr: &seqExpr{
							pos: position{line: 1080, col: 5, offset: 30767},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1080, col: 5, offset: 30767},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1080, col: 10, offset: 30772},
										name: "PrimitiveType",
									},
								},
								&notExpr{
									pos: position{line: 1080, col: 24, offset: 30786},
									expr: &ruleRefExpr{
										pos:  position{line: 1080, col: 25, offset: 30787},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1081, col: 5, offset: 30827},
						run: (*parser).callonAmbiguousType8,
						expr: &seqExpr{
							pos: position{line: 1081, col: 5, offset: 30827},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1081, col: 5, offset: 30827},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1081, col: 10, offset: 30832},
										name: "IdentifierName",
									},
								},
								&labeledExpr{
									pos:   position{line: 1081, col: 25, offset: 30847},
									label: "opt",
									expr: &zeroOrOneExpr{
										pos: position{line: 1081, col: 29, offset: 30851},
										expr: &seqExpr{
											pos: position{line: 1081, col: 30, offset: 30852},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1081, col: 30, offset: 30852},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 1081, col: 33, offset: 30855},
													val:        "=",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 1081, col: 37, offset: 30859},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 1081, col: 40, offset: 30862},
													name: "Type",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1087, col: 5, offset: 31094},
						run: (*parser).callonAmbiguousType19,
						expr: &labeledExpr{
							pos:   position{line: 1087, col: 5, offset: 31094},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1087, col: 10, offset: 31099},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1090, col: 5, offset: 31199},
						run: (*parser).callonAmbiguousType22,
						expr: &seqExpr{
							pos: position{line: 1090, col: 5, offset: 31199},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1090, col: 5, offset: 31199},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1090, col: 9, offset: 31203},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1090, col: 12, offset: 31206},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 1090, col: 14, offset: 31208},
										name: "TypeUnion",
									},
								},
								&litMatcher{
									pos:        position{line: 1090, col: 25, offset: 31219},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeUnion",
			pos:  position{line: 1092, col: 1, offset: 31242},
			expr: &actionExpr{
				pos: position{line: 1093, col: 5, offset: 31256},
				run: (*parser).callonTypeUnion1,
				expr: &labeledExpr{
					pos:   position{line: 1093, col: 5, offset: 31256},
					label: "types",
					expr: &ruleRefExpr{
						pos:  position{line: 1093, col: 11, offset: 31262},
						name: "TypeList",
					},
				},
			},
		},
		{
			name: "TypeList",
			pos:  position{line: 1097, col: 1, offset: 31358},
			expr: &actionExpr{
				pos: position{line: 1098, col: 5, offset: 31371},
				run: (*parser).callonTypeList1,
				expr: &seqExpr{
					pos: position{line: 1098, col: 5, offset: 31371},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1098, col: 5, offset: 31371},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1098, col: 11, offset: 31377},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 1098, col: 16, offset: 31382},
							label: "rest",
							expr: &oneOrMoreExpr{
								pos: position{line: 1098, col: 21, offset: 31387},
								expr: &ruleRefExpr{
									pos:  position{line: 1098, col: 21, offset: 31387},
									name: "TypeListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeListTail",
			pos:  position{line: 1102, col: 1, offset: 31481},
			expr: &actionExpr{
				pos: position{line: 1102, col: 16, offset: 31496},
				run: (*parser).callonTypeListTail1,
				expr: &seqExpr{
					pos: position{line: 1102, col: 16, offset: 31496},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1102, col: 16, offset: 31496},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1102, col: 19, offset: 31499},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1102, col: 23, offset: 31503},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1102, col: 26, offset: 31506},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1102, col: 30, offset: 31510},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexType",
			pos:  position{line: 1104, col: 1, offset: 31536},
			expr: &choiceExpr{
				pos: position{line: 1105, col: 5, offset: 31552},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1105, col: 5, offset: 31552},
						run: (*parser).callonComplexType2,
						expr: &seqExpr{
							pos: position{line: 1105, col: 5, offset: 31552},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1105, col: 5, offset: 31552},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1105, col: 9, offset: 31556},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1105, col: 12, offset: 31559},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 1105, col: 19, offset: 31566},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1105, col: 33, offset: 31580},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1105, col: 36, offset: 31583},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1108, col: 5, offset: 31678},
						run: (*parser).callonComplexType10,
						expr: &seqExpr{
							pos: position{line: 1108, col: 5, offset: 31678},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1108, col: 5, offset: 31678},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1108, col: 9, offset: 31682},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1108, col: 12, offset: 31685},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1108, col: 16, offset: 31689},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1108, col: 21, offset: 31694},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1108, col: 24, offset: 31697},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1111, col: 5, offset: 31786},
						run: (*parser).callonComplexType18,
						expr: &seqExpr{
							pos: position{line: 1111, col: 5, offset: 31786},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1111, col: 5, offset: 31786},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1111, col: 10, offset: 31791},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1111, col: 14, offset: 31795},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1111, col: 18, offset: 31799},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1111, col: 23, offset: 31804},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1111, col: 26, offset: 31807},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1114, col: 5, offset: 31895},
						run: (*parser).callonComplexType26,
						expr: &seqExpr{
							pos: position{line: 1114, col: 5, offset: 31895},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1114, col: 5, offset: 31895},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1114, col: 10, offset: 31900},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1114, col: 13, offset: 31903},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 1114, col: 21, offset: 31911},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1114, col: 26, offset: 31916},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1114, col: 29, offset: 31919},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1114, col: 33, offset: 31923},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1114, col: 36, offset: 31926},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 1114, col: 44, offset: 31934},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1114, col: 49, offset: 31939},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1114, col: 52, offset: 31942},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateLiteral",
			pos:  position{line: 1118, col: 1, offset: 32056},
			expr: &actionExpr{
				pos: position{line: 1119, col: 5, offset: 32076},
				run: (*parser).callonTemplateLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1119, col: 5, offset: 32076},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1119, col: 7, offset: 32078},
						name: "TemplateLiteralParts",
					},
				},
			},
		},
		{
			name: "TemplateLiteralParts",
			pos:  position{line: 1126, col: 1, offset: 32294},
			expr: &choiceExpr{
				pos: position{line: 1127, col: 5, offset: 32319},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1127, col: 5, offset: 32319},
						run: (*parser).callonTemplateLiteralParts2,
						expr: &seqExpr{
							pos: position{line: 1127, col: 5, offset: 32319},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1127, col: 5, offset: 32319},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1127, col: 9, offset: 32323},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1127, col: 11, offset: 32325},
										expr: &ruleRefExpr{
											pos:  position{line: 1127, col: 11, offset: 32325},
											name: "TemplateDoubleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1127, col: 37, offset: 32351},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1128, col: 5, offset: 32377},
						run: (*parser).callonTemplateLiteralParts9,
						expr: &seqExpr{
							pos: position{line: 1128, col: 5, offset: 32377},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1128, col: 5, offset: 32377},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1128, col: 9, offset: 32381},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1128, col: 11, offset: 32383},
										expr: &ruleRefExpr{
											pos:  position{line: 1128, col: 11, offset: 32383},
											name: "TemplateSingleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1128, col: 37, offset: 32409},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedPart",
			pos:  position{line: 1130, col: 1, offset: 32432},
			expr: &choiceExpr{
				pos: position{line: 1131, col: 5, offset: 32461},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1131, col: 5, offset: 32461},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 1132, col: 5, offset: 32478},
						run: (*parser).callonTemplateDoubleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 1132, col: 5, offset: 32478},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1132, col: 7, offset: 32480},
								expr: &ruleRefExpr{
									pos:  position{line: 1132, col: 7, offset: 32480},
									name: "TemplateDoubleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedChar",
			pos:  position{line: 1136, col: 1, offset: 32617},
			expr: &choiceExpr{
				pos: position{line: 1137, col: 5, offset: 32646},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1137, col: 5, offset: 32646},
						run: (*parser).callonTemplateDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1137, col: 5, offset: 32646},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1137, col: 5, offset: 32646},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1137, col: 10, offset: 32651},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1137, col: 12, offset: 32653},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1138, col: 5, offset: 32680},
						run: (*parser).callonTemplateDoubleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1138, col: 5, offset: 32680},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1138, col: 5, offset: 32680},
									expr: &litMatcher{
										pos:        position{line: 1138, col: 8, offset: 32683},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1138, col: 15, offset: 32690},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1138, col: 17, offset: 32692},
										name: "DoubleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedPart",
			pos:  position{line: 1140, col: 1, offset: 32728},
			expr: &choiceExpr{
				pos: position{line: 1141, col: 5, offset: 32757},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1141, col: 5, offset: 32757},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 1142, col: 5, offset: 32774},
						run: (*parser).callonTemplateSingleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 1142, col: 5, offset: 32774},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1142, col: 7, offset: 32776},
								expr: &ruleRefExpr{
									pos:  position{line: 1142, col: 7, offset: 32776},
									name: "TemplateSingleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedChar",
			pos:  position{line: 1146, col: 1, offset: 32913},
			expr: &choiceExpr{
				pos: position{line: 1147, col: 5, offset: 32942},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1147, col: 5, offset: 32942},
						run: (*parser).callonTemplateSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1147, col: 5, offset: 32942},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1147, col: 5, offset: 32942},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1147, col: 10, offset: 32947},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1147, col: 12, offset: 32949},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1148, col: 5, offset: 32976},
						run: (*parser).callonTemplateSingleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1148, col: 5, offset: 32976},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1148, col: 5, offset: 32976},
									expr: &litMatcher{
										pos:        position{line: 1148, col: 8, offset: 32979},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1148, col: 15, offset: 32986},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1148, col: 17, offset: 32988},
										name: "SingleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateExpr",
			pos:  position{line: 1150, col: 1, offset: 33024},
			expr: &actionExpr{
				pos: position{line: 1151, col: 5, offset: 33041},
				run: (*parser).callonTemplateExpr1,
				expr: &seqExpr{
					pos: position{line: 1151, col: 5, offset: 33041},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1151, col: 5, offset: 33041},
							val:        "${",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1151, col: 10, offset: 33046},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1151, col: 13, offset: 33049},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 1151, col: 15, offset: 33051},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1151, col: 20, offset: 33056},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1151, col: 23, offset: 33059},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 1166, col: 1, offset: 33355},
			expr: &actionExpr{
				pos: position{line: 1167, col: 5, offset: 33373},
				run: (*parser).callonPrimitiveType1,
				expr: &choiceExpr{
					pos: position{line: 1167, col: 9, offset: 33377},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 1167, col: 9, offset: 33377},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1167, col: 19, offset: 33387},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1167, col: 30, offset: 33398},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1167, col: 41, offset: 33409},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1168, col: 9, offset: 33426},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1168, col: 18, offset: 33435},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1168, col: 28, offset: 33445},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1168, col: 38, offset: 33455},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1169, col: 9, offset: 33471},
							val:        "float16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1169, col: 21, offset: 33483},
							val:        "float32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1169, col: 33, offset: 33495},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1170, col: 9, offset: 33513},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1170, col: 18, offset: 33522},
							val:        "string",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1171, col: 9, offset: 33539},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1171, col: 22, offset: 33552},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1172, col: 9, offset: 33567},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1173, col: 9, offset: 33583},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1173, col: 16, offset: 33590},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1174, col: 9, offset: 33604},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1174, col: 18, offset: 33613},
							val:        "null",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldList",
			pos:  position{line: 1178, col: 1, offset: 33729},
			expr: &choiceExpr{
				pos: position{line: 1179, col: 5, offset: 33747},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1179, col: 5, offset: 33747},
						run: (*parser).callonTypeFieldList2,
						expr: &seqExpr{
							pos: position{line: 1179, col: 5, offset: 33747},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1179, col: 5, offset: 33747},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 1179, col: 11, offset: 33753},
										name: "TypeField",
									},
								},
								&labeledExpr{
									pos:   position{line: 1179, col: 21, offset: 33763},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1179, col: 26, offset: 33768},
										expr: &ruleRefExpr{
											pos:  position{line: 1179, col: 26, offset: 33768},
											name: "TypeFieldListTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1182, col: 5, offset: 33870},
						run: (*parser).callonTypeFieldList9,
						expr: &litMatcher{
							pos:        position{line: 1182, col: 5, offset: 33870},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTail",
			pos:  position{line: 1184, col: 1, offset: 33894},
			expr: &actionExpr{
				pos: position{line: 1184, col: 21, offset: 33914},
				run: (*parser).callonTypeFieldListTail1,
				expr: &seqExpr{
					pos: position{line: 1184, col: 21, offset: 33914},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1184, col: 21, offset: 33914},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1184, col: 24, offset: 33917},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1184, col: 28, offset: 33921},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1184, col: 31, offset: 33924},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1184, col: 35, offset: 33928},
								name: "TypeField",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeField",
			pos:  position{line: 1186, col: 1, offset: 33959},
			expr: &actionExpr{
				pos: position{line: 1187, col: 5, offset: 33973},
				run: (*parser).callonTypeField1,
				expr: &seqExpr{
					pos: position{line: 1187, col: 5, offset: 33973},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1187, col: 5, offset: 33973},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1187, col: 10, offset: 33978},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1187, col: 20, offset: 33988},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1187, col: 23, offset: 33991},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1187, col: 27, offset: 33995},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1187, col: 30, offset: 33998},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1187, col: 34, offset: 34002},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 1191, col: 1, offset: 34084},
			expr: &choiceExpr{
				pos: position{line: 1192, col: 5, offset: 34098},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1192, col: 5, offset: 34098},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 1193, col: 5, offset: 34117},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 1195, col: 1, offset: 34131},
			expr: &actionExpr{
				pos: position{line: 1195, col: 12, offset: 34142},
				run: (*parser).callonAndToken1,
				expr: &seqExpr{
					pos: position{line: 1195, col: 12, offset: 34142},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1195, col: 13, offset: 34143},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1195, col: 13, offset: 34143},
									val:        "and",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1195, col: 21, offset: 34151},
									val:        "AND",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1195, col: 28, offset: 34158},
							expr: &ruleRefExpr{
								pos:  position{line: 1195, col: 29, offset: 34159},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 1196, col: 1, offset: 34196},
			expr: &actionExpr{
				pos: position{line: 1196, col: 11, offset: 34206},
				run: (*parser).callonOrToken1,
				expr: &seqExpr{
					pos: position{line: 1196, col: 11, offset: 34206},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1196, col: 12, offset: 34207},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1196, col: 12, offset: 34207},
									val:        "or",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1196, col: 19, offset: 34214},
									val:        "OR",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1196, col: 25, offset: 34220},
							expr: &ruleRefExpr{
								pos:  position{line: 1196, col: 26, offset: 34221},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 1197, col: 1, offset: 34257},
			expr: &actionExpr{
				pos: position{line: 1197, col: 11, offset: 34267},
				run: (*parser).callonInToken1,
				expr: &seqExpr{
					pos: position{line: 1197, col: 11, offset: 34267},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1197, col: 11, offset: 34267},
							val:        "in",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1197, col: 16, offset: 34272},
							expr: &ruleRefExpr{
								pos:  position{line: 1197, col: 17, offset: 34273},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 1198, col: 1, offset: 34309},
			expr: &actionExpr{
				pos: position{line: 1198, col: 12, offset: 34320},
				run: (*parser).callonNotToken1,
				expr: &seqExpr{
					pos: position{line: 1198, col: 12, offset: 34320},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1198, col: 13, offset: 34321},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1198, col: 13, offset: 34321},
									val:        "not",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1198, col: 21, offset: 34329},
									val:        "NOT",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1198, col: 28, offset: 34336},
							expr: &ruleRefExpr{
								pos:  position{line: 1198, col: 29, offset: 34337},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 1199, col: 1, offset: 34374},
			expr: &actionExpr{
				pos: position{line: 1199, col: 11, offset: 34384},
				run: (*parser).callonByToken1,
				expr: &seqExpr{
					pos: position{line: 1199, col: 11, offset: 34384},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1199, col: 11, offset: 34384},
							val:        "by",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1199, col: 16, offset: 34389},
							expr: &ruleRefExpr{
								pos:  position{line: 1199, col: 17, offset: 34390},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 1201, col: 1, offset: 34427},
			expr: &charClassMatcher{
				pos:        position{line: 1201, col: 19, offset: 34445},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 1203, col: 1, offset: 34457},
			expr: &choiceExpr{
				pos: position{line: 1203, col: 18, offset: 34474},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1203, col: 18, offset: 34474},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 1203, col: 36, offset: 34492},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 1205, col: 1, offset: 34499},
			expr: &actionExpr{
				pos: position{line: 1206, col: 5, offset: 34514},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 1206, col: 5, offset: 34514},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 1206, col: 8, offset: 34517},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 1208, col: 1, offset: 34598},
			expr: &choiceExpr{
				pos: position{line: 1209, col: 5, offset: 34617},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1209, col: 5, offset: 34617},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 1209, col: 5, offset: 34617},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1209, col: 5, offset: 34617},
									expr: &seqExpr{
										pos: position{line: 1209, col: 7, offset: 34619},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1209, col: 7, offset: 34619},
												name: "IDGuard",
											},
											&notExpr{
												pos: position{line: 1209, col: 15, offset: 34627},
												expr: &ruleRefExpr{
													pos:  position{line: 1209, col: 16, offset: 34628},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1209, col: 32, offset: 34644},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1209, col: 48, offset: 34660},
									expr: &ruleRefExpr{
										pos:  position{line: 1209, col: 48, offset: 34660},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1210, col: 5, offset: 34712},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 1210, col: 5, offset: 34712},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1211, col: 5, offset: 34751},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 1211, col: 5, offset: 34751},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1211, col: 5, offset: 34751},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1211, col: 10, offset: 34756},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1211, col: 13, offset: 34759},
										name: "IDGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1213, col: 5, offset: 34850},
						run: (*parser).callonIdentifierName19,
						expr: &litMatcher{
							pos:        position{line: 1213, col: 5, offset: 34850},
							val:        "type",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1214, col: 5, offset: 34892},
						run: (*parser).callonIdentifierName21,
						expr: &seqExpr{
							pos: position{line: 1214, col: 5, offset: 34892},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1214, col: 5, offset: 34892},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1214, col: 8, offset: 34895},
										name: "SQLTokenSentinels",
									},
								},
								&andExpr{
									pos: position{line: 1214, col: 26, offset: 34913},
									expr: &seqExpr{
										pos: position{line: 1214, col: 28, offset: 34915},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1214, col: 28, offset: 34915},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1214, col: 31, offset: 34918},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierNames",
			pos:  position{line: 1216, col: 1, offset: 34943},
			expr: &actionExpr{
				pos: position{line: 1217, col: 5, offset: 34963},
				run: (*parser).callonIdentifierNames1,
				expr: &seqExpr{
					pos: position{line: 1217, col: 5, offset: 34963},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1217, col: 5, offset: 34963},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1217, col: 11, offset: 34969},
								name: "IdentifierName",
							},
						},
						&labeledExpr{
							pos:   position{line: 1217, col: 26, offset: 34984},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1217, col: 31, offset: 34989},
								expr: &actionExpr{
									pos: position{line: 1217, col: 32, offset: 34990},
									run: (*parser).callonIdentifierNames7,
									expr: &seqExpr{
										pos: position{line: 1217, col: 32, offset: 34990},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1217, col: 32, offset: 34990},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1217, col: 35, offset: 34993},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1217, col: 39, offset: 34997},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 1217, col: 42, offset: 35000},
												label: "id",
												expr: &ruleRefExpr{
													pos:  position{line: 1217, col: 45, offset: 35003},
													name: "IdentifierName",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IDGuard",
			pos:  position{line: 1221, col: 1, offset: 35118},
			expr: &choiceExpr{
				pos: position{line: 1222, col: 5, offset: 35130},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1222, col: 5, offset: 35130},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1223, col: 5, offset: 35149},
						name: "NullLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1224, col: 5, offset: 35165},
						name: "NaN",
					},
					&ruleRefExpr{
						pos:  position{line: 1225, col: 5, offset: 35173},
						name: "Infinity",
					},
				},
			},
		},
		{
			name: "Time",
			pos:  position{line: 1227, col: 1, offset: 35183},
			expr: &actionExpr{
				pos: position{line: 1228, col: 5, offset: 35192},
				run: (*parser).callonTime1,
				expr: &seqExpr{
					pos: position{line: 1228, col: 5, offset: 35192},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1228, col: 5, offset: 35192},
							name: "FullDate",
						},
						&litMatcher{
							pos:        position{line: 1228, col: 14, offset: 35201},
							val:        "T",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1228, col: 18, offset: 35205},
							name: "FullTime",
						},
					},
				},
			},
		},
		{
			name: "FullDate",
			pos:  position{line: 1232, col: 1, offset: 35325},
			expr: &seqExpr{
				pos: position{line: 1232, col: 12, offset: 35336},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1232, col: 12, offset: 35336},
						name: "D4",
					},
					&litMatcher{
						pos:        position{line: 1232, col: 15, offset: 35339},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1232, col: 19, offset: 35343},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1232, col: 22, offset: 35346},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1232, col: 26, offset: 35350},
						name: "D2",
					},
				},
			},
		},
		{
			name: "D4",
			pos:  position{line: 1234, col: 1, offset: 35354},
			expr: &seqExpr{
				pos: position{line: 1234, col: 6, offset: 35359},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1234, col: 6, offset: 35359},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1234, col: 11, offset: 35364},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1234, col: 16, offset: 35369},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1234, col: 21, offset: 35374},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "D2",
			pos:  position{line: 1235, col: 1, offset: 35380},
			expr: &seqExpr{
				pos: position{line: 1235, col: 6, offset: 35385},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1235, col: 6, offset: 35385},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1235, col: 11, offset: 35390},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "FullTime",
			pos:  position{line: 1237, col: 1, offset: 35397},
			expr: &seqExpr{
				pos: position{line: 1237, col: 12, offset: 35408},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1237, col: 12, offset: 35408},
						name: "PartialTime",
					},
					&ruleRefExpr{
						pos:  position{line: 1237, col: 24, offset: 35420},
						name: "TimeOffset",
					},
				},
			},
		},
		{
			name: "PartialTime",
			pos:  position{line: 1239, col: 1, offset: 35432},
			expr: &seqExpr{
				pos: position{line: 1239, col: 15, offset: 35446},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1239, col: 15, offset: 35446},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1239, col: 18, offset: 35449},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1239, col: 22, offset: 35453},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1239, col: 25, offset: 35456},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1239, col: 29, offset: 35460},
						name: "D2",
					},
					&zeroOrOneExpr{
						pos: position{line: 1239, col: 32, offset: 35463},
						expr: &seqExpr{
							pos: position{line: 1239, col: 33, offset: 35464},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1239, col: 33, offset: 35464},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1239, col: 37, offset: 35468},
									expr: &charClassMatcher{
										pos:        position{line: 1239, col: 37, offset: 35468},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeOffset",
			pos:  position{line: 1241, col: 1, offset: 35478},
			expr: &choiceExpr{
				pos: position{line: 1242, col: 5, offset: 35493},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1242, col: 5, offset: 35493},
						val:        "Z",
						ignoreCase: false,
					},
					&seqExpr{
						pos: position{line: 1243, col: 5, offset: 35501},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 1243, col: 6, offset: 35502},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1243, col: 6, offset: 35502},
										val:        "+",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 1243, col: 12, offset: 35508},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1243, col: 17, offset: 35513},
								name: "D2",
							},
							&litMatcher{
								pos:        position{line: 1243, col: 20, offset: 35516},
								val:        ":",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 1243, col: 24, offset: 35520},
								name: "D2",
							},
							&zeroOrOneExpr{
								pos: position{line: 1243, col: 27, offset: 35523},
								expr: &seqExpr{
									pos: position{line: 1243, col: 28, offset: 35524},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1243, col: 28, offset: 35524},
											val:        ".",
											ignoreCase: false,
										},
										&oneOrMoreExpr{
											pos: position{line: 1243, col: 32, offset: 35528},
											expr: &charClassMatcher{
												pos:        position{line: 1243, col: 32, offset: 35528},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 1245, col: 1, offset: 35538},
			expr: &actionExpr{
				pos: position{line: 1246, col: 5, offset: 35551},
				run: (*parser).callonDuration1,
				expr: &seqExpr{
					pos: position{line: 1246, col: 5, offset: 35551},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1246, col: 5, offset: 35551},
							expr: &litMatcher{
								pos:        position{line: 1246, col: 5, offset: 35551},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1246, col: 10, offset: 35556},
							expr: &seqExpr{
								pos: position{line: 1246, col: 11, offset: 35557},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1246, col: 11, offset: 35557},
										name: "Decimal",
									},
									&ruleRefExpr{
										pos:  position{line: 1246, col: 19, offset: 35565},
										name: "TimeUnit",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Decimal",
			pos:  position{line: 1250, col: 1, offset: 35691},
			expr: &seqExpr{
				pos: position{line: 1250, col: 11, offset: 35701},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1250, col: 11, offset: 35701},
						name: "UInt",
					},
					&zeroOrOneExpr{
						pos: position{line: 1250, col: 16, offset: 35706},
						expr: &seqExpr{
							pos: position{line: 1250, col: 17, offset: 35707},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1250, col: 17, offset: 35707},
									val:        ".",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1250, col: 21, offset: 35711},
									name: "UInt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeUnit",
			pos:  position{line: 1252, col: 1, offset: 35719},
			expr: &choiceExpr{
				pos: position{line: 1253, col: 5, offset: 35732},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1253, col: 5, offset: 35732},
						val:        "ns",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1254, col: 5, offset: 35741},
						val:        "us",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1255, col: 5, offset: 35750},
						val:        "ms",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1256, col: 5, offset: 35759},
						val:        "s",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1257, col: 5, offset: 35767},
						val:        "m",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1258, col: 5, offset: 35775},
						val:        "h",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1259, col: 5, offset: 35783},
						val:        "d",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1260, col: 5, offset: 35791},
						val:        "w",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1261, col: 5, offset: 35799},
						val:        "y",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 1263, col: 1, offset: 35804},
			expr: &actionExpr{
				pos: position{line: 1264, col: 5, offset: 35811},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 1264, col: 5, offset: 35811},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1264, col: 5, offset: 35811},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1264, col: 10, offset: 35816},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1264, col: 14, offset: 35820},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1264, col: 19, offset: 35825},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1264, col: 23, offset: 35829},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1264, col: 28, offset: 35834},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1264, col: 32, offset: 35838},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 1266, col: 1, offset: 35875},
			expr: &actionExpr{
				pos: position{line: 1267, col: 5, offset: 35883},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 1267, col: 5, offset: 35883},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1267, col: 5, offset: 35883},
							expr: &seqExpr{
								pos: position{line: 1267, col: 8, offset: 35886},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1267, col: 8, offset: 35886},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 1267, col: 12, offset: 35890},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 1267, col: 16, offset: 35894},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 1267, col: 20, offset: 35898},
										expr: &choiceExpr{
											pos: position{line: 1267, col: 22, offset: 35900},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1267, col: 22, offset: 35900},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 1267, col: 33, offset: 35911},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1267, col: 39, offset: 35917},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1267, col: 41, offset: 35919},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 1271, col: 1, offset: 36083},
			expr: &choiceExpr{
				pos: position{line: 1272, col: 5, offset: 36101},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1272, col: 5, offset: 36101},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 1272, col: 5, offset: 36101},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1272, col: 5, offset: 36101},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 1272, col: 7, offset: 36103},
										expr: &ruleRefExpr{
											pos:  position{line: 1272, col: 7, offset: 36103},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1272, col: 17, offset: 36113},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1272, col: 19, offset: 36115},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1275, col: 5, offset: 36179},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 1275, col: 5, offset: 36179},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1275, col: 5, offset: 36179},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1275, col: 7, offset: 36181},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1275, col: 11, offset: 36185},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1275, col: 13, offset: 36187},
										expr: &ruleRefExpr{
											pos:  position{line: 1275, col: 13, offset: 36187},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1275, col: 23, offset: 36197},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1275, col: 28, offset: 36202},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1275, col: 30, offset: 36204},
										expr: &ruleRefExpr{
											pos:  position{line: 1275, col: 30, offset: 36204},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1275, col: 40, offset: 36214},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 1275, col: 42, offset: 36216},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1278, col: 5, offset: 36315},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 1278, col: 5, offset: 36315},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1278, col: 5, offset: 36315},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1278, col: 10, offset: 36320},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1278, col: 12, offset: 36322},
										expr: &ruleRefExpr{
											pos:  position{line: 1278, col: 12, offset: 36322},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1278, col: 22, offset: 36332},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1278, col: 24, offset: 36334},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1281, col: 5, offset: 36405},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 1281, col: 5, offset: 36405},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1281, col: 5, offset: 36405},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1281, col: 7, offset: 36407},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1281, col: 11, offset: 36411},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1281, col: 13, offset: 36413},
										expr: &ruleRefExpr{
											pos:  position{line: 1281, col: 13, offset: 36413},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1281, col: 23, offset: 36423},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1284, col: 5, offset: 36491},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 1284, col: 5, offset: 36491},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 1288, col: 1, offset: 36528},
			expr: &choiceExpr{
				pos: position{line: 1289, col: 5, offset: 36540},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1289, col: 5, offset: 36540},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 1290, col: 5, offset: 36547},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 1292, col: 1, offset: 36552},
			expr: &actionExpr{
				pos: position{line: 1292, col: 12, offset: 36563},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 1292, col: 12, offset: 36563},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1292, col: 12, offset: 36563},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1292, col: 16, offset: 36567},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1292, col: 18, offset: 36569},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 1294, col: 1, offset: 36607},
			expr: &actionExpr{
				pos: position{line: 1294, col: 12, offset: 36618},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 1294, col: 12, offset: 36618},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1294, col: 12, offset: 36618},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1294, col: 14, offset: 36620},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 1294, col: 18, offset: 36624},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 1296, col: 1, offset: 36662},
			expr: &actionExpr{
				pos: position{line: 1297, col: 5, offset: 36673},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 1297, col: 5, offset: 36673},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1297, col: 5, offset: 36673},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1297, col: 7, offset: 36675},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 1297, col: 10, offset: 36678},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1297, col: 14, offset: 36682},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1297, col: 16, offset: 36684},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 1301, col: 1, offset: 36757},
			expr: &actionExpr{
				pos: position{line: 1302, col: 5, offset: 36768},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 1302, col: 5, offset: 36768},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1302, col: 5, offset: 36768},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1302, col: 7, offset: 36770},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 1302, col: 11, offset: 36774},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1302, col: 15, offset: 36778},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1302, col: 17, offset: 36780},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 1306, col: 1, offset: 36843},
			expr: &actionExpr{
				pos: position{line: 1307, col: 4, offset: 36851},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 1307, col: 4, offset: 36851},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 1307, col: 6, offset: 36853},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 1309, col: 1, offset: 36893},
			expr: &choiceExpr{
				pos: position{line: 1310, col: 5, offset: 36907},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1310, col: 5, offset: 36907},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 1311, col: 5, offset: 36922},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 1313, col: 1, offset: 36938},
			expr: &actionExpr{
				pos: position{line: 1313, col: 14, offset: 36951},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1313, col: 14, offset: 36951},
					expr: &charClassMatcher{
						pos:        position{line: 1313, col: 14, offset: 36951},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 1315, col: 1, offset: 36990},
			expr: &actionExpr{
				pos: position{line: 1316, col: 5, offset: 37009},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 1316, col: 5, offset: 37009},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1316, col: 5, offset: 37009},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1316, col: 9, offset: 37013},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 1318, col: 1, offset: 37056},
			expr: &choiceExpr{
				pos: position{line: 1319, col: 5, offset: 37072},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1319, col: 5, offset: 37072},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 1319, col: 5, offset: 37072},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1319, col: 5, offset: 37072},
									expr: &litMatcher{
										pos:        position{line: 1319, col: 5, offset: 37072},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1319, col: 10, offset: 37077},
									expr: &charClassMatcher{
										pos:        position{line: 1319, col: 10, offset: 37077},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 1319, col: 17, offset: 37084},
									val:        ".",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1319, col: 21, offset: 37088},
									expr: &charClassMatcher{
										pos:        position{line: 1319, col: 21, offset: 37088},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1319, col: 28, offset: 37095},
									expr: &ruleRefExpr{
										pos:  position{line: 1319, col: 28, offset: 37095},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1322, col: 5, offset: 37154},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 1322, col: 5, offset: 37154},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1322, col: 5, offset: 37154},
									expr: &litMatcher{
										pos:        position{line: 1322, col: 5, offset: 37154},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1322, col: 10, offset: 37159},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1322, col: 14, offset: 37163},
									expr: &charClassMatcher{
										pos:        position{line: 1322, col: 14, offset: 37163},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1322, col: 21, offset: 37170},
									expr: &ruleRefExpr{
										pos:  position{line: 1322, col: 21, offset: 37170},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1325, col: 5, offset: 37229},
						run: (*parser).callonFloatString22,
						expr: &choiceExpr{
							pos: position{line: 1325, col: 7, offset: 37231},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1325, col: 7, offset: 37231},
									name: "NaN",
								},
								&ruleRefExpr{
									pos:  position{line: 1325, col: 13, offset: 37237},
									name: "Infinity",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 1328, col: 1, offset: 37281},
			expr: &seqExpr{
				pos: position{line: 1328, col: 16, offset: 37296},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1328, col: 16, offset: 37296},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 1328, col: 21, offset: 37301},
						expr: &charClassMatcher{
							pos:        position{line: 1328, col: 21, offset: 37301},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1328, col: 27, offset: 37307},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "NaN",
			pos:  position{line: 1330, col: 1, offset: 37319},
			expr: &litMatcher{
				pos:        position{line: 1330, col: 7, offset: 37325},
				val:        "NaN",
				ignoreCase: false,
			},
		},
		{
			name: "Infinity",
			pos:  position{line: 1332, col: 1, offset: 37332},
			expr: &seqExpr{
				pos: position{line: 1332, col: 12, offset: 37343},
				exprs: []interface{}{
					&zeroOrOneExpr{
						pos: position{line: 1332, col: 12, offset: 37343},
						expr: &choiceExpr{
							pos: position{line: 1332, col: 13, offset: 37344},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1332, col: 13, offset: 37344},
									val:        "-",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1332, col: 19, offset: 37350},
									val:        "+",
									ignoreCase: false,
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1332, col: 25, offset: 37356},
						val:        "Inf",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 1334, col: 1, offset: 37363},
			expr: &actionExpr{
				pos: position{line: 1334, col: 7, offset: 37369},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1334, col: 7, offset: 37369},
					expr: &ruleRefExpr{
						pos:  position{line: 1334, col: 7, offset: 37369},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 1336, col: 1, offset: 37411},
			expr: &charClassMatcher{
				pos:        position{line: 1336, col: 12, offset: 37422},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1338, col: 1, offset: 37435},
			expr: &choiceExpr{
				pos: position{line: 1339, col: 5, offset: 37452},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1339, col: 5, offset: 37452},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 1339, col: 5, offset: 37452},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1339, col: 5, offset: 37452},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1339, col: 9, offset: 37456},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1339, col: 11, offset: 37458},
										expr: &ruleRefExpr{
											pos:  position{line: 1339, col: 11, offset: 37458},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1339, col: 29, offset: 37476},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1340, col: 5, offset: 37513},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 1340, col: 5, offset: 37513},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1340, col: 5, offset: 37513},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1340, col: 9, offset: 37517},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1340, col: 11, offset: 37519},
										expr: &ruleRefExpr{
											pos:  position{line: 1340, col: 11, offset: 37519},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1340, col: 29, offset: 37537},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 1342, col: 1, offset: 37571},
			expr: &choiceExpr{
				pos: position{line: 1343, col: 5, offset: 37592},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1343, col: 5, offset: 37592},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1343, col: 5, offset: 37592},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1343, col: 5, offset: 37592},
									expr: &choiceExpr{
										pos: position{line: 1343, col: 7, offset: 37594},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1343, col: 7, offset: 37594},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1343, col: 13, offset: 37600},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1343, col: 26, offset: 37613,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1344, col: 5, offset: 37650},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1344, col: 5, offset: 37650},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1344, col: 5, offset: 37650},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1344, col: 10, offset: 37655},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1344, col: 12, offset: 37657},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 1346, col: 1, offset: 37691},
			expr: &actionExpr{
				pos: position{line: 1347, col: 5, offset: 37703},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 1347, col: 5, offset: 37703},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1347, col: 5, offset: 37703},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1347, col: 10, offset: 37708},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1347, col: 23, offset: 37721},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1347, col: 28, offset: 37726},
								expr: &ruleRefExpr{
									pos:  position{line: 1347, col: 28, offset: 37726},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 1349, col: 1, offset: 37788},
			expr: &choiceExpr{
				pos: position{line: 1350, col: 5, offset: 37805},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1350, col: 5, offset: 37805},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1351, col: 5, offset: 37822},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordChars",
			pos:  position{line: 1353, col: 1, offset: 37834},
			expr: &actionExpr{
				pos: position{line: 1353, col: 16, offset: 37849},
				run: (*parser).callonKeyWordChars1,
				expr: &charClassMatcher{
					pos:        position{line: 1353, col: 16, offset: 37849},
					val:        "[a-zA-Z_.:/%#@~]",
					chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
					ranges:     []rune{'a', 'z', 'A', 'Z'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 1355, col: 1, offset: 37898},
			expr: &choiceExpr{
				pos: position{line: 1356, col: 5, offset: 37914},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1356, col: 5, offset: 37914},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 1357, col: 5, offset: 37931},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 1359, col: 1, offset: 37938},
			expr: &actionExpr{
				pos: position{line: 1359, col: 14, offset: 37951},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 1359, col: 14, offset: 37951},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1359, col: 14, offset: 37951},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1359, col: 19, offset: 37956},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1359, col: 22, offset: 37959},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1359, col: 22, offset: 37959},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1359, col: 38, offset: 37975},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobPattern",
			pos:  position{line: 1361, col: 1, offset: 38011},
			expr: &actionExpr{
				pos: position{line: 1362, col: 5, offset: 38027},
				run: (*parser).callonGlobPattern1,
				expr: &seqExpr{
					pos: position{line: 1362, col: 5, offset: 38027},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1362, col: 5, offset: 38027},
							expr: &ruleRefExpr{
								pos:  position{line: 1362, col: 6, offset: 38028},
								name: "GlobProperStart",
							},
						},
						&andExpr{
							pos: position{line: 1362, col: 22, offset: 38044},
							expr: &ruleRefExpr{
								pos:  position{line: 1362, col: 23, offset: 38045},
								name: "GlobHasStar",
							},
						},
						&labeledExpr{
							pos:   position{line: 1362, col: 35, offset: 38057},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1362, col: 40, offset: 38062},
								name: "GlobStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1362, col: 50, offset: 38072},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1362, col: 55, offset: 38077},
								expr: &ruleRefExpr{
									pos:  position{line: 1362, col: 55, offset: 38077},
									name: "GlobRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobProperStart",
			pos:  position{line: 1366, col: 1, offset: 38146},
			expr: &choiceExpr{
				pos: position{line: 1366, col: 19, offset: 38164},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1366, col: 19, offset: 38164},
						name: "KeyWordStart",
					},
					&seqExpr{
						pos: position{line: 1366, col: 34, offset: 38179},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1366, col: 34, offset: 38179},
								expr: &litMatcher{
									pos:        position{line: 1366, col: 34, offset: 38179},
									val:        "*",
									ignoreCase: false,
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1366, col: 39, offset: 38184},
								name: "KeyWordRest",
							},
						},
					},
				},
			},
		},
		{
			name: "GlobHasStar",
			pos:  position{line: 1367, col: 1, offset: 38196},
			expr: &seqExpr{
				pos: position{line: 1367, col: 15, offset: 38210},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1367, col: 15, offset: 38210},
						expr: &ruleRefExpr{
							pos:  position{line: 1367, col: 15, offset: 38210},
							name: "KeyWordRest",
						},
					},
					&litMatcher{
						pos:        position{line: 1367, col: 28, offset: 38223},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "GlobStart",
			pos:  position{line: 1369, col: 1, offset: 38228},
			expr: &choiceExpr{
				pos: position{line: 1370, col: 5, offset: 38242},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1370, col: 5, offset: 38242},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1371, col: 5, offset: 38259},
						name: "GlobEsc",
					},
					&actionExpr{
						pos: position{line: 1372, col: 5, offset: 38271},
						run: (*parser).callonGlobStart4,
						expr: &litMatcher{
							pos:        position{line: 1372, col: 5, offset: 38271},
							val:        "*",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GlobRest",
			pos:  position{line: 1374, col: 1, offset: 38295},
			expr: &choiceExpr{
				pos: position{line: 1375, col: 5, offset: 38308},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1375, col: 5, offset: 38308},
						name: "GlobStart",
					},
					&charClassMatcher{
						pos:        position{line: 1376, col: 5, offset: 38322},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "GlobEsc",
			pos:  position{line: 1378, col: 1, offset: 38329},
			expr: &actionExpr{
				pos: position{line: 1378, col: 11, offset: 38339},
				run: (*parser).callonGlobEsc1,
				expr: &seqExpr{
					pos: position{line: 1378, col: 11, offset: 38339},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1378, col: 11, offset: 38339},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1378, col: 16, offset: 38344},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1378, col: 19, offset: 38347},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1378, col: 19, offset: 38347},
										name: "GlobEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1378, col: 32, offset: 38360},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobEscape",
			pos:  position{line: 1380, col: 1, offset: 38396},
			expr: &choiceExpr{
				pos: position{line: 1381, col: 5, offset: 38411},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1381, col: 5, offset: 38411},
						run: (*parser).callonGlobEscape2,
						expr: &litMatcher{
							pos:        position{line: 1381, col: 5, offset: 38411},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1382, col: 5, offset: 38439},
						run: (*parser).callonGlobEscape4,
						expr: &litMatcher{
							pos:        position{line: 1382, col: 5, offset: 38439},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1383, col: 5, offset: 38469},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 1386, col: 1, offset: 38476},
			expr: &choiceExpr{
				pos: position{line: 1387, col: 5, offset: 38497},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1387, col: 5, offset: 38497},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1387, col: 5, offset: 38497},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1387, col: 5, offset: 38497},
									expr: &choiceExpr{
										pos: position{line: 1387, col: 7, offset: 38499},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1387, col: 7, offset: 38499},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1387, col: 13, offset: 38505},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1387, col: 26, offset: 38518,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1388, col: 5, offset: 38555},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1388, col: 5, offset: 38555},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1388, col: 5, offset: 38555},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1388, col: 10, offset: 38560},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1388, col: 12, offset: 38562},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 1390, col: 1, offset: 38596},
			expr: &choiceExpr{
				pos: position{line: 1391, col: 5, offset: 38615},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1391, col: 5, offset: 38615},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 1392, col: 5, offset: 38636},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 1394, col: 1, offset: 38651},
			expr: &choiceExpr{
				pos: position{line: 1395, col: 5, offset: 38672},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1395, col: 5, offset: 38672},
						val:        "'",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1396, col: 5, offset: 38680},
						run: (*parser).callonSingleCharEscape3,
						expr: &litMatcher{
							pos:        position{line: 1396, col: 5, offset: 38680},
							val:        "\"",
							ignoreCase: false,
						},
					},
					&litMatcher{
						pos:        position{line: 1397, col: 5, offset: 38720},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1398, col: 5, offset: 38729},
						run: (*parser).callonSingleCharEscape6,
						expr: &litMatcher{
							pos:        position{line: 1398, col: 5, offset: 38729},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1399, col: 5, offset: 38758},
						run: (*parser).callonSingleCharEscape8,
						expr: &litMatcher{
							pos:        position{line: 1399, col: 5, offset: 38758},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1400, col: 5, offset: 38787},
						run: (*parser).callonSingleCharEscape10,
						expr: &litMatcher{
							pos:        position{line: 1400, col: 5, offset: 38787},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1401, col: 5, offset: 38816},
						run: (*parser).callonSingleCharEscape12,
						expr: &litMatcher{
							pos:        position{line: 1401, col: 5, offset: 38816},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1402, col: 5, offset: 38845},
						run: (*parser).callonSingleCharEscape14,
						expr: &litMatcher{
							pos:        position{line: 1402, col: 5, offset: 38845},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1403, col: 5, offset: 38874},
						run: (*parser).callonSingleCharEscape16,
						expr: &litMatcher{
							pos:        position{line: 1403, col: 5, offset: 38874},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 1405, col: 1, offset: 38900},
			expr: &choiceExpr{
				pos: position{line: 1406, col: 5, offset: 38918},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1406, col: 5, offset: 38918},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 1406, col: 5, offset: 38918},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1407, col: 5, offset: 38946},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 1407, col: 5, offset: 38946},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1408, col: 5, offset: 38974},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 1410, col: 1, offset: 38980},
			expr: &choiceExpr{
				pos: position{line: 1411, col: 5, offset: 38998},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1411, col: 5, offset: 38998},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 1411, col: 5, offset: 38998},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1411, col: 5, offset: 38998},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1411, col: 9, offset: 39002},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1411, col: 16, offset: 39009},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1411, col: 16, offset: 39009},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1411, col: 25, offset: 39018},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1411, col: 34, offset: 39027},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1411, col: 43, offset: 39036},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1414, col: 5, offset: 39099},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 1414, col: 5, offset: 39099},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1414, col: 5, offset: 39099},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1414, col: 9, offset: 39103},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1414, col: 13, offset: 39107},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1414, col: 20, offset: 39114},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1414, col: 20, offset: 39114},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 1414, col: 29, offset: 39123},
												expr: &ruleRefExpr{
													pos:  position{line: 1414, col: 29, offset: 39123},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1414, col: 39, offset: 39133},
												expr: &ruleRefExpr{
													pos:  position{line: 1414, col: 39, offset: 39133},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1414, col: 49, offset: 39143},
												expr: &ruleRefExpr{
													pos:  position{line: 1414, col: 49, offset: 39143},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1414, col: 59, offset: 39153},
												expr: &ruleRefExpr{
													pos:  position{line: 1414, col: 59, offset: 39153},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1414, col: 69, offset: 39163},
												expr: &ruleRefExpr{
													pos:  position{line: 1414, col: 69, offset: 39163},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1414, col: 80, offset: 39174},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpPattern",
			pos:  position{line: 1418, col: 1, offset: 39228},
			expr: &actionExpr{
				pos: position{line: 1419, col: 5, offset: 39246},
				run: (*parser).callonRegexpPattern1,
				expr: &seqExpr{
					pos: position{line: 1419, col: 5, offset: 39246},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1419, col: 5, offset: 39246},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1419, col: 9, offset: 39250},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1419, col: 14, offset: 39255},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 1419, col: 25, offset: 39266},
							val:        "/",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1419, col: 29, offset: 39270},
							expr: &ruleRefExpr{
								pos:  position{line: 1419, col: 30, offset: 39271},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 1421, col: 1, offset: 39306},
			expr: &actionExpr{
				pos: position{line: 1422, col: 5, offset: 39321},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1422, col: 5, offset: 39321},
					expr: &choiceExpr{
						pos: position{line: 1422, col: 6, offset: 39322},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 1422, col: 6, offset: 39322},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&seqExpr{
								pos: position{line: 1422, col: 15, offset: 39331},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1422, col: 15, offset: 39331},
										val:        "\\",
										ignoreCase: false,
									},
									&anyMatcher{
										line: 1422, col: 20, offset: 39336,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 1424, col: 1, offset: 39372},
			expr: &charClassMatcher{
				pos:        position{line: 1425, col: 5, offset: 39388},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 1427, col: 1, offset: 39403},
			expr: &oneOrMoreExpr{
				pos: position{line: 1427, col: 6, offset: 39408},
				expr: &ruleRefExpr{
					pos:  position{line: 1427, col: 6, offset: 39408},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1429, col: 1, offset: 39419},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1429, col: 6, offset: 39424},
				expr: &ruleRefExpr{
					pos:  position{line: 1429, col: 6, offset: 39424},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 1431, col: 1, offset: 39435},
			expr: &choiceExpr{
				pos: position{line: 1432, col: 5, offset: 39448},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1432, col: 5, offset: 39448},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 1433, col: 5, offset: 39463},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 1434, col: 5, offset: 39482},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 1436, col: 1, offset: 39491},
			expr: &anyMatcher{
				line: 1437, col: 5, offset: 39511,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 1439, col: 1, offset: 39514},
			expr: &choiceExpr{
				pos: position{line: 1440, col: 5, offset: 39542},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1440, col: 5, offset: 39542},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1441, col: 5, offset: 39551},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1442, col: 5, offset: 39560},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1443, col: 5, offset: 39569},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1444, col: 5, offset: 39577},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1445, col: 5, offset: 39590},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 1447, col: 1, offset: 39600},
			expr: &charClassMatcher{
				pos:        position{line: 1448, col: 5, offset: 39619},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 1454, col: 1, offset: 39949},
			expr: &ruleRefExpr{
				pos:  position{line: 1457, col: 5, offset: 40020},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1459, col: 1, offset: 40039},
			expr: &seqExpr{
				pos: position{line: 1460, col: 5, offset: 40060},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1460, col: 5, offset: 40060},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1460, col: 10, offset: 40065},
						expr: &seqExpr{
							pos: position{line: 1460, col: 11, offset: 40066},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1460, col: 11, offset: 40066},
									expr: &litMatcher{
										pos:        position{line: 1460, col: 12, offset: 40067},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1460, col: 17, offset: 40072},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1460, col: 35, offset: 40090},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1462, col: 1, offset: 40096},
			expr: &seqExpr{
				pos: position{line: 1463, col: 5, offset: 40118},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1463, col: 5, offset: 40118},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1463, col: 10, offset: 40123},
						expr: &seqExpr{
							pos: position{line: 1463, col: 11, offset: 40124},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1463, col: 11, offset: 40124},
									expr: &ruleRefExpr{
										pos:  position{line: 1463, col: 12, offset: 40125},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1463, col: 27, offset: 40140},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1465, col: 1, offset: 40159},
			expr: &seqExpr{
				pos: position{line: 1465, col: 7, offset: 40165},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1465, col: 7, offset: 40165},
						expr: &ruleRefExpr{
							pos:  position{line: 1465, col: 7, offset: 40165},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1465, col: 19, offset: 40177},
						name: "LineTerminator",
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 1467, col: 1, offset: 40193},
			expr: &choiceExpr{
				pos: position{line: 1467, col: 7, offset: 40199},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1467, col: 7, offset: 40199},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 1467, col: 11, offset: 40203},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1469, col: 1, offset: 40208},
			expr: &notExpr{
				pos: position{line: 1469, col: 7, offset: 40214},
				expr: &anyMatcher{
					line: 1469, col: 8, offset: 40215,
				},
			},
		},
		{
			name: "EOKW",
			pos:  position{line: 1471, col: 1, offset: 40218},
			expr: &notExpr{
				pos: position{line: 1471, col: 8, offset: 40225},
				expr: &ruleRefExpr{
					pos:  position{line: 1471, col: 9, offset: 40226},
					name: "KeyWordChars",
				},
			},
		},
	},
}

func (c *current) onstart1(ast interface{}) (interface{}, error) {
	return ast, nil
}

func (p *parser) callonstart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart1(stack["ast"])
}

func (c *current) onSequential1(decls, first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "ops": append([]interface{}{first}, (rest.([]interface{}))...), "decls": decls}, nil

}

func (p *parser) callonSequential1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential1(stack["decls"], stack["first"], stack["rest"])
}

func (c *current) onSequentialTail1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonSequentialTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequentialTail1(stack["p"])
}

func (c *current) onDecls4() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonDecls4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDecls4()
}

func (c *current) onDecl1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonDecl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDecl1(stack["v"])
}

func (c *current) onConstDecl2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ConstDecl", "name": id, "expr": expr}, nil

}

func (p *parser) callonConstDecl2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDecl2(stack["id"], stack["expr"])
}

func (c *current) onConstDecl13(id, typ interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "ConstDecl",

		"name": id,

		"expr": map[string]interface{}{"kind": "TypeValue", "value": map[string]interface{}{"kind": "TypeDef", "name": id, "type": typ}}}, nil

}

func (p *parser) callonConstDecl13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDecl13(stack["id"], stack["typ"])
}

func (c *current) onFuncDecl1(id, params, expr interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "FuncDecl",

		"name": id,

		"params": params,

		"expr": expr}, nil

}

func (p *parser) callonFuncDecl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncDecl1(stack["id"], stack["params"], stack["expr"])
}

func (c *current) onOperation2(ops interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Parallel", "ops": ops}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["ops"])
}

func (c *current) onOperation12(expr, cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": expr, "cases": cases}, nil

}

func (p *parser) callonOperation12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation12(stack["expr"], stack["cases"])
}

func (c *current) onOperation25(cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": nil, "cases": cases}, nil

}

func (p *parser) callonOperation25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation25(stack["cases"])
}

func (c *current) onOperation35(trunks interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": trunks}, nil

}

func (p *parser) callonOperation35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation35(stack["trunks"])
}

func (c *current) onOperation47(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation47(stack["a"])
}

func (c *current) onOperation53(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation53(stack["a"])
}

func (c *current) onOperation63(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Search", "expr": expr}, nil

}

func (p *parser) callonOperation63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation63(stack["expr"])
}

func (c *current) onOperation69(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation69(stack["expr"])
}

func (c *current) onOperation72(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation72(stack["expr"])
}

func (c *current) onOperation75(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation75(stack["expr"])
}

func (c *current) onLeg1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLeg1(stack["s"])
}

func (c *current) onSwitchLeg1(expr, op interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": expr, "op": op}, nil

}

func (p *parser) callonSwitchLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchLeg1(stack["expr"], stack["op"])
}

func (c *current) onCase2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonCase2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase2(stack["expr"])
}

func (c *current) onCase8() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonCase8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase8()
}

func (c *current) onFromLeg1(source, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Trunk", "source": source, "seq": nil}
	if opt != nil {
		m["seq"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonFromLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromLeg1(stack["source"], stack["opt"])
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor13(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor13(stack["expr"])
}

func (c *current) onSearchExpr4(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Term", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonSearchExpr4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr4(stack["v"])
}

func (c *current) onSearchExpr15() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil

}

func (p *parser) callonSearchExpr15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr15()
}

func (c *current) onSearchPredicate2(lhs, op, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": op, "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonSearchPredicate2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPredicate2(stack["lhs"], stack["op"], stack["rhs"])
}

func (c *current) onSearchPredicate12(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchPredicate12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPredicate12(stack["first"], stack["rest"])
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onGlob1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Glob", "pattern": pattern}, nil

}

func (p *parser) callonGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlob1(stack["pattern"])
}

func (c *current) onRegexp1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Regexp", "pattern": pattern}, nil

}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["pattern"])
}

func (c *current) onAggregation2(keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Summarize", "keys": keys, "aggs": nil, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["keys"], stack["limit"])
}

func (c *current) onAggregation10(aggs, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"kind": "Summarize", "keys": nil, "aggs": aggs, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation10(stack["aggs"], stack["keys"], stack["limit"])
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAggAssignment2(lval, agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lval, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment2(stack["lval"], stack["agg"])
}

func (c *current) onAggAssignment11(agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment11(stack["agg"])
}

func (c *current) onAgg1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"kind": "Agg", "name": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonAgg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAgg1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onAggAssignments1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonAggAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssertOp6(e interface{}) (interface{}, error) {
	return []interface{}{e, string(c.text)}, nil
}

func (p *parser) callonAssertOp6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssertOp6(stack["e"])
}

func (c *current) onAssertOp1(expr interface{}) (interface{}, error) {
	// 'assert EXPR' is equivalent to
	// 'yield EXPR ? this : error({message: "assertion failed", "expr": EXPR_text, "on": this}'
	// where EXPR_text is the literal text of EXPR.
	return map[string]interface{}{"kind": "Yield", "exprs": []interface{}{map[string]interface{}{

		"kind": "Conditional",

		"cond": expr.([]interface{})[0],

		"then": map[string]interface{}{"kind": "ID", "name": "this"},

		"else": map[string]interface{}{

			"kind": "Call",

			"name": "error",

			"args": []interface{}{map[string]interface{}{"kind": "RecordExpr", "elems": []interface{}{

				map[string]interface{}{"kind": "Field", "name": "message", "value": map[string]interface{}{

					"kind": "Primitive", "text": "assertion failed", "type": "string"}},

				map[string]interface{}{"kind": "Field", "name": "expr", "value": map[string]interface{}{

					"kind": "Primitive", "text": expr.([]interface{})[1], "type": "string"}},

				map[string]interface{}{"kind": "Field", "name": "on", "value": map[string]interface{}{

					"kind": "ID", "name": "this"}}}}},

			"where": nil}}}}, nil

}

func (p *parser) callonAssertOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssertOp1(stack["expr"])
}

func (c *current) onSortOp10(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortOp10(stack["l"])
}

func (c *current) onSortOp1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var op = map[string]interface{}{"kind": "Sort", "args": list, "order": "asc", "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		op["order"] = "desc"
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			op["nullsfirst"] = true
		}
	}
	return op, nil

}

func (p *parser) callonSortOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortOp1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopOp8(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopOp8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp8(stack["n"])
}

func (c *current) onTopOp20(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopOp20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp20(stack["f"])
}

func (c *current) onTopOp1(limit, flush, fields interface{}) (interface{}, error) {
	var op = map[string]interface{}{"kind": "Top", "limit": 0, "args": nil, "flush": false}
	if limit != nil {
		op["limit"] = limit
	}
	if fields != nil {
		op["args"] = fields
	}
	if flush != nil {
		op["flush"] = true
	}
	return op, nil

}

func (p *parser) callonTopOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cut", "args": args}, nil

}

func (p *parser) callonCutOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutOp1(stack["args"])
}

func (c *current) onDropOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Drop", "args": args}, nil

}

func (p *parser) callonDropOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropOp1(stack["args"])
}

func (c *current) onHeadOp2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": count}, nil
}

func (p *parser) callonHeadOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOp2(stack["count"])
}

func (c *current) onHeadOp10() (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": map[string]interface{}{"kind": "Primitive", "type": "int64", "text": "1"}}, nil
}

func (p *parser) callonHeadOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOp10()
}

func (c *current) onTailOp2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": count}, nil
}

func (p *parser) callonTailOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailOp2(stack["count"])
}

func (c *current) onTailOp10() (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": map[string]interface{}{"kind": "Primitive", "type": "int64", "text": "1"}}, nil
}

func (p *parser) callonTailOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailOp10()
}

func (c *current) onWhereOp1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Where", "expr": expr}, nil

}

func (p *parser) callonWhereOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereOp1(stack["expr"])
}

func (c *current) onUniqOp2() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": true}, nil

}

func (p *parser) callonUniqOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqOp2()
}

func (c *current) onUniqOp7() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": false}, nil

}

func (p *parser) callonUniqOp7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqOp7()
}

func (c *current) onPutOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Put", "args": args}, nil

}

func (p *parser) callonPutOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutOp1(stack["args"])
}

func (c *current) onRenameOp9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameOp9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameOp9(stack["cl"])
}

func (c *current) onRenameOp1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Rename", "args": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameOp1(stack["first"], stack["rest"])
}

func (c *current) onFuseOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Fuse"}, nil

}

func (p *parser) callonFuseOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseOp1()
}

func (c *current) onShapeOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Shape"}, nil

}

func (p *parser) callonShapeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShapeOp1()
}

func (c *current) onJoinOp1(style, rightInput, key, optKey, optArgs interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Join", "style": style, "right_input": rightInput, "left_key": key, "right_key": key, "args": nil}
	if optKey != nil {
		m["right_key"] = optKey.([]interface{})[3]
	}
	if optArgs != nil {
		m["args"] = optArgs.([]interface{})[1]
	}
	return m, nil

}

func (p *parser) callonJoinOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinOp1(stack["style"], stack["rightInput"], stack["key"], stack["optKey"], stack["optArgs"])
}

func (c *current) onJoinStyle2() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle2()
}

func (c *current) onJoinStyle6() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle6()
}

func (c *current) onJoinStyle10() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle10()
}

func (c *current) onJoinStyle14() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonJoinStyle14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle14()
}

func (c *current) onJoinStyle18() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle18()
}

func (c *current) onJoinRightInput2(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonJoinRightInput2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinRightInput2(stack["s"])
}

func (c *current) onJoinRightInput12() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonJoinRightInput12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinRightInput12()
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onSampleOp1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "decls": []interface{}{}, "ops": []interface{}{

		map[string]interface{}{"kind": "Summarize",

			"keys": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "shape"},

				"rhs": map[string]interface{}{"kind": "Call", "name": "typeof",

					"args": []interface{}{e},

					"where": nil}}},

			"aggs": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "sample"},

				"rhs": map[string]interface{}{"kind": "Agg",

					"name": "any",

					"expr": e,

					"where": nil}}},

			"limit": 0},

		map[string]interface{}{"kind": "Yield",

			"exprs": []interface{}{

				map[string]interface{}{"kind": "ID", "name": "sample"}}}}}, nil

}

func (p *parser) callonSampleOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleOp1(stack["e"])
}

func (c *current) onOpAssignment1(a interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpAssignment", "assignments": a}, nil

}

func (p *parser) callonOpAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpAssignment1(stack["a"])
}

func (c *current) onSampleExpr2(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonSampleExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr2(stack["lval"])
}

func (c *current) onSampleExpr7() (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": "this"}, nil
}

func (p *parser) callonSampleExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr7()
}

func (c *current) onFromOp1(source interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": []interface{}{map[string]interface{}{"kind": "Trunk", "source": source}}}, nil

}

func (p *parser) callonFromOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromOp1(stack["source"])
}

func (c *current) onFile1(path, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "File", "path": path, "format": format, "layout": layout}, nil

}

func (p *parser) callonFile1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile1(stack["path"], stack["format"], stack["layout"])
}

func (c *current) onFrom1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonFrom1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrom1(stack["body"])
}

func (c *current) onPool1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonPool1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPool1(stack["body"])
}

func (c *current) onPoolBody1(spec, at interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pool", "spec": spec, "at": at}, nil

}

func (p *parser) callonPoolBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBody1(stack["spec"], stack["at"])
}

func (c *current) onGet1(url, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "HTTP", "url": url, "format": format, "layout": layout}, nil

}

func (p *parser) callonGet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGet1(stack["url"], stack["format"], stack["layout"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onPath2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonPath2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath2(stack["v"])
}

func (c *current) onPath5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPath5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath5()
}

func (c *current) onPoolAt1(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonPoolAt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolAt1(stack["id"])
}

func (c *current) onKSUID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKSUID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKSUID1()
}

func (c *current) onPoolSpec2(pool, commit, meta, tap interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": pool, "commit": commit, "meta": meta, "tap": tap}, nil

}

func (p *parser) callonPoolSpec2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec2(stack["pool"], stack["commit"], stack["meta"], stack["tap"])
}

func (c *current) onPoolSpec14(meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": nil, "commit": nil, "meta": meta}, nil

}

func (p *parser) callonPoolSpec14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec14(stack["meta"])
}

func (c *current) onPoolCommit1(commit interface{}) (interface{}, error) {
	return commit, nil
}

func (p *parser) callonPoolCommit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolCommit1(stack["commit"])
}

func (c *current) onPoolMeta1(meta interface{}) (interface{}, error) {
	return meta, nil
}

func (p *parser) callonPoolMeta1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolMeta1(stack["meta"])
}

func (c *current) onPoolName3() (interface{}, error) {
	return map[string]interface{}{"kind": "Glob", "pattern": "*"}, nil
}

func (p *parser) callonPoolName3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName3()
}

func (c *current) onPoolName9(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "String", "text": name}, nil
}

func (p *parser) callonPoolName9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName9(stack["name"])
}

func (c *current) onPoolIdentifier1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPoolIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolIdentifier1()
}

func (c *current) onLayoutArg1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Layout", "keys": keys, "order": order}, nil

}

func (p *parser) callonLayoutArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLayoutArg1(stack["keys"], stack["order"])
}

func (c *current) onTapArg2() (interface{}, error) {
	return true, nil
}

func (p *parser) callonTapArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTapArg2()
}

func (c *current) onTapArg6() (interface{}, error) {
	return false, nil
}

func (p *parser) callonTapArg6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTapArg6()
}

func (c *current) onFormatArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonFormatArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArg1(stack["val"])
}

func (c *current) onOrderSuffix2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix2()
}

func (c *current) onOrderSuffix4() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderSuffix4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix4()
}

func (c *current) onOrderSuffix6() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix6()
}

func (c *current) onPassOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Pass"}, nil

}

func (p *parser) callonPassOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassOp1()
}

func (c *current) onExplodeOp1(args, typ, as interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Explode", "args": args, "as": as, "type": typ}, nil

}

func (p *parser) callonExplodeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplodeOp1(stack["args"], stack["typ"], stack["as"])
}

func (c *current) onMergeOp1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Merge", "expr": expr}, nil

}

func (p *parser) callonMergeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMergeOp1(stack["expr"])
}

func (c *current) onOverOp1(exprs, locals, scope interface{}) (interface{}, error) {
	var over = map[string]interface{}{"kind": "Over", "exprs": exprs, "scope": scope}
	if locals != nil {
		return map[string]interface{}{"kind": "Let", "locals": locals, "over": over}, nil
	}
	return over, nil

}

func (p *parser) callonOverOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverOp1(stack["exprs"], stack["locals"], stack["scope"])
}

func (c *current) onScope1(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonScope1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope1(stack["seq"])
}

func (c *current) onLocals10(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonLocals10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocals10(stack["a"])
}

func (c *current) onLocals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLocals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocals1(stack["first"], stack["rest"])
}

func (c *current) onLocalsAssignment1(name, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"name": name, "expr": map[string]interface{}{"kind": "ID", "name": name}}
	if opt != nil {
		m["expr"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonLocalsAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocalsAssignment1(stack["name"], stack["opt"])
}

func (c *current) onYieldOp1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Yield", "exprs": exprs}, nil

}

func (p *parser) callonYieldOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYieldOp1(stack["exprs"])
}

func (c *current) onTypeArg1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeArg1(stack["typ"])
}

func (c *current) onAsArg1(lhs interface{}) (interface{}, error) {
	return lhs, nil
}

func (p *parser) callonAsArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsArg1(stack["lhs"])
}

func (c *current) onLvals7(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonLvals7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals7(stack["lval"])
}

func (c *current) onLvals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLvals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals1(stack["first"], stack["rest"])
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignments7(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments7(stack["a"])
}

func (c *current) onAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr1(cond, opt interface{}) (interface{}, error) {
	if opt != nil {
		var Then = opt.([]interface{})[3]
		var Else = opt.([]interface{})[7]
		return map[string]interface{}{"kind": "Conditional", "cond": cond, "then": Then, "else": Else}, nil
	}
	return cond, nil

}

func (p *parser) callonConditionalExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr1(stack["cond"], stack["opt"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onComparisonExpr15() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparisonExpr15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr15()
}

func (c *current) onComparisonExpr1(lhs, opAndRHS interface{}) (interface{}, error) {
	if opAndRHS == nil {
		return lhs, nil
	}
	var op = opAndRHS.([]interface{})[1]
	var rhs = opAndRHS.([]interface{})[3]
	return map[string]interface{}{"kind": "BinaryExpr", "op": op, "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonComparisonExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr1(stack["lhs"], stack["opAndRHS"])
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onNegationExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "-", "operand": e}, nil

}

func (p *parser) callonNegationExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNegationExpr2(stack["e"])
}

func (c *current) onFuncExpr2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr2(stack["first"], stack["rest"])
}

func (c *current) onFuncExpr9(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr9(stack["first"], stack["rest"])
}

func (c *current) onCast1(typ, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": expr, "type": typ}, nil

}

func (p *parser) callonCast1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCast1(stack["typ"], stack["expr"])
}

func (c *current) onFunction3(arg0Text, arg1, where interface{}) (interface{}, error) {
	var arg0 = map[string]interface{}{"kind": "Primitive", "type": "string", "text": arg0Text}
	return map[string]interface{}{"kind": "Call", "name": "regexp", "args": []interface{}{arg0, arg1}, "where": where}, nil

}

func (p *parser) callonFunction3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction3(stack["arg0Text"], stack["arg1"], stack["where"])
}

func (c *current) onFunction21(arg0, arg1Text, arg2, where interface{}) (interface{}, error) {
	var arg1 = map[string]interface{}{"kind": "Primitive", "type": "string", "text": arg1Text}
	return map[string]interface{}{"kind": "Call", "name": "regexp_replace", "args": []interface{}{arg0, arg1, arg2}, "where": where}, nil

}

func (p *parser) callonFunction21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction21(stack["arg0"], stack["arg1Text"], stack["arg2"], stack["where"])
}

func (c *current) onFunction44(fn, args, where interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": fn, "args": args, "where": where}, nil

}

func (p *parser) callonFunction44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction44(stack["fn"], stack["args"], stack["where"])
}

func (c *current) onFunctionArgs2(o interface{}) (interface{}, error) {
	return []interface{}{o}, nil
}

func (p *parser) callonFunctionArgs2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunctionArgs2(stack["o"])
}

func (c *current) onGrep1(pattern, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Grep", "pattern": pattern, "expr": map[string]interface{}{"kind": "ID", "name": "this"}}
	if opt != nil {
		m["expr"] = opt.([]interface{})[2]
	}
	return m, nil

}

func (p *parser) callonGrep1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrep1(stack["pattern"], stack["opt"])
}

func (c *current) onPattern4(s interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "String", "text": s}, nil

}

func (p *parser) callonPattern4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPattern4(stack["s"])
}

func (c *current) onOptionalExprs3() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonOptionalExprs3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalExprs3()
}

func (c *current) onExprs7(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonExprs7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs7(stack["e"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr1(stack["first"], stack["rest"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref14(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": nil, "rhs": to}}, nil

}

func (p *parser) callonDeref14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref14(stack["to"])
}

func (c *current) onDeref23(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref23(stack["expr"])
}

func (c *current) onDeref29(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref29(stack["id"])
}

func (c *current) onPrimary7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary7(stack["expr"])
}

func (c *current) onPrimary15(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary15(stack["expr"])
}

func (c *current) onOverExpr1(exprs, locals, scope interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OverExpr", "locals": locals, "exprs": exprs, "scope": scope}, nil

}

func (p *parser) callonOverExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverExpr1(stack["exprs"], stack["locals"], stack["scope"])
}

func (c *current) onRecord1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RecordExpr", "elems": elems}, nil

}

func (p *parser) callonRecord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecord1(stack["elems"])
}

func (c *current) onRecordElems2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonRecordElems2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems2(stack["first"], stack["rest"])
}

func (c *current) onRecordElems9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonRecordElems9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems9()
}

func (c *current) onRecordElemTail1(elem interface{}) (interface{}, error) {
	return elem, nil
}

func (p *parser) callonRecordElemTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElemTail1(stack["elem"])
}

func (c *current) onSpread1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Spread", "expr": expr}, nil

}

func (p *parser) callonSpread1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpread1(stack["expr"])
}

func (c *current) onField1(name, value interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Field", "name": name, "value": value}, nil

}

func (p *parser) callonField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField1(stack["name"], stack["value"])
}

func (c *current) onArray1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ArrayExpr", "elems": elems}, nil

}

func (p *parser) callonArray1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArray1(stack["elems"])
}

func (c *current) onSet1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SetExpr", "elems": elems}, nil

}

func (p *parser) callonSet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSet1(stack["elems"])
}

func (c *current) onVectorElems8(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonVectorElems8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems8(stack["e"])
}

func (c *current) onVectorElems2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonVectorElems2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems2(stack["first"], stack["rest"])
}

func (c *current) onVectorElems15() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonVectorElems15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems15()
}

func (c *current) onVectorElem3(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "VectorValue", "expr": e}, nil
}

func (p *parser) callonVectorElem3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElem3(stack["e"])
}

func (c *current) onMap1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "MapExpr", "entries": exprs}, nil

}

func (p *parser) callonMap1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMap1(stack["exprs"])
}

func (c *current) onEntries2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonEntries2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries2(stack["first"], stack["rest"])
}

func (c *current) onEntries9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonEntries9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries9()
}

func (c *current) onEntryTail1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonEntryTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntryTail1(stack["e"])
}

func (c *current) onEntry1(key, value interface{}) (interface{}, error) {
	return map[string]interface{}{"key": key, "value": value}, nil

}

func (p *parser) callonEntry1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntry1(stack["key"], stack["value"])
}

func (c *current) onSQLOp1(selection, from, joins, where, groupby, having, orderby, limit interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "SQLExpr",

		"select": selection,

		"from": from,

		"joins": joins,

		"where": where,

		"group_by": groupby,

		"having": having,

		"order_by": orderby,

		"limit": limit}, nil

}

func (p *parser) callonSQLOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOp1(stack["selection"], stack["from"], stack["joins"], stack["where"], stack["groupby"], stack["having"], stack["orderby"], stack["limit"])
}

func (c *current) onSQLSelect2() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLSelect2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect2()
}

func (c *current) onSQLSelect7(assignments interface{}) (interface{}, error) {
	return assignments, nil
}

func (p *parser) callonSQLSelect7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect7(stack["assignments"])
}

func (c *current) onSQLAssignment1(rhs, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": rhs}
	if opt != nil {
		m["lhs"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonSQLAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment1(stack["rhs"], stack["opt"])
}

func (c *current) onSQLAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments7(stack["expr"])
}

func (c *current) onSQLAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSQLFrom2(table, alias interface{}) (interface{}, error) {
	return map[string]interface{}{"table": table, "alias": alias}, nil

}

func (p *parser) callonSQLFrom2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom2(stack["table"], stack["alias"])
}

func (c *current) onSQLFrom12() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLFrom12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom12()
}

func (c *current) onSQLAlias2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias2(stack["id"])
}

func (c *current) onSQLAlias9(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias9(stack["id"])
}

func (c *current) onSQLJoins7(join interface{}) (interface{}, error) {
	return join, nil
}

func (p *parser) callonSQLJoins7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins7(stack["join"])
}

func (c *current) onSQLJoins1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLJoins1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins1(stack["first"], stack["rest"])
}

func (c *current) onSQLJoin1(style, table, alias, leftKey, rightKey interface{}) (interface{}, error) {
	return map[string]interface{}{

		"table": table,

		"style": style,

		"left_key": leftKey,

		"right_key": rightKey,

		"alias": alias}, nil

}

func (p *parser) callonSQLJoin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoin1(stack["style"], stack["table"], stack["alias"], stack["leftKey"], stack["rightKey"])
}

func (c *current) onSQLJoinStyle2(style interface{}) (interface{}, error) {
	return style, nil
}

func (p *parser) callonSQLJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle2(stack["style"])
}

func (c *current) onSQLJoinStyle11() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonSQLJoinStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle11()
}

func (c *current) onSQLWhere1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLWhere1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLWhere1(stack["expr"])
}

func (c *current) onSQLGroupBy1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonSQLGroupBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLGroupBy1(stack["columns"])
}

func (c *current) onSQLHaving1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLHaving1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLHaving1(stack["expr"])
}

func (c *current) onSQLOrderBy1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SQLOrderBy", "keys": keys, "order": order}, nil

}

func (p *parser) callonSQLOrderBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrderBy1(stack["keys"], stack["order"])
}

func (c *current) onSQLOrder2(dir interface{}) (interface{}, error) {
	return dir, nil
}

func (p *parser) callonSQLOrder2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder2(stack["dir"])
}

func (c *current) onSQLOrder9() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonSQLOrder9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder9()
}

func (c *current) onSQLLimit2(count interface{}) (interface{}, error) {
	return count, nil
}

func (p *parser) callonSQLLimit2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit2(stack["count"])
}

func (c *current) onSQLLimit9() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonSQLLimit9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit9()
}

func (c *current) onSELECT1() (interface{}, error) {
	return "select", nil
}

func (p *parser) callonSELECT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSELECT1()
}

func (c *current) onAS1() (interface{}, error) {
	return "as", nil
}

func (p *parser) callonAS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAS1()
}

func (c *current) onFROM1() (interface{}, error) {
	return "from", nil
}

func (p *parser) callonFROM1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFROM1()
}

func (c *current) onJOIN1() (interface{}, error) {
	return "join", nil
}

func (p *parser) callonJOIN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJOIN1()
}

func (c *current) onWHERE1() (interface{}, error) {
	return "where", nil
}

func (p *parser) callonWHERE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWHERE1()
}

func (c *current) onGROUP1() (interface{}, error) {
	return "group", nil
}

func (p *parser) callonGROUP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGROUP1()
}

func (c *current) onBY1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonBY1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBY1()
}

func (c *current) onHAVING1() (interface{}, error) {
	return "having", nil
}

func (p *parser) callonHAVING1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHAVING1()
}

func (c *current) onORDER1() (interface{}, error) {
	return "order", nil
}

func (p *parser) callonORDER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onORDER1()
}

func (c *current) onON1() (interface{}, error) {
	return "on", nil
}

func (p *parser) callonON1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onON1()
}

func (c *current) onLIMIT1() (interface{}, error) {
	return "limit", nil
}

func (p *parser) callonLIMIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIMIT1()
}

func (c *current) onASC1() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonASC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onASC1()
}

func (c *current) onDESC1() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonDESC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDESC1()
}

func (c *current) onANTI1() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonANTI1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onANTI1()
}

func (c *current) onLEFT1() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonLEFT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLEFT1()
}

func (c *current) onRIGHT1() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonRIGHT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRIGHT1()
}

func (c *current) onINNER1() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonINNER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINNER1()
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "float64", "text": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "int64", "text": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "null", "text": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onBytesLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bytes", "text": string(c.text)}, nil

}

func (p *parser) callonBytesLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBytesLiteral1()
}

func (c *current) onTypeLiteral1(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonTypeLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeLiteral1(stack["typ"])
}

func (c *current) onCastType3(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonCastType3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCastType3(stack["typ"])
}

func (c *current) onAmbiguousType2(name interface{}) (interface{}, error) {
	return name, nil
}

func (p *parser) callonAmbiguousType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType2(stack["name"])
}

func (c *current) onAmbiguousType8(name, opt interface{}) (interface{}, error) {
	if opt != nil {
		return map[string]interface{}{"kind": "TypeDef", "name": name, "type": opt.([]interface{})[3]}, nil
	}
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType8(stack["name"], stack["opt"])
}

func (c *current) onAmbiguousType19(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType19(stack["name"])
}

func (c *current) onAmbiguousType22(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonAmbiguousType22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType22(stack["u"])
}

func (c *current) onTypeUnion1(types interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeUnion", "types": types}, nil

}

func (p *parser) callonTypeUnion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeUnion1(stack["types"])
}

func (c *current) onTypeList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeList1(stack["first"], stack["rest"])
}

func (c *current) onTypeListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeListTail1(stack["typ"])
}

func (c *current) onComplexType2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType2(stack["fields"])
}

func (c *current) onComplexType10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexType10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType10(stack["typ"])
}

func (c *current) onComplexType18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexType18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType18(stack["typ"])
}

func (c *current) onComplexType26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexType26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType26(stack["keyType"], stack["valType"])
}

func (c *current) onTemplateLiteral1(v interface{}) (interface{}, error) {
	if len(v.([]interface{})) == 0 {
		return map[string]interface{}{"kind": "Primitive", "type": "string", "text": ""}, nil
	}
	return makeTemplateExprChain(v), nil

}

func (p *parser) callonTemplateLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteral1(stack["v"])
}

func (c *current) onTemplateLiteralParts2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts2(stack["v"])
}

func (c *current) onTemplateLiteralParts9(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts9(stack["v"])
}

func (c *current) onTemplateDoubleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateDoubleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedPart3(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar2(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar7(stack["v"])
}

func (c *current) onTemplateSingleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateSingleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedPart3(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar2(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar7(stack["v"])
}

func (c *current) onTemplateExpr1(e interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "Cast",

		"expr": e,

		"type": map[string]interface{}{

			"kind": "TypeValue",

			"value": map[string]interface{}{"kind": "TypePrimitive", "name": "string"}}}, nil

}

func (p *parser) callonTemplateExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateExpr1(stack["e"])
}

func (c *current) onPrimitiveType1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveType1()
}

func (c *current) onTypeFieldList2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList2(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldList9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonTypeFieldList9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList9()
}

func (c *current) onTypeFieldListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTail1(stack["typ"])
}

func (c *current) onTypeField1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeField1(stack["name"], stack["typ"])
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return "in", nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onIdentifierName19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName19()
}

func (c *current) onIdentifierName21(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName21(stack["id"])
}

func (c *current) onIdentifierNames7(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierNames7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierNames7(stack["id"])
}

func (c *current) onIdentifierNames1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonIdentifierNames1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierNames1(stack["first"], stack["rest"])
}

func (c *current) onTime1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "time", "text": string(c.text)}, nil

}

func (p *parser) callonTime1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTime1()
}

func (c *current) onDuration1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "duration", "text": string(c.text)}, nil

}

func (p *parser) callonDuration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDuration1()
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onFloatString22() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFloatString22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString22()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordChars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordChars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordChars1()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onGlobPattern1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil

}

func (p *parser) callonGlobPattern1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobPattern1(stack["head"], stack["tail"])
}

func (c *current) onGlobStart4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonGlobStart4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobStart4()
}

func (c *current) onGlobEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonGlobEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEsc1(stack["s"])
}

func (c *current) onGlobEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonGlobEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape2()
}

func (c *current) onGlobEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonGlobEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape4()
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onSingleCharEscape3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleCharEscape3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape3()
}

func (c *current) onSingleCharEscape6() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape6()
}

func (c *current) onSingleCharEscape8() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape8()
}

func (c *current) onSingleCharEscape10() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape10()
}

func (c *current) onSingleCharEscape12() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape12()
}

func (c *current) onSingleCharEscape14() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape14()
}

func (c *current) onSingleCharEscape16() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape16()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexpPattern1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexpPattern1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpPattern1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
