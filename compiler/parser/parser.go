// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/brimdata/zed/reglob"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 7, col: 1, offset: 26},
			expr: &actionExpr{
				pos: position{line: 7, col: 9, offset: 34},
				run: (*parser).callonstart1,
				expr: &seqExpr{
					pos: position{line: 7, col: 9, offset: 34},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 7, col: 9, offset: 34},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 7, col: 12, offset: 37},
							label: "ast",
							expr: &ruleRefExpr{
								pos:  position{line: 7, col: 16, offset: 41},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 27, offset: 52},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 30, offset: 55},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Sequential",
			pos:  position{line: 9, col: 1, offset: 80},
			expr: &choiceExpr{
				pos: position{line: 10, col: 5, offset: 95},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 10, col: 5, offset: 95},
						run: (*parser).callonSequential2,
						expr: &seqExpr{
							pos: position{line: 10, col: 5, offset: 95},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 10, col: 5, offset: 95},
									label: "consts",
									expr: &ruleRefExpr{
										pos:  position{line: 10, col: 12, offset: 102},
										name: "Consts",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 10, col: 19, offset: 109},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 10, col: 22, offset: 112},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 10, col: 28, offset: 118},
										name: "Operation",
									},
								},
								&labeledExpr{
									pos:   position{line: 10, col: 38, offset: 128},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 10, col: 43, offset: 133},
										expr: &ruleRefExpr{
											pos:  position{line: 10, col: 43, offset: 133},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 13, col: 5, offset: 308},
						run: (*parser).callonSequential12,
						expr: &seqExpr{
							pos: position{line: 13, col: 5, offset: 308},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 13, col: 5, offset: 308},
									label: "consts",
									expr: &ruleRefExpr{
										pos:  position{line: 13, col: 12, offset: 315},
										name: "Consts",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 13, col: 19, offset: 322},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 13, col: 22, offset: 325},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 13, col: 25, offset: 328},
										name: "Operation",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SequentialTail",
			pos:  position{line: 17, col: 1, offset: 455},
			expr: &actionExpr{
				pos: position{line: 17, col: 18, offset: 472},
				run: (*parser).callonSequentialTail1,
				expr: &seqExpr{
					pos: position{line: 17, col: 18, offset: 472},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 17, col: 18, offset: 472},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 21, offset: 475},
							name: "Pipe",
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 26, offset: 480},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 17, col: 29, offset: 483},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 31, offset: 485},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Consts",
			pos:  position{line: 19, col: 1, offset: 514},
			expr: &choiceExpr{
				pos: position{line: 20, col: 5, offset: 525},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 20, col: 5, offset: 525},
						expr: &ruleRefExpr{
							pos:  position{line: 20, col: 5, offset: 525},
							name: "Const",
						},
					},
					&actionExpr{
						pos: position{line: 21, col: 5, offset: 536},
						run: (*parser).callonConsts4,
						expr: &ruleRefExpr{
							pos:  position{line: 21, col: 5, offset: 536},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Const",
			pos:  position{line: 23, col: 1, offset: 572},
			expr: &actionExpr{
				pos: position{line: 23, col: 9, offset: 580},
				run: (*parser).callonConst1,
				expr: &seqExpr{
					pos: position{line: 23, col: 9, offset: 580},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 23, col: 9, offset: 580},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 23, col: 12, offset: 583},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 23, col: 14, offset: 585},
								name: "ConstDef",
							},
						},
					},
				},
			},
		},
		{
			name: "ConstDef",
			pos:  position{line: 25, col: 1, offset: 613},
			expr: &choiceExpr{
				pos: position{line: 26, col: 5, offset: 626},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 26, col: 5, offset: 626},
						run: (*parser).callonConstDef2,
						expr: &seqExpr{
							pos: position{line: 26, col: 5, offset: 626},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 26, col: 5, offset: 626},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 26, col: 13, offset: 634},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 26, col: 15, offset: 636},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 26, col: 18, offset: 639},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 26, col: 33, offset: 654},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 26, col: 36, offset: 657},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 26, col: 40, offset: 661},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 26, col: 43, offset: 664},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 26, col: 48, offset: 669},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 26, col: 53, offset: 674},
									name: "__",
								},
								&zeroOrOneExpr{
									pos: position{line: 26, col: 56, offset: 677},
									expr: &litMatcher{
										pos:        position{line: 26, col: 56, offset: 677},
										val:        ";",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 29, col: 5, offset: 759},
						run: (*parser).callonConstDef16,
						expr: &seqExpr{
							pos: position{line: 29, col: 5, offset: 759},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 29, col: 5, offset: 759},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 29, col: 12, offset: 766},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 29, col: 14, offset: 768},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 29, col: 17, offset: 771},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 29, col: 32, offset: 786},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 29, col: 35, offset: 789},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 29, col: 39, offset: 793},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 29, col: 42, offset: 796},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 29, col: 46, offset: 800},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 29, col: 51, offset: 805},
									name: "__",
								},
								&zeroOrOneExpr{
									pos: position{line: 29, col: 54, offset: 808},
									expr: &litMatcher{
										pos:        position{line: 29, col: 54, offset: 808},
										val:        ";",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Parallel",
			pos:  position{line: 39, col: 1, offset: 1032},
			expr: &actionExpr{
				pos: position{line: 40, col: 5, offset: 1045},
				run: (*parser).callonParallel1,
				expr: &seqExpr{
					pos: position{line: 40, col: 5, offset: 1045},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 40, col: 5, offset: 1045},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 40, col: 8, offset: 1048},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 40, col: 13, offset: 1053},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 40, col: 16, offset: 1056},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 40, col: 18, offset: 1058},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 40, col: 29, offset: 1069},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 40, col: 32, offset: 1072},
							val:        ";",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromTrunk",
			pos:  position{line: 42, col: 1, offset: 1095},
			expr: &actionExpr{
				pos: position{line: 43, col: 5, offset: 1109},
				run: (*parser).callonFromTrunk1,
				expr: &seqExpr{
					pos: position{line: 43, col: 5, offset: 1109},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 43, col: 5, offset: 1109},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 43, col: 8, offset: 1112},
							label: "source",
							expr: &ruleRefExpr{
								pos:  position{line: 43, col: 15, offset: 1119},
								name: "FromSource",
							},
						},
						&labeledExpr{
							pos:   position{line: 43, col: 27, offset: 1131},
							label: "seq",
							expr: &zeroOrOneExpr{
								pos: position{line: 43, col: 31, offset: 1135},
								expr: &ruleRefExpr{
									pos:  position{line: 43, col: 31, offset: 1135},
									name: "FromTrunkSeq",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 43, col: 45, offset: 1149},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 43, col: 48, offset: 1152},
							val:        ";",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromTrunkSeq",
			pos:  position{line: 47, col: 1, offset: 1253},
			expr: &actionExpr{
				pos: position{line: 48, col: 5, offset: 1270},
				run: (*parser).callonFromTrunkSeq1,
				expr: &seqExpr{
					pos: position{line: 48, col: 5, offset: 1270},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 48, col: 5, offset: 1270},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 48, col: 8, offset: 1273},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 48, col: 13, offset: 1278},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 48, col: 16, offset: 1281},
							label: "seq",
							expr: &ruleRefExpr{
								pos:  position{line: 48, col: 20, offset: 1285},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "FromSource",
			pos:  position{line: 50, col: 1, offset: 1317},
			expr: &choiceExpr{
				pos: position{line: 51, col: 5, offset: 1332},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 51, col: 5, offset: 1332},
						name: "FileProc",
					},
					&ruleRefExpr{
						pos:  position{line: 52, col: 5, offset: 1345},
						name: "HTTPProc",
					},
					&ruleRefExpr{
						pos:  position{line: 53, col: 5, offset: 1358},
						name: "PassProc",
					},
					&ruleRefExpr{
						pos:  position{line: 54, col: 5, offset: 1371},
						name: "PoolBody",
					},
				},
			},
		},
		{
			name: "Operation",
			pos:  position{line: 56, col: 1, offset: 1381},
			expr: &choiceExpr{
				pos: position{line: 57, col: 5, offset: 1395},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 57, col: 5, offset: 1395},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 57, col: 5, offset: 1395},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 57, col: 5, offset: 1395},
									val:        "split",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 57, col: 13, offset: 1403},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 57, col: 16, offset: 1406},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 57, col: 20, offset: 1410},
									label: "procArray",
									expr: &oneOrMoreExpr{
										pos: position{line: 57, col: 30, offset: 1420},
										expr: &ruleRefExpr{
											pos:  position{line: 57, col: 30, offset: 1420},
											name: "Parallel",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 57, col: 40, offset: 1430},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 57, col: 43, offset: 1433},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 60, col: 5, offset: 1530},
						run: (*parser).callonOperation12,
						expr: &seqExpr{
							pos: position{line: 60, col: 5, offset: 1530},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 60, col: 5, offset: 1530},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 60, col: 14, offset: 1539},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 60, col: 16, offset: 1541},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 60, col: 21, offset: 1546},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 60, col: 26, offset: 1551},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 60, col: 28, offset: 1553},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 60, col: 32, offset: 1557},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 60, col: 38, offset: 1563},
										expr: &ruleRefExpr{
											pos:  position{line: 60, col: 38, offset: 1563},
											name: "SwitchLiteralClause",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 60, col: 59, offset: 1584},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 60, col: 62, offset: 1587},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 63, col: 5, offset: 1692},
						run: (*parser).callonOperation25,
						expr: &seqExpr{
							pos: position{line: 63, col: 5, offset: 1692},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 63, col: 5, offset: 1692},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 63, col: 14, offset: 1701},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 63, col: 17, offset: 1704},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 63, col: 21, offset: 1708},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 63, col: 27, offset: 1714},
										expr: &ruleRefExpr{
											pos:  position{line: 63, col: 27, offset: 1714},
											name: "SwitchSearchBooleanClause",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 63, col: 54, offset: 1741},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 63, col: 57, offset: 1744},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 66, col: 5, offset: 1848},
						run: (*parser).callonOperation35,
						expr: &seqExpr{
							pos: position{line: 66, col: 5, offset: 1848},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 66, col: 5, offset: 1848},
									val:        "from",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 66, col: 12, offset: 1855},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 66, col: 15, offset: 1858},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 66, col: 19, offset: 1862},
									label: "trunks",
									expr: &oneOrMoreExpr{
										pos: position{line: 66, col: 26, offset: 1869},
										expr: &ruleRefExpr{
											pos:  position{line: 66, col: 26, offset: 1869},
											name: "FromTrunk",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 66, col: 37, offset: 1880},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 66, col: 40, offset: 1883},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 69, col: 5, offset: 1974},
						name: "Operator",
					},
					&actionExpr{
						pos: position{line: 70, col: 5, offset: 1987},
						run: (*parser).callonOperation46,
						expr: &seqExpr{
							pos: position{line: 70, col: 5, offset: 1987},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 70, col: 5, offset: 1987},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 70, col: 7, offset: 1989},
										name: "Function",
									},
								},
								&andExpr{
									pos: position{line: 70, col: 16, offset: 1998},
									expr: &ruleRefExpr{
										pos:  position{line: 70, col: 17, offset: 1999},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 71, col: 5, offset: 2029},
						run: (*parser).callonOperation52,
						expr: &seqExpr{
							pos: position{line: 71, col: 5, offset: 2029},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 71, col: 5, offset: 2029},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 71, col: 7, offset: 2031},
										name: "OpAssignment",
									},
								},
								&andExpr{
									pos: position{line: 71, col: 20, offset: 2044},
									expr: &ruleRefExpr{
										pos:  position{line: 71, col: 21, offset: 2045},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 72, col: 5, offset: 2075},
						run: (*parser).callonOperation58,
						expr: &seqExpr{
							pos: position{line: 72, col: 5, offset: 2075},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 72, col: 5, offset: 2075},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 72, col: 7, offset: 2077},
										name: "Aggregation",
									},
								},
								&andExpr{
									pos: position{line: 72, col: 19, offset: 2089},
									expr: &ruleRefExpr{
										pos:  position{line: 72, col: 20, offset: 2090},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 73, col: 5, offset: 2121},
						run: (*parser).callonOperation64,
						expr: &seqExpr{
							pos: position{line: 73, col: 5, offset: 2121},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 73, col: 5, offset: 2121},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 73, col: 10, offset: 2126},
										name: "SearchBoolean",
									},
								},
								&notExpr{
									pos: position{line: 73, col: 24, offset: 2140},
									expr: &ruleRefExpr{
										pos:  position{line: 73, col: 25, offset: 2141},
										name: "AggGuard",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchLiteralClause",
			pos:  position{line: 77, col: 1, offset: 2232},
			expr: &actionExpr{
				pos: position{line: 78, col: 5, offset: 2256},
				run: (*parser).callonSwitchLiteralClause1,
				expr: &seqExpr{
					pos: position{line: 78, col: 5, offset: 2256},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 78, col: 5, offset: 2256},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 78, col: 8, offset: 2259},
							label: "expr",
							expr: &choiceExpr{
								pos: position{line: 78, col: 14, offset: 2265},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 78, col: 14, offset: 2265},
										name: "DefaultToken",
									},
									&ruleRefExpr{
										pos:  position{line: 78, col: 29, offset: 2280},
										name: "Literal",
									},
									&ruleRefExpr{
										pos:  position{line: 78, col: 39, offset: 2290},
										name: "Identifier",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 78, col: 51, offset: 2302},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 78, col: 54, offset: 2305},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 78, col: 59, offset: 2310},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 78, col: 62, offset: 2313},
							label: "proc",
							expr: &ruleRefExpr{
								pos:  position{line: 78, col: 67, offset: 2318},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 78, col: 78, offset: 2329},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 78, col: 81, offset: 2332},
							val:        ";",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SwitchSearchBooleanClause",
			pos:  position{line: 82, col: 1, offset: 2414},
			expr: &actionExpr{
				pos: position{line: 83, col: 5, offset: 2444},
				run: (*parser).callonSwitchSearchBooleanClause1,
				expr: &seqExpr{
					pos: position{line: 83, col: 5, offset: 2444},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 83, col: 5, offset: 2444},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 83, col: 8, offset: 2447},
							label: "expr",
							expr: &choiceExpr{
								pos: position{line: 83, col: 14, offset: 2453},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 83, col: 14, offset: 2453},
										name: "DefaultToken",
									},
									&ruleRefExpr{
										pos:  position{line: 83, col: 29, offset: 2468},
										name: "SearchBoolean",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 83, col: 44, offset: 2483},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 83, col: 47, offset: 2486},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 83, col: 52, offset: 2491},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 83, col: 55, offset: 2494},
							label: "proc",
							expr: &ruleRefExpr{
								pos:  position{line: 83, col: 60, offset: 2499},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 83, col: 71, offset: 2510},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 83, col: 74, offset: 2513},
							val:        ";",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DefaultToken",
			pos:  position{line: 87, col: 1, offset: 2595},
			expr: &actionExpr{
				pos: position{line: 87, col: 16, offset: 2610},
				run: (*parser).callonDefaultToken1,
				expr: &litMatcher{
					pos:        position{line: 87, col: 16, offset: 2610},
					val:        "default",
					ignoreCase: true,
				},
			},
		},
		{
			name: "EndOfOp",
			pos:  position{line: 89, col: 1, offset: 2642},
			expr: &seqExpr{
				pos: position{line: 89, col: 11, offset: 2652},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 89, col: 11, offset: 2652},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 89, col: 15, offset: 2656},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 89, col: 15, offset: 2656},
								name: "Pipe",
							},
							&litMatcher{
								pos:        position{line: 89, col: 22, offset: 2663},
								val:        "=>",
								ignoreCase: false,
							},
							&charClassMatcher{
								pos:        position{line: 89, col: 29, offset: 2670},
								val:        "[);]",
								chars:      []rune{')', ';'},
								ignoreCase: false,
								inverted:   false,
							},
							&ruleRefExpr{
								pos:  position{line: 89, col: 36, offset: 2677},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "Pipe",
			pos:  position{line: 90, col: 1, offset: 2682},
			expr: &seqExpr{
				pos: position{line: 90, col: 8, offset: 2689},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 90, col: 8, offset: 2689},
						val:        "|",
						ignoreCase: false,
					},
					&notExpr{
						pos: position{line: 90, col: 12, offset: 2693},
						expr: &choiceExpr{
							pos: position{line: 90, col: 14, offset: 2695},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 90, col: 14, offset: 2695},
									val:        "{",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 90, col: 20, offset: 2701},
									val:        "[",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 92, col: 1, offset: 2707},
			expr: &seqExpr{
				pos: position{line: 92, col: 13, offset: 2719},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 92, col: 13, offset: 2719},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 92, col: 17, offset: 2723},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 92, col: 18, offset: 2724},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 92, col: 18, offset: 2724},
										expr: &litMatcher{
											pos:        position{line: 92, col: 19, offset: 2725},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 92, col: 24, offset: 2730},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 92, col: 38, offset: 2744},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 92, col: 57, offset: 2763},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 92, col: 82, offset: 2788},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 92, col: 88, offset: 2794},
								val:        "(",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 92, col: 94, offset: 2800},
								val:        "[",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 92, col: 100, offset: 2806},
								val:        "matches",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 94, col: 1, offset: 2818},
			expr: &actionExpr{
				pos: position{line: 94, col: 14, offset: 2831},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 94, col: 15, offset: 2832},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 94, col: 15, offset: 2832},
							val:        "==",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 94, col: 22, offset: 2839},
							val:        "!=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 94, col: 29, offset: 2846},
							val:        "in",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 94, col: 36, offset: 2853},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 94, col: 43, offset: 2860},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 94, col: 49, offset: 2866},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 94, col: 56, offset: 2873},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AggGuard",
			pos:  position{line: 96, col: 1, offset: 2910},
			expr: &choiceExpr{
				pos: position{line: 96, col: 12, offset: 2921},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 96, col: 13, offset: 2922},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 96, col: 13, offset: 2922},
								name: "_",
							},
							&choiceExpr{
								pos: position{line: 96, col: 16, offset: 2925},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 96, col: 16, offset: 2925},
										name: "ByToken",
									},
									&litMatcher{
										pos:        position{line: 96, col: 26, offset: 2935},
										val:        "-with",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 96, col: 35, offset: 2944},
								name: "EOT",
							},
						},
					},
					&seqExpr{
						pos: position{line: 96, col: 43, offset: 2952},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 96, col: 43, offset: 2952},
								name: "__",
							},
							&litMatcher{
								pos:        position{line: 96, col: 46, offset: 2955},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 98, col: 1, offset: 2961},
			expr: &actionExpr{
				pos: position{line: 99, col: 5, offset: 2979},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 99, col: 5, offset: 2979},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 99, col: 5, offset: 2979},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 99, col: 11, offset: 2985},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 99, col: 21, offset: 2995},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 99, col: 26, offset: 3000},
								expr: &ruleRefExpr{
									pos:  position{line: 99, col: 26, offset: 3000},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 103, col: 1, offset: 3074},
			expr: &actionExpr{
				pos: position{line: 103, col: 16, offset: 3089},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 103, col: 16, offset: 3089},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 103, col: 16, offset: 3089},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 103, col: 18, offset: 3091},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 103, col: 26, offset: 3099},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 103, col: 28, offset: 3101},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 103, col: 30, offset: 3103},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 105, col: 1, offset: 3153},
			expr: &actionExpr{
				pos: position{line: 106, col: 5, offset: 3167},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 106, col: 5, offset: 3167},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 106, col: 5, offset: 3167},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 106, col: 11, offset: 3173},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 107, col: 5, offset: 3190},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 107, col: 10, offset: 3195},
								expr: &actionExpr{
									pos: position{line: 107, col: 11, offset: 3196},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 107, col: 11, offset: 3196},
										exprs: []interface{}{
											&zeroOrOneExpr{
												pos: position{line: 107, col: 11, offset: 3196},
												expr: &seqExpr{
													pos: position{line: 107, col: 12, offset: 3197},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 107, col: 12, offset: 3197},
															name: "_",
														},
														&ruleRefExpr{
															pos:  position{line: 107, col: 14, offset: 3199},
															name: "AndToken",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 107, col: 25, offset: 3210},
												name: "_",
											},
											&notExpr{
												pos: position{line: 107, col: 27, offset: 3212},
												expr: &ruleRefExpr{
													pos:  position{line: 107, col: 28, offset: 3213},
													name: "OrToken",
												},
											},
											&labeledExpr{
												pos:   position{line: 107, col: 36, offset: 3221},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 107, col: 41, offset: 3226},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 111, col: 1, offset: 3342},
			expr: &choiceExpr{
				pos: position{line: 112, col: 5, offset: 3359},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 112, col: 5, offset: 3359},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 112, col: 5, offset: 3359},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 112, col: 6, offset: 3360},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 112, col: 6, offset: 3360},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 112, col: 6, offset: 3360},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 112, col: 15, offset: 3369},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 112, col: 19, offset: 3373},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 112, col: 19, offset: 3373},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 112, col: 23, offset: 3377},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 112, col: 27, offset: 3381},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 112, col: 29, offset: 3383},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 115, col: 5, offset: 3495},
						run: (*parser).callonSearchFactor13,
						expr: &seqExpr{
							pos: position{line: 115, col: 5, offset: 3495},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 115, col: 5, offset: 3495},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 115, col: 9, offset: 3499},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 115, col: 12, offset: 3502},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 115, col: 17, offset: 3507},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 115, col: 31, offset: 3521},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 115, col: 34, offset: 3524},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 116, col: 5, offset: 3553},
						name: "SearchExpr",
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 119, col: 1, offset: 3566},
			expr: &choiceExpr{
				pos: position{line: 120, col: 5, offset: 3581},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 120, col: 5, offset: 3581},
						run: (*parser).callonSearchExpr2,
						expr: &labeledExpr{
							pos:   position{line: 120, col: 5, offset: 3581},
							label: "search",
							expr: &ruleRefExpr{
								pos:  position{line: 120, col: 12, offset: 3588},
								name: "PatternSearch",
							},
						},
					},
					&actionExpr{
						pos: position{line: 121, col: 5, offset: 3629},
						run: (*parser).callonSearchExpr5,
						expr: &seqExpr{
							pos: position{line: 121, col: 5, offset: 3629},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 121, col: 5, offset: 3629},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 121, col: 7, offset: 3631},
										name: "SearchValue",
									},
								},
								&notExpr{
									pos: position{line: 121, col: 19, offset: 3643},
									expr: &ruleRefExpr{
										pos:  position{line: 121, col: 20, offset: 3644},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 124, col: 5, offset: 3761},
						run: (*parser).callonSearchExpr11,
						expr: &seqExpr{
							pos: position{line: 124, col: 5, offset: 3761},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 124, col: 5, offset: 3761},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 124, col: 9, offset: 3765},
									expr: &ruleRefExpr{
										pos:  position{line: 124, col: 10, offset: 3766},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 127, col: 5, offset: 3882},
						name: "EqualityCompareExpr",
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 129, col: 1, offset: 3903},
			expr: &choiceExpr{
				pos: position{line: 130, col: 5, offset: 3919},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 130, col: 5, offset: 3919},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 131, col: 5, offset: 3931},
						run: (*parser).callonSearchValue3,
						expr: &seqExpr{
							pos: position{line: 131, col: 5, offset: 3931},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 131, col: 5, offset: 3931},
									expr: &ruleRefExpr{
										pos:  position{line: 131, col: 6, offset: 3932},
										name: "Regexp",
									},
								},
								&labeledExpr{
									pos:   position{line: 131, col: 13, offset: 3939},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 131, col: 15, offset: 3941},
										name: "KeyWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PatternSearch",
			pos:  position{line: 135, col: 1, offset: 4049},
			expr: &actionExpr{
				pos: position{line: 136, col: 5, offset: 4067},
				run: (*parser).callonPatternSearch1,
				expr: &labeledExpr{
					pos:   position{line: 136, col: 5, offset: 4067},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 136, col: 13, offset: 4075},
						name: "Pattern",
					},
				},
			},
		},
		{
			name: "PatternMatch",
			pos:  position{line: 140, col: 1, offset: 4177},
			expr: &actionExpr{
				pos: position{line: 141, col: 5, offset: 4194},
				run: (*parser).callonPatternMatch1,
				expr: &seqExpr{
					pos: position{line: 141, col: 5, offset: 4194},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 141, col: 5, offset: 4194},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 141, col: 7, offset: 4196},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 141, col: 12, offset: 4201},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 141, col: 14, offset: 4203},
							val:        "matches",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 141, col: 25, offset: 4214},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 141, col: 28, offset: 4217},
							label: "pattern",
							expr: &ruleRefExpr{
								pos:  position{line: 141, col: 36, offset: 4225},
								name: "Pattern",
							},
						},
					},
				},
			},
		},
		{
			name: "Pattern",
			pos:  position{line: 145, col: 1, offset: 4337},
			expr: &choiceExpr{
				pos: position{line: 145, col: 11, offset: 4347},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 145, col: 11, offset: 4347},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 145, col: 20, offset: 4356},
						name: "Glob",
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 149, col: 1, offset: 4388},
			expr: &choiceExpr{
				pos: position{line: 150, col: 5, offset: 4404},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 150, col: 5, offset: 4404},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 150, col: 5, offset: 4404},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 150, col: 5, offset: 4404},
									expr: &ruleRefExpr{
										pos:  position{line: 150, col: 5, offset: 4404},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 150, col: 16, offset: 4415},
									label: "every",
									expr: &zeroOrOneExpr{
										pos: position{line: 150, col: 22, offset: 4421},
										expr: &ruleRefExpr{
											pos:  position{line: 150, col: 22, offset: 4421},
											name: "EveryDur",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 150, col: 32, offset: 4431},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 150, col: 37, offset: 4436},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 150, col: 49, offset: 4448},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 150, col: 55, offset: 4454},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 153, col: 5, offset: 4599},
						run: (*parser).callonAggregation13,
						expr: &seqExpr{
							pos: position{line: 153, col: 5, offset: 4599},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 153, col: 5, offset: 4599},
									expr: &ruleRefExpr{
										pos:  position{line: 153, col: 5, offset: 4599},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 153, col: 16, offset: 4610},
									label: "every",
									expr: &zeroOrOneExpr{
										pos: position{line: 153, col: 22, offset: 4616},
										expr: &ruleRefExpr{
											pos:  position{line: 153, col: 22, offset: 4616},
											name: "EveryDur",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 153, col: 32, offset: 4626},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 153, col: 37, offset: 4631},
										name: "AggAssignments",
									},
								},
								&labeledExpr{
									pos:   position{line: 153, col: 52, offset: 4646},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 153, col: 57, offset: 4651},
										expr: &seqExpr{
											pos: position{line: 153, col: 58, offset: 4652},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 153, col: 58, offset: 4652},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 153, col: 60, offset: 4654},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 153, col: 74, offset: 4668},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 153, col: 80, offset: 4674},
										name: "LimitArg",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Summarize",
			pos:  position{line: 161, col: 1, offset: 4907},
			expr: &seqExpr{
				pos: position{line: 161, col: 13, offset: 4919},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 161, col: 13, offset: 4919},
						val:        "summarize",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 161, col: 25, offset: 4931},
						name: "_",
					},
				},
			},
		},
		{
			name: "EveryDur",
			pos:  position{line: 163, col: 1, offset: 4934},
			expr: &actionExpr{
				pos: position{line: 164, col: 5, offset: 4947},
				run: (*parser).callonEveryDur1,
				expr: &seqExpr{
					pos: position{line: 164, col: 5, offset: 4947},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 164, col: 5, offset: 4947},
							val:        "every",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 164, col: 14, offset: 4956},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 164, col: 16, offset: 4958},
							label: "dur",
							expr: &ruleRefExpr{
								pos:  position{line: 164, col: 20, offset: 4962},
								name: "Duration",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 164, col: 29, offset: 4971},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 166, col: 1, offset: 4994},
			expr: &actionExpr{
				pos: position{line: 167, col: 5, offset: 5010},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 167, col: 5, offset: 5010},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 167, col: 5, offset: 5010},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 167, col: 13, offset: 5018},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 167, col: 15, offset: 5020},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 167, col: 23, offset: 5028},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 169, col: 1, offset: 5069},
			expr: &choiceExpr{
				pos: position{line: 170, col: 5, offset: 5082},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 170, col: 5, offset: 5082},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 170, col: 5, offset: 5082},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 170, col: 5, offset: 5082},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 170, col: 7, offset: 5084},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 170, col: 14, offset: 5091},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 170, col: 16, offset: 5093},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 170, col: 25, offset: 5102},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 170, col: 27, offset: 5104},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 170, col: 33, offset: 5110},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 171, col: 5, offset: 5141},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 171, col: 5, offset: 5141},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 176, col: 1, offset: 5401},
			expr: &choiceExpr{
				pos: position{line: 177, col: 5, offset: 5420},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 177, col: 5, offset: 5420},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 178, col: 5, offset: 5435},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 178, col: 5, offset: 5435},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 178, col: 10, offset: 5440},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 180, col: 1, offset: 5532},
			expr: &actionExpr{
				pos: position{line: 181, col: 5, offset: 5552},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 181, col: 5, offset: 5552},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 181, col: 5, offset: 5552},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 181, col: 11, offset: 5558},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 181, col: 26, offset: 5573},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 181, col: 31, offset: 5578},
								expr: &actionExpr{
									pos: position{line: 181, col: 32, offset: 5579},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 181, col: 32, offset: 5579},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 181, col: 32, offset: 5579},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 181, col: 35, offset: 5582},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 181, col: 39, offset: 5586},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 181, col: 42, offset: 5589},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 181, col: 47, offset: 5594},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignment",
			pos:  position{line: 185, col: 1, offset: 5716},
			expr: &choiceExpr{
				pos: position{line: 186, col: 5, offset: 5734},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 186, col: 5, offset: 5734},
						run: (*parser).callonAggAssignment2,
						expr: &seqExpr{
							pos: position{line: 186, col: 5, offset: 5734},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 186, col: 5, offset: 5734},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 186, col: 10, offset: 5739},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 186, col: 15, offset: 5744},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 186, col: 18, offset: 5747},
									val:        ":=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 186, col: 23, offset: 5752},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 186, col: 26, offset: 5755},
									label: "agg",
									expr: &ruleRefExpr{
										pos:  position{line: 186, col: 30, offset: 5759},
										name: "Agg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 189, col: 5, offset: 5863},
						run: (*parser).callonAggAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 189, col: 5, offset: 5863},
							label: "agg",
							expr: &ruleRefExpr{
								pos:  position{line: 189, col: 9, offset: 5867},
								name: "Agg",
							},
						},
					},
				},
			},
		},
		{
			name: "Agg",
			pos:  position{line: 193, col: 1, offset: 5967},
			expr: &actionExpr{
				pos: position{line: 194, col: 5, offset: 5975},
				run: (*parser).callonAgg1,
				expr: &seqExpr{
					pos: position{line: 194, col: 5, offset: 5975},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 194, col: 5, offset: 5975},
							expr: &ruleRefExpr{
								pos:  position{line: 194, col: 6, offset: 5976},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 194, col: 16, offset: 5986},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 194, col: 19, offset: 5989},
								name: "AggName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 194, col: 27, offset: 5997},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 194, col: 30, offset: 6000},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 194, col: 34, offset: 6004},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 194, col: 37, offset: 6007},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 194, col: 42, offset: 6012},
								expr: &ruleRefExpr{
									pos:  position{line: 194, col: 42, offset: 6012},
									name: "Expr",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 194, col: 49, offset: 6019},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 194, col: 52, offset: 6022},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 194, col: 56, offset: 6026},
							expr: &seqExpr{
								pos: position{line: 194, col: 58, offset: 6028},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 194, col: 58, offset: 6028},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 194, col: 61, offset: 6031},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 194, col: 66, offset: 6036},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 194, col: 72, offset: 6042},
								expr: &ruleRefExpr{
									pos:  position{line: 194, col: 72, offset: 6042},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggName",
			pos:  position{line: 202, col: 1, offset: 6232},
			expr: &choiceExpr{
				pos: position{line: 203, col: 5, offset: 6244},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 203, col: 5, offset: 6244},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 204, col: 5, offset: 6263},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 205, col: 5, offset: 6276},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 207, col: 1, offset: 6285},
			expr: &actionExpr{
				pos: position{line: 207, col: 15, offset: 6299},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 207, col: 15, offset: 6299},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 207, col: 15, offset: 6299},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 207, col: 17, offset: 6301},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 207, col: 25, offset: 6309},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 207, col: 27, offset: 6311},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 207, col: 32, offset: 6316},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignments",
			pos:  position{line: 209, col: 1, offset: 6352},
			expr: &actionExpr{
				pos: position{line: 210, col: 5, offset: 6371},
				run: (*parser).callonAggAssignments1,
				expr: &seqExpr{
					pos: position{line: 210, col: 5, offset: 6371},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 210, col: 5, offset: 6371},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 210, col: 11, offset: 6377},
								name: "AggAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 210, col: 25, offset: 6391},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 210, col: 30, offset: 6396},
								expr: &seqExpr{
									pos: position{line: 210, col: 31, offset: 6397},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 210, col: 31, offset: 6397},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 210, col: 34, offset: 6400},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 210, col: 38, offset: 6404},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 210, col: 41, offset: 6407},
											name: "AggAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 220, col: 1, offset: 6643},
			expr: &choiceExpr{
				pos: position{line: 221, col: 5, offset: 6656},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 221, col: 5, offset: 6656},
						name: "SortProc",
					},
					&ruleRefExpr{
						pos:  position{line: 222, col: 5, offset: 6669},
						name: "TopProc",
					},
					&ruleRefExpr{
						pos:  position{line: 223, col: 5, offset: 6681},
						name: "CutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 224, col: 5, offset: 6693},
						name: "DropProc",
					},
					&ruleRefExpr{
						pos:  position{line: 225, col: 5, offset: 6706},
						name: "HeadProc",
					},
					&ruleRefExpr{
						pos:  position{line: 226, col: 5, offset: 6719},
						name: "TailProc",
					},
					&ruleRefExpr{
						pos:  position{line: 227, col: 5, offset: 6732},
						name: "FilterProc",
					},
					&ruleRefExpr{
						pos:  position{line: 228, col: 5, offset: 6747},
						name: "UniqProc",
					},
					&ruleRefExpr{
						pos:  position{line: 229, col: 5, offset: 6760},
						name: "PutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 230, col: 5, offset: 6772},
						name: "RenameProc",
					},
					&ruleRefExpr{
						pos:  position{line: 231, col: 5, offset: 6787},
						name: "FuseProc",
					},
					&ruleRefExpr{
						pos:  position{line: 232, col: 5, offset: 6800},
						name: "ShapeProc",
					},
					&ruleRefExpr{
						pos:  position{line: 233, col: 5, offset: 6814},
						name: "JoinProc",
					},
					&ruleRefExpr{
						pos:  position{line: 234, col: 5, offset: 6827},
						name: "SampleProc",
					},
					&ruleRefExpr{
						pos:  position{line: 235, col: 5, offset: 6842},
						name: "SQLProc",
					},
					&ruleRefExpr{
						pos:  position{line: 236, col: 5, offset: 6854},
						name: "FromProc",
					},
					&ruleRefExpr{
						pos:  position{line: 237, col: 5, offset: 6867},
						name: "PassProc",
					},
					&ruleRefExpr{
						pos:  position{line: 238, col: 5, offset: 6880},
						name: "ExplodeProc",
					},
					&ruleRefExpr{
						pos:  position{line: 239, col: 5, offset: 6896},
						name: "MergeProc",
					},
					&ruleRefExpr{
						pos:  position{line: 240, col: 5, offset: 6910},
						name: "OverProc",
					},
					&ruleRefExpr{
						pos:  position{line: 241, col: 5, offset: 6923},
						name: "YieldProc",
					},
				},
			},
		},
		{
			name: "SortProc",
			pos:  position{line: 243, col: 1, offset: 6934},
			expr: &actionExpr{
				pos: position{line: 244, col: 5, offset: 6947},
				run: (*parser).callonSortProc1,
				expr: &seqExpr{
					pos: position{line: 244, col: 5, offset: 6947},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 244, col: 5, offset: 6947},
							val:        "sort",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 244, col: 13, offset: 6955},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 244, col: 18, offset: 6960},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 244, col: 27, offset: 6969},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 244, col: 32, offset: 6974},
								expr: &actionExpr{
									pos: position{line: 244, col: 33, offset: 6975},
									run: (*parser).callonSortProc8,
									expr: &seqExpr{
										pos: position{line: 244, col: 33, offset: 6975},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 244, col: 33, offset: 6975},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 244, col: 35, offset: 6977},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 244, col: 37, offset: 6979},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 258, col: 1, offset: 7398},
			expr: &actionExpr{
				pos: position{line: 258, col: 12, offset: 7409},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 258, col: 12, offset: 7409},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 258, col: 17, offset: 7414},
						expr: &actionExpr{
							pos: position{line: 258, col: 18, offset: 7415},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 258, col: 18, offset: 7415},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 258, col: 18, offset: 7415},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 258, col: 20, offset: 7417},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 258, col: 22, offset: 7419},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 260, col: 1, offset: 7475},
			expr: &choiceExpr{
				pos: position{line: 261, col: 5, offset: 7487},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 261, col: 5, offset: 7487},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 261, col: 5, offset: 7487},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 262, col: 5, offset: 7562},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 262, col: 5, offset: 7562},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 262, col: 5, offset: 7562},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 262, col: 14, offset: 7571},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 262, col: 16, offset: 7573},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 262, col: 23, offset: 7580},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 262, col: 24, offset: 7581},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 262, col: 24, offset: 7581},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 262, col: 34, offset: 7591},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopProc",
			pos:  position{line: 264, col: 1, offset: 7705},
			expr: &actionExpr{
				pos: position{line: 265, col: 5, offset: 7717},
				run: (*parser).callonTopProc1,
				expr: &seqExpr{
					pos: position{line: 265, col: 5, offset: 7717},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 265, col: 5, offset: 7717},
							val:        "top",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 265, col: 12, offset: 7724},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 265, col: 18, offset: 7730},
								expr: &actionExpr{
									pos: position{line: 265, col: 19, offset: 7731},
									run: (*parser).callonTopProc6,
									expr: &seqExpr{
										pos: position{line: 265, col: 19, offset: 7731},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 265, col: 19, offset: 7731},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 265, col: 21, offset: 7733},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 265, col: 23, offset: 7735},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 265, col: 47, offset: 7759},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 265, col: 53, offset: 7765},
								expr: &seqExpr{
									pos: position{line: 265, col: 54, offset: 7766},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 265, col: 54, offset: 7766},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 265, col: 56, offset: 7768},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 265, col: 67, offset: 7779},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 265, col: 74, offset: 7786},
								expr: &actionExpr{
									pos: position{line: 265, col: 75, offset: 7787},
									run: (*parser).callonTopProc18,
									expr: &seqExpr{
										pos: position{line: 265, col: 75, offset: 7787},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 265, col: 75, offset: 7787},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 265, col: 77, offset: 7789},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 265, col: 79, offset: 7791},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutProc",
			pos:  position{line: 279, col: 1, offset: 8136},
			expr: &actionExpr{
				pos: position{line: 280, col: 5, offset: 8148},
				run: (*parser).callonCutProc1,
				expr: &seqExpr{
					pos: position{line: 280, col: 5, offset: 8148},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 280, col: 5, offset: 8148},
							val:        "cut",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 280, col: 12, offset: 8155},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 280, col: 14, offset: 8157},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 280, col: 19, offset: 8162},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropProc",
			pos:  position{line: 284, col: 1, offset: 8257},
			expr: &actionExpr{
				pos: position{line: 285, col: 5, offset: 8270},
				run: (*parser).callonDropProc1,
				expr: &seqExpr{
					pos: position{line: 285, col: 5, offset: 8270},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 285, col: 5, offset: 8270},
							val:        "drop",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 285, col: 13, offset: 8278},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 285, col: 15, offset: 8280},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 285, col: 20, offset: 8285},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadProc",
			pos:  position{line: 289, col: 1, offset: 8376},
			expr: &choiceExpr{
				pos: position{line: 290, col: 5, offset: 8389},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 290, col: 5, offset: 8389},
						run: (*parser).callonHeadProc2,
						expr: &seqExpr{
							pos: position{line: 290, col: 5, offset: 8389},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 290, col: 5, offset: 8389},
									val:        "head",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 290, col: 13, offset: 8397},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 290, col: 15, offset: 8399},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 290, col: 21, offset: 8405},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 291, col: 5, offset: 8485},
						run: (*parser).callonHeadProc8,
						expr: &litMatcher{
							pos:        position{line: 291, col: 5, offset: 8485},
							val:        "head",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "TailProc",
			pos:  position{line: 293, col: 1, offset: 8561},
			expr: &choiceExpr{
				pos: position{line: 294, col: 5, offset: 8574},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 294, col: 5, offset: 8574},
						run: (*parser).callonTailProc2,
						expr: &seqExpr{
							pos: position{line: 294, col: 5, offset: 8574},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 294, col: 5, offset: 8574},
									val:        "tail",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 294, col: 13, offset: 8582},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 294, col: 15, offset: 8584},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 294, col: 21, offset: 8590},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 295, col: 5, offset: 8670},
						run: (*parser).callonTailProc8,
						expr: &litMatcher{
							pos:        position{line: 295, col: 5, offset: 8670},
							val:        "tail",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "FilterProc",
			pos:  position{line: 297, col: 1, offset: 8746},
			expr: &actionExpr{
				pos: position{line: 298, col: 5, offset: 8761},
				run: (*parser).callonFilterProc1,
				expr: &seqExpr{
					pos: position{line: 298, col: 5, offset: 8761},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 298, col: 5, offset: 8761},
							val:        "filter",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 298, col: 15, offset: 8771},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 298, col: 17, offset: 8773},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 298, col: 20, offset: 8776},
								name: "Filter",
							},
						},
					},
				},
			},
		},
		{
			name: "Filter",
			pos:  position{line: 302, col: 1, offset: 8813},
			expr: &actionExpr{
				pos: position{line: 303, col: 5, offset: 8824},
				run: (*parser).callonFilter1,
				expr: &labeledExpr{
					pos:   position{line: 303, col: 5, offset: 8824},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 303, col: 10, offset: 8829},
						name: "SearchBoolean",
					},
				},
			},
		},
		{
			name: "UniqProc",
			pos:  position{line: 307, col: 1, offset: 8925},
			expr: &choiceExpr{
				pos: position{line: 308, col: 5, offset: 8938},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 308, col: 5, offset: 8938},
						run: (*parser).callonUniqProc2,
						expr: &seqExpr{
							pos: position{line: 308, col: 5, offset: 8938},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 308, col: 5, offset: 8938},
									val:        "uniq",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 308, col: 13, offset: 8946},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 308, col: 15, offset: 8948},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 311, col: 5, offset: 9037},
						run: (*parser).callonUniqProc7,
						expr: &litMatcher{
							pos:        position{line: 311, col: 5, offset: 9037},
							val:        "uniq",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "PutProc",
			pos:  position{line: 315, col: 1, offset: 9127},
			expr: &actionExpr{
				pos: position{line: 316, col: 5, offset: 9139},
				run: (*parser).callonPutProc1,
				expr: &seqExpr{
					pos: position{line: 316, col: 5, offset: 9139},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 316, col: 5, offset: 9139},
							val:        "put",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 316, col: 12, offset: 9146},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 316, col: 14, offset: 9148},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 316, col: 19, offset: 9153},
								name: "Assignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameProc",
			pos:  position{line: 320, col: 1, offset: 9244},
			expr: &actionExpr{
				pos: position{line: 321, col: 5, offset: 9259},
				run: (*parser).callonRenameProc1,
				expr: &seqExpr{
					pos: position{line: 321, col: 5, offset: 9259},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 321, col: 5, offset: 9259},
							val:        "rename",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 321, col: 15, offset: 9269},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 321, col: 17, offset: 9271},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 321, col: 23, offset: 9277},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 321, col: 34, offset: 9288},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 321, col: 39, offset: 9293},
								expr: &actionExpr{
									pos: position{line: 321, col: 40, offset: 9294},
									run: (*parser).callonRenameProc9,
									expr: &seqExpr{
										pos: position{line: 321, col: 40, offset: 9294},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 321, col: 40, offset: 9294},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 321, col: 43, offset: 9297},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 321, col: 47, offset: 9301},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 321, col: 50, offset: 9304},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 321, col: 53, offset: 9307},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseProc",
			pos:  position{line: 329, col: 1, offset: 9716},
			expr: &actionExpr{
				pos: position{line: 330, col: 5, offset: 9729},
				run: (*parser).callonFuseProc1,
				expr: &seqExpr{
					pos: position{line: 330, col: 5, offset: 9729},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 330, col: 5, offset: 9729},
							val:        "fuse",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 330, col: 13, offset: 9737},
							expr: &seqExpr{
								pos: position{line: 330, col: 15, offset: 9739},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 330, col: 15, offset: 9739},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 330, col: 18, offset: 9742},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShapeProc",
			pos:  position{line: 334, col: 1, offset: 9813},
			expr: &actionExpr{
				pos: position{line: 335, col: 5, offset: 9827},
				run: (*parser).callonShapeProc1,
				expr: &litMatcher{
					pos:        position{line: 335, col: 5, offset: 9827},
					val:        "shape",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JoinProc",
			pos:  position{line: 339, col: 1, offset: 9903},
			expr: &choiceExpr{
				pos: position{line: 340, col: 5, offset: 9916},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 340, col: 5, offset: 9916},
						run: (*parser).callonJoinProc2,
						expr: &seqExpr{
							pos: position{line: 340, col: 5, offset: 9916},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 340, col: 5, offset: 9916},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 340, col: 11, offset: 9922},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 340, col: 21, offset: 9932},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 340, col: 29, offset: 9940},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 340, col: 31, offset: 9942},
									name: "ON",
								},
								&ruleRefExpr{
									pos:  position{line: 340, col: 34, offset: 9945},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 340, col: 36, offset: 9947},
									label: "leftKey",
									expr: &ruleRefExpr{
										pos:  position{line: 340, col: 44, offset: 9955},
										name: "JoinKey",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 340, col: 52, offset: 9963},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 340, col: 55, offset: 9966},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 340, col: 59, offset: 9970},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 340, col: 62, offset: 9973},
									label: "rightKey",
									expr: &ruleRefExpr{
										pos:  position{line: 340, col: 71, offset: 9982},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 340, col: 79, offset: 9990},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 340, col: 87, offset: 9998},
										expr: &seqExpr{
											pos: position{line: 340, col: 88, offset: 9999},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 340, col: 88, offset: 9999},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 340, col: 90, offset: 10001},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 347, col: 5, offset: 10267},
						run: (*parser).callonJoinProc22,
						expr: &seqExpr{
							pos: position{line: 347, col: 5, offset: 10267},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 347, col: 5, offset: 10267},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 347, col: 11, offset: 10273},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 347, col: 22, offset: 10284},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 347, col: 30, offset: 10292},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 347, col: 32, offset: 10294},
									name: "ON",
								},
								&ruleRefExpr{
									pos:  position{line: 347, col: 35, offset: 10297},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 347, col: 37, offset: 10299},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 347, col: 41, offset: 10303},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 347, col: 49, offset: 10311},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 347, col: 57, offset: 10319},
										expr: &seqExpr{
											pos: position{line: 347, col: 58, offset: 10320},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 347, col: 58, offset: 10320},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 347, col: 60, offset: 10322},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinStyle",
			pos:  position{line: 355, col: 1, offset: 10576},
			expr: &choiceExpr{
				pos: position{line: 356, col: 5, offset: 10590},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 356, col: 5, offset: 10590},
						run: (*parser).callonJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 356, col: 5, offset: 10590},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 356, col: 5, offset: 10590},
									val:        "anti",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 356, col: 13, offset: 10598},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 357, col: 5, offset: 10628},
						run: (*parser).callonJoinStyle6,
						expr: &seqExpr{
							pos: position{line: 357, col: 5, offset: 10628},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 357, col: 5, offset: 10628},
									val:        "inner",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 357, col: 14, offset: 10637},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 358, col: 5, offset: 10667},
						run: (*parser).callonJoinStyle10,
						expr: &seqExpr{
							pos: position{line: 358, col: 5, offset: 10667},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 358, col: 5, offset: 10667},
									val:        "left",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 358, col: 14, offset: 10676},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 359, col: 5, offset: 10705},
						run: (*parser).callonJoinStyle14,
						expr: &seqExpr{
							pos: position{line: 359, col: 5, offset: 10705},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 359, col: 5, offset: 10705},
									val:        "right",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 359, col: 14, offset: 10714},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 360, col: 5, offset: 10744},
						run: (*parser).callonJoinStyle18,
						expr: &litMatcher{
							pos:        position{line: 360, col: 5, offset: 10744},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 362, col: 1, offset: 10780},
			expr: &choiceExpr{
				pos: position{line: 363, col: 5, offset: 10792},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 363, col: 5, offset: 10792},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 364, col: 5, offset: 10801},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 364, col: 5, offset: 10801},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 364, col: 5, offset: 10801},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 364, col: 9, offset: 10805},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 364, col: 14, offset: 10810},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 364, col: 19, offset: 10815},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SampleProc",
			pos:  position{line: 366, col: 1, offset: 10841},
			expr: &actionExpr{
				pos: position{line: 367, col: 5, offset: 10856},
				run: (*parser).callonSampleProc1,
				expr: &seqExpr{
					pos: position{line: 367, col: 5, offset: 10856},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 367, col: 5, offset: 10856},
							val:        "sample",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 367, col: 15, offset: 10866},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 367, col: 17, offset: 10868},
								name: "SampleExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "OpAssignment",
			pos:  position{line: 411, col: 1, offset: 12501},
			expr: &actionExpr{
				pos: position{line: 412, col: 5, offset: 12518},
				run: (*parser).callonOpAssignment1,
				expr: &labeledExpr{
					pos:   position{line: 412, col: 5, offset: 12518},
					label: "a",
					expr: &ruleRefExpr{
						pos:  position{line: 412, col: 7, offset: 12520},
						name: "Assignments",
					},
				},
			},
		},
		{
			name: "SampleExpr",
			pos:  position{line: 416, col: 1, offset: 12620},
			expr: &choiceExpr{
				pos: position{line: 417, col: 5, offset: 12635},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 417, col: 5, offset: 12635},
						run: (*parser).callonSampleExpr2,
						expr: &seqExpr{
							pos: position{line: 417, col: 5, offset: 12635},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 417, col: 5, offset: 12635},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 417, col: 7, offset: 12637},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 417, col: 12, offset: 12642},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 418, col: 5, offset: 12671},
						run: (*parser).callonSampleExpr7,
						expr: &litMatcher{
							pos:        position{line: 418, col: 5, offset: 12671},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromProc",
			pos:  position{line: 420, col: 1, offset: 12729},
			expr: &actionExpr{
				pos: position{line: 421, col: 5, offset: 12742},
				run: (*parser).callonFromProc1,
				expr: &labeledExpr{
					pos:   position{line: 421, col: 5, offset: 12742},
					label: "source",
					expr: &ruleRefExpr{
						pos:  position{line: 421, col: 12, offset: 12749},
						name: "FromAny",
					},
				},
			},
		},
		{
			name: "FromAny",
			pos:  position{line: 425, col: 1, offset: 12905},
			expr: &choiceExpr{
				pos: position{line: 426, col: 5, offset: 12917},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 426, col: 5, offset: 12917},
						name: "FileProc",
					},
					&ruleRefExpr{
						pos:  position{line: 427, col: 5, offset: 12930},
						name: "HTTPProc",
					},
					&ruleRefExpr{
						pos:  position{line: 428, col: 5, offset: 12943},
						name: "PoolProc",
					},
				},
			},
		},
		{
			name: "FileProc",
			pos:  position{line: 430, col: 1, offset: 12953},
			expr: &actionExpr{
				pos: position{line: 431, col: 5, offset: 12966},
				run: (*parser).callonFileProc1,
				expr: &seqExpr{
					pos: position{line: 431, col: 5, offset: 12966},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 431, col: 5, offset: 12966},
							val:        "file",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 431, col: 13, offset: 12974},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 431, col: 15, offset: 12976},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 431, col: 20, offset: 12981},
								name: "Path",
							},
						},
						&labeledExpr{
							pos:   position{line: 431, col: 25, offset: 12986},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 431, col: 32, offset: 12993},
								expr: &ruleRefExpr{
									pos:  position{line: 431, col: 32, offset: 12993},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 431, col: 43, offset: 13004},
							label: "layout",
							expr: &zeroOrOneExpr{
								pos: position{line: 431, col: 50, offset: 13011},
								expr: &ruleRefExpr{
									pos:  position{line: 431, col: 50, offset: 13011},
									name: "LayoutArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PoolProc",
			pos:  position{line: 435, col: 1, offset: 13140},
			expr: &actionExpr{
				pos: position{line: 436, col: 5, offset: 13153},
				run: (*parser).callonPoolProc1,
				expr: &seqExpr{
					pos: position{line: 436, col: 5, offset: 13153},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 436, col: 5, offset: 13153},
							val:        "from",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 436, col: 13, offset: 13161},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 436, col: 15, offset: 13163},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 436, col: 20, offset: 13168},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolBody",
			pos:  position{line: 438, col: 1, offset: 13199},
			expr: &actionExpr{
				pos: position{line: 439, col: 5, offset: 13212},
				run: (*parser).callonPoolBody1,
				expr: &seqExpr{
					pos: position{line: 439, col: 5, offset: 13212},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 439, col: 5, offset: 13212},
							label: "spec",
							expr: &ruleRefExpr{
								pos:  position{line: 439, col: 10, offset: 13217},
								name: "PoolSpec",
							},
						},
						&labeledExpr{
							pos:   position{line: 439, col: 19, offset: 13226},
							label: "at",
							expr: &zeroOrOneExpr{
								pos: position{line: 439, col: 22, offset: 13229},
								expr: &ruleRefExpr{
									pos:  position{line: 439, col: 22, offset: 13229},
									name: "PoolAt",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 439, col: 30, offset: 13237},
							label: "over",
							expr: &zeroOrOneExpr{
								pos: position{line: 439, col: 35, offset: 13242},
								expr: &ruleRefExpr{
									pos:  position{line: 439, col: 35, offset: 13242},
									name: "PoolRange",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 439, col: 46, offset: 13253},
							label: "order",
							expr: &zeroOrOneExpr{
								pos: position{line: 439, col: 52, offset: 13259},
								expr: &ruleRefExpr{
									pos:  position{line: 439, col: 52, offset: 13259},
									name: "OrderArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "HTTPProc",
			pos:  position{line: 443, col: 1, offset: 13395},
			expr: &actionExpr{
				pos: position{line: 444, col: 5, offset: 13408},
				run: (*parser).callonHTTPProc1,
				expr: &seqExpr{
					pos: position{line: 444, col: 5, offset: 13408},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 444, col: 5, offset: 13408},
							val:        "get",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 444, col: 12, offset: 13415},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 444, col: 14, offset: 13417},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 444, col: 18, offset: 13421},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 444, col: 22, offset: 13425},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 444, col: 29, offset: 13432},
								expr: &ruleRefExpr{
									pos:  position{line: 444, col: 29, offset: 13432},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 444, col: 40, offset: 13443},
							label: "layout",
							expr: &zeroOrOneExpr{
								pos: position{line: 444, col: 47, offset: 13450},
								expr: &ruleRefExpr{
									pos:  position{line: 444, col: 47, offset: 13450},
									name: "LayoutArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 448, col: 1, offset: 13576},
			expr: &actionExpr{
				pos: position{line: 448, col: 7, offset: 13582},
				run: (*parser).callonURL1,
				expr: &seqExpr{
					pos: position{line: 448, col: 7, offset: 13582},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 448, col: 8, offset: 13583},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 448, col: 8, offset: 13583},
									val:        "http:",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 448, col: 18, offset: 13593},
									val:        "https:",
									ignoreCase: false,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 448, col: 28, offset: 13603},
							name: "Path",
						},
					},
				},
			},
		},
		{
			name: "Path",
			pos:  position{line: 450, col: 1, offset: 13640},
			expr: &choiceExpr{
				pos: position{line: 451, col: 5, offset: 13649},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 451, col: 5, offset: 13649},
						run: (*parser).callonPath2,
						expr: &labeledExpr{
							pos:   position{line: 451, col: 5, offset: 13649},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 451, col: 7, offset: 13651},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 452, col: 5, offset: 13686},
						run: (*parser).callonPath5,
						expr: &oneOrMoreExpr{
							pos: position{line: 452, col: 5, offset: 13686},
							expr: &charClassMatcher{
								pos:        position{line: 452, col: 5, offset: 13686},
								val:        "[0-9a-zA-Z!@$%^&*()_=<>,./?:[\\]{}~|+-]",
								chars:      []rune{'!', '@', '$', '%', '^', '&', '*', '(', ')', '_', '=', '<', '>', ',', '.', '/', '?', ':', '[', ']', '{', '}', '~', '|', '+', '-'},
								ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PoolAt",
			pos:  position{line: 455, col: 1, offset: 13791},
			expr: &actionExpr{
				pos: position{line: 456, col: 5, offset: 13802},
				run: (*parser).callonPoolAt1,
				expr: &seqExpr{
					pos: position{line: 456, col: 5, offset: 13802},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 456, col: 5, offset: 13802},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 456, col: 7, offset: 13804},
							val:        "at",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 456, col: 13, offset: 13810},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 456, col: 15, offset: 13812},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 456, col: 18, offset: 13815},
								name: "KSUID",
							},
						},
					},
				},
			},
		},
		{
			name: "KSUID",
			pos:  position{line: 459, col: 1, offset: 13881},
			expr: &actionExpr{
				pos: position{line: 459, col: 9, offset: 13889},
				run: (*parser).callonKSUID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 459, col: 9, offset: 13889},
					expr: &charClassMatcher{
						pos:        position{line: 459, col: 10, offset: 13890},
						val:        "[0-9a-zA-Z]",
						ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "PoolRange",
			pos:  position{line: 461, col: 1, offset: 13936},
			expr: &actionExpr{
				pos: position{line: 462, col: 5, offset: 13950},
				run: (*parser).callonPoolRange1,
				expr: &seqExpr{
					pos: position{line: 462, col: 5, offset: 13950},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 462, col: 5, offset: 13950},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 462, col: 7, offset: 13952},
							val:        "range",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 462, col: 16, offset: 13961},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 462, col: 18, offset: 13963},
							label: "lower",
							expr: &ruleRefExpr{
								pos:  position{line: 462, col: 24, offset: 13969},
								name: "Literal",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 462, col: 32, offset: 13977},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 462, col: 34, offset: 13979},
							val:        "to",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 462, col: 40, offset: 13985},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 462, col: 42, offset: 13987},
							label: "upper",
							expr: &ruleRefExpr{
								pos:  position{line: 462, col: 48, offset: 13993},
								name: "Literal",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolSpec",
			pos:  position{line: 466, col: 1, offset: 14098},
			expr: &choiceExpr{
				pos: position{line: 467, col: 5, offset: 14111},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 467, col: 5, offset: 14111},
						run: (*parser).callonPoolSpec2,
						expr: &seqExpr{
							pos: position{line: 467, col: 5, offset: 14111},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 467, col: 5, offset: 14111},
									label: "pool",
									expr: &ruleRefExpr{
										pos:  position{line: 467, col: 10, offset: 14116},
										name: "PoolName",
									},
								},
								&labeledExpr{
									pos:   position{line: 467, col: 19, offset: 14125},
									label: "commit",
									expr: &zeroOrOneExpr{
										pos: position{line: 467, col: 26, offset: 14132},
										expr: &ruleRefExpr{
											pos:  position{line: 467, col: 26, offset: 14132},
											name: "PoolCommit",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 467, col: 38, offset: 14144},
									label: "meta",
									expr: &zeroOrOneExpr{
										pos: position{line: 467, col: 43, offset: 14149},
										expr: &ruleRefExpr{
											pos:  position{line: 467, col: 43, offset: 14149},
											name: "PoolMeta",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 470, col: 5, offset: 14258},
						run: (*parser).callonPoolSpec12,
						expr: &labeledExpr{
							pos:   position{line: 470, col: 5, offset: 14258},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 470, col: 10, offset: 14263},
								name: "PoolMeta",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolCommit",
			pos:  position{line: 474, col: 1, offset: 14364},
			expr: &actionExpr{
				pos: position{line: 475, col: 5, offset: 14379},
				run: (*parser).callonPoolCommit1,
				expr: &seqExpr{
					pos: position{line: 475, col: 5, offset: 14379},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 475, col: 5, offset: 14379},
							val:        "@",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 475, col: 9, offset: 14383},
							label: "commit",
							expr: &ruleRefExpr{
								pos:  position{line: 475, col: 16, offset: 14390},
								name: "PoolName",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolMeta",
			pos:  position{line: 477, col: 1, offset: 14423},
			expr: &actionExpr{
				pos: position{line: 478, col: 5, offset: 14436},
				run: (*parser).callonPoolMeta1,
				expr: &seqExpr{
					pos: position{line: 478, col: 5, offset: 14436},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 478, col: 5, offset: 14436},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 478, col: 9, offset: 14440},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 478, col: 14, offset: 14445},
								name: "PoolIdentifier",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolName",
			pos:  position{line: 480, col: 1, offset: 14482},
			expr: &choiceExpr{
				pos: position{line: 481, col: 5, offset: 14495},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 481, col: 5, offset: 14495},
						name: "PoolIdentifier",
					},
					&ruleRefExpr{
						pos:  position{line: 482, col: 5, offset: 14514},
						name: "KSUID",
					},
					&ruleRefExpr{
						pos:  position{line: 483, col: 5, offset: 14524},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "PoolIdentifier",
			pos:  position{line: 485, col: 1, offset: 14538},
			expr: &actionExpr{
				pos: position{line: 486, col: 5, offset: 14557},
				run: (*parser).callonPoolIdentifier1,
				expr: &seqExpr{
					pos: position{line: 486, col: 5, offset: 14557},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 486, col: 6, offset: 14558},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 486, col: 6, offset: 14558},
									name: "IdentifierStart",
								},
								&litMatcher{
									pos:        position{line: 486, col: 24, offset: 14576},
									val:        ".",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 486, col: 29, offset: 14581},
							expr: &choiceExpr{
								pos: position{line: 486, col: 30, offset: 14582},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 486, col: 30, offset: 14582},
										name: "IdentifierRest",
									},
									&litMatcher{
										pos:        position{line: 486, col: 47, offset: 14599},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LayoutArg",
			pos:  position{line: 488, col: 1, offset: 14638},
			expr: &actionExpr{
				pos: position{line: 489, col: 5, offset: 14652},
				run: (*parser).callonLayoutArg1,
				expr: &seqExpr{
					pos: position{line: 489, col: 5, offset: 14652},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 489, col: 5, offset: 14652},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 489, col: 7, offset: 14654},
							val:        "order",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 489, col: 16, offset: 14663},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 489, col: 18, offset: 14665},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 489, col: 23, offset: 14670},
								name: "FieldExprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 489, col: 34, offset: 14681},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 489, col: 40, offset: 14687},
								name: "OrderSuffix",
							},
						},
					},
				},
			},
		},
		{
			name: "FormatArg",
			pos:  position{line: 493, col: 1, offset: 14797},
			expr: &actionExpr{
				pos: position{line: 494, col: 5, offset: 14811},
				run: (*parser).callonFormatArg1,
				expr: &seqExpr{
					pos: position{line: 494, col: 5, offset: 14811},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 494, col: 5, offset: 14811},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 494, col: 7, offset: 14813},
							val:        "format",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 494, col: 17, offset: 14823},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 494, col: 19, offset: 14825},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 494, col: 23, offset: 14829},
								name: "IdentifierName",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderSuffix",
			pos:  position{line: 496, col: 1, offset: 14865},
			expr: &choiceExpr{
				pos: position{line: 497, col: 5, offset: 14881},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 497, col: 5, offset: 14881},
						run: (*parser).callonOrderSuffix2,
						expr: &litMatcher{
							pos:        position{line: 497, col: 5, offset: 14881},
							val:        ":asc",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 498, col: 5, offset: 14916},
						run: (*parser).callonOrderSuffix4,
						expr: &litMatcher{
							pos:        position{line: 498, col: 5, offset: 14916},
							val:        ":desc",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 499, col: 5, offset: 14953},
						run: (*parser).callonOrderSuffix6,
						expr: &litMatcher{
							pos:        position{line: 499, col: 5, offset: 14953},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OrderArg",
			pos:  position{line: 501, col: 1, offset: 14979},
			expr: &choiceExpr{
				pos: position{line: 502, col: 5, offset: 14992},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 502, col: 5, offset: 14992},
						run: (*parser).callonOrderArg2,
						expr: &seqExpr{
							pos: position{line: 502, col: 5, offset: 14992},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 502, col: 5, offset: 14992},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 502, col: 7, offset: 14994},
									val:        "order",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 502, col: 16, offset: 15003},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 502, col: 18, offset: 15005},
									val:        "asc",
									ignoreCase: true,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 503, col: 5, offset: 15039},
						run: (*parser).callonOrderArg8,
						expr: &seqExpr{
							pos: position{line: 503, col: 5, offset: 15039},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 503, col: 5, offset: 15039},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 503, col: 7, offset: 15041},
									val:        "order",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 503, col: 16, offset: 15050},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 503, col: 18, offset: 15052},
									val:        "desc",
									ignoreCase: true,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassProc",
			pos:  position{line: 505, col: 1, offset: 15085},
			expr: &actionExpr{
				pos: position{line: 506, col: 5, offset: 15098},
				run: (*parser).callonPassProc1,
				expr: &litMatcher{
					pos:        position{line: 506, col: 5, offset: 15098},
					val:        "pass",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ExplodeProc",
			pos:  position{line: 512, col: 1, offset: 15293},
			expr: &actionExpr{
				pos: position{line: 513, col: 5, offset: 15309},
				run: (*parser).callonExplodeProc1,
				expr: &seqExpr{
					pos: position{line: 513, col: 5, offset: 15309},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 513, col: 5, offset: 15309},
							val:        "explode",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 513, col: 16, offset: 15320},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 513, col: 18, offset: 15322},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 513, col: 23, offset: 15327},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 513, col: 29, offset: 15333},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 513, col: 33, offset: 15337},
								name: "TypeArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 513, col: 41, offset: 15345},
							label: "as",
							expr: &zeroOrOneExpr{
								pos: position{line: 513, col: 44, offset: 15348},
								expr: &ruleRefExpr{
									pos:  position{line: 513, col: 44, offset: 15348},
									name: "AsArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MergeProc",
			pos:  position{line: 517, col: 1, offset: 15460},
			expr: &actionExpr{
				pos: position{line: 518, col: 5, offset: 15474},
				run: (*parser).callonMergeProc1,
				expr: &seqExpr{
					pos: position{line: 518, col: 5, offset: 15474},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 518, col: 5, offset: 15474},
							val:        "merge",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 518, col: 14, offset: 15483},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 518, col: 16, offset: 15485},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 518, col: 22, offset: 15491},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "OverProc",
			pos:  position{line: 522, col: 1, offset: 15574},
			expr: &actionExpr{
				pos: position{line: 523, col: 5, offset: 15587},
				run: (*parser).callonOverProc1,
				expr: &seqExpr{
					pos: position{line: 523, col: 5, offset: 15587},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 523, col: 5, offset: 15587},
							val:        "over",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 523, col: 13, offset: 15595},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 523, col: 15, offset: 15597},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 523, col: 21, offset: 15603},
								name: "Exprs",
							},
						},
					},
				},
			},
		},
		{
			name: "LetProc",
			pos:  position{line: 527, col: 1, offset: 15686},
			expr: &actionExpr{
				pos: position{line: 528, col: 5, offset: 15698},
				run: (*parser).callonLetProc1,
				expr: &seqExpr{
					pos: position{line: 528, col: 5, offset: 15698},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 528, col: 5, offset: 15698},
							val:        "let",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 528, col: 12, offset: 15705},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 528, col: 14, offset: 15707},
							label: "locals",
							expr: &ruleRefExpr{
								pos:  position{line: 528, col: 21, offset: 15714},
								name: "FlexAssignments",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 528, col: 37, offset: 15730},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 528, col: 40, offset: 15733},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 528, col: 45, offset: 15738},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 528, col: 48, offset: 15741},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 528, col: 52, offset: 15745},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 528, col: 55, offset: 15748},
							label: "seq",
							expr: &ruleRefExpr{
								pos:  position{line: 528, col: 59, offset: 15752},
								name: "Sequential",
							},
						},
						&litMatcher{
							pos:        position{line: 528, col: 70, offset: 15763},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "YieldProc",
			pos:  position{line: 532, col: 1, offset: 15858},
			expr: &actionExpr{
				pos: position{line: 533, col: 5, offset: 15872},
				run: (*parser).callonYieldProc1,
				expr: &seqExpr{
					pos: position{line: 533, col: 5, offset: 15872},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 533, col: 5, offset: 15872},
							val:        "yield",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 533, col: 14, offset: 15881},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 533, col: 16, offset: 15883},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 533, col: 22, offset: 15889},
								name: "Exprs",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeArg",
			pos:  position{line: 537, col: 1, offset: 15973},
			expr: &actionExpr{
				pos: position{line: 538, col: 5, offset: 15985},
				run: (*parser).callonTypeArg1,
				expr: &seqExpr{
					pos: position{line: 538, col: 5, offset: 15985},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 538, col: 5, offset: 15985},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 538, col: 7, offset: 15987},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 538, col: 10, offset: 15990},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 538, col: 12, offset: 15992},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 538, col: 16, offset: 15996},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "AsArg",
			pos:  position{line: 540, col: 1, offset: 16021},
			expr: &actionExpr{
				pos: position{line: 541, col: 5, offset: 16031},
				run: (*parser).callonAsArg1,
				expr: &seqExpr{
					pos: position{line: 541, col: 5, offset: 16031},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 541, col: 5, offset: 16031},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 541, col: 7, offset: 16033},
							name: "AS",
						},
						&ruleRefExpr{
							pos:  position{line: 541, col: 10, offset: 16036},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 541, col: 12, offset: 16038},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 541, col: 16, offset: 16042},
								name: "Lval",
							},
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 545, col: 1, offset: 16093},
			expr: &ruleRefExpr{
				pos:  position{line: 545, col: 8, offset: 16100},
				name: "DerefExpr",
			},
		},
		{
			name: "Lvals",
			pos:  position{line: 547, col: 1, offset: 16111},
			expr: &actionExpr{
				pos: position{line: 548, col: 5, offset: 16121},
				run: (*parser).callonLvals1,
				expr: &seqExpr{
					pos: position{line: 548, col: 5, offset: 16121},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 548, col: 5, offset: 16121},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 548, col: 11, offset: 16127},
								name: "Lval",
							},
						},
						&labeledExpr{
							pos:   position{line: 548, col: 16, offset: 16132},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 548, col: 21, offset: 16137},
								expr: &actionExpr{
									pos: position{line: 548, col: 22, offset: 16138},
									run: (*parser).callonLvals7,
									expr: &seqExpr{
										pos: position{line: 548, col: 22, offset: 16138},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 548, col: 22, offset: 16138},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 548, col: 25, offset: 16141},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 548, col: 29, offset: 16145},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 548, col: 32, offset: 16148},
												label: "lval",
												expr: &ruleRefExpr{
													pos:  position{line: 548, col: 37, offset: 16153},
													name: "Lval",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 552, col: 1, offset: 16265},
			expr: &ruleRefExpr{
				pos:  position{line: 552, col: 13, offset: 16277},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 554, col: 1, offset: 16283},
			expr: &actionExpr{
				pos: position{line: 555, col: 5, offset: 16298},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 555, col: 5, offset: 16298},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 555, col: 5, offset: 16298},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 555, col: 11, offset: 16304},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 555, col: 21, offset: 16314},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 555, col: 26, offset: 16319},
								expr: &seqExpr{
									pos: position{line: 555, col: 27, offset: 16320},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 555, col: 27, offset: 16320},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 555, col: 30, offset: 16323},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 555, col: 34, offset: 16327},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 555, col: 37, offset: 16330},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignments",
			pos:  position{line: 565, col: 1, offset: 16529},
			expr: &actionExpr{
				pos: position{line: 566, col: 5, offset: 16545},
				run: (*parser).callonAssignments1,
				expr: &seqExpr{
					pos: position{line: 566, col: 5, offset: 16545},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 566, col: 5, offset: 16545},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 566, col: 11, offset: 16551},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 566, col: 22, offset: 16562},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 566, col: 27, offset: 16567},
								expr: &actionExpr{
									pos: position{line: 566, col: 28, offset: 16568},
									run: (*parser).callonAssignments7,
									expr: &seqExpr{
										pos: position{line: 566, col: 28, offset: 16568},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 566, col: 28, offset: 16568},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 566, col: 31, offset: 16571},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 566, col: 35, offset: 16575},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 566, col: 38, offset: 16578},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 566, col: 40, offset: 16580},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 570, col: 1, offset: 16691},
			expr: &actionExpr{
				pos: position{line: 571, col: 5, offset: 16706},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 571, col: 5, offset: 16706},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 571, col: 5, offset: 16706},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 571, col: 9, offset: 16710},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 571, col: 14, offset: 16715},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 571, col: 17, offset: 16718},
							val:        ":=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 571, col: 22, offset: 16723},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 571, col: 25, offset: 16726},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 571, col: 29, offset: 16730},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 573, col: 1, offset: 16821},
			expr: &ruleRefExpr{
				pos:  position{line: 573, col: 8, offset: 16828},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 575, col: 1, offset: 16845},
			expr: &choiceExpr{
				pos: position{line: 576, col: 5, offset: 16865},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 576, col: 5, offset: 16865},
						run: (*parser).callonConditionalExpr2,
						expr: &seqExpr{
							pos: position{line: 576, col: 5, offset: 16865},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 576, col: 5, offset: 16865},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 576, col: 15, offset: 16875},
										name: "LogicalOrExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 576, col: 29, offset: 16889},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 576, col: 32, offset: 16892},
									val:        "?",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 576, col: 36, offset: 16896},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 576, col: 39, offset: 16899},
									label: "thenClause",
									expr: &ruleRefExpr{
										pos:  position{line: 576, col: 50, offset: 16910},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 576, col: 55, offset: 16915},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 576, col: 58, offset: 16918},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 576, col: 62, offset: 16922},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 576, col: 65, offset: 16925},
									label: "elseClause",
									expr: &ruleRefExpr{
										pos:  position{line: 576, col: 76, offset: 16936},
										name: "Expr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 579, col: 5, offset: 17076},
						name: "LogicalOrExpr",
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 581, col: 1, offset: 17091},
			expr: &actionExpr{
				pos: position{line: 582, col: 5, offset: 17109},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 582, col: 5, offset: 17109},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 582, col: 5, offset: 17109},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 582, col: 11, offset: 17115},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 583, col: 5, offset: 17134},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 583, col: 10, offset: 17139},
								expr: &actionExpr{
									pos: position{line: 583, col: 11, offset: 17140},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 583, col: 11, offset: 17140},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 583, col: 11, offset: 17140},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 583, col: 14, offset: 17143},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 583, col: 17, offset: 17146},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 583, col: 25, offset: 17154},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 583, col: 28, offset: 17157},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 583, col: 33, offset: 17162},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 587, col: 1, offset: 17280},
			expr: &actionExpr{
				pos: position{line: 588, col: 5, offset: 17299},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 588, col: 5, offset: 17299},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 588, col: 5, offset: 17299},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 588, col: 11, offset: 17305},
								name: "EqualityCompareExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 589, col: 5, offset: 17329},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 589, col: 10, offset: 17334},
								expr: &actionExpr{
									pos: position{line: 589, col: 11, offset: 17335},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 589, col: 11, offset: 17335},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 589, col: 11, offset: 17335},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 589, col: 14, offset: 17338},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 589, col: 17, offset: 17341},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 589, col: 26, offset: 17350},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 589, col: 29, offset: 17353},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 589, col: 34, offset: 17358},
													name: "EqualityCompareExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityCompareExpr",
			pos:  position{line: 593, col: 1, offset: 17481},
			expr: &choiceExpr{
				pos: position{line: 594, col: 5, offset: 17505},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 594, col: 5, offset: 17505},
						name: "PatternMatch",
					},
					&actionExpr{
						pos: position{line: 595, col: 5, offset: 17522},
						run: (*parser).callonEqualityCompareExpr3,
						expr: &seqExpr{
							pos: position{line: 595, col: 5, offset: 17522},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 595, col: 5, offset: 17522},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 595, col: 11, offset: 17528},
										name: "RelativeExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 596, col: 5, offset: 17545},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 596, col: 10, offset: 17550},
										expr: &actionExpr{
											pos: position{line: 596, col: 11, offset: 17551},
											run: (*parser).callonEqualityCompareExpr9,
											expr: &seqExpr{
												pos: position{line: 596, col: 11, offset: 17551},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 596, col: 11, offset: 17551},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 596, col: 14, offset: 17554},
														label: "comp",
														expr: &ruleRefExpr{
															pos:  position{line: 596, col: 19, offset: 17559},
															name: "EqualityComparator",
														},
													},
													&ruleRefExpr{
														pos:  position{line: 596, col: 38, offset: 17578},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 596, col: 41, offset: 17581},
														label: "expr",
														expr: &ruleRefExpr{
															pos:  position{line: 596, col: 46, offset: 17586},
															name: "RelativeExpr",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityOperator",
			pos:  position{line: 600, col: 1, offset: 17704},
			expr: &choiceExpr{
				pos: position{line: 601, col: 5, offset: 17725},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 601, col: 5, offset: 17725},
						run: (*parser).callonEqualityOperator2,
						expr: &litMatcher{
							pos:        position{line: 601, col: 5, offset: 17725},
							val:        "==",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 602, col: 5, offset: 17754},
						run: (*parser).callonEqualityOperator4,
						expr: &litMatcher{
							pos:        position{line: 602, col: 5, offset: 17754},
							val:        "!=",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "EqualityComparator",
			pos:  position{line: 604, col: 1, offset: 17791},
			expr: &choiceExpr{
				pos: position{line: 605, col: 5, offset: 17814},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 605, col: 5, offset: 17814},
						name: "EqualityOperator",
					},
					&actionExpr{
						pos: position{line: 606, col: 5, offset: 17835},
						run: (*parser).callonEqualityComparator3,
						expr: &seqExpr{
							pos: position{line: 606, col: 5, offset: 17835},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 606, col: 5, offset: 17835},
									val:        "in",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 606, col: 10, offset: 17840},
									expr: &ruleRefExpr{
										pos:  position{line: 606, col: 11, offset: 17841},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeExpr",
			pos:  position{line: 608, col: 1, offset: 17888},
			expr: &actionExpr{
				pos: position{line: 609, col: 5, offset: 17905},
				run: (*parser).callonRelativeExpr1,
				expr: &seqExpr{
					pos: position{line: 609, col: 5, offset: 17905},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 609, col: 5, offset: 17905},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 609, col: 11, offset: 17911},
								name: "AdditiveExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 610, col: 5, offset: 17928},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 610, col: 10, offset: 17933},
								expr: &actionExpr{
									pos: position{line: 610, col: 11, offset: 17934},
									run: (*parser).callonRelativeExpr7,
									expr: &seqExpr{
										pos: position{line: 610, col: 11, offset: 17934},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 610, col: 11, offset: 17934},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 610, col: 14, offset: 17937},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 610, col: 17, offset: 17940},
													name: "RelativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 610, col: 34, offset: 17957},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 610, col: 37, offset: 17960},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 610, col: 42, offset: 17965},
													name: "AdditiveExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeOperator",
			pos:  position{line: 614, col: 1, offset: 18081},
			expr: &actionExpr{
				pos: position{line: 614, col: 20, offset: 18100},
				run: (*parser).callonRelativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 614, col: 21, offset: 18101},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 614, col: 21, offset: 18101},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 614, col: 28, offset: 18108},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 614, col: 34, offset: 18114},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 614, col: 41, offset: 18121},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 616, col: 1, offset: 18158},
			expr: &actionExpr{
				pos: position{line: 617, col: 5, offset: 18175},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 617, col: 5, offset: 18175},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 617, col: 5, offset: 18175},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 617, col: 11, offset: 18181},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 618, col: 5, offset: 18204},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 618, col: 10, offset: 18209},
								expr: &actionExpr{
									pos: position{line: 618, col: 11, offset: 18210},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 618, col: 11, offset: 18210},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 618, col: 11, offset: 18210},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 618, col: 14, offset: 18213},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 618, col: 17, offset: 18216},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 618, col: 34, offset: 18233},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 618, col: 37, offset: 18236},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 618, col: 42, offset: 18241},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 622, col: 1, offset: 18363},
			expr: &actionExpr{
				pos: position{line: 622, col: 20, offset: 18382},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 622, col: 21, offset: 18383},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 622, col: 21, offset: 18383},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 622, col: 27, offset: 18389},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 624, col: 1, offset: 18426},
			expr: &actionExpr{
				pos: position{line: 625, col: 5, offset: 18449},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 625, col: 5, offset: 18449},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 625, col: 5, offset: 18449},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 625, col: 11, offset: 18455},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 626, col: 5, offset: 18467},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 626, col: 10, offset: 18472},
								expr: &actionExpr{
									pos: position{line: 626, col: 11, offset: 18473},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 626, col: 11, offset: 18473},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 626, col: 11, offset: 18473},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 626, col: 14, offset: 18476},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 626, col: 17, offset: 18479},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 626, col: 40, offset: 18502},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 626, col: 43, offset: 18505},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 626, col: 48, offset: 18510},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 630, col: 1, offset: 18621},
			expr: &actionExpr{
				pos: position{line: 630, col: 26, offset: 18646},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 630, col: 27, offset: 18647},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 630, col: 27, offset: 18647},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 630, col: 33, offset: 18653},
							val:        "/",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 630, col: 39, offset: 18659},
							val:        "%",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 632, col: 1, offset: 18696},
			expr: &choiceExpr{
				pos: position{line: 633, col: 5, offset: 18708},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 633, col: 5, offset: 18708},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 633, col: 5, offset: 18708},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 633, col: 5, offset: 18708},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 633, col: 9, offset: 18712},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 633, col: 12, offset: 18715},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 633, col: 14, offset: 18717},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 636, col: 5, offset: 18826},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 638, col: 1, offset: 18836},
			expr: &choiceExpr{
				pos: position{line: 639, col: 5, offset: 18849},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 639, col: 5, offset: 18849},
						name: "MatchExpr",
					},
					&actionExpr{
						pos: position{line: 640, col: 5, offset: 18863},
						run: (*parser).callonFuncExpr3,
						expr: &seqExpr{
							pos: position{line: 640, col: 5, offset: 18863},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 640, col: 5, offset: 18863},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 640, col: 11, offset: 18869},
										name: "Cast",
									},
								},
								&labeledExpr{
									pos:   position{line: 640, col: 16, offset: 18874},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 640, col: 21, offset: 18879},
										expr: &ruleRefExpr{
											pos:  position{line: 640, col: 22, offset: 18880},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 643, col: 5, offset: 18951},
						run: (*parser).callonFuncExpr10,
						expr: &seqExpr{
							pos: position{line: 643, col: 5, offset: 18951},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 643, col: 5, offset: 18951},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 643, col: 11, offset: 18957},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 643, col: 20, offset: 18966},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 643, col: 25, offset: 18971},
										expr: &ruleRefExpr{
											pos:  position{line: 643, col: 26, offset: 18972},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 646, col: 5, offset: 19043},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 647, col: 5, offset: 19057},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FuncGuard",
			pos:  position{line: 649, col: 1, offset: 19066},
			expr: &seqExpr{
				pos: position{line: 649, col: 13, offset: 19078},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 649, col: 13, offset: 19078},
						name: "NotFuncs",
					},
					&ruleRefExpr{
						pos:  position{line: 649, col: 22, offset: 19087},
						name: "__",
					},
					&litMatcher{
						pos:        position{line: 649, col: 25, offset: 19090},
						val:        "(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "NotFuncs",
			pos:  position{line: 651, col: 1, offset: 19095},
			expr: &choiceExpr{
				pos: position{line: 652, col: 5, offset: 19108},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 652, col: 5, offset: 19108},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 653, col: 5, offset: 19118},
						val:        "match",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 654, col: 5, offset: 19130},
						val:        "select",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 655, col: 5, offset: 19143},
						val:        "type",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "MatchExpr",
			pos:  position{line: 657, col: 1, offset: 19151},
			expr: &actionExpr{
				pos: position{line: 658, col: 5, offset: 19165},
				run: (*parser).callonMatchExpr1,
				expr: &seqExpr{
					pos: position{line: 658, col: 5, offset: 19165},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 658, col: 5, offset: 19165},
							val:        "match",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 658, col: 13, offset: 19173},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 658, col: 16, offset: 19176},
							val:        "(",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 658, col: 20, offset: 19180},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 658, col: 25, offset: 19185},
								name: "SearchBoolean",
							},
						},
						&litMatcher{
							pos:        position{line: 658, col: 39, offset: 19199},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Cast",
			pos:  position{line: 660, col: 1, offset: 19225},
			expr: &actionExpr{
				pos: position{line: 661, col: 5, offset: 19234},
				run: (*parser).callonCast1,
				expr: &seqExpr{
					pos: position{line: 661, col: 5, offset: 19234},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 661, col: 5, offset: 19234},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 661, col: 9, offset: 19238},
								name: "CastType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 661, col: 18, offset: 19247},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 661, col: 21, offset: 19250},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 661, col: 25, offset: 19254},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 661, col: 28, offset: 19257},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 661, col: 33, offset: 19262},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 661, col: 38, offset: 19267},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 661, col: 41, offset: 19270},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 665, col: 1, offset: 19367},
			expr: &actionExpr{
				pos: position{line: 666, col: 5, offset: 19380},
				run: (*parser).callonFunction1,
				expr: &seqExpr{
					pos: position{line: 666, col: 5, offset: 19380},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 666, col: 5, offset: 19380},
							expr: &ruleRefExpr{
								pos:  position{line: 666, col: 6, offset: 19381},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 666, col: 16, offset: 19391},
							label: "fn",
							expr: &ruleRefExpr{
								pos:  position{line: 666, col: 19, offset: 19394},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 666, col: 34, offset: 19409},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 666, col: 37, offset: 19412},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 666, col: 41, offset: 19416},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 666, col: 44, offset: 19419},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 666, col: 49, offset: 19424},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 666, col: 63, offset: 19438},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 666, col: 66, offset: 19441},
							val:        ")",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 666, col: 70, offset: 19445},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 666, col: 76, offset: 19451},
								expr: &ruleRefExpr{
									pos:  position{line: 666, col: 76, offset: 19451},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OptionalExprs",
			pos:  position{line: 670, col: 1, offset: 19572},
			expr: &choiceExpr{
				pos: position{line: 671, col: 5, offset: 19590},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 671, col: 5, offset: 19590},
						name: "Exprs",
					},
					&actionExpr{
						pos: position{line: 672, col: 5, offset: 19600},
						run: (*parser).callonOptionalExprs3,
						expr: &ruleRefExpr{
							pos:  position{line: 672, col: 5, offset: 19600},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 674, col: 1, offset: 19636},
			expr: &actionExpr{
				pos: position{line: 675, col: 5, offset: 19646},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 675, col: 5, offset: 19646},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 675, col: 5, offset: 19646},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 675, col: 11, offset: 19652},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 675, col: 16, offset: 19657},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 675, col: 21, offset: 19662},
								expr: &actionExpr{
									pos: position{line: 675, col: 22, offset: 19663},
									run: (*parser).callonExprs7,
									expr: &seqExpr{
										pos: position{line: 675, col: 22, offset: 19663},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 675, col: 22, offset: 19663},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 675, col: 25, offset: 19666},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 675, col: 29, offset: 19670},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 675, col: 32, offset: 19673},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 675, col: 34, offset: 19675},
													name: "Expr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 679, col: 1, offset: 19784},
			expr: &actionExpr{
				pos: position{line: 679, col: 13, offset: 19796},
				run: (*parser).callonDerefExpr1,
				expr: &seqExpr{
					pos: position{line: 679, col: 13, offset: 19796},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 679, col: 13, offset: 19796},
							expr: &ruleRefExpr{
								pos:  position{line: 679, col: 14, offset: 19797},
								name: "IP6",
							},
						},
						&labeledExpr{
							pos:   position{line: 679, col: 18, offset: 19801},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 679, col: 20, offset: 19803},
								name: "DerefExprPattern",
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExprPattern",
			pos:  position{line: 681, col: 1, offset: 19839},
			expr: &choiceExpr{
				pos: position{line: 682, col: 5, offset: 19860},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 682, col: 5, offset: 19860},
						run: (*parser).callonDerefExprPattern2,
						expr: &seqExpr{
							pos: position{line: 682, col: 5, offset: 19860},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 682, col: 5, offset: 19860},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 682, col: 11, offset: 19866},
										name: "DotID",
									},
								},
								&labeledExpr{
									pos:   position{line: 682, col: 17, offset: 19872},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 682, col: 22, offset: 19877},
										expr: &ruleRefExpr{
											pos:  position{line: 682, col: 23, offset: 19878},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 685, col: 5, offset: 19949},
						run: (*parser).callonDerefExprPattern9,
						expr: &seqExpr{
							pos: position{line: 685, col: 5, offset: 19949},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 685, col: 5, offset: 19949},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 685, col: 11, offset: 19955},
										name: "This",
									},
								},
								&labeledExpr{
									pos:   position{line: 685, col: 16, offset: 19960},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 685, col: 21, offset: 19965},
										expr: &ruleRefExpr{
											pos:  position{line: 685, col: 22, offset: 19966},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 688, col: 5, offset: 20037},
						run: (*parser).callonDerefExprPattern16,
						expr: &seqExpr{
							pos: position{line: 688, col: 5, offset: 20037},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 688, col: 5, offset: 20037},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 688, col: 11, offset: 20043},
										name: "Identifier",
									},
								},
								&labeledExpr{
									pos:   position{line: 688, col: 22, offset: 20054},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 688, col: 27, offset: 20059},
										expr: &ruleRefExpr{
											pos:  position{line: 688, col: 28, offset: 20060},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 691, col: 5, offset: 20131},
						run: (*parser).callonDerefExprPattern23,
						expr: &litMatcher{
							pos:        position{line: 691, col: 5, offset: 20131},
							val:        ".",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "This",
			pos:  position{line: 695, col: 1, offset: 20200},
			expr: &actionExpr{
				pos: position{line: 695, col: 8, offset: 20207},
				run: (*parser).callonThis1,
				expr: &litMatcher{
					pos:        position{line: 695, col: 8, offset: 20207},
					val:        "this",
					ignoreCase: false,
				},
			},
		},
		{
			name: "DotID",
			pos:  position{line: 697, col: 1, offset: 20269},
			expr: &choiceExpr{
				pos: position{line: 698, col: 5, offset: 20279},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 698, col: 5, offset: 20279},
						run: (*parser).callonDotID2,
						expr: &seqExpr{
							pos: position{line: 698, col: 5, offset: 20279},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 698, col: 5, offset: 20279},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 698, col: 9, offset: 20283},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 698, col: 15, offset: 20289},
										name: "Identifier",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 707, col: 5, offset: 20505},
						run: (*parser).callonDotID7,
						expr: &seqExpr{
							pos: position{line: 707, col: 5, offset: 20505},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 707, col: 5, offset: 20505},
									val:        ".",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 707, col: 9, offset: 20509},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 707, col: 13, offset: 20513},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 707, col: 18, offset: 20518},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 707, col: 23, offset: 20523},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 717, col: 1, offset: 20728},
			expr: &choiceExpr{
				pos: position{line: 718, col: 5, offset: 20738},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 718, col: 5, offset: 20738},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 718, col: 5, offset: 20738},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 718, col: 5, offset: 20738},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 718, col: 9, offset: 20742},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 718, col: 14, offset: 20747},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 718, col: 27, offset: 20760},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 718, col: 30, offset: 20763},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 718, col: 34, offset: 20767},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 718, col: 37, offset: 20770},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 718, col: 40, offset: 20773},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 718, col: 53, offset: 20786},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 724, col: 5, offset: 20957},
						run: (*parser).callonDeref13,
						expr: &seqExpr{
							pos: position{line: 724, col: 5, offset: 20957},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 724, col: 5, offset: 20957},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 724, col: 9, offset: 20961},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 724, col: 12, offset: 20964},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 724, col: 16, offset: 20968},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 724, col: 19, offset: 20971},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 724, col: 22, offset: 20974},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 724, col: 35, offset: 20987},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 730, col: 5, offset: 21158},
						run: (*parser).callonDeref22,
						expr: &seqExpr{
							pos: position{line: 730, col: 5, offset: 21158},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 730, col: 5, offset: 21158},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 730, col: 9, offset: 21162},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 730, col: 14, offset: 21167},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 730, col: 27, offset: 21180},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 730, col: 30, offset: 21183},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 730, col: 34, offset: 21187},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 730, col: 37, offset: 21190},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 736, col: 5, offset: 21363},
						run: (*parser).callonDeref31,
						expr: &seqExpr{
							pos: position{line: 736, col: 5, offset: 21363},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 736, col: 5, offset: 21363},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 736, col: 9, offset: 21367},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 736, col: 14, offset: 21372},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 736, col: 19, offset: 21377},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 737, col: 5, offset: 21426},
						run: (*parser).callonDeref37,
						expr: &seqExpr{
							pos: position{line: 737, col: 5, offset: 21426},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 737, col: 5, offset: 21426},
									val:        ".",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 737, col: 9, offset: 21430},
									expr: &litMatcher{
										pos:        position{line: 737, col: 11, offset: 21432},
										val:        ".",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 737, col: 16, offset: 21437},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 737, col: 19, offset: 21440},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 739, col: 1, offset: 21491},
			expr: &choiceExpr{
				pos: position{line: 740, col: 5, offset: 21503},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 740, col: 5, offset: 21503},
						name: "Record",
					},
					&ruleRefExpr{
						pos:  position{line: 741, col: 5, offset: 21514},
						name: "Array",
					},
					&ruleRefExpr{
						pos:  position{line: 742, col: 5, offset: 21524},
						name: "Set",
					},
					&ruleRefExpr{
						pos:  position{line: 743, col: 5, offset: 21532},
						name: "Map",
					},
					&ruleRefExpr{
						pos:  position{line: 744, col: 5, offset: 21540},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 745, col: 5, offset: 21552},
						run: (*parser).callonPrimary7,
						expr: &seqExpr{
							pos: position{line: 745, col: 5, offset: 21552},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 745, col: 5, offset: 21552},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 745, col: 9, offset: 21556},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 745, col: 12, offset: 21559},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 745, col: 17, offset: 21564},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 745, col: 22, offset: 21569},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 745, col: 25, offset: 21572},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Record",
			pos:  position{line: 747, col: 1, offset: 21598},
			expr: &actionExpr{
				pos: position{line: 748, col: 5, offset: 21609},
				run: (*parser).callonRecord1,
				expr: &seqExpr{
					pos: position{line: 748, col: 5, offset: 21609},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 748, col: 5, offset: 21609},
							val:        "{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 748, col: 9, offset: 21613},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 748, col: 12, offset: 21616},
							label: "fields",
							expr: &ruleRefExpr{
								pos:  position{line: 748, col: 19, offset: 21623},
								name: "Fields",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 748, col: 26, offset: 21630},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 748, col: 29, offset: 21633},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Fields",
			pos:  position{line: 752, col: 1, offset: 21726},
			expr: &choiceExpr{
				pos: position{line: 753, col: 5, offset: 21737},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 753, col: 5, offset: 21737},
						run: (*parser).callonFields2,
						expr: &seqExpr{
							pos: position{line: 753, col: 5, offset: 21737},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 753, col: 5, offset: 21737},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 753, col: 11, offset: 21743},
										name: "Field",
									},
								},
								&labeledExpr{
									pos:   position{line: 753, col: 17, offset: 21749},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 753, col: 22, offset: 21754},
										expr: &ruleRefExpr{
											pos:  position{line: 753, col: 22, offset: 21754},
											name: "FieldTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 756, col: 5, offset: 21848},
						run: (*parser).callonFields9,
						expr: &ruleRefExpr{
							pos:  position{line: 756, col: 5, offset: 21848},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "FieldTail",
			pos:  position{line: 758, col: 1, offset: 21884},
			expr: &actionExpr{
				pos: position{line: 758, col: 13, offset: 21896},
				run: (*parser).callonFieldTail1,
				expr: &seqExpr{
					pos: position{line: 758, col: 13, offset: 21896},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 758, col: 13, offset: 21896},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 758, col: 16, offset: 21899},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 758, col: 20, offset: 21903},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 758, col: 23, offset: 21906},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 758, col: 25, offset: 21908},
								name: "Field",
							},
						},
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 760, col: 1, offset: 21933},
			expr: &actionExpr{
				pos: position{line: 761, col: 5, offset: 21943},
				run: (*parser).callonField1,
				expr: &seqExpr{
					pos: position{line: 761, col: 5, offset: 21943},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 761, col: 5, offset: 21943},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 761, col: 10, offset: 21948},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 761, col: 20, offset: 21958},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 761, col: 23, offset: 21961},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 761, col: 27, offset: 21965},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 761, col: 30, offset: 21968},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 761, col: 36, offset: 21974},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Array",
			pos:  position{line: 765, col: 1, offset: 22059},
			expr: &actionExpr{
				pos: position{line: 766, col: 5, offset: 22069},
				run: (*parser).callonArray1,
				expr: &seqExpr{
					pos: position{line: 766, col: 5, offset: 22069},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 766, col: 5, offset: 22069},
							val:        "[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 766, col: 9, offset: 22073},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 766, col: 12, offset: 22076},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 766, col: 18, offset: 22082},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 766, col: 32, offset: 22096},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 766, col: 35, offset: 22099},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Set",
			pos:  position{line: 770, col: 1, offset: 22189},
			expr: &actionExpr{
				pos: position{line: 771, col: 5, offset: 22197},
				run: (*parser).callonSet1,
				expr: &seqExpr{
					pos: position{line: 771, col: 5, offset: 22197},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 771, col: 5, offset: 22197},
							val:        "|[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 771, col: 10, offset: 22202},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 771, col: 13, offset: 22205},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 771, col: 19, offset: 22211},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 771, col: 33, offset: 22225},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 771, col: 36, offset: 22228},
							val:        "]|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Map",
			pos:  position{line: 775, col: 1, offset: 22317},
			expr: &actionExpr{
				pos: position{line: 776, col: 5, offset: 22325},
				run: (*parser).callonMap1,
				expr: &seqExpr{
					pos: position{line: 776, col: 5, offset: 22325},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 776, col: 5, offset: 22325},
							val:        "|{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 776, col: 10, offset: 22330},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 776, col: 13, offset: 22333},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 776, col: 19, offset: 22339},
								name: "Entries",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 776, col: 27, offset: 22347},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 776, col: 30, offset: 22350},
							val:        "}|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Entries",
			pos:  position{line: 780, col: 1, offset: 22441},
			expr: &choiceExpr{
				pos: position{line: 781, col: 5, offset: 22453},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 781, col: 5, offset: 22453},
						run: (*parser).callonEntries2,
						expr: &seqExpr{
							pos: position{line: 781, col: 5, offset: 22453},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 781, col: 5, offset: 22453},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 781, col: 11, offset: 22459},
										name: "Entry",
									},
								},
								&labeledExpr{
									pos:   position{line: 781, col: 17, offset: 22465},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 781, col: 22, offset: 22470},
										expr: &ruleRefExpr{
											pos:  position{line: 781, col: 22, offset: 22470},
											name: "EntryTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 784, col: 5, offset: 22564},
						run: (*parser).callonEntries9,
						expr: &ruleRefExpr{
							pos:  position{line: 784, col: 5, offset: 22564},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "EntryTail",
			pos:  position{line: 787, col: 1, offset: 22601},
			expr: &actionExpr{
				pos: position{line: 787, col: 13, offset: 22613},
				run: (*parser).callonEntryTail1,
				expr: &seqExpr{
					pos: position{line: 787, col: 13, offset: 22613},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 787, col: 13, offset: 22613},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 787, col: 16, offset: 22616},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 787, col: 20, offset: 22620},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 787, col: 23, offset: 22623},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 787, col: 25, offset: 22625},
								name: "Entry",
							},
						},
					},
				},
			},
		},
		{
			name: "Entry",
			pos:  position{line: 789, col: 1, offset: 22650},
			expr: &actionExpr{
				pos: position{line: 790, col: 5, offset: 22660},
				run: (*parser).callonEntry1,
				expr: &seqExpr{
					pos: position{line: 790, col: 5, offset: 22660},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 790, col: 5, offset: 22660},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 790, col: 9, offset: 22664},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 790, col: 14, offset: 22669},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 790, col: 17, offset: 22672},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 790, col: 21, offset: 22676},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 790, col: 24, offset: 22679},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 790, col: 30, offset: 22685},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLProc",
			pos:  position{line: 796, col: 1, offset: 22792},
			expr: &actionExpr{
				pos: position{line: 797, col: 5, offset: 22804},
				run: (*parser).callonSQLProc1,
				expr: &seqExpr{
					pos: position{line: 797, col: 5, offset: 22804},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 797, col: 5, offset: 22804},
							label: "selection",
							expr: &ruleRefExpr{
								pos:  position{line: 797, col: 15, offset: 22814},
								name: "SQLSelect",
							},
						},
						&labeledExpr{
							pos:   position{line: 798, col: 5, offset: 22828},
							label: "from",
							expr: &zeroOrOneExpr{
								pos: position{line: 798, col: 10, offset: 22833},
								expr: &ruleRefExpr{
									pos:  position{line: 798, col: 10, offset: 22833},
									name: "SQLFrom",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 799, col: 5, offset: 22846},
							label: "joins",
							expr: &zeroOrOneExpr{
								pos: position{line: 799, col: 11, offset: 22852},
								expr: &ruleRefExpr{
									pos:  position{line: 799, col: 11, offset: 22852},
									name: "SQLJoins",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 800, col: 5, offset: 22866},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 800, col: 11, offset: 22872},
								expr: &ruleRefExpr{
									pos:  position{line: 800, col: 11, offset: 22872},
									name: "SQLWhere",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 801, col: 5, offset: 22886},
							label: "groupby",
							expr: &zeroOrOneExpr{
								pos: position{line: 801, col: 13, offset: 22894},
								expr: &ruleRefExpr{
									pos:  position{line: 801, col: 13, offset: 22894},
									name: "SQLGroupBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 802, col: 5, offset: 22910},
							label: "having",
							expr: &zeroOrOneExpr{
								pos: position{line: 802, col: 12, offset: 22917},
								expr: &ruleRefExpr{
									pos:  position{line: 802, col: 12, offset: 22917},
									name: "SQLHaving",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 803, col: 5, offset: 22932},
							label: "orderby",
							expr: &zeroOrOneExpr{
								pos: position{line: 803, col: 13, offset: 22940},
								expr: &ruleRefExpr{
									pos:  position{line: 803, col: 13, offset: 22940},
									name: "SQLOrderBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 804, col: 5, offset: 22956},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 804, col: 11, offset: 22962},
								name: "SQLLimit",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLSelect",
			pos:  position{line: 828, col: 1, offset: 23329},
			expr: &choiceExpr{
				pos: position{line: 829, col: 5, offset: 23343},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 829, col: 5, offset: 23343},
						run: (*parser).callonSQLSelect2,
						expr: &seqExpr{
							pos: position{line: 829, col: 5, offset: 23343},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 829, col: 5, offset: 23343},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 829, col: 12, offset: 23350},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 829, col: 14, offset: 23352},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 830, col: 5, offset: 23380},
						run: (*parser).callonSQLSelect7,
						expr: &seqExpr{
							pos: position{line: 830, col: 5, offset: 23380},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 830, col: 5, offset: 23380},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 830, col: 12, offset: 23387},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 830, col: 14, offset: 23389},
									label: "assignments",
									expr: &ruleRefExpr{
										pos:  position{line: 830, col: 26, offset: 23401},
										name: "SQLAssignments",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignment",
			pos:  position{line: 832, col: 1, offset: 23445},
			expr: &choiceExpr{
				pos: position{line: 833, col: 5, offset: 23463},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 833, col: 5, offset: 23463},
						run: (*parser).callonSQLAssignment2,
						expr: &seqExpr{
							pos: position{line: 833, col: 5, offset: 23463},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 833, col: 5, offset: 23463},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 833, col: 9, offset: 23467},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 833, col: 14, offset: 23472},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 833, col: 16, offset: 23474},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 833, col: 19, offset: 23477},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 833, col: 21, offset: 23479},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 833, col: 25, offset: 23483},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 834, col: 5, offset: 23577},
						run: (*parser).callonSQLAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 834, col: 5, offset: 23577},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 834, col: 10, offset: 23582},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignments",
			pos:  position{line: 836, col: 1, offset: 23674},
			expr: &actionExpr{
				pos: position{line: 837, col: 5, offset: 23693},
				run: (*parser).callonSQLAssignments1,
				expr: &seqExpr{
					pos: position{line: 837, col: 5, offset: 23693},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 837, col: 5, offset: 23693},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 837, col: 11, offset: 23699},
								name: "SQLAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 837, col: 25, offset: 23713},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 837, col: 30, offset: 23718},
								expr: &actionExpr{
									pos: position{line: 837, col: 31, offset: 23719},
									run: (*parser).callonSQLAssignments7,
									expr: &seqExpr{
										pos: position{line: 837, col: 31, offset: 23719},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 837, col: 31, offset: 23719},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 837, col: 34, offset: 23722},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 837, col: 38, offset: 23726},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 837, col: 41, offset: 23729},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 837, col: 46, offset: 23734},
													name: "SQLAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLFrom",
			pos:  position{line: 841, col: 1, offset: 23855},
			expr: &choiceExpr{
				pos: position{line: 842, col: 5, offset: 23867},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 842, col: 5, offset: 23867},
						run: (*parser).callonSQLFrom2,
						expr: &seqExpr{
							pos: position{line: 842, col: 5, offset: 23867},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 842, col: 5, offset: 23867},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 842, col: 7, offset: 23869},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 842, col: 12, offset: 23874},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 842, col: 14, offset: 23876},
									label: "table",
									expr: &ruleRefExpr{
										pos:  position{line: 842, col: 20, offset: 23882},
										name: "SQLTable",
									},
								},
								&labeledExpr{
									pos:   position{line: 842, col: 29, offset: 23891},
									label: "alias",
									expr: &zeroOrOneExpr{
										pos: position{line: 842, col: 35, offset: 23897},
										expr: &ruleRefExpr{
											pos:  position{line: 842, col: 35, offset: 23897},
											name: "SQLAlias",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 845, col: 5, offset: 23992},
						run: (*parser).callonSQLFrom12,
						expr: &seqExpr{
							pos: position{line: 845, col: 5, offset: 23992},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 845, col: 5, offset: 23992},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 845, col: 7, offset: 23994},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 845, col: 12, offset: 23999},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 845, col: 14, offset: 24001},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAlias",
			pos:  position{line: 847, col: 1, offset: 24026},
			expr: &choiceExpr{
				pos: position{line: 848, col: 5, offset: 24039},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 848, col: 5, offset: 24039},
						run: (*parser).callonSQLAlias2,
						expr: &seqExpr{
							pos: position{line: 848, col: 5, offset: 24039},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 848, col: 5, offset: 24039},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 848, col: 7, offset: 24041},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 848, col: 10, offset: 24044},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 848, col: 12, offset: 24046},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 848, col: 15, offset: 24049},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 849, col: 5, offset: 24077},
						run: (*parser).callonSQLAlias9,
						expr: &seqExpr{
							pos: position{line: 849, col: 5, offset: 24077},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 849, col: 5, offset: 24077},
									name: "_",
								},
								&notExpr{
									pos: position{line: 849, col: 7, offset: 24079},
									expr: &seqExpr{
										pos: position{line: 849, col: 9, offset: 24081},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 849, col: 9, offset: 24081},
												name: "SQLTokenSentinels",
											},
											&ruleRefExpr{
												pos:  position{line: 849, col: 27, offset: 24099},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 849, col: 30, offset: 24102},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 849, col: 33, offset: 24105},
										name: "Lval",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLTable",
			pos:  position{line: 851, col: 1, offset: 24130},
			expr: &ruleRefExpr{
				pos:  position{line: 852, col: 5, offset: 24143},
				name: "Expr",
			},
		},
		{
			name: "SQLJoins",
			pos:  position{line: 854, col: 1, offset: 24149},
			expr: &actionExpr{
				pos: position{line: 855, col: 5, offset: 24162},
				run: (*parser).callonSQLJoins1,
				expr: &seqExpr{
					pos: position{line: 855, col: 5, offset: 24162},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 855, col: 5, offset: 24162},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 855, col: 11, offset: 24168},
								name: "SQLJoin",
							},
						},
						&labeledExpr{
							pos:   position{line: 855, col: 19, offset: 24176},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 855, col: 24, offset: 24181},
								expr: &actionExpr{
									pos: position{line: 855, col: 25, offset: 24182},
									run: (*parser).callonSQLJoins7,
									expr: &labeledExpr{
										pos:   position{line: 855, col: 25, offset: 24182},
										label: "join",
										expr: &ruleRefExpr{
											pos:  position{line: 855, col: 30, offset: 24187},
											name: "SQLJoin",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoin",
			pos:  position{line: 859, col: 1, offset: 24302},
			expr: &actionExpr{
				pos: position{line: 860, col: 5, offset: 24314},
				run: (*parser).callonSQLJoin1,
				expr: &seqExpr{
					pos: position{line: 860, col: 5, offset: 24314},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 860, col: 5, offset: 24314},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 860, col: 11, offset: 24320},
								name: "SQLJoinStyle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 860, col: 24, offset: 24333},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 860, col: 26, offset: 24335},
							name: "JOIN",
						},
						&ruleRefExpr{
							pos:  position{line: 860, col: 31, offset: 24340},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 860, col: 33, offset: 24342},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 860, col: 39, offset: 24348},
								name: "SQLTable",
							},
						},
						&labeledExpr{
							pos:   position{line: 860, col: 48, offset: 24357},
							label: "alias",
							expr: &zeroOrOneExpr{
								pos: position{line: 860, col: 54, offset: 24363},
								expr: &ruleRefExpr{
									pos:  position{line: 860, col: 54, offset: 24363},
									name: "SQLAlias",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 860, col: 64, offset: 24373},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 860, col: 66, offset: 24375},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 860, col: 69, offset: 24378},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 860, col: 71, offset: 24380},
							label: "leftKey",
							expr: &ruleRefExpr{
								pos:  position{line: 860, col: 79, offset: 24388},
								name: "JoinKey",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 860, col: 87, offset: 24396},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 860, col: 90, offset: 24399},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 860, col: 94, offset: 24403},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 860, col: 97, offset: 24406},
							label: "rightKey",
							expr: &ruleRefExpr{
								pos:  position{line: 860, col: 106, offset: 24415},
								name: "JoinKey",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoinStyle",
			pos:  position{line: 879, col: 1, offset: 24650},
			expr: &choiceExpr{
				pos: position{line: 880, col: 5, offset: 24667},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 880, col: 5, offset: 24667},
						run: (*parser).callonSQLJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 880, col: 5, offset: 24667},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 880, col: 5, offset: 24667},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 880, col: 7, offset: 24669},
									label: "style",
									expr: &choiceExpr{
										pos: position{line: 880, col: 14, offset: 24676},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 880, col: 14, offset: 24676},
												name: "ANTI",
											},
											&ruleRefExpr{
												pos:  position{line: 880, col: 21, offset: 24683},
												name: "INNER",
											},
											&ruleRefExpr{
												pos:  position{line: 880, col: 29, offset: 24691},
												name: "LEFT",
											},
											&ruleRefExpr{
												pos:  position{line: 880, col: 36, offset: 24698},
												name: "RIGHT",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 881, col: 5, offset: 24731},
						run: (*parser).callonSQLJoinStyle11,
						expr: &litMatcher{
							pos:        position{line: 881, col: 5, offset: 24731},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLWhere",
			pos:  position{line: 883, col: 1, offset: 24759},
			expr: &actionExpr{
				pos: position{line: 884, col: 5, offset: 24772},
				run: (*parser).callonSQLWhere1,
				expr: &seqExpr{
					pos: position{line: 884, col: 5, offset: 24772},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 884, col: 5, offset: 24772},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 884, col: 7, offset: 24774},
							name: "WHERE",
						},
						&ruleRefExpr{
							pos:  position{line: 884, col: 13, offset: 24780},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 884, col: 15, offset: 24782},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 884, col: 20, offset: 24787},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLGroupBy",
			pos:  position{line: 886, col: 1, offset: 24823},
			expr: &actionExpr{
				pos: position{line: 887, col: 5, offset: 24838},
				run: (*parser).callonSQLGroupBy1,
				expr: &seqExpr{
					pos: position{line: 887, col: 5, offset: 24838},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 887, col: 5, offset: 24838},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 887, col: 7, offset: 24840},
							name: "GROUP",
						},
						&ruleRefExpr{
							pos:  position{line: 887, col: 13, offset: 24846},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 887, col: 15, offset: 24848},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 887, col: 18, offset: 24851},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 887, col: 20, offset: 24853},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 887, col: 28, offset: 24861},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLHaving",
			pos:  position{line: 889, col: 1, offset: 24897},
			expr: &actionExpr{
				pos: position{line: 890, col: 5, offset: 24911},
				run: (*parser).callonSQLHaving1,
				expr: &seqExpr{
					pos: position{line: 890, col: 5, offset: 24911},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 890, col: 5, offset: 24911},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 890, col: 7, offset: 24913},
							name: "HAVING",
						},
						&ruleRefExpr{
							pos:  position{line: 890, col: 14, offset: 24920},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 890, col: 16, offset: 24922},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 890, col: 21, offset: 24927},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrderBy",
			pos:  position{line: 892, col: 1, offset: 24963},
			expr: &actionExpr{
				pos: position{line: 893, col: 5, offset: 24978},
				run: (*parser).callonSQLOrderBy1,
				expr: &seqExpr{
					pos: position{line: 893, col: 5, offset: 24978},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 893, col: 5, offset: 24978},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 893, col: 7, offset: 24980},
							name: "ORDER",
						},
						&ruleRefExpr{
							pos:  position{line: 893, col: 13, offset: 24986},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 893, col: 15, offset: 24988},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 893, col: 18, offset: 24991},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 893, col: 20, offset: 24993},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 893, col: 25, offset: 24998},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 893, col: 31, offset: 25004},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 893, col: 37, offset: 25010},
								name: "SQLOrder",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrder",
			pos:  position{line: 897, col: 1, offset: 25120},
			expr: &choiceExpr{
				pos: position{line: 898, col: 5, offset: 25133},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 898, col: 5, offset: 25133},
						run: (*parser).callonSQLOrder2,
						expr: &seqExpr{
							pos: position{line: 898, col: 5, offset: 25133},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 898, col: 5, offset: 25133},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 898, col: 7, offset: 25135},
									label: "dir",
									expr: &choiceExpr{
										pos: position{line: 898, col: 12, offset: 25140},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 898, col: 12, offset: 25140},
												name: "ASC",
											},
											&ruleRefExpr{
												pos:  position{line: 898, col: 18, offset: 25146},
												name: "DESC",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 899, col: 5, offset: 25176},
						run: (*parser).callonSQLOrder9,
						expr: &litMatcher{
							pos:        position{line: 899, col: 5, offset: 25176},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLLimit",
			pos:  position{line: 901, col: 1, offset: 25202},
			expr: &choiceExpr{
				pos: position{line: 902, col: 5, offset: 25215},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 902, col: 5, offset: 25215},
						run: (*parser).callonSQLLimit2,
						expr: &seqExpr{
							pos: position{line: 902, col: 5, offset: 25215},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 902, col: 5, offset: 25215},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 902, col: 7, offset: 25217},
									name: "LIMIT",
								},
								&ruleRefExpr{
									pos:  position{line: 902, col: 13, offset: 25223},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 902, col: 15, offset: 25225},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 902, col: 21, offset: 25231},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 903, col: 5, offset: 25262},
						run: (*parser).callonSQLLimit9,
						expr: &litMatcher{
							pos:        position{line: 903, col: 5, offset: 25262},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SELECT",
			pos:  position{line: 905, col: 1, offset: 25284},
			expr: &actionExpr{
				pos: position{line: 905, col: 10, offset: 25293},
				run: (*parser).callonSELECT1,
				expr: &litMatcher{
					pos:        position{line: 905, col: 10, offset: 25293},
					val:        "select",
					ignoreCase: true,
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 906, col: 1, offset: 25328},
			expr: &actionExpr{
				pos: position{line: 906, col: 6, offset: 25333},
				run: (*parser).callonAS1,
				expr: &litMatcher{
					pos:        position{line: 906, col: 6, offset: 25333},
					val:        "as",
					ignoreCase: true,
				},
			},
		},
		{
			name: "FROM",
			pos:  position{line: 907, col: 1, offset: 25360},
			expr: &actionExpr{
				pos: position{line: 907, col: 8, offset: 25367},
				run: (*parser).callonFROM1,
				expr: &litMatcher{
					pos:        position{line: 907, col: 8, offset: 25367},
					val:        "from",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JOIN",
			pos:  position{line: 908, col: 1, offset: 25398},
			expr: &actionExpr{
				pos: position{line: 908, col: 8, offset: 25405},
				run: (*parser).callonJOIN1,
				expr: &litMatcher{
					pos:        position{line: 908, col: 8, offset: 25405},
					val:        "join",
					ignoreCase: true,
				},
			},
		},
		{
			name: "WHERE",
			pos:  position{line: 909, col: 1, offset: 25436},
			expr: &actionExpr{
				pos: position{line: 909, col: 9, offset: 25444},
				run: (*parser).callonWHERE1,
				expr: &litMatcher{
					pos:        position{line: 909, col: 9, offset: 25444},
					val:        "where",
					ignoreCase: true,
				},
			},
		},
		{
			name: "GROUP",
			pos:  position{line: 910, col: 1, offset: 25477},
			expr: &actionExpr{
				pos: position{line: 910, col: 9, offset: 25485},
				run: (*parser).callonGROUP1,
				expr: &litMatcher{
					pos:        position{line: 910, col: 9, offset: 25485},
					val:        "group",
					ignoreCase: true,
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 911, col: 1, offset: 25518},
			expr: &ruleRefExpr{
				pos:  position{line: 911, col: 6, offset: 25523},
				name: "ByToken",
			},
		},
		{
			name: "HAVING",
			pos:  position{line: 912, col: 1, offset: 25531},
			expr: &actionExpr{
				pos: position{line: 912, col: 10, offset: 25540},
				run: (*parser).callonHAVING1,
				expr: &litMatcher{
					pos:        position{line: 912, col: 10, offset: 25540},
					val:        "having",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ORDER",
			pos:  position{line: 913, col: 1, offset: 25575},
			expr: &actionExpr{
				pos: position{line: 913, col: 9, offset: 25583},
				run: (*parser).callonORDER1,
				expr: &litMatcher{
					pos:        position{line: 913, col: 9, offset: 25583},
					val:        "order",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ON",
			pos:  position{line: 914, col: 1, offset: 25616},
			expr: &actionExpr{
				pos: position{line: 914, col: 6, offset: 25621},
				run: (*parser).callonON1,
				expr: &litMatcher{
					pos:        position{line: 914, col: 6, offset: 25621},
					val:        "on",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LIMIT",
			pos:  position{line: 915, col: 1, offset: 25648},
			expr: &actionExpr{
				pos: position{line: 915, col: 9, offset: 25656},
				run: (*parser).callonLIMIT1,
				expr: &litMatcher{
					pos:        position{line: 915, col: 9, offset: 25656},
					val:        "limit",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ASC",
			pos:  position{line: 916, col: 1, offset: 25689},
			expr: &actionExpr{
				pos: position{line: 916, col: 7, offset: 25695},
				run: (*parser).callonASC1,
				expr: &litMatcher{
					pos:        position{line: 916, col: 7, offset: 25695},
					val:        "asc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "DESC",
			pos:  position{line: 917, col: 1, offset: 25724},
			expr: &actionExpr{
				pos: position{line: 917, col: 8, offset: 25731},
				run: (*parser).callonDESC1,
				expr: &litMatcher{
					pos:        position{line: 917, col: 8, offset: 25731},
					val:        "desc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ANTI",
			pos:  position{line: 918, col: 1, offset: 25762},
			expr: &actionExpr{
				pos: position{line: 918, col: 8, offset: 25769},
				run: (*parser).callonANTI1,
				expr: &litMatcher{
					pos:        position{line: 918, col: 8, offset: 25769},
					val:        "anti",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LEFT",
			pos:  position{line: 919, col: 1, offset: 25800},
			expr: &actionExpr{
				pos: position{line: 919, col: 8, offset: 25807},
				run: (*parser).callonLEFT1,
				expr: &litMatcher{
					pos:        position{line: 919, col: 8, offset: 25807},
					val:        "left",
					ignoreCase: true,
				},
			},
		},
		{
			name: "RIGHT",
			pos:  position{line: 920, col: 1, offset: 25838},
			expr: &actionExpr{
				pos: position{line: 920, col: 9, offset: 25846},
				run: (*parser).callonRIGHT1,
				expr: &litMatcher{
					pos:        position{line: 920, col: 9, offset: 25846},
					val:        "right",
					ignoreCase: true,
				},
			},
		},
		{
			name: "INNER",
			pos:  position{line: 921, col: 1, offset: 25879},
			expr: &actionExpr{
				pos: position{line: 921, col: 9, offset: 25887},
				run: (*parser).callonINNER1,
				expr: &litMatcher{
					pos:        position{line: 921, col: 9, offset: 25887},
					val:        "inner",
					ignoreCase: true,
				},
			},
		},
		{
			name: "SQLTokenSentinels",
			pos:  position{line: 923, col: 1, offset: 25921},
			expr: &choiceExpr{
				pos: position{line: 924, col: 5, offset: 25943},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 924, col: 5, offset: 25943},
						name: "SELECT",
					},
					&ruleRefExpr{
						pos:  position{line: 924, col: 14, offset: 25952},
						name: "AS",
					},
					&ruleRefExpr{
						pos:  position{line: 924, col: 19, offset: 25957},
						name: "FROM",
					},
					&ruleRefExpr{
						pos:  position{line: 924, col: 27, offset: 25965},
						name: "JOIN",
					},
					&ruleRefExpr{
						pos:  position{line: 924, col: 34, offset: 25972},
						name: "WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 924, col: 42, offset: 25980},
						name: "GROUP",
					},
					&ruleRefExpr{
						pos:  position{line: 924, col: 50, offset: 25988},
						name: "HAVING",
					},
					&ruleRefExpr{
						pos:  position{line: 924, col: 59, offset: 25997},
						name: "ORDER",
					},
					&ruleRefExpr{
						pos:  position{line: 924, col: 67, offset: 26005},
						name: "LIMIT",
					},
					&ruleRefExpr{
						pos:  position{line: 924, col: 75, offset: 26013},
						name: "ON",
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 928, col: 1, offset: 26039},
			expr: &choiceExpr{
				pos: position{line: 929, col: 5, offset: 26051},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 929, col: 5, offset: 26051},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 930, col: 5, offset: 26067},
						name: "TemplateLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 931, col: 5, offset: 26087},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 932, col: 5, offset: 26105},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 933, col: 5, offset: 26124},
						name: "BytesLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 934, col: 5, offset: 26141},
						name: "Duration",
					},
					&ruleRefExpr{
						pos:  position{line: 935, col: 5, offset: 26154},
						name: "Time",
					},
					&ruleRefExpr{
						pos:  position{line: 936, col: 5, offset: 26163},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 937, col: 5, offset: 26180},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 938, col: 5, offset: 26199},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 939, col: 5, offset: 26218},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 941, col: 1, offset: 26231},
			expr: &choiceExpr{
				pos: position{line: 942, col: 5, offset: 26249},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 942, col: 5, offset: 26249},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 942, col: 5, offset: 26249},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 942, col: 5, offset: 26249},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 942, col: 7, offset: 26251},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 942, col: 14, offset: 26258},
									expr: &ruleRefExpr{
										pos:  position{line: 942, col: 15, offset: 26259},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 945, col: 5, offset: 26374},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 945, col: 5, offset: 26374},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 945, col: 7, offset: 26376},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 949, col: 1, offset: 26480},
			expr: &choiceExpr{
				pos: position{line: 950, col: 5, offset: 26499},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 950, col: 5, offset: 26499},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 950, col: 5, offset: 26499},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 950, col: 5, offset: 26499},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 950, col: 7, offset: 26501},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 950, col: 11, offset: 26505},
									expr: &ruleRefExpr{
										pos:  position{line: 950, col: 12, offset: 26506},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 953, col: 5, offset: 26620},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 953, col: 5, offset: 26620},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 953, col: 7, offset: 26622},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 957, col: 1, offset: 26721},
			expr: &actionExpr{
				pos: position{line: 958, col: 5, offset: 26738},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 958, col: 5, offset: 26738},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 958, col: 7, offset: 26740},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 962, col: 1, offset: 26853},
			expr: &actionExpr{
				pos: position{line: 963, col: 5, offset: 26872},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 963, col: 5, offset: 26872},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 963, col: 7, offset: 26874},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 967, col: 1, offset: 26983},
			expr: &choiceExpr{
				pos: position{line: 968, col: 5, offset: 27002},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 968, col: 5, offset: 27002},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 968, col: 5, offset: 27002},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 969, col: 5, offset: 27115},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 969, col: 5, offset: 27115},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 971, col: 1, offset: 27226},
			expr: &actionExpr{
				pos: position{line: 972, col: 5, offset: 27242},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 972, col: 5, offset: 27242},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "BytesLiteral",
			pos:  position{line: 974, col: 1, offset: 27348},
			expr: &actionExpr{
				pos: position{line: 975, col: 5, offset: 27365},
				run: (*parser).callonBytesLiteral1,
				expr: &seqExpr{
					pos: position{line: 975, col: 5, offset: 27365},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 975, col: 5, offset: 27365},
							val:        "0x",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 975, col: 10, offset: 27370},
							expr: &ruleRefExpr{
								pos:  position{line: 975, col: 10, offset: 27370},
								name: "HexDigit",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeLiteral",
			pos:  position{line: 979, col: 1, offset: 27485},
			expr: &actionExpr{
				pos: position{line: 980, col: 5, offset: 27501},
				run: (*parser).callonTypeLiteral1,
				expr: &seqExpr{
					pos: position{line: 980, col: 5, offset: 27501},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 980, col: 5, offset: 27501},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 980, col: 9, offset: 27505},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 980, col: 13, offset: 27509},
								name: "Type",
							},
						},
						&litMatcher{
							pos:        position{line: 980, col: 18, offset: 27514},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "CastType",
			pos:  position{line: 984, col: 1, offset: 27603},
			expr: &choiceExpr{
				pos: position{line: 985, col: 5, offset: 27616},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 985, col: 5, offset: 27616},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 986, col: 5, offset: 27632},
						name: "PrimitiveType",
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 988, col: 1, offset: 27647},
			expr: &choiceExpr{
				pos: position{line: 989, col: 5, offset: 27656},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 989, col: 5, offset: 27656},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 990, col: 5, offset: 27672},
						name: "AmbiguousType",
					},
					&ruleRefExpr{
						pos:  position{line: 991, col: 5, offset: 27690},
						name: "ComplexType",
					},
				},
			},
		},
		{
			name: "AmbiguousType",
			pos:  position{line: 993, col: 1, offset: 27703},
			expr: &choiceExpr{
				pos: position{line: 994, col: 5, offset: 27721},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 994, col: 5, offset: 27721},
						run: (*parser).callonAmbiguousType2,
						expr: &seqExpr{
							pos: position{line: 994, col: 5, offset: 27721},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 994, col: 5, offset: 27721},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 994, col: 10, offset: 27726},
										name: "PrimitiveType",
									},
								},
								&notExpr{
									pos: position{line: 994, col: 24, offset: 27740},
									expr: &ruleRefExpr{
										pos:  position{line: 994, col: 25, offset: 27741},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 995, col: 5, offset: 27781},
						run: (*parser).callonAmbiguousType8,
						expr: &seqExpr{
							pos: position{line: 995, col: 5, offset: 27781},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 995, col: 5, offset: 27781},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 995, col: 10, offset: 27786},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 995, col: 25, offset: 27801},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 995, col: 28, offset: 27804},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 995, col: 32, offset: 27808},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 995, col: 35, offset: 27811},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 995, col: 39, offset: 27815},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 995, col: 42, offset: 27818},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 995, col: 46, offset: 27822},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 995, col: 51, offset: 27827},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 995, col: 54, offset: 27830},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 998, col: 5, offset: 27931},
						run: (*parser).callonAmbiguousType21,
						expr: &labeledExpr{
							pos:   position{line: 998, col: 5, offset: 27931},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 998, col: 10, offset: 27936},
								name: "IdentifierName",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1001, col: 5, offset: 28038},
						run: (*parser).callonAmbiguousType24,
						expr: &seqExpr{
							pos: position{line: 1001, col: 5, offset: 28038},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1001, col: 5, offset: 28038},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1001, col: 9, offset: 28042},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1001, col: 12, offset: 28045},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 1001, col: 14, offset: 28047},
										name: "TypeUnion",
									},
								},
								&litMatcher{
									pos:        position{line: 1001, col: 25, offset: 28058},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeUnion",
			pos:  position{line: 1003, col: 1, offset: 28081},
			expr: &actionExpr{
				pos: position{line: 1004, col: 5, offset: 28095},
				run: (*parser).callonTypeUnion1,
				expr: &labeledExpr{
					pos:   position{line: 1004, col: 5, offset: 28095},
					label: "types",
					expr: &ruleRefExpr{
						pos:  position{line: 1004, col: 11, offset: 28101},
						name: "TypeList",
					},
				},
			},
		},
		{
			name: "TypeList",
			pos:  position{line: 1008, col: 1, offset: 28197},
			expr: &actionExpr{
				pos: position{line: 1009, col: 5, offset: 28210},
				run: (*parser).callonTypeList1,
				expr: &seqExpr{
					pos: position{line: 1009, col: 5, offset: 28210},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1009, col: 5, offset: 28210},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1009, col: 11, offset: 28216},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 1009, col: 16, offset: 28221},
							label: "rest",
							expr: &oneOrMoreExpr{
								pos: position{line: 1009, col: 21, offset: 28226},
								expr: &ruleRefExpr{
									pos:  position{line: 1009, col: 21, offset: 28226},
									name: "TypeListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeListTail",
			pos:  position{line: 1013, col: 1, offset: 28320},
			expr: &actionExpr{
				pos: position{line: 1013, col: 16, offset: 28335},
				run: (*parser).callonTypeListTail1,
				expr: &seqExpr{
					pos: position{line: 1013, col: 16, offset: 28335},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1013, col: 16, offset: 28335},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1013, col: 19, offset: 28338},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1013, col: 23, offset: 28342},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1013, col: 26, offset: 28345},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1013, col: 30, offset: 28349},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexType",
			pos:  position{line: 1015, col: 1, offset: 28375},
			expr: &choiceExpr{
				pos: position{line: 1016, col: 5, offset: 28391},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1016, col: 5, offset: 28391},
						run: (*parser).callonComplexType2,
						expr: &seqExpr{
							pos: position{line: 1016, col: 5, offset: 28391},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1016, col: 5, offset: 28391},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1016, col: 9, offset: 28395},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1016, col: 12, offset: 28398},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 1016, col: 19, offset: 28405},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1016, col: 33, offset: 28419},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1016, col: 36, offset: 28422},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1019, col: 5, offset: 28517},
						run: (*parser).callonComplexType10,
						expr: &seqExpr{
							pos: position{line: 1019, col: 5, offset: 28517},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1019, col: 5, offset: 28517},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1019, col: 9, offset: 28521},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1019, col: 12, offset: 28524},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1019, col: 16, offset: 28528},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1019, col: 21, offset: 28533},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1019, col: 24, offset: 28536},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1022, col: 5, offset: 28625},
						run: (*parser).callonComplexType18,
						expr: &seqExpr{
							pos: position{line: 1022, col: 5, offset: 28625},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1022, col: 5, offset: 28625},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1022, col: 10, offset: 28630},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1022, col: 14, offset: 28634},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1022, col: 18, offset: 28638},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1022, col: 23, offset: 28643},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1022, col: 26, offset: 28646},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1025, col: 5, offset: 28734},
						run: (*parser).callonComplexType26,
						expr: &seqExpr{
							pos: position{line: 1025, col: 5, offset: 28734},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1025, col: 5, offset: 28734},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1025, col: 10, offset: 28739},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1025, col: 13, offset: 28742},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 1025, col: 21, offset: 28750},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1025, col: 26, offset: 28755},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1025, col: 29, offset: 28758},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1025, col: 33, offset: 28762},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1025, col: 36, offset: 28765},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 1025, col: 44, offset: 28773},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1025, col: 49, offset: 28778},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1025, col: 52, offset: 28781},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateLiteral",
			pos:  position{line: 1029, col: 1, offset: 28895},
			expr: &actionExpr{
				pos: position{line: 1030, col: 5, offset: 28915},
				run: (*parser).callonTemplateLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1030, col: 5, offset: 28915},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1030, col: 7, offset: 28917},
						name: "TemplateLiteralParts",
					},
				},
			},
		},
		{
			name: "TemplateLiteralParts",
			pos:  position{line: 1037, col: 1, offset: 29112},
			expr: &choiceExpr{
				pos: position{line: 1038, col: 5, offset: 29137},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1038, col: 5, offset: 29137},
						run: (*parser).callonTemplateLiteralParts2,
						expr: &seqExpr{
							pos: position{line: 1038, col: 5, offset: 29137},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1038, col: 5, offset: 29137},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1038, col: 9, offset: 29141},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1038, col: 11, offset: 29143},
										expr: &ruleRefExpr{
											pos:  position{line: 1038, col: 11, offset: 29143},
											name: "TemplateDoubleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1038, col: 37, offset: 29169},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1039, col: 5, offset: 29195},
						run: (*parser).callonTemplateLiteralParts9,
						expr: &seqExpr{
							pos: position{line: 1039, col: 5, offset: 29195},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1039, col: 5, offset: 29195},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1039, col: 9, offset: 29199},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1039, col: 11, offset: 29201},
										expr: &ruleRefExpr{
											pos:  position{line: 1039, col: 11, offset: 29201},
											name: "TemplateSingleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1039, col: 37, offset: 29227},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedPart",
			pos:  position{line: 1041, col: 1, offset: 29250},
			expr: &choiceExpr{
				pos: position{line: 1042, col: 5, offset: 29279},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1042, col: 5, offset: 29279},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 1043, col: 5, offset: 29296},
						run: (*parser).callonTemplateDoubleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 1043, col: 5, offset: 29296},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1043, col: 7, offset: 29298},
								expr: &ruleRefExpr{
									pos:  position{line: 1043, col: 7, offset: 29298},
									name: "TemplateDoubleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedChar",
			pos:  position{line: 1047, col: 1, offset: 29435},
			expr: &choiceExpr{
				pos: position{line: 1048, col: 5, offset: 29464},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1048, col: 5, offset: 29464},
						run: (*parser).callonTemplateDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1048, col: 5, offset: 29464},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1048, col: 5, offset: 29464},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1048, col: 10, offset: 29469},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1048, col: 12, offset: 29471},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1049, col: 5, offset: 29498},
						run: (*parser).callonTemplateDoubleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1049, col: 5, offset: 29498},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1049, col: 5, offset: 29498},
									expr: &litMatcher{
										pos:        position{line: 1049, col: 8, offset: 29501},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1049, col: 15, offset: 29508},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1049, col: 17, offset: 29510},
										name: "DoubleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedPart",
			pos:  position{line: 1051, col: 1, offset: 29546},
			expr: &choiceExpr{
				pos: position{line: 1052, col: 5, offset: 29575},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1052, col: 5, offset: 29575},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 1053, col: 5, offset: 29592},
						run: (*parser).callonTemplateSingleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 1053, col: 5, offset: 29592},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1053, col: 7, offset: 29594},
								expr: &ruleRefExpr{
									pos:  position{line: 1053, col: 7, offset: 29594},
									name: "TemplateSingleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedChar",
			pos:  position{line: 1057, col: 1, offset: 29731},
			expr: &choiceExpr{
				pos: position{line: 1058, col: 5, offset: 29760},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1058, col: 5, offset: 29760},
						run: (*parser).callonTemplateSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1058, col: 5, offset: 29760},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1058, col: 5, offset: 29760},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1058, col: 10, offset: 29765},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1058, col: 12, offset: 29767},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1059, col: 5, offset: 29794},
						run: (*parser).callonTemplateSingleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1059, col: 5, offset: 29794},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1059, col: 5, offset: 29794},
									expr: &litMatcher{
										pos:        position{line: 1059, col: 8, offset: 29797},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1059, col: 15, offset: 29804},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1059, col: 17, offset: 29806},
										name: "SingleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateExpr",
			pos:  position{line: 1061, col: 1, offset: 29842},
			expr: &actionExpr{
				pos: position{line: 1062, col: 5, offset: 29859},
				run: (*parser).callonTemplateExpr1,
				expr: &seqExpr{
					pos: position{line: 1062, col: 5, offset: 29859},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1062, col: 5, offset: 29859},
							val:        "${",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1062, col: 10, offset: 29864},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1062, col: 13, offset: 29867},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 1062, col: 15, offset: 29869},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1062, col: 20, offset: 29874},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1062, col: 23, offset: 29877},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 1064, col: 1, offset: 29900},
			expr: &actionExpr{
				pos: position{line: 1065, col: 5, offset: 29918},
				run: (*parser).callonPrimitiveType1,
				expr: &choiceExpr{
					pos: position{line: 1065, col: 9, offset: 29922},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 1065, col: 9, offset: 29922},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1065, col: 19, offset: 29932},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1065, col: 30, offset: 29943},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1065, col: 41, offset: 29954},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1066, col: 9, offset: 29971},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1066, col: 18, offset: 29980},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1066, col: 28, offset: 29990},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1066, col: 38, offset: 30000},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1067, col: 9, offset: 30016},
							val:        "float32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1067, col: 21, offset: 30028},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1068, col: 9, offset: 30046},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1068, col: 18, offset: 30055},
							val:        "string",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1069, col: 9, offset: 30072},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1069, col: 22, offset: 30085},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1070, col: 9, offset: 30100},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1071, col: 9, offset: 30116},
							val:        "bstring",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1072, col: 9, offset: 30134},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1072, col: 16, offset: 30141},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1073, col: 9, offset: 30155},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1073, col: 18, offset: 30164},
							val:        "error",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1073, col: 28, offset: 30174},
							val:        "null",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldList",
			pos:  position{line: 1077, col: 1, offset: 30290},
			expr: &actionExpr{
				pos: position{line: 1078, col: 5, offset: 30308},
				run: (*parser).callonTypeFieldList1,
				expr: &seqExpr{
					pos: position{line: 1078, col: 5, offset: 30308},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1078, col: 5, offset: 30308},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1078, col: 11, offset: 30314},
								name: "TypeField",
							},
						},
						&labeledExpr{
							pos:   position{line: 1078, col: 21, offset: 30324},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1078, col: 26, offset: 30329},
								expr: &ruleRefExpr{
									pos:  position{line: 1078, col: 26, offset: 30329},
									name: "TypeFieldListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTail",
			pos:  position{line: 1082, col: 1, offset: 30428},
			expr: &actionExpr{
				pos: position{line: 1082, col: 21, offset: 30448},
				run: (*parser).callonTypeFieldListTail1,
				expr: &seqExpr{
					pos: position{line: 1082, col: 21, offset: 30448},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1082, col: 21, offset: 30448},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1082, col: 24, offset: 30451},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1082, col: 28, offset: 30455},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1082, col: 31, offset: 30458},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1082, col: 35, offset: 30462},
								name: "TypeField",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeField",
			pos:  position{line: 1084, col: 1, offset: 30493},
			expr: &actionExpr{
				pos: position{line: 1085, col: 5, offset: 30507},
				run: (*parser).callonTypeField1,
				expr: &seqExpr{
					pos: position{line: 1085, col: 5, offset: 30507},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1085, col: 5, offset: 30507},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1085, col: 10, offset: 30512},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1085, col: 20, offset: 30522},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1085, col: 23, offset: 30525},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1085, col: 27, offset: 30529},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1085, col: 30, offset: 30532},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1085, col: 34, offset: 30536},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 1089, col: 1, offset: 30618},
			expr: &choiceExpr{
				pos: position{line: 1090, col: 5, offset: 30632},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1090, col: 5, offset: 30632},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 1091, col: 5, offset: 30651},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "EqualityToken",
			pos:  position{line: 1093, col: 1, offset: 30665},
			expr: &choiceExpr{
				pos: position{line: 1094, col: 5, offset: 30683},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1094, col: 5, offset: 30683},
						name: "EqualityOperator",
					},
					&ruleRefExpr{
						pos:  position{line: 1094, col: 24, offset: 30702},
						name: "RelativeOperator",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 1096, col: 1, offset: 30720},
			expr: &actionExpr{
				pos: position{line: 1096, col: 12, offset: 30731},
				run: (*parser).callonAndToken1,
				expr: &seqExpr{
					pos: position{line: 1096, col: 12, offset: 30731},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1096, col: 12, offset: 30731},
							val:        "and",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1096, col: 19, offset: 30738},
							expr: &ruleRefExpr{
								pos:  position{line: 1096, col: 20, offset: 30739},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 1097, col: 1, offset: 30776},
			expr: &actionExpr{
				pos: position{line: 1097, col: 11, offset: 30786},
				run: (*parser).callonOrToken1,
				expr: &seqExpr{
					pos: position{line: 1097, col: 11, offset: 30786},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1097, col: 11, offset: 30786},
							val:        "or",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1097, col: 17, offset: 30792},
							expr: &ruleRefExpr{
								pos:  position{line: 1097, col: 18, offset: 30793},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 1098, col: 1, offset: 30829},
			expr: &actionExpr{
				pos: position{line: 1098, col: 11, offset: 30839},
				run: (*parser).callonInToken1,
				expr: &seqExpr{
					pos: position{line: 1098, col: 11, offset: 30839},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1098, col: 11, offset: 30839},
							val:        "in",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1098, col: 17, offset: 30845},
							expr: &ruleRefExpr{
								pos:  position{line: 1098, col: 18, offset: 30846},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 1099, col: 1, offset: 30882},
			expr: &actionExpr{
				pos: position{line: 1099, col: 12, offset: 30893},
				run: (*parser).callonNotToken1,
				expr: &seqExpr{
					pos: position{line: 1099, col: 12, offset: 30893},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1099, col: 12, offset: 30893},
							val:        "not",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1099, col: 19, offset: 30900},
							expr: &ruleRefExpr{
								pos:  position{line: 1099, col: 20, offset: 30901},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 1100, col: 1, offset: 30938},
			expr: &actionExpr{
				pos: position{line: 1100, col: 11, offset: 30948},
				run: (*parser).callonByToken1,
				expr: &seqExpr{
					pos: position{line: 1100, col: 11, offset: 30948},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1100, col: 11, offset: 30948},
							val:        "by",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1100, col: 17, offset: 30954},
							expr: &ruleRefExpr{
								pos:  position{line: 1100, col: 18, offset: 30955},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 1102, col: 1, offset: 30992},
			expr: &charClassMatcher{
				pos:        position{line: 1102, col: 19, offset: 31010},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 1104, col: 1, offset: 31022},
			expr: &choiceExpr{
				pos: position{line: 1104, col: 18, offset: 31039},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1104, col: 18, offset: 31039},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 1104, col: 36, offset: 31057},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 1106, col: 1, offset: 31064},
			expr: &actionExpr{
				pos: position{line: 1107, col: 5, offset: 31079},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 1107, col: 5, offset: 31079},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 1107, col: 8, offset: 31082},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 1109, col: 1, offset: 31163},
			expr: &choiceExpr{
				pos: position{line: 1110, col: 5, offset: 31182},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1110, col: 5, offset: 31182},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 1110, col: 5, offset: 31182},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1110, col: 5, offset: 31182},
									expr: &seqExpr{
										pos: position{line: 1110, col: 7, offset: 31184},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1110, col: 7, offset: 31184},
												name: "IDGuard",
											},
											&notExpr{
												pos: position{line: 1110, col: 15, offset: 31192},
												expr: &ruleRefExpr{
													pos:  position{line: 1110, col: 16, offset: 31193},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1110, col: 32, offset: 31209},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1110, col: 48, offset: 31225},
									expr: &ruleRefExpr{
										pos:  position{line: 1110, col: 48, offset: 31225},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1111, col: 5, offset: 31277},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 1111, col: 5, offset: 31277},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1112, col: 5, offset: 31316},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 1112, col: 5, offset: 31316},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1112, col: 5, offset: 31316},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1112, col: 10, offset: 31321},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1112, col: 13, offset: 31324},
										name: "IDGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1114, col: 5, offset: 31415},
						run: (*parser).callonIdentifierName19,
						expr: &litMatcher{
							pos:        position{line: 1114, col: 5, offset: 31415},
							val:        "type",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1115, col: 5, offset: 31457},
						run: (*parser).callonIdentifierName21,
						expr: &seqExpr{
							pos: position{line: 1115, col: 5, offset: 31457},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1115, col: 5, offset: 31457},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1115, col: 8, offset: 31460},
										name: "SQLTokenSentinels",
									},
								},
								&andExpr{
									pos: position{line: 1115, col: 26, offset: 31478},
									expr: &seqExpr{
										pos: position{line: 1115, col: 28, offset: 31480},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1115, col: 28, offset: 31480},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1115, col: 31, offset: 31483},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IDGuard",
			pos:  position{line: 1117, col: 1, offset: 31508},
			expr: &choiceExpr{
				pos: position{line: 1118, col: 5, offset: 31520},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1118, col: 5, offset: 31520},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1119, col: 5, offset: 31539},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "Time",
			pos:  position{line: 1121, col: 1, offset: 31552},
			expr: &actionExpr{
				pos: position{line: 1122, col: 5, offset: 31561},
				run: (*parser).callonTime1,
				expr: &seqExpr{
					pos: position{line: 1122, col: 5, offset: 31561},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1122, col: 5, offset: 31561},
							name: "FullDate",
						},
						&litMatcher{
							pos:        position{line: 1122, col: 14, offset: 31570},
							val:        "T",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1122, col: 18, offset: 31574},
							name: "FullTime",
						},
					},
				},
			},
		},
		{
			name: "FullDate",
			pos:  position{line: 1126, col: 1, offset: 31694},
			expr: &seqExpr{
				pos: position{line: 1126, col: 12, offset: 31705},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1126, col: 12, offset: 31705},
						name: "D4",
					},
					&litMatcher{
						pos:        position{line: 1126, col: 15, offset: 31708},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1126, col: 19, offset: 31712},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1126, col: 22, offset: 31715},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1126, col: 26, offset: 31719},
						name: "D2",
					},
				},
			},
		},
		{
			name: "D4",
			pos:  position{line: 1128, col: 1, offset: 31723},
			expr: &seqExpr{
				pos: position{line: 1128, col: 6, offset: 31728},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1128, col: 6, offset: 31728},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1128, col: 11, offset: 31733},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1128, col: 16, offset: 31738},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1128, col: 21, offset: 31743},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "D2",
			pos:  position{line: 1129, col: 1, offset: 31749},
			expr: &seqExpr{
				pos: position{line: 1129, col: 6, offset: 31754},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1129, col: 6, offset: 31754},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1129, col: 11, offset: 31759},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "FullTime",
			pos:  position{line: 1131, col: 1, offset: 31766},
			expr: &seqExpr{
				pos: position{line: 1131, col: 12, offset: 31777},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1131, col: 12, offset: 31777},
						name: "PartialTime",
					},
					&ruleRefExpr{
						pos:  position{line: 1131, col: 24, offset: 31789},
						name: "TimeOffset",
					},
				},
			},
		},
		{
			name: "PartialTime",
			pos:  position{line: 1133, col: 1, offset: 31801},
			expr: &seqExpr{
				pos: position{line: 1133, col: 15, offset: 31815},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1133, col: 15, offset: 31815},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1133, col: 18, offset: 31818},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1133, col: 22, offset: 31822},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1133, col: 25, offset: 31825},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1133, col: 29, offset: 31829},
						name: "D2",
					},
					&zeroOrOneExpr{
						pos: position{line: 1133, col: 32, offset: 31832},
						expr: &seqExpr{
							pos: position{line: 1133, col: 33, offset: 31833},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1133, col: 33, offset: 31833},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1133, col: 37, offset: 31837},
									expr: &charClassMatcher{
										pos:        position{line: 1133, col: 37, offset: 31837},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeOffset",
			pos:  position{line: 1135, col: 1, offset: 31847},
			expr: &choiceExpr{
				pos: position{line: 1136, col: 5, offset: 31862},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1136, col: 5, offset: 31862},
						val:        "Z",
						ignoreCase: false,
					},
					&seqExpr{
						pos: position{line: 1137, col: 5, offset: 31870},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 1137, col: 6, offset: 31871},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1137, col: 6, offset: 31871},
										val:        "+",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 1137, col: 12, offset: 31877},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1137, col: 17, offset: 31882},
								name: "D2",
							},
							&litMatcher{
								pos:        position{line: 1137, col: 20, offset: 31885},
								val:        ":",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 1137, col: 24, offset: 31889},
								name: "D2",
							},
							&zeroOrOneExpr{
								pos: position{line: 1137, col: 27, offset: 31892},
								expr: &seqExpr{
									pos: position{line: 1137, col: 28, offset: 31893},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1137, col: 28, offset: 31893},
											val:        ".",
											ignoreCase: false,
										},
										&oneOrMoreExpr{
											pos: position{line: 1137, col: 32, offset: 31897},
											expr: &charClassMatcher{
												pos:        position{line: 1137, col: 32, offset: 31897},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 1139, col: 1, offset: 31907},
			expr: &actionExpr{
				pos: position{line: 1140, col: 5, offset: 31920},
				run: (*parser).callonDuration1,
				expr: &seqExpr{
					pos: position{line: 1140, col: 5, offset: 31920},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1140, col: 5, offset: 31920},
							expr: &litMatcher{
								pos:        position{line: 1140, col: 5, offset: 31920},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1140, col: 10, offset: 31925},
							expr: &seqExpr{
								pos: position{line: 1140, col: 11, offset: 31926},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1140, col: 11, offset: 31926},
										name: "Decimal",
									},
									&ruleRefExpr{
										pos:  position{line: 1140, col: 19, offset: 31934},
										name: "TimeUnit",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Decimal",
			pos:  position{line: 1144, col: 1, offset: 32060},
			expr: &seqExpr{
				pos: position{line: 1144, col: 11, offset: 32070},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1144, col: 11, offset: 32070},
						name: "UInt",
					},
					&zeroOrOneExpr{
						pos: position{line: 1144, col: 16, offset: 32075},
						expr: &seqExpr{
							pos: position{line: 1144, col: 17, offset: 32076},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1144, col: 17, offset: 32076},
									val:        ".",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1144, col: 21, offset: 32080},
									name: "UInt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeUnit",
			pos:  position{line: 1146, col: 1, offset: 32088},
			expr: &choiceExpr{
				pos: position{line: 1147, col: 5, offset: 32101},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1147, col: 5, offset: 32101},
						val:        "ns",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1148, col: 5, offset: 32111},
						val:        "us",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1149, col: 5, offset: 32121},
						val:        "ms",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1150, col: 5, offset: 32131},
						val:        "s",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1151, col: 5, offset: 32140},
						val:        "m",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1152, col: 5, offset: 32149},
						val:        "h",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1153, col: 5, offset: 32158},
						val:        "d",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1154, col: 5, offset: 32167},
						val:        "w",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1155, col: 5, offset: 32176},
						val:        "y",
						ignoreCase: true,
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 1157, col: 1, offset: 32182},
			expr: &actionExpr{
				pos: position{line: 1158, col: 5, offset: 32189},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 1158, col: 5, offset: 32189},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1158, col: 5, offset: 32189},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1158, col: 10, offset: 32194},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1158, col: 14, offset: 32198},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1158, col: 19, offset: 32203},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1158, col: 23, offset: 32207},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1158, col: 28, offset: 32212},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1158, col: 32, offset: 32216},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 1160, col: 1, offset: 32253},
			expr: &actionExpr{
				pos: position{line: 1161, col: 5, offset: 32261},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 1161, col: 5, offset: 32261},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1161, col: 5, offset: 32261},
							expr: &seqExpr{
								pos: position{line: 1161, col: 8, offset: 32264},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1161, col: 8, offset: 32264},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 1161, col: 12, offset: 32268},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 1161, col: 16, offset: 32272},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 1161, col: 20, offset: 32276},
										expr: &choiceExpr{
											pos: position{line: 1161, col: 22, offset: 32278},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1161, col: 22, offset: 32278},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 1161, col: 33, offset: 32289},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1161, col: 39, offset: 32295},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1161, col: 41, offset: 32297},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 1165, col: 1, offset: 32461},
			expr: &choiceExpr{
				pos: position{line: 1166, col: 5, offset: 32479},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1166, col: 5, offset: 32479},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 1166, col: 5, offset: 32479},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1166, col: 5, offset: 32479},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 1166, col: 7, offset: 32481},
										expr: &ruleRefExpr{
											pos:  position{line: 1166, col: 7, offset: 32481},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1166, col: 17, offset: 32491},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1166, col: 19, offset: 32493},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1169, col: 5, offset: 32557},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 1169, col: 5, offset: 32557},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1169, col: 5, offset: 32557},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1169, col: 7, offset: 32559},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1169, col: 11, offset: 32563},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1169, col: 13, offset: 32565},
										expr: &ruleRefExpr{
											pos:  position{line: 1169, col: 13, offset: 32565},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1169, col: 23, offset: 32575},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1169, col: 28, offset: 32580},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1169, col: 30, offset: 32582},
										expr: &ruleRefExpr{
											pos:  position{line: 1169, col: 30, offset: 32582},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1169, col: 40, offset: 32592},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 1169, col: 42, offset: 32594},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1172, col: 5, offset: 32693},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 1172, col: 5, offset: 32693},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1172, col: 5, offset: 32693},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1172, col: 10, offset: 32698},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1172, col: 12, offset: 32700},
										expr: &ruleRefExpr{
											pos:  position{line: 1172, col: 12, offset: 32700},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1172, col: 22, offset: 32710},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1172, col: 24, offset: 32712},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1175, col: 5, offset: 32783},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 1175, col: 5, offset: 32783},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1175, col: 5, offset: 32783},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1175, col: 7, offset: 32785},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1175, col: 11, offset: 32789},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1175, col: 13, offset: 32791},
										expr: &ruleRefExpr{
											pos:  position{line: 1175, col: 13, offset: 32791},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1175, col: 23, offset: 32801},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1178, col: 5, offset: 32869},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 1178, col: 5, offset: 32869},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 1182, col: 1, offset: 32906},
			expr: &choiceExpr{
				pos: position{line: 1183, col: 5, offset: 32918},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1183, col: 5, offset: 32918},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 1184, col: 5, offset: 32925},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 1186, col: 1, offset: 32930},
			expr: &actionExpr{
				pos: position{line: 1186, col: 12, offset: 32941},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 1186, col: 12, offset: 32941},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1186, col: 12, offset: 32941},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1186, col: 16, offset: 32945},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1186, col: 18, offset: 32947},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 1188, col: 1, offset: 32985},
			expr: &actionExpr{
				pos: position{line: 1188, col: 12, offset: 32996},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 1188, col: 12, offset: 32996},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1188, col: 12, offset: 32996},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1188, col: 14, offset: 32998},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 1188, col: 18, offset: 33002},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 1190, col: 1, offset: 33040},
			expr: &actionExpr{
				pos: position{line: 1191, col: 5, offset: 33051},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 1191, col: 5, offset: 33051},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1191, col: 5, offset: 33051},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1191, col: 7, offset: 33053},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 1191, col: 10, offset: 33056},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1191, col: 14, offset: 33060},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1191, col: 16, offset: 33062},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 1195, col: 1, offset: 33135},
			expr: &actionExpr{
				pos: position{line: 1196, col: 5, offset: 33146},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 1196, col: 5, offset: 33146},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1196, col: 5, offset: 33146},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1196, col: 7, offset: 33148},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 1196, col: 11, offset: 33152},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1196, col: 15, offset: 33156},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1196, col: 17, offset: 33158},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 1200, col: 1, offset: 33221},
			expr: &actionExpr{
				pos: position{line: 1201, col: 4, offset: 33229},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 1201, col: 4, offset: 33229},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 1201, col: 6, offset: 33231},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 1203, col: 1, offset: 33271},
			expr: &choiceExpr{
				pos: position{line: 1204, col: 5, offset: 33285},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1204, col: 5, offset: 33285},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 1205, col: 5, offset: 33300},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 1207, col: 1, offset: 33316},
			expr: &actionExpr{
				pos: position{line: 1207, col: 14, offset: 33329},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1207, col: 14, offset: 33329},
					expr: &charClassMatcher{
						pos:        position{line: 1207, col: 14, offset: 33329},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 1209, col: 1, offset: 33368},
			expr: &actionExpr{
				pos: position{line: 1210, col: 5, offset: 33387},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 1210, col: 5, offset: 33387},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1210, col: 5, offset: 33387},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1210, col: 9, offset: 33391},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 1212, col: 1, offset: 33434},
			expr: &choiceExpr{
				pos: position{line: 1213, col: 5, offset: 33450},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1213, col: 5, offset: 33450},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 1213, col: 5, offset: 33450},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1213, col: 5, offset: 33450},
									expr: &litMatcher{
										pos:        position{line: 1213, col: 5, offset: 33450},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1213, col: 10, offset: 33455},
									expr: &charClassMatcher{
										pos:        position{line: 1213, col: 10, offset: 33455},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 1213, col: 17, offset: 33462},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1213, col: 21, offset: 33466},
									expr: &charClassMatcher{
										pos:        position{line: 1213, col: 21, offset: 33466},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1213, col: 28, offset: 33473},
									expr: &ruleRefExpr{
										pos:  position{line: 1213, col: 28, offset: 33473},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1216, col: 5, offset: 33532},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 1216, col: 5, offset: 33532},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1216, col: 5, offset: 33532},
									expr: &litMatcher{
										pos:        position{line: 1216, col: 5, offset: 33532},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1216, col: 10, offset: 33537},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1216, col: 14, offset: 33541},
									expr: &charClassMatcher{
										pos:        position{line: 1216, col: 14, offset: 33541},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1216, col: 21, offset: 33548},
									expr: &ruleRefExpr{
										pos:  position{line: 1216, col: 21, offset: 33548},
										name: "ExponentPart",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 1220, col: 1, offset: 33604},
			expr: &seqExpr{
				pos: position{line: 1220, col: 16, offset: 33619},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1220, col: 16, offset: 33619},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 1220, col: 21, offset: 33624},
						expr: &charClassMatcher{
							pos:        position{line: 1220, col: 21, offset: 33624},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1220, col: 27, offset: 33630},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 1222, col: 1, offset: 33642},
			expr: &actionExpr{
				pos: position{line: 1222, col: 7, offset: 33648},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1222, col: 7, offset: 33648},
					expr: &ruleRefExpr{
						pos:  position{line: 1222, col: 7, offset: 33648},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 1224, col: 1, offset: 33690},
			expr: &charClassMatcher{
				pos:        position{line: 1224, col: 12, offset: 33701},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1226, col: 1, offset: 33714},
			expr: &choiceExpr{
				pos: position{line: 1227, col: 5, offset: 33731},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1227, col: 5, offset: 33731},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 1227, col: 5, offset: 33731},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1227, col: 5, offset: 33731},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1227, col: 9, offset: 33735},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1227, col: 11, offset: 33737},
										expr: &ruleRefExpr{
											pos:  position{line: 1227, col: 11, offset: 33737},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1227, col: 29, offset: 33755},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1228, col: 5, offset: 33792},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 1228, col: 5, offset: 33792},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1228, col: 5, offset: 33792},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1228, col: 9, offset: 33796},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1228, col: 11, offset: 33798},
										expr: &ruleRefExpr{
											pos:  position{line: 1228, col: 11, offset: 33798},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1228, col: 29, offset: 33816},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 1230, col: 1, offset: 33850},
			expr: &choiceExpr{
				pos: position{line: 1231, col: 5, offset: 33871},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1231, col: 5, offset: 33871},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1231, col: 5, offset: 33871},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1231, col: 5, offset: 33871},
									expr: &choiceExpr{
										pos: position{line: 1231, col: 7, offset: 33873},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1231, col: 7, offset: 33873},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1231, col: 13, offset: 33879},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1231, col: 26, offset: 33892,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1232, col: 5, offset: 33929},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1232, col: 5, offset: 33929},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1232, col: 5, offset: 33929},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1232, col: 10, offset: 33934},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1232, col: 12, offset: 33936},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 1234, col: 1, offset: 33970},
			expr: &actionExpr{
				pos: position{line: 1235, col: 5, offset: 33982},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 1235, col: 5, offset: 33982},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1235, col: 5, offset: 33982},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1235, col: 10, offset: 33987},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1235, col: 23, offset: 34000},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1235, col: 28, offset: 34005},
								expr: &ruleRefExpr{
									pos:  position{line: 1235, col: 28, offset: 34005},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 1237, col: 1, offset: 34067},
			expr: &choiceExpr{
				pos: position{line: 1238, col: 5, offset: 34084},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1238, col: 5, offset: 34084},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1239, col: 5, offset: 34101},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordChars",
			pos:  position{line: 1241, col: 1, offset: 34113},
			expr: &actionExpr{
				pos: position{line: 1241, col: 16, offset: 34128},
				run: (*parser).callonKeyWordChars1,
				expr: &charClassMatcher{
					pos:        position{line: 1241, col: 16, offset: 34128},
					val:        "[a-zA-Z_.:/%#@~]",
					chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
					ranges:     []rune{'a', 'z', 'A', 'Z'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 1243, col: 1, offset: 34177},
			expr: &choiceExpr{
				pos: position{line: 1244, col: 5, offset: 34193},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1244, col: 5, offset: 34193},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 1245, col: 5, offset: 34210},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 1247, col: 1, offset: 34217},
			expr: &actionExpr{
				pos: position{line: 1247, col: 14, offset: 34230},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 1247, col: 14, offset: 34230},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1247, col: 14, offset: 34230},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1247, col: 19, offset: 34235},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1247, col: 22, offset: 34238},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1247, col: 22, offset: 34238},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1247, col: 38, offset: 34254},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Glob",
			pos:  position{line: 1249, col: 1, offset: 34290},
			expr: &actionExpr{
				pos: position{line: 1250, col: 5, offset: 34299},
				run: (*parser).callonGlob1,
				expr: &seqExpr{
					pos: position{line: 1250, col: 5, offset: 34299},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1250, col: 5, offset: 34299},
							expr: &ruleRefExpr{
								pos:  position{line: 1250, col: 6, offset: 34300},
								name: "GlobProperStart",
							},
						},
						&andExpr{
							pos: position{line: 1250, col: 22, offset: 34316},
							expr: &ruleRefExpr{
								pos:  position{line: 1250, col: 23, offset: 34317},
								name: "GlobHasStar",
							},
						},
						&labeledExpr{
							pos:   position{line: 1250, col: 35, offset: 34329},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1250, col: 40, offset: 34334},
								name: "GlobStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1250, col: 50, offset: 34344},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1250, col: 55, offset: 34349},
								expr: &ruleRefExpr{
									pos:  position{line: 1250, col: 55, offset: 34349},
									name: "GlobRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobProperStart",
			pos:  position{line: 1254, col: 1, offset: 34433},
			expr: &seqExpr{
				pos: position{line: 1254, col: 19, offset: 34451},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1254, col: 19, offset: 34451},
						expr: &litMatcher{
							pos:        position{line: 1254, col: 19, offset: 34451},
							val:        "*",
							ignoreCase: false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1254, col: 24, offset: 34456},
						name: "KeyWordStart",
					},
				},
			},
		},
		{
			name: "GlobHasStar",
			pos:  position{line: 1255, col: 1, offset: 34469},
			expr: &seqExpr{
				pos: position{line: 1255, col: 15, offset: 34483},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1255, col: 15, offset: 34483},
						expr: &ruleRefExpr{
							pos:  position{line: 1255, col: 15, offset: 34483},
							name: "KeyWordRest",
						},
					},
					&litMatcher{
						pos:        position{line: 1255, col: 28, offset: 34496},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "GlobStart",
			pos:  position{line: 1257, col: 1, offset: 34501},
			expr: &choiceExpr{
				pos: position{line: 1258, col: 5, offset: 34515},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1258, col: 5, offset: 34515},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1259, col: 5, offset: 34532},
						name: "GlobEsc",
					},
					&actionExpr{
						pos: position{line: 1260, col: 5, offset: 34544},
						run: (*parser).callonGlobStart4,
						expr: &litMatcher{
							pos:        position{line: 1260, col: 5, offset: 34544},
							val:        "*",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GlobRest",
			pos:  position{line: 1262, col: 1, offset: 34568},
			expr: &choiceExpr{
				pos: position{line: 1263, col: 5, offset: 34581},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1263, col: 5, offset: 34581},
						name: "GlobStart",
					},
					&charClassMatcher{
						pos:        position{line: 1264, col: 5, offset: 34595},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "GlobEsc",
			pos:  position{line: 1266, col: 1, offset: 34602},
			expr: &actionExpr{
				pos: position{line: 1266, col: 11, offset: 34612},
				run: (*parser).callonGlobEsc1,
				expr: &seqExpr{
					pos: position{line: 1266, col: 11, offset: 34612},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1266, col: 11, offset: 34612},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1266, col: 16, offset: 34617},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1266, col: 19, offset: 34620},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1266, col: 19, offset: 34620},
										name: "GlobEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1266, col: 32, offset: 34633},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobEscape",
			pos:  position{line: 1268, col: 1, offset: 34669},
			expr: &choiceExpr{
				pos: position{line: 1269, col: 5, offset: 34684},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1269, col: 5, offset: 34684},
						run: (*parser).callonGlobEscape2,
						expr: &litMatcher{
							pos:        position{line: 1269, col: 5, offset: 34684},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1270, col: 5, offset: 34712},
						run: (*parser).callonGlobEscape4,
						expr: &litMatcher{
							pos:        position{line: 1270, col: 5, offset: 34712},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1271, col: 5, offset: 34742},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 1274, col: 1, offset: 34749},
			expr: &choiceExpr{
				pos: position{line: 1275, col: 5, offset: 34770},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1275, col: 5, offset: 34770},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1275, col: 5, offset: 34770},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1275, col: 5, offset: 34770},
									expr: &choiceExpr{
										pos: position{line: 1275, col: 7, offset: 34772},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1275, col: 7, offset: 34772},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1275, col: 13, offset: 34778},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1275, col: 26, offset: 34791,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1276, col: 5, offset: 34828},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1276, col: 5, offset: 34828},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1276, col: 5, offset: 34828},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1276, col: 10, offset: 34833},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1276, col: 12, offset: 34835},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 1278, col: 1, offset: 34869},
			expr: &choiceExpr{
				pos: position{line: 1279, col: 5, offset: 34888},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1279, col: 5, offset: 34888},
						run: (*parser).callonEscapeSequence2,
						expr: &seqExpr{
							pos: position{line: 1279, col: 5, offset: 34888},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1279, col: 5, offset: 34888},
									val:        "x",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1279, col: 9, offset: 34892},
									name: "HexDigit",
								},
								&ruleRefExpr{
									pos:  position{line: 1279, col: 18, offset: 34901},
									name: "HexDigit",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1280, col: 5, offset: 34952},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 1281, col: 5, offset: 34973},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 1283, col: 1, offset: 34988},
			expr: &choiceExpr{
				pos: position{line: 1284, col: 5, offset: 35009},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1284, col: 5, offset: 35009},
						val:        "'",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1285, col: 5, offset: 35017},
						run: (*parser).callonSingleCharEscape3,
						expr: &litMatcher{
							pos:        position{line: 1285, col: 5, offset: 35017},
							val:        "\"",
							ignoreCase: false,
						},
					},
					&litMatcher{
						pos:        position{line: 1286, col: 5, offset: 35057},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1287, col: 5, offset: 35066},
						run: (*parser).callonSingleCharEscape6,
						expr: &litMatcher{
							pos:        position{line: 1287, col: 5, offset: 35066},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1288, col: 5, offset: 35095},
						run: (*parser).callonSingleCharEscape8,
						expr: &litMatcher{
							pos:        position{line: 1288, col: 5, offset: 35095},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1289, col: 5, offset: 35124},
						run: (*parser).callonSingleCharEscape10,
						expr: &litMatcher{
							pos:        position{line: 1289, col: 5, offset: 35124},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1290, col: 5, offset: 35153},
						run: (*parser).callonSingleCharEscape12,
						expr: &litMatcher{
							pos:        position{line: 1290, col: 5, offset: 35153},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1291, col: 5, offset: 35182},
						run: (*parser).callonSingleCharEscape14,
						expr: &litMatcher{
							pos:        position{line: 1291, col: 5, offset: 35182},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1292, col: 5, offset: 35211},
						run: (*parser).callonSingleCharEscape16,
						expr: &litMatcher{
							pos:        position{line: 1292, col: 5, offset: 35211},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 1294, col: 1, offset: 35237},
			expr: &choiceExpr{
				pos: position{line: 1295, col: 5, offset: 35255},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1295, col: 5, offset: 35255},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 1295, col: 5, offset: 35255},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1296, col: 5, offset: 35283},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 1296, col: 5, offset: 35283},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1297, col: 5, offset: 35311},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 1299, col: 1, offset: 35317},
			expr: &choiceExpr{
				pos: position{line: 1300, col: 5, offset: 35335},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1300, col: 5, offset: 35335},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 1300, col: 5, offset: 35335},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1300, col: 5, offset: 35335},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1300, col: 9, offset: 35339},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1300, col: 16, offset: 35346},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1300, col: 16, offset: 35346},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1300, col: 25, offset: 35355},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1300, col: 34, offset: 35364},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1300, col: 43, offset: 35373},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1303, col: 5, offset: 35436},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 1303, col: 5, offset: 35436},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1303, col: 5, offset: 35436},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1303, col: 9, offset: 35440},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1303, col: 13, offset: 35444},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1303, col: 20, offset: 35451},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1303, col: 20, offset: 35451},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 1303, col: 29, offset: 35460},
												expr: &ruleRefExpr{
													pos:  position{line: 1303, col: 29, offset: 35460},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1303, col: 39, offset: 35470},
												expr: &ruleRefExpr{
													pos:  position{line: 1303, col: 39, offset: 35470},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1303, col: 49, offset: 35480},
												expr: &ruleRefExpr{
													pos:  position{line: 1303, col: 49, offset: 35480},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1303, col: 59, offset: 35490},
												expr: &ruleRefExpr{
													pos:  position{line: 1303, col: 59, offset: 35490},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1303, col: 69, offset: 35500},
												expr: &ruleRefExpr{
													pos:  position{line: 1303, col: 69, offset: 35500},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1303, col: 80, offset: 35511},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 1307, col: 1, offset: 35565},
			expr: &actionExpr{
				pos: position{line: 1308, col: 5, offset: 35576},
				run: (*parser).callonRegexp1,
				expr: &seqExpr{
					pos: position{line: 1308, col: 5, offset: 35576},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1308, col: 5, offset: 35576},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1308, col: 9, offset: 35580},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1308, col: 14, offset: 35585},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 1308, col: 25, offset: 35596},
							val:        "/",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1308, col: 29, offset: 35600},
							expr: &ruleRefExpr{
								pos:  position{line: 1308, col: 30, offset: 35601},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 1310, col: 1, offset: 35636},
			expr: &actionExpr{
				pos: position{line: 1311, col: 5, offset: 35651},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1311, col: 5, offset: 35651},
					expr: &choiceExpr{
						pos: position{line: 1311, col: 6, offset: 35652},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 1311, col: 6, offset: 35652},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&seqExpr{
								pos: position{line: 1311, col: 15, offset: 35661},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1311, col: 15, offset: 35661},
										val:        "\\",
										ignoreCase: false,
									},
									&anyMatcher{
										line: 1311, col: 20, offset: 35666,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 1313, col: 1, offset: 35702},
			expr: &charClassMatcher{
				pos:        position{line: 1314, col: 5, offset: 35718},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 1316, col: 1, offset: 35733},
			expr: &oneOrMoreExpr{
				pos: position{line: 1316, col: 6, offset: 35738},
				expr: &ruleRefExpr{
					pos:  position{line: 1316, col: 6, offset: 35738},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1318, col: 1, offset: 35749},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1318, col: 6, offset: 35754},
				expr: &ruleRefExpr{
					pos:  position{line: 1318, col: 6, offset: 35754},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 1320, col: 1, offset: 35765},
			expr: &choiceExpr{
				pos: position{line: 1321, col: 5, offset: 35778},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1321, col: 5, offset: 35778},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 1322, col: 5, offset: 35793},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 1323, col: 5, offset: 35812},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 1325, col: 1, offset: 35821},
			expr: &anyMatcher{
				line: 1326, col: 5, offset: 35841,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 1328, col: 1, offset: 35844},
			expr: &choiceExpr{
				pos: position{line: 1329, col: 5, offset: 35872},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1329, col: 5, offset: 35872},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1330, col: 5, offset: 35881},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1331, col: 5, offset: 35890},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1332, col: 5, offset: 35899},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1333, col: 5, offset: 35907},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1334, col: 5, offset: 35920},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 1336, col: 1, offset: 35930},
			expr: &charClassMatcher{
				pos:        position{line: 1337, col: 5, offset: 35949},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 1343, col: 1, offset: 36279},
			expr: &ruleRefExpr{
				pos:  position{line: 1346, col: 5, offset: 36350},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1348, col: 1, offset: 36369},
			expr: &seqExpr{
				pos: position{line: 1349, col: 5, offset: 36390},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1349, col: 5, offset: 36390},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1349, col: 10, offset: 36395},
						expr: &seqExpr{
							pos: position{line: 1349, col: 11, offset: 36396},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1349, col: 11, offset: 36396},
									expr: &litMatcher{
										pos:        position{line: 1349, col: 12, offset: 36397},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1349, col: 17, offset: 36402},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1349, col: 35, offset: 36420},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1351, col: 1, offset: 36426},
			expr: &seqExpr{
				pos: position{line: 1352, col: 5, offset: 36448},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1352, col: 5, offset: 36448},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1352, col: 10, offset: 36453},
						expr: &seqExpr{
							pos: position{line: 1352, col: 11, offset: 36454},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1352, col: 11, offset: 36454},
									expr: &ruleRefExpr{
										pos:  position{line: 1352, col: 12, offset: 36455},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1352, col: 27, offset: 36470},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1354, col: 1, offset: 36489},
			expr: &seqExpr{
				pos: position{line: 1354, col: 7, offset: 36495},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1354, col: 7, offset: 36495},
						expr: &ruleRefExpr{
							pos:  position{line: 1354, col: 7, offset: 36495},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1354, col: 19, offset: 36507},
						name: "LineTerminator",
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 1356, col: 1, offset: 36523},
			expr: &choiceExpr{
				pos: position{line: 1356, col: 7, offset: 36529},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1356, col: 7, offset: 36529},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 1356, col: 11, offset: 36533},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1358, col: 1, offset: 36538},
			expr: &notExpr{
				pos: position{line: 1358, col: 7, offset: 36544},
				expr: &anyMatcher{
					line: 1358, col: 8, offset: 36545,
				},
			},
		},
	},
}

func (c *current) onstart1(ast interface{}) (interface{}, error) {
	return ast, nil
}

func (p *parser) callonstart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart1(stack["ast"])
}

func (c *current) onSequential2(consts, first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": append([]interface{}{first}, (rest.([]interface{}))...), "consts": consts}, nil

}

func (p *parser) callonSequential2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential2(stack["consts"], stack["first"], stack["rest"])
}

func (c *current) onSequential12(consts, op interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": []interface{}{op}, "consts": consts}, nil

}

func (p *parser) callonSequential12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential12(stack["consts"], stack["op"])
}

func (c *current) onSequentialTail1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonSequentialTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequentialTail1(stack["p"])
}

func (c *current) onConsts4() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonConsts4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConsts4()
}

func (c *current) onConst1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonConst1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConst1(stack["v"])
}

func (c *current) onConstDef2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"name": id, "expr": expr}, nil

}

func (p *parser) callonConstDef2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDef2(stack["id"], stack["expr"])
}

func (c *current) onConstDef16(id, typ interface{}) (interface{}, error) {
	return map[string]interface{}{

		"name": id,

		"expr": map[string]interface{}{"kind": "TypeValue", "value": map[string]interface{}{"kind": "TypeDef", "name": id, "type": typ}}}, nil

}

func (p *parser) callonConstDef16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDef16(stack["id"], stack["typ"])
}

func (c *current) onParallel1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonParallel1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallel1(stack["s"])
}

func (c *current) onFromTrunk1(source, seq interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Trunk", "source": source, "seq": seq}, nil

}

func (p *parser) callonFromTrunk1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromTrunk1(stack["source"], stack["seq"])
}

func (c *current) onFromTrunkSeq1(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonFromTrunkSeq1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromTrunkSeq1(stack["seq"])
}

func (c *current) onOperation2(procArray interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Parallel", "procs": procArray}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["procArray"])
}

func (c *current) onOperation12(expr, cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": expr, "cases": cases}, nil

}

func (p *parser) callonOperation12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation12(stack["expr"], stack["cases"])
}

func (c *current) onOperation25(cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": nil, "cases": cases}, nil

}

func (p *parser) callonOperation25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation25(stack["cases"])
}

func (c *current) onOperation35(trunks interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": trunks}, nil

}

func (p *parser) callonOperation35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation35(stack["trunks"])
}

func (c *current) onOperation46(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonOperation46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation46(stack["f"])
}

func (c *current) onOperation52(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation52(stack["a"])
}

func (c *current) onOperation58(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation58(stack["a"])
}

func (c *current) onOperation64(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Filter", "expr": expr}, nil

}

func (p *parser) callonOperation64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation64(stack["expr"])
}

func (c *current) onSwitchLiteralClause1(expr, proc interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": expr, "proc": proc}, nil

}

func (p *parser) callonSwitchLiteralClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchLiteralClause1(stack["expr"], stack["proc"])
}

func (c *current) onSwitchSearchBooleanClause1(expr, proc interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": expr, "proc": proc}, nil

}

func (p *parser) callonSwitchSearchBooleanClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchSearchBooleanClause1(stack["expr"], stack["proc"])
}

func (c *current) onDefaultToken1() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonDefaultToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultToken1()
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor13(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor13(stack["expr"])
}

func (c *current) onSearchExpr2(search interface{}) (interface{}, error) {
	return search, nil
}

func (p *parser) callonSearchExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr2(stack["search"])
}

func (c *current) onSearchExpr5(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Search", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonSearchExpr5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr5(stack["v"])
}

func (c *current) onSearchExpr11() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil

}

func (p *parser) callonSearchExpr11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr11()
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onPatternSearch1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RegexpSearch", "pattern": pattern}, nil

}

func (p *parser) callonPatternSearch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternSearch1(stack["pattern"])
}

func (c *current) onPatternMatch1(f, pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RegexpMatch", "pattern": pattern, "expr": f}, nil

}

func (p *parser) callonPatternMatch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternMatch1(stack["f"], stack["pattern"])
}

func (c *current) onAggregation2(every, keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Summarize", "keys": keys, "aggs": nil, "duration": every, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["every"], stack["keys"], stack["limit"])
}

func (c *current) onAggregation13(every, aggs, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"kind": "Summarize", "keys": nil, "aggs": aggs, "duration": every, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation13(stack["every"], stack["aggs"], stack["keys"], stack["limit"])
}

func (c *current) onEveryDur1(dur interface{}) (interface{}, error) {
	return dur, nil
}

func (p *parser) callonEveryDur1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEveryDur1(stack["dur"])
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAggAssignment2(lval, agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lval, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment2(stack["lval"], stack["agg"])
}

func (c *current) onAggAssignment11(agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment11(stack["agg"])
}

func (c *current) onAgg1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"kind": "Agg", "name": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonAgg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAgg1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onAggAssignments1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonAggAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSortProc8(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc8(stack["l"])
}

func (c *current) onSortProc1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var proc = map[string]interface{}{"kind": "Sort", "args": list, "order": "asc", "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		proc["order"] = "desc"
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			proc["nullsfirst"] = true
		}
	}
	return proc, nil

}

func (p *parser) callonSortProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopProc6(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopProc6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc6(stack["n"])
}

func (c *current) onTopProc18(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopProc18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc18(stack["f"])
}

func (c *current) onTopProc1(limit, flush, fields interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Top", "limit": 0, "args": nil, "flush": false}
	if limit != nil {
		proc["limit"] = limit
	}
	if fields != nil {
		proc["args"] = fields
	}
	if flush != nil {
		proc["flush"] = true
	}
	return proc, nil

}

func (p *parser) callonTopProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cut", "args": args}, nil

}

func (p *parser) callonCutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutProc1(stack["args"])
}

func (c *current) onDropProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Drop", "args": args}, nil

}

func (p *parser) callonDropProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropProc1(stack["args"])
}

func (c *current) onHeadProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": count}, nil
}

func (p *parser) callonHeadProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc2(stack["count"])
}

func (c *current) onHeadProc8() (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": 1}, nil
}

func (p *parser) callonHeadProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc8()
}

func (c *current) onTailProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": count}, nil
}

func (p *parser) callonTailProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc2(stack["count"])
}

func (c *current) onTailProc8() (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": 1}, nil
}

func (p *parser) callonTailProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc8()
}

func (c *current) onFilterProc1(op interface{}) (interface{}, error) {
	return op, nil

}

func (p *parser) callonFilterProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilterProc1(stack["op"])
}

func (c *current) onFilter1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Filter", "expr": expr}, nil

}

func (p *parser) callonFilter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilter1(stack["expr"])
}

func (c *current) onUniqProc2() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": true}, nil

}

func (p *parser) callonUniqProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc2()
}

func (c *current) onUniqProc7() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": false}, nil

}

func (p *parser) callonUniqProc7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc7()
}

func (c *current) onPutProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Put", "args": args}, nil

}

func (p *parser) callonPutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutProc1(stack["args"])
}

func (c *current) onRenameProc9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameProc9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc9(stack["cl"])
}

func (c *current) onRenameProc1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Rename", "args": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc1(stack["first"], stack["rest"])
}

func (c *current) onFuseProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Fuse"}, nil

}

func (p *parser) callonFuseProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseProc1()
}

func (c *current) onShapeProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Shape"}, nil

}

func (p *parser) callonShapeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShapeProc1()
}

func (c *current) onJoinProc2(style, leftKey, rightKey, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Join", "style": style, "left_key": leftKey, "right_key": rightKey, "args": nil}
	if columns != nil {
		proc["args"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc2(stack["style"], stack["leftKey"], stack["rightKey"], stack["columns"])
}

func (c *current) onJoinProc22(style, key, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Join", "style": style, "left_key": key, "right_key": key, "args": nil}
	if columns != nil {
		proc["args"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc22(stack["style"], stack["key"], stack["columns"])
}

func (c *current) onJoinStyle2() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle2()
}

func (c *current) onJoinStyle6() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle6()
}

func (c *current) onJoinStyle10() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle10()
}

func (c *current) onJoinStyle14() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonJoinStyle14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle14()
}

func (c *current) onJoinStyle18() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle18()
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onSampleProc1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "consts": []interface{}{}, "procs": []interface{}{

		map[string]interface{}{"kind": "Summarize",

			"keys": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "shape"},

				"rhs": map[string]interface{}{"kind": "Call", "name": "typeof",

					"args": []interface{}{e},

					"where": nil}}},

			"aggs": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "sample"},

				"rhs": map[string]interface{}{"kind": "Agg",

					"name": "any",

					"expr": e,

					"where": nil}}},

			"duration": nil, "limit": 0},

		map[string]interface{}{"kind": "Cut",

			"args": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": nil,

				"rhs": map[string]interface{}{"kind": "ID", "name": "sample"}}}}}}, nil

}

func (p *parser) callonSampleProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleProc1(stack["e"])
}

func (c *current) onOpAssignment1(a interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpAssignment", "assignments": a}, nil

}

func (p *parser) callonOpAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpAssignment1(stack["a"])
}

func (c *current) onSampleExpr2(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonSampleExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr2(stack["lval"])
}

func (c *current) onSampleExpr7() (interface{}, error) {
	return map[string]interface{}{"kind": "This"}, nil
}

func (p *parser) callonSampleExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr7()
}

func (c *current) onFromProc1(source interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": []interface{}{map[string]interface{}{"kind": "Trunk", "source": source}}}, nil

}

func (p *parser) callonFromProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromProc1(stack["source"])
}

func (c *current) onFileProc1(path, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "File", "path": path, "format": format, "layout": layout}, nil

}

func (p *parser) callonFileProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileProc1(stack["path"], stack["format"], stack["layout"])
}

func (c *current) onPoolProc1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonPoolProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolProc1(stack["body"])
}

func (c *current) onPoolBody1(spec, at, over, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pool", "spec": spec, "at": at, "range": over, "scan_order": order}, nil

}

func (p *parser) callonPoolBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBody1(stack["spec"], stack["at"], stack["over"], stack["order"])
}

func (c *current) onHTTPProc1(url, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "HTTP", "url": url, "format": format, "layout": layout}, nil

}

func (p *parser) callonHTTPProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHTTPProc1(stack["url"], stack["format"], stack["layout"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onPath2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonPath2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath2(stack["v"])
}

func (c *current) onPath5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPath5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath5()
}

func (c *current) onPoolAt1(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonPoolAt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolAt1(stack["id"])
}

func (c *current) onKSUID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKSUID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKSUID1()
}

func (c *current) onPoolRange1(lower, upper interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Range", "lower": lower, "upper": upper}, nil

}

func (p *parser) callonPoolRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolRange1(stack["lower"], stack["upper"])
}

func (c *current) onPoolSpec2(pool, commit, meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": pool, "commit": commit, "meta": meta}, nil

}

func (p *parser) callonPoolSpec2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec2(stack["pool"], stack["commit"], stack["meta"])
}

func (c *current) onPoolSpec12(meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": nil, "commit": nil, "meta": meta}, nil

}

func (p *parser) callonPoolSpec12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec12(stack["meta"])
}

func (c *current) onPoolCommit1(commit interface{}) (interface{}, error) {
	return commit, nil
}

func (p *parser) callonPoolCommit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolCommit1(stack["commit"])
}

func (c *current) onPoolMeta1(meta interface{}) (interface{}, error) {
	return meta, nil
}

func (p *parser) callonPoolMeta1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolMeta1(stack["meta"])
}

func (c *current) onPoolIdentifier1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPoolIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolIdentifier1()
}

func (c *current) onLayoutArg1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Layout", "keys": keys, "order": order}, nil

}

func (p *parser) callonLayoutArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLayoutArg1(stack["keys"], stack["order"])
}

func (c *current) onFormatArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonFormatArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArg1(stack["val"])
}

func (c *current) onOrderSuffix2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix2()
}

func (c *current) onOrderSuffix4() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderSuffix4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix4()
}

func (c *current) onOrderSuffix6() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix6()
}

func (c *current) onOrderArg2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg2()
}

func (c *current) onOrderArg8() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderArg8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg8()
}

func (c *current) onPassProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Pass"}, nil

}

func (p *parser) callonPassProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassProc1()
}

func (c *current) onExplodeProc1(args, typ, as interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Explode", "args": args, "as": as, "type": typ}, nil

}

func (p *parser) callonExplodeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplodeProc1(stack["args"], stack["typ"], stack["as"])
}

func (c *current) onMergeProc1(field interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Merge", "field": field}, nil

}

func (p *parser) callonMergeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMergeProc1(stack["field"])
}

func (c *current) onOverProc1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Over", "exprs": exprs}, nil

}

func (p *parser) callonOverProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverProc1(stack["exprs"])
}

func (c *current) onLetProc1(locals, seq interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Scope", "locals": locals, "seq": seq}, nil

}

func (p *parser) callonLetProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetProc1(stack["locals"], stack["seq"])
}

func (c *current) onYieldProc1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Yield", "exprs": exprs}, nil

}

func (p *parser) callonYieldProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYieldProc1(stack["exprs"])
}

func (c *current) onTypeArg1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeArg1(stack["typ"])
}

func (c *current) onAsArg1(lhs interface{}) (interface{}, error) {
	return lhs, nil
}

func (p *parser) callonAsArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsArg1(stack["lhs"])
}

func (c *current) onLvals7(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonLvals7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals7(stack["lval"])
}

func (c *current) onLvals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLvals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals1(stack["first"], stack["rest"])
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignments7(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments7(stack["a"])
}

func (c *current) onAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr2(condition, thenClause, elseClause interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Conditional", "cond": condition, "then": thenClause, "else": elseClause}, nil

}

func (p *parser) callonConditionalExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr2(stack["condition"], stack["thenClause"], stack["elseClause"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onEqualityCompareExpr9(comp, expr interface{}) (interface{}, error) {
	return []interface{}{comp, expr}, nil
}

func (p *parser) callonEqualityCompareExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr9(stack["comp"], stack["expr"])
}

func (c *current) onEqualityCompareExpr3(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonEqualityCompareExpr3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr3(stack["first"], stack["rest"])
}

func (c *current) onEqualityOperator2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonEqualityOperator2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator2()
}

func (c *current) onEqualityOperator4() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityOperator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator4()
}

func (c *current) onEqualityComparator3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityComparator3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityComparator3()
}

func (c *current) onRelativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonRelativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onRelativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonRelativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onRelativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeOperator1()
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onFuncExpr3(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr3(stack["first"], stack["rest"])
}

func (c *current) onFuncExpr10(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr10(stack["first"], stack["rest"])
}

func (c *current) onMatchExpr1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonMatchExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchExpr1(stack["expr"])
}

func (c *current) onCast1(typ, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": expr, "type": typ}, nil

}

func (p *parser) callonCast1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCast1(stack["typ"], stack["expr"])
}

func (c *current) onFunction1(fn, args, where interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": fn, "args": args, "where": where}, nil

}

func (p *parser) callonFunction1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction1(stack["fn"], stack["args"], stack["where"])
}

func (c *current) onOptionalExprs3() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonOptionalExprs3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalExprs3()
}

func (c *current) onExprs7(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonExprs7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs7(stack["e"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonDerefExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr1(stack["e"])
}

func (c *current) onDerefExprPattern2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExprPattern2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExprPattern2(stack["first"], stack["rest"])
}

func (c *current) onDerefExprPattern9(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExprPattern9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExprPattern9(stack["first"], stack["rest"])
}

func (c *current) onDerefExprPattern16(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExprPattern16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExprPattern16(stack["first"], stack["rest"])
}

func (c *current) onDerefExprPattern23() (interface{}, error) {
	return map[string]interface{}{"kind": "This"}, nil

}

func (p *parser) callonDerefExprPattern23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExprPattern23()
}

func (c *current) onThis1() (interface{}, error) {
	return map[string]interface{}{"kind": "This"}, nil
}

func (p *parser) callonThis1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThis1()
}

func (c *current) onDotID2(field interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": ".",

		"lhs": map[string]interface{}{"kind": "This"},

		"rhs": field}, nil

}

func (p *parser) callonDotID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotID2(stack["field"])
}

func (c *current) onDotID7(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": "[",

		"lhs": map[string]interface{}{"kind": "This"},

		"rhs": expr}, nil

}

func (p *parser) callonDotID7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotID7(stack["expr"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref13(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": nil, "rhs": to}}, nil

}

func (p *parser) callonDeref13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref13(stack["to"])
}

func (c *current) onDeref22(from interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": nil}}, nil

}

func (p *parser) callonDeref22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref22(stack["from"])
}

func (c *current) onDeref31(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref31(stack["expr"])
}

func (c *current) onDeref37(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref37(stack["id"])
}

func (c *current) onPrimary7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary7(stack["expr"])
}

func (c *current) onRecord1(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RecordExpr", "fields": fields}, nil

}

func (p *parser) callonRecord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecord1(stack["fields"])
}

func (c *current) onFields2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFields2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFields2(stack["first"], stack["rest"])
}

func (c *current) onFields9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonFields9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFields9()
}

func (c *current) onFieldTail1(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonFieldTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldTail1(stack["f"])
}

func (c *current) onField1(name, value interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "value": value}, nil

}

func (p *parser) callonField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField1(stack["name"], stack["value"])
}

func (c *current) onArray1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ArrayExpr", "exprs": exprs}, nil

}

func (p *parser) callonArray1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArray1(stack["exprs"])
}

func (c *current) onSet1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SetExpr", "exprs": exprs}, nil

}

func (p *parser) callonSet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSet1(stack["exprs"])
}

func (c *current) onMap1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "MapExpr", "entries": exprs}, nil

}

func (p *parser) callonMap1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMap1(stack["exprs"])
}

func (c *current) onEntries2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonEntries2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries2(stack["first"], stack["rest"])
}

func (c *current) onEntries9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonEntries9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries9()
}

func (c *current) onEntryTail1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonEntryTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntryTail1(stack["e"])
}

func (c *current) onEntry1(key, value interface{}) (interface{}, error) {
	return map[string]interface{}{"key": key, "value": value}, nil

}

func (p *parser) callonEntry1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntry1(stack["key"], stack["value"])
}

func (c *current) onSQLProc1(selection, from, joins, where, groupby, having, orderby, limit interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "SQLExpr",

		"select": selection,

		"from": from,

		"joins": joins,

		"where": where,

		"group_by": groupby,

		"having": having,

		"order_by": orderby,

		"limit": limit}, nil

}

func (p *parser) callonSQLProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLProc1(stack["selection"], stack["from"], stack["joins"], stack["where"], stack["groupby"], stack["having"], stack["orderby"], stack["limit"])
}

func (c *current) onSQLSelect2() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLSelect2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect2()
}

func (c *current) onSQLSelect7(assignments interface{}) (interface{}, error) {
	return assignments, nil
}

func (p *parser) callonSQLSelect7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect7(stack["assignments"])
}

func (c *current) onSQLAssignment2(rhs, lhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonSQLAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment2(stack["rhs"], stack["lhs"])
}

func (c *current) onSQLAssignment11(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonSQLAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment11(stack["expr"])
}

func (c *current) onSQLAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments7(stack["expr"])
}

func (c *current) onSQLAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSQLFrom2(table, alias interface{}) (interface{}, error) {
	return map[string]interface{}{"table": table, "alias": alias}, nil

}

func (p *parser) callonSQLFrom2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom2(stack["table"], stack["alias"])
}

func (c *current) onSQLFrom12() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLFrom12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom12()
}

func (c *current) onSQLAlias2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias2(stack["id"])
}

func (c *current) onSQLAlias9(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias9(stack["id"])
}

func (c *current) onSQLJoins7(join interface{}) (interface{}, error) {
	return join, nil
}

func (p *parser) callonSQLJoins7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins7(stack["join"])
}

func (c *current) onSQLJoins1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLJoins1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins1(stack["first"], stack["rest"])
}

func (c *current) onSQLJoin1(style, table, alias, leftKey, rightKey interface{}) (interface{}, error) {
	return map[string]interface{}{

		"table": table,

		"style": style,

		"left_key": leftKey,

		"right_key": rightKey,

		"alias": alias}, nil

}

func (p *parser) callonSQLJoin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoin1(stack["style"], stack["table"], stack["alias"], stack["leftKey"], stack["rightKey"])
}

func (c *current) onSQLJoinStyle2(style interface{}) (interface{}, error) {
	return style, nil
}

func (p *parser) callonSQLJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle2(stack["style"])
}

func (c *current) onSQLJoinStyle11() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonSQLJoinStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle11()
}

func (c *current) onSQLWhere1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLWhere1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLWhere1(stack["expr"])
}

func (c *current) onSQLGroupBy1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonSQLGroupBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLGroupBy1(stack["columns"])
}

func (c *current) onSQLHaving1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLHaving1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLHaving1(stack["expr"])
}

func (c *current) onSQLOrderBy1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SQLOrderBy", "keys": keys, "order": order}, nil

}

func (p *parser) callonSQLOrderBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrderBy1(stack["keys"], stack["order"])
}

func (c *current) onSQLOrder2(dir interface{}) (interface{}, error) {
	return dir, nil
}

func (p *parser) callonSQLOrder2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder2(stack["dir"])
}

func (c *current) onSQLOrder9() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonSQLOrder9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder9()
}

func (c *current) onSQLLimit2(count interface{}) (interface{}, error) {
	return count, nil
}

func (p *parser) callonSQLLimit2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit2(stack["count"])
}

func (c *current) onSQLLimit9() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonSQLLimit9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit9()
}

func (c *current) onSELECT1() (interface{}, error) {
	return "select", nil
}

func (p *parser) callonSELECT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSELECT1()
}

func (c *current) onAS1() (interface{}, error) {
	return "as", nil
}

func (p *parser) callonAS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAS1()
}

func (c *current) onFROM1() (interface{}, error) {
	return "from", nil
}

func (p *parser) callonFROM1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFROM1()
}

func (c *current) onJOIN1() (interface{}, error) {
	return "join", nil
}

func (p *parser) callonJOIN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJOIN1()
}

func (c *current) onWHERE1() (interface{}, error) {
	return "where", nil
}

func (p *parser) callonWHERE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWHERE1()
}

func (c *current) onGROUP1() (interface{}, error) {
	return "group", nil
}

func (p *parser) callonGROUP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGROUP1()
}

func (c *current) onHAVING1() (interface{}, error) {
	return "having", nil
}

func (p *parser) callonHAVING1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHAVING1()
}

func (c *current) onORDER1() (interface{}, error) {
	return "order", nil
}

func (p *parser) callonORDER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onORDER1()
}

func (c *current) onON1() (interface{}, error) {
	return "on", nil
}

func (p *parser) callonON1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onON1()
}

func (c *current) onLIMIT1() (interface{}, error) {
	return "limit", nil
}

func (p *parser) callonLIMIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIMIT1()
}

func (c *current) onASC1() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonASC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onASC1()
}

func (c *current) onDESC1() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonDESC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDESC1()
}

func (c *current) onANTI1() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonANTI1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onANTI1()
}

func (c *current) onLEFT1() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonLEFT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLEFT1()
}

func (c *current) onRIGHT1() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonRIGHT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRIGHT1()
}

func (c *current) onINNER1() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonINNER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINNER1()
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "float64", "text": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "int64", "text": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "null", "text": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onBytesLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bytes", "text": string(c.text)}, nil

}

func (p *parser) callonBytesLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBytesLiteral1()
}

func (c *current) onTypeLiteral1(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonTypeLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeLiteral1(stack["typ"])
}

func (c *current) onAmbiguousType2(name interface{}) (interface{}, error) {
	return name, nil
}

func (p *parser) callonAmbiguousType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType2(stack["name"])
}

func (c *current) onAmbiguousType8(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeDef", "name": name, "type": typ}, nil

}

func (p *parser) callonAmbiguousType8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType8(stack["name"], stack["typ"])
}

func (c *current) onAmbiguousType21(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType21(stack["name"])
}

func (c *current) onAmbiguousType24(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonAmbiguousType24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType24(stack["u"])
}

func (c *current) onTypeUnion1(types interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeUnion", "types": types}, nil

}

func (p *parser) callonTypeUnion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeUnion1(stack["types"])
}

func (c *current) onTypeList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeList1(stack["first"], stack["rest"])
}

func (c *current) onTypeListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeListTail1(stack["typ"])
}

func (c *current) onComplexType2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType2(stack["fields"])
}

func (c *current) onComplexType10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexType10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType10(stack["typ"])
}

func (c *current) onComplexType18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexType18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType18(stack["typ"])
}

func (c *current) onComplexType26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexType26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType26(stack["keyType"], stack["valType"])
}

func (c *current) onTemplateLiteral1(v interface{}) (interface{}, error) {
	if v == nil {
		return map[string]interface{}{"kind": "Primitive", "type": "string", "text": ""}, nil
	}
	return makeTemplateExprChain(v), nil

}

func (p *parser) callonTemplateLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteral1(stack["v"])
}

func (c *current) onTemplateLiteralParts2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts2(stack["v"])
}

func (c *current) onTemplateLiteralParts9(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts9(stack["v"])
}

func (c *current) onTemplateDoubleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateDoubleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedPart3(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar2(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar7(stack["v"])
}

func (c *current) onTemplateSingleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateSingleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedPart3(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar2(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar7(stack["v"])
}

func (c *current) onTemplateExpr1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonTemplateExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateExpr1(stack["e"])
}

func (c *current) onPrimitiveType1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveType1()
}

func (c *current) onTypeFieldList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList1(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTail1(stack["typ"])
}

func (c *current) onTypeField1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeField1(stack["name"], stack["typ"])
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return "in", nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onIdentifierName19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName19()
}

func (c *current) onIdentifierName21(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName21(stack["id"])
}

func (c *current) onTime1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "time", "text": string(c.text)}, nil

}

func (p *parser) callonTime1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTime1()
}

func (c *current) onDuration1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "duration", "text": string(c.text)}, nil

}

func (p *parser) callonDuration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDuration1()
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordChars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordChars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordChars1()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onGlob1(head, tail interface{}) (interface{}, error) {
	return reglob.Reglob(head.(string) + joinChars(tail)), nil

}

func (p *parser) callonGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlob1(stack["head"], stack["tail"])
}

func (c *current) onGlobStart4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonGlobStart4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobStart4()
}

func (c *current) onGlobEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonGlobEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEsc1(stack["s"])
}

func (c *current) onGlobEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonGlobEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape2()
}

func (c *current) onGlobEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonGlobEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape4()
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onEscapeSequence2() (interface{}, error) {
	return "\\" + string(c.text), nil
}

func (p *parser) callonEscapeSequence2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapeSequence2()
}

func (c *current) onSingleCharEscape3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleCharEscape3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape3()
}

func (c *current) onSingleCharEscape6() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape6()
}

func (c *current) onSingleCharEscape8() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape8()
}

func (c *current) onSingleCharEscape10() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape10()
}

func (c *current) onSingleCharEscape12() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape12()
}

func (c *current) onSingleCharEscape14() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape14()
}

func (c *current) onSingleCharEscape16() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape16()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexp1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
