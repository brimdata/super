// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/brimdata/zed/reglob"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 7, col: 1, offset: 26},
			expr: &actionExpr{
				pos: position{line: 7, col: 9, offset: 34},
				run: (*parser).callonstart1,
				expr: &seqExpr{
					pos: position{line: 7, col: 9, offset: 34},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 7, col: 9, offset: 34},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 7, col: 12, offset: 37},
							label: "ast",
							expr: &ruleRefExpr{
								pos:  position{line: 7, col: 16, offset: 41},
								name: "Z",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 18, offset: 43},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 21, offset: 46},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Z",
			pos:  position{line: 13, col: 1, offset: 353},
			expr: &choiceExpr{
				pos: position{line: 14, col: 5, offset: 433},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 14, col: 5, offset: 433},
						run: (*parser).callonZ2,
						expr: &seqExpr{
							pos: position{line: 14, col: 5, offset: 433},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 14, col: 5, offset: 433},
									label: "decls",
									expr: &oneOrMoreExpr{
										pos: position{line: 14, col: 11, offset: 439},
										expr: &ruleRefExpr{
											pos:  position{line: 14, col: 11, offset: 439},
											name: "Decl",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 14, col: 17, offset: 445},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 14, col: 20, offset: 448},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 14, col: 26, offset: 454},
										name: "Operation",
									},
								},
								&labeledExpr{
									pos:   position{line: 14, col: 36, offset: 464},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 14, col: 41, offset: 469},
										expr: &ruleRefExpr{
											pos:  position{line: 14, col: 41, offset: 469},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 22, col: 5, offset: 742},
						name: "Sequential",
					},
				},
			},
		},
		{
			name: "Decl",
			pos:  position{line: 24, col: 1, offset: 754},
			expr: &actionExpr{
				pos: position{line: 24, col: 8, offset: 761},
				run: (*parser).callonDecl1,
				expr: &seqExpr{
					pos: position{line: 24, col: 8, offset: 761},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 24, col: 8, offset: 761},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 24, col: 11, offset: 764},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 24, col: 13, offset: 766},
								name: "AnyDecl",
							},
						},
					},
				},
			},
		},
		{
			name: "AnyDecl",
			pos:  position{line: 26, col: 1, offset: 793},
			expr: &choiceExpr{
				pos: position{line: 27, col: 5, offset: 805},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 27, col: 5, offset: 805},
						run: (*parser).callonAnyDecl2,
						expr: &seqExpr{
							pos: position{line: 27, col: 5, offset: 805},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 27, col: 5, offset: 805},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 13, offset: 813},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 15, offset: 815},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 18, offset: 818},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 33, offset: 833},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 27, col: 36, offset: 836},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 40, offset: 840},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 43, offset: 843},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 48, offset: 848},
										name: "Expr",
									},
								},
								&choiceExpr{
									pos: position{line: 27, col: 55, offset: 855},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 27, col: 55, offset: 855},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 27, col: 55, offset: 855},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 27, col: 58, offset: 858},
													val:        ";",
													ignoreCase: false,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 27, col: 64, offset: 864},
											name: "EOL",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 30, col: 5, offset: 962},
						run: (*parser).callonAnyDecl18,
						expr: &seqExpr{
							pos: position{line: 30, col: 5, offset: 962},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 30, col: 5, offset: 962},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 12, offset: 969},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 14, offset: 971},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 30, col: 17, offset: 974},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 32, offset: 989},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 30, col: 35, offset: 992},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 39, offset: 996},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 42, offset: 999},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 30, col: 46, offset: 1003},
										name: "Type",
									},
								},
								&choiceExpr{
									pos: position{line: 30, col: 53, offset: 1010},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 30, col: 53, offset: 1010},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 30, col: 53, offset: 1010},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 30, col: 56, offset: 1013},
													val:        ";",
													ignoreCase: false,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 30, col: 62, offset: 1019},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Sequential",
			pos:  position{line: 34, col: 1, offset: 1116},
			expr: &choiceExpr{
				pos: position{line: 35, col: 5, offset: 1131},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 35, col: 5, offset: 1131},
						run: (*parser).callonSequential2,
						expr: &seqExpr{
							pos: position{line: 35, col: 5, offset: 1131},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 35, col: 5, offset: 1131},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 35, col: 11, offset: 1137},
										name: "Operation",
									},
								},
								&labeledExpr{
									pos:   position{line: 35, col: 21, offset: 1147},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 35, col: 26, offset: 1152},
										expr: &ruleRefExpr{
											pos:  position{line: 35, col: 26, offset: 1152},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 38, col: 5, offset: 1310},
						run: (*parser).callonSequential9,
						expr: &labeledExpr{
							pos:   position{line: 38, col: 5, offset: 1310},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 38, col: 8, offset: 1313},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "SequentialTail",
			pos:  position{line: 42, col: 1, offset: 1423},
			expr: &actionExpr{
				pos: position{line: 42, col: 18, offset: 1440},
				run: (*parser).callonSequentialTail1,
				expr: &seqExpr{
					pos: position{line: 42, col: 18, offset: 1440},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 42, col: 18, offset: 1440},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 21, offset: 1443},
							name: "Pipe",
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 26, offset: 1448},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 42, col: 29, offset: 1451},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 31, offset: 1453},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Parallel",
			pos:  position{line: 44, col: 1, offset: 1482},
			expr: &choiceExpr{
				pos: position{line: 45, col: 5, offset: 1495},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 45, col: 5, offset: 1495},
						run: (*parser).callonParallel2,
						expr: &seqExpr{
							pos: position{line: 45, col: 5, offset: 1495},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 45, col: 5, offset: 1495},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 45, col: 11, offset: 1501},
										name: "Sequential",
									},
								},
								&labeledExpr{
									pos:   position{line: 45, col: 22, offset: 1512},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 45, col: 27, offset: 1517},
										expr: &ruleRefExpr{
											pos:  position{line: 45, col: 27, offset: 1517},
											name: "ParallelTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 48, col: 5, offset: 1618},
						run: (*parser).callonParallel9,
						expr: &labeledExpr{
							pos:   position{line: 48, col: 5, offset: 1618},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 48, col: 11, offset: 1624},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "ParallelTail",
			pos:  position{line: 52, col: 1, offset: 1683},
			expr: &actionExpr{
				pos: position{line: 53, col: 5, offset: 1700},
				run: (*parser).callonParallelTail1,
				expr: &seqExpr{
					pos: position{line: 53, col: 5, offset: 1700},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 53, col: 5, offset: 1700},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 53, col: 8, offset: 1703},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 53, col: 13, offset: 1708},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 53, col: 16, offset: 1711},
							label: "ch",
							expr: &ruleRefExpr{
								pos:  position{line: 53, col: 19, offset: 1714},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchBranch",
			pos:  position{line: 55, col: 1, offset: 1745},
			expr: &choiceExpr{
				pos: position{line: 56, col: 5, offset: 1762},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 56, col: 5, offset: 1762},
						run: (*parser).callonSwitchBranch2,
						expr: &seqExpr{
							pos: position{line: 56, col: 5, offset: 1762},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 56, col: 5, offset: 1762},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 56, col: 8, offset: 1765},
									name: "CaseToken",
								},
								&ruleRefExpr{
									pos:  position{line: 56, col: 18, offset: 1775},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 56, col: 20, offset: 1777},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 56, col: 22, offset: 1779},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 56, col: 36, offset: 1793},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 56, col: 39, offset: 1796},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 56, col: 44, offset: 1801},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 56, col: 47, offset: 1804},
									label: "proc",
									expr: &ruleRefExpr{
										pos:  position{line: 56, col: 52, offset: 1809},
										name: "Sequential",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 59, col: 5, offset: 1898},
						run: (*parser).callonSwitchBranch14,
						expr: &seqExpr{
							pos: position{line: 59, col: 5, offset: 1898},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 59, col: 5, offset: 1898},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 59, col: 8, offset: 1901},
									name: "DefaultToken",
								},
								&ruleRefExpr{
									pos:  position{line: 59, col: 21, offset: 1914},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 59, col: 24, offset: 1917},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 59, col: 29, offset: 1922},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 59, col: 32, offset: 1925},
									label: "proc",
									expr: &ruleRefExpr{
										pos:  position{line: 59, col: 37, offset: 1930},
										name: "Sequential",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Switch",
			pos:  position{line: 63, col: 1, offset: 2090},
			expr: &choiceExpr{
				pos: position{line: 64, col: 5, offset: 2101},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 64, col: 5, offset: 2101},
						run: (*parser).callonSwitch2,
						expr: &seqExpr{
							pos: position{line: 64, col: 5, offset: 2101},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 64, col: 5, offset: 2101},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 64, col: 11, offset: 2107},
										name: "SwitchBranch",
									},
								},
								&labeledExpr{
									pos:   position{line: 64, col: 24, offset: 2120},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 64, col: 29, offset: 2125},
										expr: &ruleRefExpr{
											pos:  position{line: 64, col: 29, offset: 2125},
											name: "SwitchBranch",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 67, col: 5, offset: 2226},
						run: (*parser).callonSwitch9,
						expr: &labeledExpr{
							pos:   position{line: 67, col: 5, offset: 2226},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 67, col: 11, offset: 2232},
								name: "SwitchBranch",
							},
						},
					},
				},
			},
		},
		{
			name: "CaseToken",
			pos:  position{line: 71, col: 1, offset: 2293},
			expr: &litMatcher{
				pos:        position{line: 71, col: 13, offset: 2305},
				val:        "case",
				ignoreCase: true,
			},
		},
		{
			name: "DefaultToken",
			pos:  position{line: 72, col: 1, offset: 2313},
			expr: &litMatcher{
				pos:        position{line: 72, col: 16, offset: 2328},
				val:        "default",
				ignoreCase: true,
			},
		},
		{
			name: "FromTrunks",
			pos:  position{line: 74, col: 1, offset: 2340},
			expr: &choiceExpr{
				pos: position{line: 75, col: 5, offset: 2355},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 75, col: 5, offset: 2355},
						run: (*parser).callonFromTrunks2,
						expr: &seqExpr{
							pos: position{line: 75, col: 5, offset: 2355},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 75, col: 5, offset: 2355},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 75, col: 11, offset: 2361},
										name: "FromTrunk",
									},
								},
								&labeledExpr{
									pos:   position{line: 75, col: 21, offset: 2371},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 75, col: 26, offset: 2376},
										expr: &ruleRefExpr{
											pos:  position{line: 75, col: 26, offset: 2376},
											name: "FromTrunkTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 78, col: 5, offset: 2478},
						run: (*parser).callonFromTrunks9,
						expr: &labeledExpr{
							pos:   position{line: 78, col: 5, offset: 2478},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 78, col: 11, offset: 2484},
								name: "FromTrunk",
							},
						},
					},
				},
			},
		},
		{
			name: "FromTrunk",
			pos:  position{line: 82, col: 1, offset: 2542},
			expr: &actionExpr{
				pos: position{line: 83, col: 5, offset: 2556},
				run: (*parser).callonFromTrunk1,
				expr: &seqExpr{
					pos: position{line: 83, col: 5, offset: 2556},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 83, col: 5, offset: 2556},
							label: "source",
							expr: &ruleRefExpr{
								pos:  position{line: 83, col: 12, offset: 2563},
								name: "FromSource",
							},
						},
						&labeledExpr{
							pos:   position{line: 83, col: 23, offset: 2574},
							label: "seq",
							expr: &ruleRefExpr{
								pos:  position{line: 83, col: 27, offset: 2578},
								name: "FromTrunkSeq",
							},
						},
					},
				},
			},
		},
		{
			name: "FromTrunkSeq",
			pos:  position{line: 87, col: 1, offset: 2688},
			expr: &choiceExpr{
				pos: position{line: 88, col: 5, offset: 2705},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 88, col: 5, offset: 2705},
						run: (*parser).callonFromTrunkSeq2,
						expr: &seqExpr{
							pos: position{line: 88, col: 5, offset: 2705},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 88, col: 5, offset: 2705},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 88, col: 8, offset: 2708},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 88, col: 13, offset: 2713},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 88, col: 16, offset: 2716},
									label: "seq",
									expr: &ruleRefExpr{
										pos:  position{line: 88, col: 20, offset: 2720},
										name: "Sequential",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 89, col: 5, offset: 2755},
						run: (*parser).callonFromTrunkSeq9,
						expr: &litMatcher{
							pos:        position{line: 89, col: 5, offset: 2755},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromTrunkTail",
			pos:  position{line: 91, col: 1, offset: 2778},
			expr: &actionExpr{
				pos: position{line: 92, col: 5, offset: 2796},
				run: (*parser).callonFromTrunkTail1,
				expr: &seqExpr{
					pos: position{line: 92, col: 5, offset: 2796},
					exprs: []interface{}{
						&seqExpr{
							pos: position{line: 92, col: 6, offset: 2797},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 92, col: 6, offset: 2797},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 92, col: 9, offset: 2800},
									val:        ";",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 92, col: 13, offset: 2804},
									name: "__",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 92, col: 18, offset: 2809},
							label: "trunk",
							expr: &ruleRefExpr{
								pos:  position{line: 92, col: 24, offset: 2815},
								name: "FromTrunk",
							},
						},
					},
				},
			},
		},
		{
			name: "FromSource",
			pos:  position{line: 94, col: 1, offset: 2848},
			expr: &choiceExpr{
				pos: position{line: 95, col: 5, offset: 2863},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 95, col: 5, offset: 2863},
						name: "FileProc",
					},
					&ruleRefExpr{
						pos:  position{line: 96, col: 5, offset: 2876},
						name: "HTTPProc",
					},
					&ruleRefExpr{
						pos:  position{line: 97, col: 5, offset: 2889},
						name: "PassProc",
					},
					&ruleRefExpr{
						pos:  position{line: 98, col: 5, offset: 2902},
						name: "PoolBody",
					},
				},
			},
		},
		{
			name: "Operation",
			pos:  position{line: 100, col: 1, offset: 2912},
			expr: &choiceExpr{
				pos: position{line: 101, col: 5, offset: 2926},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 101, col: 5, offset: 2926},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 101, col: 5, offset: 2926},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 101, col: 5, offset: 2926},
									val:        "split",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 101, col: 13, offset: 2934},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 101, col: 16, offset: 2937},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 101, col: 20, offset: 2941},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 101, col: 23, offset: 2944},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 101, col: 28, offset: 2949},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 101, col: 31, offset: 2952},
									label: "procArray",
									expr: &ruleRefExpr{
										pos:  position{line: 101, col: 41, offset: 2962},
										name: "Parallel",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 101, col: 50, offset: 2971},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 101, col: 53, offset: 2974},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 104, col: 5, offset: 3071},
						run: (*parser).callonOperation14,
						expr: &seqExpr{
							pos: position{line: 104, col: 5, offset: 3071},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 104, col: 5, offset: 3071},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 104, col: 14, offset: 3080},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 104, col: 17, offset: 3083},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 104, col: 21, offset: 3087},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 104, col: 24, offset: 3090},
									label: "caseArray",
									expr: &ruleRefExpr{
										pos:  position{line: 104, col: 34, offset: 3100},
										name: "Switch",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 104, col: 41, offset: 3107},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 104, col: 44, offset: 3110},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 107, col: 5, offset: 3205},
						run: (*parser).callonOperation24,
						expr: &seqExpr{
							pos: position{line: 107, col: 5, offset: 3205},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 107, col: 5, offset: 3205},
									val:        "from",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 107, col: 12, offset: 3212},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 107, col: 15, offset: 3215},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 107, col: 19, offset: 3219},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 107, col: 22, offset: 3222},
									label: "trunks",
									expr: &ruleRefExpr{
										pos:  position{line: 107, col: 29, offset: 3229},
										name: "FromTrunks",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 107, col: 40, offset: 3240},
									name: "__",
								},
								&zeroOrOneExpr{
									pos: position{line: 107, col: 43, offset: 3243},
									expr: &litMatcher{
										pos:        position{line: 107, col: 43, offset: 3243},
										val:        ";",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 107, col: 48, offset: 3248},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 107, col: 51, offset: 3251},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 110, col: 5, offset: 3342},
						name: "Operator",
					},
					&actionExpr{
						pos: position{line: 111, col: 5, offset: 3355},
						run: (*parser).callonOperation38,
						expr: &seqExpr{
							pos: position{line: 111, col: 5, offset: 3355},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 111, col: 5, offset: 3355},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 111, col: 7, offset: 3357},
										name: "Function",
									},
								},
								&andExpr{
									pos: position{line: 111, col: 16, offset: 3366},
									expr: &ruleRefExpr{
										pos:  position{line: 111, col: 17, offset: 3367},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 112, col: 5, offset: 3397},
						run: (*parser).callonOperation44,
						expr: &seqExpr{
							pos: position{line: 112, col: 5, offset: 3397},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 112, col: 5, offset: 3397},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 112, col: 7, offset: 3399},
										name: "Aggregation",
									},
								},
								&andExpr{
									pos: position{line: 112, col: 19, offset: 3411},
									expr: &ruleRefExpr{
										pos:  position{line: 112, col: 20, offset: 3412},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 113, col: 5, offset: 3443},
						run: (*parser).callonOperation50,
						expr: &seqExpr{
							pos: position{line: 113, col: 5, offset: 3443},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 113, col: 5, offset: 3443},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 113, col: 10, offset: 3448},
										name: "SearchBoolean",
									},
								},
								&notExpr{
									pos: position{line: 113, col: 24, offset: 3462},
									expr: &ruleRefExpr{
										pos:  position{line: 113, col: 25, offset: 3463},
										name: "AggGuard",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EndOfOp",
			pos:  position{line: 117, col: 1, offset: 3554},
			expr: &seqExpr{
				pos: position{line: 117, col: 11, offset: 3564},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 117, col: 11, offset: 3564},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 117, col: 15, offset: 3568},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 117, col: 15, offset: 3568},
								name: "Pipe",
							},
							&litMatcher{
								pos:        position{line: 117, col: 22, offset: 3575},
								val:        "=>",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 117, col: 29, offset: 3582},
								val:        ")",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 117, col: 35, offset: 3588},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "Pipe",
			pos:  position{line: 118, col: 1, offset: 3593},
			expr: &seqExpr{
				pos: position{line: 118, col: 8, offset: 3600},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 118, col: 8, offset: 3600},
						val:        "|",
						ignoreCase: false,
					},
					&notExpr{
						pos: position{line: 118, col: 12, offset: 3604},
						expr: &choiceExpr{
							pos: position{line: 118, col: 14, offset: 3606},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 118, col: 14, offset: 3606},
									val:        "{",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 118, col: 20, offset: 3612},
									val:        "[",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 120, col: 1, offset: 3618},
			expr: &seqExpr{
				pos: position{line: 120, col: 13, offset: 3630},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 120, col: 13, offset: 3630},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 120, col: 17, offset: 3634},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 120, col: 18, offset: 3635},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 120, col: 18, offset: 3635},
										expr: &litMatcher{
											pos:        position{line: 120, col: 19, offset: 3636},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 120, col: 24, offset: 3641},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 120, col: 38, offset: 3655},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 120, col: 57, offset: 3674},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 120, col: 82, offset: 3699},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 120, col: 88, offset: 3705},
								val:        "(",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "AggGuard",
			pos:  position{line: 122, col: 1, offset: 3711},
			expr: &choiceExpr{
				pos: position{line: 122, col: 12, offset: 3722},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 122, col: 13, offset: 3723},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 122, col: 13, offset: 3723},
								name: "_",
							},
							&choiceExpr{
								pos: position{line: 122, col: 16, offset: 3726},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 122, col: 16, offset: 3726},
										name: "ByToken",
									},
									&litMatcher{
										pos:        position{line: 122, col: 26, offset: 3736},
										val:        "-with",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 122, col: 35, offset: 3745},
								name: "EOT",
							},
						},
					},
					&seqExpr{
						pos: position{line: 122, col: 43, offset: 3753},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 122, col: 43, offset: 3753},
								name: "__",
							},
							&litMatcher{
								pos:        position{line: 122, col: 46, offset: 3756},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 124, col: 1, offset: 3762},
			expr: &actionExpr{
				pos: position{line: 125, col: 5, offset: 3780},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 125, col: 5, offset: 3780},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 125, col: 5, offset: 3780},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 11, offset: 3786},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 125, col: 21, offset: 3796},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 125, col: 26, offset: 3801},
								expr: &ruleRefExpr{
									pos:  position{line: 125, col: 26, offset: 3801},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 129, col: 1, offset: 3875},
			expr: &actionExpr{
				pos: position{line: 129, col: 16, offset: 3890},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 129, col: 16, offset: 3890},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 129, col: 16, offset: 3890},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 129, col: 18, offset: 3892},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 129, col: 26, offset: 3900},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 129, col: 28, offset: 3902},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 129, col: 30, offset: 3904},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 131, col: 1, offset: 3954},
			expr: &actionExpr{
				pos: position{line: 132, col: 5, offset: 3968},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 132, col: 5, offset: 3968},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 132, col: 5, offset: 3968},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 132, col: 11, offset: 3974},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 133, col: 5, offset: 3991},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 133, col: 10, offset: 3996},
								expr: &actionExpr{
									pos: position{line: 133, col: 11, offset: 3997},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 133, col: 11, offset: 3997},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 133, col: 11, offset: 3997},
												name: "__",
											},
											&zeroOrOneExpr{
												pos: position{line: 133, col: 14, offset: 4000},
												expr: &seqExpr{
													pos: position{line: 133, col: 15, offset: 4001},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 133, col: 15, offset: 4001},
															name: "AndToken",
														},
														&ruleRefExpr{
															pos:  position{line: 133, col: 24, offset: 4010},
															name: "_",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 133, col: 28, offset: 4014},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 133, col: 31, offset: 4017},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 133, col: 36, offset: 4022},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 137, col: 1, offset: 4138},
			expr: &choiceExpr{
				pos: position{line: 138, col: 5, offset: 4155},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 138, col: 5, offset: 4155},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 138, col: 5, offset: 4155},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 138, col: 6, offset: 4156},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 138, col: 6, offset: 4156},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 138, col: 6, offset: 4156},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 138, col: 15, offset: 4165},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 138, col: 19, offset: 4169},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 138, col: 19, offset: 4169},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 138, col: 23, offset: 4173},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 138, col: 27, offset: 4177},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 138, col: 29, offset: 4179},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 141, col: 5, offset: 4291},
						name: "ShortCut",
					},
					&ruleRefExpr{
						pos:  position{line: 142, col: 5, offset: 4304},
						name: "SearchExpr",
					},
					&actionExpr{
						pos: position{line: 143, col: 5, offset: 4319},
						run: (*parser).callonSearchFactor15,
						expr: &seqExpr{
							pos: position{line: 143, col: 5, offset: 4319},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 143, col: 5, offset: 4319},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 143, col: 9, offset: 4323},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 143, col: 12, offset: 4326},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 143, col: 17, offset: 4331},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 143, col: 31, offset: 4345},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 143, col: 34, offset: 4348},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShortCut",
			pos:  position{line: 145, col: 1, offset: 4374},
			expr: &choiceExpr{
				pos: position{line: 146, col: 5, offset: 4387},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 146, col: 5, offset: 4387},
						run: (*parser).callonShortCut2,
						expr: &seqExpr{
							pos: position{line: 146, col: 5, offset: 4387},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 146, col: 5, offset: 4387},
									val:        "*",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 146, col: 9, offset: 4391},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 146, col: 12, offset: 4394},
									label: "compareOp",
									expr: &ruleRefExpr{
										pos:  position{line: 146, col: 22, offset: 4404},
										name: "EqualityToken",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 146, col: 36, offset: 4418},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 146, col: 39, offset: 4421},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 146, col: 41, offset: 4423},
										name: "SearchValue",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 173, col: 5, offset: 5112},
						run: (*parser).callonShortCut11,
						expr: &seqExpr{
							pos: position{line: 173, col: 5, offset: 5112},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 173, col: 5, offset: 5112},
									label: "match",
									expr: &ruleRefExpr{
										pos:  position{line: 173, col: 11, offset: 5118},
										name: "PatternMatch",
									},
								},
								&notExpr{
									pos: position{line: 173, col: 24, offset: 5131},
									expr: &ruleRefExpr{
										pos:  position{line: 173, col: 25, offset: 5132},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 174, col: 5, offset: 5168},
						run: (*parser).callonShortCut17,
						expr: &seqExpr{
							pos: position{line: 174, col: 5, offset: 5168},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 174, col: 5, offset: 5168},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 174, col: 7, offset: 5170},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 174, col: 12, offset: 5175},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 174, col: 15, offset: 5178},
									label: "comp",
									expr: &ruleRefExpr{
										pos:  position{line: 174, col: 20, offset: 5183},
										name: "EqualityToken",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 174, col: 34, offset: 5197},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 174, col: 37, offset: 5200},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 174, col: 39, offset: 5202},
										name: "SearchValue",
									},
								},
								&notExpr{
									pos: position{line: 174, col: 51, offset: 5214},
									expr: &ruleRefExpr{
										pos:  position{line: 174, col: 52, offset: 5215},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 177, col: 5, offset: 5329},
						run: (*parser).callonShortCut29,
						expr: &seqExpr{
							pos: position{line: 177, col: 5, offset: 5329},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 177, col: 5, offset: 5329},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 177, col: 7, offset: 5331},
										name: "SearchValue",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 177, col: 19, offset: 5343},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 177, col: 21, offset: 5345},
									name: "InToken",
								},
								&ruleRefExpr{
									pos:  position{line: 177, col: 29, offset: 5353},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 177, col: 31, offset: 5355},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 204, col: 5, offset: 6037},
						run: (*parser).callonShortCut37,
						expr: &seqExpr{
							pos: position{line: 204, col: 5, offset: 6037},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 204, col: 5, offset: 6037},
									expr: &seqExpr{
										pos: position{line: 204, col: 7, offset: 6039},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 204, col: 7, offset: 6039},
												name: "SearchGuard",
											},
											&ruleRefExpr{
												pos:  position{line: 204, col: 19, offset: 6051},
												name: "EOT",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 204, col: 24, offset: 6056},
									label: "search",
									expr: &ruleRefExpr{
										pos:  position{line: 204, col: 31, offset: 6063},
										name: "PatternSearch",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 205, col: 5, offset: 6104},
						run: (*parser).callonShortCut45,
						expr: &seqExpr{
							pos: position{line: 205, col: 5, offset: 6104},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 205, col: 5, offset: 6104},
									expr: &seqExpr{
										pos: position{line: 205, col: 7, offset: 6106},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 205, col: 7, offset: 6106},
												name: "SearchGuard",
											},
											&ruleRefExpr{
												pos:  position{line: 205, col: 19, offset: 6118},
												name: "EOT",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 205, col: 24, offset: 6123},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 205, col: 26, offset: 6125},
										name: "SearchValue",
									},
								},
								&notExpr{
									pos: position{line: 205, col: 38, offset: 6137},
									expr: &ruleRefExpr{
										pos:  position{line: 205, col: 39, offset: 6138},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 208, col: 5, offset: 6255},
						run: (*parser).callonShortCut55,
						expr: &seqExpr{
							pos: position{line: 208, col: 5, offset: 6255},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 208, col: 5, offset: 6255},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 208, col: 9, offset: 6259},
									expr: &ruleRefExpr{
										pos:  position{line: 208, col: 10, offset: 6260},
										name: "ExprGuard",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 212, col: 1, offset: 6373},
			expr: &choiceExpr{
				pos: position{line: 213, col: 5, offset: 6389},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 213, col: 5, offset: 6389},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 214, col: 5, offset: 6401},
						run: (*parser).callonSearchValue3,
						expr: &seqExpr{
							pos: position{line: 214, col: 5, offset: 6401},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 214, col: 5, offset: 6401},
									expr: &ruleRefExpr{
										pos:  position{line: 214, col: 6, offset: 6402},
										name: "Regexp",
									},
								},
								&labeledExpr{
									pos:   position{line: 214, col: 13, offset: 6409},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 214, col: 15, offset: 6411},
										name: "KeyWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PatternSearch",
			pos:  position{line: 218, col: 1, offset: 6519},
			expr: &actionExpr{
				pos: position{line: 219, col: 5, offset: 6537},
				run: (*parser).callonPatternSearch1,
				expr: &labeledExpr{
					pos:   position{line: 219, col: 5, offset: 6537},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 219, col: 13, offset: 6545},
						name: "Pattern",
					},
				},
			},
		},
		{
			name: "PatternMatch",
			pos:  position{line: 223, col: 1, offset: 6647},
			expr: &choiceExpr{
				pos: position{line: 224, col: 5, offset: 6664},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 224, col: 5, offset: 6664},
						run: (*parser).callonPatternMatch2,
						expr: &seqExpr{
							pos: position{line: 224, col: 5, offset: 6664},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 224, col: 5, offset: 6664},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 224, col: 7, offset: 6666},
										name: "Lval",
									},
								},
								&choiceExpr{
									pos: position{line: 224, col: 13, offset: 6672},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 224, col: 14, offset: 6673},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 224, col: 14, offset: 6673},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 224, col: 17, offset: 6676},
													val:        "=",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 224, col: 21, offset: 6680},
													name: "__",
												},
											},
										},
										&seqExpr{
											pos: position{line: 224, col: 28, offset: 6687},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 224, col: 28, offset: 6687},
													name: "_",
												},
												&litMatcher{
													pos:        position{line: 224, col: 30, offset: 6689},
													val:        "in",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 224, col: 35, offset: 6694},
													name: "_",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 224, col: 40, offset: 6699},
									label: "pattern",
									expr: &ruleRefExpr{
										pos:  position{line: 224, col: 48, offset: 6707},
										name: "Pattern",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 227, col: 5, offset: 6822},
						run: (*parser).callonPatternMatch17,
						expr: &seqExpr{
							pos: position{line: 227, col: 5, offset: 6822},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 227, col: 5, offset: 6822},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 227, col: 7, offset: 6824},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 227, col: 12, offset: 6829},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 227, col: 15, offset: 6832},
									val:        "!=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 227, col: 20, offset: 6837},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 227, col: 24, offset: 6841},
									label: "pattern",
									expr: &ruleRefExpr{
										pos:  position{line: 227, col: 32, offset: 6849},
										name: "Pattern",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Pattern",
			pos:  position{line: 234, col: 1, offset: 7058},
			expr: &choiceExpr{
				pos: position{line: 234, col: 11, offset: 7068},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 234, col: 11, offset: 7068},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 234, col: 20, offset: 7077},
						name: "Glob",
					},
				},
			},
		},
		{
			name: "SearchGuard",
			pos:  position{line: 236, col: 1, offset: 7083},
			expr: &choiceExpr{
				pos: position{line: 237, col: 5, offset: 7099},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 237, col: 5, offset: 7099},
						name: "SQLTokenSentinels",
					},
					&ruleRefExpr{
						pos:  position{line: 238, col: 5, offset: 7121},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 239, col: 5, offset: 7134},
						name: "OrToken",
					},
					&ruleRefExpr{
						pos:  position{line: 240, col: 5, offset: 7146},
						name: "NotToken",
					},
					&ruleRefExpr{
						pos:  position{line: 241, col: 5, offset: 7159},
						name: "InToken",
					},
					&ruleRefExpr{
						pos:  position{line: 242, col: 5, offset: 7171},
						name: "ByToken",
					},
					&ruleRefExpr{
						pos:  position{line: 243, col: 5, offset: 7183},
						name: "CaseToken",
					},
					&ruleRefExpr{
						pos:  position{line: 244, col: 5, offset: 7197},
						name: "DefaultToken",
					},
					&litMatcher{
						pos:        position{line: 245, col: 5, offset: 7214},
						val:        "type(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 249, col: 1, offset: 7271},
			expr: &ruleRefExpr{
				pos:  position{line: 249, col: 14, offset: 7284},
				name: "SearchExprRelative",
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 251, col: 1, offset: 7304},
			expr: &actionExpr{
				pos: position{line: 251, col: 14, offset: 7317},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 251, col: 15, offset: 7318},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 251, col: 15, offset: 7318},
							val:        "=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 251, col: 21, offset: 7324},
							val:        "!=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 251, col: 28, offset: 7331},
							val:        "in",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 251, col: 35, offset: 7338},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 251, col: 42, offset: 7345},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 251, col: 48, offset: 7351},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 251, col: 55, offset: 7358},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SearchExprRelative",
			pos:  position{line: 253, col: 1, offset: 7395},
			expr: &actionExpr{
				pos: position{line: 254, col: 5, offset: 7418},
				run: (*parser).callonSearchExprRelative1,
				expr: &seqExpr{
					pos: position{line: 254, col: 5, offset: 7418},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 254, col: 5, offset: 7418},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 254, col: 11, offset: 7424},
								name: "SearchExprAdd",
							},
						},
						&labeledExpr{
							pos:   position{line: 255, col: 5, offset: 7442},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 255, col: 10, offset: 7447},
								expr: &actionExpr{
									pos: position{line: 255, col: 11, offset: 7448},
									run: (*parser).callonSearchExprRelative7,
									expr: &seqExpr{
										pos: position{line: 255, col: 11, offset: 7448},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 255, col: 11, offset: 7448},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 255, col: 14, offset: 7451},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 255, col: 17, offset: 7454},
													name: "Comparator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 255, col: 28, offset: 7465},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 255, col: 31, offset: 7468},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 255, col: 36, offset: 7473},
													name: "SearchExprAdd",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchExprAdd",
			pos:  position{line: 259, col: 1, offset: 7590},
			expr: &actionExpr{
				pos: position{line: 260, col: 5, offset: 7608},
				run: (*parser).callonSearchExprAdd1,
				expr: &seqExpr{
					pos: position{line: 260, col: 5, offset: 7608},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 260, col: 5, offset: 7608},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 260, col: 11, offset: 7614},
								name: "SearchExprMul",
							},
						},
						&labeledExpr{
							pos:   position{line: 261, col: 5, offset: 7632},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 261, col: 10, offset: 7637},
								expr: &actionExpr{
									pos: position{line: 261, col: 11, offset: 7638},
									run: (*parser).callonSearchExprAdd7,
									expr: &seqExpr{
										pos: position{line: 261, col: 11, offset: 7638},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 261, col: 11, offset: 7638},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 261, col: 14, offset: 7641},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 261, col: 17, offset: 7644},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 261, col: 34, offset: 7661},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 261, col: 37, offset: 7664},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 261, col: 42, offset: 7669},
													name: "SearchExprMul",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchExprMul",
			pos:  position{line: 265, col: 1, offset: 7786},
			expr: &actionExpr{
				pos: position{line: 266, col: 5, offset: 7804},
				run: (*parser).callonSearchExprMul1,
				expr: &seqExpr{
					pos: position{line: 266, col: 5, offset: 7804},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 266, col: 5, offset: 7804},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 266, col: 11, offset: 7810},
								name: "SearchExprCast",
							},
						},
						&labeledExpr{
							pos:   position{line: 267, col: 5, offset: 7829},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 267, col: 10, offset: 7834},
								expr: &actionExpr{
									pos: position{line: 267, col: 11, offset: 7835},
									run: (*parser).callonSearchExprMul7,
									expr: &seqExpr{
										pos: position{line: 267, col: 11, offset: 7835},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 267, col: 11, offset: 7835},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 267, col: 14, offset: 7838},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 267, col: 17, offset: 7841},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 267, col: 40, offset: 7864},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 267, col: 43, offset: 7867},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 267, col: 48, offset: 7872},
													name: "SearchExprCast",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchExprCast",
			pos:  position{line: 271, col: 1, offset: 7990},
			expr: &choiceExpr{
				pos: position{line: 272, col: 5, offset: 8009},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 272, col: 5, offset: 8009},
						run: (*parser).callonSearchExprCast2,
						expr: &seqExpr{
							pos: position{line: 272, col: 5, offset: 8009},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 272, col: 5, offset: 8009},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 272, col: 7, offset: 8011},
										name: "SearchExprFunc",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 272, col: 22, offset: 8026},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 272, col: 25, offset: 8029},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 272, col: 29, offset: 8033},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 272, col: 32, offset: 8036},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 272, col: 36, offset: 8040},
										name: "CastType",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 275, col: 5, offset: 8142},
						name: "SearchExprFunc",
					},
				},
			},
		},
		{
			name: "SearchExprFunc",
			pos:  position{line: 277, col: 1, offset: 8158},
			expr: &choiceExpr{
				pos: position{line: 278, col: 5, offset: 8177},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 278, col: 5, offset: 8177},
						name: "MatchExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 279, col: 5, offset: 8191},
						name: "TypeLiteral",
					},
					&actionExpr{
						pos: position{line: 280, col: 5, offset: 8207},
						run: (*parser).callonSearchExprFunc4,
						expr: &seqExpr{
							pos: position{line: 280, col: 5, offset: 8207},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 280, col: 5, offset: 8207},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 280, col: 11, offset: 8213},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 280, col: 20, offset: 8222},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 280, col: 25, offset: 8227},
										expr: &ruleRefExpr{
											pos:  position{line: 280, col: 26, offset: 8228},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 283, col: 5, offset: 8300},
						name: "Literal",
					},
					&ruleRefExpr{
						pos:  position{line: 284, col: 5, offset: 8312},
						name: "Record",
					},
					&ruleRefExpr{
						pos:  position{line: 285, col: 5, offset: 8323},
						name: "Array",
					},
					&ruleRefExpr{
						pos:  position{line: 286, col: 5, offset: 8333},
						name: "Set",
					},
					&ruleRefExpr{
						pos:  position{line: 287, col: 5, offset: 8341},
						name: "Map",
					},
					&ruleRefExpr{
						pos:  position{line: 288, col: 5, offset: 8349},
						name: "DerefExpr",
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 292, col: 1, offset: 8386},
			expr: &choiceExpr{
				pos: position{line: 293, col: 5, offset: 8402},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 293, col: 5, offset: 8402},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 293, col: 5, offset: 8402},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 293, col: 5, offset: 8402},
									name: "Summarize",
								},
								&labeledExpr{
									pos:   position{line: 293, col: 15, offset: 8412},
									label: "every",
									expr: &ruleRefExpr{
										pos:  position{line: 293, col: 21, offset: 8418},
										name: "EveryDur",
									},
								},
								&labeledExpr{
									pos:   position{line: 293, col: 30, offset: 8427},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 293, col: 35, offset: 8432},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 293, col: 47, offset: 8444},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 293, col: 53, offset: 8450},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 296, col: 5, offset: 8595},
						run: (*parser).callonAggregation11,
						expr: &seqExpr{
							pos: position{line: 296, col: 5, offset: 8595},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 296, col: 5, offset: 8595},
									name: "Summarize",
								},
								&labeledExpr{
									pos:   position{line: 296, col: 15, offset: 8605},
									label: "every",
									expr: &ruleRefExpr{
										pos:  position{line: 296, col: 21, offset: 8611},
										name: "EveryDur",
									},
								},
								&labeledExpr{
									pos:   position{line: 296, col: 30, offset: 8620},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 296, col: 35, offset: 8625},
										name: "AggAssignments",
									},
								},
								&labeledExpr{
									pos:   position{line: 296, col: 50, offset: 8640},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 296, col: 55, offset: 8645},
										expr: &seqExpr{
											pos: position{line: 296, col: 56, offset: 8646},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 296, col: 56, offset: 8646},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 296, col: 58, offset: 8648},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 296, col: 72, offset: 8662},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 296, col: 78, offset: 8668},
										name: "LimitArg",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Summarize",
			pos:  position{line: 304, col: 1, offset: 8901},
			expr: &choiceExpr{
				pos: position{line: 304, col: 13, offset: 8913},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 304, col: 13, offset: 8913},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 304, col: 13, offset: 8913},
								val:        "summarize",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 304, col: 25, offset: 8925},
								name: "_",
							},
						},
					},
					&litMatcher{
						pos:        position{line: 304, col: 29, offset: 8929},
						val:        "",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "EveryDur",
			pos:  position{line: 306, col: 1, offset: 8933},
			expr: &choiceExpr{
				pos: position{line: 307, col: 5, offset: 8946},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 307, col: 5, offset: 8946},
						run: (*parser).callonEveryDur2,
						expr: &seqExpr{
							pos: position{line: 307, col: 5, offset: 8946},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 307, col: 5, offset: 8946},
									val:        "every",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 307, col: 14, offset: 8955},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 307, col: 16, offset: 8957},
									label: "dur",
									expr: &ruleRefExpr{
										pos:  position{line: 307, col: 20, offset: 8961},
										name: "Duration",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 307, col: 29, offset: 8970},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 308, col: 5, offset: 8996},
						run: (*parser).callonEveryDur9,
						expr: &litMatcher{
							pos:        position{line: 308, col: 5, offset: 8996},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 310, col: 1, offset: 9021},
			expr: &actionExpr{
				pos: position{line: 311, col: 5, offset: 9037},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 311, col: 5, offset: 9037},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 311, col: 5, offset: 9037},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 311, col: 13, offset: 9045},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 311, col: 15, offset: 9047},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 311, col: 23, offset: 9055},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 313, col: 1, offset: 9096},
			expr: &choiceExpr{
				pos: position{line: 314, col: 5, offset: 9109},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 314, col: 5, offset: 9109},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 314, col: 5, offset: 9109},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 314, col: 5, offset: 9109},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 314, col: 7, offset: 9111},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 314, col: 14, offset: 9118},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 314, col: 16, offset: 9120},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 314, col: 25, offset: 9129},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 314, col: 27, offset: 9131},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 314, col: 33, offset: 9137},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 315, col: 5, offset: 9168},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 315, col: 5, offset: 9168},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 320, col: 1, offset: 9428},
			expr: &choiceExpr{
				pos: position{line: 321, col: 5, offset: 9447},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 321, col: 5, offset: 9447},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 322, col: 5, offset: 9462},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 322, col: 5, offset: 9462},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 322, col: 10, offset: 9467},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 324, col: 1, offset: 9559},
			expr: &actionExpr{
				pos: position{line: 325, col: 5, offset: 9579},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 325, col: 5, offset: 9579},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 325, col: 5, offset: 9579},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 325, col: 11, offset: 9585},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 325, col: 26, offset: 9600},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 325, col: 31, offset: 9605},
								expr: &actionExpr{
									pos: position{line: 325, col: 32, offset: 9606},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 325, col: 32, offset: 9606},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 325, col: 32, offset: 9606},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 325, col: 35, offset: 9609},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 325, col: 39, offset: 9613},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 325, col: 42, offset: 9616},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 325, col: 47, offset: 9621},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignment",
			pos:  position{line: 329, col: 1, offset: 9743},
			expr: &choiceExpr{
				pos: position{line: 330, col: 5, offset: 9761},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 330, col: 5, offset: 9761},
						run: (*parser).callonAggAssignment2,
						expr: &seqExpr{
							pos: position{line: 330, col: 5, offset: 9761},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 330, col: 5, offset: 9761},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 330, col: 10, offset: 9766},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 330, col: 15, offset: 9771},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 330, col: 18, offset: 9774},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 330, col: 22, offset: 9778},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 330, col: 25, offset: 9781},
									label: "agg",
									expr: &ruleRefExpr{
										pos:  position{line: 330, col: 29, offset: 9785},
										name: "Agg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 333, col: 5, offset: 9889},
						run: (*parser).callonAggAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 333, col: 5, offset: 9889},
							label: "agg",
							expr: &ruleRefExpr{
								pos:  position{line: 333, col: 9, offset: 9893},
								name: "Agg",
							},
						},
					},
				},
			},
		},
		{
			name: "Agg",
			pos:  position{line: 337, col: 1, offset: 9993},
			expr: &actionExpr{
				pos: position{line: 338, col: 5, offset: 10001},
				run: (*parser).callonAgg1,
				expr: &seqExpr{
					pos: position{line: 338, col: 5, offset: 10001},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 338, col: 5, offset: 10001},
							expr: &ruleRefExpr{
								pos:  position{line: 338, col: 6, offset: 10002},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 338, col: 16, offset: 10012},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 338, col: 19, offset: 10015},
								name: "AggName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 338, col: 27, offset: 10023},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 338, col: 30, offset: 10026},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 338, col: 34, offset: 10030},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 338, col: 37, offset: 10033},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 338, col: 42, offset: 10038},
								expr: &ruleRefExpr{
									pos:  position{line: 338, col: 42, offset: 10038},
									name: "Expr",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 338, col: 49, offset: 10045},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 338, col: 52, offset: 10048},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 338, col: 56, offset: 10052},
							expr: &seqExpr{
								pos: position{line: 338, col: 58, offset: 10054},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 338, col: 58, offset: 10054},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 338, col: 61, offset: 10057},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 338, col: 66, offset: 10062},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 338, col: 72, offset: 10068},
								expr: &ruleRefExpr{
									pos:  position{line: 338, col: 72, offset: 10068},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggName",
			pos:  position{line: 346, col: 1, offset: 10258},
			expr: &choiceExpr{
				pos: position{line: 347, col: 5, offset: 10270},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 347, col: 5, offset: 10270},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 348, col: 5, offset: 10289},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 349, col: 5, offset: 10302},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 351, col: 1, offset: 10311},
			expr: &actionExpr{
				pos: position{line: 351, col: 15, offset: 10325},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 351, col: 15, offset: 10325},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 351, col: 15, offset: 10325},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 351, col: 17, offset: 10327},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 351, col: 25, offset: 10335},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 351, col: 27, offset: 10337},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 351, col: 32, offset: 10342},
								name: "SearchBoolean",
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignments",
			pos:  position{line: 353, col: 1, offset: 10378},
			expr: &actionExpr{
				pos: position{line: 354, col: 5, offset: 10397},
				run: (*parser).callonAggAssignments1,
				expr: &seqExpr{
					pos: position{line: 354, col: 5, offset: 10397},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 354, col: 5, offset: 10397},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 354, col: 11, offset: 10403},
								name: "AggAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 354, col: 25, offset: 10417},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 354, col: 30, offset: 10422},
								expr: &seqExpr{
									pos: position{line: 354, col: 31, offset: 10423},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 354, col: 31, offset: 10423},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 354, col: 34, offset: 10426},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 354, col: 38, offset: 10430},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 354, col: 41, offset: 10433},
											name: "AggAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 364, col: 1, offset: 10669},
			expr: &choiceExpr{
				pos: position{line: 365, col: 5, offset: 10682},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 365, col: 5, offset: 10682},
						name: "SortProc",
					},
					&ruleRefExpr{
						pos:  position{line: 366, col: 5, offset: 10695},
						name: "TopProc",
					},
					&ruleRefExpr{
						pos:  position{line: 367, col: 5, offset: 10707},
						name: "CutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 368, col: 5, offset: 10719},
						name: "PickProc",
					},
					&ruleRefExpr{
						pos:  position{line: 369, col: 5, offset: 10732},
						name: "DropProc",
					},
					&ruleRefExpr{
						pos:  position{line: 370, col: 5, offset: 10745},
						name: "HeadProc",
					},
					&ruleRefExpr{
						pos:  position{line: 371, col: 5, offset: 10758},
						name: "TailProc",
					},
					&ruleRefExpr{
						pos:  position{line: 372, col: 5, offset: 10771},
						name: "FilterProc",
					},
					&ruleRefExpr{
						pos:  position{line: 373, col: 5, offset: 10786},
						name: "UniqProc",
					},
					&ruleRefExpr{
						pos:  position{line: 374, col: 5, offset: 10799},
						name: "PutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 375, col: 5, offset: 10811},
						name: "RenameProc",
					},
					&ruleRefExpr{
						pos:  position{line: 376, col: 5, offset: 10826},
						name: "FuseProc",
					},
					&ruleRefExpr{
						pos:  position{line: 377, col: 5, offset: 10839},
						name: "ShapeProc",
					},
					&ruleRefExpr{
						pos:  position{line: 378, col: 5, offset: 10853},
						name: "JoinProc",
					},
					&ruleRefExpr{
						pos:  position{line: 379, col: 5, offset: 10866},
						name: "SampleProc",
					},
					&ruleRefExpr{
						pos:  position{line: 380, col: 5, offset: 10881},
						name: "SQLProc",
					},
					&ruleRefExpr{
						pos:  position{line: 381, col: 5, offset: 10893},
						name: "FromProc",
					},
					&ruleRefExpr{
						pos:  position{line: 382, col: 5, offset: 10906},
						name: "PassProc",
					},
				},
			},
		},
		{
			name: "SortProc",
			pos:  position{line: 384, col: 1, offset: 10916},
			expr: &actionExpr{
				pos: position{line: 385, col: 5, offset: 10929},
				run: (*parser).callonSortProc1,
				expr: &seqExpr{
					pos: position{line: 385, col: 5, offset: 10929},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 385, col: 5, offset: 10929},
							val:        "sort",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 385, col: 13, offset: 10937},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 385, col: 18, offset: 10942},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 385, col: 27, offset: 10951},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 385, col: 32, offset: 10956},
								expr: &actionExpr{
									pos: position{line: 385, col: 33, offset: 10957},
									run: (*parser).callonSortProc8,
									expr: &seqExpr{
										pos: position{line: 385, col: 33, offset: 10957},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 385, col: 33, offset: 10957},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 385, col: 35, offset: 10959},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 385, col: 37, offset: 10961},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 399, col: 1, offset: 11376},
			expr: &actionExpr{
				pos: position{line: 399, col: 12, offset: 11387},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 399, col: 12, offset: 11387},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 399, col: 17, offset: 11392},
						expr: &actionExpr{
							pos: position{line: 399, col: 18, offset: 11393},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 399, col: 18, offset: 11393},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 399, col: 18, offset: 11393},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 399, col: 20, offset: 11395},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 399, col: 22, offset: 11397},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 401, col: 1, offset: 11453},
			expr: &choiceExpr{
				pos: position{line: 402, col: 5, offset: 11465},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 402, col: 5, offset: 11465},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 402, col: 5, offset: 11465},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 403, col: 5, offset: 11540},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 403, col: 5, offset: 11540},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 403, col: 5, offset: 11540},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 403, col: 14, offset: 11549},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 403, col: 16, offset: 11551},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 403, col: 23, offset: 11558},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 403, col: 24, offset: 11559},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 403, col: 24, offset: 11559},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 403, col: 34, offset: 11569},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopProc",
			pos:  position{line: 405, col: 1, offset: 11683},
			expr: &actionExpr{
				pos: position{line: 406, col: 5, offset: 11695},
				run: (*parser).callonTopProc1,
				expr: &seqExpr{
					pos: position{line: 406, col: 5, offset: 11695},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 406, col: 5, offset: 11695},
							val:        "top",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 406, col: 12, offset: 11702},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 406, col: 18, offset: 11708},
								expr: &actionExpr{
									pos: position{line: 406, col: 19, offset: 11709},
									run: (*parser).callonTopProc6,
									expr: &seqExpr{
										pos: position{line: 406, col: 19, offset: 11709},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 406, col: 19, offset: 11709},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 406, col: 21, offset: 11711},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 406, col: 23, offset: 11713},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 406, col: 47, offset: 11737},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 406, col: 53, offset: 11743},
								expr: &seqExpr{
									pos: position{line: 406, col: 54, offset: 11744},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 406, col: 54, offset: 11744},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 406, col: 56, offset: 11746},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 406, col: 67, offset: 11757},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 406, col: 74, offset: 11764},
								expr: &actionExpr{
									pos: position{line: 406, col: 75, offset: 11765},
									run: (*parser).callonTopProc18,
									expr: &seqExpr{
										pos: position{line: 406, col: 75, offset: 11765},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 406, col: 75, offset: 11765},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 406, col: 77, offset: 11767},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 406, col: 79, offset: 11769},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutProc",
			pos:  position{line: 420, col: 1, offset: 12114},
			expr: &actionExpr{
				pos: position{line: 421, col: 5, offset: 12126},
				run: (*parser).callonCutProc1,
				expr: &seqExpr{
					pos: position{line: 421, col: 5, offset: 12126},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 421, col: 5, offset: 12126},
							val:        "cut",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 421, col: 12, offset: 12133},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 421, col: 14, offset: 12135},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 421, col: 19, offset: 12140},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "PickProc",
			pos:  position{line: 425, col: 1, offset: 12235},
			expr: &actionExpr{
				pos: position{line: 426, col: 5, offset: 12248},
				run: (*parser).callonPickProc1,
				expr: &seqExpr{
					pos: position{line: 426, col: 5, offset: 12248},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 426, col: 5, offset: 12248},
							val:        "pick",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 426, col: 13, offset: 12256},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 426, col: 15, offset: 12258},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 426, col: 20, offset: 12263},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropProc",
			pos:  position{line: 430, col: 1, offset: 12359},
			expr: &actionExpr{
				pos: position{line: 431, col: 5, offset: 12372},
				run: (*parser).callonDropProc1,
				expr: &seqExpr{
					pos: position{line: 431, col: 5, offset: 12372},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 431, col: 5, offset: 12372},
							val:        "drop",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 431, col: 13, offset: 12380},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 431, col: 15, offset: 12382},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 431, col: 20, offset: 12387},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadProc",
			pos:  position{line: 435, col: 1, offset: 12478},
			expr: &choiceExpr{
				pos: position{line: 436, col: 5, offset: 12491},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 436, col: 5, offset: 12491},
						run: (*parser).callonHeadProc2,
						expr: &seqExpr{
							pos: position{line: 436, col: 5, offset: 12491},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 436, col: 5, offset: 12491},
									val:        "head",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 436, col: 13, offset: 12499},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 436, col: 15, offset: 12501},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 436, col: 21, offset: 12507},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 437, col: 5, offset: 12587},
						run: (*parser).callonHeadProc8,
						expr: &litMatcher{
							pos:        position{line: 437, col: 5, offset: 12587},
							val:        "head",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "TailProc",
			pos:  position{line: 439, col: 1, offset: 12663},
			expr: &choiceExpr{
				pos: position{line: 440, col: 5, offset: 12676},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 440, col: 5, offset: 12676},
						run: (*parser).callonTailProc2,
						expr: &seqExpr{
							pos: position{line: 440, col: 5, offset: 12676},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 440, col: 5, offset: 12676},
									val:        "tail",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 440, col: 13, offset: 12684},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 440, col: 15, offset: 12686},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 440, col: 21, offset: 12692},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 441, col: 5, offset: 12772},
						run: (*parser).callonTailProc8,
						expr: &litMatcher{
							pos:        position{line: 441, col: 5, offset: 12772},
							val:        "tail",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "FilterProc",
			pos:  position{line: 443, col: 1, offset: 12848},
			expr: &actionExpr{
				pos: position{line: 444, col: 5, offset: 12863},
				run: (*parser).callonFilterProc1,
				expr: &seqExpr{
					pos: position{line: 444, col: 5, offset: 12863},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 444, col: 5, offset: 12863},
							val:        "filter",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 444, col: 15, offset: 12873},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 444, col: 17, offset: 12875},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 444, col: 20, offset: 12878},
								name: "Filter",
							},
						},
					},
				},
			},
		},
		{
			name: "Filter",
			pos:  position{line: 448, col: 1, offset: 12915},
			expr: &actionExpr{
				pos: position{line: 449, col: 5, offset: 12926},
				run: (*parser).callonFilter1,
				expr: &labeledExpr{
					pos:   position{line: 449, col: 5, offset: 12926},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 449, col: 10, offset: 12931},
						name: "SearchBoolean",
					},
				},
			},
		},
		{
			name: "UniqProc",
			pos:  position{line: 453, col: 1, offset: 13027},
			expr: &choiceExpr{
				pos: position{line: 454, col: 5, offset: 13040},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 454, col: 5, offset: 13040},
						run: (*parser).callonUniqProc2,
						expr: &seqExpr{
							pos: position{line: 454, col: 5, offset: 13040},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 454, col: 5, offset: 13040},
									val:        "uniq",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 454, col: 13, offset: 13048},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 454, col: 15, offset: 13050},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 457, col: 5, offset: 13139},
						run: (*parser).callonUniqProc7,
						expr: &litMatcher{
							pos:        position{line: 457, col: 5, offset: 13139},
							val:        "uniq",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "PutProc",
			pos:  position{line: 461, col: 1, offset: 13229},
			expr: &actionExpr{
				pos: position{line: 462, col: 5, offset: 13241},
				run: (*parser).callonPutProc1,
				expr: &seqExpr{
					pos: position{line: 462, col: 5, offset: 13241},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 462, col: 5, offset: 13241},
							val:        "put",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 462, col: 12, offset: 13248},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 462, col: 14, offset: 13250},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 462, col: 19, offset: 13255},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameProc",
			pos:  position{line: 466, col: 1, offset: 13350},
			expr: &actionExpr{
				pos: position{line: 467, col: 5, offset: 13365},
				run: (*parser).callonRenameProc1,
				expr: &seqExpr{
					pos: position{line: 467, col: 5, offset: 13365},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 467, col: 5, offset: 13365},
							val:        "rename",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 467, col: 15, offset: 13375},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 467, col: 17, offset: 13377},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 467, col: 23, offset: 13383},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 467, col: 34, offset: 13394},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 467, col: 39, offset: 13399},
								expr: &actionExpr{
									pos: position{line: 467, col: 40, offset: 13400},
									run: (*parser).callonRenameProc9,
									expr: &seqExpr{
										pos: position{line: 467, col: 40, offset: 13400},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 467, col: 40, offset: 13400},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 467, col: 43, offset: 13403},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 467, col: 47, offset: 13407},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 467, col: 50, offset: 13410},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 467, col: 53, offset: 13413},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseProc",
			pos:  position{line: 475, col: 1, offset: 13822},
			expr: &actionExpr{
				pos: position{line: 476, col: 5, offset: 13835},
				run: (*parser).callonFuseProc1,
				expr: &seqExpr{
					pos: position{line: 476, col: 5, offset: 13835},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 476, col: 5, offset: 13835},
							val:        "fuse",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 476, col: 13, offset: 13843},
							expr: &seqExpr{
								pos: position{line: 476, col: 15, offset: 13845},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 476, col: 15, offset: 13845},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 476, col: 18, offset: 13848},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShapeProc",
			pos:  position{line: 480, col: 1, offset: 13919},
			expr: &actionExpr{
				pos: position{line: 481, col: 5, offset: 13933},
				run: (*parser).callonShapeProc1,
				expr: &litMatcher{
					pos:        position{line: 481, col: 5, offset: 13933},
					val:        "shape",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JoinProc",
			pos:  position{line: 485, col: 1, offset: 14009},
			expr: &choiceExpr{
				pos: position{line: 486, col: 5, offset: 14022},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 486, col: 5, offset: 14022},
						run: (*parser).callonJoinProc2,
						expr: &seqExpr{
							pos: position{line: 486, col: 5, offset: 14022},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 486, col: 5, offset: 14022},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 486, col: 11, offset: 14028},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 486, col: 21, offset: 14038},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 486, col: 29, offset: 14046},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 486, col: 31, offset: 14048},
									label: "leftKey",
									expr: &ruleRefExpr{
										pos:  position{line: 486, col: 39, offset: 14056},
										name: "JoinKey",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 486, col: 47, offset: 14064},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 486, col: 50, offset: 14067},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 486, col: 54, offset: 14071},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 486, col: 57, offset: 14074},
									label: "rightKey",
									expr: &ruleRefExpr{
										pos:  position{line: 486, col: 66, offset: 14083},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 486, col: 74, offset: 14091},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 486, col: 82, offset: 14099},
										expr: &seqExpr{
											pos: position{line: 486, col: 83, offset: 14100},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 486, col: 83, offset: 14100},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 486, col: 85, offset: 14102},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 493, col: 5, offset: 14368},
						run: (*parser).callonJoinProc20,
						expr: &seqExpr{
							pos: position{line: 493, col: 5, offset: 14368},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 493, col: 5, offset: 14368},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 493, col: 11, offset: 14374},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 493, col: 22, offset: 14385},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 493, col: 30, offset: 14393},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 493, col: 32, offset: 14395},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 493, col: 36, offset: 14399},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 493, col: 44, offset: 14407},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 493, col: 52, offset: 14415},
										expr: &seqExpr{
											pos: position{line: 493, col: 53, offset: 14416},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 493, col: 53, offset: 14416},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 493, col: 55, offset: 14418},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinStyle",
			pos:  position{line: 501, col: 1, offset: 14672},
			expr: &choiceExpr{
				pos: position{line: 502, col: 5, offset: 14686},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 502, col: 5, offset: 14686},
						run: (*parser).callonJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 502, col: 5, offset: 14686},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 502, col: 5, offset: 14686},
									val:        "inner",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 502, col: 14, offset: 14695},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 503, col: 5, offset: 14725},
						run: (*parser).callonJoinStyle6,
						expr: &seqExpr{
							pos: position{line: 503, col: 5, offset: 14725},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 503, col: 5, offset: 14725},
									val:        "left",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 503, col: 14, offset: 14734},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 504, col: 5, offset: 14763},
						run: (*parser).callonJoinStyle10,
						expr: &seqExpr{
							pos: position{line: 504, col: 5, offset: 14763},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 504, col: 5, offset: 14763},
									val:        "right",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 504, col: 14, offset: 14772},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 505, col: 5, offset: 14802},
						run: (*parser).callonJoinStyle14,
						expr: &litMatcher{
							pos:        position{line: 505, col: 5, offset: 14802},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 507, col: 1, offset: 14838},
			expr: &choiceExpr{
				pos: position{line: 508, col: 5, offset: 14850},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 508, col: 5, offset: 14850},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 509, col: 5, offset: 14859},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 509, col: 5, offset: 14859},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 509, col: 5, offset: 14859},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 509, col: 9, offset: 14863},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 509, col: 14, offset: 14868},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 509, col: 19, offset: 14873},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SampleProc",
			pos:  position{line: 511, col: 1, offset: 14899},
			expr: &actionExpr{
				pos: position{line: 512, col: 5, offset: 14914},
				run: (*parser).callonSampleProc1,
				expr: &seqExpr{
					pos: position{line: 512, col: 5, offset: 14914},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 512, col: 5, offset: 14914},
							val:        "sample",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 512, col: 15, offset: 14924},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 512, col: 17, offset: 14926},
								name: "SampleExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SampleExpr",
			pos:  position{line: 549, col: 1, offset: 16221},
			expr: &choiceExpr{
				pos: position{line: 550, col: 5, offset: 16236},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 550, col: 5, offset: 16236},
						run: (*parser).callonSampleExpr2,
						expr: &seqExpr{
							pos: position{line: 550, col: 5, offset: 16236},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 550, col: 5, offset: 16236},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 550, col: 7, offset: 16238},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 550, col: 12, offset: 16243},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 551, col: 5, offset: 16272},
						run: (*parser).callonSampleExpr7,
						expr: &litMatcher{
							pos:        position{line: 551, col: 5, offset: 16272},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromProc",
			pos:  position{line: 553, col: 1, offset: 16330},
			expr: &actionExpr{
				pos: position{line: 554, col: 5, offset: 16343},
				run: (*parser).callonFromProc1,
				expr: &labeledExpr{
					pos:   position{line: 554, col: 5, offset: 16343},
					label: "source",
					expr: &ruleRefExpr{
						pos:  position{line: 554, col: 12, offset: 16350},
						name: "FromAny",
					},
				},
			},
		},
		{
			name: "FromAny",
			pos:  position{line: 558, col: 1, offset: 16506},
			expr: &choiceExpr{
				pos: position{line: 559, col: 5, offset: 16518},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 559, col: 5, offset: 16518},
						name: "FileProc",
					},
					&ruleRefExpr{
						pos:  position{line: 560, col: 5, offset: 16531},
						name: "HTTPProc",
					},
					&ruleRefExpr{
						pos:  position{line: 561, col: 5, offset: 16544},
						name: "PoolProc",
					},
				},
			},
		},
		{
			name: "FileProc",
			pos:  position{line: 563, col: 1, offset: 16554},
			expr: &actionExpr{
				pos: position{line: 564, col: 5, offset: 16567},
				run: (*parser).callonFileProc1,
				expr: &seqExpr{
					pos: position{line: 564, col: 5, offset: 16567},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 564, col: 5, offset: 16567},
							val:        "file",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 564, col: 13, offset: 16575},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 564, col: 15, offset: 16577},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 564, col: 20, offset: 16582},
								name: "Path",
							},
						},
						&labeledExpr{
							pos:   position{line: 564, col: 25, offset: 16587},
							label: "format",
							expr: &ruleRefExpr{
								pos:  position{line: 564, col: 32, offset: 16594},
								name: "FormatArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 564, col: 42, offset: 16604},
							label: "layout",
							expr: &ruleRefExpr{
								pos:  position{line: 564, col: 49, offset: 16611},
								name: "LayoutArg",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolProc",
			pos:  position{line: 568, col: 1, offset: 16739},
			expr: &actionExpr{
				pos: position{line: 569, col: 5, offset: 16752},
				run: (*parser).callonPoolProc1,
				expr: &seqExpr{
					pos: position{line: 569, col: 5, offset: 16752},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 569, col: 5, offset: 16752},
							val:        "from",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 569, col: 13, offset: 16760},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 569, col: 15, offset: 16762},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 569, col: 20, offset: 16767},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolBody",
			pos:  position{line: 571, col: 1, offset: 16798},
			expr: &actionExpr{
				pos: position{line: 572, col: 5, offset: 16811},
				run: (*parser).callonPoolBody1,
				expr: &seqExpr{
					pos: position{line: 572, col: 5, offset: 16811},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 572, col: 5, offset: 16811},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 572, col: 10, offset: 16816},
								name: "PoolName",
							},
						},
						&labeledExpr{
							pos:   position{line: 572, col: 19, offset: 16825},
							label: "at",
							expr: &ruleRefExpr{
								pos:  position{line: 572, col: 22, offset: 16828},
								name: "PoolAt",
							},
						},
						&labeledExpr{
							pos:   position{line: 572, col: 29, offset: 16835},
							label: "over",
							expr: &ruleRefExpr{
								pos:  position{line: 572, col: 34, offset: 16840},
								name: "PoolRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 572, col: 44, offset: 16850},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 572, col: 50, offset: 16856},
								name: "OrderArg",
							},
						},
					},
				},
			},
		},
		{
			name: "HTTPProc",
			pos:  position{line: 576, col: 1, offset: 16991},
			expr: &actionExpr{
				pos: position{line: 577, col: 5, offset: 17004},
				run: (*parser).callonHTTPProc1,
				expr: &seqExpr{
					pos: position{line: 577, col: 5, offset: 17004},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 577, col: 5, offset: 17004},
							val:        "get",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 577, col: 12, offset: 17011},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 577, col: 14, offset: 17013},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 577, col: 18, offset: 17017},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 577, col: 22, offset: 17021},
							label: "format",
							expr: &ruleRefExpr{
								pos:  position{line: 577, col: 29, offset: 17028},
								name: "FormatArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 577, col: 39, offset: 17038},
							label: "layout",
							expr: &ruleRefExpr{
								pos:  position{line: 577, col: 46, offset: 17045},
								name: "LayoutArg",
							},
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 581, col: 1, offset: 17170},
			expr: &actionExpr{
				pos: position{line: 581, col: 7, offset: 17176},
				run: (*parser).callonURL1,
				expr: &seqExpr{
					pos: position{line: 581, col: 7, offset: 17176},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 581, col: 8, offset: 17177},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 581, col: 8, offset: 17177},
									val:        "http:",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 581, col: 18, offset: 17187},
									val:        "https:",
									ignoreCase: false,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 581, col: 28, offset: 17197},
							name: "Path",
						},
					},
				},
			},
		},
		{
			name: "Path",
			pos:  position{line: 583, col: 1, offset: 17234},
			expr: &choiceExpr{
				pos: position{line: 584, col: 5, offset: 17243},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 584, col: 5, offset: 17243},
						run: (*parser).callonPath2,
						expr: &labeledExpr{
							pos:   position{line: 584, col: 5, offset: 17243},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 584, col: 7, offset: 17245},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 585, col: 5, offset: 17280},
						run: (*parser).callonPath5,
						expr: &seqExpr{
							pos: position{line: 585, col: 5, offset: 17280},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 585, col: 5, offset: 17280},
									expr: &charClassMatcher{
										pos:        position{line: 585, col: 5, offset: 17280},
										val:        "[0-9a-zA-Z!@$%^&*()_=<>,./?;:[\\]{}~|+-]",
										chars:      []rune{'!', '@', '$', '%', '^', '&', '*', '(', ')', '_', '=', '<', '>', ',', '.', '/', '?', ';', ':', '[', ']', '{', '}', '~', '|', '+', '-'},
										ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 585, col: 46, offset: 17321},
									expr: &ruleRefExpr{
										pos:  position{line: 585, col: 47, offset: 17322},
										name: "EOT",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PoolAt",
			pos:  position{line: 587, col: 1, offset: 17358},
			expr: &choiceExpr{
				pos: position{line: 588, col: 5, offset: 17369},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 588, col: 5, offset: 17369},
						run: (*parser).callonPoolAt2,
						expr: &seqExpr{
							pos: position{line: 588, col: 5, offset: 17369},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 588, col: 5, offset: 17369},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 588, col: 7, offset: 17371},
									val:        "at",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 588, col: 13, offset: 17377},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 588, col: 15, offset: 17379},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 588, col: 18, offset: 17382},
										name: "KSUID",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 589, col: 5, offset: 17411},
						run: (*parser).callonPoolAt9,
						expr: &litMatcher{
							pos:        position{line: 589, col: 5, offset: 17411},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KSUID",
			pos:  position{line: 591, col: 1, offset: 17435},
			expr: &actionExpr{
				pos: position{line: 591, col: 9, offset: 17443},
				run: (*parser).callonKSUID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 591, col: 9, offset: 17443},
					expr: &charClassMatcher{
						pos:        position{line: 591, col: 10, offset: 17444},
						val:        "[0-9a-zA-Z]",
						ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "PoolRange",
			pos:  position{line: 593, col: 1, offset: 17490},
			expr: &choiceExpr{
				pos: position{line: 594, col: 5, offset: 17504},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 594, col: 5, offset: 17504},
						run: (*parser).callonPoolRange2,
						expr: &seqExpr{
							pos: position{line: 594, col: 5, offset: 17504},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 594, col: 5, offset: 17504},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 594, col: 7, offset: 17506},
									val:        "over",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 594, col: 15, offset: 17514},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 594, col: 17, offset: 17516},
									label: "lower",
									expr: &ruleRefExpr{
										pos:  position{line: 594, col: 23, offset: 17522},
										name: "Literal",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 594, col: 31, offset: 17530},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 594, col: 33, offset: 17532},
									val:        "to",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 594, col: 39, offset: 17538},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 594, col: 41, offset: 17540},
									label: "upper",
									expr: &ruleRefExpr{
										pos:  position{line: 594, col: 47, offset: 17546},
										name: "Literal",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 597, col: 5, offset: 17654},
						run: (*parser).callonPoolRange14,
						expr: &litMatcher{
							pos:        position{line: 597, col: 5, offset: 17654},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PoolTo",
			pos:  position{line: 599, col: 1, offset: 17678},
			expr: &choiceExpr{
				pos: position{line: 600, col: 5, offset: 17689},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 600, col: 5, offset: 17689},
						run: (*parser).callonPoolTo2,
						expr: &seqExpr{
							pos: position{line: 600, col: 5, offset: 17689},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 600, col: 5, offset: 17689},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 600, col: 7, offset: 17691},
									val:        "to",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 600, col: 13, offset: 17697},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 600, col: 15, offset: 17699},
									label: "val",
									expr: &ruleRefExpr{
										pos:  position{line: 600, col: 19, offset: 17703},
										name: "Literal",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 601, col: 5, offset: 17735},
						run: (*parser).callonPoolTo9,
						expr: &litMatcher{
							pos:        position{line: 601, col: 5, offset: 17735},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PoolName",
			pos:  position{line: 603, col: 1, offset: 17759},
			expr: &choiceExpr{
				pos: position{line: 604, col: 5, offset: 17772},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 604, col: 5, offset: 17772},
						run: (*parser).callonPoolName2,
						expr: &labeledExpr{
							pos:   position{line: 604, col: 5, offset: 17772},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 604, col: 10, offset: 17777},
								name: "IdentifierName",
							},
						},
					},
					&actionExpr{
						pos: position{line: 605, col: 5, offset: 17817},
						run: (*parser).callonPoolName5,
						expr: &labeledExpr{
							pos:   position{line: 605, col: 5, offset: 17817},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 605, col: 8, offset: 17820},
								name: "KSUID",
							},
						},
					},
					&actionExpr{
						pos: position{line: 606, col: 5, offset: 17849},
						run: (*parser).callonPoolName8,
						expr: &labeledExpr{
							pos:   position{line: 606, col: 5, offset: 17849},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 606, col: 7, offset: 17851},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "LayoutArg",
			pos:  position{line: 608, col: 1, offset: 17883},
			expr: &choiceExpr{
				pos: position{line: 609, col: 5, offset: 17897},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 609, col: 5, offset: 17897},
						run: (*parser).callonLayoutArg2,
						expr: &seqExpr{
							pos: position{line: 609, col: 5, offset: 17897},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 609, col: 5, offset: 17897},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 609, col: 7, offset: 17899},
									val:        "order",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 609, col: 16, offset: 17908},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 609, col: 18, offset: 17910},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 609, col: 23, offset: 17915},
										name: "FieldExprs",
									},
								},
								&labeledExpr{
									pos:   position{line: 609, col: 34, offset: 17926},
									label: "order",
									expr: &ruleRefExpr{
										pos:  position{line: 609, col: 40, offset: 17932},
										name: "OrderSuffix",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 612, col: 5, offset: 18045},
						run: (*parser).callonLayoutArg11,
						expr: &litMatcher{
							pos:        position{line: 612, col: 5, offset: 18045},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FormatArg",
			pos:  position{line: 614, col: 1, offset: 18069},
			expr: &choiceExpr{
				pos: position{line: 615, col: 5, offset: 18083},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 615, col: 5, offset: 18083},
						run: (*parser).callonFormatArg2,
						expr: &seqExpr{
							pos: position{line: 615, col: 5, offset: 18083},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 615, col: 5, offset: 18083},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 615, col: 7, offset: 18085},
									val:        "format",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 615, col: 17, offset: 18095},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 615, col: 19, offset: 18097},
									label: "val",
									expr: &ruleRefExpr{
										pos:  position{line: 615, col: 23, offset: 18101},
										name: "IdentifierName",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 616, col: 5, offset: 18140},
						run: (*parser).callonFormatArg9,
						expr: &litMatcher{
							pos:        position{line: 616, col: 5, offset: 18140},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OrderSuffix",
			pos:  position{line: 618, col: 1, offset: 18163},
			expr: &choiceExpr{
				pos: position{line: 619, col: 5, offset: 18179},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 619, col: 5, offset: 18179},
						run: (*parser).callonOrderSuffix2,
						expr: &litMatcher{
							pos:        position{line: 619, col: 5, offset: 18179},
							val:        ":asc",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 620, col: 5, offset: 18214},
						run: (*parser).callonOrderSuffix4,
						expr: &litMatcher{
							pos:        position{line: 620, col: 5, offset: 18214},
							val:        ":desc",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 621, col: 5, offset: 18251},
						run: (*parser).callonOrderSuffix6,
						expr: &litMatcher{
							pos:        position{line: 621, col: 5, offset: 18251},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OrderArg",
			pos:  position{line: 623, col: 1, offset: 18277},
			expr: &choiceExpr{
				pos: position{line: 624, col: 5, offset: 18290},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 624, col: 5, offset: 18290},
						run: (*parser).callonOrderArg2,
						expr: &seqExpr{
							pos: position{line: 624, col: 5, offset: 18290},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 624, col: 5, offset: 18290},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 624, col: 7, offset: 18292},
									val:        "order",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 624, col: 16, offset: 18301},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 624, col: 18, offset: 18303},
									val:        "asc",
									ignoreCase: true,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 625, col: 5, offset: 18337},
						run: (*parser).callonOrderArg8,
						expr: &seqExpr{
							pos: position{line: 625, col: 5, offset: 18337},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 625, col: 5, offset: 18337},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 625, col: 7, offset: 18339},
									val:        "order",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 625, col: 16, offset: 18348},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 625, col: 18, offset: 18350},
									val:        "desc",
									ignoreCase: true,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 626, col: 5, offset: 18386},
						run: (*parser).callonOrderArg14,
						expr: &litMatcher{
							pos:        position{line: 626, col: 5, offset: 18386},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PassProc",
			pos:  position{line: 628, col: 1, offset: 18409},
			expr: &actionExpr{
				pos: position{line: 629, col: 5, offset: 18422},
				run: (*parser).callonPassProc1,
				expr: &litMatcher{
					pos:        position{line: 629, col: 5, offset: 18422},
					val:        "pass",
					ignoreCase: true,
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 635, col: 1, offset: 18520},
			expr: &ruleRefExpr{
				pos:  position{line: 635, col: 8, offset: 18527},
				name: "DerefExpr",
			},
		},
		{
			name: "Lvals",
			pos:  position{line: 637, col: 1, offset: 18538},
			expr: &actionExpr{
				pos: position{line: 638, col: 5, offset: 18548},
				run: (*parser).callonLvals1,
				expr: &seqExpr{
					pos: position{line: 638, col: 5, offset: 18548},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 638, col: 5, offset: 18548},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 638, col: 11, offset: 18554},
								name: "Lval",
							},
						},
						&labeledExpr{
							pos:   position{line: 638, col: 16, offset: 18559},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 638, col: 21, offset: 18564},
								expr: &actionExpr{
									pos: position{line: 638, col: 22, offset: 18565},
									run: (*parser).callonLvals7,
									expr: &seqExpr{
										pos: position{line: 638, col: 22, offset: 18565},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 638, col: 22, offset: 18565},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 638, col: 25, offset: 18568},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 638, col: 29, offset: 18572},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 638, col: 32, offset: 18575},
												label: "lval",
												expr: &ruleRefExpr{
													pos:  position{line: 638, col: 37, offset: 18580},
													name: "Lval",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 642, col: 1, offset: 18692},
			expr: &ruleRefExpr{
				pos:  position{line: 642, col: 13, offset: 18704},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 644, col: 1, offset: 18710},
			expr: &actionExpr{
				pos: position{line: 645, col: 5, offset: 18725},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 645, col: 5, offset: 18725},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 645, col: 5, offset: 18725},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 645, col: 11, offset: 18731},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 645, col: 21, offset: 18741},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 645, col: 26, offset: 18746},
								expr: &seqExpr{
									pos: position{line: 645, col: 27, offset: 18747},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 645, col: 27, offset: 18747},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 645, col: 30, offset: 18750},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 645, col: 34, offset: 18754},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 645, col: 37, offset: 18757},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 655, col: 1, offset: 18956},
			expr: &actionExpr{
				pos: position{line: 656, col: 5, offset: 18971},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 656, col: 5, offset: 18971},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 656, col: 5, offset: 18971},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 656, col: 9, offset: 18975},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 656, col: 14, offset: 18980},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 656, col: 17, offset: 18983},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 656, col: 21, offset: 18987},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 656, col: 24, offset: 18990},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 656, col: 28, offset: 18994},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 658, col: 1, offset: 19085},
			expr: &ruleRefExpr{
				pos:  position{line: 658, col: 8, offset: 19092},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 660, col: 1, offset: 19109},
			expr: &choiceExpr{
				pos: position{line: 661, col: 5, offset: 19129},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 661, col: 5, offset: 19129},
						run: (*parser).callonConditionalExpr2,
						expr: &seqExpr{
							pos: position{line: 661, col: 5, offset: 19129},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 661, col: 5, offset: 19129},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 661, col: 15, offset: 19139},
										name: "LogicalOrExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 661, col: 29, offset: 19153},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 661, col: 32, offset: 19156},
									val:        "?",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 661, col: 36, offset: 19160},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 661, col: 39, offset: 19163},
									label: "thenClause",
									expr: &ruleRefExpr{
										pos:  position{line: 661, col: 50, offset: 19174},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 661, col: 55, offset: 19179},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 661, col: 58, offset: 19182},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 661, col: 62, offset: 19186},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 661, col: 65, offset: 19189},
									label: "elseClause",
									expr: &ruleRefExpr{
										pos:  position{line: 661, col: 76, offset: 19200},
										name: "Expr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 664, col: 5, offset: 19340},
						name: "LogicalOrExpr",
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 666, col: 1, offset: 19355},
			expr: &actionExpr{
				pos: position{line: 667, col: 5, offset: 19373},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 667, col: 5, offset: 19373},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 667, col: 5, offset: 19373},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 667, col: 11, offset: 19379},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 668, col: 5, offset: 19398},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 668, col: 10, offset: 19403},
								expr: &actionExpr{
									pos: position{line: 668, col: 11, offset: 19404},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 668, col: 11, offset: 19404},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 668, col: 11, offset: 19404},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 668, col: 14, offset: 19407},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 668, col: 17, offset: 19410},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 668, col: 25, offset: 19418},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 668, col: 28, offset: 19421},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 668, col: 33, offset: 19426},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 672, col: 1, offset: 19544},
			expr: &actionExpr{
				pos: position{line: 673, col: 5, offset: 19563},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 673, col: 5, offset: 19563},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 673, col: 5, offset: 19563},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 673, col: 11, offset: 19569},
								name: "EqualityCompareExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 674, col: 5, offset: 19593},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 674, col: 10, offset: 19598},
								expr: &actionExpr{
									pos: position{line: 674, col: 11, offset: 19599},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 674, col: 11, offset: 19599},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 674, col: 11, offset: 19599},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 674, col: 14, offset: 19602},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 674, col: 17, offset: 19605},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 674, col: 26, offset: 19614},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 674, col: 29, offset: 19617},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 674, col: 34, offset: 19622},
													name: "EqualityCompareExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityCompareExpr",
			pos:  position{line: 678, col: 1, offset: 19745},
			expr: &actionExpr{
				pos: position{line: 679, col: 5, offset: 19769},
				run: (*parser).callonEqualityCompareExpr1,
				expr: &seqExpr{
					pos: position{line: 679, col: 5, offset: 19769},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 679, col: 5, offset: 19769},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 679, col: 11, offset: 19775},
								name: "RelativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 680, col: 5, offset: 19792},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 680, col: 10, offset: 19797},
								expr: &actionExpr{
									pos: position{line: 680, col: 11, offset: 19798},
									run: (*parser).callonEqualityCompareExpr7,
									expr: &seqExpr{
										pos: position{line: 680, col: 11, offset: 19798},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 680, col: 11, offset: 19798},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 680, col: 14, offset: 19801},
												label: "comp",
												expr: &ruleRefExpr{
													pos:  position{line: 680, col: 19, offset: 19806},
													name: "EqualityComparator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 680, col: 38, offset: 19825},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 680, col: 41, offset: 19828},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 680, col: 46, offset: 19833},
													name: "RelativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityOperator",
			pos:  position{line: 684, col: 1, offset: 19951},
			expr: &actionExpr{
				pos: position{line: 685, col: 5, offset: 19972},
				run: (*parser).callonEqualityOperator1,
				expr: &choiceExpr{
					pos: position{line: 685, col: 6, offset: 19973},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 685, col: 6, offset: 19973},
							val:        "=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 685, col: 12, offset: 19979},
							val:        "!=",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "EqualityComparator",
			pos:  position{line: 687, col: 1, offset: 20017},
			expr: &choiceExpr{
				pos: position{line: 688, col: 5, offset: 20040},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 688, col: 5, offset: 20040},
						name: "EqualityOperator",
					},
					&actionExpr{
						pos: position{line: 689, col: 5, offset: 20061},
						run: (*parser).callonEqualityComparator3,
						expr: &litMatcher{
							pos:        position{line: 689, col: 5, offset: 20061},
							val:        "in",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RelativeExpr",
			pos:  position{line: 691, col: 1, offset: 20098},
			expr: &actionExpr{
				pos: position{line: 692, col: 5, offset: 20115},
				run: (*parser).callonRelativeExpr1,
				expr: &seqExpr{
					pos: position{line: 692, col: 5, offset: 20115},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 692, col: 5, offset: 20115},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 692, col: 11, offset: 20121},
								name: "AdditiveExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 693, col: 5, offset: 20138},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 693, col: 10, offset: 20143},
								expr: &actionExpr{
									pos: position{line: 693, col: 11, offset: 20144},
									run: (*parser).callonRelativeExpr7,
									expr: &seqExpr{
										pos: position{line: 693, col: 11, offset: 20144},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 693, col: 11, offset: 20144},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 693, col: 14, offset: 20147},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 693, col: 17, offset: 20150},
													name: "RelativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 693, col: 34, offset: 20167},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 693, col: 37, offset: 20170},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 693, col: 42, offset: 20175},
													name: "AdditiveExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeOperator",
			pos:  position{line: 697, col: 1, offset: 20291},
			expr: &actionExpr{
				pos: position{line: 697, col: 20, offset: 20310},
				run: (*parser).callonRelativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 697, col: 21, offset: 20311},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 697, col: 21, offset: 20311},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 697, col: 28, offset: 20318},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 697, col: 34, offset: 20324},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 697, col: 41, offset: 20331},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 699, col: 1, offset: 20368},
			expr: &actionExpr{
				pos: position{line: 700, col: 5, offset: 20385},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 700, col: 5, offset: 20385},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 700, col: 5, offset: 20385},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 700, col: 11, offset: 20391},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 701, col: 5, offset: 20414},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 701, col: 10, offset: 20419},
								expr: &actionExpr{
									pos: position{line: 701, col: 11, offset: 20420},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 701, col: 11, offset: 20420},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 701, col: 11, offset: 20420},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 701, col: 14, offset: 20423},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 701, col: 17, offset: 20426},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 701, col: 34, offset: 20443},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 701, col: 37, offset: 20446},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 701, col: 42, offset: 20451},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 705, col: 1, offset: 20573},
			expr: &actionExpr{
				pos: position{line: 705, col: 20, offset: 20592},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 705, col: 21, offset: 20593},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 705, col: 21, offset: 20593},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 705, col: 27, offset: 20599},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 707, col: 1, offset: 20636},
			expr: &actionExpr{
				pos: position{line: 708, col: 5, offset: 20659},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 708, col: 5, offset: 20659},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 708, col: 5, offset: 20659},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 708, col: 11, offset: 20665},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 709, col: 5, offset: 20677},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 709, col: 10, offset: 20682},
								expr: &actionExpr{
									pos: position{line: 709, col: 11, offset: 20683},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 709, col: 11, offset: 20683},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 709, col: 11, offset: 20683},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 709, col: 14, offset: 20686},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 709, col: 17, offset: 20689},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 709, col: 40, offset: 20712},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 709, col: 43, offset: 20715},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 709, col: 48, offset: 20720},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 713, col: 1, offset: 20831},
			expr: &actionExpr{
				pos: position{line: 713, col: 26, offset: 20856},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 713, col: 27, offset: 20857},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 713, col: 27, offset: 20857},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 713, col: 33, offset: 20863},
							val:        "/",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 715, col: 1, offset: 20900},
			expr: &choiceExpr{
				pos: position{line: 716, col: 5, offset: 20912},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 716, col: 5, offset: 20912},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 716, col: 5, offset: 20912},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 716, col: 5, offset: 20912},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 716, col: 9, offset: 20916},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 716, col: 12, offset: 20919},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 716, col: 14, offset: 20921},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 719, col: 5, offset: 21030},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 721, col: 1, offset: 21040},
			expr: &choiceExpr{
				pos: position{line: 722, col: 5, offset: 21053},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 722, col: 5, offset: 21053},
						name: "SelectExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 723, col: 5, offset: 21068},
						name: "MatchExpr",
					},
					&actionExpr{
						pos: position{line: 724, col: 5, offset: 21082},
						run: (*parser).callonFuncExpr4,
						expr: &seqExpr{
							pos: position{line: 724, col: 5, offset: 21082},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 724, col: 5, offset: 21082},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 724, col: 9, offset: 21086},
										name: "TypeLiteral",
									},
								},
								&notExpr{
									pos: position{line: 724, col: 21, offset: 21098},
									expr: &seqExpr{
										pos: position{line: 724, col: 23, offset: 21100},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 724, col: 23, offset: 21100},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 724, col: 26, offset: 21103},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 725, col: 5, offset: 21132},
						run: (*parser).callonFuncExpr12,
						expr: &seqExpr{
							pos: position{line: 725, col: 5, offset: 21132},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 725, col: 5, offset: 21132},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 725, col: 11, offset: 21138},
										name: "Cast",
									},
								},
								&labeledExpr{
									pos:   position{line: 725, col: 16, offset: 21143},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 725, col: 21, offset: 21148},
										expr: &ruleRefExpr{
											pos:  position{line: 725, col: 22, offset: 21149},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 728, col: 5, offset: 21220},
						run: (*parser).callonFuncExpr19,
						expr: &seqExpr{
							pos: position{line: 728, col: 5, offset: 21220},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 728, col: 5, offset: 21220},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 728, col: 11, offset: 21226},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 728, col: 20, offset: 21235},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 728, col: 25, offset: 21240},
										expr: &ruleRefExpr{
											pos:  position{line: 728, col: 26, offset: 21241},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 731, col: 5, offset: 21312},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 732, col: 5, offset: 21326},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FuncGuard",
			pos:  position{line: 734, col: 1, offset: 21335},
			expr: &seqExpr{
				pos: position{line: 734, col: 13, offset: 21347},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 734, col: 13, offset: 21347},
						name: "NotFuncs",
					},
					&ruleRefExpr{
						pos:  position{line: 734, col: 22, offset: 21356},
						name: "__",
					},
					&litMatcher{
						pos:        position{line: 734, col: 25, offset: 21359},
						val:        "(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "NotFuncs",
			pos:  position{line: 736, col: 1, offset: 21364},
			expr: &choiceExpr{
				pos: position{line: 737, col: 5, offset: 21377},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 737, col: 5, offset: 21377},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 738, col: 5, offset: 21387},
						val:        "match",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 739, col: 5, offset: 21399},
						val:        "select",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 740, col: 5, offset: 21412},
						val:        "type",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "MatchExpr",
			pos:  position{line: 742, col: 1, offset: 21420},
			expr: &actionExpr{
				pos: position{line: 743, col: 5, offset: 21434},
				run: (*parser).callonMatchExpr1,
				expr: &seqExpr{
					pos: position{line: 743, col: 5, offset: 21434},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 743, col: 5, offset: 21434},
							val:        "match",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 743, col: 13, offset: 21442},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 743, col: 16, offset: 21445},
							val:        "(",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 743, col: 20, offset: 21449},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 743, col: 25, offset: 21454},
								name: "SearchBoolean",
							},
						},
						&litMatcher{
							pos:        position{line: 743, col: 39, offset: 21468},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SelectExpr",
			pos:  position{line: 745, col: 1, offset: 21494},
			expr: &actionExpr{
				pos: position{line: 746, col: 5, offset: 21509},
				run: (*parser).callonSelectExpr1,
				expr: &seqExpr{
					pos: position{line: 746, col: 5, offset: 21509},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 746, col: 5, offset: 21509},
							val:        "select",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 746, col: 14, offset: 21518},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 746, col: 17, offset: 21521},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 746, col: 21, offset: 21525},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 746, col: 24, offset: 21528},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 746, col: 29, offset: 21533},
								name: "Exprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 746, col: 35, offset: 21539},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 746, col: 38, offset: 21542},
							val:        ")",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 746, col: 42, offset: 21546},
							label: "methods",
							expr: &ruleRefExpr{
								pos:  position{line: 746, col: 50, offset: 21554},
								name: "Methods",
							},
						},
					},
				},
			},
		},
		{
			name: "Methods",
			pos:  position{line: 754, col: 1, offset: 21952},
			expr: &choiceExpr{
				pos: position{line: 755, col: 5, offset: 21964},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 755, col: 5, offset: 21964},
						run: (*parser).callonMethods2,
						expr: &labeledExpr{
							pos:   position{line: 755, col: 5, offset: 21964},
							label: "methods",
							expr: &oneOrMoreExpr{
								pos: position{line: 755, col: 13, offset: 21972},
								expr: &ruleRefExpr{
									pos:  position{line: 755, col: 13, offset: 21972},
									name: "Method",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 756, col: 5, offset: 22008},
						run: (*parser).callonMethods6,
						expr: &litMatcher{
							pos:        position{line: 756, col: 5, offset: 22008},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Method",
			pos:  position{line: 758, col: 1, offset: 22032},
			expr: &actionExpr{
				pos: position{line: 759, col: 5, offset: 22043},
				run: (*parser).callonMethod1,
				expr: &seqExpr{
					pos: position{line: 759, col: 5, offset: 22043},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 759, col: 5, offset: 22043},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 759, col: 8, offset: 22046},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 759, col: 12, offset: 22050},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 759, col: 15, offset: 22053},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 759, col: 17, offset: 22055},
								name: "Function",
							},
						},
					},
				},
			},
		},
		{
			name: "Cast",
			pos:  position{line: 761, col: 1, offset: 22083},
			expr: &actionExpr{
				pos: position{line: 762, col: 5, offset: 22092},
				run: (*parser).callonCast1,
				expr: &seqExpr{
					pos: position{line: 762, col: 5, offset: 22092},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 762, col: 5, offset: 22092},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 762, col: 9, offset: 22096},
								name: "CastType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 762, col: 18, offset: 22105},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 762, col: 21, offset: 22108},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 762, col: 25, offset: 22112},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 762, col: 28, offset: 22115},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 762, col: 33, offset: 22120},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 762, col: 38, offset: 22125},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 762, col: 41, offset: 22128},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 766, col: 1, offset: 22225},
			expr: &actionExpr{
				pos: position{line: 767, col: 5, offset: 22238},
				run: (*parser).callonFunction1,
				expr: &seqExpr{
					pos: position{line: 767, col: 5, offset: 22238},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 767, col: 5, offset: 22238},
							expr: &ruleRefExpr{
								pos:  position{line: 767, col: 6, offset: 22239},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 767, col: 16, offset: 22249},
							label: "fn",
							expr: &ruleRefExpr{
								pos:  position{line: 767, col: 19, offset: 22252},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 767, col: 34, offset: 22267},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 767, col: 37, offset: 22270},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 767, col: 41, offset: 22274},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 767, col: 44, offset: 22277},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 767, col: 49, offset: 22282},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 767, col: 63, offset: 22296},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 767, col: 66, offset: 22299},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OptionalExprs",
			pos:  position{line: 771, col: 1, offset: 22395},
			expr: &choiceExpr{
				pos: position{line: 772, col: 5, offset: 22413},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 772, col: 5, offset: 22413},
						name: "Exprs",
					},
					&actionExpr{
						pos: position{line: 773, col: 5, offset: 22423},
						run: (*parser).callonOptionalExprs3,
						expr: &ruleRefExpr{
							pos:  position{line: 773, col: 5, offset: 22423},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 775, col: 1, offset: 22459},
			expr: &actionExpr{
				pos: position{line: 776, col: 5, offset: 22469},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 776, col: 5, offset: 22469},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 776, col: 5, offset: 22469},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 776, col: 11, offset: 22475},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 776, col: 16, offset: 22480},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 776, col: 21, offset: 22485},
								expr: &actionExpr{
									pos: position{line: 776, col: 22, offset: 22486},
									run: (*parser).callonExprs7,
									expr: &seqExpr{
										pos: position{line: 776, col: 22, offset: 22486},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 776, col: 22, offset: 22486},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 776, col: 25, offset: 22489},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 776, col: 29, offset: 22493},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 776, col: 32, offset: 22496},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 776, col: 34, offset: 22498},
													name: "Expr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 780, col: 1, offset: 22607},
			expr: &choiceExpr{
				pos: position{line: 781, col: 5, offset: 22621},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 781, col: 5, offset: 22621},
						run: (*parser).callonDerefExpr2,
						expr: &seqExpr{
							pos: position{line: 781, col: 5, offset: 22621},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 781, col: 5, offset: 22621},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 781, col: 11, offset: 22627},
										name: "DotID",
									},
								},
								&labeledExpr{
									pos:   position{line: 781, col: 17, offset: 22633},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 781, col: 22, offset: 22638},
										expr: &ruleRefExpr{
											pos:  position{line: 781, col: 23, offset: 22639},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 784, col: 5, offset: 22710},
						run: (*parser).callonDerefExpr9,
						expr: &seqExpr{
							pos: position{line: 784, col: 5, offset: 22710},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 784, col: 5, offset: 22710},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 784, col: 11, offset: 22716},
										name: "RootRecord",
									},
								},
								&labeledExpr{
									pos:   position{line: 784, col: 22, offset: 22727},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 784, col: 27, offset: 22732},
										expr: &ruleRefExpr{
											pos:  position{line: 784, col: 28, offset: 22733},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 787, col: 5, offset: 22804},
						run: (*parser).callonDerefExpr16,
						expr: &seqExpr{
							pos: position{line: 787, col: 5, offset: 22804},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 787, col: 5, offset: 22804},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 787, col: 11, offset: 22810},
										name: "Identifier",
									},
								},
								&labeledExpr{
									pos:   position{line: 787, col: 22, offset: 22821},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 787, col: 27, offset: 22826},
										expr: &ruleRefExpr{
											pos:  position{line: 787, col: 28, offset: 22827},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 790, col: 5, offset: 22898},
						run: (*parser).callonDerefExpr23,
						expr: &litMatcher{
							pos:        position{line: 790, col: 5, offset: 22898},
							val:        ".",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RootRecord",
			pos:  position{line: 794, col: 1, offset: 22967},
			expr: &actionExpr{
				pos: position{line: 794, col: 14, offset: 22980},
				run: (*parser).callonRootRecord1,
				expr: &litMatcher{
					pos:        position{line: 794, col: 14, offset: 22980},
					val:        "this",
					ignoreCase: false,
				},
			},
		},
		{
			name: "DotID",
			pos:  position{line: 796, col: 1, offset: 23042},
			expr: &choiceExpr{
				pos: position{line: 797, col: 5, offset: 23052},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 797, col: 5, offset: 23052},
						run: (*parser).callonDotID2,
						expr: &seqExpr{
							pos: position{line: 797, col: 5, offset: 23052},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 797, col: 5, offset: 23052},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 797, col: 9, offset: 23056},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 797, col: 15, offset: 23062},
										name: "Identifier",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 806, col: 5, offset: 23278},
						run: (*parser).callonDotID7,
						expr: &seqExpr{
							pos: position{line: 806, col: 5, offset: 23278},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 806, col: 5, offset: 23278},
									val:        ".",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 806, col: 9, offset: 23282},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 806, col: 13, offset: 23286},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 806, col: 18, offset: 23291},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 806, col: 23, offset: 23296},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 816, col: 1, offset: 23501},
			expr: &choiceExpr{
				pos: position{line: 817, col: 5, offset: 23511},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 817, col: 5, offset: 23511},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 817, col: 5, offset: 23511},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 817, col: 5, offset: 23511},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 817, col: 9, offset: 23515},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 817, col: 14, offset: 23520},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 817, col: 27, offset: 23533},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 817, col: 30, offset: 23536},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 817, col: 34, offset: 23540},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 817, col: 37, offset: 23543},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 817, col: 40, offset: 23546},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 817, col: 53, offset: 23559},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 823, col: 5, offset: 23730},
						run: (*parser).callonDeref13,
						expr: &seqExpr{
							pos: position{line: 823, col: 5, offset: 23730},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 823, col: 5, offset: 23730},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 823, col: 9, offset: 23734},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 823, col: 12, offset: 23737},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 823, col: 16, offset: 23741},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 823, col: 19, offset: 23744},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 823, col: 22, offset: 23747},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 823, col: 35, offset: 23760},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 829, col: 5, offset: 23931},
						run: (*parser).callonDeref22,
						expr: &seqExpr{
							pos: position{line: 829, col: 5, offset: 23931},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 829, col: 5, offset: 23931},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 829, col: 9, offset: 23935},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 829, col: 14, offset: 23940},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 829, col: 27, offset: 23953},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 829, col: 30, offset: 23956},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 829, col: 34, offset: 23960},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 829, col: 37, offset: 23963},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 835, col: 5, offset: 24136},
						run: (*parser).callonDeref31,
						expr: &seqExpr{
							pos: position{line: 835, col: 5, offset: 24136},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 835, col: 5, offset: 24136},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 835, col: 9, offset: 24140},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 835, col: 14, offset: 24145},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 835, col: 19, offset: 24150},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 836, col: 5, offset: 24199},
						run: (*parser).callonDeref37,
						expr: &seqExpr{
							pos: position{line: 836, col: 5, offset: 24199},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 836, col: 5, offset: 24199},
									val:        ".",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 836, col: 9, offset: 24203},
									expr: &litMatcher{
										pos:        position{line: 836, col: 11, offset: 24205},
										val:        ".",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 836, col: 16, offset: 24210},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 836, col: 19, offset: 24213},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 838, col: 1, offset: 24264},
			expr: &choiceExpr{
				pos: position{line: 839, col: 5, offset: 24276},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 839, col: 5, offset: 24276},
						name: "Literal",
					},
					&ruleRefExpr{
						pos:  position{line: 840, col: 5, offset: 24288},
						name: "Record",
					},
					&ruleRefExpr{
						pos:  position{line: 841, col: 5, offset: 24299},
						name: "Array",
					},
					&ruleRefExpr{
						pos:  position{line: 842, col: 5, offset: 24309},
						name: "Set",
					},
					&ruleRefExpr{
						pos:  position{line: 843, col: 5, offset: 24317},
						name: "Map",
					},
					&actionExpr{
						pos: position{line: 844, col: 5, offset: 24325},
						run: (*parser).callonPrimary7,
						expr: &seqExpr{
							pos: position{line: 844, col: 5, offset: 24325},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 844, col: 5, offset: 24325},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 844, col: 9, offset: 24329},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 844, col: 12, offset: 24332},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 844, col: 17, offset: 24337},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 844, col: 22, offset: 24342},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 844, col: 25, offset: 24345},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Record",
			pos:  position{line: 846, col: 1, offset: 24371},
			expr: &actionExpr{
				pos: position{line: 847, col: 5, offset: 24382},
				run: (*parser).callonRecord1,
				expr: &seqExpr{
					pos: position{line: 847, col: 5, offset: 24382},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 847, col: 5, offset: 24382},
							val:        "{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 847, col: 9, offset: 24386},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 847, col: 12, offset: 24389},
							label: "fields",
							expr: &ruleRefExpr{
								pos:  position{line: 847, col: 19, offset: 24396},
								name: "Fields",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 847, col: 26, offset: 24403},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 847, col: 29, offset: 24406},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Fields",
			pos:  position{line: 851, col: 1, offset: 24499},
			expr: &actionExpr{
				pos: position{line: 852, col: 5, offset: 24510},
				run: (*parser).callonFields1,
				expr: &seqExpr{
					pos: position{line: 852, col: 5, offset: 24510},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 852, col: 5, offset: 24510},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 852, col: 11, offset: 24516},
								name: "Field",
							},
						},
						&labeledExpr{
							pos:   position{line: 852, col: 17, offset: 24522},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 852, col: 22, offset: 24527},
								expr: &ruleRefExpr{
									pos:  position{line: 852, col: 22, offset: 24527},
									name: "FieldTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldTail",
			pos:  position{line: 856, col: 1, offset: 24618},
			expr: &actionExpr{
				pos: position{line: 856, col: 13, offset: 24630},
				run: (*parser).callonFieldTail1,
				expr: &seqExpr{
					pos: position{line: 856, col: 13, offset: 24630},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 856, col: 13, offset: 24630},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 856, col: 16, offset: 24633},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 856, col: 20, offset: 24637},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 856, col: 23, offset: 24640},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 856, col: 25, offset: 24642},
								name: "Field",
							},
						},
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 858, col: 1, offset: 24667},
			expr: &actionExpr{
				pos: position{line: 859, col: 5, offset: 24677},
				run: (*parser).callonField1,
				expr: &seqExpr{
					pos: position{line: 859, col: 5, offset: 24677},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 859, col: 5, offset: 24677},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 859, col: 10, offset: 24682},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 859, col: 20, offset: 24692},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 859, col: 23, offset: 24695},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 859, col: 27, offset: 24699},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 859, col: 30, offset: 24702},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 859, col: 36, offset: 24708},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Array",
			pos:  position{line: 863, col: 1, offset: 24793},
			expr: &actionExpr{
				pos: position{line: 864, col: 5, offset: 24803},
				run: (*parser).callonArray1,
				expr: &seqExpr{
					pos: position{line: 864, col: 5, offset: 24803},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 864, col: 5, offset: 24803},
							val:        "[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 864, col: 9, offset: 24807},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 864, col: 12, offset: 24810},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 864, col: 18, offset: 24816},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 864, col: 32, offset: 24830},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 864, col: 35, offset: 24833},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Set",
			pos:  position{line: 868, col: 1, offset: 24923},
			expr: &actionExpr{
				pos: position{line: 869, col: 5, offset: 24931},
				run: (*parser).callonSet1,
				expr: &seqExpr{
					pos: position{line: 869, col: 5, offset: 24931},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 869, col: 5, offset: 24931},
							val:        "|[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 869, col: 10, offset: 24936},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 869, col: 13, offset: 24939},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 869, col: 19, offset: 24945},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 869, col: 33, offset: 24959},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 869, col: 36, offset: 24962},
							val:        "]|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Map",
			pos:  position{line: 873, col: 1, offset: 25051},
			expr: &actionExpr{
				pos: position{line: 874, col: 5, offset: 25059},
				run: (*parser).callonMap1,
				expr: &seqExpr{
					pos: position{line: 874, col: 5, offset: 25059},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 874, col: 5, offset: 25059},
							val:        "|{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 874, col: 10, offset: 25064},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 874, col: 13, offset: 25067},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 874, col: 19, offset: 25073},
								name: "Entries",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 874, col: 27, offset: 25081},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 874, col: 30, offset: 25084},
							val:        "}|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Entries",
			pos:  position{line: 878, col: 1, offset: 25175},
			expr: &choiceExpr{
				pos: position{line: 879, col: 5, offset: 25187},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 879, col: 5, offset: 25187},
						run: (*parser).callonEntries2,
						expr: &seqExpr{
							pos: position{line: 879, col: 5, offset: 25187},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 879, col: 5, offset: 25187},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 879, col: 11, offset: 25193},
										name: "Entry",
									},
								},
								&labeledExpr{
									pos:   position{line: 879, col: 17, offset: 25199},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 879, col: 22, offset: 25204},
										expr: &ruleRefExpr{
											pos:  position{line: 879, col: 22, offset: 25204},
											name: "EntryTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 882, col: 5, offset: 25298},
						run: (*parser).callonEntries9,
						expr: &ruleRefExpr{
							pos:  position{line: 882, col: 5, offset: 25298},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "EntryTail",
			pos:  position{line: 885, col: 1, offset: 25335},
			expr: &actionExpr{
				pos: position{line: 885, col: 13, offset: 25347},
				run: (*parser).callonEntryTail1,
				expr: &seqExpr{
					pos: position{line: 885, col: 13, offset: 25347},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 885, col: 13, offset: 25347},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 885, col: 16, offset: 25350},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 885, col: 20, offset: 25354},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 885, col: 23, offset: 25357},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 885, col: 25, offset: 25359},
								name: "Entry",
							},
						},
					},
				},
			},
		},
		{
			name: "Entry",
			pos:  position{line: 887, col: 1, offset: 25384},
			expr: &actionExpr{
				pos: position{line: 888, col: 5, offset: 25394},
				run: (*parser).callonEntry1,
				expr: &seqExpr{
					pos: position{line: 888, col: 5, offset: 25394},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 888, col: 5, offset: 25394},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 888, col: 9, offset: 25398},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 888, col: 14, offset: 25403},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 888, col: 17, offset: 25406},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 888, col: 21, offset: 25410},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 888, col: 24, offset: 25413},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 888, col: 30, offset: 25419},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLProc",
			pos:  position{line: 894, col: 1, offset: 25526},
			expr: &actionExpr{
				pos: position{line: 895, col: 5, offset: 25538},
				run: (*parser).callonSQLProc1,
				expr: &seqExpr{
					pos: position{line: 895, col: 5, offset: 25538},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 895, col: 5, offset: 25538},
							label: "selection",
							expr: &ruleRefExpr{
								pos:  position{line: 895, col: 15, offset: 25548},
								name: "SQLSelect",
							},
						},
						&labeledExpr{
							pos:   position{line: 896, col: 5, offset: 25562},
							label: "from",
							expr: &ruleRefExpr{
								pos:  position{line: 896, col: 10, offset: 25567},
								name: "SQLFrom",
							},
						},
						&labeledExpr{
							pos:   position{line: 897, col: 5, offset: 25579},
							label: "joins",
							expr: &ruleRefExpr{
								pos:  position{line: 897, col: 11, offset: 25585},
								name: "SQLJoins",
							},
						},
						&labeledExpr{
							pos:   position{line: 898, col: 5, offset: 25598},
							label: "where",
							expr: &ruleRefExpr{
								pos:  position{line: 898, col: 11, offset: 25604},
								name: "SQLWhere",
							},
						},
						&labeledExpr{
							pos:   position{line: 899, col: 5, offset: 25617},
							label: "groupby",
							expr: &ruleRefExpr{
								pos:  position{line: 899, col: 13, offset: 25625},
								name: "SQLGroupBy",
							},
						},
						&labeledExpr{
							pos:   position{line: 900, col: 5, offset: 25640},
							label: "having",
							expr: &ruleRefExpr{
								pos:  position{line: 900, col: 12, offset: 25647},
								name: "SQLHaving",
							},
						},
						&labeledExpr{
							pos:   position{line: 901, col: 5, offset: 25661},
							label: "orderby",
							expr: &ruleRefExpr{
								pos:  position{line: 901, col: 13, offset: 25669},
								name: "SQLOrderBy",
							},
						},
						&labeledExpr{
							pos:   position{line: 902, col: 5, offset: 25684},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 902, col: 11, offset: 25690},
								name: "SQLLimit",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLSelect",
			pos:  position{line: 926, col: 1, offset: 26057},
			expr: &choiceExpr{
				pos: position{line: 927, col: 5, offset: 26071},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 927, col: 5, offset: 26071},
						run: (*parser).callonSQLSelect2,
						expr: &seqExpr{
							pos: position{line: 927, col: 5, offset: 26071},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 927, col: 5, offset: 26071},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 927, col: 12, offset: 26078},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 927, col: 14, offset: 26080},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 928, col: 5, offset: 26108},
						run: (*parser).callonSQLSelect7,
						expr: &seqExpr{
							pos: position{line: 928, col: 5, offset: 26108},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 928, col: 5, offset: 26108},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 928, col: 12, offset: 26115},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 928, col: 14, offset: 26117},
									label: "assignments",
									expr: &ruleRefExpr{
										pos:  position{line: 928, col: 26, offset: 26129},
										name: "SQLAssignments",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignment",
			pos:  position{line: 930, col: 1, offset: 26173},
			expr: &choiceExpr{
				pos: position{line: 931, col: 5, offset: 26191},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 931, col: 5, offset: 26191},
						run: (*parser).callonSQLAssignment2,
						expr: &seqExpr{
							pos: position{line: 931, col: 5, offset: 26191},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 931, col: 5, offset: 26191},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 931, col: 9, offset: 26195},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 931, col: 14, offset: 26200},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 931, col: 16, offset: 26202},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 931, col: 19, offset: 26205},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 931, col: 21, offset: 26207},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 931, col: 25, offset: 26211},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 932, col: 5, offset: 26305},
						run: (*parser).callonSQLAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 932, col: 5, offset: 26305},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 932, col: 10, offset: 26310},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignments",
			pos:  position{line: 934, col: 1, offset: 26402},
			expr: &actionExpr{
				pos: position{line: 935, col: 5, offset: 26421},
				run: (*parser).callonSQLAssignments1,
				expr: &seqExpr{
					pos: position{line: 935, col: 5, offset: 26421},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 935, col: 5, offset: 26421},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 935, col: 11, offset: 26427},
								name: "SQLAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 935, col: 25, offset: 26441},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 935, col: 30, offset: 26446},
								expr: &actionExpr{
									pos: position{line: 935, col: 31, offset: 26447},
									run: (*parser).callonSQLAssignments7,
									expr: &seqExpr{
										pos: position{line: 935, col: 31, offset: 26447},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 935, col: 31, offset: 26447},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 935, col: 34, offset: 26450},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 935, col: 38, offset: 26454},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 935, col: 41, offset: 26457},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 935, col: 46, offset: 26462},
													name: "SQLAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLFrom",
			pos:  position{line: 939, col: 1, offset: 26583},
			expr: &choiceExpr{
				pos: position{line: 940, col: 5, offset: 26595},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 940, col: 5, offset: 26595},
						run: (*parser).callonSQLFrom2,
						expr: &seqExpr{
							pos: position{line: 940, col: 5, offset: 26595},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 940, col: 5, offset: 26595},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 940, col: 7, offset: 26597},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 940, col: 12, offset: 26602},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 940, col: 14, offset: 26604},
									label: "table",
									expr: &ruleRefExpr{
										pos:  position{line: 940, col: 20, offset: 26610},
										name: "SQLTable",
									},
								},
								&labeledExpr{
									pos:   position{line: 940, col: 29, offset: 26619},
									label: "alias",
									expr: &ruleRefExpr{
										pos:  position{line: 940, col: 35, offset: 26625},
										name: "SQLAlias",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 943, col: 5, offset: 26719},
						run: (*parser).callonSQLFrom11,
						expr: &seqExpr{
							pos: position{line: 943, col: 5, offset: 26719},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 943, col: 5, offset: 26719},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 943, col: 7, offset: 26721},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 943, col: 12, offset: 26726},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 943, col: 14, offset: 26728},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 944, col: 5, offset: 26756},
						run: (*parser).callonSQLFrom17,
						expr: &litMatcher{
							pos:        position{line: 944, col: 5, offset: 26756},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLAlias",
			pos:  position{line: 946, col: 1, offset: 26780},
			expr: &choiceExpr{
				pos: position{line: 947, col: 5, offset: 26793},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 947, col: 5, offset: 26793},
						run: (*parser).callonSQLAlias2,
						expr: &seqExpr{
							pos: position{line: 947, col: 5, offset: 26793},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 947, col: 5, offset: 26793},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 947, col: 7, offset: 26795},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 947, col: 10, offset: 26798},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 947, col: 12, offset: 26800},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 947, col: 15, offset: 26803},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 948, col: 5, offset: 26831},
						run: (*parser).callonSQLAlias9,
						expr: &seqExpr{
							pos: position{line: 948, col: 5, offset: 26831},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 948, col: 5, offset: 26831},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 948, col: 7, offset: 26833},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 948, col: 10, offset: 26836},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 949, col: 5, offset: 26864},
						run: (*parser).callonSQLAlias14,
						expr: &litMatcher{
							pos:        position{line: 949, col: 5, offset: 26864},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLTable",
			pos:  position{line: 951, col: 1, offset: 26888},
			expr: &ruleRefExpr{
				pos:  position{line: 952, col: 5, offset: 26901},
				name: "Expr",
			},
		},
		{
			name: "SQLJoins",
			pos:  position{line: 954, col: 1, offset: 26907},
			expr: &choiceExpr{
				pos: position{line: 955, col: 5, offset: 26920},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 955, col: 5, offset: 26920},
						run: (*parser).callonSQLJoins2,
						expr: &seqExpr{
							pos: position{line: 955, col: 5, offset: 26920},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 955, col: 5, offset: 26920},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 955, col: 11, offset: 26926},
										name: "SQLJoin",
									},
								},
								&labeledExpr{
									pos:   position{line: 955, col: 19, offset: 26934},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 955, col: 24, offset: 26939},
										expr: &actionExpr{
											pos: position{line: 955, col: 25, offset: 26940},
											run: (*parser).callonSQLJoins8,
											expr: &labeledExpr{
												pos:   position{line: 955, col: 25, offset: 26940},
												label: "join",
												expr: &ruleRefExpr{
													pos:  position{line: 955, col: 30, offset: 26945},
													name: "SQLJoin",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 958, col: 5, offset: 27063},
						run: (*parser).callonSQLJoins11,
						expr: &litMatcher{
							pos:        position{line: 958, col: 5, offset: 27063},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLJoin",
			pos:  position{line: 960, col: 1, offset: 27087},
			expr: &actionExpr{
				pos: position{line: 961, col: 5, offset: 27099},
				run: (*parser).callonSQLJoin1,
				expr: &seqExpr{
					pos: position{line: 961, col: 5, offset: 27099},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 961, col: 5, offset: 27099},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 961, col: 11, offset: 27105},
								name: "SQLJoinStyle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 961, col: 24, offset: 27118},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 961, col: 26, offset: 27120},
							name: "JOIN",
						},
						&ruleRefExpr{
							pos:  position{line: 961, col: 31, offset: 27125},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 961, col: 33, offset: 27127},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 961, col: 39, offset: 27133},
								name: "SQLTable",
							},
						},
						&labeledExpr{
							pos:   position{line: 961, col: 48, offset: 27142},
							label: "alias",
							expr: &ruleRefExpr{
								pos:  position{line: 961, col: 54, offset: 27148},
								name: "SQLAlias",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 961, col: 63, offset: 27157},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 961, col: 65, offset: 27159},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 961, col: 68, offset: 27162},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 961, col: 70, offset: 27164},
							label: "leftKey",
							expr: &ruleRefExpr{
								pos:  position{line: 961, col: 78, offset: 27172},
								name: "JoinKey",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 961, col: 86, offset: 27180},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 961, col: 89, offset: 27183},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 961, col: 93, offset: 27187},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 961, col: 96, offset: 27190},
							label: "rightKey",
							expr: &ruleRefExpr{
								pos:  position{line: 961, col: 105, offset: 27199},
								name: "JoinKey",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoinStyle",
			pos:  position{line: 980, col: 1, offset: 27434},
			expr: &choiceExpr{
				pos: position{line: 981, col: 5, offset: 27451},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 981, col: 5, offset: 27451},
						run: (*parser).callonSQLJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 981, col: 5, offset: 27451},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 981, col: 5, offset: 27451},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 981, col: 7, offset: 27453},
									label: "style",
									expr: &choiceExpr{
										pos: position{line: 981, col: 14, offset: 27460},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 981, col: 14, offset: 27460},
												name: "LEFT",
											},
											&ruleRefExpr{
												pos:  position{line: 981, col: 21, offset: 27467},
												name: "RIGHT",
											},
											&ruleRefExpr{
												pos:  position{line: 981, col: 29, offset: 27475},
												name: "INNER",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 982, col: 5, offset: 27508},
						run: (*parser).callonSQLJoinStyle10,
						expr: &litMatcher{
							pos:        position{line: 982, col: 5, offset: 27508},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLWhere",
			pos:  position{line: 984, col: 1, offset: 27544},
			expr: &choiceExpr{
				pos: position{line: 985, col: 5, offset: 27557},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 985, col: 5, offset: 27557},
						run: (*parser).callonSQLWhere2,
						expr: &seqExpr{
							pos: position{line: 985, col: 5, offset: 27557},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 985, col: 5, offset: 27557},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 985, col: 7, offset: 27559},
									name: "WHERE",
								},
								&ruleRefExpr{
									pos:  position{line: 985, col: 13, offset: 27565},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 985, col: 15, offset: 27567},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 985, col: 20, offset: 27572},
										name: "SearchBoolean",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 986, col: 5, offset: 27611},
						run: (*parser).callonSQLWhere9,
						expr: &litMatcher{
							pos:        position{line: 986, col: 5, offset: 27611},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLGroupBy",
			pos:  position{line: 988, col: 1, offset: 27635},
			expr: &choiceExpr{
				pos: position{line: 989, col: 5, offset: 27650},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 989, col: 5, offset: 27650},
						run: (*parser).callonSQLGroupBy2,
						expr: &seqExpr{
							pos: position{line: 989, col: 5, offset: 27650},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 989, col: 5, offset: 27650},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 989, col: 7, offset: 27652},
									name: "GROUP",
								},
								&ruleRefExpr{
									pos:  position{line: 989, col: 13, offset: 27658},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 989, col: 15, offset: 27660},
									name: "BY",
								},
								&ruleRefExpr{
									pos:  position{line: 989, col: 18, offset: 27663},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 989, col: 20, offset: 27665},
									label: "columns",
									expr: &ruleRefExpr{
										pos:  position{line: 989, col: 28, offset: 27673},
										name: "FieldExprs",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 990, col: 5, offset: 27712},
						run: (*parser).callonSQLGroupBy11,
						expr: &litMatcher{
							pos:        position{line: 990, col: 5, offset: 27712},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLHaving",
			pos:  position{line: 992, col: 1, offset: 27736},
			expr: &choiceExpr{
				pos: position{line: 993, col: 5, offset: 27750},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 993, col: 5, offset: 27750},
						run: (*parser).callonSQLHaving2,
						expr: &seqExpr{
							pos: position{line: 993, col: 5, offset: 27750},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 993, col: 5, offset: 27750},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 993, col: 7, offset: 27752},
									name: "HAVING",
								},
								&ruleRefExpr{
									pos:  position{line: 993, col: 14, offset: 27759},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 993, col: 16, offset: 27761},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 993, col: 21, offset: 27766},
										name: "SearchBoolean",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 994, col: 5, offset: 27805},
						run: (*parser).callonSQLHaving9,
						expr: &litMatcher{
							pos:        position{line: 994, col: 5, offset: 27805},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLOrderBy",
			pos:  position{line: 996, col: 1, offset: 27829},
			expr: &choiceExpr{
				pos: position{line: 997, col: 5, offset: 27844},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 997, col: 5, offset: 27844},
						run: (*parser).callonSQLOrderBy2,
						expr: &seqExpr{
							pos: position{line: 997, col: 5, offset: 27844},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 997, col: 5, offset: 27844},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 997, col: 7, offset: 27846},
									name: "ORDER",
								},
								&ruleRefExpr{
									pos:  position{line: 997, col: 13, offset: 27852},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 997, col: 15, offset: 27854},
									name: "BY",
								},
								&ruleRefExpr{
									pos:  position{line: 997, col: 18, offset: 27857},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 997, col: 20, offset: 27859},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 997, col: 25, offset: 27864},
										name: "Exprs",
									},
								},
								&labeledExpr{
									pos:   position{line: 997, col: 31, offset: 27870},
									label: "order",
									expr: &ruleRefExpr{
										pos:  position{line: 997, col: 37, offset: 27876},
										name: "SQLOrder",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1000, col: 5, offset: 27989},
						run: (*parser).callonSQLOrderBy13,
						expr: &litMatcher{
							pos:        position{line: 1000, col: 5, offset: 27989},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLOrder",
			pos:  position{line: 1002, col: 1, offset: 28013},
			expr: &choiceExpr{
				pos: position{line: 1003, col: 5, offset: 28026},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1003, col: 5, offset: 28026},
						run: (*parser).callonSQLOrder2,
						expr: &seqExpr{
							pos: position{line: 1003, col: 5, offset: 28026},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1003, col: 5, offset: 28026},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 1003, col: 7, offset: 28028},
									label: "dir",
									expr: &choiceExpr{
										pos: position{line: 1003, col: 12, offset: 28033},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1003, col: 12, offset: 28033},
												name: "ASC",
											},
											&ruleRefExpr{
												pos:  position{line: 1003, col: 18, offset: 28039},
												name: "DESC",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1004, col: 5, offset: 28069},
						run: (*parser).callonSQLOrder9,
						expr: &litMatcher{
							pos:        position{line: 1004, col: 5, offset: 28069},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLLimit",
			pos:  position{line: 1006, col: 1, offset: 28095},
			expr: &choiceExpr{
				pos: position{line: 1007, col: 5, offset: 28108},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1007, col: 5, offset: 28108},
						run: (*parser).callonSQLLimit2,
						expr: &seqExpr{
							pos: position{line: 1007, col: 5, offset: 28108},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1007, col: 5, offset: 28108},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 1007, col: 7, offset: 28110},
									name: "LIMIT",
								},
								&ruleRefExpr{
									pos:  position{line: 1007, col: 13, offset: 28116},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 1007, col: 15, offset: 28118},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 1007, col: 21, offset: 28124},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1008, col: 5, offset: 28155},
						run: (*parser).callonSQLLimit9,
						expr: &litMatcher{
							pos:        position{line: 1008, col: 5, offset: 28155},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SELECT",
			pos:  position{line: 1010, col: 1, offset: 28177},
			expr: &actionExpr{
				pos: position{line: 1010, col: 10, offset: 28186},
				run: (*parser).callonSELECT1,
				expr: &litMatcher{
					pos:        position{line: 1010, col: 10, offset: 28186},
					val:        "select",
					ignoreCase: true,
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 1011, col: 1, offset: 28221},
			expr: &actionExpr{
				pos: position{line: 1011, col: 6, offset: 28226},
				run: (*parser).callonAS1,
				expr: &litMatcher{
					pos:        position{line: 1011, col: 6, offset: 28226},
					val:        "as",
					ignoreCase: true,
				},
			},
		},
		{
			name: "FROM",
			pos:  position{line: 1012, col: 1, offset: 28253},
			expr: &actionExpr{
				pos: position{line: 1012, col: 8, offset: 28260},
				run: (*parser).callonFROM1,
				expr: &litMatcher{
					pos:        position{line: 1012, col: 8, offset: 28260},
					val:        "from",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JOIN",
			pos:  position{line: 1013, col: 1, offset: 28291},
			expr: &actionExpr{
				pos: position{line: 1013, col: 8, offset: 28298},
				run: (*parser).callonJOIN1,
				expr: &litMatcher{
					pos:        position{line: 1013, col: 8, offset: 28298},
					val:        "join",
					ignoreCase: true,
				},
			},
		},
		{
			name: "WHERE",
			pos:  position{line: 1014, col: 1, offset: 28329},
			expr: &actionExpr{
				pos: position{line: 1014, col: 9, offset: 28337},
				run: (*parser).callonWHERE1,
				expr: &litMatcher{
					pos:        position{line: 1014, col: 9, offset: 28337},
					val:        "where",
					ignoreCase: true,
				},
			},
		},
		{
			name: "GROUP",
			pos:  position{line: 1015, col: 1, offset: 28370},
			expr: &actionExpr{
				pos: position{line: 1015, col: 9, offset: 28378},
				run: (*parser).callonGROUP1,
				expr: &litMatcher{
					pos:        position{line: 1015, col: 9, offset: 28378},
					val:        "group",
					ignoreCase: true,
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 1016, col: 1, offset: 28411},
			expr: &ruleRefExpr{
				pos:  position{line: 1016, col: 6, offset: 28416},
				name: "ByToken",
			},
		},
		{
			name: "HAVING",
			pos:  position{line: 1017, col: 1, offset: 28424},
			expr: &actionExpr{
				pos: position{line: 1017, col: 10, offset: 28433},
				run: (*parser).callonHAVING1,
				expr: &litMatcher{
					pos:        position{line: 1017, col: 10, offset: 28433},
					val:        "having",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ORDER",
			pos:  position{line: 1018, col: 1, offset: 28468},
			expr: &actionExpr{
				pos: position{line: 1018, col: 9, offset: 28476},
				run: (*parser).callonORDER1,
				expr: &litMatcher{
					pos:        position{line: 1018, col: 9, offset: 28476},
					val:        "order",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ON",
			pos:  position{line: 1019, col: 1, offset: 28509},
			expr: &actionExpr{
				pos: position{line: 1019, col: 6, offset: 28514},
				run: (*parser).callonON1,
				expr: &litMatcher{
					pos:        position{line: 1019, col: 6, offset: 28514},
					val:        "on",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LIMIT",
			pos:  position{line: 1020, col: 1, offset: 28541},
			expr: &actionExpr{
				pos: position{line: 1020, col: 9, offset: 28549},
				run: (*parser).callonLIMIT1,
				expr: &litMatcher{
					pos:        position{line: 1020, col: 9, offset: 28549},
					val:        "limit",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ASC",
			pos:  position{line: 1021, col: 1, offset: 28582},
			expr: &actionExpr{
				pos: position{line: 1021, col: 7, offset: 28588},
				run: (*parser).callonASC1,
				expr: &litMatcher{
					pos:        position{line: 1021, col: 7, offset: 28588},
					val:        "asc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "DESC",
			pos:  position{line: 1022, col: 1, offset: 28617},
			expr: &actionExpr{
				pos: position{line: 1022, col: 8, offset: 28624},
				run: (*parser).callonDESC1,
				expr: &litMatcher{
					pos:        position{line: 1022, col: 8, offset: 28624},
					val:        "desc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LEFT",
			pos:  position{line: 1023, col: 1, offset: 28655},
			expr: &actionExpr{
				pos: position{line: 1023, col: 8, offset: 28662},
				run: (*parser).callonLEFT1,
				expr: &litMatcher{
					pos:        position{line: 1023, col: 8, offset: 28662},
					val:        "left",
					ignoreCase: true,
				},
			},
		},
		{
			name: "RIGHT",
			pos:  position{line: 1024, col: 1, offset: 28693},
			expr: &actionExpr{
				pos: position{line: 1024, col: 9, offset: 28701},
				run: (*parser).callonRIGHT1,
				expr: &litMatcher{
					pos:        position{line: 1024, col: 9, offset: 28701},
					val:        "right",
					ignoreCase: true,
				},
			},
		},
		{
			name: "INNER",
			pos:  position{line: 1025, col: 1, offset: 28734},
			expr: &actionExpr{
				pos: position{line: 1025, col: 9, offset: 28742},
				run: (*parser).callonINNER1,
				expr: &litMatcher{
					pos:        position{line: 1025, col: 9, offset: 28742},
					val:        "inner",
					ignoreCase: true,
				},
			},
		},
		{
			name: "SQLTokenSentinels",
			pos:  position{line: 1027, col: 1, offset: 28776},
			expr: &choiceExpr{
				pos: position{line: 1028, col: 5, offset: 28798},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1028, col: 5, offset: 28798},
						name: "SELECT",
					},
					&ruleRefExpr{
						pos:  position{line: 1028, col: 14, offset: 28807},
						name: "AS",
					},
					&ruleRefExpr{
						pos:  position{line: 1028, col: 19, offset: 28812},
						name: "FROM",
					},
					&ruleRefExpr{
						pos:  position{line: 1028, col: 27, offset: 28820},
						name: "JOIN",
					},
					&ruleRefExpr{
						pos:  position{line: 1028, col: 34, offset: 28827},
						name: "WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 1028, col: 42, offset: 28835},
						name: "GROUP",
					},
					&ruleRefExpr{
						pos:  position{line: 1028, col: 50, offset: 28843},
						name: "HAVING",
					},
					&ruleRefExpr{
						pos:  position{line: 1028, col: 59, offset: 28852},
						name: "ORDER",
					},
					&ruleRefExpr{
						pos:  position{line: 1028, col: 67, offset: 28860},
						name: "LIMIT",
					},
					&ruleRefExpr{
						pos:  position{line: 1028, col: 75, offset: 28868},
						name: "ON",
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 1032, col: 1, offset: 28894},
			expr: &choiceExpr{
				pos: position{line: 1033, col: 5, offset: 28906},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1033, col: 5, offset: 28906},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1034, col: 5, offset: 28922},
						name: "StringLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1035, col: 5, offset: 28940},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1036, col: 5, offset: 28958},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1037, col: 5, offset: 28977},
						name: "Duration",
					},
					&ruleRefExpr{
						pos:  position{line: 1038, col: 5, offset: 28990},
						name: "Time",
					},
					&ruleRefExpr{
						pos:  position{line: 1039, col: 5, offset: 28999},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1040, col: 5, offset: 29016},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1041, col: 5, offset: 29035},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1042, col: 5, offset: 29054},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "StringLiteral",
			pos:  position{line: 1044, col: 1, offset: 29067},
			expr: &actionExpr{
				pos: position{line: 1045, col: 5, offset: 29085},
				run: (*parser).callonStringLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1045, col: 5, offset: 29085},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1045, col: 7, offset: 29087},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 1049, col: 1, offset: 29200},
			expr: &choiceExpr{
				pos: position{line: 1050, col: 5, offset: 29218},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1050, col: 5, offset: 29218},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 1050, col: 5, offset: 29218},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1050, col: 5, offset: 29218},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1050, col: 7, offset: 29220},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 1050, col: 14, offset: 29227},
									expr: &ruleRefExpr{
										pos:  position{line: 1050, col: 15, offset: 29228},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1053, col: 5, offset: 29343},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 1053, col: 5, offset: 29343},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1053, col: 7, offset: 29345},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 1057, col: 1, offset: 29449},
			expr: &choiceExpr{
				pos: position{line: 1058, col: 5, offset: 29468},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1058, col: 5, offset: 29468},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 1058, col: 5, offset: 29468},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1058, col: 5, offset: 29468},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1058, col: 7, offset: 29470},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 1058, col: 11, offset: 29474},
									expr: &ruleRefExpr{
										pos:  position{line: 1058, col: 12, offset: 29475},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1061, col: 5, offset: 29589},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 1061, col: 5, offset: 29589},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1061, col: 7, offset: 29591},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 1065, col: 1, offset: 29690},
			expr: &actionExpr{
				pos: position{line: 1066, col: 5, offset: 29707},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1066, col: 5, offset: 29707},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1066, col: 7, offset: 29709},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 1070, col: 1, offset: 29822},
			expr: &actionExpr{
				pos: position{line: 1071, col: 5, offset: 29841},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1071, col: 5, offset: 29841},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1071, col: 7, offset: 29843},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 1075, col: 1, offset: 29952},
			expr: &choiceExpr{
				pos: position{line: 1076, col: 5, offset: 29971},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1076, col: 5, offset: 29971},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 1076, col: 5, offset: 29971},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1077, col: 5, offset: 30084},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 1077, col: 5, offset: 30084},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 1079, col: 1, offset: 30195},
			expr: &actionExpr{
				pos: position{line: 1080, col: 5, offset: 30211},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 1080, col: 5, offset: 30211},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "TypeLiteral",
			pos:  position{line: 1082, col: 1, offset: 30317},
			expr: &actionExpr{
				pos: position{line: 1083, col: 5, offset: 30333},
				run: (*parser).callonTypeLiteral1,
				expr: &seqExpr{
					pos: position{line: 1083, col: 5, offset: 30333},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1083, col: 5, offset: 30333},
							expr: &seqExpr{
								pos: position{line: 1083, col: 7, offset: 30335},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1083, col: 7, offset: 30335},
										name: "SQLTokenSentinels",
									},
									&ruleRefExpr{
										pos:  position{line: 1083, col: 25, offset: 30353},
										name: "EOT",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1083, col: 30, offset: 30358},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1083, col: 34, offset: 30362},
								name: "TypeExternal",
							},
						},
					},
				},
			},
		},
		{
			name: "CastType",
			pos:  position{line: 1087, col: 1, offset: 30460},
			expr: &choiceExpr{
				pos: position{line: 1088, col: 5, offset: 30473},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1088, col: 5, offset: 30473},
						name: "TypeExternal",
					},
					&ruleRefExpr{
						pos:  position{line: 1089, col: 5, offset: 30490},
						name: "PrimitiveType",
					},
				},
			},
		},
		{
			name: "TypeExternal",
			pos:  position{line: 1091, col: 1, offset: 30505},
			expr: &choiceExpr{
				pos: position{line: 1092, col: 5, offset: 30522},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1092, col: 5, offset: 30522},
						name: "ExplicitType",
					},
					&ruleRefExpr{
						pos:  position{line: 1093, col: 5, offset: 30539},
						name: "ComplexTypeExternal",
					},
					&actionExpr{
						pos: position{line: 1094, col: 5, offset: 30563},
						run: (*parser).callonTypeExternal4,
						expr: &seqExpr{
							pos: position{line: 1094, col: 5, offset: 30563},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1094, col: 5, offset: 30563},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1094, col: 9, offset: 30567},
										name: "PrimitiveTypeExternal",
									},
								},
								&notExpr{
									pos: position{line: 1094, col: 31, offset: 30589},
									expr: &ruleRefExpr{
										pos:  position{line: 1094, col: 32, offset: 30590},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 1096, col: 1, offset: 30626},
			expr: &choiceExpr{
				pos: position{line: 1097, col: 5, offset: 30635},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1097, col: 5, offset: 30635},
						name: "ExplicitType",
					},
					&ruleRefExpr{
						pos:  position{line: 1098, col: 5, offset: 30652},
						name: "AmbiguousType",
					},
					&ruleRefExpr{
						pos:  position{line: 1099, col: 5, offset: 30670},
						name: "ComplexType",
					},
				},
			},
		},
		{
			name: "ExplicitType",
			pos:  position{line: 1101, col: 1, offset: 30683},
			expr: &choiceExpr{
				pos: position{line: 1102, col: 5, offset: 30700},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1102, col: 5, offset: 30700},
						run: (*parser).callonExplicitType2,
						expr: &seqExpr{
							pos: position{line: 1102, col: 5, offset: 30700},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1102, col: 5, offset: 30700},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1102, col: 12, offset: 30707},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1102, col: 15, offset: 30710},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1102, col: 19, offset: 30714},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1102, col: 22, offset: 30717},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1102, col: 26, offset: 30721},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1102, col: 31, offset: 30726},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1102, col: 34, offset: 30729},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1103, col: 5, offset: 30756},
						run: (*parser).callonExplicitType12,
						expr: &seqExpr{
							pos: position{line: 1103, col: 5, offset: 30756},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1103, col: 5, offset: 30756},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1103, col: 12, offset: 30763},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1103, col: 15, offset: 30766},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1103, col: 19, offset: 30770},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1103, col: 22, offset: 30773},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1103, col: 26, offset: 30777},
										name: "TypeUnion",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1103, col: 36, offset: 30787},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1103, col: 39, offset: 30790},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AmbiguousType",
			pos:  position{line: 1105, col: 1, offset: 30815},
			expr: &choiceExpr{
				pos: position{line: 1106, col: 5, offset: 30833},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1106, col: 5, offset: 30833},
						run: (*parser).callonAmbiguousType2,
						expr: &seqExpr{
							pos: position{line: 1106, col: 5, offset: 30833},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1106, col: 5, offset: 30833},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1106, col: 10, offset: 30838},
										name: "PrimitiveType",
									},
								},
								&notExpr{
									pos: position{line: 1106, col: 24, offset: 30852},
									expr: &ruleRefExpr{
										pos:  position{line: 1106, col: 25, offset: 30853},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1107, col: 5, offset: 30893},
						run: (*parser).callonAmbiguousType8,
						expr: &seqExpr{
							pos: position{line: 1107, col: 5, offset: 30893},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1107, col: 5, offset: 30893},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1107, col: 10, offset: 30898},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1107, col: 25, offset: 30913},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1107, col: 28, offset: 30916},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1107, col: 32, offset: 30920},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1107, col: 35, offset: 30923},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1107, col: 39, offset: 30927},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1107, col: 42, offset: 30930},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1107, col: 46, offset: 30934},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1107, col: 51, offset: 30939},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1107, col: 54, offset: 30942},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1110, col: 5, offset: 31043},
						run: (*parser).callonAmbiguousType21,
						expr: &labeledExpr{
							pos:   position{line: 1110, col: 5, offset: 31043},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1110, col: 10, offset: 31048},
								name: "IdentifierName",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1113, col: 5, offset: 31150},
						run: (*parser).callonAmbiguousType24,
						expr: &seqExpr{
							pos: position{line: 1113, col: 5, offset: 31150},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1113, col: 5, offset: 31150},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1113, col: 9, offset: 31154},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1113, col: 12, offset: 31157},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 1113, col: 14, offset: 31159},
										name: "TypeUnion",
									},
								},
								&litMatcher{
									pos:        position{line: 1113, col: 25, offset: 31170},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeUnion",
			pos:  position{line: 1115, col: 1, offset: 31193},
			expr: &actionExpr{
				pos: position{line: 1116, col: 5, offset: 31207},
				run: (*parser).callonTypeUnion1,
				expr: &labeledExpr{
					pos:   position{line: 1116, col: 5, offset: 31207},
					label: "types",
					expr: &ruleRefExpr{
						pos:  position{line: 1116, col: 11, offset: 31213},
						name: "TypeList",
					},
				},
			},
		},
		{
			name: "TypeList",
			pos:  position{line: 1120, col: 1, offset: 31309},
			expr: &actionExpr{
				pos: position{line: 1121, col: 5, offset: 31322},
				run: (*parser).callonTypeList1,
				expr: &seqExpr{
					pos: position{line: 1121, col: 5, offset: 31322},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1121, col: 5, offset: 31322},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1121, col: 11, offset: 31328},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 1121, col: 16, offset: 31333},
							label: "rest",
							expr: &oneOrMoreExpr{
								pos: position{line: 1121, col: 21, offset: 31338},
								expr: &ruleRefExpr{
									pos:  position{line: 1121, col: 21, offset: 31338},
									name: "TypeListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeListTail",
			pos:  position{line: 1125, col: 1, offset: 31432},
			expr: &actionExpr{
				pos: position{line: 1125, col: 16, offset: 31447},
				run: (*parser).callonTypeListTail1,
				expr: &seqExpr{
					pos: position{line: 1125, col: 16, offset: 31447},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1125, col: 16, offset: 31447},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1125, col: 19, offset: 31450},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1125, col: 23, offset: 31454},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1125, col: 26, offset: 31457},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1125, col: 30, offset: 31461},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexType",
			pos:  position{line: 1127, col: 1, offset: 31487},
			expr: &choiceExpr{
				pos: position{line: 1128, col: 5, offset: 31503},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1128, col: 5, offset: 31503},
						run: (*parser).callonComplexType2,
						expr: &seqExpr{
							pos: position{line: 1128, col: 5, offset: 31503},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1128, col: 5, offset: 31503},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1128, col: 9, offset: 31507},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1128, col: 12, offset: 31510},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 1128, col: 19, offset: 31517},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1128, col: 33, offset: 31531},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1128, col: 36, offset: 31534},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1131, col: 5, offset: 31629},
						run: (*parser).callonComplexType10,
						expr: &seqExpr{
							pos: position{line: 1131, col: 5, offset: 31629},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1131, col: 5, offset: 31629},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1131, col: 9, offset: 31633},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1131, col: 12, offset: 31636},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1131, col: 16, offset: 31640},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1131, col: 21, offset: 31645},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1131, col: 24, offset: 31648},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1134, col: 5, offset: 31737},
						run: (*parser).callonComplexType18,
						expr: &seqExpr{
							pos: position{line: 1134, col: 5, offset: 31737},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1134, col: 5, offset: 31737},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1134, col: 10, offset: 31742},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1134, col: 14, offset: 31746},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1134, col: 18, offset: 31750},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1134, col: 23, offset: 31755},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1134, col: 26, offset: 31758},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1137, col: 5, offset: 31846},
						run: (*parser).callonComplexType26,
						expr: &seqExpr{
							pos: position{line: 1137, col: 5, offset: 31846},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1137, col: 5, offset: 31846},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1137, col: 10, offset: 31851},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1137, col: 13, offset: 31854},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 1137, col: 21, offset: 31862},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1137, col: 26, offset: 31867},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1137, col: 29, offset: 31870},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1137, col: 33, offset: 31874},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1137, col: 36, offset: 31877},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 1137, col: 44, offset: 31885},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1137, col: 49, offset: 31890},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1137, col: 52, offset: 31893},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexTypeExternal",
			pos:  position{line: 1141, col: 1, offset: 32007},
			expr: &choiceExpr{
				pos: position{line: 1142, col: 5, offset: 32031},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1142, col: 5, offset: 32031},
						run: (*parser).callonComplexTypeExternal2,
						expr: &seqExpr{
							pos: position{line: 1142, col: 5, offset: 32031},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1142, col: 5, offset: 32031},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1142, col: 9, offset: 32035},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1142, col: 12, offset: 32038},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 1142, col: 19, offset: 32045},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1142, col: 33, offset: 32059},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1142, col: 36, offset: 32062},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1145, col: 5, offset: 32157},
						run: (*parser).callonComplexTypeExternal10,
						expr: &seqExpr{
							pos: position{line: 1145, col: 5, offset: 32157},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1145, col: 5, offset: 32157},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1145, col: 9, offset: 32161},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1145, col: 12, offset: 32164},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1145, col: 16, offset: 32168},
										name: "TypeExternal",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1145, col: 29, offset: 32181},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1145, col: 32, offset: 32184},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1148, col: 5, offset: 32273},
						run: (*parser).callonComplexTypeExternal18,
						expr: &seqExpr{
							pos: position{line: 1148, col: 5, offset: 32273},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1148, col: 5, offset: 32273},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1148, col: 10, offset: 32278},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1148, col: 13, offset: 32281},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1148, col: 17, offset: 32285},
										name: "TypeExternal",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1148, col: 30, offset: 32298},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1148, col: 33, offset: 32301},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1151, col: 5, offset: 32389},
						run: (*parser).callonComplexTypeExternal26,
						expr: &seqExpr{
							pos: position{line: 1151, col: 5, offset: 32389},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1151, col: 5, offset: 32389},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1151, col: 10, offset: 32394},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1151, col: 13, offset: 32397},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 1151, col: 21, offset: 32405},
										name: "TypeExternal",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1151, col: 34, offset: 32418},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1151, col: 37, offset: 32421},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1151, col: 41, offset: 32425},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1151, col: 44, offset: 32428},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 1151, col: 52, offset: 32436},
										name: "TypeExternal",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1151, col: 65, offset: 32449},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1151, col: 68, offset: 32452},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 1155, col: 1, offset: 32566},
			expr: &choiceExpr{
				pos: position{line: 1156, col: 5, offset: 32584},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1156, col: 5, offset: 32584},
						name: "PrimitiveTypeExternal",
					},
					&ruleRefExpr{
						pos:  position{line: 1157, col: 5, offset: 32610},
						name: "PrimitiveTypeInternal",
					},
				},
			},
		},
		{
			name: "PrimitiveTypeExternal",
			pos:  position{line: 1163, col: 1, offset: 32869},
			expr: &actionExpr{
				pos: position{line: 1164, col: 5, offset: 32895},
				run: (*parser).callonPrimitiveTypeExternal1,
				expr: &choiceExpr{
					pos: position{line: 1164, col: 9, offset: 32899},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 1164, col: 9, offset: 32899},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1164, col: 19, offset: 32909},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1164, col: 30, offset: 32920},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1164, col: 41, offset: 32931},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1165, col: 9, offset: 32948},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1165, col: 18, offset: 32957},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1165, col: 28, offset: 32967},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1165, col: 38, offset: 32977},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1166, col: 9, offset: 32993},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1167, col: 9, offset: 33011},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1167, col: 18, offset: 33020},
							val:        "string",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PrimitiveTypeInternal",
			pos:  position{line: 1178, col: 1, offset: 33661},
			expr: &actionExpr{
				pos: position{line: 1179, col: 5, offset: 33687},
				run: (*parser).callonPrimitiveTypeInternal1,
				expr: &choiceExpr{
					pos: position{line: 1179, col: 9, offset: 33691},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 1179, col: 9, offset: 33691},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1179, col: 22, offset: 33704},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1180, col: 9, offset: 33719},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1181, col: 9, offset: 33735},
							val:        "bstring",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1182, col: 9, offset: 33753},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1182, col: 16, offset: 33760},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1183, col: 9, offset: 33774},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1183, col: 18, offset: 33783},
							val:        "error",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1183, col: 28, offset: 33793},
							val:        "null",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldList",
			pos:  position{line: 1187, col: 1, offset: 33909},
			expr: &actionExpr{
				pos: position{line: 1188, col: 5, offset: 33927},
				run: (*parser).callonTypeFieldList1,
				expr: &seqExpr{
					pos: position{line: 1188, col: 5, offset: 33927},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1188, col: 5, offset: 33927},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1188, col: 11, offset: 33933},
								name: "TypeField",
							},
						},
						&labeledExpr{
							pos:   position{line: 1188, col: 21, offset: 33943},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1188, col: 26, offset: 33948},
								expr: &ruleRefExpr{
									pos:  position{line: 1188, col: 26, offset: 33948},
									name: "TypeFieldListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTail",
			pos:  position{line: 1192, col: 1, offset: 34047},
			expr: &actionExpr{
				pos: position{line: 1192, col: 21, offset: 34067},
				run: (*parser).callonTypeFieldListTail1,
				expr: &seqExpr{
					pos: position{line: 1192, col: 21, offset: 34067},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1192, col: 21, offset: 34067},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1192, col: 24, offset: 34070},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1192, col: 28, offset: 34074},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1192, col: 31, offset: 34077},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1192, col: 35, offset: 34081},
								name: "TypeField",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeField",
			pos:  position{line: 1194, col: 1, offset: 34112},
			expr: &actionExpr{
				pos: position{line: 1195, col: 5, offset: 34126},
				run: (*parser).callonTypeField1,
				expr: &seqExpr{
					pos: position{line: 1195, col: 5, offset: 34126},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1195, col: 5, offset: 34126},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1195, col: 10, offset: 34131},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1195, col: 20, offset: 34141},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1195, col: 23, offset: 34144},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1195, col: 27, offset: 34148},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1195, col: 30, offset: 34151},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1195, col: 34, offset: 34155},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListExternal",
			pos:  position{line: 1199, col: 1, offset: 34237},
			expr: &actionExpr{
				pos: position{line: 1200, col: 5, offset: 34263},
				run: (*parser).callonTypeFieldListExternal1,
				expr: &seqExpr{
					pos: position{line: 1200, col: 5, offset: 34263},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1200, col: 5, offset: 34263},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1200, col: 11, offset: 34269},
								name: "TypeField",
							},
						},
						&labeledExpr{
							pos:   position{line: 1200, col: 21, offset: 34279},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1200, col: 26, offset: 34284},
								expr: &ruleRefExpr{
									pos:  position{line: 1200, col: 26, offset: 34284},
									name: "TypeFieldListTailExternal",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTailExternal",
			pos:  position{line: 1204, col: 1, offset: 34391},
			expr: &actionExpr{
				pos: position{line: 1204, col: 29, offset: 34419},
				run: (*parser).callonTypeFieldListTailExternal1,
				expr: &seqExpr{
					pos: position{line: 1204, col: 29, offset: 34419},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1204, col: 29, offset: 34419},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1204, col: 32, offset: 34422},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1204, col: 36, offset: 34426},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1204, col: 39, offset: 34429},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1204, col: 43, offset: 34433},
								name: "TypeFieldExternal",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldExternal",
			pos:  position{line: 1206, col: 1, offset: 34472},
			expr: &actionExpr{
				pos: position{line: 1207, col: 5, offset: 34494},
				run: (*parser).callonTypeFieldExternal1,
				expr: &seqExpr{
					pos: position{line: 1207, col: 5, offset: 34494},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1207, col: 5, offset: 34494},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1207, col: 10, offset: 34499},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1207, col: 20, offset: 34509},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1207, col: 23, offset: 34512},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1207, col: 27, offset: 34516},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1207, col: 30, offset: 34519},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1207, col: 34, offset: 34523},
								name: "TypeExternal",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 1211, col: 1, offset: 34613},
			expr: &choiceExpr{
				pos: position{line: 1212, col: 5, offset: 34627},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1212, col: 5, offset: 34627},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 1213, col: 5, offset: 34646},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "EqualityToken",
			pos:  position{line: 1215, col: 1, offset: 34660},
			expr: &choiceExpr{
				pos: position{line: 1216, col: 5, offset: 34678},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1216, col: 5, offset: 34678},
						name: "EqualityOperator",
					},
					&ruleRefExpr{
						pos:  position{line: 1216, col: 24, offset: 34697},
						name: "RelativeOperator",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 1218, col: 1, offset: 34715},
			expr: &actionExpr{
				pos: position{line: 1218, col: 12, offset: 34726},
				run: (*parser).callonAndToken1,
				expr: &seqExpr{
					pos: position{line: 1218, col: 12, offset: 34726},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1218, col: 12, offset: 34726},
							val:        "and",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1218, col: 19, offset: 34733},
							expr: &ruleRefExpr{
								pos:  position{line: 1218, col: 20, offset: 34734},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 1219, col: 1, offset: 34771},
			expr: &actionExpr{
				pos: position{line: 1219, col: 11, offset: 34781},
				run: (*parser).callonOrToken1,
				expr: &seqExpr{
					pos: position{line: 1219, col: 11, offset: 34781},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1219, col: 11, offset: 34781},
							val:        "or",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1219, col: 17, offset: 34787},
							expr: &ruleRefExpr{
								pos:  position{line: 1219, col: 18, offset: 34788},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 1220, col: 1, offset: 34824},
			expr: &actionExpr{
				pos: position{line: 1220, col: 11, offset: 34834},
				run: (*parser).callonInToken1,
				expr: &seqExpr{
					pos: position{line: 1220, col: 11, offset: 34834},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1220, col: 11, offset: 34834},
							val:        "in",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1220, col: 17, offset: 34840},
							expr: &ruleRefExpr{
								pos:  position{line: 1220, col: 18, offset: 34841},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 1221, col: 1, offset: 34877},
			expr: &actionExpr{
				pos: position{line: 1221, col: 12, offset: 34888},
				run: (*parser).callonNotToken1,
				expr: &seqExpr{
					pos: position{line: 1221, col: 12, offset: 34888},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1221, col: 12, offset: 34888},
							val:        "not",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1221, col: 19, offset: 34895},
							expr: &ruleRefExpr{
								pos:  position{line: 1221, col: 20, offset: 34896},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 1222, col: 1, offset: 34933},
			expr: &actionExpr{
				pos: position{line: 1222, col: 11, offset: 34943},
				run: (*parser).callonByToken1,
				expr: &seqExpr{
					pos: position{line: 1222, col: 11, offset: 34943},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1222, col: 11, offset: 34943},
							val:        "by",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1222, col: 17, offset: 34949},
							expr: &ruleRefExpr{
								pos:  position{line: 1222, col: 18, offset: 34950},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 1224, col: 1, offset: 34987},
			expr: &charClassMatcher{
				pos:        position{line: 1224, col: 19, offset: 35005},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 1226, col: 1, offset: 35017},
			expr: &choiceExpr{
				pos: position{line: 1226, col: 18, offset: 35034},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1226, col: 18, offset: 35034},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 1226, col: 36, offset: 35052},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 1228, col: 1, offset: 35059},
			expr: &actionExpr{
				pos: position{line: 1229, col: 5, offset: 35074},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 1229, col: 5, offset: 35074},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 1229, col: 8, offset: 35077},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 1231, col: 1, offset: 35158},
			expr: &choiceExpr{
				pos: position{line: 1232, col: 5, offset: 35177},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1232, col: 5, offset: 35177},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 1232, col: 5, offset: 35177},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1232, col: 5, offset: 35177},
									expr: &seqExpr{
										pos: position{line: 1232, col: 7, offset: 35179},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1232, col: 7, offset: 35179},
												name: "IDGuard",
											},
											&notExpr{
												pos: position{line: 1232, col: 15, offset: 35187},
												expr: &ruleRefExpr{
													pos:  position{line: 1232, col: 16, offset: 35188},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1232, col: 32, offset: 35204},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1232, col: 48, offset: 35220},
									expr: &ruleRefExpr{
										pos:  position{line: 1232, col: 48, offset: 35220},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1233, col: 5, offset: 35272},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 1233, col: 5, offset: 35272},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1234, col: 5, offset: 35311},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 1234, col: 5, offset: 35311},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1234, col: 5, offset: 35311},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1234, col: 10, offset: 35316},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1234, col: 13, offset: 35319},
										name: "IDGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1236, col: 5, offset: 35410},
						run: (*parser).callonIdentifierName19,
						expr: &litMatcher{
							pos:        position{line: 1236, col: 5, offset: 35410},
							val:        "type",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1237, col: 5, offset: 35452},
						run: (*parser).callonIdentifierName21,
						expr: &seqExpr{
							pos: position{line: 1237, col: 5, offset: 35452},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1237, col: 5, offset: 35452},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1237, col: 8, offset: 35455},
										name: "SQLTokenSentinels",
									},
								},
								&andExpr{
									pos: position{line: 1237, col: 26, offset: 35473},
									expr: &seqExpr{
										pos: position{line: 1237, col: 28, offset: 35475},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1237, col: 28, offset: 35475},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1237, col: 31, offset: 35478},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IDGuard",
			pos:  position{line: 1239, col: 1, offset: 35503},
			expr: &choiceExpr{
				pos: position{line: 1240, col: 5, offset: 35515},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1240, col: 5, offset: 35515},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1241, col: 5, offset: 35534},
						name: "NullLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1242, col: 5, offset: 35550},
						name: "TypeExternal",
					},
					&ruleRefExpr{
						pos:  position{line: 1243, col: 5, offset: 35567},
						name: "SearchGuard",
					},
				},
			},
		},
		{
			name: "Time",
			pos:  position{line: 1245, col: 1, offset: 35580},
			expr: &actionExpr{
				pos: position{line: 1246, col: 5, offset: 35589},
				run: (*parser).callonTime1,
				expr: &seqExpr{
					pos: position{line: 1246, col: 5, offset: 35589},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1246, col: 5, offset: 35589},
							name: "FullDate",
						},
						&litMatcher{
							pos:        position{line: 1246, col: 14, offset: 35598},
							val:        "T",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1246, col: 18, offset: 35602},
							name: "FullTime",
						},
					},
				},
			},
		},
		{
			name: "FullDate",
			pos:  position{line: 1250, col: 1, offset: 35722},
			expr: &seqExpr{
				pos: position{line: 1250, col: 12, offset: 35733},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1250, col: 12, offset: 35733},
						name: "D4",
					},
					&litMatcher{
						pos:        position{line: 1250, col: 15, offset: 35736},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1250, col: 19, offset: 35740},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1250, col: 22, offset: 35743},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1250, col: 26, offset: 35747},
						name: "D2",
					},
				},
			},
		},
		{
			name: "D4",
			pos:  position{line: 1252, col: 1, offset: 35751},
			expr: &seqExpr{
				pos: position{line: 1252, col: 6, offset: 35756},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1252, col: 6, offset: 35756},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1252, col: 11, offset: 35761},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1252, col: 16, offset: 35766},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1252, col: 21, offset: 35771},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "D2",
			pos:  position{line: 1253, col: 1, offset: 35777},
			expr: &seqExpr{
				pos: position{line: 1253, col: 6, offset: 35782},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1253, col: 6, offset: 35782},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1253, col: 11, offset: 35787},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "FullTime",
			pos:  position{line: 1255, col: 1, offset: 35794},
			expr: &seqExpr{
				pos: position{line: 1255, col: 12, offset: 35805},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1255, col: 12, offset: 35805},
						name: "PartialTime",
					},
					&ruleRefExpr{
						pos:  position{line: 1255, col: 24, offset: 35817},
						name: "TimeOffset",
					},
				},
			},
		},
		{
			name: "PartialTime",
			pos:  position{line: 1257, col: 1, offset: 35829},
			expr: &seqExpr{
				pos: position{line: 1257, col: 15, offset: 35843},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1257, col: 15, offset: 35843},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1257, col: 18, offset: 35846},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1257, col: 22, offset: 35850},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1257, col: 25, offset: 35853},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1257, col: 29, offset: 35857},
						name: "D2",
					},
					&zeroOrOneExpr{
						pos: position{line: 1257, col: 32, offset: 35860},
						expr: &seqExpr{
							pos: position{line: 1257, col: 33, offset: 35861},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1257, col: 33, offset: 35861},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1257, col: 37, offset: 35865},
									expr: &charClassMatcher{
										pos:        position{line: 1257, col: 37, offset: 35865},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeOffset",
			pos:  position{line: 1259, col: 1, offset: 35875},
			expr: &choiceExpr{
				pos: position{line: 1260, col: 5, offset: 35890},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1260, col: 5, offset: 35890},
						val:        "Z",
						ignoreCase: false,
					},
					&seqExpr{
						pos: position{line: 1261, col: 5, offset: 35898},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 1261, col: 6, offset: 35899},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1261, col: 6, offset: 35899},
										val:        "+",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 1261, col: 12, offset: 35905},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1261, col: 17, offset: 35910},
								name: "D2",
							},
							&litMatcher{
								pos:        position{line: 1261, col: 20, offset: 35913},
								val:        ":",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 1261, col: 24, offset: 35917},
								name: "D2",
							},
							&zeroOrOneExpr{
								pos: position{line: 1261, col: 27, offset: 35920},
								expr: &seqExpr{
									pos: position{line: 1261, col: 28, offset: 35921},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1261, col: 28, offset: 35921},
											val:        ".",
											ignoreCase: false,
										},
										&oneOrMoreExpr{
											pos: position{line: 1261, col: 32, offset: 35925},
											expr: &charClassMatcher{
												pos:        position{line: 1261, col: 32, offset: 35925},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 1263, col: 1, offset: 35935},
			expr: &actionExpr{
				pos: position{line: 1264, col: 5, offset: 35948},
				run: (*parser).callonDuration1,
				expr: &seqExpr{
					pos: position{line: 1264, col: 5, offset: 35948},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1264, col: 5, offset: 35948},
							expr: &litMatcher{
								pos:        position{line: 1264, col: 5, offset: 35948},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1264, col: 10, offset: 35953},
							expr: &seqExpr{
								pos: position{line: 1264, col: 11, offset: 35954},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1264, col: 11, offset: 35954},
										name: "Decimal",
									},
									&ruleRefExpr{
										pos:  position{line: 1264, col: 19, offset: 35962},
										name: "TimeUnit",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Decimal",
			pos:  position{line: 1268, col: 1, offset: 36088},
			expr: &seqExpr{
				pos: position{line: 1268, col: 11, offset: 36098},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1268, col: 11, offset: 36098},
						name: "UInt",
					},
					&zeroOrOneExpr{
						pos: position{line: 1268, col: 16, offset: 36103},
						expr: &seqExpr{
							pos: position{line: 1268, col: 17, offset: 36104},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1268, col: 17, offset: 36104},
									val:        ".",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1268, col: 21, offset: 36108},
									name: "UInt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeUnit",
			pos:  position{line: 1270, col: 1, offset: 36116},
			expr: &choiceExpr{
				pos: position{line: 1271, col: 5, offset: 36129},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1271, col: 5, offset: 36129},
						val:        "ns",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1272, col: 5, offset: 36139},
						val:        "us",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1273, col: 5, offset: 36149},
						val:        "ms",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1274, col: 5, offset: 36159},
						val:        "s",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1275, col: 5, offset: 36168},
						val:        "m",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1276, col: 5, offset: 36177},
						val:        "h",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1277, col: 5, offset: 36186},
						val:        "d",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1278, col: 5, offset: 36195},
						val:        "w",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1279, col: 5, offset: 36204},
						val:        "y",
						ignoreCase: true,
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 1281, col: 1, offset: 36210},
			expr: &actionExpr{
				pos: position{line: 1282, col: 5, offset: 36217},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 1282, col: 5, offset: 36217},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1282, col: 5, offset: 36217},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1282, col: 10, offset: 36222},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1282, col: 14, offset: 36226},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1282, col: 19, offset: 36231},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1282, col: 23, offset: 36235},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1282, col: 28, offset: 36240},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1282, col: 32, offset: 36244},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 1284, col: 1, offset: 36281},
			expr: &actionExpr{
				pos: position{line: 1285, col: 5, offset: 36289},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 1285, col: 5, offset: 36289},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1285, col: 5, offset: 36289},
							expr: &seqExpr{
								pos: position{line: 1285, col: 8, offset: 36292},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1285, col: 8, offset: 36292},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 1285, col: 12, offset: 36296},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 1285, col: 16, offset: 36300},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 1285, col: 20, offset: 36304},
										expr: &choiceExpr{
											pos: position{line: 1285, col: 22, offset: 36306},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1285, col: 22, offset: 36306},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 1285, col: 33, offset: 36317},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1285, col: 39, offset: 36323},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1285, col: 41, offset: 36325},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 1289, col: 1, offset: 36489},
			expr: &choiceExpr{
				pos: position{line: 1290, col: 5, offset: 36507},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1290, col: 5, offset: 36507},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 1290, col: 5, offset: 36507},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1290, col: 5, offset: 36507},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 1290, col: 7, offset: 36509},
										expr: &ruleRefExpr{
											pos:  position{line: 1290, col: 7, offset: 36509},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1290, col: 17, offset: 36519},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1290, col: 19, offset: 36521},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1293, col: 5, offset: 36585},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 1293, col: 5, offset: 36585},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1293, col: 5, offset: 36585},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1293, col: 7, offset: 36587},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1293, col: 11, offset: 36591},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1293, col: 13, offset: 36593},
										expr: &ruleRefExpr{
											pos:  position{line: 1293, col: 13, offset: 36593},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1293, col: 23, offset: 36603},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1293, col: 28, offset: 36608},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1293, col: 30, offset: 36610},
										expr: &ruleRefExpr{
											pos:  position{line: 1293, col: 30, offset: 36610},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1293, col: 40, offset: 36620},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 1293, col: 42, offset: 36622},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1296, col: 5, offset: 36721},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 1296, col: 5, offset: 36721},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1296, col: 5, offset: 36721},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1296, col: 10, offset: 36726},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1296, col: 12, offset: 36728},
										expr: &ruleRefExpr{
											pos:  position{line: 1296, col: 12, offset: 36728},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1296, col: 22, offset: 36738},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1296, col: 24, offset: 36740},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1299, col: 5, offset: 36811},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 1299, col: 5, offset: 36811},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1299, col: 5, offset: 36811},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1299, col: 7, offset: 36813},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1299, col: 11, offset: 36817},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1299, col: 13, offset: 36819},
										expr: &ruleRefExpr{
											pos:  position{line: 1299, col: 13, offset: 36819},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1299, col: 23, offset: 36829},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1302, col: 5, offset: 36897},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 1302, col: 5, offset: 36897},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 1306, col: 1, offset: 36934},
			expr: &choiceExpr{
				pos: position{line: 1307, col: 5, offset: 36946},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1307, col: 5, offset: 36946},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 1308, col: 5, offset: 36953},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 1310, col: 1, offset: 36958},
			expr: &actionExpr{
				pos: position{line: 1310, col: 12, offset: 36969},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 1310, col: 12, offset: 36969},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1310, col: 12, offset: 36969},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1310, col: 16, offset: 36973},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1310, col: 18, offset: 36975},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 1312, col: 1, offset: 37013},
			expr: &actionExpr{
				pos: position{line: 1312, col: 12, offset: 37024},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 1312, col: 12, offset: 37024},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1312, col: 12, offset: 37024},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1312, col: 14, offset: 37026},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 1312, col: 18, offset: 37030},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 1314, col: 1, offset: 37068},
			expr: &actionExpr{
				pos: position{line: 1315, col: 5, offset: 37079},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 1315, col: 5, offset: 37079},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1315, col: 5, offset: 37079},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1315, col: 7, offset: 37081},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 1315, col: 10, offset: 37084},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1315, col: 14, offset: 37088},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1315, col: 16, offset: 37090},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 1319, col: 1, offset: 37163},
			expr: &actionExpr{
				pos: position{line: 1320, col: 5, offset: 37174},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 1320, col: 5, offset: 37174},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1320, col: 5, offset: 37174},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1320, col: 7, offset: 37176},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 1320, col: 11, offset: 37180},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1320, col: 15, offset: 37184},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1320, col: 17, offset: 37186},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 1324, col: 1, offset: 37249},
			expr: &actionExpr{
				pos: position{line: 1325, col: 4, offset: 37257},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 1325, col: 4, offset: 37257},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 1325, col: 6, offset: 37259},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 1327, col: 1, offset: 37299},
			expr: &choiceExpr{
				pos: position{line: 1328, col: 5, offset: 37313},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1328, col: 5, offset: 37313},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 1329, col: 5, offset: 37328},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 1331, col: 1, offset: 37344},
			expr: &actionExpr{
				pos: position{line: 1331, col: 14, offset: 37357},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1331, col: 14, offset: 37357},
					expr: &charClassMatcher{
						pos:        position{line: 1331, col: 14, offset: 37357},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 1333, col: 1, offset: 37396},
			expr: &actionExpr{
				pos: position{line: 1334, col: 5, offset: 37415},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 1334, col: 5, offset: 37415},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1334, col: 5, offset: 37415},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1334, col: 9, offset: 37419},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 1336, col: 1, offset: 37462},
			expr: &choiceExpr{
				pos: position{line: 1337, col: 5, offset: 37478},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1337, col: 5, offset: 37478},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 1337, col: 5, offset: 37478},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1337, col: 5, offset: 37478},
									expr: &litMatcher{
										pos:        position{line: 1337, col: 5, offset: 37478},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1337, col: 10, offset: 37483},
									expr: &charClassMatcher{
										pos:        position{line: 1337, col: 10, offset: 37483},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 1337, col: 17, offset: 37490},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1337, col: 21, offset: 37494},
									expr: &charClassMatcher{
										pos:        position{line: 1337, col: 21, offset: 37494},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1337, col: 28, offset: 37501},
									expr: &ruleRefExpr{
										pos:  position{line: 1337, col: 28, offset: 37501},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1340, col: 5, offset: 37560},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 1340, col: 5, offset: 37560},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1340, col: 5, offset: 37560},
									expr: &litMatcher{
										pos:        position{line: 1340, col: 5, offset: 37560},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1340, col: 10, offset: 37565},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1340, col: 14, offset: 37569},
									expr: &charClassMatcher{
										pos:        position{line: 1340, col: 14, offset: 37569},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1340, col: 21, offset: 37576},
									expr: &ruleRefExpr{
										pos:  position{line: 1340, col: 21, offset: 37576},
										name: "ExponentPart",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 1344, col: 1, offset: 37632},
			expr: &seqExpr{
				pos: position{line: 1344, col: 16, offset: 37647},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1344, col: 16, offset: 37647},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 1344, col: 21, offset: 37652},
						expr: &charClassMatcher{
							pos:        position{line: 1344, col: 21, offset: 37652},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1344, col: 27, offset: 37658},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 1346, col: 1, offset: 37670},
			expr: &actionExpr{
				pos: position{line: 1346, col: 7, offset: 37676},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1346, col: 7, offset: 37676},
					expr: &ruleRefExpr{
						pos:  position{line: 1346, col: 7, offset: 37676},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 1348, col: 1, offset: 37718},
			expr: &charClassMatcher{
				pos:        position{line: 1348, col: 12, offset: 37729},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1351, col: 1, offset: 37743},
			expr: &choiceExpr{
				pos: position{line: 1352, col: 5, offset: 37760},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1352, col: 5, offset: 37760},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 1352, col: 5, offset: 37760},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1352, col: 5, offset: 37760},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1352, col: 9, offset: 37764},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1352, col: 11, offset: 37766},
										expr: &ruleRefExpr{
											pos:  position{line: 1352, col: 11, offset: 37766},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1352, col: 29, offset: 37784},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1353, col: 5, offset: 37821},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 1353, col: 5, offset: 37821},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1353, col: 5, offset: 37821},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1353, col: 9, offset: 37825},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1353, col: 11, offset: 37827},
										expr: &ruleRefExpr{
											pos:  position{line: 1353, col: 11, offset: 37827},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1353, col: 29, offset: 37845},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 1355, col: 1, offset: 37879},
			expr: &choiceExpr{
				pos: position{line: 1356, col: 5, offset: 37900},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1356, col: 5, offset: 37900},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1356, col: 5, offset: 37900},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1356, col: 5, offset: 37900},
									expr: &choiceExpr{
										pos: position{line: 1356, col: 7, offset: 37902},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1356, col: 7, offset: 37902},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1356, col: 13, offset: 37908},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1356, col: 26, offset: 37921,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1357, col: 5, offset: 37958},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1357, col: 5, offset: 37958},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1357, col: 5, offset: 37958},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1357, col: 10, offset: 37963},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1357, col: 12, offset: 37965},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 1359, col: 1, offset: 37999},
			expr: &actionExpr{
				pos: position{line: 1360, col: 5, offset: 38011},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 1360, col: 5, offset: 38011},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1360, col: 5, offset: 38011},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1360, col: 10, offset: 38016},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1360, col: 23, offset: 38029},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1360, col: 28, offset: 38034},
								expr: &ruleRefExpr{
									pos:  position{line: 1360, col: 28, offset: 38034},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 1362, col: 1, offset: 38096},
			expr: &choiceExpr{
				pos: position{line: 1363, col: 5, offset: 38113},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1363, col: 5, offset: 38113},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1364, col: 5, offset: 38130},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordChars",
			pos:  position{line: 1366, col: 1, offset: 38142},
			expr: &actionExpr{
				pos: position{line: 1366, col: 16, offset: 38157},
				run: (*parser).callonKeyWordChars1,
				expr: &charClassMatcher{
					pos:        position{line: 1366, col: 16, offset: 38157},
					val:        "[a-zA-Z_.:/%#@~]",
					chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
					ranges:     []rune{'a', 'z', 'A', 'Z'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 1368, col: 1, offset: 38206},
			expr: &choiceExpr{
				pos: position{line: 1369, col: 5, offset: 38222},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1369, col: 5, offset: 38222},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 1370, col: 5, offset: 38239},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 1372, col: 1, offset: 38246},
			expr: &actionExpr{
				pos: position{line: 1372, col: 14, offset: 38259},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 1372, col: 14, offset: 38259},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1372, col: 14, offset: 38259},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1372, col: 19, offset: 38264},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1372, col: 22, offset: 38267},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1372, col: 22, offset: 38267},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1372, col: 38, offset: 38283},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Glob",
			pos:  position{line: 1374, col: 1, offset: 38319},
			expr: &actionExpr{
				pos: position{line: 1375, col: 5, offset: 38328},
				run: (*parser).callonGlob1,
				expr: &seqExpr{
					pos: position{line: 1375, col: 5, offset: 38328},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1375, col: 5, offset: 38328},
							expr: &ruleRefExpr{
								pos:  position{line: 1375, col: 6, offset: 38329},
								name: "GlobProperStart",
							},
						},
						&andExpr{
							pos: position{line: 1375, col: 22, offset: 38345},
							expr: &ruleRefExpr{
								pos:  position{line: 1375, col: 23, offset: 38346},
								name: "GlobHasStar",
							},
						},
						&labeledExpr{
							pos:   position{line: 1375, col: 35, offset: 38358},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1375, col: 40, offset: 38363},
								name: "GlobStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1375, col: 50, offset: 38373},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1375, col: 55, offset: 38378},
								expr: &ruleRefExpr{
									pos:  position{line: 1375, col: 55, offset: 38378},
									name: "GlobRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobProperStart",
			pos:  position{line: 1379, col: 1, offset: 38462},
			expr: &seqExpr{
				pos: position{line: 1379, col: 19, offset: 38480},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1379, col: 19, offset: 38480},
						expr: &litMatcher{
							pos:        position{line: 1379, col: 19, offset: 38480},
							val:        "*",
							ignoreCase: false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1379, col: 24, offset: 38485},
						name: "KeyWordStart",
					},
				},
			},
		},
		{
			name: "GlobHasStar",
			pos:  position{line: 1380, col: 1, offset: 38498},
			expr: &seqExpr{
				pos: position{line: 1380, col: 15, offset: 38512},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1380, col: 15, offset: 38512},
						expr: &ruleRefExpr{
							pos:  position{line: 1380, col: 15, offset: 38512},
							name: "KeyWordRest",
						},
					},
					&litMatcher{
						pos:        position{line: 1380, col: 28, offset: 38525},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "GlobStart",
			pos:  position{line: 1382, col: 1, offset: 38530},
			expr: &choiceExpr{
				pos: position{line: 1383, col: 5, offset: 38544},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1383, col: 5, offset: 38544},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1384, col: 5, offset: 38561},
						name: "GlobEsc",
					},
					&actionExpr{
						pos: position{line: 1385, col: 5, offset: 38573},
						run: (*parser).callonGlobStart4,
						expr: &litMatcher{
							pos:        position{line: 1385, col: 5, offset: 38573},
							val:        "*",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GlobRest",
			pos:  position{line: 1387, col: 1, offset: 38597},
			expr: &choiceExpr{
				pos: position{line: 1388, col: 5, offset: 38610},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1388, col: 5, offset: 38610},
						name: "GlobStart",
					},
					&charClassMatcher{
						pos:        position{line: 1389, col: 5, offset: 38624},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "GlobEsc",
			pos:  position{line: 1391, col: 1, offset: 38631},
			expr: &actionExpr{
				pos: position{line: 1391, col: 11, offset: 38641},
				run: (*parser).callonGlobEsc1,
				expr: &seqExpr{
					pos: position{line: 1391, col: 11, offset: 38641},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1391, col: 11, offset: 38641},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1391, col: 16, offset: 38646},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1391, col: 19, offset: 38649},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1391, col: 19, offset: 38649},
										name: "GlobEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1391, col: 32, offset: 38662},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobEscape",
			pos:  position{line: 1393, col: 1, offset: 38698},
			expr: &choiceExpr{
				pos: position{line: 1394, col: 5, offset: 38713},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1394, col: 5, offset: 38713},
						run: (*parser).callonGlobEscape2,
						expr: &litMatcher{
							pos:        position{line: 1394, col: 5, offset: 38713},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1395, col: 5, offset: 38741},
						run: (*parser).callonGlobEscape4,
						expr: &litMatcher{
							pos:        position{line: 1395, col: 5, offset: 38741},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1396, col: 5, offset: 38771},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 1399, col: 1, offset: 38778},
			expr: &choiceExpr{
				pos: position{line: 1400, col: 5, offset: 38799},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1400, col: 5, offset: 38799},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1400, col: 5, offset: 38799},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1400, col: 5, offset: 38799},
									expr: &choiceExpr{
										pos: position{line: 1400, col: 7, offset: 38801},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1400, col: 7, offset: 38801},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1400, col: 13, offset: 38807},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1400, col: 26, offset: 38820,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1401, col: 5, offset: 38857},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1401, col: 5, offset: 38857},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1401, col: 5, offset: 38857},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1401, col: 10, offset: 38862},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1401, col: 12, offset: 38864},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 1403, col: 1, offset: 38898},
			expr: &choiceExpr{
				pos: position{line: 1404, col: 5, offset: 38917},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1404, col: 5, offset: 38917},
						run: (*parser).callonEscapeSequence2,
						expr: &seqExpr{
							pos: position{line: 1404, col: 5, offset: 38917},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1404, col: 5, offset: 38917},
									val:        "x",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1404, col: 9, offset: 38921},
									name: "HexDigit",
								},
								&ruleRefExpr{
									pos:  position{line: 1404, col: 18, offset: 38930},
									name: "HexDigit",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1405, col: 5, offset: 38981},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 1406, col: 5, offset: 39002},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 1408, col: 1, offset: 39017},
			expr: &choiceExpr{
				pos: position{line: 1409, col: 5, offset: 39038},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1409, col: 5, offset: 39038},
						val:        "'",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1410, col: 5, offset: 39046},
						run: (*parser).callonSingleCharEscape3,
						expr: &litMatcher{
							pos:        position{line: 1410, col: 5, offset: 39046},
							val:        "\"",
							ignoreCase: false,
						},
					},
					&litMatcher{
						pos:        position{line: 1411, col: 5, offset: 39086},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1412, col: 5, offset: 39095},
						run: (*parser).callonSingleCharEscape6,
						expr: &litMatcher{
							pos:        position{line: 1412, col: 5, offset: 39095},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1413, col: 5, offset: 39124},
						run: (*parser).callonSingleCharEscape8,
						expr: &litMatcher{
							pos:        position{line: 1413, col: 5, offset: 39124},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1414, col: 5, offset: 39153},
						run: (*parser).callonSingleCharEscape10,
						expr: &litMatcher{
							pos:        position{line: 1414, col: 5, offset: 39153},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1415, col: 5, offset: 39182},
						run: (*parser).callonSingleCharEscape12,
						expr: &litMatcher{
							pos:        position{line: 1415, col: 5, offset: 39182},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1416, col: 5, offset: 39211},
						run: (*parser).callonSingleCharEscape14,
						expr: &litMatcher{
							pos:        position{line: 1416, col: 5, offset: 39211},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1417, col: 5, offset: 39240},
						run: (*parser).callonSingleCharEscape16,
						expr: &litMatcher{
							pos:        position{line: 1417, col: 5, offset: 39240},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 1419, col: 1, offset: 39266},
			expr: &choiceExpr{
				pos: position{line: 1420, col: 5, offset: 39284},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1420, col: 5, offset: 39284},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 1420, col: 5, offset: 39284},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1421, col: 5, offset: 39312},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 1421, col: 5, offset: 39312},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1422, col: 5, offset: 39340},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 1424, col: 1, offset: 39346},
			expr: &choiceExpr{
				pos: position{line: 1425, col: 5, offset: 39364},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1425, col: 5, offset: 39364},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 1425, col: 5, offset: 39364},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1425, col: 5, offset: 39364},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1425, col: 9, offset: 39368},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1425, col: 16, offset: 39375},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1425, col: 16, offset: 39375},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1425, col: 25, offset: 39384},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1425, col: 34, offset: 39393},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1425, col: 43, offset: 39402},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1428, col: 5, offset: 39465},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 1428, col: 5, offset: 39465},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1428, col: 5, offset: 39465},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1428, col: 9, offset: 39469},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1428, col: 13, offset: 39473},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1428, col: 20, offset: 39480},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1428, col: 20, offset: 39480},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 1428, col: 29, offset: 39489},
												expr: &ruleRefExpr{
													pos:  position{line: 1428, col: 29, offset: 39489},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1428, col: 39, offset: 39499},
												expr: &ruleRefExpr{
													pos:  position{line: 1428, col: 39, offset: 39499},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1428, col: 49, offset: 39509},
												expr: &ruleRefExpr{
													pos:  position{line: 1428, col: 49, offset: 39509},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1428, col: 59, offset: 39519},
												expr: &ruleRefExpr{
													pos:  position{line: 1428, col: 59, offset: 39519},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1428, col: 69, offset: 39529},
												expr: &ruleRefExpr{
													pos:  position{line: 1428, col: 69, offset: 39529},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1428, col: 80, offset: 39540},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 1432, col: 1, offset: 39594},
			expr: &actionExpr{
				pos: position{line: 1433, col: 5, offset: 39605},
				run: (*parser).callonRegexp1,
				expr: &seqExpr{
					pos: position{line: 1433, col: 5, offset: 39605},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1433, col: 5, offset: 39605},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1433, col: 9, offset: 39609},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1433, col: 14, offset: 39614},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 1433, col: 25, offset: 39625},
							val:        "/",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1433, col: 29, offset: 39629},
							expr: &ruleRefExpr{
								pos:  position{line: 1433, col: 30, offset: 39630},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 1435, col: 1, offset: 39665},
			expr: &actionExpr{
				pos: position{line: 1436, col: 5, offset: 39680},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1436, col: 5, offset: 39680},
					expr: &choiceExpr{
						pos: position{line: 1436, col: 6, offset: 39681},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 1436, col: 6, offset: 39681},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&litMatcher{
								pos:        position{line: 1436, col: 13, offset: 39688},
								val:        "\\/",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 1438, col: 1, offset: 39728},
			expr: &charClassMatcher{
				pos:        position{line: 1439, col: 5, offset: 39744},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 1441, col: 1, offset: 39759},
			expr: &oneOrMoreExpr{
				pos: position{line: 1441, col: 6, offset: 39764},
				expr: &ruleRefExpr{
					pos:  position{line: 1441, col: 6, offset: 39764},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1443, col: 1, offset: 39775},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1443, col: 6, offset: 39780},
				expr: &ruleRefExpr{
					pos:  position{line: 1443, col: 6, offset: 39780},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 1445, col: 1, offset: 39791},
			expr: &choiceExpr{
				pos: position{line: 1446, col: 5, offset: 39804},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1446, col: 5, offset: 39804},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 1447, col: 5, offset: 39819},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 1448, col: 5, offset: 39838},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 1450, col: 1, offset: 39847},
			expr: &anyMatcher{
				line: 1451, col: 5, offset: 39867,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 1453, col: 1, offset: 39870},
			expr: &choiceExpr{
				pos: position{line: 1454, col: 5, offset: 39898},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1454, col: 5, offset: 39898},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1455, col: 5, offset: 39907},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1456, col: 5, offset: 39916},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1457, col: 5, offset: 39925},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1458, col: 5, offset: 39933},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1459, col: 5, offset: 39946},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 1461, col: 1, offset: 39956},
			expr: &charClassMatcher{
				pos:        position{line: 1462, col: 5, offset: 39975},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 1468, col: 1, offset: 40305},
			expr: &ruleRefExpr{
				pos:  position{line: 1471, col: 5, offset: 40376},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1473, col: 1, offset: 40395},
			expr: &seqExpr{
				pos: position{line: 1474, col: 5, offset: 40416},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1474, col: 5, offset: 40416},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1474, col: 10, offset: 40421},
						expr: &seqExpr{
							pos: position{line: 1474, col: 11, offset: 40422},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1474, col: 11, offset: 40422},
									expr: &litMatcher{
										pos:        position{line: 1474, col: 12, offset: 40423},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1474, col: 17, offset: 40428},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1474, col: 35, offset: 40446},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1476, col: 1, offset: 40452},
			expr: &seqExpr{
				pos: position{line: 1477, col: 5, offset: 40474},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1477, col: 5, offset: 40474},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1477, col: 10, offset: 40479},
						expr: &seqExpr{
							pos: position{line: 1477, col: 11, offset: 40480},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1477, col: 11, offset: 40480},
									expr: &ruleRefExpr{
										pos:  position{line: 1477, col: 12, offset: 40481},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1477, col: 27, offset: 40496},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1479, col: 1, offset: 40515},
			expr: &seqExpr{
				pos: position{line: 1479, col: 7, offset: 40521},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1479, col: 7, offset: 40521},
						expr: &ruleRefExpr{
							pos:  position{line: 1479, col: 7, offset: 40521},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1479, col: 19, offset: 40533},
						name: "LineTerminator",
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 1481, col: 1, offset: 40549},
			expr: &choiceExpr{
				pos: position{line: 1481, col: 7, offset: 40555},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1481, col: 7, offset: 40555},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 1481, col: 11, offset: 40559},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1483, col: 1, offset: 40564},
			expr: &notExpr{
				pos: position{line: 1483, col: 7, offset: 40570},
				expr: &anyMatcher{
					line: 1483, col: 8, offset: 40571,
				},
			},
		},
	},
}

func (c *current) onstart1(ast interface{}) (interface{}, error) {
	return ast, nil
}

func (p *parser) callonstart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart1(stack["ast"])
}

func (c *current) onZ2(decls, first, rest interface{}) (interface{}, error) {
	var procs = decls.([]interface{})
	procs = append(procs, first)
	for _, p := range rest.([]interface{}) {
		procs = append(procs, p)
	}
	return map[string]interface{}{"kind": "Sequential", "procs": procs}, nil

}

func (p *parser) callonZ2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onZ2(stack["decls"], stack["first"], stack["rest"])
}

func (c *current) onDecl1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonDecl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDecl1(stack["v"])
}

func (c *current) onAnyDecl2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Const", "name": id, "expr": expr}, nil

}

func (p *parser) callonAnyDecl2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyDecl2(stack["id"], stack["expr"])
}

func (c *current) onAnyDecl18(id, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeProc", "name": id, "type": typ}, nil

}

func (p *parser) callonAnyDecl18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyDecl18(stack["id"], stack["typ"])
}

func (c *current) onSequential2(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonSequential2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential2(stack["first"], stack["rest"])
}

func (c *current) onSequential9(op interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": []interface{}{op}}, nil

}

func (p *parser) callonSequential9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential9(stack["op"])
}

func (c *current) onSequentialTail1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonSequentialTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequentialTail1(stack["p"])
}

func (c *current) onParallel2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonParallel2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallel2(stack["first"], stack["rest"])
}

func (c *current) onParallel9(first interface{}) (interface{}, error) {
	return []interface{}{first}, nil

}

func (p *parser) callonParallel9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallel9(stack["first"])
}

func (c *current) onParallelTail1(ch interface{}) (interface{}, error) {
	return ch, nil
}

func (p *parser) callonParallelTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallelTail1(stack["ch"])
}

func (c *current) onSwitchBranch2(e, proc interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": e, "proc": proc}, nil

}

func (p *parser) callonSwitchBranch2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchBranch2(stack["e"], stack["proc"])
}

func (c *current) onSwitchBranch14(proc interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, "proc": proc}, nil

}

func (p *parser) callonSwitchBranch14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchBranch14(stack["proc"])
}

func (c *current) onSwitch2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSwitch2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitch2(stack["first"], stack["rest"])
}

func (c *current) onSwitch9(first interface{}) (interface{}, error) {
	return []interface{}{first}, nil

}

func (p *parser) callonSwitch9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitch9(stack["first"])
}

func (c *current) onFromTrunks2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFromTrunks2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromTrunks2(stack["first"], stack["rest"])
}

func (c *current) onFromTrunks9(first interface{}) (interface{}, error) {
	return []interface{}{first}, nil

}

func (p *parser) callonFromTrunks9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromTrunks9(stack["first"])
}

func (c *current) onFromTrunk1(source, seq interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Trunk", "source": source, "seq": seq}, nil

}

func (p *parser) callonFromTrunk1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromTrunk1(stack["source"], stack["seq"])
}

func (c *current) onFromTrunkSeq2(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonFromTrunkSeq2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromTrunkSeq2(stack["seq"])
}

func (c *current) onFromTrunkSeq9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonFromTrunkSeq9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromTrunkSeq9()
}

func (c *current) onFromTrunkTail1(trunk interface{}) (interface{}, error) {
	return trunk, nil
}

func (p *parser) callonFromTrunkTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromTrunkTail1(stack["trunk"])
}

func (c *current) onOperation2(procArray interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Parallel", "procs": procArray}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["procArray"])
}

func (c *current) onOperation14(caseArray interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "cases": caseArray}, nil

}

func (p *parser) callonOperation14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation14(stack["caseArray"])
}

func (c *current) onOperation24(trunks interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": trunks}, nil

}

func (p *parser) callonOperation24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation24(stack["trunks"])
}

func (c *current) onOperation38(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonOperation38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation38(stack["f"])
}

func (c *current) onOperation44(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation44(stack["a"])
}

func (c *current) onOperation50(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Filter", "expr": expr}, nil

}

func (p *parser) callonOperation50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation50(stack["expr"])
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor15(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor15(stack["expr"])
}

func (c *current) onShortCut2(compareOp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": "or",

		"args": []interface{}{

			map[string]interface{}{"kind": "SelectExpr",

				"selectors": []interface{}{map[string]interface{}{"kind": "Root"}},

				"methods": []interface{}{

					map[string]interface{}{"kind": "Call", "name": "map",

						"args": []interface{}{map[string]interface{}{"kind": "BinaryExpr", "op": "=",

							"lhs": map[string]interface{}{"kind": "ID", "name": "$"},

							"rhs": v}}}}}}}, nil

}

func (p *parser) callonShortCut2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut2(stack["compareOp"], stack["v"])
}

func (c *current) onShortCut11(match interface{}) (interface{}, error) {
	return match, nil
}

func (p *parser) callonShortCut11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut11(stack["match"])
}

func (c *current) onShortCut17(f, comp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": comp, "lhs": f, "rhs": v}, nil

}

func (p *parser) callonShortCut17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut17(stack["f"], stack["comp"], stack["v"])
}

func (c *current) onShortCut29(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": "or",

		"args": []interface{}{

			map[string]interface{}{"kind": "SelectExpr",

				"selectors": []interface{}{map[string]interface{}{"kind": "Root"}},

				"methods": []interface{}{

					map[string]interface{}{"kind": "Call", "name": "map",

						"args": []interface{}{map[string]interface{}{"kind": "BinaryExpr", "op": "in",

							"rhs": map[string]interface{}{"kind": "ID", "name": "$"},

							"lhs": v}}}}}}}, nil

}

func (p *parser) callonShortCut29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut29(stack["v"])
}

func (c *current) onShortCut37(search interface{}) (interface{}, error) {
	return search, nil
}

func (p *parser) callonShortCut37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut37(stack["search"])
}

func (c *current) onShortCut45(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Search", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonShortCut45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut45(stack["v"])
}

func (c *current) onShortCut55() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil

}

func (p *parser) callonShortCut55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut55()
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onPatternSearch1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RegexpSearch", "pattern": pattern}, nil

}

func (p *parser) callonPatternSearch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternSearch1(stack["pattern"])
}

func (c *current) onPatternMatch2(f, pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RegexpMatch", "pattern": pattern, "expr": f}, nil

}

func (p *parser) callonPatternMatch2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternMatch2(stack["f"], stack["pattern"])
}

func (c *current) onPatternMatch17(f, pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!",

		"operand": map[string]interface{}{"kind": "RegexpMatch", "pattern": pattern, "expr": f}}, nil

}

func (p *parser) callonPatternMatch17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternMatch17(stack["f"], stack["pattern"])
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchExprRelative7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonSearchExprRelative7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprRelative7(stack["op"], stack["expr"])
}

func (c *current) onSearchExprRelative1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprRelative1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprRelative1(stack["first"], stack["rest"])
}

func (c *current) onSearchExprAdd7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonSearchExprAdd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprAdd7(stack["op"], stack["expr"])
}

func (c *current) onSearchExprAdd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprAdd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprAdd1(stack["first"], stack["rest"])
}

func (c *current) onSearchExprMul7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonSearchExprMul7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprMul7(stack["op"], stack["expr"])
}

func (c *current) onSearchExprMul1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprMul1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprMul1(stack["first"], stack["rest"])
}

func (c *current) onSearchExprCast2(e, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": e, "type": typ}, nil

}

func (p *parser) callonSearchExprCast2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprCast2(stack["e"], stack["typ"])
}

func (c *current) onSearchExprFunc4(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprFunc4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprFunc4(stack["first"], stack["rest"])
}

func (c *current) onAggregation2(every, keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Summarize", "keys": keys, "aggs": nil, "duration": every, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["every"], stack["keys"], stack["limit"])
}

func (c *current) onAggregation11(every, aggs, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"kind": "Summarize", "keys": nil, "aggs": aggs, "duration": every, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation11(stack["every"], stack["aggs"], stack["keys"], stack["limit"])
}

func (c *current) onEveryDur2(dur interface{}) (interface{}, error) {
	return dur, nil
}

func (p *parser) callonEveryDur2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEveryDur2(stack["dur"])
}

func (c *current) onEveryDur9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonEveryDur9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEveryDur9()
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAggAssignment2(lval, agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lval, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment2(stack["lval"], stack["agg"])
}

func (c *current) onAggAssignment11(agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment11(stack["agg"])
}

func (c *current) onAgg1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"kind": "Agg", "name": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonAgg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAgg1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onAggAssignments1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonAggAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSortProc8(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc8(stack["l"])
}

func (c *current) onSortProc1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var proc = map[string]interface{}{"kind": "Sort", "args": list, "sortdir": 1, "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		proc["sortdir"] = -1
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			proc["nullsfirst"] = true
		}
	}
	return proc, nil

}

func (p *parser) callonSortProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopProc6(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopProc6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc6(stack["n"])
}

func (c *current) onTopProc18(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopProc18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc18(stack["f"])
}

func (c *current) onTopProc1(limit, flush, fields interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Top", "limit": 0, "args": nil, "flush": false}
	if limit != nil {
		proc["limit"] = limit
	}
	if fields != nil {
		proc["args"] = fields
	}
	if flush != nil {
		proc["flush"] = true
	}
	return proc, nil

}

func (p *parser) callonTopProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cut", "args": args}, nil

}

func (p *parser) callonCutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutProc1(stack["args"])
}

func (c *current) onPickProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pick", "args": args}, nil

}

func (p *parser) callonPickProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPickProc1(stack["args"])
}

func (c *current) onDropProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Drop", "args": args}, nil

}

func (p *parser) callonDropProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropProc1(stack["args"])
}

func (c *current) onHeadProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": count}, nil
}

func (p *parser) callonHeadProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc2(stack["count"])
}

func (c *current) onHeadProc8() (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": 1}, nil
}

func (p *parser) callonHeadProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc8()
}

func (c *current) onTailProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": count}, nil
}

func (p *parser) callonTailProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc2(stack["count"])
}

func (c *current) onTailProc8() (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": 1}, nil
}

func (p *parser) callonTailProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc8()
}

func (c *current) onFilterProc1(op interface{}) (interface{}, error) {
	return op, nil

}

func (p *parser) callonFilterProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilterProc1(stack["op"])
}

func (c *current) onFilter1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Filter", "expr": expr}, nil

}

func (p *parser) callonFilter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilter1(stack["expr"])
}

func (c *current) onUniqProc2() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": true}, nil

}

func (p *parser) callonUniqProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc2()
}

func (c *current) onUniqProc7() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": false}, nil

}

func (p *parser) callonUniqProc7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc7()
}

func (c *current) onPutProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Put", "args": args}, nil

}

func (p *parser) callonPutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutProc1(stack["args"])
}

func (c *current) onRenameProc9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameProc9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc9(stack["cl"])
}

func (c *current) onRenameProc1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Rename", "args": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc1(stack["first"], stack["rest"])
}

func (c *current) onFuseProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Fuse"}, nil

}

func (p *parser) callonFuseProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseProc1()
}

func (c *current) onShapeProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Shape"}, nil

}

func (p *parser) callonShapeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShapeProc1()
}

func (c *current) onJoinProc2(style, leftKey, rightKey, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Join", "style": style, "left_key": leftKey, "right_key": rightKey, "args": nil}
	if columns != nil {
		proc["args"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc2(stack["style"], stack["leftKey"], stack["rightKey"], stack["columns"])
}

func (c *current) onJoinProc20(style, key, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Join", "style": style, "left_key": key, "right_key": key, "args": nil}
	if columns != nil {
		proc["args"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc20(stack["style"], stack["key"], stack["columns"])
}

func (c *current) onJoinStyle2() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle2()
}

func (c *current) onJoinStyle6() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonJoinStyle6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle6()
}

func (c *current) onJoinStyle10() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle10()
}

func (c *current) onJoinStyle14() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle14()
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onSampleProc1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": []interface{}{

		map[string]interface{}{"kind": "Summarize",

			"keys": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "shape"},

				"rhs": map[string]interface{}{"kind": "Call", "name": "typeof",

					"args": []interface{}{e}}}},

			"aggs": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "sample"},

				"rhs": map[string]interface{}{"kind": "Agg",

					"name": "any",

					"expr": e,

					"where": nil}}},

			"duration": nil, "limit": 0},

		map[string]interface{}{"kind": "Cut",

			"args": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": nil,

				"rhs": map[string]interface{}{"kind": "ID", "name": "sample"}}}}}}, nil

}

func (p *parser) callonSampleProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleProc1(stack["e"])
}

func (c *current) onSampleExpr2(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonSampleExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr2(stack["lval"])
}

func (c *current) onSampleExpr7() (interface{}, error) {
	return map[string]interface{}{"kind": "Root"}, nil
}

func (p *parser) callonSampleExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr7()
}

func (c *current) onFromProc1(source interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": []interface{}{map[string]interface{}{"kind": "Trunk", "source": source}}}, nil

}

func (p *parser) callonFromProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromProc1(stack["source"])
}

func (c *current) onFileProc1(path, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "File", "path": path, "format": format, "layout": layout}, nil

}

func (p *parser) callonFileProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileProc1(stack["path"], stack["format"], stack["layout"])
}

func (c *current) onPoolProc1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonPoolProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolProc1(stack["body"])
}

func (c *current) onPoolBody1(name, at, over, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pool", "name": name, "at": at, "range": over, "scan_order": order}, nil

}

func (p *parser) callonPoolBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBody1(stack["name"], stack["at"], stack["over"], stack["order"])
}

func (c *current) onHTTPProc1(url, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "HTTP", "url": url, "format": format, "layout": layout}, nil

}

func (p *parser) callonHTTPProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHTTPProc1(stack["url"], stack["format"], stack["layout"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onPath2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonPath2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath2(stack["v"])
}

func (c *current) onPath5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPath5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath5()
}

func (c *current) onPoolAt2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonPoolAt2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolAt2(stack["id"])
}

func (c *current) onPoolAt9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonPoolAt9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolAt9()
}

func (c *current) onKSUID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKSUID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKSUID1()
}

func (c *current) onPoolRange2(lower, upper interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Range", "lower": lower, "upper": upper}, nil

}

func (p *parser) callonPoolRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolRange2(stack["lower"], stack["upper"])
}

func (c *current) onPoolRange14() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonPoolRange14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolRange14()
}

func (c *current) onPoolTo2(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonPoolTo2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolTo2(stack["val"])
}

func (c *current) onPoolTo9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonPoolTo9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolTo9()
}

func (c *current) onPoolName2(name interface{}) (interface{}, error) {
	return name, nil
}

func (p *parser) callonPoolName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName2(stack["name"])
}

func (c *current) onPoolName5(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonPoolName5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName5(stack["id"])
}

func (c *current) onPoolName8(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonPoolName8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName8(stack["s"])
}

func (c *current) onLayoutArg2(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Layout", "keys": keys, "order": order}, nil

}

func (p *parser) callonLayoutArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLayoutArg2(stack["keys"], stack["order"])
}

func (c *current) onLayoutArg11() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonLayoutArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLayoutArg11()
}

func (c *current) onFormatArg2(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonFormatArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArg2(stack["val"])
}

func (c *current) onFormatArg9() (interface{}, error) {
	return "", nil
}

func (p *parser) callonFormatArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArg9()
}

func (c *current) onOrderSuffix2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix2()
}

func (c *current) onOrderSuffix4() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderSuffix4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix4()
}

func (c *current) onOrderSuffix6() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix6()
}

func (c *current) onOrderArg2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg2()
}

func (c *current) onOrderArg8() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderArg8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg8()
}

func (c *current) onOrderArg14() (interface{}, error) {
	return "", nil
}

func (p *parser) callonOrderArg14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg14()
}

func (c *current) onPassProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Pass"}, nil

}

func (p *parser) callonPassProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassProc1()
}

func (c *current) onLvals7(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonLvals7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals7(stack["lval"])
}

func (c *current) onLvals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLvals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals1(stack["first"], stack["rest"])
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr2(condition, thenClause, elseClause interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Conditional", "cond": condition, "then": thenClause, "else": elseClause}, nil

}

func (p *parser) callonConditionalExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr2(stack["condition"], stack["thenClause"], stack["elseClause"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onEqualityCompareExpr7(comp, expr interface{}) (interface{}, error) {
	return []interface{}{comp, expr}, nil
}

func (p *parser) callonEqualityCompareExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr7(stack["comp"], stack["expr"])
}

func (c *current) onEqualityCompareExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonEqualityCompareExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr1(stack["first"], stack["rest"])
}

func (c *current) onEqualityOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator1()
}

func (c *current) onEqualityComparator3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityComparator3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityComparator3()
}

func (c *current) onRelativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonRelativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onRelativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonRelativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onRelativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeOperator1()
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onFuncExpr4(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonFuncExpr4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr4(stack["typ"])
}

func (c *current) onFuncExpr12(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr12(stack["first"], stack["rest"])
}

func (c *current) onFuncExpr19(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr19(stack["first"], stack["rest"])
}

func (c *current) onMatchExpr1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonMatchExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchExpr1(stack["expr"])
}

func (c *current) onSelectExpr1(args, methods interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SelectExpr", "selectors": args, "methods": methods}, nil

}

func (p *parser) callonSelectExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectExpr1(stack["args"], stack["methods"])
}

func (c *current) onMethods2(methods interface{}) (interface{}, error) {
	return methods, nil
}

func (p *parser) callonMethods2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethods2(stack["methods"])
}

func (c *current) onMethods6() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonMethods6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethods6()
}

func (c *current) onMethod1(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonMethod1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethod1(stack["f"])
}

func (c *current) onCast1(typ, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": expr, "type": typ}, nil

}

func (p *parser) callonCast1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCast1(stack["typ"], stack["expr"])
}

func (c *current) onFunction1(fn, args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": fn, "args": args}, nil

}

func (p *parser) callonFunction1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction1(stack["fn"], stack["args"])
}

func (c *current) onOptionalExprs3() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonOptionalExprs3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalExprs3()
}

func (c *current) onExprs7(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonExprs7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs7(stack["e"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr2(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr9(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr9(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr16(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr16(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr23() (interface{}, error) {
	return map[string]interface{}{"kind": "Root"}, nil

}

func (p *parser) callonDerefExpr23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr23()
}

func (c *current) onRootRecord1() (interface{}, error) {
	return map[string]interface{}{"kind": "Root"}, nil
}

func (p *parser) callonRootRecord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRootRecord1()
}

func (c *current) onDotID2(field interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": ".",

		"lhs": map[string]interface{}{"kind": "Root"},

		"rhs": field}, nil

}

func (p *parser) callonDotID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotID2(stack["field"])
}

func (c *current) onDotID7(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": "[",

		"lhs": map[string]interface{}{"kind": "Root"},

		"rhs": expr}, nil

}

func (p *parser) callonDotID7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotID7(stack["expr"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref13(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": nil, "rhs": to}}, nil

}

func (p *parser) callonDeref13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref13(stack["to"])
}

func (c *current) onDeref22(from interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": nil}}, nil

}

func (p *parser) callonDeref22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref22(stack["from"])
}

func (c *current) onDeref31(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref31(stack["expr"])
}

func (c *current) onDeref37(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref37(stack["id"])
}

func (c *current) onPrimary7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary7(stack["expr"])
}

func (c *current) onRecord1(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RecordExpr", "fields": fields}, nil

}

func (p *parser) callonRecord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecord1(stack["fields"])
}

func (c *current) onFields1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFields1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFields1(stack["first"], stack["rest"])
}

func (c *current) onFieldTail1(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonFieldTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldTail1(stack["f"])
}

func (c *current) onField1(name, value interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "value": value}, nil

}

func (p *parser) callonField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField1(stack["name"], stack["value"])
}

func (c *current) onArray1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ArrayExpr", "exprs": exprs}, nil

}

func (p *parser) callonArray1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArray1(stack["exprs"])
}

func (c *current) onSet1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SetExpr", "exprs": exprs}, nil

}

func (p *parser) callonSet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSet1(stack["exprs"])
}

func (c *current) onMap1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "MapExpr", "entries": exprs}, nil

}

func (p *parser) callonMap1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMap1(stack["exprs"])
}

func (c *current) onEntries2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonEntries2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries2(stack["first"], stack["rest"])
}

func (c *current) onEntries9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonEntries9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries9()
}

func (c *current) onEntryTail1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonEntryTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntryTail1(stack["e"])
}

func (c *current) onEntry1(key, value interface{}) (interface{}, error) {
	return map[string]interface{}{"key": key, "value": value}, nil

}

func (p *parser) callonEntry1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntry1(stack["key"], stack["value"])
}

func (c *current) onSQLProc1(selection, from, joins, where, groupby, having, orderby, limit interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "SQLExpr",

		"select": selection,

		"from": from,

		"joins": joins,

		"where": where,

		"group_by": groupby,

		"having": having,

		"order_by": orderby,

		"limit": limit}, nil

}

func (p *parser) callonSQLProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLProc1(stack["selection"], stack["from"], stack["joins"], stack["where"], stack["groupby"], stack["having"], stack["orderby"], stack["limit"])
}

func (c *current) onSQLSelect2() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLSelect2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect2()
}

func (c *current) onSQLSelect7(assignments interface{}) (interface{}, error) {
	return assignments, nil
}

func (p *parser) callonSQLSelect7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect7(stack["assignments"])
}

func (c *current) onSQLAssignment2(rhs, lhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonSQLAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment2(stack["rhs"], stack["lhs"])
}

func (c *current) onSQLAssignment11(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonSQLAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment11(stack["expr"])
}

func (c *current) onSQLAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments7(stack["expr"])
}

func (c *current) onSQLAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSQLFrom2(table, alias interface{}) (interface{}, error) {
	return map[string]interface{}{"table": table, "alias": alias}, nil

}

func (p *parser) callonSQLFrom2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom2(stack["table"], stack["alias"])
}

func (c *current) onSQLFrom11() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLFrom11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom11()
}

func (c *current) onSQLFrom17() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLFrom17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom17()
}

func (c *current) onSQLAlias2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias2(stack["id"])
}

func (c *current) onSQLAlias9(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias9(stack["id"])
}

func (c *current) onSQLAlias14() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLAlias14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias14()
}

func (c *current) onSQLJoins8(join interface{}) (interface{}, error) {
	return join, nil
}

func (p *parser) callonSQLJoins8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins8(stack["join"])
}

func (c *current) onSQLJoins2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLJoins2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins2(stack["first"], stack["rest"])
}

func (c *current) onSQLJoins11() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLJoins11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins11()
}

func (c *current) onSQLJoin1(style, table, alias, leftKey, rightKey interface{}) (interface{}, error) {
	return map[string]interface{}{

		"table": table,

		"style": style,

		"left_key": leftKey,

		"right_key": rightKey,

		"alias": alias}, nil

}

func (p *parser) callonSQLJoin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoin1(stack["style"], stack["table"], stack["alias"], stack["leftKey"], stack["rightKey"])
}

func (c *current) onSQLJoinStyle2(style interface{}) (interface{}, error) {
	return style, nil
}

func (p *parser) callonSQLJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle2(stack["style"])
}

func (c *current) onSQLJoinStyle10() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonSQLJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle10()
}

func (c *current) onSQLWhere2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLWhere2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLWhere2(stack["expr"])
}

func (c *current) onSQLWhere9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLWhere9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLWhere9()
}

func (c *current) onSQLGroupBy2(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonSQLGroupBy2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLGroupBy2(stack["columns"])
}

func (c *current) onSQLGroupBy11() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLGroupBy11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLGroupBy11()
}

func (c *current) onSQLHaving2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLHaving2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLHaving2(stack["expr"])
}

func (c *current) onSQLHaving9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLHaving9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLHaving9()
}

func (c *current) onSQLOrderBy2(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SQLOrderBy", "keys": keys, "order": order}, nil

}

func (p *parser) callonSQLOrderBy2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrderBy2(stack["keys"], stack["order"])
}

func (c *current) onSQLOrderBy13() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLOrderBy13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrderBy13()
}

func (c *current) onSQLOrder2(dir interface{}) (interface{}, error) {
	return dir, nil
}

func (p *parser) callonSQLOrder2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder2(stack["dir"])
}

func (c *current) onSQLOrder9() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonSQLOrder9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder9()
}

func (c *current) onSQLLimit2(count interface{}) (interface{}, error) {
	return count, nil
}

func (p *parser) callonSQLLimit2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit2(stack["count"])
}

func (c *current) onSQLLimit9() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonSQLLimit9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit9()
}

func (c *current) onSELECT1() (interface{}, error) {
	return "select", nil
}

func (p *parser) callonSELECT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSELECT1()
}

func (c *current) onAS1() (interface{}, error) {
	return "as", nil
}

func (p *parser) callonAS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAS1()
}

func (c *current) onFROM1() (interface{}, error) {
	return "from", nil
}

func (p *parser) callonFROM1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFROM1()
}

func (c *current) onJOIN1() (interface{}, error) {
	return "join", nil
}

func (p *parser) callonJOIN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJOIN1()
}

func (c *current) onWHERE1() (interface{}, error) {
	return "where", nil
}

func (p *parser) callonWHERE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWHERE1()
}

func (c *current) onGROUP1() (interface{}, error) {
	return "group", nil
}

func (p *parser) callonGROUP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGROUP1()
}

func (c *current) onHAVING1() (interface{}, error) {
	return "having", nil
}

func (p *parser) callonHAVING1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHAVING1()
}

func (c *current) onORDER1() (interface{}, error) {
	return "order", nil
}

func (p *parser) callonORDER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onORDER1()
}

func (c *current) onON1() (interface{}, error) {
	return "on", nil
}

func (p *parser) callonON1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onON1()
}

func (c *current) onLIMIT1() (interface{}, error) {
	return "limit", nil
}

func (p *parser) callonLIMIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIMIT1()
}

func (c *current) onASC1() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonASC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onASC1()
}

func (c *current) onDESC1() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonDESC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDESC1()
}

func (c *current) onLEFT1() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonLEFT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLEFT1()
}

func (c *current) onRIGHT1() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonRIGHT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRIGHT1()
}

func (c *current) onINNER1() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonINNER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINNER1()
}

func (c *current) onStringLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonStringLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringLiteral1(stack["v"])
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "float64", "text": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "int64", "text": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "null", "text": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onTypeLiteral1(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonTypeLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeLiteral1(stack["typ"])
}

func (c *current) onTypeExternal4(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeExternal4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeExternal4(stack["typ"])
}

func (c *current) onExplicitType2(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonExplicitType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplicitType2(stack["typ"])
}

func (c *current) onExplicitType12(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonExplicitType12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplicitType12(stack["typ"])
}

func (c *current) onAmbiguousType2(name interface{}) (interface{}, error) {
	return name, nil
}

func (p *parser) callonAmbiguousType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType2(stack["name"])
}

func (c *current) onAmbiguousType8(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeDef", "name": name, "type": typ}, nil

}

func (p *parser) callonAmbiguousType8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType8(stack["name"], stack["typ"])
}

func (c *current) onAmbiguousType21(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType21(stack["name"])
}

func (c *current) onAmbiguousType24(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonAmbiguousType24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType24(stack["u"])
}

func (c *current) onTypeUnion1(types interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeUnion", "types": types}, nil

}

func (p *parser) callonTypeUnion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeUnion1(stack["types"])
}

func (c *current) onTypeList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeList1(stack["first"], stack["rest"])
}

func (c *current) onTypeListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeListTail1(stack["typ"])
}

func (c *current) onComplexType2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType2(stack["fields"])
}

func (c *current) onComplexType10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexType10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType10(stack["typ"])
}

func (c *current) onComplexType18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexType18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType18(stack["typ"])
}

func (c *current) onComplexType26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexType26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType26(stack["keyType"], stack["valType"])
}

func (c *current) onComplexTypeExternal2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexTypeExternal2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexTypeExternal2(stack["fields"])
}

func (c *current) onComplexTypeExternal10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexTypeExternal10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexTypeExternal10(stack["typ"])
}

func (c *current) onComplexTypeExternal18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexTypeExternal18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexTypeExternal18(stack["typ"])
}

func (c *current) onComplexTypeExternal26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexTypeExternal26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexTypeExternal26(stack["keyType"], stack["valType"])
}

func (c *current) onPrimitiveTypeExternal1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveTypeExternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveTypeExternal1()
}

func (c *current) onPrimitiveTypeInternal1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveTypeInternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveTypeInternal1()
}

func (c *current) onTypeFieldList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList1(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTail1(stack["typ"])
}

func (c *current) onTypeField1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeField1(stack["name"], stack["typ"])
}

func (c *current) onTypeFieldListExternal1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldListExternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListExternal1(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldListTailExternal1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTailExternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTailExternal1(stack["typ"])
}

func (c *current) onTypeFieldExternal1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeFieldExternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldExternal1(stack["name"], stack["typ"])
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return "in", nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onIdentifierName19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName19()
}

func (c *current) onIdentifierName21(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName21(stack["id"])
}

func (c *current) onTime1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "time", "text": string(c.text)}, nil

}

func (p *parser) callonTime1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTime1()
}

func (c *current) onDuration1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "duration", "text": string(c.text)}, nil

}

func (p *parser) callonDuration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDuration1()
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordChars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordChars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordChars1()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onGlob1(head, tail interface{}) (interface{}, error) {
	return reglob.Reglob(head.(string) + joinChars(tail)), nil

}

func (p *parser) callonGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlob1(stack["head"], stack["tail"])
}

func (c *current) onGlobStart4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonGlobStart4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobStart4()
}

func (c *current) onGlobEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonGlobEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEsc1(stack["s"])
}

func (c *current) onGlobEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonGlobEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape2()
}

func (c *current) onGlobEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonGlobEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape4()
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onEscapeSequence2() (interface{}, error) {
	return "\\" + string(c.text), nil
}

func (p *parser) callonEscapeSequence2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapeSequence2()
}

func (c *current) onSingleCharEscape3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleCharEscape3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape3()
}

func (c *current) onSingleCharEscape6() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape6()
}

func (c *current) onSingleCharEscape8() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape8()
}

func (c *current) onSingleCharEscape10() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape10()
}

func (c *current) onSingleCharEscape12() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape12()
}

func (c *current) onSingleCharEscape14() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape14()
}

func (c *current) onSingleCharEscape16() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape16()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexp1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
