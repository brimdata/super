// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 7, col: 1, offset: 26},
			expr: &choiceExpr{
				pos: position{line: 8, col: 5, offset: 36},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 8, col: 5, offset: 36},
						run: (*parser).callonstart2,
						expr: &seqExpr{
							pos: position{line: 8, col: 5, offset: 36},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 8, col: 5, offset: 36},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 8, col: 8, offset: 39},
									label: "scope",
									expr: &ruleRefExpr{
										pos:  position{line: 8, col: 14, offset: 45},
										name: "Scope",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 8, col: 20, offset: 51},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 8, col: 23, offset: 54},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 9, col: 5, offset: 84},
						run: (*parser).callonstart9,
						expr: &seqExpr{
							pos: position{line: 9, col: 5, offset: 84},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 9, col: 5, offset: 84},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 9, col: 8, offset: 87},
									label: "body",
									expr: &ruleRefExpr{
										pos:  position{line: 9, col: 13, offset: 92},
										name: "Sequential",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 9, col: 24, offset: 103},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 9, col: 27, offset: 106},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Scope",
			pos:  position{line: 13, col: 1, offset: 205},
			expr: &actionExpr{
				pos: position{line: 14, col: 5, offset: 215},
				run: (*parser).callonScope1,
				expr: &seqExpr{
					pos: position{line: 14, col: 5, offset: 215},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 14, col: 5, offset: 215},
							label: "decls",
							expr: &oneOrMoreExpr{
								pos: position{line: 14, col: 11, offset: 221},
								expr: &ruleRefExpr{
									pos:  position{line: 14, col: 11, offset: 221},
									name: "Decl",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 14, col: 17, offset: 227},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 14, col: 22, offset: 232},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "Sequential",
			pos:  position{line: 18, col: 1, offset: 340},
			expr: &actionExpr{
				pos: position{line: 19, col: 5, offset: 355},
				run: (*parser).callonSequential1,
				expr: &seqExpr{
					pos: position{line: 19, col: 5, offset: 355},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 19, col: 5, offset: 355},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 19, col: 11, offset: 361},
								name: "Operation",
							},
						},
						&labeledExpr{
							pos:   position{line: 19, col: 21, offset: 371},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 19, col: 26, offset: 376},
								expr: &ruleRefExpr{
									pos:  position{line: 19, col: 26, offset: 376},
									name: "SequentialTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SequentialTail",
			pos:  position{line: 23, col: 1, offset: 533},
			expr: &actionExpr{
				pos: position{line: 23, col: 18, offset: 550},
				run: (*parser).callonSequentialTail1,
				expr: &seqExpr{
					pos: position{line: 23, col: 18, offset: 550},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 23, col: 18, offset: 550},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 23, col: 21, offset: 553},
							name: "Pipe",
						},
						&ruleRefExpr{
							pos:  position{line: 23, col: 26, offset: 558},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 23, col: 29, offset: 561},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 23, col: 31, offset: 563},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Decl",
			pos:  position{line: 25, col: 1, offset: 592},
			expr: &actionExpr{
				pos: position{line: 26, col: 5, offset: 601},
				run: (*parser).callonDecl1,
				expr: &seqExpr{
					pos: position{line: 26, col: 5, offset: 601},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 26, col: 5, offset: 601},
							label: "v",
							expr: &choiceExpr{
								pos: position{line: 26, col: 8, offset: 604},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 26, col: 8, offset: 604},
										name: "ConstDecl",
									},
									&ruleRefExpr{
										pos:  position{line: 26, col: 20, offset: 616},
										name: "FuncDecl",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 26, col: 30, offset: 626},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "ConstDecl",
			pos:  position{line: 28, col: 1, offset: 647},
			expr: &choiceExpr{
				pos: position{line: 29, col: 5, offset: 661},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 29, col: 5, offset: 661},
						run: (*parser).callonConstDecl2,
						expr: &seqExpr{
							pos: position{line: 29, col: 5, offset: 661},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 29, col: 5, offset: 661},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 29, col: 13, offset: 669},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 29, col: 15, offset: 671},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 29, col: 18, offset: 674},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 29, col: 33, offset: 689},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 29, col: 36, offset: 692},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 29, col: 40, offset: 696},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 29, col: 43, offset: 699},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 29, col: 48, offset: 704},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 32, col: 5, offset: 806},
						run: (*parser).callonConstDecl13,
						expr: &seqExpr{
							pos: position{line: 32, col: 5, offset: 806},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 32, col: 5, offset: 806},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 32, col: 12, offset: 813},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 32, col: 14, offset: 815},
									label: "id",
									expr: &choiceExpr{
										pos: position{line: 32, col: 18, offset: 819},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 32, col: 18, offset: 819},
												name: "IdentifierName",
											},
											&ruleRefExpr{
												pos:  position{line: 32, col: 35, offset: 836},
												name: "QuotedString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 32, col: 49, offset: 850},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 32, col: 52, offset: 853},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 32, col: 56, offset: 857},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 32, col: 59, offset: 860},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 32, col: 63, offset: 864},
										name: "Type",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuncDecl",
			pos:  position{line: 43, col: 1, offset: 1122},
			expr: &actionExpr{
				pos: position{line: 44, col: 5, offset: 1135},
				run: (*parser).callonFuncDecl1,
				expr: &seqExpr{
					pos: position{line: 44, col: 5, offset: 1135},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 44, col: 5, offset: 1135},
							val:        "func",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 44, col: 12, offset: 1142},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 44, col: 14, offset: 1144},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 44, col: 17, offset: 1147},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 44, col: 32, offset: 1162},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 44, col: 35, offset: 1165},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 44, col: 39, offset: 1169},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 44, col: 42, offset: 1172},
							label: "params",
							expr: &ruleRefExpr{
								pos:  position{line: 44, col: 49, offset: 1179},
								name: "IdentifierNames",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 44, col: 65, offset: 1195},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 44, col: 68, offset: 1198},
							val:        ")",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 44, col: 72, offset: 1202},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 44, col: 75, offset: 1205},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 44, col: 79, offset: 1209},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 44, col: 82, offset: 1212},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 44, col: 86, offset: 1216},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 44, col: 89, offset: 1219},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 44, col: 94, offset: 1224},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 44, col: 99, offset: 1229},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 44, col: 102, offset: 1232},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Operation",
			pos:  position{line: 57, col: 1, offset: 1412},
			expr: &choiceExpr{
				pos: position{line: 58, col: 5, offset: 1426},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 58, col: 5, offset: 1426},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 58, col: 5, offset: 1426},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 58, col: 5, offset: 1426},
									val:        "fork",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 58, col: 12, offset: 1433},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 58, col: 15, offset: 1436},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 58, col: 19, offset: 1440},
									label: "ops",
									expr: &oneOrMoreExpr{
										pos: position{line: 58, col: 23, offset: 1444},
										expr: &ruleRefExpr{
											pos:  position{line: 58, col: 23, offset: 1444},
											name: "Leg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 58, col: 28, offset: 1449},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 58, col: 31, offset: 1452},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 61, col: 5, offset: 1541},
						run: (*parser).callonOperation12,
						expr: &seqExpr{
							pos: position{line: 61, col: 5, offset: 1541},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 61, col: 5, offset: 1541},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 61, col: 14, offset: 1550},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 61, col: 16, offset: 1552},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 61, col: 21, offset: 1557},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 61, col: 26, offset: 1562},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 61, col: 28, offset: 1564},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 61, col: 32, offset: 1568},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 61, col: 38, offset: 1574},
										expr: &ruleRefExpr{
											pos:  position{line: 61, col: 38, offset: 1574},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 61, col: 49, offset: 1585},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 61, col: 52, offset: 1588},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 64, col: 5, offset: 1693},
						run: (*parser).callonOperation25,
						expr: &seqExpr{
							pos: position{line: 64, col: 5, offset: 1693},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 64, col: 5, offset: 1693},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 64, col: 14, offset: 1702},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 64, col: 17, offset: 1705},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 64, col: 21, offset: 1709},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 64, col: 27, offset: 1715},
										expr: &ruleRefExpr{
											pos:  position{line: 64, col: 27, offset: 1715},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 64, col: 38, offset: 1726},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 64, col: 41, offset: 1729},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 67, col: 5, offset: 1833},
						run: (*parser).callonOperation35,
						expr: &seqExpr{
							pos: position{line: 67, col: 5, offset: 1833},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 67, col: 5, offset: 1833},
									val:        "from",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 67, col: 12, offset: 1840},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 67, col: 15, offset: 1843},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 67, col: 19, offset: 1847},
									label: "trunks",
									expr: &oneOrMoreExpr{
										pos: position{line: 67, col: 26, offset: 1854},
										expr: &ruleRefExpr{
											pos:  position{line: 67, col: 26, offset: 1854},
											name: "FromLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 67, col: 35, offset: 1863},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 67, col: 38, offset: 1866},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 70, col: 5, offset: 1957},
						run: (*parser).callonOperation45,
						expr: &seqExpr{
							pos: position{line: 70, col: 5, offset: 1957},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 70, col: 5, offset: 1957},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 70, col: 9, offset: 1961},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 70, col: 12, offset: 1964},
									label: "scope",
									expr: &ruleRefExpr{
										pos:  position{line: 70, col: 18, offset: 1970},
										name: "Scope",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 70, col: 24, offset: 1976},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 70, col: 27, offset: 1979},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&labeledExpr{
						pos:   position{line: 71, col: 5, offset: 2009},
						label: "op",
						expr: &ruleRefExpr{
							pos:  position{line: 71, col: 8, offset: 2012},
							name: "Operator",
						},
					},
					&actionExpr{
						pos: position{line: 72, col: 5, offset: 2025},
						run: (*parser).callonOperation55,
						expr: &seqExpr{
							pos: position{line: 72, col: 5, offset: 2025},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 72, col: 5, offset: 2025},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 72, col: 7, offset: 2027},
										name: "OpAssignment",
									},
								},
								&andExpr{
									pos: position{line: 72, col: 20, offset: 2040},
									expr: &ruleRefExpr{
										pos:  position{line: 72, col: 21, offset: 2041},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 73, col: 5, offset: 2071},
						run: (*parser).callonOperation61,
						expr: &seqExpr{
							pos: position{line: 73, col: 5, offset: 2071},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 73, col: 5, offset: 2071},
									expr: &seqExpr{
										pos: position{line: 73, col: 7, offset: 2073},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 73, col: 7, offset: 2073},
												name: "Function",
											},
											&ruleRefExpr{
												pos:  position{line: 73, col: 16, offset: 2082},
												name: "EndOfOp",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 73, col: 25, offset: 2091},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 73, col: 27, offset: 2093},
										name: "Aggregation",
									},
								},
								&andExpr{
									pos: position{line: 73, col: 39, offset: 2105},
									expr: &ruleRefExpr{
										pos:  position{line: 73, col: 40, offset: 2106},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 74, col: 5, offset: 2137},
						run: (*parser).callonOperation71,
						expr: &seqExpr{
							pos: position{line: 74, col: 5, offset: 2137},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 74, col: 5, offset: 2137},
									val:        "search",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 74, col: 14, offset: 2146},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 74, col: 16, offset: 2148},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 74, col: 21, offset: 2153},
										name: "SearchBoolean",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 77, col: 5, offset: 2252},
						run: (*parser).callonOperation77,
						expr: &labeledExpr{
							pos:   position{line: 77, col: 5, offset: 2252},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 77, col: 10, offset: 2257},
								name: "SearchBoolean",
							},
						},
					},
					&actionExpr{
						pos: position{line: 80, col: 5, offset: 2356},
						run: (*parser).callonOperation80,
						expr: &labeledExpr{
							pos:   position{line: 80, col: 5, offset: 2356},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 80, col: 10, offset: 2361},
								name: "Cast",
							},
						},
					},
					&actionExpr{
						pos: position{line: 83, col: 5, offset: 2449},
						run: (*parser).callonOperation83,
						expr: &labeledExpr{
							pos:   position{line: 83, col: 5, offset: 2449},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 83, col: 10, offset: 2454},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "EndOfOp",
			pos:  position{line: 87, col: 1, offset: 2541},
			expr: &seqExpr{
				pos: position{line: 87, col: 11, offset: 2551},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 87, col: 11, offset: 2551},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 87, col: 15, offset: 2555},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 87, col: 15, offset: 2555},
								name: "Pipe",
							},
							&ruleRefExpr{
								pos:  position{line: 87, col: 22, offset: 2562},
								name: "SearchKeywordGuard",
							},
							&litMatcher{
								pos:        position{line: 87, col: 43, offset: 2583},
								val:        "=>",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 87, col: 50, offset: 2590},
								val:        ")",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 87, col: 56, offset: 2596},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "Pipe",
			pos:  position{line: 88, col: 1, offset: 2601},
			expr: &seqExpr{
				pos: position{line: 88, col: 8, offset: 2608},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 88, col: 8, offset: 2608},
						val:        "|",
						ignoreCase: false,
					},
					&notExpr{
						pos: position{line: 88, col: 12, offset: 2612},
						expr: &choiceExpr{
							pos: position{line: 88, col: 14, offset: 2614},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 88, col: 14, offset: 2614},
									val:        "{",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 88, col: 20, offset: 2620},
									val:        "[",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Leg",
			pos:  position{line: 90, col: 1, offset: 2626},
			expr: &actionExpr{
				pos: position{line: 90, col: 7, offset: 2632},
				run: (*parser).callonLeg1,
				expr: &seqExpr{
					pos: position{line: 90, col: 7, offset: 2632},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 90, col: 7, offset: 2632},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 90, col: 10, offset: 2635},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 90, col: 15, offset: 2640},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 90, col: 18, offset: 2643},
							label: "seq",
							expr: &ruleRefExpr{
								pos:  position{line: 90, col: 22, offset: 2647},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchLeg",
			pos:  position{line: 92, col: 1, offset: 2679},
			expr: &actionExpr{
				pos: position{line: 93, col: 5, offset: 2693},
				run: (*parser).callonSwitchLeg1,
				expr: &seqExpr{
					pos: position{line: 93, col: 5, offset: 2693},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 93, col: 5, offset: 2693},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 93, col: 8, offset: 2696},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 93, col: 13, offset: 2701},
								name: "Case",
							},
						},
						&labeledExpr{
							pos:   position{line: 93, col: 18, offset: 2706},
							label: "leg",
							expr: &ruleRefExpr{
								pos:  position{line: 93, col: 22, offset: 2710},
								name: "Leg",
							},
						},
					},
				},
			},
		},
		{
			name: "Case",
			pos:  position{line: 97, col: 1, offset: 2789},
			expr: &choiceExpr{
				pos: position{line: 98, col: 5, offset: 2798},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 98, col: 5, offset: 2798},
						run: (*parser).callonCase2,
						expr: &seqExpr{
							pos: position{line: 98, col: 5, offset: 2798},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 98, col: 5, offset: 2798},
									val:        "case",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 98, col: 12, offset: 2805},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 98, col: 14, offset: 2807},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 98, col: 19, offset: 2812},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 99, col: 5, offset: 2842},
						run: (*parser).callonCase8,
						expr: &litMatcher{
							pos:        position{line: 99, col: 5, offset: 2842},
							val:        "default",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromLeg",
			pos:  position{line: 101, col: 1, offset: 2873},
			expr: &actionExpr{
				pos: position{line: 102, col: 5, offset: 2885},
				run: (*parser).callonFromLeg1,
				expr: &seqExpr{
					pos: position{line: 102, col: 5, offset: 2885},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 102, col: 5, offset: 2885},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 102, col: 8, offset: 2888},
							label: "source",
							expr: &ruleRefExpr{
								pos:  position{line: 102, col: 15, offset: 2895},
								name: "FromSource",
							},
						},
						&labeledExpr{
							pos:   position{line: 102, col: 26, offset: 2906},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 102, col: 30, offset: 2910},
								expr: &seqExpr{
									pos: position{line: 102, col: 31, offset: 2911},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 102, col: 31, offset: 2911},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 102, col: 34, offset: 2914},
											val:        "=>",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 102, col: 39, offset: 2919},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 102, col: 43, offset: 2923},
											name: "Sequential",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FromSource",
			pos:  position{line: 110, col: 1, offset: 3121},
			expr: &choiceExpr{
				pos: position{line: 111, col: 5, offset: 3136},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 111, col: 5, offset: 3136},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 112, col: 5, offset: 3145},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 113, col: 5, offset: 3153},
						name: "Pool",
					},
					&ruleRefExpr{
						pos:  position{line: 114, col: 5, offset: 3162},
						name: "PassOp",
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 116, col: 1, offset: 3170},
			expr: &seqExpr{
				pos: position{line: 116, col: 13, offset: 3182},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 116, col: 13, offset: 3182},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 116, col: 17, offset: 3186},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 116, col: 18, offset: 3187},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 116, col: 18, offset: 3187},
										expr: &litMatcher{
											pos:        position{line: 116, col: 19, offset: 3188},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 116, col: 24, offset: 3193},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 116, col: 38, offset: 3207},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 116, col: 57, offset: 3226},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 116, col: 82, offset: 3251},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 116, col: 88, offset: 3257},
								val:        "(",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 116, col: 94, offset: 3263},
								val:        "[",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 116, col: 100, offset: 3269},
								val:        "~",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 118, col: 1, offset: 3275},
			expr: &actionExpr{
				pos: position{line: 118, col: 14, offset: 3288},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 118, col: 15, offset: 3289},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 118, col: 15, offset: 3289},
							val:        "==",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 118, col: 22, offset: 3296},
							val:        "!=",
							ignoreCase: false,
						},
						&seqExpr{
							pos: position{line: 118, col: 30, offset: 3304},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 118, col: 30, offset: 3304},
									val:        "in",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 118, col: 35, offset: 3309},
									expr: &ruleRefExpr{
										pos:  position{line: 118, col: 36, offset: 3310},
										name: "IdentifierRest",
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 118, col: 54, offset: 3328},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 118, col: 61, offset: 3335},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 118, col: 67, offset: 3341},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 118, col: 74, offset: 3348},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 120, col: 1, offset: 3385},
			expr: &actionExpr{
				pos: position{line: 121, col: 5, offset: 3403},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 121, col: 5, offset: 3403},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 121, col: 5, offset: 3403},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 121, col: 11, offset: 3409},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 121, col: 21, offset: 3419},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 121, col: 26, offset: 3424},
								expr: &ruleRefExpr{
									pos:  position{line: 121, col: 26, offset: 3424},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 125, col: 1, offset: 3498},
			expr: &actionExpr{
				pos: position{line: 125, col: 16, offset: 3513},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 125, col: 16, offset: 3513},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 125, col: 16, offset: 3513},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 125, col: 18, offset: 3515},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 125, col: 26, offset: 3523},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 125, col: 28, offset: 3525},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 30, offset: 3527},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 127, col: 1, offset: 3577},
			expr: &actionExpr{
				pos: position{line: 128, col: 5, offset: 3591},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 128, col: 5, offset: 3591},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 128, col: 5, offset: 3591},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 128, col: 11, offset: 3597},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 129, col: 5, offset: 3614},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 129, col: 10, offset: 3619},
								expr: &actionExpr{
									pos: position{line: 129, col: 11, offset: 3620},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 129, col: 11, offset: 3620},
										exprs: []interface{}{
											&zeroOrOneExpr{
												pos: position{line: 129, col: 11, offset: 3620},
												expr: &seqExpr{
													pos: position{line: 129, col: 12, offset: 3621},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 129, col: 12, offset: 3621},
															name: "_",
														},
														&ruleRefExpr{
															pos:  position{line: 129, col: 14, offset: 3623},
															name: "AndToken",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 129, col: 25, offset: 3634},
												name: "_",
											},
											&notExpr{
												pos: position{line: 129, col: 27, offset: 3636},
												expr: &choiceExpr{
													pos: position{line: 129, col: 29, offset: 3638},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 129, col: 29, offset: 3638},
															name: "OrToken",
														},
														&ruleRefExpr{
															pos:  position{line: 129, col: 39, offset: 3648},
															name: "SearchKeywordGuard",
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 129, col: 59, offset: 3668},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 129, col: 64, offset: 3673},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchKeywordGuard",
			pos:  position{line: 133, col: 1, offset: 3789},
			expr: &choiceExpr{
				pos: position{line: 134, col: 5, offset: 3812},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 134, col: 5, offset: 3812},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 134, col: 5, offset: 3812},
								name: "FromSource",
							},
							&ruleRefExpr{
								pos:  position{line: 134, col: 16, offset: 3823},
								name: "__",
							},
							&litMatcher{
								pos:        position{line: 134, col: 19, offset: 3826},
								val:        "=>",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 134, col: 24, offset: 3831},
								name: "__",
							},
						},
					},
					&seqExpr{
						pos: position{line: 135, col: 5, offset: 3838},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 135, col: 5, offset: 3838},
								name: "Case",
							},
							&ruleRefExpr{
								pos:  position{line: 135, col: 10, offset: 3843},
								name: "__",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 137, col: 1, offset: 3847},
			expr: &choiceExpr{
				pos: position{line: 138, col: 5, offset: 3864},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 138, col: 5, offset: 3864},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 138, col: 5, offset: 3864},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 138, col: 6, offset: 3865},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 138, col: 6, offset: 3865},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 138, col: 6, offset: 3865},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 138, col: 15, offset: 3874},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 138, col: 19, offset: 3878},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 138, col: 19, offset: 3878},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 138, col: 23, offset: 3882},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 138, col: 27, offset: 3886},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 138, col: 29, offset: 3888},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 141, col: 5, offset: 4000},
						run: (*parser).callonSearchFactor13,
						expr: &seqExpr{
							pos: position{line: 141, col: 5, offset: 4000},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 141, col: 5, offset: 4000},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 141, col: 9, offset: 4004},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 141, col: 12, offset: 4007},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 141, col: 17, offset: 4012},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 141, col: 31, offset: 4026},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 141, col: 34, offset: 4029},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 142, col: 5, offset: 4058},
						name: "SearchExpr",
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 144, col: 1, offset: 4070},
			expr: &choiceExpr{
				pos: position{line: 145, col: 5, offset: 4085},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 145, col: 5, offset: 4085},
						name: "Glob",
					},
					&ruleRefExpr{
						pos:  position{line: 146, col: 5, offset: 4094},
						name: "Regexp",
					},
					&actionExpr{
						pos: position{line: 147, col: 5, offset: 4105},
						run: (*parser).callonSearchExpr4,
						expr: &seqExpr{
							pos: position{line: 147, col: 5, offset: 4105},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 147, col: 5, offset: 4105},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 147, col: 7, offset: 4107},
										name: "SearchValue",
									},
								},
								&choiceExpr{
									pos: position{line: 147, col: 20, offset: 4120},
									alternatives: []interface{}{
										&notExpr{
											pos: position{line: 147, col: 20, offset: 4120},
											expr: &ruleRefExpr{
												pos:  position{line: 147, col: 21, offset: 4121},
												name: "ExprGuard",
											},
										},
										&andExpr{
											pos: position{line: 147, col: 33, offset: 4133},
											expr: &seqExpr{
												pos: position{line: 147, col: 35, offset: 4135},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 147, col: 35, offset: 4135},
														name: "_",
													},
													&ruleRefExpr{
														pos:  position{line: 147, col: 37, offset: 4137},
														name: "Glob",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 150, col: 5, offset: 4249},
						run: (*parser).callonSearchExpr15,
						expr: &seqExpr{
							pos: position{line: 150, col: 5, offset: 4249},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 150, col: 5, offset: 4249},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 150, col: 9, offset: 4253},
									expr: &ruleRefExpr{
										pos:  position{line: 150, col: 10, offset: 4254},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 153, col: 5, offset: 4370},
						name: "SearchPredicate",
					},
				},
			},
		},
		{
			name: "SearchPredicate",
			pos:  position{line: 155, col: 1, offset: 4387},
			expr: &choiceExpr{
				pos: position{line: 156, col: 5, offset: 4407},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 156, col: 5, offset: 4407},
						run: (*parser).callonSearchPredicate2,
						expr: &seqExpr{
							pos: position{line: 156, col: 5, offset: 4407},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 156, col: 5, offset: 4407},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 156, col: 9, offset: 4411},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 156, col: 22, offset: 4424},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 156, col: 25, offset: 4427},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 156, col: 28, offset: 4430},
										name: "Comparator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 156, col: 39, offset: 4441},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 156, col: 42, offset: 4444},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 156, col: 46, offset: 4448},
										name: "AdditiveExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 159, col: 6, offset: 4571},
						run: (*parser).callonSearchPredicate12,
						expr: &seqExpr{
							pos: position{line: 159, col: 6, offset: 4571},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 159, col: 6, offset: 4571},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 159, col: 12, offset: 4577},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 159, col: 21, offset: 4586},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 159, col: 26, offset: 4591},
										expr: &ruleRefExpr{
											pos:  position{line: 159, col: 27, offset: 4592},
											name: "Deref",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 163, col: 1, offset: 4664},
			expr: &choiceExpr{
				pos: position{line: 164, col: 5, offset: 4680},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 164, col: 5, offset: 4680},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 165, col: 5, offset: 4692},
						run: (*parser).callonSearchValue3,
						expr: &seqExpr{
							pos: position{line: 165, col: 5, offset: 4692},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 165, col: 5, offset: 4692},
									expr: &ruleRefExpr{
										pos:  position{line: 165, col: 6, offset: 4693},
										name: "RegexpPattern",
									},
								},
								&labeledExpr{
									pos:   position{line: 165, col: 20, offset: 4707},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 165, col: 22, offset: 4709},
										name: "KeyWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Glob",
			pos:  position{line: 169, col: 1, offset: 4817},
			expr: &actionExpr{
				pos: position{line: 170, col: 5, offset: 4826},
				run: (*parser).callonGlob1,
				expr: &labeledExpr{
					pos:   position{line: 170, col: 5, offset: 4826},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 170, col: 13, offset: 4834},
						name: "GlobPattern",
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 174, col: 1, offset: 4930},
			expr: &actionExpr{
				pos: position{line: 175, col: 5, offset: 4941},
				run: (*parser).callonRegexp1,
				expr: &labeledExpr{
					pos:   position{line: 175, col: 5, offset: 4941},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 175, col: 13, offset: 4949},
						name: "RegexpPattern",
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 181, col: 1, offset: 5075},
			expr: &choiceExpr{
				pos: position{line: 182, col: 5, offset: 5091},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 182, col: 5, offset: 5091},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 182, col: 5, offset: 5091},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 182, col: 5, offset: 5091},
									expr: &ruleRefExpr{
										pos:  position{line: 182, col: 5, offset: 5091},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 182, col: 16, offset: 5102},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 182, col: 21, offset: 5107},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 182, col: 33, offset: 5119},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 182, col: 39, offset: 5125},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 185, col: 5, offset: 5251},
						run: (*parser).callonAggregation10,
						expr: &seqExpr{
							pos: position{line: 185, col: 5, offset: 5251},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 185, col: 5, offset: 5251},
									expr: &ruleRefExpr{
										pos:  position{line: 185, col: 5, offset: 5251},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 185, col: 16, offset: 5262},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 185, col: 21, offset: 5267},
										name: "AggAssignments",
									},
								},
								&labeledExpr{
									pos:   position{line: 185, col: 36, offset: 5282},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 185, col: 41, offset: 5287},
										expr: &seqExpr{
											pos: position{line: 185, col: 42, offset: 5288},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 185, col: 42, offset: 5288},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 185, col: 44, offset: 5290},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 185, col: 58, offset: 5304},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 185, col: 64, offset: 5310},
										name: "LimitArg",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Summarize",
			pos:  position{line: 193, col: 1, offset: 5524},
			expr: &seqExpr{
				pos: position{line: 193, col: 13, offset: 5536},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 193, col: 13, offset: 5536},
						val:        "summarize",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 193, col: 25, offset: 5548},
						name: "_",
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 195, col: 1, offset: 5551},
			expr: &actionExpr{
				pos: position{line: 196, col: 5, offset: 5567},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 196, col: 5, offset: 5567},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 196, col: 5, offset: 5567},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 196, col: 13, offset: 5575},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 196, col: 15, offset: 5577},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 196, col: 23, offset: 5585},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 198, col: 1, offset: 5626},
			expr: &choiceExpr{
				pos: position{line: 199, col: 5, offset: 5639},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 199, col: 5, offset: 5639},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 199, col: 5, offset: 5639},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 199, col: 5, offset: 5639},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 199, col: 7, offset: 5641},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 199, col: 14, offset: 5648},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 199, col: 16, offset: 5650},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 199, col: 25, offset: 5659},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 199, col: 27, offset: 5661},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 199, col: 33, offset: 5667},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 200, col: 5, offset: 5698},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 200, col: 5, offset: 5698},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 205, col: 1, offset: 5958},
			expr: &choiceExpr{
				pos: position{line: 206, col: 5, offset: 5977},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 206, col: 5, offset: 5977},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 207, col: 5, offset: 5992},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 207, col: 5, offset: 5992},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 207, col: 10, offset: 5997},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 209, col: 1, offset: 6089},
			expr: &actionExpr{
				pos: position{line: 210, col: 5, offset: 6109},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 210, col: 5, offset: 6109},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 210, col: 5, offset: 6109},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 210, col: 11, offset: 6115},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 210, col: 26, offset: 6130},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 210, col: 31, offset: 6135},
								expr: &actionExpr{
									pos: position{line: 210, col: 32, offset: 6136},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 210, col: 32, offset: 6136},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 210, col: 32, offset: 6136},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 210, col: 35, offset: 6139},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 210, col: 39, offset: 6143},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 210, col: 42, offset: 6146},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 210, col: 47, offset: 6151},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignment",
			pos:  position{line: 214, col: 1, offset: 6273},
			expr: &choiceExpr{
				pos: position{line: 215, col: 5, offset: 6291},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 215, col: 5, offset: 6291},
						run: (*parser).callonAggAssignment2,
						expr: &seqExpr{
							pos: position{line: 215, col: 5, offset: 6291},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 215, col: 5, offset: 6291},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 215, col: 10, offset: 6296},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 215, col: 15, offset: 6301},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 215, col: 18, offset: 6304},
									val:        ":=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 215, col: 23, offset: 6309},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 215, col: 26, offset: 6312},
									label: "agg",
									expr: &ruleRefExpr{
										pos:  position{line: 215, col: 30, offset: 6316},
										name: "Agg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 218, col: 5, offset: 6420},
						run: (*parser).callonAggAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 218, col: 5, offset: 6420},
							label: "agg",
							expr: &ruleRefExpr{
								pos:  position{line: 218, col: 9, offset: 6424},
								name: "Agg",
							},
						},
					},
				},
			},
		},
		{
			name: "Agg",
			pos:  position{line: 222, col: 1, offset: 6524},
			expr: &actionExpr{
				pos: position{line: 223, col: 5, offset: 6532},
				run: (*parser).callonAgg1,
				expr: &seqExpr{
					pos: position{line: 223, col: 5, offset: 6532},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 223, col: 5, offset: 6532},
							expr: &ruleRefExpr{
								pos:  position{line: 223, col: 6, offset: 6533},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 223, col: 16, offset: 6543},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 223, col: 19, offset: 6546},
								name: "AggName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 223, col: 27, offset: 6554},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 223, col: 30, offset: 6557},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 223, col: 34, offset: 6561},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 223, col: 37, offset: 6564},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 223, col: 42, offset: 6569},
								expr: &choiceExpr{
									pos: position{line: 223, col: 43, offset: 6570},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 223, col: 43, offset: 6570},
											name: "OverExpr",
										},
										&ruleRefExpr{
											pos:  position{line: 223, col: 54, offset: 6581},
											name: "Expr",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 223, col: 62, offset: 6589},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 223, col: 65, offset: 6592},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 223, col: 69, offset: 6596},
							expr: &seqExpr{
								pos: position{line: 223, col: 71, offset: 6598},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 223, col: 71, offset: 6598},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 223, col: 74, offset: 6601},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 223, col: 79, offset: 6606},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 223, col: 85, offset: 6612},
								expr: &ruleRefExpr{
									pos:  position{line: 223, col: 85, offset: 6612},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggName",
			pos:  position{line: 231, col: 1, offset: 6802},
			expr: &choiceExpr{
				pos: position{line: 232, col: 5, offset: 6814},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 232, col: 5, offset: 6814},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 233, col: 5, offset: 6833},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 234, col: 5, offset: 6846},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 236, col: 1, offset: 6855},
			expr: &actionExpr{
				pos: position{line: 236, col: 15, offset: 6869},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 236, col: 15, offset: 6869},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 236, col: 15, offset: 6869},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 236, col: 17, offset: 6871},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 236, col: 25, offset: 6879},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 236, col: 27, offset: 6881},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 236, col: 32, offset: 6886},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignments",
			pos:  position{line: 238, col: 1, offset: 6922},
			expr: &actionExpr{
				pos: position{line: 239, col: 5, offset: 6941},
				run: (*parser).callonAggAssignments1,
				expr: &seqExpr{
					pos: position{line: 239, col: 5, offset: 6941},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 239, col: 5, offset: 6941},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 239, col: 11, offset: 6947},
								name: "AggAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 239, col: 25, offset: 6961},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 239, col: 30, offset: 6966},
								expr: &seqExpr{
									pos: position{line: 239, col: 31, offset: 6967},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 239, col: 31, offset: 6967},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 239, col: 34, offset: 6970},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 239, col: 38, offset: 6974},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 239, col: 41, offset: 6977},
											name: "AggAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 249, col: 1, offset: 7201},
			expr: &choiceExpr{
				pos: position{line: 250, col: 5, offset: 7214},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 250, col: 5, offset: 7214},
						name: "AssertOp",
					},
					&ruleRefExpr{
						pos:  position{line: 251, col: 5, offset: 7227},
						name: "SortOp",
					},
					&ruleRefExpr{
						pos:  position{line: 252, col: 5, offset: 7238},
						name: "TopOp",
					},
					&ruleRefExpr{
						pos:  position{line: 253, col: 5, offset: 7248},
						name: "CutOp",
					},
					&ruleRefExpr{
						pos:  position{line: 254, col: 5, offset: 7258},
						name: "DropOp",
					},
					&ruleRefExpr{
						pos:  position{line: 255, col: 5, offset: 7269},
						name: "HeadOp",
					},
					&ruleRefExpr{
						pos:  position{line: 256, col: 5, offset: 7280},
						name: "TailOp",
					},
					&ruleRefExpr{
						pos:  position{line: 257, col: 5, offset: 7291},
						name: "WhereOp",
					},
					&ruleRefExpr{
						pos:  position{line: 258, col: 5, offset: 7303},
						name: "UniqOp",
					},
					&ruleRefExpr{
						pos:  position{line: 259, col: 5, offset: 7314},
						name: "PutOp",
					},
					&ruleRefExpr{
						pos:  position{line: 260, col: 5, offset: 7324},
						name: "RenameOp",
					},
					&ruleRefExpr{
						pos:  position{line: 261, col: 5, offset: 7337},
						name: "FuseOp",
					},
					&ruleRefExpr{
						pos:  position{line: 262, col: 5, offset: 7348},
						name: "ShapeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 263, col: 5, offset: 7360},
						name: "JoinOp",
					},
					&ruleRefExpr{
						pos:  position{line: 264, col: 5, offset: 7371},
						name: "SampleOp",
					},
					&ruleRefExpr{
						pos:  position{line: 265, col: 5, offset: 7384},
						name: "SQLOp",
					},
					&ruleRefExpr{
						pos:  position{line: 266, col: 5, offset: 7394},
						name: "FromOp",
					},
					&ruleRefExpr{
						pos:  position{line: 267, col: 5, offset: 7405},
						name: "PassOp",
					},
					&ruleRefExpr{
						pos:  position{line: 268, col: 5, offset: 7416},
						name: "ExplodeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 269, col: 5, offset: 7430},
						name: "MergeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 270, col: 5, offset: 7442},
						name: "OverOp",
					},
					&ruleRefExpr{
						pos:  position{line: 271, col: 5, offset: 7453},
						name: "YieldOp",
					},
				},
			},
		},
		{
			name: "AssertOp",
			pos:  position{line: 273, col: 1, offset: 7462},
			expr: &actionExpr{
				pos: position{line: 274, col: 5, offset: 7475},
				run: (*parser).callonAssertOp1,
				expr: &seqExpr{
					pos: position{line: 274, col: 5, offset: 7475},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 274, col: 5, offset: 7475},
							val:        "assert",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 274, col: 14, offset: 7484},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 274, col: 16, offset: 7486},
							label: "expr",
							expr: &actionExpr{
								pos: position{line: 274, col: 22, offset: 7492},
								run: (*parser).callonAssertOp6,
								expr: &labeledExpr{
									pos:   position{line: 274, col: 22, offset: 7492},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 274, col: 24, offset: 7494},
										name: "Expr",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortOp",
			pos:  position{line: 310, col: 1, offset: 8845},
			expr: &actionExpr{
				pos: position{line: 311, col: 5, offset: 8856},
				run: (*parser).callonSortOp1,
				expr: &seqExpr{
					pos: position{line: 311, col: 5, offset: 8856},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 311, col: 5, offset: 8856},
							val:        "sort",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 311, col: 12, offset: 8863},
							expr: &ruleRefExpr{
								pos:  position{line: 311, col: 13, offset: 8864},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 311, col: 18, offset: 8869},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 311, col: 23, offset: 8874},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 311, col: 32, offset: 8883},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 311, col: 37, offset: 8888},
								expr: &actionExpr{
									pos: position{line: 311, col: 38, offset: 8889},
									run: (*parser).callonSortOp10,
									expr: &seqExpr{
										pos: position{line: 311, col: 38, offset: 8889},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 311, col: 38, offset: 8889},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 311, col: 40, offset: 8891},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 311, col: 42, offset: 8893},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 325, col: 1, offset: 9304},
			expr: &actionExpr{
				pos: position{line: 325, col: 12, offset: 9315},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 325, col: 12, offset: 9315},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 325, col: 17, offset: 9320},
						expr: &actionExpr{
							pos: position{line: 325, col: 18, offset: 9321},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 325, col: 18, offset: 9321},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 325, col: 18, offset: 9321},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 325, col: 20, offset: 9323},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 325, col: 22, offset: 9325},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 327, col: 1, offset: 9381},
			expr: &choiceExpr{
				pos: position{line: 328, col: 5, offset: 9393},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 328, col: 5, offset: 9393},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 328, col: 5, offset: 9393},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 329, col: 5, offset: 9468},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 329, col: 5, offset: 9468},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 329, col: 5, offset: 9468},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 329, col: 14, offset: 9477},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 329, col: 16, offset: 9479},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 329, col: 23, offset: 9486},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 329, col: 24, offset: 9487},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 329, col: 24, offset: 9487},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 329, col: 34, offset: 9497},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopOp",
			pos:  position{line: 331, col: 1, offset: 9611},
			expr: &actionExpr{
				pos: position{line: 332, col: 5, offset: 9621},
				run: (*parser).callonTopOp1,
				expr: &seqExpr{
					pos: position{line: 332, col: 5, offset: 9621},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 332, col: 5, offset: 9621},
							val:        "top",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 332, col: 11, offset: 9627},
							expr: &ruleRefExpr{
								pos:  position{line: 332, col: 12, offset: 9628},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 332, col: 17, offset: 9633},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 332, col: 23, offset: 9639},
								expr: &actionExpr{
									pos: position{line: 332, col: 24, offset: 9640},
									run: (*parser).callonTopOp8,
									expr: &seqExpr{
										pos: position{line: 332, col: 24, offset: 9640},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 332, col: 24, offset: 9640},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 332, col: 26, offset: 9642},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 332, col: 28, offset: 9644},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 332, col: 52, offset: 9668},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 332, col: 58, offset: 9674},
								expr: &seqExpr{
									pos: position{line: 332, col: 59, offset: 9675},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 332, col: 59, offset: 9675},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 332, col: 61, offset: 9677},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 332, col: 72, offset: 9688},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 332, col: 79, offset: 9695},
								expr: &actionExpr{
									pos: position{line: 332, col: 80, offset: 9696},
									run: (*parser).callonTopOp20,
									expr: &seqExpr{
										pos: position{line: 332, col: 80, offset: 9696},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 332, col: 80, offset: 9696},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 332, col: 82, offset: 9698},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 332, col: 84, offset: 9700},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutOp",
			pos:  position{line: 346, col: 1, offset: 10035},
			expr: &actionExpr{
				pos: position{line: 347, col: 5, offset: 10045},
				run: (*parser).callonCutOp1,
				expr: &seqExpr{
					pos: position{line: 347, col: 5, offset: 10045},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 347, col: 5, offset: 10045},
							val:        "cut",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 347, col: 11, offset: 10051},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 347, col: 13, offset: 10053},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 347, col: 18, offset: 10058},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropOp",
			pos:  position{line: 351, col: 1, offset: 10153},
			expr: &actionExpr{
				pos: position{line: 352, col: 5, offset: 10164},
				run: (*parser).callonDropOp1,
				expr: &seqExpr{
					pos: position{line: 352, col: 5, offset: 10164},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 352, col: 5, offset: 10164},
							val:        "drop",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 352, col: 12, offset: 10171},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 352, col: 14, offset: 10173},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 352, col: 19, offset: 10178},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadOp",
			pos:  position{line: 356, col: 1, offset: 10269},
			expr: &choiceExpr{
				pos: position{line: 357, col: 5, offset: 10280},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 357, col: 5, offset: 10280},
						run: (*parser).callonHeadOp2,
						expr: &seqExpr{
							pos: position{line: 357, col: 5, offset: 10280},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 357, col: 5, offset: 10280},
									val:        "head",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 357, col: 12, offset: 10287},
									name: "_",
								},
								&notExpr{
									pos: position{line: 357, col: 14, offset: 10289},
									expr: &ruleRefExpr{
										pos:  position{line: 357, col: 15, offset: 10290},
										name: "EndOfOp",
									},
								},
								&labeledExpr{
									pos:   position{line: 357, col: 23, offset: 10298},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 357, col: 29, offset: 10304},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 358, col: 5, offset: 10384},
						run: (*parser).callonHeadOp10,
						expr: &litMatcher{
							pos:        position{line: 358, col: 5, offset: 10384},
							val:        "head",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TailOp",
			pos:  position{line: 360, col: 1, offset: 10531},
			expr: &choiceExpr{
				pos: position{line: 361, col: 5, offset: 10542},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 361, col: 5, offset: 10542},
						run: (*parser).callonTailOp2,
						expr: &seqExpr{
							pos: position{line: 361, col: 5, offset: 10542},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 361, col: 5, offset: 10542},
									val:        "tail",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 361, col: 12, offset: 10549},
									name: "_",
								},
								&notExpr{
									pos: position{line: 361, col: 14, offset: 10551},
									expr: &ruleRefExpr{
										pos:  position{line: 361, col: 15, offset: 10552},
										name: "EndOfOp",
									},
								},
								&labeledExpr{
									pos:   position{line: 361, col: 23, offset: 10560},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 361, col: 29, offset: 10566},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 362, col: 5, offset: 10646},
						run: (*parser).callonTailOp10,
						expr: &litMatcher{
							pos:        position{line: 362, col: 5, offset: 10646},
							val:        "tail",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "WhereOp",
			pos:  position{line: 364, col: 1, offset: 10793},
			expr: &actionExpr{
				pos: position{line: 365, col: 5, offset: 10805},
				run: (*parser).callonWhereOp1,
				expr: &seqExpr{
					pos: position{line: 365, col: 5, offset: 10805},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 365, col: 5, offset: 10805},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 365, col: 13, offset: 10813},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 365, col: 15, offset: 10815},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 365, col: 20, offset: 10820},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "UniqOp",
			pos:  position{line: 369, col: 1, offset: 10906},
			expr: &choiceExpr{
				pos: position{line: 370, col: 5, offset: 10917},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 370, col: 5, offset: 10917},
						run: (*parser).callonUniqOp2,
						expr: &seqExpr{
							pos: position{line: 370, col: 5, offset: 10917},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 370, col: 5, offset: 10917},
									val:        "uniq",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 370, col: 12, offset: 10924},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 370, col: 14, offset: 10926},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 373, col: 5, offset: 11015},
						run: (*parser).callonUniqOp7,
						expr: &litMatcher{
							pos:        position{line: 373, col: 5, offset: 11015},
							val:        "uniq",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PutOp",
			pos:  position{line: 377, col: 1, offset: 11104},
			expr: &actionExpr{
				pos: position{line: 378, col: 5, offset: 11114},
				run: (*parser).callonPutOp1,
				expr: &seqExpr{
					pos: position{line: 378, col: 5, offset: 11114},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 378, col: 5, offset: 11114},
							val:        "put",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 378, col: 11, offset: 11120},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 378, col: 13, offset: 11122},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 378, col: 18, offset: 11127},
								name: "Assignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameOp",
			pos:  position{line: 382, col: 1, offset: 11218},
			expr: &actionExpr{
				pos: position{line: 383, col: 5, offset: 11231},
				run: (*parser).callonRenameOp1,
				expr: &seqExpr{
					pos: position{line: 383, col: 5, offset: 11231},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 383, col: 5, offset: 11231},
							val:        "rename",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 383, col: 14, offset: 11240},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 383, col: 16, offset: 11242},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 383, col: 22, offset: 11248},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 383, col: 33, offset: 11259},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 383, col: 38, offset: 11264},
								expr: &actionExpr{
									pos: position{line: 383, col: 39, offset: 11265},
									run: (*parser).callonRenameOp9,
									expr: &seqExpr{
										pos: position{line: 383, col: 39, offset: 11265},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 383, col: 39, offset: 11265},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 383, col: 42, offset: 11268},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 383, col: 46, offset: 11272},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 383, col: 49, offset: 11275},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 383, col: 52, offset: 11278},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseOp",
			pos:  position{line: 391, col: 1, offset: 11685},
			expr: &actionExpr{
				pos: position{line: 392, col: 5, offset: 11696},
				run: (*parser).callonFuseOp1,
				expr: &seqExpr{
					pos: position{line: 392, col: 5, offset: 11696},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 392, col: 5, offset: 11696},
							val:        "fuse",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 392, col: 12, offset: 11703},
							expr: &seqExpr{
								pos: position{line: 392, col: 14, offset: 11705},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 392, col: 14, offset: 11705},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 392, col: 17, offset: 11708},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 392, col: 22, offset: 11713},
							expr: &ruleRefExpr{
								pos:  position{line: 392, col: 23, offset: 11714},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "ShapeOp",
			pos:  position{line: 396, col: 1, offset: 11785},
			expr: &actionExpr{
				pos: position{line: 397, col: 5, offset: 11797},
				run: (*parser).callonShapeOp1,
				expr: &seqExpr{
					pos: position{line: 397, col: 5, offset: 11797},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 397, col: 5, offset: 11797},
							val:        "shape",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 397, col: 13, offset: 11805},
							expr: &seqExpr{
								pos: position{line: 397, col: 15, offset: 11807},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 397, col: 15, offset: 11807},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 397, col: 18, offset: 11810},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 397, col: 23, offset: 11815},
							expr: &ruleRefExpr{
								pos:  position{line: 397, col: 24, offset: 11816},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "JoinOp",
			pos:  position{line: 401, col: 1, offset: 11888},
			expr: &actionExpr{
				pos: position{line: 402, col: 5, offset: 11899},
				run: (*parser).callonJoinOp1,
				expr: &seqExpr{
					pos: position{line: 402, col: 5, offset: 11899},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 402, col: 5, offset: 11899},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 402, col: 11, offset: 11905},
								name: "JoinStyle",
							},
						},
						&litMatcher{
							pos:        position{line: 402, col: 21, offset: 11915},
							val:        "join",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 402, col: 28, offset: 11922},
							label: "rightInput",
							expr: &ruleRefExpr{
								pos:  position{line: 402, col: 39, offset: 11933},
								name: "JoinRightInput",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 402, col: 54, offset: 11948},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 402, col: 57, offset: 11951},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 402, col: 59, offset: 11953},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 402, col: 63, offset: 11957},
								name: "JoinKey",
							},
						},
						&labeledExpr{
							pos:   position{line: 402, col: 71, offset: 11965},
							label: "optKey",
							expr: &zeroOrOneExpr{
								pos: position{line: 402, col: 78, offset: 11972},
								expr: &seqExpr{
									pos: position{line: 402, col: 79, offset: 11973},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 402, col: 79, offset: 11973},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 402, col: 82, offset: 11976},
											val:        "=",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 402, col: 86, offset: 11980},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 402, col: 89, offset: 11983},
											name: "JoinKey",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 402, col: 99, offset: 11993},
							label: "optArgs",
							expr: &zeroOrOneExpr{
								pos: position{line: 402, col: 107, offset: 12001},
								expr: &seqExpr{
									pos: position{line: 402, col: 108, offset: 12002},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 402, col: 108, offset: 12002},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 402, col: 110, offset: 12004},
											name: "FlexAssignments",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinStyle",
			pos:  position{line: 413, col: 1, offset: 12360},
			expr: &choiceExpr{
				pos: position{line: 414, col: 5, offset: 12374},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 414, col: 5, offset: 12374},
						run: (*parser).callonJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 414, col: 5, offset: 12374},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 414, col: 5, offset: 12374},
									val:        "anti",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 414, col: 12, offset: 12381},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 415, col: 5, offset: 12411},
						run: (*parser).callonJoinStyle6,
						expr: &seqExpr{
							pos: position{line: 415, col: 5, offset: 12411},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 415, col: 5, offset: 12411},
									val:        "inner",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 415, col: 13, offset: 12419},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 416, col: 5, offset: 12449},
						run: (*parser).callonJoinStyle10,
						expr: &seqExpr{
							pos: position{line: 416, col: 5, offset: 12449},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 416, col: 5, offset: 12449},
									val:        "left",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 416, col: 13, offset: 12457},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 417, col: 5, offset: 12486},
						run: (*parser).callonJoinStyle14,
						expr: &seqExpr{
							pos: position{line: 417, col: 5, offset: 12486},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 417, col: 5, offset: 12486},
									val:        "right",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 417, col: 13, offset: 12494},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 418, col: 5, offset: 12524},
						run: (*parser).callonJoinStyle18,
						expr: &litMatcher{
							pos:        position{line: 418, col: 5, offset: 12524},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "JoinRightInput",
			pos:  position{line: 420, col: 1, offset: 12560},
			expr: &choiceExpr{
				pos: position{line: 421, col: 5, offset: 12579},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 421, col: 5, offset: 12579},
						run: (*parser).callonJoinRightInput2,
						expr: &seqExpr{
							pos: position{line: 421, col: 5, offset: 12579},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 421, col: 5, offset: 12579},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 421, col: 8, offset: 12582},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 421, col: 12, offset: 12586},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 421, col: 15, offset: 12589},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 421, col: 17, offset: 12591},
										name: "Sequential",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 421, col: 28, offset: 12602},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 421, col: 31, offset: 12605},
									val:        ")",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 421, col: 35, offset: 12609},
									name: "__",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 422, col: 5, offset: 12634},
						run: (*parser).callonJoinRightInput12,
						expr: &ruleRefExpr{
							pos:  position{line: 422, col: 5, offset: 12634},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 424, col: 1, offset: 12657},
			expr: &choiceExpr{
				pos: position{line: 425, col: 5, offset: 12669},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 425, col: 5, offset: 12669},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 426, col: 5, offset: 12678},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 426, col: 5, offset: 12678},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 426, col: 5, offset: 12678},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 426, col: 9, offset: 12682},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 426, col: 14, offset: 12687},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 426, col: 19, offset: 12692},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SampleOp",
			pos:  position{line: 428, col: 1, offset: 12718},
			expr: &actionExpr{
				pos: position{line: 429, col: 5, offset: 12731},
				run: (*parser).callonSampleOp1,
				expr: &seqExpr{
					pos: position{line: 429, col: 5, offset: 12731},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 429, col: 5, offset: 12731},
							val:        "sample",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 429, col: 14, offset: 12740},
							expr: &ruleRefExpr{
								pos:  position{line: 429, col: 15, offset: 12741},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 429, col: 20, offset: 12746},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 429, col: 22, offset: 12748},
								name: "SampleExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "OpAssignment",
			pos:  position{line: 471, col: 1, offset: 14221},
			expr: &actionExpr{
				pos: position{line: 472, col: 5, offset: 14238},
				run: (*parser).callonOpAssignment1,
				expr: &labeledExpr{
					pos:   position{line: 472, col: 5, offset: 14238},
					label: "a",
					expr: &ruleRefExpr{
						pos:  position{line: 472, col: 7, offset: 14240},
						name: "Assignments",
					},
				},
			},
		},
		{
			name: "SampleExpr",
			pos:  position{line: 476, col: 1, offset: 14340},
			expr: &choiceExpr{
				pos: position{line: 477, col: 5, offset: 14355},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 477, col: 5, offset: 14355},
						run: (*parser).callonSampleExpr2,
						expr: &seqExpr{
							pos: position{line: 477, col: 5, offset: 14355},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 477, col: 5, offset: 14355},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 477, col: 7, offset: 14357},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 477, col: 12, offset: 14362},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 478, col: 5, offset: 14391},
						run: (*parser).callonSampleExpr7,
						expr: &litMatcher{
							pos:        position{line: 478, col: 5, offset: 14391},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromOp",
			pos:  position{line: 480, col: 1, offset: 14462},
			expr: &actionExpr{
				pos: position{line: 481, col: 5, offset: 14473},
				run: (*parser).callonFromOp1,
				expr: &labeledExpr{
					pos:   position{line: 481, col: 5, offset: 14473},
					label: "source",
					expr: &ruleRefExpr{
						pos:  position{line: 481, col: 12, offset: 14480},
						name: "FromAny",
					},
				},
			},
		},
		{
			name: "FromAny",
			pos:  position{line: 485, col: 1, offset: 14636},
			expr: &choiceExpr{
				pos: position{line: 486, col: 5, offset: 14648},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 486, col: 5, offset: 14648},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 487, col: 5, offset: 14657},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 488, col: 5, offset: 14665},
						name: "From",
					},
				},
			},
		},
		{
			name: "File",
			pos:  position{line: 490, col: 1, offset: 14671},
			expr: &actionExpr{
				pos: position{line: 491, col: 5, offset: 14680},
				run: (*parser).callonFile1,
				expr: &seqExpr{
					pos: position{line: 491, col: 5, offset: 14680},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 491, col: 5, offset: 14680},
							val:        "file",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 491, col: 12, offset: 14687},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 491, col: 14, offset: 14689},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 491, col: 19, offset: 14694},
								name: "Path",
							},
						},
						&labeledExpr{
							pos:   position{line: 491, col: 24, offset: 14699},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 491, col: 31, offset: 14706},
								expr: &ruleRefExpr{
									pos:  position{line: 491, col: 31, offset: 14706},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 491, col: 42, offset: 14717},
							label: "sort_key",
							expr: &zeroOrOneExpr{
								pos: position{line: 491, col: 51, offset: 14726},
								expr: &ruleRefExpr{
									pos:  position{line: 491, col: 51, offset: 14726},
									name: "SortKeyArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "From",
			pos:  position{line: 495, col: 1, offset: 14860},
			expr: &actionExpr{
				pos: position{line: 496, col: 5, offset: 14869},
				run: (*parser).callonFrom1,
				expr: &seqExpr{
					pos: position{line: 496, col: 5, offset: 14869},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 496, col: 5, offset: 14869},
							val:        "from",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 496, col: 12, offset: 14876},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 496, col: 14, offset: 14878},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 496, col: 19, offset: 14883},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "Pool",
			pos:  position{line: 498, col: 1, offset: 14914},
			expr: &actionExpr{
				pos: position{line: 499, col: 5, offset: 14923},
				run: (*parser).callonPool1,
				expr: &seqExpr{
					pos: position{line: 499, col: 5, offset: 14923},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 499, col: 5, offset: 14923},
							val:        "pool",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 499, col: 12, offset: 14930},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 499, col: 14, offset: 14932},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 499, col: 19, offset: 14937},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolBody",
			pos:  position{line: 501, col: 1, offset: 14968},
			expr: &actionExpr{
				pos: position{line: 502, col: 5, offset: 14981},
				run: (*parser).callonPoolBody1,
				expr: &seqExpr{
					pos: position{line: 502, col: 5, offset: 14981},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 502, col: 5, offset: 14981},
							label: "spec",
							expr: &ruleRefExpr{
								pos:  position{line: 502, col: 10, offset: 14986},
								name: "PoolSpec",
							},
						},
						&labeledExpr{
							pos:   position{line: 502, col: 19, offset: 14995},
							label: "at",
							expr: &zeroOrOneExpr{
								pos: position{line: 502, col: 22, offset: 14998},
								expr: &ruleRefExpr{
									pos:  position{line: 502, col: 22, offset: 14998},
									name: "PoolAt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Get",
			pos:  position{line: 506, col: 1, offset: 15096},
			expr: &actionExpr{
				pos: position{line: 507, col: 5, offset: 15104},
				run: (*parser).callonGet1,
				expr: &seqExpr{
					pos: position{line: 507, col: 5, offset: 15104},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 507, col: 5, offset: 15104},
							val:        "get",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 507, col: 11, offset: 15110},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 507, col: 13, offset: 15112},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 507, col: 17, offset: 15116},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 507, col: 21, offset: 15120},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 507, col: 28, offset: 15127},
								expr: &ruleRefExpr{
									pos:  position{line: 507, col: 28, offset: 15127},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 507, col: 39, offset: 15138},
							label: "sort_key",
							expr: &zeroOrOneExpr{
								pos: position{line: 507, col: 48, offset: 15147},
								expr: &ruleRefExpr{
									pos:  position{line: 507, col: 48, offset: 15147},
									name: "SortKeyArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 511, col: 1, offset: 15278},
			expr: &actionExpr{
				pos: position{line: 511, col: 7, offset: 15284},
				run: (*parser).callonURL1,
				expr: &seqExpr{
					pos: position{line: 511, col: 7, offset: 15284},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 511, col: 8, offset: 15285},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 511, col: 8, offset: 15285},
									val:        "http:",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 511, col: 18, offset: 15295},
									val:        "https:",
									ignoreCase: false,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 511, col: 28, offset: 15305},
							name: "Path",
						},
					},
				},
			},
		},
		{
			name: "Path",
			pos:  position{line: 513, col: 1, offset: 15342},
			expr: &choiceExpr{
				pos: position{line: 514, col: 5, offset: 15351},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 514, col: 5, offset: 15351},
						run: (*parser).callonPath2,
						expr: &labeledExpr{
							pos:   position{line: 514, col: 5, offset: 15351},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 514, col: 7, offset: 15353},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 515, col: 5, offset: 15388},
						run: (*parser).callonPath5,
						expr: &oneOrMoreExpr{
							pos: position{line: 515, col: 5, offset: 15388},
							expr: &charClassMatcher{
								pos:        position{line: 515, col: 5, offset: 15388},
								val:        "[0-9a-zA-Z!@$%^&*_=<>,./?:[\\]{}~+-]",
								chars:      []rune{'!', '@', '$', '%', '^', '&', '*', '_', '=', '<', '>', ',', '.', '/', '?', ':', '[', ']', '{', '}', '~', '+', '-'},
								ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PoolAt",
			pos:  position{line: 518, col: 1, offset: 15490},
			expr: &actionExpr{
				pos: position{line: 519, col: 5, offset: 15501},
				run: (*parser).callonPoolAt1,
				expr: &seqExpr{
					pos: position{line: 519, col: 5, offset: 15501},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 519, col: 5, offset: 15501},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 519, col: 7, offset: 15503},
							val:        "at",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 519, col: 12, offset: 15508},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 519, col: 14, offset: 15510},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 519, col: 17, offset: 15513},
								name: "KSUID",
							},
						},
					},
				},
			},
		},
		{
			name: "KSUID",
			pos:  position{line: 522, col: 1, offset: 15579},
			expr: &actionExpr{
				pos: position{line: 522, col: 9, offset: 15587},
				run: (*parser).callonKSUID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 522, col: 9, offset: 15587},
					expr: &charClassMatcher{
						pos:        position{line: 522, col: 10, offset: 15588},
						val:        "[0-9a-zA-Z]",
						ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "PoolSpec",
			pos:  position{line: 524, col: 1, offset: 15634},
			expr: &choiceExpr{
				pos: position{line: 525, col: 5, offset: 15647},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 525, col: 5, offset: 15647},
						run: (*parser).callonPoolSpec2,
						expr: &seqExpr{
							pos: position{line: 525, col: 5, offset: 15647},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 525, col: 5, offset: 15647},
									label: "pool",
									expr: &ruleRefExpr{
										pos:  position{line: 525, col: 10, offset: 15652},
										name: "PoolName",
									},
								},
								&labeledExpr{
									pos:   position{line: 525, col: 19, offset: 15661},
									label: "commit",
									expr: &zeroOrOneExpr{
										pos: position{line: 525, col: 26, offset: 15668},
										expr: &ruleRefExpr{
											pos:  position{line: 525, col: 26, offset: 15668},
											name: "PoolCommit",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 525, col: 38, offset: 15680},
									label: "meta",
									expr: &zeroOrOneExpr{
										pos: position{line: 525, col: 43, offset: 15685},
										expr: &ruleRefExpr{
											pos:  position{line: 525, col: 43, offset: 15685},
											name: "PoolMeta",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 525, col: 53, offset: 15695},
									label: "tap",
									expr: &ruleRefExpr{
										pos:  position{line: 525, col: 57, offset: 15699},
										name: "TapArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 528, col: 5, offset: 15816},
						run: (*parser).callonPoolSpec14,
						expr: &labeledExpr{
							pos:   position{line: 528, col: 5, offset: 15816},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 528, col: 10, offset: 15821},
								name: "PoolMeta",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolCommit",
			pos:  position{line: 532, col: 1, offset: 15922},
			expr: &actionExpr{
				pos: position{line: 533, col: 5, offset: 15937},
				run: (*parser).callonPoolCommit1,
				expr: &seqExpr{
					pos: position{line: 533, col: 5, offset: 15937},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 533, col: 5, offset: 15937},
							val:        "@",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 533, col: 9, offset: 15941},
							label: "commit",
							expr: &ruleRefExpr{
								pos:  position{line: 533, col: 16, offset: 15948},
								name: "PoolNameString",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolMeta",
			pos:  position{line: 535, col: 1, offset: 15987},
			expr: &actionExpr{
				pos: position{line: 536, col: 5, offset: 16000},
				run: (*parser).callonPoolMeta1,
				expr: &seqExpr{
					pos: position{line: 536, col: 5, offset: 16000},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 536, col: 5, offset: 16000},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 536, col: 9, offset: 16004},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 536, col: 14, offset: 16009},
								name: "PoolIdentifier",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolName",
			pos:  position{line: 538, col: 1, offset: 16046},
			expr: &choiceExpr{
				pos: position{line: 539, col: 5, offset: 16059},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 539, col: 5, offset: 16059},
						name: "Glob",
					},
					&actionExpr{
						pos: position{line: 540, col: 5, offset: 16068},
						run: (*parser).callonPoolName3,
						expr: &seqExpr{
							pos: position{line: 540, col: 5, offset: 16068},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 540, col: 5, offset: 16068},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 540, col: 9, offset: 16072},
									expr: &ruleRefExpr{
										pos:  position{line: 540, col: 10, offset: 16073},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 541, col: 5, offset: 16158},
						name: "Regexp",
					},
					&actionExpr{
						pos: position{line: 542, col: 5, offset: 16169},
						run: (*parser).callonPoolName9,
						expr: &labeledExpr{
							pos:   position{line: 542, col: 5, offset: 16169},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 542, col: 10, offset: 16174},
								name: "PoolNameString",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolNameString",
			pos:  position{line: 544, col: 1, offset: 16261},
			expr: &choiceExpr{
				pos: position{line: 545, col: 5, offset: 16280},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 545, col: 5, offset: 16280},
						name: "PoolIdentifier",
					},
					&ruleRefExpr{
						pos:  position{line: 546, col: 5, offset: 16299},
						name: "KSUID",
					},
					&ruleRefExpr{
						pos:  position{line: 547, col: 5, offset: 16309},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "PoolIdentifier",
			pos:  position{line: 549, col: 1, offset: 16323},
			expr: &actionExpr{
				pos: position{line: 550, col: 5, offset: 16342},
				run: (*parser).callonPoolIdentifier1,
				expr: &seqExpr{
					pos: position{line: 550, col: 5, offset: 16342},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 550, col: 6, offset: 16343},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 550, col: 6, offset: 16343},
									name: "IdentifierStart",
								},
								&litMatcher{
									pos:        position{line: 550, col: 24, offset: 16361},
									val:        ".",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 550, col: 29, offset: 16366},
							expr: &choiceExpr{
								pos: position{line: 550, col: 30, offset: 16367},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 550, col: 30, offset: 16367},
										name: "IdentifierRest",
									},
									&litMatcher{
										pos:        position{line: 550, col: 47, offset: 16384},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortKeyArg",
			pos:  position{line: 552, col: 1, offset: 16423},
			expr: &actionExpr{
				pos: position{line: 553, col: 5, offset: 16438},
				run: (*parser).callonSortKeyArg1,
				expr: &seqExpr{
					pos: position{line: 553, col: 5, offset: 16438},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 553, col: 5, offset: 16438},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 553, col: 7, offset: 16440},
							val:        "order",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 553, col: 15, offset: 16448},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 553, col: 17, offset: 16450},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 553, col: 22, offset: 16455},
								name: "FieldExprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 553, col: 33, offset: 16466},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 553, col: 39, offset: 16472},
								name: "OrderSuffix",
							},
						},
					},
				},
			},
		},
		{
			name: "TapArg",
			pos:  position{line: 557, col: 1, offset: 16583},
			expr: &choiceExpr{
				pos: position{line: 558, col: 5, offset: 16594},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 558, col: 5, offset: 16594},
						run: (*parser).callonTapArg2,
						expr: &seqExpr{
							pos: position{line: 558, col: 5, offset: 16594},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 558, col: 5, offset: 16594},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 558, col: 7, offset: 16596},
									val:        "tap",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 559, col: 5, offset: 16627},
						run: (*parser).callonTapArg6,
						expr: &litMatcher{
							pos:        position{line: 559, col: 5, offset: 16627},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FormatArg",
			pos:  position{line: 561, col: 1, offset: 16653},
			expr: &actionExpr{
				pos: position{line: 562, col: 5, offset: 16667},
				run: (*parser).callonFormatArg1,
				expr: &seqExpr{
					pos: position{line: 562, col: 5, offset: 16667},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 562, col: 5, offset: 16667},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 562, col: 7, offset: 16669},
							val:        "format",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 562, col: 16, offset: 16678},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 562, col: 18, offset: 16680},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 562, col: 22, offset: 16684},
								name: "IdentifierName",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderSuffix",
			pos:  position{line: 564, col: 1, offset: 16720},
			expr: &choiceExpr{
				pos: position{line: 565, col: 5, offset: 16736},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 565, col: 5, offset: 16736},
						run: (*parser).callonOrderSuffix2,
						expr: &litMatcher{
							pos:        position{line: 565, col: 5, offset: 16736},
							val:        ":asc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 566, col: 5, offset: 16770},
						run: (*parser).callonOrderSuffix4,
						expr: &litMatcher{
							pos:        position{line: 566, col: 5, offset: 16770},
							val:        ":desc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 567, col: 5, offset: 16806},
						run: (*parser).callonOrderSuffix6,
						expr: &litMatcher{
							pos:        position{line: 567, col: 5, offset: 16806},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PassOp",
			pos:  position{line: 569, col: 1, offset: 16832},
			expr: &actionExpr{
				pos: position{line: 570, col: 5, offset: 16843},
				run: (*parser).callonPassOp1,
				expr: &seqExpr{
					pos: position{line: 570, col: 5, offset: 16843},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 570, col: 5, offset: 16843},
							val:        "pass",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 570, col: 12, offset: 16850},
							expr: &ruleRefExpr{
								pos:  position{line: 570, col: 13, offset: 16851},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "ExplodeOp",
			pos:  position{line: 576, col: 1, offset: 17043},
			expr: &actionExpr{
				pos: position{line: 577, col: 5, offset: 17057},
				run: (*parser).callonExplodeOp1,
				expr: &seqExpr{
					pos: position{line: 577, col: 5, offset: 17057},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 577, col: 5, offset: 17057},
							val:        "explode",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 577, col: 15, offset: 17067},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 577, col: 17, offset: 17069},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 577, col: 22, offset: 17074},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 577, col: 28, offset: 17080},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 577, col: 32, offset: 17084},
								name: "TypeArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 577, col: 40, offset: 17092},
							label: "as",
							expr: &zeroOrOneExpr{
								pos: position{line: 577, col: 43, offset: 17095},
								expr: &ruleRefExpr{
									pos:  position{line: 577, col: 43, offset: 17095},
									name: "AsArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MergeOp",
			pos:  position{line: 581, col: 1, offset: 17207},
			expr: &actionExpr{
				pos: position{line: 582, col: 5, offset: 17219},
				run: (*parser).callonMergeOp1,
				expr: &seqExpr{
					pos: position{line: 582, col: 5, offset: 17219},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 582, col: 5, offset: 17219},
							val:        "merge",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 582, col: 13, offset: 17227},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 582, col: 15, offset: 17229},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 582, col: 20, offset: 17234},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "OverOp",
			pos:  position{line: 586, col: 1, offset: 17315},
			expr: &actionExpr{
				pos: position{line: 587, col: 5, offset: 17326},
				run: (*parser).callonOverOp1,
				expr: &seqExpr{
					pos: position{line: 587, col: 5, offset: 17326},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 587, col: 5, offset: 17326},
							val:        "over",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 587, col: 12, offset: 17333},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 587, col: 14, offset: 17335},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 587, col: 20, offset: 17341},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 587, col: 26, offset: 17347},
							label: "locals",
							expr: &zeroOrOneExpr{
								pos: position{line: 587, col: 33, offset: 17354},
								expr: &ruleRefExpr{
									pos:  position{line: 587, col: 33, offset: 17354},
									name: "Locals",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 587, col: 41, offset: 17362},
							label: "body",
							expr: &zeroOrOneExpr{
								pos: position{line: 587, col: 46, offset: 17367},
								expr: &ruleRefExpr{
									pos:  position{line: 587, col: 46, offset: 17367},
									name: "Lateral",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Lateral",
			pos:  position{line: 593, col: 1, offset: 17661},
			expr: &choiceExpr{
				pos: position{line: 594, col: 5, offset: 17673},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 594, col: 5, offset: 17673},
						run: (*parser).callonLateral2,
						expr: &seqExpr{
							pos: position{line: 594, col: 5, offset: 17673},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 594, col: 5, offset: 17673},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 594, col: 8, offset: 17676},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 594, col: 13, offset: 17681},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 594, col: 16, offset: 17684},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 594, col: 20, offset: 17688},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 594, col: 23, offset: 17691},
									label: "scope",
									expr: &ruleRefExpr{
										pos:  position{line: 594, col: 29, offset: 17697},
										name: "Scope",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 594, col: 35, offset: 17703},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 594, col: 38, offset: 17706},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 595, col: 5, offset: 17736},
						run: (*parser).callonLateral13,
						expr: &seqExpr{
							pos: position{line: 595, col: 5, offset: 17736},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 595, col: 5, offset: 17736},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 595, col: 8, offset: 17739},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 595, col: 13, offset: 17744},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 595, col: 16, offset: 17747},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 595, col: 20, offset: 17751},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 595, col: 23, offset: 17754},
									label: "seq",
									expr: &ruleRefExpr{
										pos:  position{line: 595, col: 27, offset: 17758},
										name: "Sequential",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 595, col: 38, offset: 17769},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 595, col: 41, offset: 17772},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Locals",
			pos:  position{line: 597, col: 1, offset: 17797},
			expr: &actionExpr{
				pos: position{line: 598, col: 5, offset: 17808},
				run: (*parser).callonLocals1,
				expr: &seqExpr{
					pos: position{line: 598, col: 5, offset: 17808},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 598, col: 5, offset: 17808},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 598, col: 7, offset: 17810},
							val:        "with",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 598, col: 14, offset: 17817},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 598, col: 16, offset: 17819},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 598, col: 22, offset: 17825},
								name: "LocalsAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 598, col: 39, offset: 17842},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 598, col: 44, offset: 17847},
								expr: &actionExpr{
									pos: position{line: 598, col: 45, offset: 17848},
									run: (*parser).callonLocals10,
									expr: &seqExpr{
										pos: position{line: 598, col: 45, offset: 17848},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 598, col: 45, offset: 17848},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 598, col: 48, offset: 17851},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 598, col: 52, offset: 17855},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 598, col: 55, offset: 17858},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 598, col: 57, offset: 17860},
													name: "LocalsAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocalsAssignment",
			pos:  position{line: 602, col: 1, offset: 17981},
			expr: &actionExpr{
				pos: position{line: 603, col: 5, offset: 18002},
				run: (*parser).callonLocalsAssignment1,
				expr: &seqExpr{
					pos: position{line: 603, col: 5, offset: 18002},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 603, col: 5, offset: 18002},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 603, col: 10, offset: 18007},
								name: "IdentifierName",
							},
						},
						&labeledExpr{
							pos:   position{line: 603, col: 25, offset: 18022},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 603, col: 29, offset: 18026},
								expr: &seqExpr{
									pos: position{line: 603, col: 30, offset: 18027},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 603, col: 30, offset: 18027},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 603, col: 33, offset: 18030},
											val:        "=",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 603, col: 37, offset: 18034},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 603, col: 40, offset: 18037},
											name: "Expr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "YieldOp",
			pos:  position{line: 611, col: 1, offset: 18258},
			expr: &actionExpr{
				pos: position{line: 612, col: 5, offset: 18270},
				run: (*parser).callonYieldOp1,
				expr: &seqExpr{
					pos: position{line: 612, col: 5, offset: 18270},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 612, col: 5, offset: 18270},
							val:        "yield",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 612, col: 13, offset: 18278},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 612, col: 15, offset: 18280},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 612, col: 21, offset: 18286},
								name: "Exprs",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeArg",
			pos:  position{line: 616, col: 1, offset: 18370},
			expr: &actionExpr{
				pos: position{line: 617, col: 5, offset: 18382},
				run: (*parser).callonTypeArg1,
				expr: &seqExpr{
					pos: position{line: 617, col: 5, offset: 18382},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 617, col: 5, offset: 18382},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 617, col: 7, offset: 18384},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 617, col: 10, offset: 18387},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 617, col: 12, offset: 18389},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 617, col: 16, offset: 18393},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "AsArg",
			pos:  position{line: 619, col: 1, offset: 18418},
			expr: &actionExpr{
				pos: position{line: 620, col: 5, offset: 18428},
				run: (*parser).callonAsArg1,
				expr: &seqExpr{
					pos: position{line: 620, col: 5, offset: 18428},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 620, col: 5, offset: 18428},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 620, col: 7, offset: 18430},
							name: "AS",
						},
						&ruleRefExpr{
							pos:  position{line: 620, col: 10, offset: 18433},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 620, col: 12, offset: 18435},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 620, col: 16, offset: 18439},
								name: "Lval",
							},
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 624, col: 1, offset: 18490},
			expr: &ruleRefExpr{
				pos:  position{line: 624, col: 8, offset: 18497},
				name: "DerefExpr",
			},
		},
		{
			name: "Lvals",
			pos:  position{line: 626, col: 1, offset: 18508},
			expr: &actionExpr{
				pos: position{line: 627, col: 5, offset: 18518},
				run: (*parser).callonLvals1,
				expr: &seqExpr{
					pos: position{line: 627, col: 5, offset: 18518},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 627, col: 5, offset: 18518},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 627, col: 11, offset: 18524},
								name: "Lval",
							},
						},
						&labeledExpr{
							pos:   position{line: 627, col: 16, offset: 18529},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 627, col: 21, offset: 18534},
								expr: &actionExpr{
									pos: position{line: 627, col: 22, offset: 18535},
									run: (*parser).callonLvals7,
									expr: &seqExpr{
										pos: position{line: 627, col: 22, offset: 18535},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 627, col: 22, offset: 18535},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 627, col: 25, offset: 18538},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 627, col: 29, offset: 18542},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 627, col: 32, offset: 18545},
												label: "lval",
												expr: &ruleRefExpr{
													pos:  position{line: 627, col: 37, offset: 18550},
													name: "Lval",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 631, col: 1, offset: 18662},
			expr: &ruleRefExpr{
				pos:  position{line: 631, col: 13, offset: 18674},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 633, col: 1, offset: 18680},
			expr: &actionExpr{
				pos: position{line: 634, col: 5, offset: 18695},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 634, col: 5, offset: 18695},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 634, col: 5, offset: 18695},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 634, col: 11, offset: 18701},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 634, col: 21, offset: 18711},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 634, col: 26, offset: 18716},
								expr: &seqExpr{
									pos: position{line: 634, col: 27, offset: 18717},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 634, col: 27, offset: 18717},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 634, col: 30, offset: 18720},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 634, col: 34, offset: 18724},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 634, col: 37, offset: 18727},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignments",
			pos:  position{line: 644, col: 1, offset: 18926},
			expr: &actionExpr{
				pos: position{line: 645, col: 5, offset: 18942},
				run: (*parser).callonAssignments1,
				expr: &seqExpr{
					pos: position{line: 645, col: 5, offset: 18942},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 645, col: 5, offset: 18942},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 645, col: 11, offset: 18948},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 645, col: 22, offset: 18959},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 645, col: 27, offset: 18964},
								expr: &actionExpr{
									pos: position{line: 645, col: 28, offset: 18965},
									run: (*parser).callonAssignments7,
									expr: &seqExpr{
										pos: position{line: 645, col: 28, offset: 18965},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 645, col: 28, offset: 18965},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 645, col: 31, offset: 18968},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 645, col: 35, offset: 18972},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 645, col: 38, offset: 18975},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 645, col: 40, offset: 18977},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 649, col: 1, offset: 19088},
			expr: &actionExpr{
				pos: position{line: 650, col: 5, offset: 19103},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 650, col: 5, offset: 19103},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 650, col: 5, offset: 19103},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 650, col: 9, offset: 19107},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 650, col: 14, offset: 19112},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 650, col: 17, offset: 19115},
							val:        ":=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 650, col: 22, offset: 19120},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 650, col: 25, offset: 19123},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 650, col: 29, offset: 19127},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 652, col: 1, offset: 19218},
			expr: &ruleRefExpr{
				pos:  position{line: 652, col: 8, offset: 19225},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 654, col: 1, offset: 19242},
			expr: &actionExpr{
				pos: position{line: 655, col: 5, offset: 19262},
				run: (*parser).callonConditionalExpr1,
				expr: &seqExpr{
					pos: position{line: 655, col: 5, offset: 19262},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 655, col: 5, offset: 19262},
							label: "cond",
							expr: &ruleRefExpr{
								pos:  position{line: 655, col: 10, offset: 19267},
								name: "LogicalOrExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 655, col: 24, offset: 19281},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 655, col: 28, offset: 19285},
								expr: &seqExpr{
									pos: position{line: 655, col: 29, offset: 19286},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 655, col: 29, offset: 19286},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 655, col: 32, offset: 19289},
											val:        "?",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 655, col: 36, offset: 19293},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 655, col: 39, offset: 19296},
											name: "Expr",
										},
										&ruleRefExpr{
											pos:  position{line: 655, col: 44, offset: 19301},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 655, col: 47, offset: 19304},
											val:        ":",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 655, col: 51, offset: 19308},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 655, col: 54, offset: 19311},
											name: "Expr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 664, col: 1, offset: 19572},
			expr: &actionExpr{
				pos: position{line: 665, col: 5, offset: 19590},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 665, col: 5, offset: 19590},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 665, col: 5, offset: 19590},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 665, col: 11, offset: 19596},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 666, col: 5, offset: 19615},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 666, col: 10, offset: 19620},
								expr: &actionExpr{
									pos: position{line: 666, col: 11, offset: 19621},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 666, col: 11, offset: 19621},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 666, col: 11, offset: 19621},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 666, col: 14, offset: 19624},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 666, col: 17, offset: 19627},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 666, col: 25, offset: 19635},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 666, col: 28, offset: 19638},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 666, col: 33, offset: 19643},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 670, col: 1, offset: 19761},
			expr: &actionExpr{
				pos: position{line: 671, col: 5, offset: 19780},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 671, col: 5, offset: 19780},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 671, col: 5, offset: 19780},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 671, col: 11, offset: 19786},
								name: "ComparisonExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 672, col: 5, offset: 19805},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 672, col: 10, offset: 19810},
								expr: &actionExpr{
									pos: position{line: 672, col: 11, offset: 19811},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 672, col: 11, offset: 19811},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 672, col: 11, offset: 19811},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 672, col: 14, offset: 19814},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 672, col: 17, offset: 19817},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 672, col: 26, offset: 19826},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 672, col: 29, offset: 19829},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 672, col: 34, offset: 19834},
													name: "ComparisonExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ComparisonExpr",
			pos:  position{line: 676, col: 1, offset: 19952},
			expr: &actionExpr{
				pos: position{line: 677, col: 5, offset: 19971},
				run: (*parser).callonComparisonExpr1,
				expr: &seqExpr{
					pos: position{line: 677, col: 5, offset: 19971},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 677, col: 5, offset: 19971},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 677, col: 9, offset: 19975},
								name: "AdditiveExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 677, col: 22, offset: 19988},
							label: "opAndRHS",
							expr: &zeroOrOneExpr{
								pos: position{line: 677, col: 31, offset: 19997},
								expr: &choiceExpr{
									pos: position{line: 677, col: 32, offset: 19998},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 677, col: 32, offset: 19998},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 677, col: 32, offset: 19998},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 677, col: 35, offset: 20001},
													name: "Comparator",
												},
												&ruleRefExpr{
													pos:  position{line: 677, col: 46, offset: 20012},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 677, col: 49, offset: 20015},
													name: "AdditiveExpr",
												},
											},
										},
										&seqExpr{
											pos: position{line: 677, col: 64, offset: 20030},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 677, col: 64, offset: 20030},
													name: "__",
												},
												&actionExpr{
													pos: position{line: 677, col: 68, offset: 20034},
													run: (*parser).callonComparisonExpr15,
													expr: &litMatcher{
														pos:        position{line: 677, col: 68, offset: 20034},
														val:        "~",
														ignoreCase: false,
													},
												},
												&ruleRefExpr{
													pos:  position{line: 677, col: 104, offset: 20070},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 677, col: 107, offset: 20073},
													name: "Regexp",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 686, col: 1, offset: 20334},
			expr: &actionExpr{
				pos: position{line: 687, col: 5, offset: 20351},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 687, col: 5, offset: 20351},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 687, col: 5, offset: 20351},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 687, col: 11, offset: 20357},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 688, col: 5, offset: 20380},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 688, col: 10, offset: 20385},
								expr: &actionExpr{
									pos: position{line: 688, col: 11, offset: 20386},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 688, col: 11, offset: 20386},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 688, col: 11, offset: 20386},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 688, col: 14, offset: 20389},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 688, col: 17, offset: 20392},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 688, col: 34, offset: 20409},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 688, col: 37, offset: 20412},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 688, col: 42, offset: 20417},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 692, col: 1, offset: 20539},
			expr: &actionExpr{
				pos: position{line: 692, col: 20, offset: 20558},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 692, col: 21, offset: 20559},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 692, col: 21, offset: 20559},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 692, col: 27, offset: 20565},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 694, col: 1, offset: 20602},
			expr: &actionExpr{
				pos: position{line: 695, col: 5, offset: 20625},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 695, col: 5, offset: 20625},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 695, col: 5, offset: 20625},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 695, col: 11, offset: 20631},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 696, col: 5, offset: 20643},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 696, col: 10, offset: 20648},
								expr: &actionExpr{
									pos: position{line: 696, col: 11, offset: 20649},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 696, col: 11, offset: 20649},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 696, col: 11, offset: 20649},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 696, col: 14, offset: 20652},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 696, col: 17, offset: 20655},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 696, col: 40, offset: 20678},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 696, col: 43, offset: 20681},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 696, col: 48, offset: 20686},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 700, col: 1, offset: 20797},
			expr: &actionExpr{
				pos: position{line: 700, col: 26, offset: 20822},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 700, col: 27, offset: 20823},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 700, col: 27, offset: 20823},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 700, col: 33, offset: 20829},
							val:        "/",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 700, col: 39, offset: 20835},
							val:        "%",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 702, col: 1, offset: 20872},
			expr: &choiceExpr{
				pos: position{line: 703, col: 5, offset: 20884},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 703, col: 5, offset: 20884},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 703, col: 5, offset: 20884},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 703, col: 5, offset: 20884},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 703, col: 9, offset: 20888},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 703, col: 12, offset: 20891},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 703, col: 14, offset: 20893},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 706, col: 5, offset: 21002},
						name: "NegationExpr",
					},
				},
			},
		},
		{
			name: "NegationExpr",
			pos:  position{line: 708, col: 1, offset: 21016},
			expr: &choiceExpr{
				pos: position{line: 709, col: 5, offset: 21033},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 709, col: 5, offset: 21033},
						run: (*parser).callonNegationExpr2,
						expr: &seqExpr{
							pos: position{line: 709, col: 5, offset: 21033},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 709, col: 5, offset: 21033},
									expr: &ruleRefExpr{
										pos:  position{line: 709, col: 6, offset: 21034},
										name: "Literal",
									},
								},
								&litMatcher{
									pos:        position{line: 709, col: 14, offset: 21042},
									val:        "-",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 709, col: 18, offset: 21046},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 709, col: 21, offset: 21049},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 709, col: 23, offset: 21051},
										name: "FuncExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 712, col: 5, offset: 21161},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 714, col: 1, offset: 21171},
			expr: &choiceExpr{
				pos: position{line: 715, col: 5, offset: 21184},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 715, col: 5, offset: 21184},
						run: (*parser).callonFuncExpr2,
						expr: &seqExpr{
							pos: position{line: 715, col: 5, offset: 21184},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 715, col: 5, offset: 21184},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 715, col: 11, offset: 21190},
										name: "Cast",
									},
								},
								&labeledExpr{
									pos:   position{line: 715, col: 16, offset: 21195},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 715, col: 21, offset: 21200},
										expr: &ruleRefExpr{
											pos:  position{line: 715, col: 22, offset: 21201},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 718, col: 5, offset: 21272},
						run: (*parser).callonFuncExpr9,
						expr: &seqExpr{
							pos: position{line: 718, col: 5, offset: 21272},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 718, col: 5, offset: 21272},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 718, col: 11, offset: 21278},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 718, col: 20, offset: 21287},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 718, col: 25, offset: 21292},
										expr: &ruleRefExpr{
											pos:  position{line: 718, col: 26, offset: 21293},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 721, col: 5, offset: 21364},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 722, col: 5, offset: 21378},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FuncGuard",
			pos:  position{line: 724, col: 1, offset: 21387},
			expr: &seqExpr{
				pos: position{line: 724, col: 13, offset: 21399},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 724, col: 13, offset: 21399},
						name: "NotFuncs",
					},
					&ruleRefExpr{
						pos:  position{line: 724, col: 22, offset: 21408},
						name: "__",
					},
					&litMatcher{
						pos:        position{line: 724, col: 25, offset: 21411},
						val:        "(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "NotFuncs",
			pos:  position{line: 726, col: 1, offset: 21416},
			expr: &choiceExpr{
				pos: position{line: 727, col: 5, offset: 21429},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 727, col: 5, offset: 21429},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 728, col: 5, offset: 21439},
						val:        "select",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Cast",
			pos:  position{line: 730, col: 1, offset: 21449},
			expr: &actionExpr{
				pos: position{line: 731, col: 5, offset: 21458},
				run: (*parser).callonCast1,
				expr: &seqExpr{
					pos: position{line: 731, col: 5, offset: 21458},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 731, col: 5, offset: 21458},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 731, col: 9, offset: 21462},
								name: "CastType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 731, col: 18, offset: 21471},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 731, col: 21, offset: 21474},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 731, col: 25, offset: 21478},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 731, col: 28, offset: 21481},
							label: "expr",
							expr: &choiceExpr{
								pos: position{line: 731, col: 34, offset: 21487},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 731, col: 34, offset: 21487},
										name: "OverExpr",
									},
									&ruleRefExpr{
										pos:  position{line: 731, col: 45, offset: 21498},
										name: "Expr",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 731, col: 51, offset: 21504},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 731, col: 54, offset: 21507},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 735, col: 1, offset: 21604},
			expr: &choiceExpr{
				pos: position{line: 736, col: 5, offset: 21617},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 736, col: 5, offset: 21617},
						name: "Grep",
					},
					&actionExpr{
						pos: position{line: 738, col: 5, offset: 21704},
						run: (*parser).callonFunction3,
						expr: &seqExpr{
							pos: position{line: 738, col: 5, offset: 21704},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 738, col: 5, offset: 21704},
									val:        "regexp",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 738, col: 14, offset: 21713},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 738, col: 17, offset: 21716},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 738, col: 21, offset: 21720},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 738, col: 24, offset: 21723},
									label: "arg0Text",
									expr: &ruleRefExpr{
										pos:  position{line: 738, col: 33, offset: 21732},
										name: "RegexpPattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 738, col: 47, offset: 21746},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 738, col: 50, offset: 21749},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 738, col: 54, offset: 21753},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 738, col: 57, offset: 21756},
									label: "arg1",
									expr: &ruleRefExpr{
										pos:  position{line: 738, col: 62, offset: 21761},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 738, col: 67, offset: 21766},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 738, col: 70, offset: 21769},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 738, col: 74, offset: 21773},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 738, col: 80, offset: 21779},
										expr: &ruleRefExpr{
											pos:  position{line: 738, col: 80, offset: 21779},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 742, col: 5, offset: 22027},
						run: (*parser).callonFunction21,
						expr: &seqExpr{
							pos: position{line: 742, col: 5, offset: 22027},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 742, col: 5, offset: 22027},
									val:        "regexp_replace",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 742, col: 22, offset: 22044},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 742, col: 25, offset: 22047},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 742, col: 29, offset: 22051},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 742, col: 32, offset: 22054},
									label: "arg0",
									expr: &ruleRefExpr{
										pos:  position{line: 742, col: 37, offset: 22059},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 742, col: 42, offset: 22064},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 742, col: 45, offset: 22067},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 742, col: 49, offset: 22071},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 742, col: 52, offset: 22074},
									label: "arg1Text",
									expr: &ruleRefExpr{
										pos:  position{line: 742, col: 61, offset: 22083},
										name: "RegexpPattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 742, col: 75, offset: 22097},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 742, col: 78, offset: 22100},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 742, col: 82, offset: 22104},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 742, col: 85, offset: 22107},
									label: "arg2",
									expr: &ruleRefExpr{
										pos:  position{line: 742, col: 90, offset: 22112},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 742, col: 95, offset: 22117},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 742, col: 98, offset: 22120},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 742, col: 102, offset: 22124},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 742, col: 108, offset: 22130},
										expr: &ruleRefExpr{
											pos:  position{line: 742, col: 108, offset: 22130},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 746, col: 5, offset: 22392},
						run: (*parser).callonFunction44,
						expr: &seqExpr{
							pos: position{line: 746, col: 5, offset: 22392},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 746, col: 5, offset: 22392},
									expr: &ruleRefExpr{
										pos:  position{line: 746, col: 6, offset: 22393},
										name: "FuncGuard",
									},
								},
								&labeledExpr{
									pos:   position{line: 746, col: 16, offset: 22403},
									label: "fn",
									expr: &ruleRefExpr{
										pos:  position{line: 746, col: 19, offset: 22406},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 746, col: 34, offset: 22421},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 746, col: 37, offset: 22424},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 746, col: 41, offset: 22428},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 746, col: 44, offset: 22431},
									label: "args",
									expr: &ruleRefExpr{
										pos:  position{line: 746, col: 49, offset: 22436},
										name: "FunctionArgs",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 746, col: 62, offset: 22449},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 746, col: 65, offset: 22452},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 746, col: 69, offset: 22456},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 746, col: 75, offset: 22462},
										expr: &ruleRefExpr{
											pos:  position{line: 746, col: 75, offset: 22462},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FunctionArgs",
			pos:  position{line: 750, col: 1, offset: 22583},
			expr: &choiceExpr{
				pos: position{line: 751, col: 5, offset: 22600},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 751, col: 5, offset: 22600},
						run: (*parser).callonFunctionArgs2,
						expr: &labeledExpr{
							pos:   position{line: 751, col: 5, offset: 22600},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 751, col: 7, offset: 22602},
								name: "OverExpr",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 752, col: 5, offset: 22648},
						name: "OptionalExprs",
					},
				},
			},
		},
		{
			name: "Grep",
			pos:  position{line: 754, col: 1, offset: 22663},
			expr: &actionExpr{
				pos: position{line: 755, col: 5, offset: 22672},
				run: (*parser).callonGrep1,
				expr: &seqExpr{
					pos: position{line: 755, col: 5, offset: 22672},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 755, col: 5, offset: 22672},
							val:        "grep",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 755, col: 12, offset: 22679},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 755, col: 15, offset: 22682},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 755, col: 19, offset: 22686},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 755, col: 22, offset: 22689},
							label: "pattern",
							expr: &ruleRefExpr{
								pos:  position{line: 755, col: 30, offset: 22697},
								name: "Pattern",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 755, col: 38, offset: 22705},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 755, col: 42, offset: 22709},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 755, col: 46, offset: 22713},
								expr: &seqExpr{
									pos: position{line: 755, col: 47, offset: 22714},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 755, col: 47, offset: 22714},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 755, col: 51, offset: 22718},
											name: "__",
										},
										&choiceExpr{
											pos: position{line: 755, col: 56, offset: 22723},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 755, col: 56, offset: 22723},
													name: "OverExpr",
												},
												&ruleRefExpr{
													pos:  position{line: 755, col: 67, offset: 22734},
													name: "Expr",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 755, col: 73, offset: 22740},
											name: "__",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 755, col: 78, offset: 22745},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Pattern",
			pos:  position{line: 763, col: 1, offset: 22986},
			expr: &choiceExpr{
				pos: position{line: 764, col: 5, offset: 22998},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 764, col: 5, offset: 22998},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 765, col: 5, offset: 23009},
						name: "Glob",
					},
					&actionExpr{
						pos: position{line: 766, col: 5, offset: 23018},
						run: (*parser).callonPattern4,
						expr: &labeledExpr{
							pos:   position{line: 766, col: 5, offset: 23018},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 766, col: 7, offset: 23020},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "OptionalExprs",
			pos:  position{line: 770, col: 1, offset: 23112},
			expr: &choiceExpr{
				pos: position{line: 771, col: 5, offset: 23130},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 771, col: 5, offset: 23130},
						name: "Exprs",
					},
					&actionExpr{
						pos: position{line: 772, col: 5, offset: 23140},
						run: (*parser).callonOptionalExprs3,
						expr: &ruleRefExpr{
							pos:  position{line: 772, col: 5, offset: 23140},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 774, col: 1, offset: 23176},
			expr: &actionExpr{
				pos: position{line: 775, col: 5, offset: 23186},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 775, col: 5, offset: 23186},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 775, col: 5, offset: 23186},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 775, col: 11, offset: 23192},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 775, col: 16, offset: 23197},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 775, col: 21, offset: 23202},
								expr: &actionExpr{
									pos: position{line: 775, col: 22, offset: 23203},
									run: (*parser).callonExprs7,
									expr: &seqExpr{
										pos: position{line: 775, col: 22, offset: 23203},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 775, col: 22, offset: 23203},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 775, col: 25, offset: 23206},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 775, col: 29, offset: 23210},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 775, col: 32, offset: 23213},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 775, col: 34, offset: 23215},
													name: "Expr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 779, col: 1, offset: 23324},
			expr: &actionExpr{
				pos: position{line: 780, col: 5, offset: 23338},
				run: (*parser).callonDerefExpr1,
				expr: &seqExpr{
					pos: position{line: 780, col: 5, offset: 23338},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 780, col: 5, offset: 23338},
							expr: &ruleRefExpr{
								pos:  position{line: 780, col: 6, offset: 23339},
								name: "IP6",
							},
						},
						&labeledExpr{
							pos:   position{line: 780, col: 10, offset: 23343},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 780, col: 16, offset: 23349},
								name: "Identifier",
							},
						},
						&labeledExpr{
							pos:   position{line: 780, col: 27, offset: 23360},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 780, col: 32, offset: 23365},
								expr: &ruleRefExpr{
									pos:  position{line: 780, col: 33, offset: 23366},
									name: "Deref",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 784, col: 1, offset: 23434},
			expr: &choiceExpr{
				pos: position{line: 785, col: 5, offset: 23444},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 785, col: 5, offset: 23444},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 785, col: 5, offset: 23444},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 785, col: 5, offset: 23444},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 785, col: 9, offset: 23448},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 785, col: 14, offset: 23453},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 785, col: 27, offset: 23466},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 785, col: 30, offset: 23469},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 785, col: 34, offset: 23473},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 785, col: 37, offset: 23476},
									label: "to",
									expr: &zeroOrOneExpr{
										pos: position{line: 785, col: 40, offset: 23479},
										expr: &ruleRefExpr{
											pos:  position{line: 785, col: 40, offset: 23479},
											name: "AdditiveExpr",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 785, col: 54, offset: 23493},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 791, col: 5, offset: 23664},
						run: (*parser).callonDeref14,
						expr: &seqExpr{
							pos: position{line: 791, col: 5, offset: 23664},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 791, col: 5, offset: 23664},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 791, col: 9, offset: 23668},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 791, col: 12, offset: 23671},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 791, col: 16, offset: 23675},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 791, col: 19, offset: 23678},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 791, col: 22, offset: 23681},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 791, col: 35, offset: 23694},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 797, col: 5, offset: 23865},
						run: (*parser).callonDeref23,
						expr: &seqExpr{
							pos: position{line: 797, col: 5, offset: 23865},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 797, col: 5, offset: 23865},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 797, col: 9, offset: 23869},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 797, col: 14, offset: 23874},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 797, col: 19, offset: 23879},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 798, col: 5, offset: 23928},
						run: (*parser).callonDeref29,
						expr: &seqExpr{
							pos: position{line: 798, col: 5, offset: 23928},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 798, col: 5, offset: 23928},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 798, col: 9, offset: 23932},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 798, col: 12, offset: 23935},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 800, col: 1, offset: 23986},
			expr: &choiceExpr{
				pos: position{line: 801, col: 5, offset: 23998},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 801, col: 5, offset: 23998},
						name: "Record",
					},
					&ruleRefExpr{
						pos:  position{line: 802, col: 5, offset: 24009},
						name: "Array",
					},
					&ruleRefExpr{
						pos:  position{line: 803, col: 5, offset: 24019},
						name: "Set",
					},
					&ruleRefExpr{
						pos:  position{line: 804, col: 5, offset: 24027},
						name: "Map",
					},
					&ruleRefExpr{
						pos:  position{line: 805, col: 5, offset: 24035},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 806, col: 5, offset: 24047},
						run: (*parser).callonPrimary7,
						expr: &seqExpr{
							pos: position{line: 806, col: 5, offset: 24047},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 806, col: 5, offset: 24047},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 806, col: 9, offset: 24051},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 806, col: 12, offset: 24054},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 806, col: 17, offset: 24059},
										name: "OverExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 806, col: 26, offset: 24068},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 806, col: 29, offset: 24071},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 807, col: 5, offset: 24101},
						run: (*parser).callonPrimary15,
						expr: &seqExpr{
							pos: position{line: 807, col: 5, offset: 24101},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 807, col: 5, offset: 24101},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 807, col: 9, offset: 24105},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 807, col: 12, offset: 24108},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 807, col: 17, offset: 24113},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 807, col: 22, offset: 24118},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 807, col: 25, offset: 24121},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OverExpr",
			pos:  position{line: 809, col: 1, offset: 24147},
			expr: &actionExpr{
				pos: position{line: 810, col: 5, offset: 24160},
				run: (*parser).callonOverExpr1,
				expr: &seqExpr{
					pos: position{line: 810, col: 5, offset: 24160},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 810, col: 5, offset: 24160},
							val:        "over",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 810, col: 12, offset: 24167},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 810, col: 14, offset: 24169},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 810, col: 20, offset: 24175},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 810, col: 26, offset: 24181},
							label: "locals",
							expr: &zeroOrOneExpr{
								pos: position{line: 810, col: 33, offset: 24188},
								expr: &ruleRefExpr{
									pos:  position{line: 810, col: 33, offset: 24188},
									name: "Locals",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 810, col: 41, offset: 24196},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 810, col: 44, offset: 24199},
							val:        "|",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 810, col: 48, offset: 24203},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 810, col: 51, offset: 24206},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 810, col: 56, offset: 24211},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "Record",
			pos:  position{line: 814, col: 1, offset: 24340},
			expr: &actionExpr{
				pos: position{line: 815, col: 5, offset: 24351},
				run: (*parser).callonRecord1,
				expr: &seqExpr{
					pos: position{line: 815, col: 5, offset: 24351},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 815, col: 5, offset: 24351},
							val:        "{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 815, col: 9, offset: 24355},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 815, col: 12, offset: 24358},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 815, col: 18, offset: 24364},
								name: "RecordElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 815, col: 30, offset: 24376},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 815, col: 33, offset: 24379},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RecordElems",
			pos:  position{line: 819, col: 1, offset: 24469},
			expr: &choiceExpr{
				pos: position{line: 820, col: 5, offset: 24485},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 820, col: 5, offset: 24485},
						run: (*parser).callonRecordElems2,
						expr: &seqExpr{
							pos: position{line: 820, col: 5, offset: 24485},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 820, col: 5, offset: 24485},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 820, col: 11, offset: 24491},
										name: "RecordElem",
									},
								},
								&labeledExpr{
									pos:   position{line: 820, col: 22, offset: 24502},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 820, col: 27, offset: 24507},
										expr: &ruleRefExpr{
											pos:  position{line: 820, col: 27, offset: 24507},
											name: "RecordElemTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 823, col: 5, offset: 24606},
						run: (*parser).callonRecordElems9,
						expr: &ruleRefExpr{
							pos:  position{line: 823, col: 5, offset: 24606},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "RecordElemTail",
			pos:  position{line: 825, col: 1, offset: 24642},
			expr: &actionExpr{
				pos: position{line: 825, col: 18, offset: 24659},
				run: (*parser).callonRecordElemTail1,
				expr: &seqExpr{
					pos: position{line: 825, col: 18, offset: 24659},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 825, col: 18, offset: 24659},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 825, col: 21, offset: 24662},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 825, col: 25, offset: 24666},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 825, col: 28, offset: 24669},
							label: "elem",
							expr: &ruleRefExpr{
								pos:  position{line: 825, col: 33, offset: 24674},
								name: "RecordElem",
							},
						},
					},
				},
			},
		},
		{
			name: "RecordElem",
			pos:  position{line: 827, col: 1, offset: 24707},
			expr: &choiceExpr{
				pos: position{line: 828, col: 5, offset: 24722},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 828, col: 5, offset: 24722},
						name: "Spread",
					},
					&ruleRefExpr{
						pos:  position{line: 829, col: 5, offset: 24733},
						name: "Field",
					},
					&ruleRefExpr{
						pos:  position{line: 830, col: 5, offset: 24743},
						name: "Identifier",
					},
				},
			},
		},
		{
			name: "Spread",
			pos:  position{line: 832, col: 1, offset: 24755},
			expr: &actionExpr{
				pos: position{line: 833, col: 5, offset: 24766},
				run: (*parser).callonSpread1,
				expr: &seqExpr{
					pos: position{line: 833, col: 5, offset: 24766},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 833, col: 5, offset: 24766},
							val:        "...",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 833, col: 11, offset: 24772},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 833, col: 14, offset: 24775},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 833, col: 19, offset: 24780},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 837, col: 1, offset: 24866},
			expr: &actionExpr{
				pos: position{line: 838, col: 5, offset: 24876},
				run: (*parser).callonField1,
				expr: &seqExpr{
					pos: position{line: 838, col: 5, offset: 24876},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 838, col: 5, offset: 24876},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 838, col: 10, offset: 24881},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 838, col: 20, offset: 24891},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 838, col: 23, offset: 24894},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 838, col: 27, offset: 24898},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 838, col: 30, offset: 24901},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 838, col: 36, offset: 24907},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Array",
			pos:  position{line: 842, col: 1, offset: 25007},
			expr: &actionExpr{
				pos: position{line: 843, col: 5, offset: 25017},
				run: (*parser).callonArray1,
				expr: &seqExpr{
					pos: position{line: 843, col: 5, offset: 25017},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 843, col: 5, offset: 25017},
							val:        "[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 843, col: 9, offset: 25021},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 843, col: 12, offset: 25024},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 843, col: 18, offset: 25030},
								name: "VectorElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 843, col: 30, offset: 25042},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 843, col: 33, offset: 25045},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Set",
			pos:  position{line: 847, col: 1, offset: 25135},
			expr: &actionExpr{
				pos: position{line: 848, col: 5, offset: 25143},
				run: (*parser).callonSet1,
				expr: &seqExpr{
					pos: position{line: 848, col: 5, offset: 25143},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 848, col: 5, offset: 25143},
							val:        "|[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 848, col: 10, offset: 25148},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 848, col: 13, offset: 25151},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 848, col: 19, offset: 25157},
								name: "VectorElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 848, col: 31, offset: 25169},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 848, col: 34, offset: 25172},
							val:        "]|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "VectorElems",
			pos:  position{line: 852, col: 1, offset: 25261},
			expr: &choiceExpr{
				pos: position{line: 853, col: 5, offset: 25277},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 853, col: 5, offset: 25277},
						run: (*parser).callonVectorElems2,
						expr: &seqExpr{
							pos: position{line: 853, col: 5, offset: 25277},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 853, col: 5, offset: 25277},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 853, col: 11, offset: 25283},
										name: "VectorElem",
									},
								},
								&labeledExpr{
									pos:   position{line: 853, col: 22, offset: 25294},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 853, col: 27, offset: 25299},
										expr: &actionExpr{
											pos: position{line: 853, col: 28, offset: 25300},
											run: (*parser).callonVectorElems8,
											expr: &seqExpr{
												pos: position{line: 853, col: 28, offset: 25300},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 853, col: 28, offset: 25300},
														name: "__",
													},
													&litMatcher{
														pos:        position{line: 853, col: 31, offset: 25303},
														val:        ",",
														ignoreCase: false,
													},
													&ruleRefExpr{
														pos:  position{line: 853, col: 35, offset: 25307},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 853, col: 38, offset: 25310},
														label: "e",
														expr: &ruleRefExpr{
															pos:  position{line: 853, col: 40, offset: 25312},
															name: "VectorElem",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 856, col: 5, offset: 25430},
						run: (*parser).callonVectorElems15,
						expr: &ruleRefExpr{
							pos:  position{line: 856, col: 5, offset: 25430},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "VectorElem",
			pos:  position{line: 858, col: 1, offset: 25466},
			expr: &choiceExpr{
				pos: position{line: 859, col: 5, offset: 25481},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 859, col: 5, offset: 25481},
						name: "Spread",
					},
					&actionExpr{
						pos: position{line: 860, col: 5, offset: 25492},
						run: (*parser).callonVectorElem3,
						expr: &labeledExpr{
							pos:   position{line: 860, col: 5, offset: 25492},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 860, col: 7, offset: 25494},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Map",
			pos:  position{line: 862, col: 1, offset: 25570},
			expr: &actionExpr{
				pos: position{line: 863, col: 5, offset: 25578},
				run: (*parser).callonMap1,
				expr: &seqExpr{
					pos: position{line: 863, col: 5, offset: 25578},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 863, col: 5, offset: 25578},
							val:        "|{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 863, col: 10, offset: 25583},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 863, col: 13, offset: 25586},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 863, col: 19, offset: 25592},
								name: "Entries",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 863, col: 27, offset: 25600},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 863, col: 30, offset: 25603},
							val:        "}|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Entries",
			pos:  position{line: 867, col: 1, offset: 25694},
			expr: &choiceExpr{
				pos: position{line: 868, col: 5, offset: 25706},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 868, col: 5, offset: 25706},
						run: (*parser).callonEntries2,
						expr: &seqExpr{
							pos: position{line: 868, col: 5, offset: 25706},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 868, col: 5, offset: 25706},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 868, col: 11, offset: 25712},
										name: "Entry",
									},
								},
								&labeledExpr{
									pos:   position{line: 868, col: 17, offset: 25718},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 868, col: 22, offset: 25723},
										expr: &ruleRefExpr{
											pos:  position{line: 868, col: 22, offset: 25723},
											name: "EntryTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 871, col: 5, offset: 25817},
						run: (*parser).callonEntries9,
						expr: &ruleRefExpr{
							pos:  position{line: 871, col: 5, offset: 25817},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "EntryTail",
			pos:  position{line: 874, col: 1, offset: 25854},
			expr: &actionExpr{
				pos: position{line: 874, col: 13, offset: 25866},
				run: (*parser).callonEntryTail1,
				expr: &seqExpr{
					pos: position{line: 874, col: 13, offset: 25866},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 874, col: 13, offset: 25866},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 874, col: 16, offset: 25869},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 874, col: 20, offset: 25873},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 874, col: 23, offset: 25876},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 874, col: 25, offset: 25878},
								name: "Entry",
							},
						},
					},
				},
			},
		},
		{
			name: "Entry",
			pos:  position{line: 876, col: 1, offset: 25903},
			expr: &actionExpr{
				pos: position{line: 877, col: 5, offset: 25913},
				run: (*parser).callonEntry1,
				expr: &seqExpr{
					pos: position{line: 877, col: 5, offset: 25913},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 877, col: 5, offset: 25913},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 877, col: 9, offset: 25917},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 877, col: 14, offset: 25922},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 877, col: 17, offset: 25925},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 877, col: 21, offset: 25929},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 877, col: 24, offset: 25932},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 877, col: 30, offset: 25938},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOp",
			pos:  position{line: 883, col: 1, offset: 26045},
			expr: &actionExpr{
				pos: position{line: 884, col: 5, offset: 26055},
				run: (*parser).callonSQLOp1,
				expr: &seqExpr{
					pos: position{line: 884, col: 5, offset: 26055},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 884, col: 5, offset: 26055},
							label: "selection",
							expr: &ruleRefExpr{
								pos:  position{line: 884, col: 15, offset: 26065},
								name: "SQLSelect",
							},
						},
						&labeledExpr{
							pos:   position{line: 885, col: 5, offset: 26079},
							label: "from",
							expr: &zeroOrOneExpr{
								pos: position{line: 885, col: 10, offset: 26084},
								expr: &ruleRefExpr{
									pos:  position{line: 885, col: 10, offset: 26084},
									name: "SQLFrom",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 886, col: 5, offset: 26097},
							label: "joins",
							expr: &zeroOrOneExpr{
								pos: position{line: 886, col: 11, offset: 26103},
								expr: &ruleRefExpr{
									pos:  position{line: 886, col: 11, offset: 26103},
									name: "SQLJoins",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 887, col: 5, offset: 26117},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 887, col: 11, offset: 26123},
								expr: &ruleRefExpr{
									pos:  position{line: 887, col: 11, offset: 26123},
									name: "SQLWhere",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 888, col: 5, offset: 26137},
							label: "groupby",
							expr: &zeroOrOneExpr{
								pos: position{line: 888, col: 13, offset: 26145},
								expr: &ruleRefExpr{
									pos:  position{line: 888, col: 13, offset: 26145},
									name: "SQLGroupBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 889, col: 5, offset: 26161},
							label: "having",
							expr: &zeroOrOneExpr{
								pos: position{line: 889, col: 12, offset: 26168},
								expr: &ruleRefExpr{
									pos:  position{line: 889, col: 12, offset: 26168},
									name: "SQLHaving",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 890, col: 5, offset: 26183},
							label: "orderby",
							expr: &zeroOrOneExpr{
								pos: position{line: 890, col: 13, offset: 26191},
								expr: &ruleRefExpr{
									pos:  position{line: 890, col: 13, offset: 26191},
									name: "SQLOrderBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 891, col: 5, offset: 26207},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 891, col: 11, offset: 26213},
								name: "SQLLimit",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLSelect",
			pos:  position{line: 915, col: 1, offset: 26580},
			expr: &choiceExpr{
				pos: position{line: 916, col: 5, offset: 26594},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 916, col: 5, offset: 26594},
						run: (*parser).callonSQLSelect2,
						expr: &seqExpr{
							pos: position{line: 916, col: 5, offset: 26594},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 916, col: 5, offset: 26594},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 916, col: 12, offset: 26601},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 916, col: 14, offset: 26603},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 917, col: 5, offset: 26631},
						run: (*parser).callonSQLSelect7,
						expr: &seqExpr{
							pos: position{line: 917, col: 5, offset: 26631},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 917, col: 5, offset: 26631},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 917, col: 12, offset: 26638},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 917, col: 14, offset: 26640},
									label: "assignments",
									expr: &ruleRefExpr{
										pos:  position{line: 917, col: 26, offset: 26652},
										name: "SQLAssignments",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignment",
			pos:  position{line: 919, col: 1, offset: 26696},
			expr: &actionExpr{
				pos: position{line: 920, col: 5, offset: 26714},
				run: (*parser).callonSQLAssignment1,
				expr: &seqExpr{
					pos: position{line: 920, col: 5, offset: 26714},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 920, col: 5, offset: 26714},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 920, col: 9, offset: 26718},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 920, col: 14, offset: 26723},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 920, col: 18, offset: 26727},
								expr: &seqExpr{
									pos: position{line: 920, col: 19, offset: 26728},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 920, col: 19, offset: 26728},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 920, col: 21, offset: 26730},
											name: "AS",
										},
										&ruleRefExpr{
											pos:  position{line: 920, col: 24, offset: 26733},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 920, col: 26, offset: 26735},
											name: "Lval",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignments",
			pos:  position{line: 928, col: 1, offset: 26926},
			expr: &actionExpr{
				pos: position{line: 929, col: 5, offset: 26945},
				run: (*parser).callonSQLAssignments1,
				expr: &seqExpr{
					pos: position{line: 929, col: 5, offset: 26945},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 929, col: 5, offset: 26945},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 929, col: 11, offset: 26951},
								name: "SQLAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 929, col: 25, offset: 26965},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 929, col: 30, offset: 26970},
								expr: &actionExpr{
									pos: position{line: 929, col: 31, offset: 26971},
									run: (*parser).callonSQLAssignments7,
									expr: &seqExpr{
										pos: position{line: 929, col: 31, offset: 26971},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 929, col: 31, offset: 26971},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 929, col: 34, offset: 26974},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 929, col: 38, offset: 26978},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 929, col: 41, offset: 26981},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 929, col: 46, offset: 26986},
													name: "SQLAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLFrom",
			pos:  position{line: 933, col: 1, offset: 27107},
			expr: &choiceExpr{
				pos: position{line: 934, col: 5, offset: 27119},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 934, col: 5, offset: 27119},
						run: (*parser).callonSQLFrom2,
						expr: &seqExpr{
							pos: position{line: 934, col: 5, offset: 27119},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 934, col: 5, offset: 27119},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 934, col: 7, offset: 27121},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 934, col: 12, offset: 27126},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 934, col: 14, offset: 27128},
									label: "table",
									expr: &ruleRefExpr{
										pos:  position{line: 934, col: 20, offset: 27134},
										name: "SQLTable",
									},
								},
								&labeledExpr{
									pos:   position{line: 934, col: 29, offset: 27143},
									label: "alias",
									expr: &zeroOrOneExpr{
										pos: position{line: 934, col: 35, offset: 27149},
										expr: &ruleRefExpr{
											pos:  position{line: 934, col: 35, offset: 27149},
											name: "SQLAlias",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 937, col: 5, offset: 27244},
						run: (*parser).callonSQLFrom12,
						expr: &seqExpr{
							pos: position{line: 937, col: 5, offset: 27244},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 937, col: 5, offset: 27244},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 937, col: 7, offset: 27246},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 937, col: 12, offset: 27251},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 937, col: 14, offset: 27253},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAlias",
			pos:  position{line: 939, col: 1, offset: 27278},
			expr: &choiceExpr{
				pos: position{line: 940, col: 5, offset: 27291},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 940, col: 5, offset: 27291},
						run: (*parser).callonSQLAlias2,
						expr: &seqExpr{
							pos: position{line: 940, col: 5, offset: 27291},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 940, col: 5, offset: 27291},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 940, col: 7, offset: 27293},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 940, col: 10, offset: 27296},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 940, col: 12, offset: 27298},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 940, col: 15, offset: 27301},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 941, col: 5, offset: 27329},
						run: (*parser).callonSQLAlias9,
						expr: &seqExpr{
							pos: position{line: 941, col: 5, offset: 27329},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 941, col: 5, offset: 27329},
									name: "_",
								},
								&notExpr{
									pos: position{line: 941, col: 7, offset: 27331},
									expr: &seqExpr{
										pos: position{line: 941, col: 9, offset: 27333},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 941, col: 9, offset: 27333},
												name: "SQLTokenSentinels",
											},
											&ruleRefExpr{
												pos:  position{line: 941, col: 27, offset: 27351},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 941, col: 30, offset: 27354},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 941, col: 33, offset: 27357},
										name: "Lval",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLTable",
			pos:  position{line: 943, col: 1, offset: 27382},
			expr: &ruleRefExpr{
				pos:  position{line: 944, col: 5, offset: 27395},
				name: "Expr",
			},
		},
		{
			name: "SQLJoins",
			pos:  position{line: 946, col: 1, offset: 27401},
			expr: &actionExpr{
				pos: position{line: 947, col: 5, offset: 27414},
				run: (*parser).callonSQLJoins1,
				expr: &seqExpr{
					pos: position{line: 947, col: 5, offset: 27414},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 947, col: 5, offset: 27414},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 947, col: 11, offset: 27420},
								name: "SQLJoin",
							},
						},
						&labeledExpr{
							pos:   position{line: 947, col: 19, offset: 27428},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 947, col: 24, offset: 27433},
								expr: &actionExpr{
									pos: position{line: 947, col: 25, offset: 27434},
									run: (*parser).callonSQLJoins7,
									expr: &labeledExpr{
										pos:   position{line: 947, col: 25, offset: 27434},
										label: "join",
										expr: &ruleRefExpr{
											pos:  position{line: 947, col: 30, offset: 27439},
											name: "SQLJoin",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoin",
			pos:  position{line: 951, col: 1, offset: 27554},
			expr: &actionExpr{
				pos: position{line: 952, col: 5, offset: 27566},
				run: (*parser).callonSQLJoin1,
				expr: &seqExpr{
					pos: position{line: 952, col: 5, offset: 27566},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 952, col: 5, offset: 27566},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 952, col: 11, offset: 27572},
								name: "SQLJoinStyle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 952, col: 24, offset: 27585},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 952, col: 26, offset: 27587},
							name: "JOIN",
						},
						&ruleRefExpr{
							pos:  position{line: 952, col: 31, offset: 27592},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 952, col: 33, offset: 27594},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 952, col: 39, offset: 27600},
								name: "SQLTable",
							},
						},
						&labeledExpr{
							pos:   position{line: 952, col: 48, offset: 27609},
							label: "alias",
							expr: &zeroOrOneExpr{
								pos: position{line: 952, col: 54, offset: 27615},
								expr: &ruleRefExpr{
									pos:  position{line: 952, col: 54, offset: 27615},
									name: "SQLAlias",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 952, col: 64, offset: 27625},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 952, col: 66, offset: 27627},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 952, col: 69, offset: 27630},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 952, col: 71, offset: 27632},
							label: "leftKey",
							expr: &ruleRefExpr{
								pos:  position{line: 952, col: 79, offset: 27640},
								name: "JoinKey",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 952, col: 87, offset: 27648},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 952, col: 90, offset: 27651},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 952, col: 94, offset: 27655},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 952, col: 97, offset: 27658},
							label: "rightKey",
							expr: &ruleRefExpr{
								pos:  position{line: 952, col: 106, offset: 27667},
								name: "JoinKey",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoinStyle",
			pos:  position{line: 967, col: 1, offset: 27898},
			expr: &choiceExpr{
				pos: position{line: 968, col: 5, offset: 27915},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 968, col: 5, offset: 27915},
						run: (*parser).callonSQLJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 968, col: 5, offset: 27915},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 968, col: 5, offset: 27915},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 968, col: 7, offset: 27917},
									label: "style",
									expr: &choiceExpr{
										pos: position{line: 968, col: 14, offset: 27924},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 968, col: 14, offset: 27924},
												name: "ANTI",
											},
											&ruleRefExpr{
												pos:  position{line: 968, col: 21, offset: 27931},
												name: "INNER",
											},
											&ruleRefExpr{
												pos:  position{line: 968, col: 29, offset: 27939},
												name: "LEFT",
											},
											&ruleRefExpr{
												pos:  position{line: 968, col: 36, offset: 27946},
												name: "RIGHT",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 969, col: 5, offset: 27979},
						run: (*parser).callonSQLJoinStyle11,
						expr: &litMatcher{
							pos:        position{line: 969, col: 5, offset: 27979},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLWhere",
			pos:  position{line: 971, col: 1, offset: 28007},
			expr: &actionExpr{
				pos: position{line: 972, col: 5, offset: 28020},
				run: (*parser).callonSQLWhere1,
				expr: &seqExpr{
					pos: position{line: 972, col: 5, offset: 28020},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 972, col: 5, offset: 28020},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 972, col: 7, offset: 28022},
							name: "WHERE",
						},
						&ruleRefExpr{
							pos:  position{line: 972, col: 13, offset: 28028},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 972, col: 15, offset: 28030},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 972, col: 20, offset: 28035},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLGroupBy",
			pos:  position{line: 974, col: 1, offset: 28071},
			expr: &actionExpr{
				pos: position{line: 975, col: 5, offset: 28086},
				run: (*parser).callonSQLGroupBy1,
				expr: &seqExpr{
					pos: position{line: 975, col: 5, offset: 28086},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 975, col: 5, offset: 28086},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 975, col: 7, offset: 28088},
							name: "GROUP",
						},
						&ruleRefExpr{
							pos:  position{line: 975, col: 13, offset: 28094},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 975, col: 15, offset: 28096},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 975, col: 18, offset: 28099},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 975, col: 20, offset: 28101},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 975, col: 28, offset: 28109},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLHaving",
			pos:  position{line: 977, col: 1, offset: 28145},
			expr: &actionExpr{
				pos: position{line: 978, col: 5, offset: 28159},
				run: (*parser).callonSQLHaving1,
				expr: &seqExpr{
					pos: position{line: 978, col: 5, offset: 28159},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 978, col: 5, offset: 28159},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 978, col: 7, offset: 28161},
							name: "HAVING",
						},
						&ruleRefExpr{
							pos:  position{line: 978, col: 14, offset: 28168},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 978, col: 16, offset: 28170},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 978, col: 21, offset: 28175},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrderBy",
			pos:  position{line: 980, col: 1, offset: 28211},
			expr: &actionExpr{
				pos: position{line: 981, col: 5, offset: 28226},
				run: (*parser).callonSQLOrderBy1,
				expr: &seqExpr{
					pos: position{line: 981, col: 5, offset: 28226},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 981, col: 5, offset: 28226},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 981, col: 7, offset: 28228},
							name: "ORDER",
						},
						&ruleRefExpr{
							pos:  position{line: 981, col: 13, offset: 28234},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 981, col: 15, offset: 28236},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 981, col: 18, offset: 28239},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 981, col: 20, offset: 28241},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 981, col: 25, offset: 28246},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 981, col: 31, offset: 28252},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 981, col: 37, offset: 28258},
								name: "SQLOrder",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrder",
			pos:  position{line: 985, col: 1, offset: 28368},
			expr: &choiceExpr{
				pos: position{line: 986, col: 5, offset: 28381},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 986, col: 5, offset: 28381},
						run: (*parser).callonSQLOrder2,
						expr: &seqExpr{
							pos: position{line: 986, col: 5, offset: 28381},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 986, col: 5, offset: 28381},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 986, col: 7, offset: 28383},
									label: "dir",
									expr: &choiceExpr{
										pos: position{line: 986, col: 12, offset: 28388},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 986, col: 12, offset: 28388},
												name: "ASC",
											},
											&ruleRefExpr{
												pos:  position{line: 986, col: 18, offset: 28394},
												name: "DESC",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 987, col: 5, offset: 28424},
						run: (*parser).callonSQLOrder9,
						expr: &litMatcher{
							pos:        position{line: 987, col: 5, offset: 28424},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLLimit",
			pos:  position{line: 989, col: 1, offset: 28450},
			expr: &choiceExpr{
				pos: position{line: 990, col: 5, offset: 28463},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 990, col: 5, offset: 28463},
						run: (*parser).callonSQLLimit2,
						expr: &seqExpr{
							pos: position{line: 990, col: 5, offset: 28463},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 990, col: 5, offset: 28463},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 990, col: 7, offset: 28465},
									name: "LIMIT",
								},
								&ruleRefExpr{
									pos:  position{line: 990, col: 13, offset: 28471},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 990, col: 15, offset: 28473},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 990, col: 21, offset: 28479},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 991, col: 5, offset: 28510},
						run: (*parser).callonSQLLimit9,
						expr: &litMatcher{
							pos:        position{line: 991, col: 5, offset: 28510},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SELECT",
			pos:  position{line: 993, col: 1, offset: 28532},
			expr: &actionExpr{
				pos: position{line: 993, col: 10, offset: 28541},
				run: (*parser).callonSELECT1,
				expr: &litMatcher{
					pos:        position{line: 993, col: 10, offset: 28541},
					val:        "select",
					ignoreCase: true,
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 994, col: 1, offset: 28576},
			expr: &actionExpr{
				pos: position{line: 994, col: 6, offset: 28581},
				run: (*parser).callonAS1,
				expr: &litMatcher{
					pos:        position{line: 994, col: 6, offset: 28581},
					val:        "as",
					ignoreCase: true,
				},
			},
		},
		{
			name: "FROM",
			pos:  position{line: 995, col: 1, offset: 28608},
			expr: &actionExpr{
				pos: position{line: 995, col: 8, offset: 28615},
				run: (*parser).callonFROM1,
				expr: &litMatcher{
					pos:        position{line: 995, col: 8, offset: 28615},
					val:        "from",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JOIN",
			pos:  position{line: 996, col: 1, offset: 28646},
			expr: &actionExpr{
				pos: position{line: 996, col: 8, offset: 28653},
				run: (*parser).callonJOIN1,
				expr: &litMatcher{
					pos:        position{line: 996, col: 8, offset: 28653},
					val:        "join",
					ignoreCase: true,
				},
			},
		},
		{
			name: "WHERE",
			pos:  position{line: 997, col: 1, offset: 28684},
			expr: &actionExpr{
				pos: position{line: 997, col: 9, offset: 28692},
				run: (*parser).callonWHERE1,
				expr: &litMatcher{
					pos:        position{line: 997, col: 9, offset: 28692},
					val:        "where",
					ignoreCase: true,
				},
			},
		},
		{
			name: "GROUP",
			pos:  position{line: 998, col: 1, offset: 28725},
			expr: &actionExpr{
				pos: position{line: 998, col: 9, offset: 28733},
				run: (*parser).callonGROUP1,
				expr: &litMatcher{
					pos:        position{line: 998, col: 9, offset: 28733},
					val:        "group",
					ignoreCase: true,
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 999, col: 1, offset: 28766},
			expr: &actionExpr{
				pos: position{line: 999, col: 6, offset: 28771},
				run: (*parser).callonBY1,
				expr: &litMatcher{
					pos:        position{line: 999, col: 6, offset: 28771},
					val:        "by",
					ignoreCase: true,
				},
			},
		},
		{
			name: "HAVING",
			pos:  position{line: 1000, col: 1, offset: 28798},
			expr: &actionExpr{
				pos: position{line: 1000, col: 10, offset: 28807},
				run: (*parser).callonHAVING1,
				expr: &litMatcher{
					pos:        position{line: 1000, col: 10, offset: 28807},
					val:        "having",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ORDER",
			pos:  position{line: 1001, col: 1, offset: 28842},
			expr: &actionExpr{
				pos: position{line: 1001, col: 9, offset: 28850},
				run: (*parser).callonORDER1,
				expr: &litMatcher{
					pos:        position{line: 1001, col: 9, offset: 28850},
					val:        "order",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ON",
			pos:  position{line: 1002, col: 1, offset: 28883},
			expr: &actionExpr{
				pos: position{line: 1002, col: 6, offset: 28888},
				run: (*parser).callonON1,
				expr: &litMatcher{
					pos:        position{line: 1002, col: 6, offset: 28888},
					val:        "on",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LIMIT",
			pos:  position{line: 1003, col: 1, offset: 28915},
			expr: &actionExpr{
				pos: position{line: 1003, col: 9, offset: 28923},
				run: (*parser).callonLIMIT1,
				expr: &litMatcher{
					pos:        position{line: 1003, col: 9, offset: 28923},
					val:        "limit",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ASC",
			pos:  position{line: 1004, col: 1, offset: 28956},
			expr: &actionExpr{
				pos: position{line: 1004, col: 7, offset: 28962},
				run: (*parser).callonASC1,
				expr: &litMatcher{
					pos:        position{line: 1004, col: 7, offset: 28962},
					val:        "asc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "DESC",
			pos:  position{line: 1005, col: 1, offset: 28991},
			expr: &actionExpr{
				pos: position{line: 1005, col: 8, offset: 28998},
				run: (*parser).callonDESC1,
				expr: &litMatcher{
					pos:        position{line: 1005, col: 8, offset: 28998},
					val:        "desc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ANTI",
			pos:  position{line: 1006, col: 1, offset: 29029},
			expr: &actionExpr{
				pos: position{line: 1006, col: 8, offset: 29036},
				run: (*parser).callonANTI1,
				expr: &litMatcher{
					pos:        position{line: 1006, col: 8, offset: 29036},
					val:        "anti",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LEFT",
			pos:  position{line: 1007, col: 1, offset: 29067},
			expr: &actionExpr{
				pos: position{line: 1007, col: 8, offset: 29074},
				run: (*parser).callonLEFT1,
				expr: &litMatcher{
					pos:        position{line: 1007, col: 8, offset: 29074},
					val:        "left",
					ignoreCase: true,
				},
			},
		},
		{
			name: "RIGHT",
			pos:  position{line: 1008, col: 1, offset: 29105},
			expr: &actionExpr{
				pos: position{line: 1008, col: 9, offset: 29113},
				run: (*parser).callonRIGHT1,
				expr: &litMatcher{
					pos:        position{line: 1008, col: 9, offset: 29113},
					val:        "right",
					ignoreCase: true,
				},
			},
		},
		{
			name: "INNER",
			pos:  position{line: 1009, col: 1, offset: 29146},
			expr: &actionExpr{
				pos: position{line: 1009, col: 9, offset: 29154},
				run: (*parser).callonINNER1,
				expr: &litMatcher{
					pos:        position{line: 1009, col: 9, offset: 29154},
					val:        "inner",
					ignoreCase: true,
				},
			},
		},
		{
			name: "SQLTokenSentinels",
			pos:  position{line: 1011, col: 1, offset: 29188},
			expr: &choiceExpr{
				pos: position{line: 1012, col: 5, offset: 29210},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1012, col: 5, offset: 29210},
						name: "SELECT",
					},
					&ruleRefExpr{
						pos:  position{line: 1012, col: 14, offset: 29219},
						name: "AS",
					},
					&ruleRefExpr{
						pos:  position{line: 1012, col: 19, offset: 29224},
						name: "FROM",
					},
					&ruleRefExpr{
						pos:  position{line: 1012, col: 27, offset: 29232},
						name: "JOIN",
					},
					&ruleRefExpr{
						pos:  position{line: 1012, col: 34, offset: 29239},
						name: "WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 1012, col: 42, offset: 29247},
						name: "GROUP",
					},
					&ruleRefExpr{
						pos:  position{line: 1012, col: 50, offset: 29255},
						name: "HAVING",
					},
					&ruleRefExpr{
						pos:  position{line: 1012, col: 59, offset: 29264},
						name: "ORDER",
					},
					&ruleRefExpr{
						pos:  position{line: 1012, col: 67, offset: 29272},
						name: "LIMIT",
					},
					&ruleRefExpr{
						pos:  position{line: 1012, col: 75, offset: 29280},
						name: "ON",
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 1016, col: 1, offset: 29306},
			expr: &choiceExpr{
				pos: position{line: 1017, col: 5, offset: 29318},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1017, col: 5, offset: 29318},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1018, col: 5, offset: 29334},
						name: "TemplateLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1019, col: 5, offset: 29354},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1020, col: 5, offset: 29372},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1021, col: 5, offset: 29391},
						name: "BytesLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1022, col: 5, offset: 29408},
						name: "Duration",
					},
					&ruleRefExpr{
						pos:  position{line: 1023, col: 5, offset: 29421},
						name: "Time",
					},
					&ruleRefExpr{
						pos:  position{line: 1024, col: 5, offset: 29430},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1025, col: 5, offset: 29447},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1026, col: 5, offset: 29466},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1027, col: 5, offset: 29485},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 1029, col: 1, offset: 29498},
			expr: &choiceExpr{
				pos: position{line: 1030, col: 5, offset: 29516},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1030, col: 5, offset: 29516},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 1030, col: 5, offset: 29516},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1030, col: 5, offset: 29516},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1030, col: 7, offset: 29518},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 1030, col: 14, offset: 29525},
									expr: &ruleRefExpr{
										pos:  position{line: 1030, col: 15, offset: 29526},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1033, col: 5, offset: 29641},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 1033, col: 5, offset: 29641},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1033, col: 7, offset: 29643},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 1037, col: 1, offset: 29747},
			expr: &choiceExpr{
				pos: position{line: 1038, col: 5, offset: 29766},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1038, col: 5, offset: 29766},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 1038, col: 5, offset: 29766},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1038, col: 5, offset: 29766},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1038, col: 7, offset: 29768},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 1038, col: 11, offset: 29772},
									expr: &ruleRefExpr{
										pos:  position{line: 1038, col: 12, offset: 29773},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1041, col: 5, offset: 29887},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 1041, col: 5, offset: 29887},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1041, col: 7, offset: 29889},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 1045, col: 1, offset: 29988},
			expr: &actionExpr{
				pos: position{line: 1046, col: 5, offset: 30005},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1046, col: 5, offset: 30005},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1046, col: 7, offset: 30007},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 1050, col: 1, offset: 30120},
			expr: &actionExpr{
				pos: position{line: 1051, col: 5, offset: 30139},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1051, col: 5, offset: 30139},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1051, col: 7, offset: 30141},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 1055, col: 1, offset: 30250},
			expr: &choiceExpr{
				pos: position{line: 1056, col: 5, offset: 30269},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1056, col: 5, offset: 30269},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 1056, col: 5, offset: 30269},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1057, col: 5, offset: 30382},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 1057, col: 5, offset: 30382},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 1059, col: 1, offset: 30493},
			expr: &actionExpr{
				pos: position{line: 1060, col: 5, offset: 30509},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 1060, col: 5, offset: 30509},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "BytesLiteral",
			pos:  position{line: 1062, col: 1, offset: 30615},
			expr: &actionExpr{
				pos: position{line: 1063, col: 5, offset: 30632},
				run: (*parser).callonBytesLiteral1,
				expr: &seqExpr{
					pos: position{line: 1063, col: 5, offset: 30632},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1063, col: 5, offset: 30632},
							val:        "0x",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1063, col: 10, offset: 30637},
							expr: &ruleRefExpr{
								pos:  position{line: 1063, col: 10, offset: 30637},
								name: "HexDigit",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeLiteral",
			pos:  position{line: 1067, col: 1, offset: 30752},
			expr: &actionExpr{
				pos: position{line: 1068, col: 5, offset: 30768},
				run: (*parser).callonTypeLiteral1,
				expr: &seqExpr{
					pos: position{line: 1068, col: 5, offset: 30768},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1068, col: 5, offset: 30768},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1068, col: 9, offset: 30772},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1068, col: 13, offset: 30776},
								name: "Type",
							},
						},
						&litMatcher{
							pos:        position{line: 1068, col: 18, offset: 30781},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "CastType",
			pos:  position{line: 1072, col: 1, offset: 30870},
			expr: &choiceExpr{
				pos: position{line: 1073, col: 5, offset: 30883},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1073, col: 5, offset: 30883},
						name: "TypeLiteral",
					},
					&actionExpr{
						pos: position{line: 1074, col: 5, offset: 30899},
						run: (*parser).callonCastType3,
						expr: &labeledExpr{
							pos:   position{line: 1074, col: 5, offset: 30899},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1074, col: 9, offset: 30903},
								name: "PrimitiveType",
							},
						},
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 1078, col: 1, offset: 31002},
			expr: &choiceExpr{
				pos: position{line: 1079, col: 5, offset: 31011},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1079, col: 5, offset: 31011},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1080, col: 5, offset: 31027},
						name: "AmbiguousType",
					},
					&ruleRefExpr{
						pos:  position{line: 1081, col: 5, offset: 31045},
						name: "ComplexType",
					},
				},
			},
		},
		{
			name: "AmbiguousType",
			pos:  position{line: 1083, col: 1, offset: 31058},
			expr: &choiceExpr{
				pos: position{line: 1084, col: 5, offset: 31076},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1084, col: 5, offset: 31076},
						run: (*parser).callonAmbiguousType2,
						expr: &seqExpr{
							pos: position{line: 1084, col: 5, offset: 31076},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1084, col: 5, offset: 31076},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1084, col: 10, offset: 31081},
										name: "PrimitiveType",
									},
								},
								&notExpr{
									pos: position{line: 1084, col: 24, offset: 31095},
									expr: &ruleRefExpr{
										pos:  position{line: 1084, col: 25, offset: 31096},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1085, col: 5, offset: 31136},
						run: (*parser).callonAmbiguousType8,
						expr: &seqExpr{
							pos: position{line: 1085, col: 5, offset: 31136},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1085, col: 5, offset: 31136},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1085, col: 10, offset: 31141},
										name: "IdentifierName",
									},
								},
								&labeledExpr{
									pos:   position{line: 1085, col: 25, offset: 31156},
									label: "opt",
									expr: &zeroOrOneExpr{
										pos: position{line: 1085, col: 29, offset: 31160},
										expr: &seqExpr{
											pos: position{line: 1085, col: 30, offset: 31161},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1085, col: 30, offset: 31161},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 1085, col: 33, offset: 31164},
													val:        "=",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 1085, col: 37, offset: 31168},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 1085, col: 40, offset: 31171},
													name: "Type",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1091, col: 5, offset: 31403},
						run: (*parser).callonAmbiguousType19,
						expr: &labeledExpr{
							pos:   position{line: 1091, col: 5, offset: 31403},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1091, col: 10, offset: 31408},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1094, col: 5, offset: 31508},
						run: (*parser).callonAmbiguousType22,
						expr: &seqExpr{
							pos: position{line: 1094, col: 5, offset: 31508},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1094, col: 5, offset: 31508},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1094, col: 9, offset: 31512},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1094, col: 12, offset: 31515},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 1094, col: 14, offset: 31517},
										name: "TypeUnion",
									},
								},
								&litMatcher{
									pos:        position{line: 1094, col: 25, offset: 31528},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeUnion",
			pos:  position{line: 1096, col: 1, offset: 31551},
			expr: &actionExpr{
				pos: position{line: 1097, col: 5, offset: 31565},
				run: (*parser).callonTypeUnion1,
				expr: &labeledExpr{
					pos:   position{line: 1097, col: 5, offset: 31565},
					label: "types",
					expr: &ruleRefExpr{
						pos:  position{line: 1097, col: 11, offset: 31571},
						name: "TypeList",
					},
				},
			},
		},
		{
			name: "TypeList",
			pos:  position{line: 1101, col: 1, offset: 31667},
			expr: &actionExpr{
				pos: position{line: 1102, col: 5, offset: 31680},
				run: (*parser).callonTypeList1,
				expr: &seqExpr{
					pos: position{line: 1102, col: 5, offset: 31680},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1102, col: 5, offset: 31680},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1102, col: 11, offset: 31686},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 1102, col: 16, offset: 31691},
							label: "rest",
							expr: &oneOrMoreExpr{
								pos: position{line: 1102, col: 21, offset: 31696},
								expr: &ruleRefExpr{
									pos:  position{line: 1102, col: 21, offset: 31696},
									name: "TypeListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeListTail",
			pos:  position{line: 1106, col: 1, offset: 31790},
			expr: &actionExpr{
				pos: position{line: 1106, col: 16, offset: 31805},
				run: (*parser).callonTypeListTail1,
				expr: &seqExpr{
					pos: position{line: 1106, col: 16, offset: 31805},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1106, col: 16, offset: 31805},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1106, col: 19, offset: 31808},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1106, col: 23, offset: 31812},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1106, col: 26, offset: 31815},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1106, col: 30, offset: 31819},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexType",
			pos:  position{line: 1108, col: 1, offset: 31845},
			expr: &choiceExpr{
				pos: position{line: 1109, col: 5, offset: 31861},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1109, col: 5, offset: 31861},
						run: (*parser).callonComplexType2,
						expr: &seqExpr{
							pos: position{line: 1109, col: 5, offset: 31861},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1109, col: 5, offset: 31861},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1109, col: 9, offset: 31865},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1109, col: 12, offset: 31868},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 1109, col: 19, offset: 31875},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1109, col: 33, offset: 31889},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1109, col: 36, offset: 31892},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1112, col: 5, offset: 31987},
						run: (*parser).callonComplexType10,
						expr: &seqExpr{
							pos: position{line: 1112, col: 5, offset: 31987},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1112, col: 5, offset: 31987},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1112, col: 9, offset: 31991},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1112, col: 12, offset: 31994},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1112, col: 16, offset: 31998},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1112, col: 21, offset: 32003},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1112, col: 24, offset: 32006},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1115, col: 5, offset: 32095},
						run: (*parser).callonComplexType18,
						expr: &seqExpr{
							pos: position{line: 1115, col: 5, offset: 32095},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1115, col: 5, offset: 32095},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1115, col: 10, offset: 32100},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1115, col: 14, offset: 32104},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1115, col: 18, offset: 32108},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1115, col: 23, offset: 32113},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1115, col: 26, offset: 32116},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1118, col: 5, offset: 32204},
						run: (*parser).callonComplexType26,
						expr: &seqExpr{
							pos: position{line: 1118, col: 5, offset: 32204},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1118, col: 5, offset: 32204},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1118, col: 10, offset: 32209},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1118, col: 13, offset: 32212},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 1118, col: 21, offset: 32220},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1118, col: 26, offset: 32225},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1118, col: 29, offset: 32228},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1118, col: 33, offset: 32232},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1118, col: 36, offset: 32235},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 1118, col: 44, offset: 32243},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1118, col: 49, offset: 32248},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1118, col: 52, offset: 32251},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateLiteral",
			pos:  position{line: 1122, col: 1, offset: 32365},
			expr: &actionExpr{
				pos: position{line: 1123, col: 5, offset: 32385},
				run: (*parser).callonTemplateLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1123, col: 5, offset: 32385},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1123, col: 7, offset: 32387},
						name: "TemplateLiteralParts",
					},
				},
			},
		},
		{
			name: "TemplateLiteralParts",
			pos:  position{line: 1130, col: 1, offset: 32603},
			expr: &choiceExpr{
				pos: position{line: 1131, col: 5, offset: 32628},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1131, col: 5, offset: 32628},
						run: (*parser).callonTemplateLiteralParts2,
						expr: &seqExpr{
							pos: position{line: 1131, col: 5, offset: 32628},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1131, col: 5, offset: 32628},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1131, col: 9, offset: 32632},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1131, col: 11, offset: 32634},
										expr: &ruleRefExpr{
											pos:  position{line: 1131, col: 11, offset: 32634},
											name: "TemplateDoubleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1131, col: 37, offset: 32660},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1132, col: 5, offset: 32686},
						run: (*parser).callonTemplateLiteralParts9,
						expr: &seqExpr{
							pos: position{line: 1132, col: 5, offset: 32686},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1132, col: 5, offset: 32686},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1132, col: 9, offset: 32690},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1132, col: 11, offset: 32692},
										expr: &ruleRefExpr{
											pos:  position{line: 1132, col: 11, offset: 32692},
											name: "TemplateSingleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1132, col: 37, offset: 32718},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedPart",
			pos:  position{line: 1134, col: 1, offset: 32741},
			expr: &choiceExpr{
				pos: position{line: 1135, col: 5, offset: 32770},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1135, col: 5, offset: 32770},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 1136, col: 5, offset: 32787},
						run: (*parser).callonTemplateDoubleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 1136, col: 5, offset: 32787},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1136, col: 7, offset: 32789},
								expr: &ruleRefExpr{
									pos:  position{line: 1136, col: 7, offset: 32789},
									name: "TemplateDoubleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedChar",
			pos:  position{line: 1140, col: 1, offset: 32926},
			expr: &choiceExpr{
				pos: position{line: 1141, col: 5, offset: 32955},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1141, col: 5, offset: 32955},
						run: (*parser).callonTemplateDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1141, col: 5, offset: 32955},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1141, col: 5, offset: 32955},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1141, col: 10, offset: 32960},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1141, col: 12, offset: 32962},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1142, col: 5, offset: 32989},
						run: (*parser).callonTemplateDoubleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1142, col: 5, offset: 32989},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1142, col: 5, offset: 32989},
									expr: &litMatcher{
										pos:        position{line: 1142, col: 8, offset: 32992},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1142, col: 15, offset: 32999},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1142, col: 17, offset: 33001},
										name: "DoubleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedPart",
			pos:  position{line: 1144, col: 1, offset: 33037},
			expr: &choiceExpr{
				pos: position{line: 1145, col: 5, offset: 33066},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1145, col: 5, offset: 33066},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 1146, col: 5, offset: 33083},
						run: (*parser).callonTemplateSingleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 1146, col: 5, offset: 33083},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1146, col: 7, offset: 33085},
								expr: &ruleRefExpr{
									pos:  position{line: 1146, col: 7, offset: 33085},
									name: "TemplateSingleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedChar",
			pos:  position{line: 1150, col: 1, offset: 33222},
			expr: &choiceExpr{
				pos: position{line: 1151, col: 5, offset: 33251},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1151, col: 5, offset: 33251},
						run: (*parser).callonTemplateSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1151, col: 5, offset: 33251},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1151, col: 5, offset: 33251},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1151, col: 10, offset: 33256},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1151, col: 12, offset: 33258},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1152, col: 5, offset: 33285},
						run: (*parser).callonTemplateSingleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1152, col: 5, offset: 33285},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1152, col: 5, offset: 33285},
									expr: &litMatcher{
										pos:        position{line: 1152, col: 8, offset: 33288},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1152, col: 15, offset: 33295},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1152, col: 17, offset: 33297},
										name: "SingleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateExpr",
			pos:  position{line: 1154, col: 1, offset: 33333},
			expr: &actionExpr{
				pos: position{line: 1155, col: 5, offset: 33350},
				run: (*parser).callonTemplateExpr1,
				expr: &seqExpr{
					pos: position{line: 1155, col: 5, offset: 33350},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1155, col: 5, offset: 33350},
							val:        "${",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1155, col: 10, offset: 33355},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1155, col: 13, offset: 33358},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 1155, col: 15, offset: 33360},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1155, col: 20, offset: 33365},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1155, col: 23, offset: 33368},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 1170, col: 1, offset: 33664},
			expr: &actionExpr{
				pos: position{line: 1171, col: 5, offset: 33682},
				run: (*parser).callonPrimitiveType1,
				expr: &choiceExpr{
					pos: position{line: 1171, col: 9, offset: 33686},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 1171, col: 9, offset: 33686},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1171, col: 19, offset: 33696},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1171, col: 30, offset: 33707},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1171, col: 41, offset: 33718},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1172, col: 9, offset: 33735},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1172, col: 18, offset: 33744},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1172, col: 28, offset: 33754},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1172, col: 38, offset: 33764},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1173, col: 9, offset: 33780},
							val:        "float16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1173, col: 21, offset: 33792},
							val:        "float32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1173, col: 33, offset: 33804},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1174, col: 9, offset: 33822},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1174, col: 18, offset: 33831},
							val:        "string",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1175, col: 9, offset: 33848},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1175, col: 22, offset: 33861},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1176, col: 9, offset: 33876},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1177, col: 9, offset: 33892},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1177, col: 16, offset: 33899},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1178, col: 9, offset: 33913},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1178, col: 18, offset: 33922},
							val:        "null",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldList",
			pos:  position{line: 1182, col: 1, offset: 34038},
			expr: &choiceExpr{
				pos: position{line: 1183, col: 5, offset: 34056},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1183, col: 5, offset: 34056},
						run: (*parser).callonTypeFieldList2,
						expr: &seqExpr{
							pos: position{line: 1183, col: 5, offset: 34056},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1183, col: 5, offset: 34056},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 1183, col: 11, offset: 34062},
										name: "TypeField",
									},
								},
								&labeledExpr{
									pos:   position{line: 1183, col: 21, offset: 34072},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1183, col: 26, offset: 34077},
										expr: &ruleRefExpr{
											pos:  position{line: 1183, col: 26, offset: 34077},
											name: "TypeFieldListTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1186, col: 5, offset: 34179},
						run: (*parser).callonTypeFieldList9,
						expr: &litMatcher{
							pos:        position{line: 1186, col: 5, offset: 34179},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTail",
			pos:  position{line: 1188, col: 1, offset: 34203},
			expr: &actionExpr{
				pos: position{line: 1188, col: 21, offset: 34223},
				run: (*parser).callonTypeFieldListTail1,
				expr: &seqExpr{
					pos: position{line: 1188, col: 21, offset: 34223},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1188, col: 21, offset: 34223},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1188, col: 24, offset: 34226},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1188, col: 28, offset: 34230},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1188, col: 31, offset: 34233},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1188, col: 35, offset: 34237},
								name: "TypeField",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeField",
			pos:  position{line: 1190, col: 1, offset: 34268},
			expr: &actionExpr{
				pos: position{line: 1191, col: 5, offset: 34282},
				run: (*parser).callonTypeField1,
				expr: &seqExpr{
					pos: position{line: 1191, col: 5, offset: 34282},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1191, col: 5, offset: 34282},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1191, col: 10, offset: 34287},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1191, col: 20, offset: 34297},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1191, col: 23, offset: 34300},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1191, col: 27, offset: 34304},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1191, col: 30, offset: 34307},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1191, col: 34, offset: 34311},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 1195, col: 1, offset: 34393},
			expr: &choiceExpr{
				pos: position{line: 1196, col: 5, offset: 34407},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1196, col: 5, offset: 34407},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 1197, col: 5, offset: 34426},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 1199, col: 1, offset: 34440},
			expr: &actionExpr{
				pos: position{line: 1199, col: 12, offset: 34451},
				run: (*parser).callonAndToken1,
				expr: &seqExpr{
					pos: position{line: 1199, col: 12, offset: 34451},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1199, col: 13, offset: 34452},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1199, col: 13, offset: 34452},
									val:        "and",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1199, col: 21, offset: 34460},
									val:        "AND",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1199, col: 28, offset: 34467},
							expr: &ruleRefExpr{
								pos:  position{line: 1199, col: 29, offset: 34468},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 1200, col: 1, offset: 34505},
			expr: &actionExpr{
				pos: position{line: 1200, col: 11, offset: 34515},
				run: (*parser).callonOrToken1,
				expr: &seqExpr{
					pos: position{line: 1200, col: 11, offset: 34515},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1200, col: 12, offset: 34516},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1200, col: 12, offset: 34516},
									val:        "or",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1200, col: 19, offset: 34523},
									val:        "OR",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1200, col: 25, offset: 34529},
							expr: &ruleRefExpr{
								pos:  position{line: 1200, col: 26, offset: 34530},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 1201, col: 1, offset: 34566},
			expr: &actionExpr{
				pos: position{line: 1201, col: 11, offset: 34576},
				run: (*parser).callonInToken1,
				expr: &seqExpr{
					pos: position{line: 1201, col: 11, offset: 34576},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1201, col: 11, offset: 34576},
							val:        "in",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1201, col: 16, offset: 34581},
							expr: &ruleRefExpr{
								pos:  position{line: 1201, col: 17, offset: 34582},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 1202, col: 1, offset: 34618},
			expr: &actionExpr{
				pos: position{line: 1202, col: 12, offset: 34629},
				run: (*parser).callonNotToken1,
				expr: &seqExpr{
					pos: position{line: 1202, col: 12, offset: 34629},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1202, col: 13, offset: 34630},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1202, col: 13, offset: 34630},
									val:        "not",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1202, col: 21, offset: 34638},
									val:        "NOT",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1202, col: 28, offset: 34645},
							expr: &ruleRefExpr{
								pos:  position{line: 1202, col: 29, offset: 34646},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 1203, col: 1, offset: 34683},
			expr: &actionExpr{
				pos: position{line: 1203, col: 11, offset: 34693},
				run: (*parser).callonByToken1,
				expr: &seqExpr{
					pos: position{line: 1203, col: 11, offset: 34693},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1203, col: 11, offset: 34693},
							val:        "by",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1203, col: 16, offset: 34698},
							expr: &ruleRefExpr{
								pos:  position{line: 1203, col: 17, offset: 34699},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 1205, col: 1, offset: 34736},
			expr: &charClassMatcher{
				pos:        position{line: 1205, col: 19, offset: 34754},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 1207, col: 1, offset: 34766},
			expr: &choiceExpr{
				pos: position{line: 1207, col: 18, offset: 34783},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1207, col: 18, offset: 34783},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 1207, col: 36, offset: 34801},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 1209, col: 1, offset: 34808},
			expr: &actionExpr{
				pos: position{line: 1210, col: 5, offset: 34823},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 1210, col: 5, offset: 34823},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 1210, col: 8, offset: 34826},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 1212, col: 1, offset: 34907},
			expr: &choiceExpr{
				pos: position{line: 1213, col: 5, offset: 34926},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1213, col: 5, offset: 34926},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 1213, col: 5, offset: 34926},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1213, col: 5, offset: 34926},
									expr: &seqExpr{
										pos: position{line: 1213, col: 7, offset: 34928},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1213, col: 7, offset: 34928},
												name: "IDGuard",
											},
											&notExpr{
												pos: position{line: 1213, col: 15, offset: 34936},
												expr: &ruleRefExpr{
													pos:  position{line: 1213, col: 16, offset: 34937},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1213, col: 32, offset: 34953},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1213, col: 48, offset: 34969},
									expr: &ruleRefExpr{
										pos:  position{line: 1213, col: 48, offset: 34969},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1214, col: 5, offset: 35021},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 1214, col: 5, offset: 35021},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1215, col: 5, offset: 35060},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 1215, col: 5, offset: 35060},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1215, col: 5, offset: 35060},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1215, col: 10, offset: 35065},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1215, col: 13, offset: 35068},
										name: "IDGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1217, col: 5, offset: 35159},
						run: (*parser).callonIdentifierName19,
						expr: &litMatcher{
							pos:        position{line: 1217, col: 5, offset: 35159},
							val:        "type",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1218, col: 5, offset: 35201},
						run: (*parser).callonIdentifierName21,
						expr: &seqExpr{
							pos: position{line: 1218, col: 5, offset: 35201},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1218, col: 5, offset: 35201},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1218, col: 8, offset: 35204},
										name: "SQLTokenSentinels",
									},
								},
								&andExpr{
									pos: position{line: 1218, col: 26, offset: 35222},
									expr: &seqExpr{
										pos: position{line: 1218, col: 28, offset: 35224},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1218, col: 28, offset: 35224},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1218, col: 31, offset: 35227},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierNames",
			pos:  position{line: 1220, col: 1, offset: 35252},
			expr: &actionExpr{
				pos: position{line: 1221, col: 5, offset: 35272},
				run: (*parser).callonIdentifierNames1,
				expr: &seqExpr{
					pos: position{line: 1221, col: 5, offset: 35272},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1221, col: 5, offset: 35272},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1221, col: 11, offset: 35278},
								name: "IdentifierName",
							},
						},
						&labeledExpr{
							pos:   position{line: 1221, col: 26, offset: 35293},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1221, col: 31, offset: 35298},
								expr: &actionExpr{
									pos: position{line: 1221, col: 32, offset: 35299},
									run: (*parser).callonIdentifierNames7,
									expr: &seqExpr{
										pos: position{line: 1221, col: 32, offset: 35299},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1221, col: 32, offset: 35299},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1221, col: 35, offset: 35302},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1221, col: 39, offset: 35306},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 1221, col: 42, offset: 35309},
												label: "id",
												expr: &ruleRefExpr{
													pos:  position{line: 1221, col: 45, offset: 35312},
													name: "IdentifierName",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IDGuard",
			pos:  position{line: 1225, col: 1, offset: 35427},
			expr: &choiceExpr{
				pos: position{line: 1226, col: 5, offset: 35439},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1226, col: 5, offset: 35439},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1227, col: 5, offset: 35458},
						name: "NullLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1228, col: 5, offset: 35474},
						name: "NaN",
					},
					&ruleRefExpr{
						pos:  position{line: 1229, col: 5, offset: 35482},
						name: "Infinity",
					},
				},
			},
		},
		{
			name: "Time",
			pos:  position{line: 1231, col: 1, offset: 35492},
			expr: &actionExpr{
				pos: position{line: 1232, col: 5, offset: 35501},
				run: (*parser).callonTime1,
				expr: &seqExpr{
					pos: position{line: 1232, col: 5, offset: 35501},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1232, col: 5, offset: 35501},
							name: "FullDate",
						},
						&litMatcher{
							pos:        position{line: 1232, col: 14, offset: 35510},
							val:        "T",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1232, col: 18, offset: 35514},
							name: "FullTime",
						},
					},
				},
			},
		},
		{
			name: "FullDate",
			pos:  position{line: 1236, col: 1, offset: 35634},
			expr: &seqExpr{
				pos: position{line: 1236, col: 12, offset: 35645},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1236, col: 12, offset: 35645},
						name: "D4",
					},
					&litMatcher{
						pos:        position{line: 1236, col: 15, offset: 35648},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1236, col: 19, offset: 35652},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1236, col: 22, offset: 35655},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1236, col: 26, offset: 35659},
						name: "D2",
					},
				},
			},
		},
		{
			name: "D4",
			pos:  position{line: 1238, col: 1, offset: 35663},
			expr: &seqExpr{
				pos: position{line: 1238, col: 6, offset: 35668},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1238, col: 6, offset: 35668},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1238, col: 11, offset: 35673},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1238, col: 16, offset: 35678},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1238, col: 21, offset: 35683},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "D2",
			pos:  position{line: 1239, col: 1, offset: 35689},
			expr: &seqExpr{
				pos: position{line: 1239, col: 6, offset: 35694},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1239, col: 6, offset: 35694},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1239, col: 11, offset: 35699},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "FullTime",
			pos:  position{line: 1241, col: 1, offset: 35706},
			expr: &seqExpr{
				pos: position{line: 1241, col: 12, offset: 35717},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1241, col: 12, offset: 35717},
						name: "PartialTime",
					},
					&ruleRefExpr{
						pos:  position{line: 1241, col: 24, offset: 35729},
						name: "TimeOffset",
					},
				},
			},
		},
		{
			name: "PartialTime",
			pos:  position{line: 1243, col: 1, offset: 35741},
			expr: &seqExpr{
				pos: position{line: 1243, col: 15, offset: 35755},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1243, col: 15, offset: 35755},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1243, col: 18, offset: 35758},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1243, col: 22, offset: 35762},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1243, col: 25, offset: 35765},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1243, col: 29, offset: 35769},
						name: "D2",
					},
					&zeroOrOneExpr{
						pos: position{line: 1243, col: 32, offset: 35772},
						expr: &seqExpr{
							pos: position{line: 1243, col: 33, offset: 35773},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1243, col: 33, offset: 35773},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1243, col: 37, offset: 35777},
									expr: &charClassMatcher{
										pos:        position{line: 1243, col: 37, offset: 35777},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeOffset",
			pos:  position{line: 1245, col: 1, offset: 35787},
			expr: &choiceExpr{
				pos: position{line: 1246, col: 5, offset: 35802},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1246, col: 5, offset: 35802},
						val:        "Z",
						ignoreCase: false,
					},
					&seqExpr{
						pos: position{line: 1247, col: 5, offset: 35810},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 1247, col: 6, offset: 35811},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1247, col: 6, offset: 35811},
										val:        "+",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 1247, col: 12, offset: 35817},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1247, col: 17, offset: 35822},
								name: "D2",
							},
							&litMatcher{
								pos:        position{line: 1247, col: 20, offset: 35825},
								val:        ":",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 1247, col: 24, offset: 35829},
								name: "D2",
							},
							&zeroOrOneExpr{
								pos: position{line: 1247, col: 27, offset: 35832},
								expr: &seqExpr{
									pos: position{line: 1247, col: 28, offset: 35833},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1247, col: 28, offset: 35833},
											val:        ".",
											ignoreCase: false,
										},
										&oneOrMoreExpr{
											pos: position{line: 1247, col: 32, offset: 35837},
											expr: &charClassMatcher{
												pos:        position{line: 1247, col: 32, offset: 35837},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 1249, col: 1, offset: 35847},
			expr: &actionExpr{
				pos: position{line: 1250, col: 5, offset: 35860},
				run: (*parser).callonDuration1,
				expr: &seqExpr{
					pos: position{line: 1250, col: 5, offset: 35860},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1250, col: 5, offset: 35860},
							expr: &litMatcher{
								pos:        position{line: 1250, col: 5, offset: 35860},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1250, col: 10, offset: 35865},
							expr: &seqExpr{
								pos: position{line: 1250, col: 11, offset: 35866},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1250, col: 11, offset: 35866},
										name: "Decimal",
									},
									&ruleRefExpr{
										pos:  position{line: 1250, col: 19, offset: 35874},
										name: "TimeUnit",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Decimal",
			pos:  position{line: 1254, col: 1, offset: 36000},
			expr: &seqExpr{
				pos: position{line: 1254, col: 11, offset: 36010},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1254, col: 11, offset: 36010},
						name: "UInt",
					},
					&zeroOrOneExpr{
						pos: position{line: 1254, col: 16, offset: 36015},
						expr: &seqExpr{
							pos: position{line: 1254, col: 17, offset: 36016},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1254, col: 17, offset: 36016},
									val:        ".",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1254, col: 21, offset: 36020},
									name: "UInt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeUnit",
			pos:  position{line: 1256, col: 1, offset: 36028},
			expr: &choiceExpr{
				pos: position{line: 1257, col: 5, offset: 36041},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1257, col: 5, offset: 36041},
						val:        "ns",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1258, col: 5, offset: 36050},
						val:        "us",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1259, col: 5, offset: 36059},
						val:        "ms",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1260, col: 5, offset: 36068},
						val:        "s",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1261, col: 5, offset: 36076},
						val:        "m",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1262, col: 5, offset: 36084},
						val:        "h",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1263, col: 5, offset: 36092},
						val:        "d",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1264, col: 5, offset: 36100},
						val:        "w",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1265, col: 5, offset: 36108},
						val:        "y",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 1267, col: 1, offset: 36113},
			expr: &actionExpr{
				pos: position{line: 1268, col: 5, offset: 36120},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 1268, col: 5, offset: 36120},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1268, col: 5, offset: 36120},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1268, col: 10, offset: 36125},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1268, col: 14, offset: 36129},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1268, col: 19, offset: 36134},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1268, col: 23, offset: 36138},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1268, col: 28, offset: 36143},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1268, col: 32, offset: 36147},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 1270, col: 1, offset: 36184},
			expr: &actionExpr{
				pos: position{line: 1271, col: 5, offset: 36192},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 1271, col: 5, offset: 36192},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1271, col: 5, offset: 36192},
							expr: &seqExpr{
								pos: position{line: 1271, col: 8, offset: 36195},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1271, col: 8, offset: 36195},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 1271, col: 12, offset: 36199},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 1271, col: 16, offset: 36203},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 1271, col: 20, offset: 36207},
										expr: &choiceExpr{
											pos: position{line: 1271, col: 22, offset: 36209},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1271, col: 22, offset: 36209},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 1271, col: 33, offset: 36220},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1271, col: 39, offset: 36226},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1271, col: 41, offset: 36228},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 1275, col: 1, offset: 36392},
			expr: &choiceExpr{
				pos: position{line: 1276, col: 5, offset: 36410},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1276, col: 5, offset: 36410},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 1276, col: 5, offset: 36410},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1276, col: 5, offset: 36410},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 1276, col: 7, offset: 36412},
										expr: &ruleRefExpr{
											pos:  position{line: 1276, col: 7, offset: 36412},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1276, col: 17, offset: 36422},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1276, col: 19, offset: 36424},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1279, col: 5, offset: 36488},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 1279, col: 5, offset: 36488},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1279, col: 5, offset: 36488},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1279, col: 7, offset: 36490},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1279, col: 11, offset: 36494},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1279, col: 13, offset: 36496},
										expr: &ruleRefExpr{
											pos:  position{line: 1279, col: 13, offset: 36496},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1279, col: 23, offset: 36506},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1279, col: 28, offset: 36511},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1279, col: 30, offset: 36513},
										expr: &ruleRefExpr{
											pos:  position{line: 1279, col: 30, offset: 36513},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1279, col: 40, offset: 36523},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 1279, col: 42, offset: 36525},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1282, col: 5, offset: 36624},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 1282, col: 5, offset: 36624},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1282, col: 5, offset: 36624},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1282, col: 10, offset: 36629},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1282, col: 12, offset: 36631},
										expr: &ruleRefExpr{
											pos:  position{line: 1282, col: 12, offset: 36631},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1282, col: 22, offset: 36641},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1282, col: 24, offset: 36643},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1285, col: 5, offset: 36714},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 1285, col: 5, offset: 36714},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1285, col: 5, offset: 36714},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1285, col: 7, offset: 36716},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1285, col: 11, offset: 36720},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1285, col: 13, offset: 36722},
										expr: &ruleRefExpr{
											pos:  position{line: 1285, col: 13, offset: 36722},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1285, col: 23, offset: 36732},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1288, col: 5, offset: 36800},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 1288, col: 5, offset: 36800},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 1292, col: 1, offset: 36837},
			expr: &choiceExpr{
				pos: position{line: 1293, col: 5, offset: 36849},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1293, col: 5, offset: 36849},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 1294, col: 5, offset: 36856},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 1296, col: 1, offset: 36861},
			expr: &actionExpr{
				pos: position{line: 1296, col: 12, offset: 36872},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 1296, col: 12, offset: 36872},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1296, col: 12, offset: 36872},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1296, col: 16, offset: 36876},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1296, col: 18, offset: 36878},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 1298, col: 1, offset: 36916},
			expr: &actionExpr{
				pos: position{line: 1298, col: 12, offset: 36927},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 1298, col: 12, offset: 36927},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1298, col: 12, offset: 36927},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1298, col: 14, offset: 36929},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 1298, col: 18, offset: 36933},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 1300, col: 1, offset: 36971},
			expr: &actionExpr{
				pos: position{line: 1301, col: 5, offset: 36982},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 1301, col: 5, offset: 36982},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1301, col: 5, offset: 36982},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1301, col: 7, offset: 36984},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 1301, col: 10, offset: 36987},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1301, col: 14, offset: 36991},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1301, col: 16, offset: 36993},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 1305, col: 1, offset: 37066},
			expr: &actionExpr{
				pos: position{line: 1306, col: 5, offset: 37077},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 1306, col: 5, offset: 37077},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1306, col: 5, offset: 37077},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1306, col: 7, offset: 37079},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 1306, col: 11, offset: 37083},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1306, col: 15, offset: 37087},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1306, col: 17, offset: 37089},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 1310, col: 1, offset: 37152},
			expr: &actionExpr{
				pos: position{line: 1311, col: 4, offset: 37160},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 1311, col: 4, offset: 37160},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 1311, col: 6, offset: 37162},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 1313, col: 1, offset: 37202},
			expr: &choiceExpr{
				pos: position{line: 1314, col: 5, offset: 37216},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1314, col: 5, offset: 37216},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 1315, col: 5, offset: 37231},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 1317, col: 1, offset: 37247},
			expr: &actionExpr{
				pos: position{line: 1317, col: 14, offset: 37260},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1317, col: 14, offset: 37260},
					expr: &charClassMatcher{
						pos:        position{line: 1317, col: 14, offset: 37260},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 1319, col: 1, offset: 37299},
			expr: &actionExpr{
				pos: position{line: 1320, col: 5, offset: 37318},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 1320, col: 5, offset: 37318},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1320, col: 5, offset: 37318},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1320, col: 9, offset: 37322},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 1322, col: 1, offset: 37365},
			expr: &choiceExpr{
				pos: position{line: 1323, col: 5, offset: 37381},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1323, col: 5, offset: 37381},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 1323, col: 5, offset: 37381},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1323, col: 5, offset: 37381},
									expr: &litMatcher{
										pos:        position{line: 1323, col: 5, offset: 37381},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1323, col: 10, offset: 37386},
									expr: &charClassMatcher{
										pos:        position{line: 1323, col: 10, offset: 37386},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 1323, col: 17, offset: 37393},
									val:        ".",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1323, col: 21, offset: 37397},
									expr: &charClassMatcher{
										pos:        position{line: 1323, col: 21, offset: 37397},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1323, col: 28, offset: 37404},
									expr: &ruleRefExpr{
										pos:  position{line: 1323, col: 28, offset: 37404},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1326, col: 5, offset: 37463},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 1326, col: 5, offset: 37463},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1326, col: 5, offset: 37463},
									expr: &litMatcher{
										pos:        position{line: 1326, col: 5, offset: 37463},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1326, col: 10, offset: 37468},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1326, col: 14, offset: 37472},
									expr: &charClassMatcher{
										pos:        position{line: 1326, col: 14, offset: 37472},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1326, col: 21, offset: 37479},
									expr: &ruleRefExpr{
										pos:  position{line: 1326, col: 21, offset: 37479},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1329, col: 5, offset: 37538},
						run: (*parser).callonFloatString22,
						expr: &choiceExpr{
							pos: position{line: 1329, col: 7, offset: 37540},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1329, col: 7, offset: 37540},
									name: "NaN",
								},
								&ruleRefExpr{
									pos:  position{line: 1329, col: 13, offset: 37546},
									name: "Infinity",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 1332, col: 1, offset: 37590},
			expr: &seqExpr{
				pos: position{line: 1332, col: 16, offset: 37605},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1332, col: 16, offset: 37605},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 1332, col: 21, offset: 37610},
						expr: &charClassMatcher{
							pos:        position{line: 1332, col: 21, offset: 37610},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1332, col: 27, offset: 37616},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "NaN",
			pos:  position{line: 1334, col: 1, offset: 37628},
			expr: &litMatcher{
				pos:        position{line: 1334, col: 7, offset: 37634},
				val:        "NaN",
				ignoreCase: false,
			},
		},
		{
			name: "Infinity",
			pos:  position{line: 1336, col: 1, offset: 37641},
			expr: &seqExpr{
				pos: position{line: 1336, col: 12, offset: 37652},
				exprs: []interface{}{
					&zeroOrOneExpr{
						pos: position{line: 1336, col: 12, offset: 37652},
						expr: &choiceExpr{
							pos: position{line: 1336, col: 13, offset: 37653},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1336, col: 13, offset: 37653},
									val:        "-",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1336, col: 19, offset: 37659},
									val:        "+",
									ignoreCase: false,
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1336, col: 25, offset: 37665},
						val:        "Inf",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 1338, col: 1, offset: 37672},
			expr: &actionExpr{
				pos: position{line: 1338, col: 7, offset: 37678},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1338, col: 7, offset: 37678},
					expr: &ruleRefExpr{
						pos:  position{line: 1338, col: 7, offset: 37678},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 1340, col: 1, offset: 37720},
			expr: &charClassMatcher{
				pos:        position{line: 1340, col: 12, offset: 37731},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1342, col: 1, offset: 37744},
			expr: &choiceExpr{
				pos: position{line: 1343, col: 5, offset: 37761},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1343, col: 5, offset: 37761},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 1343, col: 5, offset: 37761},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1343, col: 5, offset: 37761},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1343, col: 9, offset: 37765},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1343, col: 11, offset: 37767},
										expr: &ruleRefExpr{
											pos:  position{line: 1343, col: 11, offset: 37767},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1343, col: 29, offset: 37785},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1344, col: 5, offset: 37822},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 1344, col: 5, offset: 37822},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1344, col: 5, offset: 37822},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1344, col: 9, offset: 37826},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1344, col: 11, offset: 37828},
										expr: &ruleRefExpr{
											pos:  position{line: 1344, col: 11, offset: 37828},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1344, col: 29, offset: 37846},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 1346, col: 1, offset: 37880},
			expr: &choiceExpr{
				pos: position{line: 1347, col: 5, offset: 37901},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1347, col: 5, offset: 37901},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1347, col: 5, offset: 37901},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1347, col: 5, offset: 37901},
									expr: &choiceExpr{
										pos: position{line: 1347, col: 7, offset: 37903},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1347, col: 7, offset: 37903},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1347, col: 13, offset: 37909},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1347, col: 26, offset: 37922,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1348, col: 5, offset: 37959},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1348, col: 5, offset: 37959},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1348, col: 5, offset: 37959},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1348, col: 10, offset: 37964},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1348, col: 12, offset: 37966},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 1350, col: 1, offset: 38000},
			expr: &actionExpr{
				pos: position{line: 1351, col: 5, offset: 38012},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 1351, col: 5, offset: 38012},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1351, col: 5, offset: 38012},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1351, col: 10, offset: 38017},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1351, col: 23, offset: 38030},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1351, col: 28, offset: 38035},
								expr: &ruleRefExpr{
									pos:  position{line: 1351, col: 28, offset: 38035},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 1353, col: 1, offset: 38097},
			expr: &choiceExpr{
				pos: position{line: 1354, col: 5, offset: 38114},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1354, col: 5, offset: 38114},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1355, col: 5, offset: 38131},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordChars",
			pos:  position{line: 1357, col: 1, offset: 38143},
			expr: &actionExpr{
				pos: position{line: 1357, col: 16, offset: 38158},
				run: (*parser).callonKeyWordChars1,
				expr: &charClassMatcher{
					pos:        position{line: 1357, col: 16, offset: 38158},
					val:        "[a-zA-Z_.:/%#@~]",
					chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
					ranges:     []rune{'a', 'z', 'A', 'Z'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 1359, col: 1, offset: 38207},
			expr: &choiceExpr{
				pos: position{line: 1360, col: 5, offset: 38223},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1360, col: 5, offset: 38223},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 1361, col: 5, offset: 38240},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 1363, col: 1, offset: 38247},
			expr: &actionExpr{
				pos: position{line: 1363, col: 14, offset: 38260},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 1363, col: 14, offset: 38260},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1363, col: 14, offset: 38260},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1363, col: 19, offset: 38265},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1363, col: 22, offset: 38268},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1363, col: 22, offset: 38268},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1363, col: 38, offset: 38284},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobPattern",
			pos:  position{line: 1365, col: 1, offset: 38320},
			expr: &actionExpr{
				pos: position{line: 1366, col: 5, offset: 38336},
				run: (*parser).callonGlobPattern1,
				expr: &seqExpr{
					pos: position{line: 1366, col: 5, offset: 38336},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1366, col: 5, offset: 38336},
							expr: &ruleRefExpr{
								pos:  position{line: 1366, col: 6, offset: 38337},
								name: "GlobProperStart",
							},
						},
						&andExpr{
							pos: position{line: 1366, col: 22, offset: 38353},
							expr: &ruleRefExpr{
								pos:  position{line: 1366, col: 23, offset: 38354},
								name: "GlobHasStar",
							},
						},
						&labeledExpr{
							pos:   position{line: 1366, col: 35, offset: 38366},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1366, col: 40, offset: 38371},
								name: "GlobStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1366, col: 50, offset: 38381},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1366, col: 55, offset: 38386},
								expr: &ruleRefExpr{
									pos:  position{line: 1366, col: 55, offset: 38386},
									name: "GlobRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobProperStart",
			pos:  position{line: 1370, col: 1, offset: 38455},
			expr: &choiceExpr{
				pos: position{line: 1370, col: 19, offset: 38473},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1370, col: 19, offset: 38473},
						name: "KeyWordStart",
					},
					&seqExpr{
						pos: position{line: 1370, col: 34, offset: 38488},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1370, col: 34, offset: 38488},
								expr: &litMatcher{
									pos:        position{line: 1370, col: 34, offset: 38488},
									val:        "*",
									ignoreCase: false,
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1370, col: 39, offset: 38493},
								name: "KeyWordRest",
							},
						},
					},
				},
			},
		},
		{
			name: "GlobHasStar",
			pos:  position{line: 1371, col: 1, offset: 38505},
			expr: &seqExpr{
				pos: position{line: 1371, col: 15, offset: 38519},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1371, col: 15, offset: 38519},
						expr: &ruleRefExpr{
							pos:  position{line: 1371, col: 15, offset: 38519},
							name: "KeyWordRest",
						},
					},
					&litMatcher{
						pos:        position{line: 1371, col: 28, offset: 38532},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "GlobStart",
			pos:  position{line: 1373, col: 1, offset: 38537},
			expr: &choiceExpr{
				pos: position{line: 1374, col: 5, offset: 38551},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1374, col: 5, offset: 38551},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1375, col: 5, offset: 38568},
						name: "GlobEsc",
					},
					&actionExpr{
						pos: position{line: 1376, col: 5, offset: 38580},
						run: (*parser).callonGlobStart4,
						expr: &litMatcher{
							pos:        position{line: 1376, col: 5, offset: 38580},
							val:        "*",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GlobRest",
			pos:  position{line: 1378, col: 1, offset: 38604},
			expr: &choiceExpr{
				pos: position{line: 1379, col: 5, offset: 38617},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1379, col: 5, offset: 38617},
						name: "GlobStart",
					},
					&charClassMatcher{
						pos:        position{line: 1380, col: 5, offset: 38631},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "GlobEsc",
			pos:  position{line: 1382, col: 1, offset: 38638},
			expr: &actionExpr{
				pos: position{line: 1382, col: 11, offset: 38648},
				run: (*parser).callonGlobEsc1,
				expr: &seqExpr{
					pos: position{line: 1382, col: 11, offset: 38648},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1382, col: 11, offset: 38648},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1382, col: 16, offset: 38653},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1382, col: 19, offset: 38656},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1382, col: 19, offset: 38656},
										name: "GlobEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1382, col: 32, offset: 38669},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobEscape",
			pos:  position{line: 1384, col: 1, offset: 38705},
			expr: &choiceExpr{
				pos: position{line: 1385, col: 5, offset: 38720},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1385, col: 5, offset: 38720},
						run: (*parser).callonGlobEscape2,
						expr: &litMatcher{
							pos:        position{line: 1385, col: 5, offset: 38720},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1386, col: 5, offset: 38748},
						run: (*parser).callonGlobEscape4,
						expr: &litMatcher{
							pos:        position{line: 1386, col: 5, offset: 38748},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1387, col: 5, offset: 38778},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 1390, col: 1, offset: 38785},
			expr: &choiceExpr{
				pos: position{line: 1391, col: 5, offset: 38806},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1391, col: 5, offset: 38806},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1391, col: 5, offset: 38806},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1391, col: 5, offset: 38806},
									expr: &choiceExpr{
										pos: position{line: 1391, col: 7, offset: 38808},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1391, col: 7, offset: 38808},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1391, col: 13, offset: 38814},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1391, col: 26, offset: 38827,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1392, col: 5, offset: 38864},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1392, col: 5, offset: 38864},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1392, col: 5, offset: 38864},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1392, col: 10, offset: 38869},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1392, col: 12, offset: 38871},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 1394, col: 1, offset: 38905},
			expr: &choiceExpr{
				pos: position{line: 1395, col: 5, offset: 38924},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1395, col: 5, offset: 38924},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 1396, col: 5, offset: 38945},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 1398, col: 1, offset: 38960},
			expr: &choiceExpr{
				pos: position{line: 1399, col: 5, offset: 38981},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1399, col: 5, offset: 38981},
						val:        "'",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1400, col: 5, offset: 38989},
						run: (*parser).callonSingleCharEscape3,
						expr: &litMatcher{
							pos:        position{line: 1400, col: 5, offset: 38989},
							val:        "\"",
							ignoreCase: false,
						},
					},
					&litMatcher{
						pos:        position{line: 1401, col: 5, offset: 39029},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1402, col: 5, offset: 39038},
						run: (*parser).callonSingleCharEscape6,
						expr: &litMatcher{
							pos:        position{line: 1402, col: 5, offset: 39038},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1403, col: 5, offset: 39067},
						run: (*parser).callonSingleCharEscape8,
						expr: &litMatcher{
							pos:        position{line: 1403, col: 5, offset: 39067},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1404, col: 5, offset: 39096},
						run: (*parser).callonSingleCharEscape10,
						expr: &litMatcher{
							pos:        position{line: 1404, col: 5, offset: 39096},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1405, col: 5, offset: 39125},
						run: (*parser).callonSingleCharEscape12,
						expr: &litMatcher{
							pos:        position{line: 1405, col: 5, offset: 39125},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1406, col: 5, offset: 39154},
						run: (*parser).callonSingleCharEscape14,
						expr: &litMatcher{
							pos:        position{line: 1406, col: 5, offset: 39154},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1407, col: 5, offset: 39183},
						run: (*parser).callonSingleCharEscape16,
						expr: &litMatcher{
							pos:        position{line: 1407, col: 5, offset: 39183},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 1409, col: 1, offset: 39209},
			expr: &choiceExpr{
				pos: position{line: 1410, col: 5, offset: 39227},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1410, col: 5, offset: 39227},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 1410, col: 5, offset: 39227},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1411, col: 5, offset: 39255},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 1411, col: 5, offset: 39255},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1412, col: 5, offset: 39283},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 1414, col: 1, offset: 39289},
			expr: &choiceExpr{
				pos: position{line: 1415, col: 5, offset: 39307},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1415, col: 5, offset: 39307},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 1415, col: 5, offset: 39307},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1415, col: 5, offset: 39307},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1415, col: 9, offset: 39311},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1415, col: 16, offset: 39318},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1415, col: 16, offset: 39318},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1415, col: 25, offset: 39327},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1415, col: 34, offset: 39336},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1415, col: 43, offset: 39345},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1418, col: 5, offset: 39408},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 1418, col: 5, offset: 39408},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1418, col: 5, offset: 39408},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1418, col: 9, offset: 39412},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1418, col: 13, offset: 39416},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1418, col: 20, offset: 39423},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1418, col: 20, offset: 39423},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 1418, col: 29, offset: 39432},
												expr: &ruleRefExpr{
													pos:  position{line: 1418, col: 29, offset: 39432},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1418, col: 39, offset: 39442},
												expr: &ruleRefExpr{
													pos:  position{line: 1418, col: 39, offset: 39442},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1418, col: 49, offset: 39452},
												expr: &ruleRefExpr{
													pos:  position{line: 1418, col: 49, offset: 39452},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1418, col: 59, offset: 39462},
												expr: &ruleRefExpr{
													pos:  position{line: 1418, col: 59, offset: 39462},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1418, col: 69, offset: 39472},
												expr: &ruleRefExpr{
													pos:  position{line: 1418, col: 69, offset: 39472},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1418, col: 80, offset: 39483},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpPattern",
			pos:  position{line: 1422, col: 1, offset: 39537},
			expr: &actionExpr{
				pos: position{line: 1423, col: 5, offset: 39555},
				run: (*parser).callonRegexpPattern1,
				expr: &seqExpr{
					pos: position{line: 1423, col: 5, offset: 39555},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1423, col: 5, offset: 39555},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1423, col: 9, offset: 39559},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1423, col: 14, offset: 39564},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 1423, col: 25, offset: 39575},
							val:        "/",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1423, col: 29, offset: 39579},
							expr: &ruleRefExpr{
								pos:  position{line: 1423, col: 30, offset: 39580},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 1425, col: 1, offset: 39615},
			expr: &actionExpr{
				pos: position{line: 1426, col: 5, offset: 39630},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1426, col: 5, offset: 39630},
					expr: &choiceExpr{
						pos: position{line: 1426, col: 6, offset: 39631},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 1426, col: 6, offset: 39631},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&seqExpr{
								pos: position{line: 1426, col: 15, offset: 39640},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1426, col: 15, offset: 39640},
										val:        "\\",
										ignoreCase: false,
									},
									&anyMatcher{
										line: 1426, col: 20, offset: 39645,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 1428, col: 1, offset: 39681},
			expr: &charClassMatcher{
				pos:        position{line: 1429, col: 5, offset: 39697},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 1431, col: 1, offset: 39712},
			expr: &oneOrMoreExpr{
				pos: position{line: 1431, col: 6, offset: 39717},
				expr: &ruleRefExpr{
					pos:  position{line: 1431, col: 6, offset: 39717},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1433, col: 1, offset: 39728},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1433, col: 6, offset: 39733},
				expr: &ruleRefExpr{
					pos:  position{line: 1433, col: 6, offset: 39733},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 1435, col: 1, offset: 39744},
			expr: &choiceExpr{
				pos: position{line: 1436, col: 5, offset: 39757},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1436, col: 5, offset: 39757},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 1437, col: 5, offset: 39772},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 1438, col: 5, offset: 39791},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 1440, col: 1, offset: 39800},
			expr: &anyMatcher{
				line: 1441, col: 5, offset: 39820,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 1443, col: 1, offset: 39823},
			expr: &choiceExpr{
				pos: position{line: 1444, col: 5, offset: 39851},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1444, col: 5, offset: 39851},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1445, col: 5, offset: 39860},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1446, col: 5, offset: 39869},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1447, col: 5, offset: 39878},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1448, col: 5, offset: 39886},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1449, col: 5, offset: 39899},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 1451, col: 1, offset: 39909},
			expr: &charClassMatcher{
				pos:        position{line: 1452, col: 5, offset: 39928},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 1458, col: 1, offset: 40258},
			expr: &ruleRefExpr{
				pos:  position{line: 1461, col: 5, offset: 40329},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1463, col: 1, offset: 40348},
			expr: &seqExpr{
				pos: position{line: 1464, col: 5, offset: 40369},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1464, col: 5, offset: 40369},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1464, col: 10, offset: 40374},
						expr: &seqExpr{
							pos: position{line: 1464, col: 11, offset: 40375},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1464, col: 11, offset: 40375},
									expr: &litMatcher{
										pos:        position{line: 1464, col: 12, offset: 40376},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1464, col: 17, offset: 40381},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1464, col: 35, offset: 40399},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1466, col: 1, offset: 40405},
			expr: &seqExpr{
				pos: position{line: 1467, col: 5, offset: 40427},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1467, col: 5, offset: 40427},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1467, col: 10, offset: 40432},
						expr: &seqExpr{
							pos: position{line: 1467, col: 11, offset: 40433},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1467, col: 11, offset: 40433},
									expr: &ruleRefExpr{
										pos:  position{line: 1467, col: 12, offset: 40434},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1467, col: 27, offset: 40449},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1469, col: 1, offset: 40468},
			expr: &seqExpr{
				pos: position{line: 1469, col: 7, offset: 40474},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1469, col: 7, offset: 40474},
						expr: &ruleRefExpr{
							pos:  position{line: 1469, col: 7, offset: 40474},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1469, col: 19, offset: 40486},
						name: "LineTerminator",
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 1471, col: 1, offset: 40502},
			expr: &choiceExpr{
				pos: position{line: 1471, col: 7, offset: 40508},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1471, col: 7, offset: 40508},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 1471, col: 11, offset: 40512},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1473, col: 1, offset: 40517},
			expr: &notExpr{
				pos: position{line: 1473, col: 7, offset: 40523},
				expr: &anyMatcher{
					line: 1473, col: 8, offset: 40524,
				},
			},
		},
		{
			name: "EOKW",
			pos:  position{line: 1475, col: 1, offset: 40527},
			expr: &notExpr{
				pos: position{line: 1475, col: 8, offset: 40534},
				expr: &ruleRefExpr{
					pos:  position{line: 1475, col: 9, offset: 40535},
					name: "KeyWordChars",
				},
			},
		},
	},
}

func (c *current) onstart2(scope interface{}) (interface{}, error) {
	return scope, nil
}

func (p *parser) callonstart2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart2(stack["scope"])
}

func (c *current) onstart9(body interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Scope", "body": body, "decls": nil}, nil

}

func (p *parser) callonstart9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart9(stack["body"])
}

func (c *current) onScope1(decls, body interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Scope", "body": body, "decls": decls}, nil

}

func (p *parser) callonScope1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope1(stack["decls"], stack["body"])
}

func (c *current) onSequential1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "ops": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonSequential1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential1(stack["first"], stack["rest"])
}

func (c *current) onSequentialTail1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonSequentialTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequentialTail1(stack["p"])
}

func (c *current) onDecl1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonDecl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDecl1(stack["v"])
}

func (c *current) onConstDecl2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ConstDecl", "name": id, "expr": expr}, nil

}

func (p *parser) callonConstDecl2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDecl2(stack["id"], stack["expr"])
}

func (c *current) onConstDecl13(id, typ interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "ConstDecl",

		"name": id,

		"expr": map[string]interface{}{"kind": "TypeValue", "value": map[string]interface{}{"kind": "TypeDef", "name": id, "type": typ}}}, nil

}

func (p *parser) callonConstDecl13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDecl13(stack["id"], stack["typ"])
}

func (c *current) onFuncDecl1(id, params, expr interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "FuncDecl",

		"name": id,

		"params": params,

		"expr": expr}, nil

}

func (p *parser) callonFuncDecl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncDecl1(stack["id"], stack["params"], stack["expr"])
}

func (c *current) onOperation2(ops interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Parallel", "ops": ops}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["ops"])
}

func (c *current) onOperation12(expr, cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": expr, "cases": cases}, nil

}

func (p *parser) callonOperation12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation12(stack["expr"], stack["cases"])
}

func (c *current) onOperation25(cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": nil, "cases": cases}, nil

}

func (p *parser) callonOperation25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation25(stack["cases"])
}

func (c *current) onOperation35(trunks interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": trunks}, nil

}

func (p *parser) callonOperation35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation35(stack["trunks"])
}

func (c *current) onOperation45(scope interface{}) (interface{}, error) {
	return scope, nil
}

func (p *parser) callonOperation45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation45(stack["scope"])
}

func (c *current) onOperation55(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation55(stack["a"])
}

func (c *current) onOperation61(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation61(stack["a"])
}

func (c *current) onOperation71(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Search", "expr": expr}, nil

}

func (p *parser) callonOperation71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation71(stack["expr"])
}

func (c *current) onOperation77(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation77(stack["expr"])
}

func (c *current) onOperation80(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation80(stack["expr"])
}

func (c *current) onOperation83(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation83(stack["expr"])
}

func (c *current) onLeg1(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLeg1(stack["seq"])
}

func (c *current) onSwitchLeg1(expr, leg interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": expr, "op": leg}, nil

}

func (p *parser) callonSwitchLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchLeg1(stack["expr"], stack["leg"])
}

func (c *current) onCase2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonCase2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase2(stack["expr"])
}

func (c *current) onCase8() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonCase8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase8()
}

func (c *current) onFromLeg1(source, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Trunk", "source": source, "seq": nil}
	if opt != nil {
		m["seq"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonFromLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromLeg1(stack["source"], stack["opt"])
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor13(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor13(stack["expr"])
}

func (c *current) onSearchExpr4(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Term", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonSearchExpr4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr4(stack["v"])
}

func (c *current) onSearchExpr15() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil

}

func (p *parser) callonSearchExpr15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr15()
}

func (c *current) onSearchPredicate2(lhs, op, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": op, "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonSearchPredicate2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPredicate2(stack["lhs"], stack["op"], stack["rhs"])
}

func (c *current) onSearchPredicate12(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchPredicate12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPredicate12(stack["first"], stack["rest"])
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onGlob1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Glob", "pattern": pattern}, nil

}

func (p *parser) callonGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlob1(stack["pattern"])
}

func (c *current) onRegexp1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Regexp", "pattern": pattern}, nil

}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["pattern"])
}

func (c *current) onAggregation2(keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Summarize", "keys": keys, "aggs": nil, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["keys"], stack["limit"])
}

func (c *current) onAggregation10(aggs, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"kind": "Summarize", "keys": nil, "aggs": aggs, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation10(stack["aggs"], stack["keys"], stack["limit"])
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAggAssignment2(lval, agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lval, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment2(stack["lval"], stack["agg"])
}

func (c *current) onAggAssignment11(agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment11(stack["agg"])
}

func (c *current) onAgg1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"kind": "Agg", "name": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonAgg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAgg1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onAggAssignments1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonAggAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssertOp6(e interface{}) (interface{}, error) {
	return []interface{}{e, string(c.text)}, nil
}

func (p *parser) callonAssertOp6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssertOp6(stack["e"])
}

func (c *current) onAssertOp1(expr interface{}) (interface{}, error) {
	// 'assert EXPR' is equivalent to
	// 'yield EXPR ? this : error({message: "assertion failed", "expr": EXPR_text, "on": this}'
	// where EXPR_text is the literal text of EXPR.
	return map[string]interface{}{"kind": "Yield", "exprs": []interface{}{map[string]interface{}{

		"kind": "Conditional",

		"cond": expr.([]interface{})[0],

		"then": map[string]interface{}{"kind": "ID", "name": "this"},

		"else": map[string]interface{}{

			"kind": "Call",

			"name": "error",

			"args": []interface{}{map[string]interface{}{"kind": "RecordExpr", "elems": []interface{}{

				map[string]interface{}{"kind": "Field", "name": "message", "value": map[string]interface{}{

					"kind": "Primitive", "text": "assertion failed", "type": "string"}},

				map[string]interface{}{"kind": "Field", "name": "expr", "value": map[string]interface{}{

					"kind": "Primitive", "text": expr.([]interface{})[1], "type": "string"}},

				map[string]interface{}{"kind": "Field", "name": "on", "value": map[string]interface{}{

					"kind": "ID", "name": "this"}}}}},

			"where": nil}}}}, nil

}

func (p *parser) callonAssertOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssertOp1(stack["expr"])
}

func (c *current) onSortOp10(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortOp10(stack["l"])
}

func (c *current) onSortOp1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var op = map[string]interface{}{"kind": "Sort", "args": list, "order": "asc", "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		op["order"] = "desc"
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			op["nullsfirst"] = true
		}
	}
	return op, nil

}

func (p *parser) callonSortOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortOp1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopOp8(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopOp8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp8(stack["n"])
}

func (c *current) onTopOp20(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopOp20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp20(stack["f"])
}

func (c *current) onTopOp1(limit, flush, fields interface{}) (interface{}, error) {
	var op = map[string]interface{}{"kind": "Top", "limit": 0, "args": nil, "flush": false}
	if limit != nil {
		op["limit"] = limit
	}
	if fields != nil {
		op["args"] = fields
	}
	if flush != nil {
		op["flush"] = true
	}
	return op, nil

}

func (p *parser) callonTopOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cut", "args": args}, nil

}

func (p *parser) callonCutOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutOp1(stack["args"])
}

func (c *current) onDropOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Drop", "args": args}, nil

}

func (p *parser) callonDropOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropOp1(stack["args"])
}

func (c *current) onHeadOp2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": count}, nil
}

func (p *parser) callonHeadOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOp2(stack["count"])
}

func (c *current) onHeadOp10() (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": map[string]interface{}{"kind": "Primitive", "type": "int64", "text": "1"}}, nil
}

func (p *parser) callonHeadOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOp10()
}

func (c *current) onTailOp2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": count}, nil
}

func (p *parser) callonTailOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailOp2(stack["count"])
}

func (c *current) onTailOp10() (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": map[string]interface{}{"kind": "Primitive", "type": "int64", "text": "1"}}, nil
}

func (p *parser) callonTailOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailOp10()
}

func (c *current) onWhereOp1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Where", "expr": expr}, nil

}

func (p *parser) callonWhereOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereOp1(stack["expr"])
}

func (c *current) onUniqOp2() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": true}, nil

}

func (p *parser) callonUniqOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqOp2()
}

func (c *current) onUniqOp7() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": false}, nil

}

func (p *parser) callonUniqOp7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqOp7()
}

func (c *current) onPutOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Put", "args": args}, nil

}

func (p *parser) callonPutOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutOp1(stack["args"])
}

func (c *current) onRenameOp9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameOp9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameOp9(stack["cl"])
}

func (c *current) onRenameOp1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Rename", "args": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameOp1(stack["first"], stack["rest"])
}

func (c *current) onFuseOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Fuse"}, nil

}

func (p *parser) callonFuseOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseOp1()
}

func (c *current) onShapeOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Shape"}, nil

}

func (p *parser) callonShapeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShapeOp1()
}

func (c *current) onJoinOp1(style, rightInput, key, optKey, optArgs interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Join", "style": style, "right_input": rightInput, "left_key": key, "right_key": key, "args": nil}
	if optKey != nil {
		m["right_key"] = optKey.([]interface{})[3]
	}
	if optArgs != nil {
		m["args"] = optArgs.([]interface{})[1]
	}
	return m, nil

}

func (p *parser) callonJoinOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinOp1(stack["style"], stack["rightInput"], stack["key"], stack["optKey"], stack["optArgs"])
}

func (c *current) onJoinStyle2() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle2()
}

func (c *current) onJoinStyle6() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle6()
}

func (c *current) onJoinStyle10() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle10()
}

func (c *current) onJoinStyle14() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonJoinStyle14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle14()
}

func (c *current) onJoinStyle18() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle18()
}

func (c *current) onJoinRightInput2(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonJoinRightInput2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinRightInput2(stack["s"])
}

func (c *current) onJoinRightInput12() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonJoinRightInput12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinRightInput12()
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onSampleOp1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "ops": []interface{}{

		map[string]interface{}{"kind": "Summarize",

			"keys": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "shape"},

				"rhs": map[string]interface{}{"kind": "Call", "name": "typeof",

					"args": []interface{}{e},

					"where": nil}}},

			"aggs": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "sample"},

				"rhs": map[string]interface{}{"kind": "Agg",

					"name": "any",

					"expr": e,

					"where": nil}}},

			"limit": 0},

		map[string]interface{}{"kind": "Yield",

			"exprs": []interface{}{

				map[string]interface{}{"kind": "ID", "name": "sample"}}}}}, nil

}

func (p *parser) callonSampleOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleOp1(stack["e"])
}

func (c *current) onOpAssignment1(a interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpAssignment", "assignments": a}, nil

}

func (p *parser) callonOpAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpAssignment1(stack["a"])
}

func (c *current) onSampleExpr2(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonSampleExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr2(stack["lval"])
}

func (c *current) onSampleExpr7() (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": "this"}, nil
}

func (p *parser) callonSampleExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr7()
}

func (c *current) onFromOp1(source interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": []interface{}{map[string]interface{}{"kind": "Trunk", "source": source}}}, nil

}

func (p *parser) callonFromOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromOp1(stack["source"])
}

func (c *current) onFile1(path, format, sort_key interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "File", "path": path, "format": format, "sort_key": sort_key}, nil

}

func (p *parser) callonFile1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile1(stack["path"], stack["format"], stack["sort_key"])
}

func (c *current) onFrom1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonFrom1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrom1(stack["body"])
}

func (c *current) onPool1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonPool1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPool1(stack["body"])
}

func (c *current) onPoolBody1(spec, at interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pool", "spec": spec, "at": at}, nil

}

func (p *parser) callonPoolBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBody1(stack["spec"], stack["at"])
}

func (c *current) onGet1(url, format, sort_key interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "HTTP", "url": url, "format": format, "sort_key": sort_key}, nil

}

func (p *parser) callonGet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGet1(stack["url"], stack["format"], stack["sort_key"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onPath2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonPath2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath2(stack["v"])
}

func (c *current) onPath5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPath5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath5()
}

func (c *current) onPoolAt1(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonPoolAt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolAt1(stack["id"])
}

func (c *current) onKSUID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKSUID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKSUID1()
}

func (c *current) onPoolSpec2(pool, commit, meta, tap interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": pool, "commit": commit, "meta": meta, "tap": tap}, nil

}

func (p *parser) callonPoolSpec2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec2(stack["pool"], stack["commit"], stack["meta"], stack["tap"])
}

func (c *current) onPoolSpec14(meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": nil, "commit": nil, "meta": meta}, nil

}

func (p *parser) callonPoolSpec14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec14(stack["meta"])
}

func (c *current) onPoolCommit1(commit interface{}) (interface{}, error) {
	return commit, nil
}

func (p *parser) callonPoolCommit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolCommit1(stack["commit"])
}

func (c *current) onPoolMeta1(meta interface{}) (interface{}, error) {
	return meta, nil
}

func (p *parser) callonPoolMeta1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolMeta1(stack["meta"])
}

func (c *current) onPoolName3() (interface{}, error) {
	return map[string]interface{}{"kind": "Glob", "pattern": "*"}, nil
}

func (p *parser) callonPoolName3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName3()
}

func (c *current) onPoolName9(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "String", "text": name}, nil
}

func (p *parser) callonPoolName9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName9(stack["name"])
}

func (c *current) onPoolIdentifier1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPoolIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolIdentifier1()
}

func (c *current) onSortKeyArg1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SortKey", "keys": keys, "order": order}, nil

}

func (p *parser) callonSortKeyArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortKeyArg1(stack["keys"], stack["order"])
}

func (c *current) onTapArg2() (interface{}, error) {
	return true, nil
}

func (p *parser) callonTapArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTapArg2()
}

func (c *current) onTapArg6() (interface{}, error) {
	return false, nil
}

func (p *parser) callonTapArg6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTapArg6()
}

func (c *current) onFormatArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonFormatArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArg1(stack["val"])
}

func (c *current) onOrderSuffix2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix2()
}

func (c *current) onOrderSuffix4() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderSuffix4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix4()
}

func (c *current) onOrderSuffix6() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix6()
}

func (c *current) onPassOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Pass"}, nil

}

func (p *parser) callonPassOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassOp1()
}

func (c *current) onExplodeOp1(args, typ, as interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Explode", "args": args, "as": as, "type": typ}, nil

}

func (p *parser) callonExplodeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplodeOp1(stack["args"], stack["typ"], stack["as"])
}

func (c *current) onMergeOp1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Merge", "expr": expr}, nil

}

func (p *parser) callonMergeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMergeOp1(stack["expr"])
}

func (c *current) onOverOp1(exprs, locals, body interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Over", "exprs": exprs, "locals": locals, "body": body}, nil

}

func (p *parser) callonOverOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverOp1(stack["exprs"], stack["locals"], stack["body"])
}

func (c *current) onLateral2(scope interface{}) (interface{}, error) {
	return scope, nil
}

func (p *parser) callonLateral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLateral2(stack["scope"])
}

func (c *current) onLateral13(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonLateral13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLateral13(stack["seq"])
}

func (c *current) onLocals10(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonLocals10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocals10(stack["a"])
}

func (c *current) onLocals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLocals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocals1(stack["first"], stack["rest"])
}

func (c *current) onLocalsAssignment1(name, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"name": name, "expr": map[string]interface{}{"kind": "ID", "name": name}}
	if opt != nil {
		m["expr"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonLocalsAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocalsAssignment1(stack["name"], stack["opt"])
}

func (c *current) onYieldOp1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Yield", "exprs": exprs}, nil

}

func (p *parser) callonYieldOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYieldOp1(stack["exprs"])
}

func (c *current) onTypeArg1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeArg1(stack["typ"])
}

func (c *current) onAsArg1(lhs interface{}) (interface{}, error) {
	return lhs, nil
}

func (p *parser) callonAsArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsArg1(stack["lhs"])
}

func (c *current) onLvals7(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonLvals7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals7(stack["lval"])
}

func (c *current) onLvals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLvals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals1(stack["first"], stack["rest"])
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignments7(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments7(stack["a"])
}

func (c *current) onAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr1(cond, opt interface{}) (interface{}, error) {
	if opt != nil {
		var Then = opt.([]interface{})[3]
		var Else = opt.([]interface{})[7]
		return map[string]interface{}{"kind": "Conditional", "cond": cond, "then": Then, "else": Else}, nil
	}
	return cond, nil

}

func (p *parser) callonConditionalExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr1(stack["cond"], stack["opt"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onComparisonExpr15() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparisonExpr15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr15()
}

func (c *current) onComparisonExpr1(lhs, opAndRHS interface{}) (interface{}, error) {
	if opAndRHS == nil {
		return lhs, nil
	}
	var op = opAndRHS.([]interface{})[1]
	var rhs = opAndRHS.([]interface{})[3]
	return map[string]interface{}{"kind": "BinaryExpr", "op": op, "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonComparisonExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr1(stack["lhs"], stack["opAndRHS"])
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onNegationExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "-", "operand": e}, nil

}

func (p *parser) callonNegationExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNegationExpr2(stack["e"])
}

func (c *current) onFuncExpr2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr2(stack["first"], stack["rest"])
}

func (c *current) onFuncExpr9(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr9(stack["first"], stack["rest"])
}

func (c *current) onCast1(typ, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": expr, "type": typ}, nil

}

func (p *parser) callonCast1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCast1(stack["typ"], stack["expr"])
}

func (c *current) onFunction3(arg0Text, arg1, where interface{}) (interface{}, error) {
	var arg0 = map[string]interface{}{"kind": "Primitive", "type": "string", "text": arg0Text}
	return map[string]interface{}{"kind": "Call", "name": "regexp", "args": []interface{}{arg0, arg1}, "where": where}, nil

}

func (p *parser) callonFunction3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction3(stack["arg0Text"], stack["arg1"], stack["where"])
}

func (c *current) onFunction21(arg0, arg1Text, arg2, where interface{}) (interface{}, error) {
	var arg1 = map[string]interface{}{"kind": "Primitive", "type": "string", "text": arg1Text}
	return map[string]interface{}{"kind": "Call", "name": "regexp_replace", "args": []interface{}{arg0, arg1, arg2}, "where": where}, nil

}

func (p *parser) callonFunction21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction21(stack["arg0"], stack["arg1Text"], stack["arg2"], stack["where"])
}

func (c *current) onFunction44(fn, args, where interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": fn, "args": args, "where": where}, nil

}

func (p *parser) callonFunction44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction44(stack["fn"], stack["args"], stack["where"])
}

func (c *current) onFunctionArgs2(o interface{}) (interface{}, error) {
	return []interface{}{o}, nil
}

func (p *parser) callonFunctionArgs2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunctionArgs2(stack["o"])
}

func (c *current) onGrep1(pattern, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Grep", "pattern": pattern, "expr": map[string]interface{}{"kind": "ID", "name": "this"}}
	if opt != nil {
		m["expr"] = opt.([]interface{})[2]
	}
	return m, nil

}

func (p *parser) callonGrep1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrep1(stack["pattern"], stack["opt"])
}

func (c *current) onPattern4(s interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "String", "text": s}, nil

}

func (p *parser) callonPattern4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPattern4(stack["s"])
}

func (c *current) onOptionalExprs3() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonOptionalExprs3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalExprs3()
}

func (c *current) onExprs7(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonExprs7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs7(stack["e"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr1(stack["first"], stack["rest"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref14(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": nil, "rhs": to}}, nil

}

func (p *parser) callonDeref14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref14(stack["to"])
}

func (c *current) onDeref23(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref23(stack["expr"])
}

func (c *current) onDeref29(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref29(stack["id"])
}

func (c *current) onPrimary7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary7(stack["expr"])
}

func (c *current) onPrimary15(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary15(stack["expr"])
}

func (c *current) onOverExpr1(exprs, locals, body interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OverExpr", "locals": locals, "exprs": exprs, "body": body}, nil

}

func (p *parser) callonOverExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverExpr1(stack["exprs"], stack["locals"], stack["body"])
}

func (c *current) onRecord1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RecordExpr", "elems": elems}, nil

}

func (p *parser) callonRecord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecord1(stack["elems"])
}

func (c *current) onRecordElems2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonRecordElems2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems2(stack["first"], stack["rest"])
}

func (c *current) onRecordElems9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonRecordElems9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems9()
}

func (c *current) onRecordElemTail1(elem interface{}) (interface{}, error) {
	return elem, nil
}

func (p *parser) callonRecordElemTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElemTail1(stack["elem"])
}

func (c *current) onSpread1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Spread", "expr": expr}, nil

}

func (p *parser) callonSpread1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpread1(stack["expr"])
}

func (c *current) onField1(name, value interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Field", "name": name, "value": value}, nil

}

func (p *parser) callonField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField1(stack["name"], stack["value"])
}

func (c *current) onArray1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ArrayExpr", "elems": elems}, nil

}

func (p *parser) callonArray1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArray1(stack["elems"])
}

func (c *current) onSet1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SetExpr", "elems": elems}, nil

}

func (p *parser) callonSet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSet1(stack["elems"])
}

func (c *current) onVectorElems8(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonVectorElems8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems8(stack["e"])
}

func (c *current) onVectorElems2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonVectorElems2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems2(stack["first"], stack["rest"])
}

func (c *current) onVectorElems15() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonVectorElems15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems15()
}

func (c *current) onVectorElem3(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "VectorValue", "expr": e}, nil
}

func (p *parser) callonVectorElem3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElem3(stack["e"])
}

func (c *current) onMap1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "MapExpr", "entries": exprs}, nil

}

func (p *parser) callonMap1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMap1(stack["exprs"])
}

func (c *current) onEntries2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonEntries2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries2(stack["first"], stack["rest"])
}

func (c *current) onEntries9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonEntries9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries9()
}

func (c *current) onEntryTail1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonEntryTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntryTail1(stack["e"])
}

func (c *current) onEntry1(key, value interface{}) (interface{}, error) {
	return map[string]interface{}{"key": key, "value": value}, nil

}

func (p *parser) callonEntry1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntry1(stack["key"], stack["value"])
}

func (c *current) onSQLOp1(selection, from, joins, where, groupby, having, orderby, limit interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "SQLExpr",

		"select": selection,

		"from": from,

		"joins": joins,

		"where": where,

		"group_by": groupby,

		"having": having,

		"order_by": orderby,

		"limit": limit}, nil

}

func (p *parser) callonSQLOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOp1(stack["selection"], stack["from"], stack["joins"], stack["where"], stack["groupby"], stack["having"], stack["orderby"], stack["limit"])
}

func (c *current) onSQLSelect2() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLSelect2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect2()
}

func (c *current) onSQLSelect7(assignments interface{}) (interface{}, error) {
	return assignments, nil
}

func (p *parser) callonSQLSelect7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect7(stack["assignments"])
}

func (c *current) onSQLAssignment1(rhs, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": rhs}
	if opt != nil {
		m["lhs"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonSQLAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment1(stack["rhs"], stack["opt"])
}

func (c *current) onSQLAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments7(stack["expr"])
}

func (c *current) onSQLAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSQLFrom2(table, alias interface{}) (interface{}, error) {
	return map[string]interface{}{"table": table, "alias": alias}, nil

}

func (p *parser) callonSQLFrom2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom2(stack["table"], stack["alias"])
}

func (c *current) onSQLFrom12() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLFrom12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom12()
}

func (c *current) onSQLAlias2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias2(stack["id"])
}

func (c *current) onSQLAlias9(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias9(stack["id"])
}

func (c *current) onSQLJoins7(join interface{}) (interface{}, error) {
	return join, nil
}

func (p *parser) callonSQLJoins7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins7(stack["join"])
}

func (c *current) onSQLJoins1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLJoins1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins1(stack["first"], stack["rest"])
}

func (c *current) onSQLJoin1(style, table, alias, leftKey, rightKey interface{}) (interface{}, error) {
	return map[string]interface{}{

		"table": table,

		"style": style,

		"left_key": leftKey,

		"right_key": rightKey,

		"alias": alias}, nil

}

func (p *parser) callonSQLJoin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoin1(stack["style"], stack["table"], stack["alias"], stack["leftKey"], stack["rightKey"])
}

func (c *current) onSQLJoinStyle2(style interface{}) (interface{}, error) {
	return style, nil
}

func (p *parser) callonSQLJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle2(stack["style"])
}

func (c *current) onSQLJoinStyle11() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonSQLJoinStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle11()
}

func (c *current) onSQLWhere1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLWhere1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLWhere1(stack["expr"])
}

func (c *current) onSQLGroupBy1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonSQLGroupBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLGroupBy1(stack["columns"])
}

func (c *current) onSQLHaving1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLHaving1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLHaving1(stack["expr"])
}

func (c *current) onSQLOrderBy1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SQLOrderBy", "keys": keys, "order": order}, nil

}

func (p *parser) callonSQLOrderBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrderBy1(stack["keys"], stack["order"])
}

func (c *current) onSQLOrder2(dir interface{}) (interface{}, error) {
	return dir, nil
}

func (p *parser) callonSQLOrder2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder2(stack["dir"])
}

func (c *current) onSQLOrder9() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonSQLOrder9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder9()
}

func (c *current) onSQLLimit2(count interface{}) (interface{}, error) {
	return count, nil
}

func (p *parser) callonSQLLimit2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit2(stack["count"])
}

func (c *current) onSQLLimit9() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonSQLLimit9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit9()
}

func (c *current) onSELECT1() (interface{}, error) {
	return "select", nil
}

func (p *parser) callonSELECT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSELECT1()
}

func (c *current) onAS1() (interface{}, error) {
	return "as", nil
}

func (p *parser) callonAS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAS1()
}

func (c *current) onFROM1() (interface{}, error) {
	return "from", nil
}

func (p *parser) callonFROM1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFROM1()
}

func (c *current) onJOIN1() (interface{}, error) {
	return "join", nil
}

func (p *parser) callonJOIN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJOIN1()
}

func (c *current) onWHERE1() (interface{}, error) {
	return "where", nil
}

func (p *parser) callonWHERE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWHERE1()
}

func (c *current) onGROUP1() (interface{}, error) {
	return "group", nil
}

func (p *parser) callonGROUP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGROUP1()
}

func (c *current) onBY1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonBY1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBY1()
}

func (c *current) onHAVING1() (interface{}, error) {
	return "having", nil
}

func (p *parser) callonHAVING1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHAVING1()
}

func (c *current) onORDER1() (interface{}, error) {
	return "order", nil
}

func (p *parser) callonORDER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onORDER1()
}

func (c *current) onON1() (interface{}, error) {
	return "on", nil
}

func (p *parser) callonON1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onON1()
}

func (c *current) onLIMIT1() (interface{}, error) {
	return "limit", nil
}

func (p *parser) callonLIMIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIMIT1()
}

func (c *current) onASC1() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonASC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onASC1()
}

func (c *current) onDESC1() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonDESC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDESC1()
}

func (c *current) onANTI1() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonANTI1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onANTI1()
}

func (c *current) onLEFT1() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonLEFT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLEFT1()
}

func (c *current) onRIGHT1() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonRIGHT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRIGHT1()
}

func (c *current) onINNER1() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonINNER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINNER1()
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "float64", "text": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "int64", "text": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "null", "text": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onBytesLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bytes", "text": string(c.text)}, nil

}

func (p *parser) callonBytesLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBytesLiteral1()
}

func (c *current) onTypeLiteral1(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonTypeLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeLiteral1(stack["typ"])
}

func (c *current) onCastType3(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonCastType3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCastType3(stack["typ"])
}

func (c *current) onAmbiguousType2(name interface{}) (interface{}, error) {
	return name, nil
}

func (p *parser) callonAmbiguousType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType2(stack["name"])
}

func (c *current) onAmbiguousType8(name, opt interface{}) (interface{}, error) {
	if opt != nil {
		return map[string]interface{}{"kind": "TypeDef", "name": name, "type": opt.([]interface{})[3]}, nil
	}
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType8(stack["name"], stack["opt"])
}

func (c *current) onAmbiguousType19(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType19(stack["name"])
}

func (c *current) onAmbiguousType22(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonAmbiguousType22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType22(stack["u"])
}

func (c *current) onTypeUnion1(types interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeUnion", "types": types}, nil

}

func (p *parser) callonTypeUnion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeUnion1(stack["types"])
}

func (c *current) onTypeList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeList1(stack["first"], stack["rest"])
}

func (c *current) onTypeListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeListTail1(stack["typ"])
}

func (c *current) onComplexType2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType2(stack["fields"])
}

func (c *current) onComplexType10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexType10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType10(stack["typ"])
}

func (c *current) onComplexType18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexType18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType18(stack["typ"])
}

func (c *current) onComplexType26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexType26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType26(stack["keyType"], stack["valType"])
}

func (c *current) onTemplateLiteral1(v interface{}) (interface{}, error) {
	if len(v.([]interface{})) == 0 {
		return map[string]interface{}{"kind": "Primitive", "type": "string", "text": ""}, nil
	}
	return makeTemplateExprChain(v), nil

}

func (p *parser) callonTemplateLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteral1(stack["v"])
}

func (c *current) onTemplateLiteralParts2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts2(stack["v"])
}

func (c *current) onTemplateLiteralParts9(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts9(stack["v"])
}

func (c *current) onTemplateDoubleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateDoubleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedPart3(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar2(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar7(stack["v"])
}

func (c *current) onTemplateSingleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateSingleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedPart3(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar2(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar7(stack["v"])
}

func (c *current) onTemplateExpr1(e interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "Cast",

		"expr": e,

		"type": map[string]interface{}{

			"kind": "TypeValue",

			"value": map[string]interface{}{"kind": "TypePrimitive", "name": "string"}}}, nil

}

func (p *parser) callonTemplateExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateExpr1(stack["e"])
}

func (c *current) onPrimitiveType1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveType1()
}

func (c *current) onTypeFieldList2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList2(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldList9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonTypeFieldList9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList9()
}

func (c *current) onTypeFieldListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTail1(stack["typ"])
}

func (c *current) onTypeField1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeField1(stack["name"], stack["typ"])
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return "in", nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onIdentifierName19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName19()
}

func (c *current) onIdentifierName21(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName21(stack["id"])
}

func (c *current) onIdentifierNames7(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierNames7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierNames7(stack["id"])
}

func (c *current) onIdentifierNames1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonIdentifierNames1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierNames1(stack["first"], stack["rest"])
}

func (c *current) onTime1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "time", "text": string(c.text)}, nil

}

func (p *parser) callonTime1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTime1()
}

func (c *current) onDuration1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "duration", "text": string(c.text)}, nil

}

func (p *parser) callonDuration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDuration1()
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onFloatString22() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFloatString22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString22()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordChars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordChars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordChars1()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onGlobPattern1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil

}

func (p *parser) callonGlobPattern1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobPattern1(stack["head"], stack["tail"])
}

func (c *current) onGlobStart4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonGlobStart4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobStart4()
}

func (c *current) onGlobEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonGlobEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEsc1(stack["s"])
}

func (c *current) onGlobEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonGlobEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape2()
}

func (c *current) onGlobEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonGlobEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape4()
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onSingleCharEscape3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleCharEscape3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape3()
}

func (c *current) onSingleCharEscape6() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape6()
}

func (c *current) onSingleCharEscape8() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape8()
}

func (c *current) onSingleCharEscape10() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape10()
}

func (c *current) onSingleCharEscape12() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape12()
}

func (c *current) onSingleCharEscape14() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape14()
}

func (c *current) onSingleCharEscape16() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape16()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexpPattern1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexpPattern1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpPattern1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
