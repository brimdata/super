// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 7, col: 1, offset: 26},
			expr: &actionExpr{
				pos: position{line: 7, col: 9, offset: 34},
				run: (*parser).callonstart1,
				expr: &seqExpr{
					pos: position{line: 7, col: 9, offset: 34},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 7, col: 9, offset: 34},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 7, col: 12, offset: 37},
							label: "ast",
							expr: &ruleRefExpr{
								pos:  position{line: 7, col: 16, offset: 41},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 27, offset: 52},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 30, offset: 55},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Sequential",
			pos:  position{line: 9, col: 1, offset: 80},
			expr: &actionExpr{
				pos: position{line: 10, col: 5, offset: 95},
				run: (*parser).callonSequential1,
				expr: &seqExpr{
					pos: position{line: 10, col: 5, offset: 95},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 10, col: 5, offset: 95},
							label: "consts",
							expr: &ruleRefExpr{
								pos:  position{line: 10, col: 12, offset: 102},
								name: "Consts",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 10, col: 19, offset: 109},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 10, col: 22, offset: 112},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 10, col: 28, offset: 118},
								name: "Operation",
							},
						},
						&labeledExpr{
							pos:   position{line: 10, col: 38, offset: 128},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 10, col: 43, offset: 133},
								expr: &ruleRefExpr{
									pos:  position{line: 10, col: 43, offset: 133},
									name: "SequentialTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SequentialTail",
			pos:  position{line: 14, col: 1, offset: 303},
			expr: &actionExpr{
				pos: position{line: 14, col: 18, offset: 320},
				run: (*parser).callonSequentialTail1,
				expr: &seqExpr{
					pos: position{line: 14, col: 18, offset: 320},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 14, col: 18, offset: 320},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 14, col: 21, offset: 323},
							name: "Pipe",
						},
						&ruleRefExpr{
							pos:  position{line: 14, col: 26, offset: 328},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 14, col: 29, offset: 331},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 14, col: 31, offset: 333},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Consts",
			pos:  position{line: 16, col: 1, offset: 362},
			expr: &choiceExpr{
				pos: position{line: 17, col: 5, offset: 373},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 17, col: 5, offset: 373},
						expr: &ruleRefExpr{
							pos:  position{line: 17, col: 5, offset: 373},
							name: "Const",
						},
					},
					&actionExpr{
						pos: position{line: 18, col: 5, offset: 384},
						run: (*parser).callonConsts4,
						expr: &ruleRefExpr{
							pos:  position{line: 18, col: 5, offset: 384},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Const",
			pos:  position{line: 20, col: 1, offset: 420},
			expr: &actionExpr{
				pos: position{line: 20, col: 9, offset: 428},
				run: (*parser).callonConst1,
				expr: &seqExpr{
					pos: position{line: 20, col: 9, offset: 428},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 20, col: 9, offset: 428},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 20, col: 12, offset: 431},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 20, col: 14, offset: 433},
								name: "ConstDef",
							},
						},
					},
				},
			},
		},
		{
			name: "ConstDef",
			pos:  position{line: 22, col: 1, offset: 461},
			expr: &choiceExpr{
				pos: position{line: 23, col: 5, offset: 474},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 23, col: 5, offset: 474},
						run: (*parser).callonConstDef2,
						expr: &seqExpr{
							pos: position{line: 23, col: 5, offset: 474},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 23, col: 5, offset: 474},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 23, col: 13, offset: 482},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 23, col: 15, offset: 484},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 23, col: 18, offset: 487},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 23, col: 33, offset: 502},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 23, col: 36, offset: 505},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 23, col: 40, offset: 509},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 23, col: 43, offset: 512},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 23, col: 48, offset: 517},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 26, col: 5, offset: 599},
						run: (*parser).callonConstDef13,
						expr: &seqExpr{
							pos: position{line: 26, col: 5, offset: 599},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 26, col: 5, offset: 599},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 26, col: 12, offset: 606},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 26, col: 14, offset: 608},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 26, col: 17, offset: 611},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 26, col: 32, offset: 626},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 26, col: 35, offset: 629},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 26, col: 39, offset: 633},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 26, col: 42, offset: 636},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 26, col: 46, offset: 640},
										name: "Type",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operation",
			pos:  position{line: 35, col: 1, offset: 863},
			expr: &choiceExpr{
				pos: position{line: 36, col: 5, offset: 877},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 36, col: 5, offset: 877},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 36, col: 5, offset: 877},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 36, col: 5, offset: 877},
									val:        "fork",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 36, col: 12, offset: 884},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 36, col: 15, offset: 887},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 36, col: 19, offset: 891},
									label: "ops",
									expr: &oneOrMoreExpr{
										pos: position{line: 36, col: 23, offset: 895},
										expr: &ruleRefExpr{
											pos:  position{line: 36, col: 23, offset: 895},
											name: "Leg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 36, col: 28, offset: 900},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 36, col: 31, offset: 903},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 39, col: 5, offset: 992},
						run: (*parser).callonOperation12,
						expr: &seqExpr{
							pos: position{line: 39, col: 5, offset: 992},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 39, col: 5, offset: 992},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 39, col: 14, offset: 1001},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 39, col: 16, offset: 1003},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 39, col: 21, offset: 1008},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 39, col: 26, offset: 1013},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 39, col: 28, offset: 1015},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 39, col: 32, offset: 1019},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 39, col: 38, offset: 1025},
										expr: &ruleRefExpr{
											pos:  position{line: 39, col: 38, offset: 1025},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 39, col: 49, offset: 1036},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 39, col: 52, offset: 1039},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 42, col: 5, offset: 1144},
						run: (*parser).callonOperation25,
						expr: &seqExpr{
							pos: position{line: 42, col: 5, offset: 1144},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 42, col: 5, offset: 1144},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 42, col: 14, offset: 1153},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 42, col: 17, offset: 1156},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 42, col: 21, offset: 1160},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 42, col: 27, offset: 1166},
										expr: &ruleRefExpr{
											pos:  position{line: 42, col: 27, offset: 1166},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 42, col: 38, offset: 1177},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 42, col: 41, offset: 1180},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 45, col: 5, offset: 1284},
						run: (*parser).callonOperation35,
						expr: &seqExpr{
							pos: position{line: 45, col: 5, offset: 1284},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 45, col: 5, offset: 1284},
									val:        "from",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 45, col: 12, offset: 1291},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 45, col: 15, offset: 1294},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 45, col: 19, offset: 1298},
									label: "trunks",
									expr: &oneOrMoreExpr{
										pos: position{line: 45, col: 26, offset: 1305},
										expr: &ruleRefExpr{
											pos:  position{line: 45, col: 26, offset: 1305},
											name: "FromLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 45, col: 35, offset: 1314},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 45, col: 38, offset: 1317},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&labeledExpr{
						pos:   position{line: 48, col: 5, offset: 1408},
						label: "op",
						expr: &ruleRefExpr{
							pos:  position{line: 48, col: 8, offset: 1411},
							name: "Operator",
						},
					},
					&actionExpr{
						pos: position{line: 49, col: 5, offset: 1424},
						run: (*parser).callonOperation47,
						expr: &seqExpr{
							pos: position{line: 49, col: 5, offset: 1424},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 49, col: 5, offset: 1424},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 49, col: 7, offset: 1426},
										name: "OpAssignment",
									},
								},
								&andExpr{
									pos: position{line: 49, col: 20, offset: 1439},
									expr: &ruleRefExpr{
										pos:  position{line: 49, col: 21, offset: 1440},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 50, col: 5, offset: 1470},
						run: (*parser).callonOperation53,
						expr: &seqExpr{
							pos: position{line: 50, col: 5, offset: 1470},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 50, col: 5, offset: 1470},
									expr: &seqExpr{
										pos: position{line: 50, col: 7, offset: 1472},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 50, col: 7, offset: 1472},
												name: "Function",
											},
											&ruleRefExpr{
												pos:  position{line: 50, col: 16, offset: 1481},
												name: "EndOfOp",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 50, col: 25, offset: 1490},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 50, col: 27, offset: 1492},
										name: "Aggregation",
									},
								},
								&andExpr{
									pos: position{line: 50, col: 39, offset: 1504},
									expr: &ruleRefExpr{
										pos:  position{line: 50, col: 40, offset: 1505},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 51, col: 5, offset: 1536},
						run: (*parser).callonOperation63,
						expr: &seqExpr{
							pos: position{line: 51, col: 5, offset: 1536},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 51, col: 5, offset: 1536},
									val:        "search",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 51, col: 14, offset: 1545},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 51, col: 16, offset: 1547},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 51, col: 21, offset: 1552},
										name: "SearchBoolean",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 54, col: 5, offset: 1651},
						run: (*parser).callonOperation69,
						expr: &labeledExpr{
							pos:   position{line: 54, col: 5, offset: 1651},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 54, col: 10, offset: 1656},
								name: "SearchBoolean",
							},
						},
					},
					&actionExpr{
						pos: position{line: 57, col: 5, offset: 1755},
						run: (*parser).callonOperation72,
						expr: &labeledExpr{
							pos:   position{line: 57, col: 5, offset: 1755},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 57, col: 10, offset: 1760},
								name: "Cast",
							},
						},
					},
					&actionExpr{
						pos: position{line: 60, col: 5, offset: 1848},
						run: (*parser).callonOperation75,
						expr: &labeledExpr{
							pos:   position{line: 60, col: 5, offset: 1848},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 60, col: 10, offset: 1853},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "EndOfOp",
			pos:  position{line: 64, col: 1, offset: 1940},
			expr: &seqExpr{
				pos: position{line: 64, col: 11, offset: 1950},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 64, col: 11, offset: 1950},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 64, col: 15, offset: 1954},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 64, col: 15, offset: 1954},
								name: "Pipe",
							},
							&ruleRefExpr{
								pos:  position{line: 64, col: 22, offset: 1961},
								name: "SearchKeywordGuard",
							},
							&litMatcher{
								pos:        position{line: 64, col: 43, offset: 1982},
								val:        "=>",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 64, col: 50, offset: 1989},
								val:        ")",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 64, col: 56, offset: 1995},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "Pipe",
			pos:  position{line: 65, col: 1, offset: 2000},
			expr: &seqExpr{
				pos: position{line: 65, col: 8, offset: 2007},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 65, col: 8, offset: 2007},
						val:        "|",
						ignoreCase: false,
					},
					&notExpr{
						pos: position{line: 65, col: 12, offset: 2011},
						expr: &choiceExpr{
							pos: position{line: 65, col: 14, offset: 2013},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 65, col: 14, offset: 2013},
									val:        "{",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 65, col: 20, offset: 2019},
									val:        "[",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Leg",
			pos:  position{line: 67, col: 1, offset: 2025},
			expr: &actionExpr{
				pos: position{line: 68, col: 5, offset: 2033},
				run: (*parser).callonLeg1,
				expr: &seqExpr{
					pos: position{line: 68, col: 5, offset: 2033},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 68, col: 5, offset: 2033},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 68, col: 8, offset: 2036},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 68, col: 13, offset: 2041},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 68, col: 16, offset: 2044},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 68, col: 18, offset: 2046},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchLeg",
			pos:  position{line: 70, col: 1, offset: 2076},
			expr: &actionExpr{
				pos: position{line: 71, col: 5, offset: 2090},
				run: (*parser).callonSwitchLeg1,
				expr: &seqExpr{
					pos: position{line: 71, col: 5, offset: 2090},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 71, col: 5, offset: 2090},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 71, col: 8, offset: 2093},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 71, col: 13, offset: 2098},
								name: "Case",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 71, col: 18, offset: 2103},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 71, col: 21, offset: 2106},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 71, col: 26, offset: 2111},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 71, col: 29, offset: 2114},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 71, col: 32, offset: 2117},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "Case",
			pos:  position{line: 75, col: 1, offset: 2202},
			expr: &choiceExpr{
				pos: position{line: 76, col: 5, offset: 2211},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 76, col: 5, offset: 2211},
						run: (*parser).callonCase2,
						expr: &seqExpr{
							pos: position{line: 76, col: 5, offset: 2211},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 76, col: 5, offset: 2211},
									val:        "case",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 76, col: 12, offset: 2218},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 76, col: 14, offset: 2220},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 76, col: 19, offset: 2225},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 77, col: 5, offset: 2255},
						run: (*parser).callonCase8,
						expr: &litMatcher{
							pos:        position{line: 77, col: 5, offset: 2255},
							val:        "default",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromLeg",
			pos:  position{line: 79, col: 1, offset: 2286},
			expr: &actionExpr{
				pos: position{line: 80, col: 5, offset: 2298},
				run: (*parser).callonFromLeg1,
				expr: &seqExpr{
					pos: position{line: 80, col: 5, offset: 2298},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 80, col: 5, offset: 2298},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 80, col: 8, offset: 2301},
							label: "source",
							expr: &ruleRefExpr{
								pos:  position{line: 80, col: 15, offset: 2308},
								name: "FromSource",
							},
						},
						&labeledExpr{
							pos:   position{line: 80, col: 26, offset: 2319},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 80, col: 30, offset: 2323},
								expr: &seqExpr{
									pos: position{line: 80, col: 31, offset: 2324},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 80, col: 31, offset: 2324},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 80, col: 34, offset: 2327},
											val:        "=>",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 80, col: 39, offset: 2332},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 80, col: 43, offset: 2336},
											name: "Sequential",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FromSource",
			pos:  position{line: 88, col: 1, offset: 2534},
			expr: &choiceExpr{
				pos: position{line: 89, col: 5, offset: 2549},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 89, col: 5, offset: 2549},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 90, col: 5, offset: 2558},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 91, col: 5, offset: 2566},
						name: "Pool",
					},
					&ruleRefExpr{
						pos:  position{line: 92, col: 5, offset: 2575},
						name: "PassOp",
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 94, col: 1, offset: 2583},
			expr: &seqExpr{
				pos: position{line: 94, col: 13, offset: 2595},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 94, col: 13, offset: 2595},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 94, col: 17, offset: 2599},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 94, col: 18, offset: 2600},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 94, col: 18, offset: 2600},
										expr: &litMatcher{
											pos:        position{line: 94, col: 19, offset: 2601},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 94, col: 24, offset: 2606},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 94, col: 38, offset: 2620},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 94, col: 57, offset: 2639},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 94, col: 82, offset: 2664},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 94, col: 88, offset: 2670},
								val:        "(",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 94, col: 94, offset: 2676},
								val:        "[",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 94, col: 100, offset: 2682},
								val:        "~",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 96, col: 1, offset: 2688},
			expr: &actionExpr{
				pos: position{line: 96, col: 14, offset: 2701},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 96, col: 15, offset: 2702},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 96, col: 15, offset: 2702},
							val:        "==",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 96, col: 22, offset: 2709},
							val:        "!=",
							ignoreCase: false,
						},
						&seqExpr{
							pos: position{line: 96, col: 30, offset: 2717},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 96, col: 30, offset: 2717},
									val:        "in",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 96, col: 35, offset: 2722},
									expr: &ruleRefExpr{
										pos:  position{line: 96, col: 36, offset: 2723},
										name: "IdentifierRest",
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 96, col: 54, offset: 2741},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 96, col: 61, offset: 2748},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 96, col: 67, offset: 2754},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 96, col: 74, offset: 2761},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 98, col: 1, offset: 2798},
			expr: &actionExpr{
				pos: position{line: 99, col: 5, offset: 2816},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 99, col: 5, offset: 2816},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 99, col: 5, offset: 2816},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 99, col: 11, offset: 2822},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 99, col: 21, offset: 2832},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 99, col: 26, offset: 2837},
								expr: &ruleRefExpr{
									pos:  position{line: 99, col: 26, offset: 2837},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 103, col: 1, offset: 2911},
			expr: &actionExpr{
				pos: position{line: 103, col: 16, offset: 2926},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 103, col: 16, offset: 2926},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 103, col: 16, offset: 2926},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 103, col: 18, offset: 2928},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 103, col: 26, offset: 2936},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 103, col: 28, offset: 2938},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 103, col: 30, offset: 2940},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 105, col: 1, offset: 2990},
			expr: &actionExpr{
				pos: position{line: 106, col: 5, offset: 3004},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 106, col: 5, offset: 3004},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 106, col: 5, offset: 3004},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 106, col: 11, offset: 3010},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 107, col: 5, offset: 3027},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 107, col: 10, offset: 3032},
								expr: &actionExpr{
									pos: position{line: 107, col: 11, offset: 3033},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 107, col: 11, offset: 3033},
										exprs: []interface{}{
											&zeroOrOneExpr{
												pos: position{line: 107, col: 11, offset: 3033},
												expr: &seqExpr{
													pos: position{line: 107, col: 12, offset: 3034},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 107, col: 12, offset: 3034},
															name: "_",
														},
														&ruleRefExpr{
															pos:  position{line: 107, col: 14, offset: 3036},
															name: "AndToken",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 107, col: 25, offset: 3047},
												name: "_",
											},
											&notExpr{
												pos: position{line: 107, col: 27, offset: 3049},
												expr: &choiceExpr{
													pos: position{line: 107, col: 29, offset: 3051},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 107, col: 29, offset: 3051},
															name: "OrToken",
														},
														&ruleRefExpr{
															pos:  position{line: 107, col: 39, offset: 3061},
															name: "SearchKeywordGuard",
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 107, col: 59, offset: 3081},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 107, col: 64, offset: 3086},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchKeywordGuard",
			pos:  position{line: 111, col: 1, offset: 3202},
			expr: &choiceExpr{
				pos: position{line: 112, col: 5, offset: 3225},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 112, col: 5, offset: 3225},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 112, col: 5, offset: 3225},
								name: "FromSource",
							},
							&ruleRefExpr{
								pos:  position{line: 112, col: 16, offset: 3236},
								name: "__",
							},
							&litMatcher{
								pos:        position{line: 112, col: 19, offset: 3239},
								val:        "=>",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 112, col: 24, offset: 3244},
								name: "__",
							},
						},
					},
					&seqExpr{
						pos: position{line: 113, col: 5, offset: 3251},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 113, col: 5, offset: 3251},
								name: "Case",
							},
							&ruleRefExpr{
								pos:  position{line: 113, col: 10, offset: 3256},
								name: "__",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 115, col: 1, offset: 3260},
			expr: &choiceExpr{
				pos: position{line: 116, col: 5, offset: 3277},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 116, col: 5, offset: 3277},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 116, col: 5, offset: 3277},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 116, col: 6, offset: 3278},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 116, col: 6, offset: 3278},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 116, col: 6, offset: 3278},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 116, col: 15, offset: 3287},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 116, col: 19, offset: 3291},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 116, col: 19, offset: 3291},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 116, col: 23, offset: 3295},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 116, col: 27, offset: 3299},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 116, col: 29, offset: 3301},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 119, col: 5, offset: 3413},
						run: (*parser).callonSearchFactor13,
						expr: &seqExpr{
							pos: position{line: 119, col: 5, offset: 3413},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 119, col: 5, offset: 3413},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 119, col: 9, offset: 3417},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 119, col: 12, offset: 3420},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 119, col: 17, offset: 3425},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 119, col: 31, offset: 3439},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 119, col: 34, offset: 3442},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 120, col: 5, offset: 3471},
						name: "SearchExpr",
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 122, col: 1, offset: 3483},
			expr: &choiceExpr{
				pos: position{line: 123, col: 5, offset: 3498},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 123, col: 5, offset: 3498},
						name: "Glob",
					},
					&ruleRefExpr{
						pos:  position{line: 124, col: 5, offset: 3507},
						name: "Regexp",
					},
					&actionExpr{
						pos: position{line: 125, col: 5, offset: 3518},
						run: (*parser).callonSearchExpr4,
						expr: &seqExpr{
							pos: position{line: 125, col: 5, offset: 3518},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 125, col: 5, offset: 3518},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 125, col: 7, offset: 3520},
										name: "SearchValue",
									},
								},
								&choiceExpr{
									pos: position{line: 125, col: 20, offset: 3533},
									alternatives: []interface{}{
										&notExpr{
											pos: position{line: 125, col: 20, offset: 3533},
											expr: &ruleRefExpr{
												pos:  position{line: 125, col: 21, offset: 3534},
												name: "ExprGuard",
											},
										},
										&andExpr{
											pos: position{line: 125, col: 33, offset: 3546},
											expr: &seqExpr{
												pos: position{line: 125, col: 35, offset: 3548},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 125, col: 35, offset: 3548},
														name: "_",
													},
													&ruleRefExpr{
														pos:  position{line: 125, col: 37, offset: 3550},
														name: "Glob",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 128, col: 5, offset: 3662},
						run: (*parser).callonSearchExpr15,
						expr: &seqExpr{
							pos: position{line: 128, col: 5, offset: 3662},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 128, col: 5, offset: 3662},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 128, col: 9, offset: 3666},
									expr: &ruleRefExpr{
										pos:  position{line: 128, col: 10, offset: 3667},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 131, col: 5, offset: 3783},
						name: "SearchPredicate",
					},
				},
			},
		},
		{
			name: "SearchPredicate",
			pos:  position{line: 133, col: 1, offset: 3800},
			expr: &choiceExpr{
				pos: position{line: 134, col: 5, offset: 3820},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 134, col: 5, offset: 3820},
						run: (*parser).callonSearchPredicate2,
						expr: &seqExpr{
							pos: position{line: 134, col: 5, offset: 3820},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 134, col: 5, offset: 3820},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 134, col: 9, offset: 3824},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 134, col: 22, offset: 3837},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 134, col: 25, offset: 3840},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 134, col: 28, offset: 3843},
										name: "Comparator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 134, col: 39, offset: 3854},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 134, col: 42, offset: 3857},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 134, col: 46, offset: 3861},
										name: "AdditiveExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 137, col: 6, offset: 3984},
						run: (*parser).callonSearchPredicate12,
						expr: &seqExpr{
							pos: position{line: 137, col: 6, offset: 3984},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 137, col: 6, offset: 3984},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 137, col: 12, offset: 3990},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 137, col: 21, offset: 3999},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 137, col: 26, offset: 4004},
										expr: &ruleRefExpr{
											pos:  position{line: 137, col: 27, offset: 4005},
											name: "Deref",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 141, col: 1, offset: 4077},
			expr: &choiceExpr{
				pos: position{line: 142, col: 5, offset: 4093},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 142, col: 5, offset: 4093},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 143, col: 5, offset: 4105},
						run: (*parser).callonSearchValue3,
						expr: &seqExpr{
							pos: position{line: 143, col: 5, offset: 4105},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 143, col: 5, offset: 4105},
									expr: &ruleRefExpr{
										pos:  position{line: 143, col: 6, offset: 4106},
										name: "RegexpPattern",
									},
								},
								&labeledExpr{
									pos:   position{line: 143, col: 20, offset: 4120},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 143, col: 22, offset: 4122},
										name: "KeyWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Glob",
			pos:  position{line: 147, col: 1, offset: 4230},
			expr: &actionExpr{
				pos: position{line: 148, col: 5, offset: 4239},
				run: (*parser).callonGlob1,
				expr: &labeledExpr{
					pos:   position{line: 148, col: 5, offset: 4239},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 148, col: 13, offset: 4247},
						name: "GlobPattern",
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 152, col: 1, offset: 4343},
			expr: &actionExpr{
				pos: position{line: 153, col: 5, offset: 4354},
				run: (*parser).callonRegexp1,
				expr: &labeledExpr{
					pos:   position{line: 153, col: 5, offset: 4354},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 153, col: 13, offset: 4362},
						name: "RegexpPattern",
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 159, col: 1, offset: 4488},
			expr: &choiceExpr{
				pos: position{line: 160, col: 5, offset: 4504},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 160, col: 5, offset: 4504},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 160, col: 5, offset: 4504},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 160, col: 5, offset: 4504},
									expr: &ruleRefExpr{
										pos:  position{line: 160, col: 5, offset: 4504},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 160, col: 16, offset: 4515},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 160, col: 21, offset: 4520},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 160, col: 33, offset: 4532},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 160, col: 39, offset: 4538},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 163, col: 5, offset: 4664},
						run: (*parser).callonAggregation10,
						expr: &seqExpr{
							pos: position{line: 163, col: 5, offset: 4664},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 163, col: 5, offset: 4664},
									expr: &ruleRefExpr{
										pos:  position{line: 163, col: 5, offset: 4664},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 163, col: 16, offset: 4675},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 163, col: 21, offset: 4680},
										name: "AggAssignments",
									},
								},
								&labeledExpr{
									pos:   position{line: 163, col: 36, offset: 4695},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 163, col: 41, offset: 4700},
										expr: &seqExpr{
											pos: position{line: 163, col: 42, offset: 4701},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 163, col: 42, offset: 4701},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 163, col: 44, offset: 4703},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 163, col: 58, offset: 4717},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 163, col: 64, offset: 4723},
										name: "LimitArg",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Summarize",
			pos:  position{line: 171, col: 1, offset: 4937},
			expr: &seqExpr{
				pos: position{line: 171, col: 13, offset: 4949},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 171, col: 13, offset: 4949},
						val:        "summarize",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 171, col: 25, offset: 4961},
						name: "_",
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 173, col: 1, offset: 4964},
			expr: &actionExpr{
				pos: position{line: 174, col: 5, offset: 4980},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 174, col: 5, offset: 4980},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 174, col: 5, offset: 4980},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 174, col: 13, offset: 4988},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 174, col: 15, offset: 4990},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 174, col: 23, offset: 4998},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 176, col: 1, offset: 5039},
			expr: &choiceExpr{
				pos: position{line: 177, col: 5, offset: 5052},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 177, col: 5, offset: 5052},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 177, col: 5, offset: 5052},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 177, col: 5, offset: 5052},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 177, col: 7, offset: 5054},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 177, col: 14, offset: 5061},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 177, col: 16, offset: 5063},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 177, col: 25, offset: 5072},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 177, col: 27, offset: 5074},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 177, col: 33, offset: 5080},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 178, col: 5, offset: 5111},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 178, col: 5, offset: 5111},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 183, col: 1, offset: 5371},
			expr: &choiceExpr{
				pos: position{line: 184, col: 5, offset: 5390},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 184, col: 5, offset: 5390},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 185, col: 5, offset: 5405},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 185, col: 5, offset: 5405},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 185, col: 10, offset: 5410},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 187, col: 1, offset: 5502},
			expr: &actionExpr{
				pos: position{line: 188, col: 5, offset: 5522},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 188, col: 5, offset: 5522},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 188, col: 5, offset: 5522},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 188, col: 11, offset: 5528},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 188, col: 26, offset: 5543},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 188, col: 31, offset: 5548},
								expr: &actionExpr{
									pos: position{line: 188, col: 32, offset: 5549},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 188, col: 32, offset: 5549},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 188, col: 32, offset: 5549},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 188, col: 35, offset: 5552},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 188, col: 39, offset: 5556},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 188, col: 42, offset: 5559},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 188, col: 47, offset: 5564},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignment",
			pos:  position{line: 192, col: 1, offset: 5686},
			expr: &choiceExpr{
				pos: position{line: 193, col: 5, offset: 5704},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 193, col: 5, offset: 5704},
						run: (*parser).callonAggAssignment2,
						expr: &seqExpr{
							pos: position{line: 193, col: 5, offset: 5704},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 193, col: 5, offset: 5704},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 193, col: 10, offset: 5709},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 193, col: 15, offset: 5714},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 193, col: 18, offset: 5717},
									val:        ":=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 193, col: 23, offset: 5722},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 193, col: 26, offset: 5725},
									label: "agg",
									expr: &ruleRefExpr{
										pos:  position{line: 193, col: 30, offset: 5729},
										name: "Agg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 196, col: 5, offset: 5833},
						run: (*parser).callonAggAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 196, col: 5, offset: 5833},
							label: "agg",
							expr: &ruleRefExpr{
								pos:  position{line: 196, col: 9, offset: 5837},
								name: "Agg",
							},
						},
					},
				},
			},
		},
		{
			name: "Agg",
			pos:  position{line: 200, col: 1, offset: 5937},
			expr: &actionExpr{
				pos: position{line: 201, col: 5, offset: 5945},
				run: (*parser).callonAgg1,
				expr: &seqExpr{
					pos: position{line: 201, col: 5, offset: 5945},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 201, col: 5, offset: 5945},
							expr: &ruleRefExpr{
								pos:  position{line: 201, col: 6, offset: 5946},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 201, col: 16, offset: 5956},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 201, col: 19, offset: 5959},
								name: "AggName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 201, col: 27, offset: 5967},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 201, col: 30, offset: 5970},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 201, col: 34, offset: 5974},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 201, col: 37, offset: 5977},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 201, col: 42, offset: 5982},
								expr: &choiceExpr{
									pos: position{line: 201, col: 43, offset: 5983},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 201, col: 43, offset: 5983},
											name: "OverExpr",
										},
										&ruleRefExpr{
											pos:  position{line: 201, col: 54, offset: 5994},
											name: "Expr",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 201, col: 62, offset: 6002},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 201, col: 65, offset: 6005},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 201, col: 69, offset: 6009},
							expr: &seqExpr{
								pos: position{line: 201, col: 71, offset: 6011},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 201, col: 71, offset: 6011},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 201, col: 74, offset: 6014},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 201, col: 79, offset: 6019},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 201, col: 85, offset: 6025},
								expr: &ruleRefExpr{
									pos:  position{line: 201, col: 85, offset: 6025},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggName",
			pos:  position{line: 209, col: 1, offset: 6215},
			expr: &choiceExpr{
				pos: position{line: 210, col: 5, offset: 6227},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 210, col: 5, offset: 6227},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 211, col: 5, offset: 6246},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 212, col: 5, offset: 6259},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 214, col: 1, offset: 6268},
			expr: &actionExpr{
				pos: position{line: 214, col: 15, offset: 6282},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 214, col: 15, offset: 6282},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 214, col: 15, offset: 6282},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 214, col: 17, offset: 6284},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 214, col: 25, offset: 6292},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 214, col: 27, offset: 6294},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 214, col: 32, offset: 6299},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignments",
			pos:  position{line: 216, col: 1, offset: 6335},
			expr: &actionExpr{
				pos: position{line: 217, col: 5, offset: 6354},
				run: (*parser).callonAggAssignments1,
				expr: &seqExpr{
					pos: position{line: 217, col: 5, offset: 6354},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 217, col: 5, offset: 6354},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 217, col: 11, offset: 6360},
								name: "AggAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 217, col: 25, offset: 6374},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 217, col: 30, offset: 6379},
								expr: &seqExpr{
									pos: position{line: 217, col: 31, offset: 6380},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 217, col: 31, offset: 6380},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 217, col: 34, offset: 6383},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 217, col: 38, offset: 6387},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 217, col: 41, offset: 6390},
											name: "AggAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 227, col: 1, offset: 6614},
			expr: &choiceExpr{
				pos: position{line: 228, col: 5, offset: 6627},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 228, col: 5, offset: 6627},
						name: "AssertOp",
					},
					&ruleRefExpr{
						pos:  position{line: 229, col: 5, offset: 6640},
						name: "SortOp",
					},
					&ruleRefExpr{
						pos:  position{line: 230, col: 5, offset: 6651},
						name: "TopOp",
					},
					&ruleRefExpr{
						pos:  position{line: 231, col: 5, offset: 6661},
						name: "CutOp",
					},
					&ruleRefExpr{
						pos:  position{line: 232, col: 5, offset: 6671},
						name: "DropOp",
					},
					&ruleRefExpr{
						pos:  position{line: 233, col: 5, offset: 6682},
						name: "HeadOp",
					},
					&ruleRefExpr{
						pos:  position{line: 234, col: 5, offset: 6693},
						name: "TailOp",
					},
					&ruleRefExpr{
						pos:  position{line: 235, col: 5, offset: 6704},
						name: "WhereOp",
					},
					&ruleRefExpr{
						pos:  position{line: 236, col: 5, offset: 6716},
						name: "UniqOp",
					},
					&ruleRefExpr{
						pos:  position{line: 237, col: 5, offset: 6727},
						name: "PutOp",
					},
					&ruleRefExpr{
						pos:  position{line: 238, col: 5, offset: 6737},
						name: "RenameOp",
					},
					&ruleRefExpr{
						pos:  position{line: 239, col: 5, offset: 6750},
						name: "FuseOp",
					},
					&ruleRefExpr{
						pos:  position{line: 240, col: 5, offset: 6761},
						name: "ShapeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 241, col: 5, offset: 6773},
						name: "JoinOp",
					},
					&ruleRefExpr{
						pos:  position{line: 242, col: 5, offset: 6784},
						name: "SampleOp",
					},
					&ruleRefExpr{
						pos:  position{line: 243, col: 5, offset: 6797},
						name: "SQLOp",
					},
					&ruleRefExpr{
						pos:  position{line: 244, col: 5, offset: 6807},
						name: "FromOp",
					},
					&ruleRefExpr{
						pos:  position{line: 245, col: 5, offset: 6818},
						name: "PassOp",
					},
					&ruleRefExpr{
						pos:  position{line: 246, col: 5, offset: 6829},
						name: "ExplodeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 247, col: 5, offset: 6843},
						name: "MergeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 248, col: 5, offset: 6855},
						name: "OverOp",
					},
					&ruleRefExpr{
						pos:  position{line: 249, col: 5, offset: 6866},
						name: "YieldOp",
					},
				},
			},
		},
		{
			name: "AssertOp",
			pos:  position{line: 251, col: 1, offset: 6875},
			expr: &actionExpr{
				pos: position{line: 252, col: 5, offset: 6888},
				run: (*parser).callonAssertOp1,
				expr: &seqExpr{
					pos: position{line: 252, col: 5, offset: 6888},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 252, col: 5, offset: 6888},
							val:        "assert",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 252, col: 14, offset: 6897},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 252, col: 16, offset: 6899},
							label: "expr",
							expr: &actionExpr{
								pos: position{line: 252, col: 22, offset: 6905},
								run: (*parser).callonAssertOp6,
								expr: &labeledExpr{
									pos:   position{line: 252, col: 22, offset: 6905},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 252, col: 24, offset: 6907},
										name: "Expr",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortOp",
			pos:  position{line: 288, col: 1, offset: 8258},
			expr: &actionExpr{
				pos: position{line: 289, col: 5, offset: 8269},
				run: (*parser).callonSortOp1,
				expr: &seqExpr{
					pos: position{line: 289, col: 5, offset: 8269},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 289, col: 5, offset: 8269},
							val:        "sort",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 289, col: 12, offset: 8276},
							expr: &ruleRefExpr{
								pos:  position{line: 289, col: 13, offset: 8277},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 289, col: 18, offset: 8282},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 289, col: 23, offset: 8287},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 289, col: 32, offset: 8296},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 289, col: 37, offset: 8301},
								expr: &actionExpr{
									pos: position{line: 289, col: 38, offset: 8302},
									run: (*parser).callonSortOp10,
									expr: &seqExpr{
										pos: position{line: 289, col: 38, offset: 8302},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 289, col: 38, offset: 8302},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 289, col: 40, offset: 8304},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 289, col: 42, offset: 8306},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 303, col: 1, offset: 8717},
			expr: &actionExpr{
				pos: position{line: 303, col: 12, offset: 8728},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 303, col: 12, offset: 8728},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 303, col: 17, offset: 8733},
						expr: &actionExpr{
							pos: position{line: 303, col: 18, offset: 8734},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 303, col: 18, offset: 8734},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 303, col: 18, offset: 8734},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 303, col: 20, offset: 8736},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 303, col: 22, offset: 8738},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 305, col: 1, offset: 8794},
			expr: &choiceExpr{
				pos: position{line: 306, col: 5, offset: 8806},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 306, col: 5, offset: 8806},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 306, col: 5, offset: 8806},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 307, col: 5, offset: 8881},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 307, col: 5, offset: 8881},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 307, col: 5, offset: 8881},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 307, col: 14, offset: 8890},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 307, col: 16, offset: 8892},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 307, col: 23, offset: 8899},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 307, col: 24, offset: 8900},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 307, col: 24, offset: 8900},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 307, col: 34, offset: 8910},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopOp",
			pos:  position{line: 309, col: 1, offset: 9024},
			expr: &actionExpr{
				pos: position{line: 310, col: 5, offset: 9034},
				run: (*parser).callonTopOp1,
				expr: &seqExpr{
					pos: position{line: 310, col: 5, offset: 9034},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 310, col: 5, offset: 9034},
							val:        "top",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 310, col: 11, offset: 9040},
							expr: &ruleRefExpr{
								pos:  position{line: 310, col: 12, offset: 9041},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 310, col: 17, offset: 9046},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 310, col: 23, offset: 9052},
								expr: &actionExpr{
									pos: position{line: 310, col: 24, offset: 9053},
									run: (*parser).callonTopOp8,
									expr: &seqExpr{
										pos: position{line: 310, col: 24, offset: 9053},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 310, col: 24, offset: 9053},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 310, col: 26, offset: 9055},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 310, col: 28, offset: 9057},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 310, col: 52, offset: 9081},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 310, col: 58, offset: 9087},
								expr: &seqExpr{
									pos: position{line: 310, col: 59, offset: 9088},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 310, col: 59, offset: 9088},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 310, col: 61, offset: 9090},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 310, col: 72, offset: 9101},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 310, col: 79, offset: 9108},
								expr: &actionExpr{
									pos: position{line: 310, col: 80, offset: 9109},
									run: (*parser).callonTopOp20,
									expr: &seqExpr{
										pos: position{line: 310, col: 80, offset: 9109},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 310, col: 80, offset: 9109},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 310, col: 82, offset: 9111},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 310, col: 84, offset: 9113},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutOp",
			pos:  position{line: 324, col: 1, offset: 9448},
			expr: &actionExpr{
				pos: position{line: 325, col: 5, offset: 9458},
				run: (*parser).callonCutOp1,
				expr: &seqExpr{
					pos: position{line: 325, col: 5, offset: 9458},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 325, col: 5, offset: 9458},
							val:        "cut",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 325, col: 11, offset: 9464},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 325, col: 13, offset: 9466},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 325, col: 18, offset: 9471},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropOp",
			pos:  position{line: 329, col: 1, offset: 9566},
			expr: &actionExpr{
				pos: position{line: 330, col: 5, offset: 9577},
				run: (*parser).callonDropOp1,
				expr: &seqExpr{
					pos: position{line: 330, col: 5, offset: 9577},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 330, col: 5, offset: 9577},
							val:        "drop",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 330, col: 12, offset: 9584},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 330, col: 14, offset: 9586},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 330, col: 19, offset: 9591},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadOp",
			pos:  position{line: 334, col: 1, offset: 9682},
			expr: &choiceExpr{
				pos: position{line: 335, col: 5, offset: 9693},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 335, col: 5, offset: 9693},
						run: (*parser).callonHeadOp2,
						expr: &seqExpr{
							pos: position{line: 335, col: 5, offset: 9693},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 335, col: 5, offset: 9693},
									val:        "head",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 335, col: 12, offset: 9700},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 335, col: 14, offset: 9702},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 335, col: 20, offset: 9708},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 336, col: 5, offset: 9788},
						run: (*parser).callonHeadOp8,
						expr: &litMatcher{
							pos:        position{line: 336, col: 5, offset: 9788},
							val:        "head",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TailOp",
			pos:  position{line: 338, col: 1, offset: 9863},
			expr: &choiceExpr{
				pos: position{line: 339, col: 5, offset: 9874},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 339, col: 5, offset: 9874},
						run: (*parser).callonTailOp2,
						expr: &seqExpr{
							pos: position{line: 339, col: 5, offset: 9874},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 339, col: 5, offset: 9874},
									val:        "tail",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 339, col: 12, offset: 9881},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 339, col: 14, offset: 9883},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 339, col: 20, offset: 9889},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 340, col: 5, offset: 9969},
						run: (*parser).callonTailOp8,
						expr: &litMatcher{
							pos:        position{line: 340, col: 5, offset: 9969},
							val:        "tail",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "WhereOp",
			pos:  position{line: 342, col: 1, offset: 10044},
			expr: &actionExpr{
				pos: position{line: 343, col: 5, offset: 10056},
				run: (*parser).callonWhereOp1,
				expr: &seqExpr{
					pos: position{line: 343, col: 5, offset: 10056},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 343, col: 5, offset: 10056},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 343, col: 13, offset: 10064},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 343, col: 15, offset: 10066},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 343, col: 20, offset: 10071},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "UniqOp",
			pos:  position{line: 347, col: 1, offset: 10157},
			expr: &choiceExpr{
				pos: position{line: 348, col: 5, offset: 10168},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 348, col: 5, offset: 10168},
						run: (*parser).callonUniqOp2,
						expr: &seqExpr{
							pos: position{line: 348, col: 5, offset: 10168},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 348, col: 5, offset: 10168},
									val:        "uniq",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 348, col: 12, offset: 10175},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 348, col: 14, offset: 10177},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 351, col: 5, offset: 10266},
						run: (*parser).callonUniqOp7,
						expr: &litMatcher{
							pos:        position{line: 351, col: 5, offset: 10266},
							val:        "uniq",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PutOp",
			pos:  position{line: 355, col: 1, offset: 10355},
			expr: &actionExpr{
				pos: position{line: 356, col: 5, offset: 10365},
				run: (*parser).callonPutOp1,
				expr: &seqExpr{
					pos: position{line: 356, col: 5, offset: 10365},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 356, col: 5, offset: 10365},
							val:        "put",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 356, col: 11, offset: 10371},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 356, col: 13, offset: 10373},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 356, col: 18, offset: 10378},
								name: "Assignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameOp",
			pos:  position{line: 360, col: 1, offset: 10469},
			expr: &actionExpr{
				pos: position{line: 361, col: 5, offset: 10482},
				run: (*parser).callonRenameOp1,
				expr: &seqExpr{
					pos: position{line: 361, col: 5, offset: 10482},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 361, col: 5, offset: 10482},
							val:        "rename",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 361, col: 14, offset: 10491},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 361, col: 16, offset: 10493},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 361, col: 22, offset: 10499},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 361, col: 33, offset: 10510},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 361, col: 38, offset: 10515},
								expr: &actionExpr{
									pos: position{line: 361, col: 39, offset: 10516},
									run: (*parser).callonRenameOp9,
									expr: &seqExpr{
										pos: position{line: 361, col: 39, offset: 10516},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 361, col: 39, offset: 10516},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 361, col: 42, offset: 10519},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 361, col: 46, offset: 10523},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 361, col: 49, offset: 10526},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 361, col: 52, offset: 10529},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseOp",
			pos:  position{line: 369, col: 1, offset: 10936},
			expr: &actionExpr{
				pos: position{line: 370, col: 5, offset: 10947},
				run: (*parser).callonFuseOp1,
				expr: &seqExpr{
					pos: position{line: 370, col: 5, offset: 10947},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 370, col: 5, offset: 10947},
							val:        "fuse",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 370, col: 12, offset: 10954},
							expr: &seqExpr{
								pos: position{line: 370, col: 14, offset: 10956},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 370, col: 14, offset: 10956},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 370, col: 17, offset: 10959},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 370, col: 22, offset: 10964},
							expr: &ruleRefExpr{
								pos:  position{line: 370, col: 23, offset: 10965},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "ShapeOp",
			pos:  position{line: 374, col: 1, offset: 11036},
			expr: &actionExpr{
				pos: position{line: 375, col: 5, offset: 11048},
				run: (*parser).callonShapeOp1,
				expr: &seqExpr{
					pos: position{line: 375, col: 5, offset: 11048},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 375, col: 5, offset: 11048},
							val:        "shape",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 375, col: 13, offset: 11056},
							expr: &seqExpr{
								pos: position{line: 375, col: 15, offset: 11058},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 375, col: 15, offset: 11058},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 375, col: 18, offset: 11061},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 375, col: 23, offset: 11066},
							expr: &ruleRefExpr{
								pos:  position{line: 375, col: 24, offset: 11067},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "JoinOp",
			pos:  position{line: 379, col: 1, offset: 11139},
			expr: &actionExpr{
				pos: position{line: 380, col: 5, offset: 11150},
				run: (*parser).callonJoinOp1,
				expr: &seqExpr{
					pos: position{line: 380, col: 5, offset: 11150},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 380, col: 5, offset: 11150},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 380, col: 11, offset: 11156},
								name: "JoinStyle",
							},
						},
						&litMatcher{
							pos:        position{line: 380, col: 21, offset: 11166},
							val:        "join",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 380, col: 28, offset: 11173},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 380, col: 30, offset: 11175},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 380, col: 33, offset: 11178},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 380, col: 35, offset: 11180},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 380, col: 39, offset: 11184},
								name: "JoinKey",
							},
						},
						&labeledExpr{
							pos:   position{line: 380, col: 47, offset: 11192},
							label: "optKey",
							expr: &zeroOrOneExpr{
								pos: position{line: 380, col: 54, offset: 11199},
								expr: &seqExpr{
									pos: position{line: 380, col: 55, offset: 11200},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 380, col: 55, offset: 11200},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 380, col: 58, offset: 11203},
											val:        "=",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 380, col: 62, offset: 11207},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 380, col: 65, offset: 11210},
											name: "JoinKey",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 380, col: 75, offset: 11220},
							label: "optArgs",
							expr: &zeroOrOneExpr{
								pos: position{line: 380, col: 83, offset: 11228},
								expr: &seqExpr{
									pos: position{line: 380, col: 84, offset: 11229},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 380, col: 84, offset: 11229},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 380, col: 86, offset: 11231},
											name: "FlexAssignments",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinStyle",
			pos:  position{line: 391, col: 1, offset: 11560},
			expr: &choiceExpr{
				pos: position{line: 392, col: 5, offset: 11574},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 392, col: 5, offset: 11574},
						run: (*parser).callonJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 392, col: 5, offset: 11574},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 392, col: 5, offset: 11574},
									val:        "anti",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 392, col: 12, offset: 11581},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 393, col: 5, offset: 11611},
						run: (*parser).callonJoinStyle6,
						expr: &seqExpr{
							pos: position{line: 393, col: 5, offset: 11611},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 393, col: 5, offset: 11611},
									val:        "inner",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 393, col: 13, offset: 11619},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 394, col: 5, offset: 11649},
						run: (*parser).callonJoinStyle10,
						expr: &seqExpr{
							pos: position{line: 394, col: 5, offset: 11649},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 394, col: 5, offset: 11649},
									val:        "left",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 394, col: 13, offset: 11657},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 395, col: 5, offset: 11686},
						run: (*parser).callonJoinStyle14,
						expr: &seqExpr{
							pos: position{line: 395, col: 5, offset: 11686},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 395, col: 5, offset: 11686},
									val:        "right",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 395, col: 13, offset: 11694},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 396, col: 5, offset: 11724},
						run: (*parser).callonJoinStyle18,
						expr: &litMatcher{
							pos:        position{line: 396, col: 5, offset: 11724},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 398, col: 1, offset: 11760},
			expr: &choiceExpr{
				pos: position{line: 399, col: 5, offset: 11772},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 399, col: 5, offset: 11772},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 400, col: 5, offset: 11781},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 400, col: 5, offset: 11781},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 400, col: 5, offset: 11781},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 400, col: 9, offset: 11785},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 400, col: 14, offset: 11790},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 400, col: 19, offset: 11795},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SampleOp",
			pos:  position{line: 402, col: 1, offset: 11821},
			expr: &actionExpr{
				pos: position{line: 403, col: 5, offset: 11834},
				run: (*parser).callonSampleOp1,
				expr: &seqExpr{
					pos: position{line: 403, col: 5, offset: 11834},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 403, col: 5, offset: 11834},
							val:        "sample",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 403, col: 14, offset: 11843},
							expr: &ruleRefExpr{
								pos:  position{line: 403, col: 15, offset: 11844},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 403, col: 20, offset: 11849},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 403, col: 22, offset: 11851},
								name: "SampleExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "OpAssignment",
			pos:  position{line: 445, col: 1, offset: 13351},
			expr: &actionExpr{
				pos: position{line: 446, col: 5, offset: 13368},
				run: (*parser).callonOpAssignment1,
				expr: &labeledExpr{
					pos:   position{line: 446, col: 5, offset: 13368},
					label: "a",
					expr: &ruleRefExpr{
						pos:  position{line: 446, col: 7, offset: 13370},
						name: "Assignments",
					},
				},
			},
		},
		{
			name: "SampleExpr",
			pos:  position{line: 450, col: 1, offset: 13470},
			expr: &choiceExpr{
				pos: position{line: 451, col: 5, offset: 13485},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 451, col: 5, offset: 13485},
						run: (*parser).callonSampleExpr2,
						expr: &seqExpr{
							pos: position{line: 451, col: 5, offset: 13485},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 451, col: 5, offset: 13485},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 451, col: 7, offset: 13487},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 451, col: 12, offset: 13492},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 452, col: 5, offset: 13521},
						run: (*parser).callonSampleExpr7,
						expr: &litMatcher{
							pos:        position{line: 452, col: 5, offset: 13521},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromOp",
			pos:  position{line: 454, col: 1, offset: 13592},
			expr: &actionExpr{
				pos: position{line: 455, col: 5, offset: 13603},
				run: (*parser).callonFromOp1,
				expr: &labeledExpr{
					pos:   position{line: 455, col: 5, offset: 13603},
					label: "source",
					expr: &ruleRefExpr{
						pos:  position{line: 455, col: 12, offset: 13610},
						name: "FromAny",
					},
				},
			},
		},
		{
			name: "FromAny",
			pos:  position{line: 459, col: 1, offset: 13766},
			expr: &choiceExpr{
				pos: position{line: 460, col: 5, offset: 13778},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 460, col: 5, offset: 13778},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 461, col: 5, offset: 13787},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 462, col: 5, offset: 13795},
						name: "From",
					},
				},
			},
		},
		{
			name: "File",
			pos:  position{line: 464, col: 1, offset: 13801},
			expr: &actionExpr{
				pos: position{line: 465, col: 5, offset: 13810},
				run: (*parser).callonFile1,
				expr: &seqExpr{
					pos: position{line: 465, col: 5, offset: 13810},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 465, col: 5, offset: 13810},
							val:        "file",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 465, col: 12, offset: 13817},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 465, col: 14, offset: 13819},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 465, col: 19, offset: 13824},
								name: "Path",
							},
						},
						&labeledExpr{
							pos:   position{line: 465, col: 24, offset: 13829},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 465, col: 31, offset: 13836},
								expr: &ruleRefExpr{
									pos:  position{line: 465, col: 31, offset: 13836},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 465, col: 42, offset: 13847},
							label: "layout",
							expr: &zeroOrOneExpr{
								pos: position{line: 465, col: 49, offset: 13854},
								expr: &ruleRefExpr{
									pos:  position{line: 465, col: 49, offset: 13854},
									name: "LayoutArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "From",
			pos:  position{line: 469, col: 1, offset: 13983},
			expr: &actionExpr{
				pos: position{line: 470, col: 5, offset: 13992},
				run: (*parser).callonFrom1,
				expr: &seqExpr{
					pos: position{line: 470, col: 5, offset: 13992},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 470, col: 5, offset: 13992},
							val:        "from",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 470, col: 12, offset: 13999},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 470, col: 14, offset: 14001},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 470, col: 19, offset: 14006},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "Pool",
			pos:  position{line: 472, col: 1, offset: 14037},
			expr: &actionExpr{
				pos: position{line: 473, col: 5, offset: 14046},
				run: (*parser).callonPool1,
				expr: &seqExpr{
					pos: position{line: 473, col: 5, offset: 14046},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 473, col: 5, offset: 14046},
							val:        "pool",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 473, col: 12, offset: 14053},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 473, col: 14, offset: 14055},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 473, col: 19, offset: 14060},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolBody",
			pos:  position{line: 475, col: 1, offset: 14091},
			expr: &actionExpr{
				pos: position{line: 476, col: 5, offset: 14104},
				run: (*parser).callonPoolBody1,
				expr: &seqExpr{
					pos: position{line: 476, col: 5, offset: 14104},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 476, col: 5, offset: 14104},
							label: "spec",
							expr: &ruleRefExpr{
								pos:  position{line: 476, col: 10, offset: 14109},
								name: "PoolSpec",
							},
						},
						&labeledExpr{
							pos:   position{line: 476, col: 19, offset: 14118},
							label: "at",
							expr: &zeroOrOneExpr{
								pos: position{line: 476, col: 22, offset: 14121},
								expr: &ruleRefExpr{
									pos:  position{line: 476, col: 22, offset: 14121},
									name: "PoolAt",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 476, col: 30, offset: 14129},
							label: "over",
							expr: &zeroOrOneExpr{
								pos: position{line: 476, col: 35, offset: 14134},
								expr: &ruleRefExpr{
									pos:  position{line: 476, col: 35, offset: 14134},
									name: "PoolRange",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 476, col: 46, offset: 14145},
							label: "order",
							expr: &zeroOrOneExpr{
								pos: position{line: 476, col: 52, offset: 14151},
								expr: &ruleRefExpr{
									pos:  position{line: 476, col: 52, offset: 14151},
									name: "OrderArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Get",
			pos:  position{line: 480, col: 1, offset: 14287},
			expr: &actionExpr{
				pos: position{line: 481, col: 5, offset: 14295},
				run: (*parser).callonGet1,
				expr: &seqExpr{
					pos: position{line: 481, col: 5, offset: 14295},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 481, col: 5, offset: 14295},
							val:        "get",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 481, col: 11, offset: 14301},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 481, col: 13, offset: 14303},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 481, col: 17, offset: 14307},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 481, col: 21, offset: 14311},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 481, col: 28, offset: 14318},
								expr: &ruleRefExpr{
									pos:  position{line: 481, col: 28, offset: 14318},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 481, col: 39, offset: 14329},
							label: "layout",
							expr: &zeroOrOneExpr{
								pos: position{line: 481, col: 46, offset: 14336},
								expr: &ruleRefExpr{
									pos:  position{line: 481, col: 46, offset: 14336},
									name: "LayoutArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 485, col: 1, offset: 14462},
			expr: &actionExpr{
				pos: position{line: 485, col: 7, offset: 14468},
				run: (*parser).callonURL1,
				expr: &seqExpr{
					pos: position{line: 485, col: 7, offset: 14468},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 485, col: 8, offset: 14469},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 485, col: 8, offset: 14469},
									val:        "http:",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 485, col: 18, offset: 14479},
									val:        "https:",
									ignoreCase: false,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 485, col: 28, offset: 14489},
							name: "Path",
						},
					},
				},
			},
		},
		{
			name: "Path",
			pos:  position{line: 487, col: 1, offset: 14526},
			expr: &choiceExpr{
				pos: position{line: 488, col: 5, offset: 14535},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 488, col: 5, offset: 14535},
						run: (*parser).callonPath2,
						expr: &labeledExpr{
							pos:   position{line: 488, col: 5, offset: 14535},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 488, col: 7, offset: 14537},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 489, col: 5, offset: 14572},
						run: (*parser).callonPath5,
						expr: &oneOrMoreExpr{
							pos: position{line: 489, col: 5, offset: 14572},
							expr: &charClassMatcher{
								pos:        position{line: 489, col: 5, offset: 14572},
								val:        "[0-9a-zA-Z!@$%^&*()_=<>,./?:[\\]{}~|+-]",
								chars:      []rune{'!', '@', '$', '%', '^', '&', '*', '(', ')', '_', '=', '<', '>', ',', '.', '/', '?', ':', '[', ']', '{', '}', '~', '|', '+', '-'},
								ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PoolAt",
			pos:  position{line: 492, col: 1, offset: 14677},
			expr: &actionExpr{
				pos: position{line: 493, col: 5, offset: 14688},
				run: (*parser).callonPoolAt1,
				expr: &seqExpr{
					pos: position{line: 493, col: 5, offset: 14688},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 493, col: 5, offset: 14688},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 493, col: 7, offset: 14690},
							val:        "at",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 493, col: 12, offset: 14695},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 493, col: 14, offset: 14697},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 493, col: 17, offset: 14700},
								name: "KSUID",
							},
						},
					},
				},
			},
		},
		{
			name: "KSUID",
			pos:  position{line: 496, col: 1, offset: 14766},
			expr: &actionExpr{
				pos: position{line: 496, col: 9, offset: 14774},
				run: (*parser).callonKSUID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 496, col: 9, offset: 14774},
					expr: &charClassMatcher{
						pos:        position{line: 496, col: 10, offset: 14775},
						val:        "[0-9a-zA-Z]",
						ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "PoolRange",
			pos:  position{line: 498, col: 1, offset: 14821},
			expr: &actionExpr{
				pos: position{line: 499, col: 5, offset: 14835},
				run: (*parser).callonPoolRange1,
				expr: &seqExpr{
					pos: position{line: 499, col: 5, offset: 14835},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 499, col: 5, offset: 14835},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 499, col: 7, offset: 14837},
							val:        "range",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 499, col: 15, offset: 14845},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 499, col: 17, offset: 14847},
							label: "lower",
							expr: &ruleRefExpr{
								pos:  position{line: 499, col: 23, offset: 14853},
								name: "Literal",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 499, col: 31, offset: 14861},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 499, col: 33, offset: 14863},
							val:        "to",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 499, col: 38, offset: 14868},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 499, col: 40, offset: 14870},
							label: "upper",
							expr: &ruleRefExpr{
								pos:  position{line: 499, col: 46, offset: 14876},
								name: "Literal",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolSpec",
			pos:  position{line: 503, col: 1, offset: 14981},
			expr: &choiceExpr{
				pos: position{line: 504, col: 5, offset: 14994},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 504, col: 5, offset: 14994},
						run: (*parser).callonPoolSpec2,
						expr: &seqExpr{
							pos: position{line: 504, col: 5, offset: 14994},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 504, col: 5, offset: 14994},
									label: "pool",
									expr: &ruleRefExpr{
										pos:  position{line: 504, col: 10, offset: 14999},
										name: "PoolName",
									},
								},
								&labeledExpr{
									pos:   position{line: 504, col: 19, offset: 15008},
									label: "commit",
									expr: &zeroOrOneExpr{
										pos: position{line: 504, col: 26, offset: 15015},
										expr: &ruleRefExpr{
											pos:  position{line: 504, col: 26, offset: 15015},
											name: "PoolCommit",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 504, col: 38, offset: 15027},
									label: "meta",
									expr: &zeroOrOneExpr{
										pos: position{line: 504, col: 43, offset: 15032},
										expr: &ruleRefExpr{
											pos:  position{line: 504, col: 43, offset: 15032},
											name: "PoolMeta",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 507, col: 5, offset: 15141},
						run: (*parser).callonPoolSpec12,
						expr: &labeledExpr{
							pos:   position{line: 507, col: 5, offset: 15141},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 507, col: 10, offset: 15146},
								name: "PoolMeta",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolCommit",
			pos:  position{line: 511, col: 1, offset: 15247},
			expr: &actionExpr{
				pos: position{line: 512, col: 5, offset: 15262},
				run: (*parser).callonPoolCommit1,
				expr: &seqExpr{
					pos: position{line: 512, col: 5, offset: 15262},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 512, col: 5, offset: 15262},
							val:        "@",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 512, col: 9, offset: 15266},
							label: "commit",
							expr: &ruleRefExpr{
								pos:  position{line: 512, col: 16, offset: 15273},
								name: "PoolName",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolMeta",
			pos:  position{line: 514, col: 1, offset: 15306},
			expr: &actionExpr{
				pos: position{line: 515, col: 5, offset: 15319},
				run: (*parser).callonPoolMeta1,
				expr: &seqExpr{
					pos: position{line: 515, col: 5, offset: 15319},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 515, col: 5, offset: 15319},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 515, col: 9, offset: 15323},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 515, col: 14, offset: 15328},
								name: "PoolIdentifier",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolName",
			pos:  position{line: 517, col: 1, offset: 15365},
			expr: &choiceExpr{
				pos: position{line: 518, col: 5, offset: 15378},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 518, col: 5, offset: 15378},
						name: "PoolIdentifier",
					},
					&ruleRefExpr{
						pos:  position{line: 519, col: 5, offset: 15397},
						name: "KSUID",
					},
					&ruleRefExpr{
						pos:  position{line: 520, col: 5, offset: 15407},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "PoolIdentifier",
			pos:  position{line: 522, col: 1, offset: 15421},
			expr: &actionExpr{
				pos: position{line: 523, col: 5, offset: 15440},
				run: (*parser).callonPoolIdentifier1,
				expr: &seqExpr{
					pos: position{line: 523, col: 5, offset: 15440},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 523, col: 6, offset: 15441},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 523, col: 6, offset: 15441},
									name: "IdentifierStart",
								},
								&litMatcher{
									pos:        position{line: 523, col: 24, offset: 15459},
									val:        ".",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 523, col: 29, offset: 15464},
							expr: &choiceExpr{
								pos: position{line: 523, col: 30, offset: 15465},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 523, col: 30, offset: 15465},
										name: "IdentifierRest",
									},
									&litMatcher{
										pos:        position{line: 523, col: 47, offset: 15482},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LayoutArg",
			pos:  position{line: 525, col: 1, offset: 15521},
			expr: &actionExpr{
				pos: position{line: 526, col: 5, offset: 15535},
				run: (*parser).callonLayoutArg1,
				expr: &seqExpr{
					pos: position{line: 526, col: 5, offset: 15535},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 526, col: 5, offset: 15535},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 526, col: 7, offset: 15537},
							val:        "order",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 526, col: 15, offset: 15545},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 526, col: 17, offset: 15547},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 526, col: 22, offset: 15552},
								name: "FieldExprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 526, col: 33, offset: 15563},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 526, col: 39, offset: 15569},
								name: "OrderSuffix",
							},
						},
					},
				},
			},
		},
		{
			name: "FormatArg",
			pos:  position{line: 530, col: 1, offset: 15679},
			expr: &actionExpr{
				pos: position{line: 531, col: 5, offset: 15693},
				run: (*parser).callonFormatArg1,
				expr: &seqExpr{
					pos: position{line: 531, col: 5, offset: 15693},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 531, col: 5, offset: 15693},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 531, col: 7, offset: 15695},
							val:        "format",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 531, col: 16, offset: 15704},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 531, col: 18, offset: 15706},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 531, col: 22, offset: 15710},
								name: "IdentifierName",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderSuffix",
			pos:  position{line: 533, col: 1, offset: 15746},
			expr: &choiceExpr{
				pos: position{line: 534, col: 5, offset: 15762},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 534, col: 5, offset: 15762},
						run: (*parser).callonOrderSuffix2,
						expr: &litMatcher{
							pos:        position{line: 534, col: 5, offset: 15762},
							val:        ":asc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 535, col: 5, offset: 15796},
						run: (*parser).callonOrderSuffix4,
						expr: &litMatcher{
							pos:        position{line: 535, col: 5, offset: 15796},
							val:        ":desc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 536, col: 5, offset: 15832},
						run: (*parser).callonOrderSuffix6,
						expr: &litMatcher{
							pos:        position{line: 536, col: 5, offset: 15832},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OrderArg",
			pos:  position{line: 538, col: 1, offset: 15858},
			expr: &choiceExpr{
				pos: position{line: 539, col: 5, offset: 15871},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 539, col: 5, offset: 15871},
						run: (*parser).callonOrderArg2,
						expr: &seqExpr{
							pos: position{line: 539, col: 5, offset: 15871},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 539, col: 5, offset: 15871},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 539, col: 7, offset: 15873},
									val:        "order",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 539, col: 15, offset: 15881},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 539, col: 17, offset: 15883},
									val:        "asc",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 540, col: 5, offset: 15916},
						run: (*parser).callonOrderArg8,
						expr: &seqExpr{
							pos: position{line: 540, col: 5, offset: 15916},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 540, col: 5, offset: 15916},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 540, col: 7, offset: 15918},
									val:        "order",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 540, col: 15, offset: 15926},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 540, col: 17, offset: 15928},
									val:        "desc",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassOp",
			pos:  position{line: 542, col: 1, offset: 15960},
			expr: &actionExpr{
				pos: position{line: 543, col: 5, offset: 15971},
				run: (*parser).callonPassOp1,
				expr: &seqExpr{
					pos: position{line: 543, col: 5, offset: 15971},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 543, col: 5, offset: 15971},
							val:        "pass",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 543, col: 12, offset: 15978},
							expr: &ruleRefExpr{
								pos:  position{line: 543, col: 13, offset: 15979},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "ExplodeOp",
			pos:  position{line: 549, col: 1, offset: 16171},
			expr: &actionExpr{
				pos: position{line: 550, col: 5, offset: 16185},
				run: (*parser).callonExplodeOp1,
				expr: &seqExpr{
					pos: position{line: 550, col: 5, offset: 16185},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 550, col: 5, offset: 16185},
							val:        "explode",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 550, col: 15, offset: 16195},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 550, col: 17, offset: 16197},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 550, col: 22, offset: 16202},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 550, col: 28, offset: 16208},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 550, col: 32, offset: 16212},
								name: "TypeArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 550, col: 40, offset: 16220},
							label: "as",
							expr: &zeroOrOneExpr{
								pos: position{line: 550, col: 43, offset: 16223},
								expr: &ruleRefExpr{
									pos:  position{line: 550, col: 43, offset: 16223},
									name: "AsArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MergeOp",
			pos:  position{line: 554, col: 1, offset: 16335},
			expr: &actionExpr{
				pos: position{line: 555, col: 5, offset: 16347},
				run: (*parser).callonMergeOp1,
				expr: &seqExpr{
					pos: position{line: 555, col: 5, offset: 16347},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 555, col: 5, offset: 16347},
							val:        "merge",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 555, col: 13, offset: 16355},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 555, col: 15, offset: 16357},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 555, col: 20, offset: 16362},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "OverOp",
			pos:  position{line: 559, col: 1, offset: 16443},
			expr: &actionExpr{
				pos: position{line: 560, col: 5, offset: 16454},
				run: (*parser).callonOverOp1,
				expr: &seqExpr{
					pos: position{line: 560, col: 5, offset: 16454},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 560, col: 5, offset: 16454},
							val:        "over",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 560, col: 12, offset: 16461},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 560, col: 14, offset: 16463},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 560, col: 20, offset: 16469},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 560, col: 26, offset: 16475},
							label: "locals",
							expr: &zeroOrOneExpr{
								pos: position{line: 560, col: 33, offset: 16482},
								expr: &ruleRefExpr{
									pos:  position{line: 560, col: 33, offset: 16482},
									name: "Locals",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 560, col: 41, offset: 16490},
							label: "scope",
							expr: &zeroOrOneExpr{
								pos: position{line: 560, col: 47, offset: 16496},
								expr: &ruleRefExpr{
									pos:  position{line: 560, col: 47, offset: 16496},
									name: "Scope",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Scope",
			pos:  position{line: 568, col: 1, offset: 16746},
			expr: &actionExpr{
				pos: position{line: 569, col: 5, offset: 16756},
				run: (*parser).callonScope1,
				expr: &seqExpr{
					pos: position{line: 569, col: 5, offset: 16756},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 569, col: 5, offset: 16756},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 569, col: 8, offset: 16759},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 569, col: 13, offset: 16764},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 569, col: 16, offset: 16767},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 569, col: 20, offset: 16771},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 569, col: 23, offset: 16774},
							label: "seq",
							expr: &ruleRefExpr{
								pos:  position{line: 569, col: 27, offset: 16778},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 569, col: 38, offset: 16789},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 569, col: 41, offset: 16792},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Locals",
			pos:  position{line: 571, col: 1, offset: 16817},
			expr: &actionExpr{
				pos: position{line: 572, col: 5, offset: 16828},
				run: (*parser).callonLocals1,
				expr: &seqExpr{
					pos: position{line: 572, col: 5, offset: 16828},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 572, col: 5, offset: 16828},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 572, col: 7, offset: 16830},
							val:        "with",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 572, col: 14, offset: 16837},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 572, col: 16, offset: 16839},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 572, col: 22, offset: 16845},
								name: "LocalsAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 572, col: 39, offset: 16862},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 572, col: 44, offset: 16867},
								expr: &actionExpr{
									pos: position{line: 572, col: 45, offset: 16868},
									run: (*parser).callonLocals10,
									expr: &seqExpr{
										pos: position{line: 572, col: 45, offset: 16868},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 572, col: 45, offset: 16868},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 572, col: 48, offset: 16871},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 572, col: 52, offset: 16875},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 572, col: 55, offset: 16878},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 572, col: 57, offset: 16880},
													name: "LocalsAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocalsAssignment",
			pos:  position{line: 576, col: 1, offset: 17001},
			expr: &actionExpr{
				pos: position{line: 577, col: 5, offset: 17022},
				run: (*parser).callonLocalsAssignment1,
				expr: &seqExpr{
					pos: position{line: 577, col: 5, offset: 17022},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 577, col: 5, offset: 17022},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 577, col: 10, offset: 17027},
								name: "IdentifierName",
							},
						},
						&labeledExpr{
							pos:   position{line: 577, col: 25, offset: 17042},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 577, col: 29, offset: 17046},
								expr: &seqExpr{
									pos: position{line: 577, col: 30, offset: 17047},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 577, col: 30, offset: 17047},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 577, col: 33, offset: 17050},
											val:        "=",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 577, col: 37, offset: 17054},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 577, col: 40, offset: 17057},
											name: "Expr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "YieldOp",
			pos:  position{line: 585, col: 1, offset: 17278},
			expr: &actionExpr{
				pos: position{line: 586, col: 5, offset: 17290},
				run: (*parser).callonYieldOp1,
				expr: &seqExpr{
					pos: position{line: 586, col: 5, offset: 17290},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 586, col: 5, offset: 17290},
							val:        "yield",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 586, col: 13, offset: 17298},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 586, col: 15, offset: 17300},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 586, col: 21, offset: 17306},
								name: "Exprs",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeArg",
			pos:  position{line: 590, col: 1, offset: 17390},
			expr: &actionExpr{
				pos: position{line: 591, col: 5, offset: 17402},
				run: (*parser).callonTypeArg1,
				expr: &seqExpr{
					pos: position{line: 591, col: 5, offset: 17402},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 591, col: 5, offset: 17402},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 591, col: 7, offset: 17404},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 591, col: 10, offset: 17407},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 591, col: 12, offset: 17409},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 591, col: 16, offset: 17413},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "AsArg",
			pos:  position{line: 593, col: 1, offset: 17438},
			expr: &actionExpr{
				pos: position{line: 594, col: 5, offset: 17448},
				run: (*parser).callonAsArg1,
				expr: &seqExpr{
					pos: position{line: 594, col: 5, offset: 17448},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 594, col: 5, offset: 17448},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 594, col: 7, offset: 17450},
							name: "AS",
						},
						&ruleRefExpr{
							pos:  position{line: 594, col: 10, offset: 17453},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 594, col: 12, offset: 17455},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 594, col: 16, offset: 17459},
								name: "Lval",
							},
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 598, col: 1, offset: 17510},
			expr: &ruleRefExpr{
				pos:  position{line: 598, col: 8, offset: 17517},
				name: "DerefExpr",
			},
		},
		{
			name: "Lvals",
			pos:  position{line: 600, col: 1, offset: 17528},
			expr: &actionExpr{
				pos: position{line: 601, col: 5, offset: 17538},
				run: (*parser).callonLvals1,
				expr: &seqExpr{
					pos: position{line: 601, col: 5, offset: 17538},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 601, col: 5, offset: 17538},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 601, col: 11, offset: 17544},
								name: "Lval",
							},
						},
						&labeledExpr{
							pos:   position{line: 601, col: 16, offset: 17549},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 601, col: 21, offset: 17554},
								expr: &actionExpr{
									pos: position{line: 601, col: 22, offset: 17555},
									run: (*parser).callonLvals7,
									expr: &seqExpr{
										pos: position{line: 601, col: 22, offset: 17555},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 601, col: 22, offset: 17555},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 601, col: 25, offset: 17558},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 601, col: 29, offset: 17562},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 601, col: 32, offset: 17565},
												label: "lval",
												expr: &ruleRefExpr{
													pos:  position{line: 601, col: 37, offset: 17570},
													name: "Lval",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 605, col: 1, offset: 17682},
			expr: &ruleRefExpr{
				pos:  position{line: 605, col: 13, offset: 17694},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 607, col: 1, offset: 17700},
			expr: &actionExpr{
				pos: position{line: 608, col: 5, offset: 17715},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 608, col: 5, offset: 17715},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 608, col: 5, offset: 17715},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 608, col: 11, offset: 17721},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 608, col: 21, offset: 17731},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 608, col: 26, offset: 17736},
								expr: &seqExpr{
									pos: position{line: 608, col: 27, offset: 17737},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 608, col: 27, offset: 17737},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 608, col: 30, offset: 17740},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 608, col: 34, offset: 17744},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 608, col: 37, offset: 17747},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignments",
			pos:  position{line: 618, col: 1, offset: 17946},
			expr: &actionExpr{
				pos: position{line: 619, col: 5, offset: 17962},
				run: (*parser).callonAssignments1,
				expr: &seqExpr{
					pos: position{line: 619, col: 5, offset: 17962},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 619, col: 5, offset: 17962},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 619, col: 11, offset: 17968},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 619, col: 22, offset: 17979},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 619, col: 27, offset: 17984},
								expr: &actionExpr{
									pos: position{line: 619, col: 28, offset: 17985},
									run: (*parser).callonAssignments7,
									expr: &seqExpr{
										pos: position{line: 619, col: 28, offset: 17985},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 619, col: 28, offset: 17985},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 619, col: 31, offset: 17988},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 619, col: 35, offset: 17992},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 619, col: 38, offset: 17995},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 619, col: 40, offset: 17997},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 623, col: 1, offset: 18108},
			expr: &actionExpr{
				pos: position{line: 624, col: 5, offset: 18123},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 624, col: 5, offset: 18123},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 624, col: 5, offset: 18123},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 624, col: 9, offset: 18127},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 624, col: 14, offset: 18132},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 624, col: 17, offset: 18135},
							val:        ":=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 624, col: 22, offset: 18140},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 624, col: 25, offset: 18143},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 624, col: 29, offset: 18147},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 626, col: 1, offset: 18238},
			expr: &ruleRefExpr{
				pos:  position{line: 626, col: 8, offset: 18245},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 628, col: 1, offset: 18262},
			expr: &actionExpr{
				pos: position{line: 629, col: 5, offset: 18282},
				run: (*parser).callonConditionalExpr1,
				expr: &seqExpr{
					pos: position{line: 629, col: 5, offset: 18282},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 629, col: 5, offset: 18282},
							label: "cond",
							expr: &ruleRefExpr{
								pos:  position{line: 629, col: 10, offset: 18287},
								name: "LogicalOrExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 629, col: 24, offset: 18301},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 629, col: 28, offset: 18305},
								expr: &seqExpr{
									pos: position{line: 629, col: 29, offset: 18306},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 629, col: 29, offset: 18306},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 629, col: 32, offset: 18309},
											val:        "?",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 629, col: 36, offset: 18313},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 629, col: 39, offset: 18316},
											name: "Expr",
										},
										&ruleRefExpr{
											pos:  position{line: 629, col: 44, offset: 18321},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 629, col: 47, offset: 18324},
											val:        ":",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 629, col: 51, offset: 18328},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 629, col: 54, offset: 18331},
											name: "Expr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 638, col: 1, offset: 18592},
			expr: &actionExpr{
				pos: position{line: 639, col: 5, offset: 18610},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 639, col: 5, offset: 18610},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 639, col: 5, offset: 18610},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 639, col: 11, offset: 18616},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 640, col: 5, offset: 18635},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 640, col: 10, offset: 18640},
								expr: &actionExpr{
									pos: position{line: 640, col: 11, offset: 18641},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 640, col: 11, offset: 18641},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 640, col: 11, offset: 18641},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 640, col: 14, offset: 18644},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 640, col: 17, offset: 18647},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 640, col: 25, offset: 18655},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 640, col: 28, offset: 18658},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 640, col: 33, offset: 18663},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 644, col: 1, offset: 18781},
			expr: &actionExpr{
				pos: position{line: 645, col: 5, offset: 18800},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 645, col: 5, offset: 18800},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 645, col: 5, offset: 18800},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 645, col: 11, offset: 18806},
								name: "ComparisonExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 646, col: 5, offset: 18825},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 646, col: 10, offset: 18830},
								expr: &actionExpr{
									pos: position{line: 646, col: 11, offset: 18831},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 646, col: 11, offset: 18831},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 646, col: 11, offset: 18831},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 646, col: 14, offset: 18834},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 646, col: 17, offset: 18837},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 646, col: 26, offset: 18846},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 646, col: 29, offset: 18849},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 646, col: 34, offset: 18854},
													name: "ComparisonExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ComparisonExpr",
			pos:  position{line: 650, col: 1, offset: 18972},
			expr: &actionExpr{
				pos: position{line: 651, col: 5, offset: 18991},
				run: (*parser).callonComparisonExpr1,
				expr: &seqExpr{
					pos: position{line: 651, col: 5, offset: 18991},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 651, col: 5, offset: 18991},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 651, col: 9, offset: 18995},
								name: "AdditiveExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 651, col: 22, offset: 19008},
							label: "opAndRHS",
							expr: &zeroOrOneExpr{
								pos: position{line: 651, col: 31, offset: 19017},
								expr: &choiceExpr{
									pos: position{line: 651, col: 32, offset: 19018},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 651, col: 32, offset: 19018},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 651, col: 32, offset: 19018},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 651, col: 35, offset: 19021},
													name: "Comparator",
												},
												&ruleRefExpr{
													pos:  position{line: 651, col: 46, offset: 19032},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 651, col: 49, offset: 19035},
													name: "AdditiveExpr",
												},
											},
										},
										&seqExpr{
											pos: position{line: 651, col: 64, offset: 19050},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 651, col: 64, offset: 19050},
													name: "__",
												},
												&actionExpr{
													pos: position{line: 651, col: 68, offset: 19054},
													run: (*parser).callonComparisonExpr15,
													expr: &litMatcher{
														pos:        position{line: 651, col: 68, offset: 19054},
														val:        "~",
														ignoreCase: false,
													},
												},
												&ruleRefExpr{
													pos:  position{line: 651, col: 104, offset: 19090},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 651, col: 107, offset: 19093},
													name: "Regexp",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 660, col: 1, offset: 19354},
			expr: &actionExpr{
				pos: position{line: 661, col: 5, offset: 19371},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 661, col: 5, offset: 19371},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 661, col: 5, offset: 19371},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 661, col: 11, offset: 19377},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 662, col: 5, offset: 19400},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 662, col: 10, offset: 19405},
								expr: &actionExpr{
									pos: position{line: 662, col: 11, offset: 19406},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 662, col: 11, offset: 19406},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 662, col: 11, offset: 19406},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 662, col: 14, offset: 19409},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 662, col: 17, offset: 19412},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 662, col: 34, offset: 19429},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 662, col: 37, offset: 19432},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 662, col: 42, offset: 19437},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 666, col: 1, offset: 19559},
			expr: &actionExpr{
				pos: position{line: 666, col: 20, offset: 19578},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 666, col: 21, offset: 19579},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 666, col: 21, offset: 19579},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 666, col: 27, offset: 19585},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 668, col: 1, offset: 19622},
			expr: &actionExpr{
				pos: position{line: 669, col: 5, offset: 19645},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 669, col: 5, offset: 19645},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 669, col: 5, offset: 19645},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 669, col: 11, offset: 19651},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 670, col: 5, offset: 19663},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 670, col: 10, offset: 19668},
								expr: &actionExpr{
									pos: position{line: 670, col: 11, offset: 19669},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 670, col: 11, offset: 19669},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 670, col: 11, offset: 19669},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 670, col: 14, offset: 19672},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 670, col: 17, offset: 19675},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 670, col: 40, offset: 19698},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 670, col: 43, offset: 19701},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 670, col: 48, offset: 19706},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 674, col: 1, offset: 19817},
			expr: &actionExpr{
				pos: position{line: 674, col: 26, offset: 19842},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 674, col: 27, offset: 19843},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 674, col: 27, offset: 19843},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 674, col: 33, offset: 19849},
							val:        "/",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 674, col: 39, offset: 19855},
							val:        "%",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 676, col: 1, offset: 19892},
			expr: &choiceExpr{
				pos: position{line: 677, col: 5, offset: 19904},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 677, col: 5, offset: 19904},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 677, col: 5, offset: 19904},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 677, col: 5, offset: 19904},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 677, col: 9, offset: 19908},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 677, col: 12, offset: 19911},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 677, col: 14, offset: 19913},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 680, col: 5, offset: 20022},
						name: "NegationExpr",
					},
				},
			},
		},
		{
			name: "NegationExpr",
			pos:  position{line: 682, col: 1, offset: 20036},
			expr: &choiceExpr{
				pos: position{line: 683, col: 5, offset: 20053},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 683, col: 5, offset: 20053},
						run: (*parser).callonNegationExpr2,
						expr: &seqExpr{
							pos: position{line: 683, col: 5, offset: 20053},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 683, col: 5, offset: 20053},
									expr: &ruleRefExpr{
										pos:  position{line: 683, col: 6, offset: 20054},
										name: "Literal",
									},
								},
								&litMatcher{
									pos:        position{line: 683, col: 14, offset: 20062},
									val:        "-",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 683, col: 18, offset: 20066},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 683, col: 21, offset: 20069},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 683, col: 23, offset: 20071},
										name: "FuncExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 686, col: 5, offset: 20181},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 688, col: 1, offset: 20191},
			expr: &choiceExpr{
				pos: position{line: 689, col: 5, offset: 20204},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 689, col: 5, offset: 20204},
						run: (*parser).callonFuncExpr2,
						expr: &seqExpr{
							pos: position{line: 689, col: 5, offset: 20204},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 689, col: 5, offset: 20204},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 689, col: 11, offset: 20210},
										name: "Cast",
									},
								},
								&labeledExpr{
									pos:   position{line: 689, col: 16, offset: 20215},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 689, col: 21, offset: 20220},
										expr: &ruleRefExpr{
											pos:  position{line: 689, col: 22, offset: 20221},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 692, col: 5, offset: 20292},
						run: (*parser).callonFuncExpr9,
						expr: &seqExpr{
							pos: position{line: 692, col: 5, offset: 20292},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 692, col: 5, offset: 20292},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 692, col: 11, offset: 20298},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 692, col: 20, offset: 20307},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 692, col: 25, offset: 20312},
										expr: &ruleRefExpr{
											pos:  position{line: 692, col: 26, offset: 20313},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 695, col: 5, offset: 20384},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 696, col: 5, offset: 20398},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FuncGuard",
			pos:  position{line: 698, col: 1, offset: 20407},
			expr: &seqExpr{
				pos: position{line: 698, col: 13, offset: 20419},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 698, col: 13, offset: 20419},
						name: "NotFuncs",
					},
					&ruleRefExpr{
						pos:  position{line: 698, col: 22, offset: 20428},
						name: "__",
					},
					&litMatcher{
						pos:        position{line: 698, col: 25, offset: 20431},
						val:        "(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "NotFuncs",
			pos:  position{line: 700, col: 1, offset: 20436},
			expr: &choiceExpr{
				pos: position{line: 701, col: 5, offset: 20449},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 701, col: 5, offset: 20449},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 702, col: 5, offset: 20459},
						val:        "select",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Cast",
			pos:  position{line: 704, col: 1, offset: 20469},
			expr: &actionExpr{
				pos: position{line: 705, col: 5, offset: 20478},
				run: (*parser).callonCast1,
				expr: &seqExpr{
					pos: position{line: 705, col: 5, offset: 20478},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 705, col: 5, offset: 20478},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 705, col: 9, offset: 20482},
								name: "CastType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 705, col: 18, offset: 20491},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 705, col: 21, offset: 20494},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 705, col: 25, offset: 20498},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 705, col: 28, offset: 20501},
							label: "expr",
							expr: &choiceExpr{
								pos: position{line: 705, col: 34, offset: 20507},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 705, col: 34, offset: 20507},
										name: "OverExpr",
									},
									&ruleRefExpr{
										pos:  position{line: 705, col: 45, offset: 20518},
										name: "Expr",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 705, col: 51, offset: 20524},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 705, col: 54, offset: 20527},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 709, col: 1, offset: 20624},
			expr: &choiceExpr{
				pos: position{line: 710, col: 5, offset: 20637},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 710, col: 5, offset: 20637},
						name: "Grep",
					},
					&actionExpr{
						pos: position{line: 711, col: 5, offset: 20646},
						run: (*parser).callonFunction3,
						expr: &seqExpr{
							pos: position{line: 711, col: 5, offset: 20646},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 711, col: 5, offset: 20646},
									expr: &ruleRefExpr{
										pos:  position{line: 711, col: 6, offset: 20647},
										name: "FuncGuard",
									},
								},
								&labeledExpr{
									pos:   position{line: 711, col: 16, offset: 20657},
									label: "fn",
									expr: &ruleRefExpr{
										pos:  position{line: 711, col: 19, offset: 20660},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 711, col: 34, offset: 20675},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 711, col: 37, offset: 20678},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 711, col: 41, offset: 20682},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 711, col: 44, offset: 20685},
									label: "args",
									expr: &ruleRefExpr{
										pos:  position{line: 711, col: 49, offset: 20690},
										name: "FunctionArgs",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 711, col: 62, offset: 20703},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 711, col: 65, offset: 20706},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 711, col: 69, offset: 20710},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 711, col: 75, offset: 20716},
										expr: &ruleRefExpr{
											pos:  position{line: 711, col: 75, offset: 20716},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FunctionArgs",
			pos:  position{line: 715, col: 1, offset: 20837},
			expr: &choiceExpr{
				pos: position{line: 716, col: 5, offset: 20854},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 716, col: 5, offset: 20854},
						run: (*parser).callonFunctionArgs2,
						expr: &labeledExpr{
							pos:   position{line: 716, col: 5, offset: 20854},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 716, col: 7, offset: 20856},
								name: "OverExpr",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 717, col: 5, offset: 20902},
						name: "OptionalExprs",
					},
				},
			},
		},
		{
			name: "Grep",
			pos:  position{line: 719, col: 1, offset: 20917},
			expr: &actionExpr{
				pos: position{line: 720, col: 5, offset: 20926},
				run: (*parser).callonGrep1,
				expr: &seqExpr{
					pos: position{line: 720, col: 5, offset: 20926},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 720, col: 5, offset: 20926},
							val:        "grep",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 720, col: 12, offset: 20933},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 720, col: 15, offset: 20936},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 720, col: 19, offset: 20940},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 720, col: 22, offset: 20943},
							label: "pattern",
							expr: &ruleRefExpr{
								pos:  position{line: 720, col: 30, offset: 20951},
								name: "Pattern",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 720, col: 38, offset: 20959},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 720, col: 42, offset: 20963},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 720, col: 46, offset: 20967},
								expr: &seqExpr{
									pos: position{line: 720, col: 47, offset: 20968},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 720, col: 47, offset: 20968},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 720, col: 51, offset: 20972},
											name: "__",
										},
										&choiceExpr{
											pos: position{line: 720, col: 56, offset: 20977},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 720, col: 56, offset: 20977},
													name: "OverExpr",
												},
												&ruleRefExpr{
													pos:  position{line: 720, col: 67, offset: 20988},
													name: "Expr",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 720, col: 73, offset: 20994},
											name: "__",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 720, col: 78, offset: 20999},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Pattern",
			pos:  position{line: 728, col: 1, offset: 21240},
			expr: &choiceExpr{
				pos: position{line: 729, col: 5, offset: 21252},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 729, col: 5, offset: 21252},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 730, col: 5, offset: 21263},
						name: "Glob",
					},
					&actionExpr{
						pos: position{line: 731, col: 5, offset: 21272},
						run: (*parser).callonPattern4,
						expr: &labeledExpr{
							pos:   position{line: 731, col: 5, offset: 21272},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 731, col: 7, offset: 21274},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "OptionalExprs",
			pos:  position{line: 735, col: 1, offset: 21366},
			expr: &choiceExpr{
				pos: position{line: 736, col: 5, offset: 21384},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 736, col: 5, offset: 21384},
						name: "Exprs",
					},
					&actionExpr{
						pos: position{line: 737, col: 5, offset: 21394},
						run: (*parser).callonOptionalExprs3,
						expr: &ruleRefExpr{
							pos:  position{line: 737, col: 5, offset: 21394},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 739, col: 1, offset: 21430},
			expr: &actionExpr{
				pos: position{line: 740, col: 5, offset: 21440},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 740, col: 5, offset: 21440},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 740, col: 5, offset: 21440},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 740, col: 11, offset: 21446},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 740, col: 16, offset: 21451},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 740, col: 21, offset: 21456},
								expr: &actionExpr{
									pos: position{line: 740, col: 22, offset: 21457},
									run: (*parser).callonExprs7,
									expr: &seqExpr{
										pos: position{line: 740, col: 22, offset: 21457},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 740, col: 22, offset: 21457},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 740, col: 25, offset: 21460},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 740, col: 29, offset: 21464},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 740, col: 32, offset: 21467},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 740, col: 34, offset: 21469},
													name: "Expr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 744, col: 1, offset: 21578},
			expr: &actionExpr{
				pos: position{line: 745, col: 5, offset: 21592},
				run: (*parser).callonDerefExpr1,
				expr: &seqExpr{
					pos: position{line: 745, col: 5, offset: 21592},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 745, col: 5, offset: 21592},
							expr: &ruleRefExpr{
								pos:  position{line: 745, col: 6, offset: 21593},
								name: "IP6",
							},
						},
						&labeledExpr{
							pos:   position{line: 745, col: 10, offset: 21597},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 745, col: 16, offset: 21603},
								name: "Identifier",
							},
						},
						&labeledExpr{
							pos:   position{line: 745, col: 27, offset: 21614},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 745, col: 32, offset: 21619},
								expr: &ruleRefExpr{
									pos:  position{line: 745, col: 33, offset: 21620},
									name: "Deref",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 749, col: 1, offset: 21688},
			expr: &choiceExpr{
				pos: position{line: 750, col: 5, offset: 21698},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 750, col: 5, offset: 21698},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 750, col: 5, offset: 21698},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 750, col: 5, offset: 21698},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 750, col: 9, offset: 21702},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 750, col: 14, offset: 21707},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 750, col: 27, offset: 21720},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 750, col: 30, offset: 21723},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 750, col: 34, offset: 21727},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 750, col: 37, offset: 21730},
									label: "to",
									expr: &zeroOrOneExpr{
										pos: position{line: 750, col: 40, offset: 21733},
										expr: &ruleRefExpr{
											pos:  position{line: 750, col: 40, offset: 21733},
											name: "AdditiveExpr",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 750, col: 54, offset: 21747},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 756, col: 5, offset: 21918},
						run: (*parser).callonDeref14,
						expr: &seqExpr{
							pos: position{line: 756, col: 5, offset: 21918},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 756, col: 5, offset: 21918},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 756, col: 9, offset: 21922},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 756, col: 12, offset: 21925},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 756, col: 16, offset: 21929},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 756, col: 19, offset: 21932},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 756, col: 22, offset: 21935},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 756, col: 35, offset: 21948},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 762, col: 5, offset: 22119},
						run: (*parser).callonDeref23,
						expr: &seqExpr{
							pos: position{line: 762, col: 5, offset: 22119},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 762, col: 5, offset: 22119},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 762, col: 9, offset: 22123},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 762, col: 14, offset: 22128},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 762, col: 19, offset: 22133},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 763, col: 5, offset: 22182},
						run: (*parser).callonDeref29,
						expr: &seqExpr{
							pos: position{line: 763, col: 5, offset: 22182},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 763, col: 5, offset: 22182},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 763, col: 9, offset: 22186},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 763, col: 12, offset: 22189},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 765, col: 1, offset: 22240},
			expr: &choiceExpr{
				pos: position{line: 766, col: 5, offset: 22252},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 766, col: 5, offset: 22252},
						name: "Record",
					},
					&ruleRefExpr{
						pos:  position{line: 767, col: 5, offset: 22263},
						name: "Array",
					},
					&ruleRefExpr{
						pos:  position{line: 768, col: 5, offset: 22273},
						name: "Set",
					},
					&ruleRefExpr{
						pos:  position{line: 769, col: 5, offset: 22281},
						name: "Map",
					},
					&ruleRefExpr{
						pos:  position{line: 770, col: 5, offset: 22289},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 771, col: 5, offset: 22301},
						run: (*parser).callonPrimary7,
						expr: &seqExpr{
							pos: position{line: 771, col: 5, offset: 22301},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 771, col: 5, offset: 22301},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 771, col: 9, offset: 22305},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 771, col: 12, offset: 22308},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 771, col: 17, offset: 22313},
										name: "OverExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 771, col: 26, offset: 22322},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 771, col: 29, offset: 22325},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 772, col: 5, offset: 22355},
						run: (*parser).callonPrimary15,
						expr: &seqExpr{
							pos: position{line: 772, col: 5, offset: 22355},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 772, col: 5, offset: 22355},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 772, col: 9, offset: 22359},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 772, col: 12, offset: 22362},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 772, col: 17, offset: 22367},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 772, col: 22, offset: 22372},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 772, col: 25, offset: 22375},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OverExpr",
			pos:  position{line: 774, col: 1, offset: 22401},
			expr: &actionExpr{
				pos: position{line: 775, col: 5, offset: 22414},
				run: (*parser).callonOverExpr1,
				expr: &seqExpr{
					pos: position{line: 775, col: 5, offset: 22414},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 775, col: 5, offset: 22414},
							val:        "over",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 775, col: 12, offset: 22421},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 775, col: 14, offset: 22423},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 775, col: 20, offset: 22429},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 775, col: 26, offset: 22435},
							label: "locals",
							expr: &zeroOrOneExpr{
								pos: position{line: 775, col: 33, offset: 22442},
								expr: &ruleRefExpr{
									pos:  position{line: 775, col: 33, offset: 22442},
									name: "Locals",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 775, col: 41, offset: 22450},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 775, col: 44, offset: 22453},
							val:        "|",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 775, col: 48, offset: 22457},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 775, col: 51, offset: 22460},
							label: "scope",
							expr: &ruleRefExpr{
								pos:  position{line: 775, col: 57, offset: 22466},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "Record",
			pos:  position{line: 779, col: 1, offset: 22597},
			expr: &actionExpr{
				pos: position{line: 780, col: 5, offset: 22608},
				run: (*parser).callonRecord1,
				expr: &seqExpr{
					pos: position{line: 780, col: 5, offset: 22608},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 780, col: 5, offset: 22608},
							val:        "{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 780, col: 9, offset: 22612},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 780, col: 12, offset: 22615},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 780, col: 18, offset: 22621},
								name: "RecordElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 780, col: 30, offset: 22633},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 780, col: 33, offset: 22636},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RecordElems",
			pos:  position{line: 784, col: 1, offset: 22726},
			expr: &choiceExpr{
				pos: position{line: 785, col: 5, offset: 22742},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 785, col: 5, offset: 22742},
						run: (*parser).callonRecordElems2,
						expr: &seqExpr{
							pos: position{line: 785, col: 5, offset: 22742},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 785, col: 5, offset: 22742},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 785, col: 11, offset: 22748},
										name: "RecordElem",
									},
								},
								&labeledExpr{
									pos:   position{line: 785, col: 22, offset: 22759},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 785, col: 27, offset: 22764},
										expr: &ruleRefExpr{
											pos:  position{line: 785, col: 27, offset: 22764},
											name: "RecordElemTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 788, col: 5, offset: 22863},
						run: (*parser).callonRecordElems9,
						expr: &ruleRefExpr{
							pos:  position{line: 788, col: 5, offset: 22863},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "RecordElemTail",
			pos:  position{line: 790, col: 1, offset: 22899},
			expr: &actionExpr{
				pos: position{line: 790, col: 18, offset: 22916},
				run: (*parser).callonRecordElemTail1,
				expr: &seqExpr{
					pos: position{line: 790, col: 18, offset: 22916},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 790, col: 18, offset: 22916},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 790, col: 21, offset: 22919},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 790, col: 25, offset: 22923},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 790, col: 28, offset: 22926},
							label: "elem",
							expr: &ruleRefExpr{
								pos:  position{line: 790, col: 33, offset: 22931},
								name: "RecordElem",
							},
						},
					},
				},
			},
		},
		{
			name: "RecordElem",
			pos:  position{line: 792, col: 1, offset: 22964},
			expr: &choiceExpr{
				pos: position{line: 793, col: 5, offset: 22979},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 793, col: 5, offset: 22979},
						name: "Spread",
					},
					&ruleRefExpr{
						pos:  position{line: 794, col: 5, offset: 22990},
						name: "Field",
					},
					&ruleRefExpr{
						pos:  position{line: 795, col: 5, offset: 23000},
						name: "Identifier",
					},
				},
			},
		},
		{
			name: "Spread",
			pos:  position{line: 797, col: 1, offset: 23012},
			expr: &actionExpr{
				pos: position{line: 798, col: 5, offset: 23023},
				run: (*parser).callonSpread1,
				expr: &seqExpr{
					pos: position{line: 798, col: 5, offset: 23023},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 798, col: 5, offset: 23023},
							val:        "...",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 798, col: 11, offset: 23029},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 798, col: 14, offset: 23032},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 798, col: 19, offset: 23037},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 802, col: 1, offset: 23123},
			expr: &actionExpr{
				pos: position{line: 803, col: 5, offset: 23133},
				run: (*parser).callonField1,
				expr: &seqExpr{
					pos: position{line: 803, col: 5, offset: 23133},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 803, col: 5, offset: 23133},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 803, col: 10, offset: 23138},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 803, col: 20, offset: 23148},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 803, col: 23, offset: 23151},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 803, col: 27, offset: 23155},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 803, col: 30, offset: 23158},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 803, col: 36, offset: 23164},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Array",
			pos:  position{line: 807, col: 1, offset: 23264},
			expr: &actionExpr{
				pos: position{line: 808, col: 5, offset: 23274},
				run: (*parser).callonArray1,
				expr: &seqExpr{
					pos: position{line: 808, col: 5, offset: 23274},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 808, col: 5, offset: 23274},
							val:        "[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 808, col: 9, offset: 23278},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 808, col: 12, offset: 23281},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 808, col: 18, offset: 23287},
								name: "VectorElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 808, col: 30, offset: 23299},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 808, col: 33, offset: 23302},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Set",
			pos:  position{line: 812, col: 1, offset: 23392},
			expr: &actionExpr{
				pos: position{line: 813, col: 5, offset: 23400},
				run: (*parser).callonSet1,
				expr: &seqExpr{
					pos: position{line: 813, col: 5, offset: 23400},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 813, col: 5, offset: 23400},
							val:        "|[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 813, col: 10, offset: 23405},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 813, col: 13, offset: 23408},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 813, col: 19, offset: 23414},
								name: "VectorElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 813, col: 31, offset: 23426},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 813, col: 34, offset: 23429},
							val:        "]|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "VectorElems",
			pos:  position{line: 817, col: 1, offset: 23518},
			expr: &choiceExpr{
				pos: position{line: 818, col: 5, offset: 23535},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 818, col: 5, offset: 23535},
						run: (*parser).callonVectorElems2,
						expr: &seqExpr{
							pos: position{line: 818, col: 5, offset: 23535},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 818, col: 5, offset: 23535},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 818, col: 11, offset: 23541},
										name: "VectorElem",
									},
								},
								&labeledExpr{
									pos:   position{line: 818, col: 22, offset: 23552},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 818, col: 27, offset: 23557},
										expr: &actionExpr{
											pos: position{line: 818, col: 28, offset: 23558},
											run: (*parser).callonVectorElems8,
											expr: &seqExpr{
												pos: position{line: 818, col: 28, offset: 23558},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 818, col: 28, offset: 23558},
														name: "__",
													},
													&litMatcher{
														pos:        position{line: 818, col: 31, offset: 23561},
														val:        ",",
														ignoreCase: false,
													},
													&ruleRefExpr{
														pos:  position{line: 818, col: 35, offset: 23565},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 818, col: 38, offset: 23568},
														label: "e",
														expr: &ruleRefExpr{
															pos:  position{line: 818, col: 40, offset: 23570},
															name: "VectorElem",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 821, col: 5, offset: 23688},
						run: (*parser).callonVectorElems15,
						expr: &ruleRefExpr{
							pos:  position{line: 821, col: 5, offset: 23688},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "VectorElem",
			pos:  position{line: 823, col: 1, offset: 23724},
			expr: &choiceExpr{
				pos: position{line: 824, col: 5, offset: 23739},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 824, col: 5, offset: 23739},
						name: "Spread",
					},
					&actionExpr{
						pos: position{line: 825, col: 5, offset: 23750},
						run: (*parser).callonVectorElem3,
						expr: &labeledExpr{
							pos:   position{line: 825, col: 5, offset: 23750},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 825, col: 7, offset: 23752},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Map",
			pos:  position{line: 827, col: 1, offset: 23828},
			expr: &actionExpr{
				pos: position{line: 828, col: 5, offset: 23836},
				run: (*parser).callonMap1,
				expr: &seqExpr{
					pos: position{line: 828, col: 5, offset: 23836},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 828, col: 5, offset: 23836},
							val:        "|{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 828, col: 10, offset: 23841},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 828, col: 13, offset: 23844},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 828, col: 19, offset: 23850},
								name: "Entries",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 828, col: 27, offset: 23858},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 828, col: 30, offset: 23861},
							val:        "}|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Entries",
			pos:  position{line: 832, col: 1, offset: 23952},
			expr: &choiceExpr{
				pos: position{line: 833, col: 5, offset: 23964},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 833, col: 5, offset: 23964},
						run: (*parser).callonEntries2,
						expr: &seqExpr{
							pos: position{line: 833, col: 5, offset: 23964},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 833, col: 5, offset: 23964},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 833, col: 11, offset: 23970},
										name: "Entry",
									},
								},
								&labeledExpr{
									pos:   position{line: 833, col: 17, offset: 23976},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 833, col: 22, offset: 23981},
										expr: &ruleRefExpr{
											pos:  position{line: 833, col: 22, offset: 23981},
											name: "EntryTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 836, col: 5, offset: 24075},
						run: (*parser).callonEntries9,
						expr: &ruleRefExpr{
							pos:  position{line: 836, col: 5, offset: 24075},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "EntryTail",
			pos:  position{line: 839, col: 1, offset: 24112},
			expr: &actionExpr{
				pos: position{line: 839, col: 13, offset: 24124},
				run: (*parser).callonEntryTail1,
				expr: &seqExpr{
					pos: position{line: 839, col: 13, offset: 24124},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 839, col: 13, offset: 24124},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 839, col: 16, offset: 24127},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 839, col: 20, offset: 24131},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 839, col: 23, offset: 24134},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 839, col: 25, offset: 24136},
								name: "Entry",
							},
						},
					},
				},
			},
		},
		{
			name: "Entry",
			pos:  position{line: 841, col: 1, offset: 24161},
			expr: &actionExpr{
				pos: position{line: 842, col: 5, offset: 24171},
				run: (*parser).callonEntry1,
				expr: &seqExpr{
					pos: position{line: 842, col: 5, offset: 24171},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 842, col: 5, offset: 24171},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 842, col: 9, offset: 24175},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 842, col: 14, offset: 24180},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 842, col: 17, offset: 24183},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 842, col: 21, offset: 24187},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 842, col: 24, offset: 24190},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 842, col: 30, offset: 24196},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOp",
			pos:  position{line: 848, col: 1, offset: 24303},
			expr: &actionExpr{
				pos: position{line: 849, col: 5, offset: 24313},
				run: (*parser).callonSQLOp1,
				expr: &seqExpr{
					pos: position{line: 849, col: 5, offset: 24313},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 849, col: 5, offset: 24313},
							label: "selection",
							expr: &ruleRefExpr{
								pos:  position{line: 849, col: 15, offset: 24323},
								name: "SQLSelect",
							},
						},
						&labeledExpr{
							pos:   position{line: 850, col: 5, offset: 24337},
							label: "from",
							expr: &zeroOrOneExpr{
								pos: position{line: 850, col: 10, offset: 24342},
								expr: &ruleRefExpr{
									pos:  position{line: 850, col: 10, offset: 24342},
									name: "SQLFrom",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 851, col: 5, offset: 24355},
							label: "joins",
							expr: &zeroOrOneExpr{
								pos: position{line: 851, col: 11, offset: 24361},
								expr: &ruleRefExpr{
									pos:  position{line: 851, col: 11, offset: 24361},
									name: "SQLJoins",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 852, col: 5, offset: 24375},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 852, col: 11, offset: 24381},
								expr: &ruleRefExpr{
									pos:  position{line: 852, col: 11, offset: 24381},
									name: "SQLWhere",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 853, col: 5, offset: 24395},
							label: "groupby",
							expr: &zeroOrOneExpr{
								pos: position{line: 853, col: 13, offset: 24403},
								expr: &ruleRefExpr{
									pos:  position{line: 853, col: 13, offset: 24403},
									name: "SQLGroupBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 854, col: 5, offset: 24419},
							label: "having",
							expr: &zeroOrOneExpr{
								pos: position{line: 854, col: 12, offset: 24426},
								expr: &ruleRefExpr{
									pos:  position{line: 854, col: 12, offset: 24426},
									name: "SQLHaving",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 855, col: 5, offset: 24441},
							label: "orderby",
							expr: &zeroOrOneExpr{
								pos: position{line: 855, col: 13, offset: 24449},
								expr: &ruleRefExpr{
									pos:  position{line: 855, col: 13, offset: 24449},
									name: "SQLOrderBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 856, col: 5, offset: 24465},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 856, col: 11, offset: 24471},
								name: "SQLLimit",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLSelect",
			pos:  position{line: 880, col: 1, offset: 24838},
			expr: &choiceExpr{
				pos: position{line: 881, col: 5, offset: 24852},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 881, col: 5, offset: 24852},
						run: (*parser).callonSQLSelect2,
						expr: &seqExpr{
							pos: position{line: 881, col: 5, offset: 24852},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 881, col: 5, offset: 24852},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 881, col: 12, offset: 24859},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 881, col: 14, offset: 24861},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 882, col: 5, offset: 24889},
						run: (*parser).callonSQLSelect7,
						expr: &seqExpr{
							pos: position{line: 882, col: 5, offset: 24889},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 882, col: 5, offset: 24889},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 882, col: 12, offset: 24896},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 882, col: 14, offset: 24898},
									label: "assignments",
									expr: &ruleRefExpr{
										pos:  position{line: 882, col: 26, offset: 24910},
										name: "SQLAssignments",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignment",
			pos:  position{line: 884, col: 1, offset: 24954},
			expr: &actionExpr{
				pos: position{line: 885, col: 5, offset: 24972},
				run: (*parser).callonSQLAssignment1,
				expr: &seqExpr{
					pos: position{line: 885, col: 5, offset: 24972},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 885, col: 5, offset: 24972},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 885, col: 9, offset: 24976},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 885, col: 14, offset: 24981},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 885, col: 18, offset: 24985},
								expr: &seqExpr{
									pos: position{line: 885, col: 19, offset: 24986},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 885, col: 19, offset: 24986},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 885, col: 21, offset: 24988},
											name: "AS",
										},
										&ruleRefExpr{
											pos:  position{line: 885, col: 24, offset: 24991},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 885, col: 26, offset: 24993},
											name: "Lval",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignments",
			pos:  position{line: 893, col: 1, offset: 25184},
			expr: &actionExpr{
				pos: position{line: 894, col: 5, offset: 25203},
				run: (*parser).callonSQLAssignments1,
				expr: &seqExpr{
					pos: position{line: 894, col: 5, offset: 25203},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 894, col: 5, offset: 25203},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 894, col: 11, offset: 25209},
								name: "SQLAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 894, col: 25, offset: 25223},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 894, col: 30, offset: 25228},
								expr: &actionExpr{
									pos: position{line: 894, col: 31, offset: 25229},
									run: (*parser).callonSQLAssignments7,
									expr: &seqExpr{
										pos: position{line: 894, col: 31, offset: 25229},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 894, col: 31, offset: 25229},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 894, col: 34, offset: 25232},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 894, col: 38, offset: 25236},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 894, col: 41, offset: 25239},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 894, col: 46, offset: 25244},
													name: "SQLAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLFrom",
			pos:  position{line: 898, col: 1, offset: 25365},
			expr: &choiceExpr{
				pos: position{line: 899, col: 5, offset: 25377},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 899, col: 5, offset: 25377},
						run: (*parser).callonSQLFrom2,
						expr: &seqExpr{
							pos: position{line: 899, col: 5, offset: 25377},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 899, col: 5, offset: 25377},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 899, col: 7, offset: 25379},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 899, col: 12, offset: 25384},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 899, col: 14, offset: 25386},
									label: "table",
									expr: &ruleRefExpr{
										pos:  position{line: 899, col: 20, offset: 25392},
										name: "SQLTable",
									},
								},
								&labeledExpr{
									pos:   position{line: 899, col: 29, offset: 25401},
									label: "alias",
									expr: &zeroOrOneExpr{
										pos: position{line: 899, col: 35, offset: 25407},
										expr: &ruleRefExpr{
											pos:  position{line: 899, col: 35, offset: 25407},
											name: "SQLAlias",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 902, col: 5, offset: 25502},
						run: (*parser).callonSQLFrom12,
						expr: &seqExpr{
							pos: position{line: 902, col: 5, offset: 25502},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 902, col: 5, offset: 25502},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 902, col: 7, offset: 25504},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 902, col: 12, offset: 25509},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 902, col: 14, offset: 25511},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAlias",
			pos:  position{line: 904, col: 1, offset: 25536},
			expr: &choiceExpr{
				pos: position{line: 905, col: 5, offset: 25549},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 905, col: 5, offset: 25549},
						run: (*parser).callonSQLAlias2,
						expr: &seqExpr{
							pos: position{line: 905, col: 5, offset: 25549},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 905, col: 5, offset: 25549},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 905, col: 7, offset: 25551},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 905, col: 10, offset: 25554},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 905, col: 12, offset: 25556},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 905, col: 15, offset: 25559},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 906, col: 5, offset: 25587},
						run: (*parser).callonSQLAlias9,
						expr: &seqExpr{
							pos: position{line: 906, col: 5, offset: 25587},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 906, col: 5, offset: 25587},
									name: "_",
								},
								&notExpr{
									pos: position{line: 906, col: 7, offset: 25589},
									expr: &seqExpr{
										pos: position{line: 906, col: 9, offset: 25591},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 906, col: 9, offset: 25591},
												name: "SQLTokenSentinels",
											},
											&ruleRefExpr{
												pos:  position{line: 906, col: 27, offset: 25609},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 906, col: 30, offset: 25612},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 906, col: 33, offset: 25615},
										name: "Lval",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLTable",
			pos:  position{line: 908, col: 1, offset: 25640},
			expr: &ruleRefExpr{
				pos:  position{line: 909, col: 5, offset: 25653},
				name: "Expr",
			},
		},
		{
			name: "SQLJoins",
			pos:  position{line: 911, col: 1, offset: 25659},
			expr: &actionExpr{
				pos: position{line: 912, col: 5, offset: 25672},
				run: (*parser).callonSQLJoins1,
				expr: &seqExpr{
					pos: position{line: 912, col: 5, offset: 25672},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 912, col: 5, offset: 25672},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 912, col: 11, offset: 25678},
								name: "SQLJoin",
							},
						},
						&labeledExpr{
							pos:   position{line: 912, col: 19, offset: 25686},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 912, col: 24, offset: 25691},
								expr: &actionExpr{
									pos: position{line: 912, col: 25, offset: 25692},
									run: (*parser).callonSQLJoins7,
									expr: &labeledExpr{
										pos:   position{line: 912, col: 25, offset: 25692},
										label: "join",
										expr: &ruleRefExpr{
											pos:  position{line: 912, col: 30, offset: 25697},
											name: "SQLJoin",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoin",
			pos:  position{line: 916, col: 1, offset: 25812},
			expr: &actionExpr{
				pos: position{line: 917, col: 5, offset: 25824},
				run: (*parser).callonSQLJoin1,
				expr: &seqExpr{
					pos: position{line: 917, col: 5, offset: 25824},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 917, col: 5, offset: 25824},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 917, col: 11, offset: 25830},
								name: "SQLJoinStyle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 917, col: 24, offset: 25843},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 917, col: 26, offset: 25845},
							name: "JOIN",
						},
						&ruleRefExpr{
							pos:  position{line: 917, col: 31, offset: 25850},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 917, col: 33, offset: 25852},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 917, col: 39, offset: 25858},
								name: "SQLTable",
							},
						},
						&labeledExpr{
							pos:   position{line: 917, col: 48, offset: 25867},
							label: "alias",
							expr: &zeroOrOneExpr{
								pos: position{line: 917, col: 54, offset: 25873},
								expr: &ruleRefExpr{
									pos:  position{line: 917, col: 54, offset: 25873},
									name: "SQLAlias",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 917, col: 64, offset: 25883},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 917, col: 66, offset: 25885},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 917, col: 69, offset: 25888},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 917, col: 71, offset: 25890},
							label: "leftKey",
							expr: &ruleRefExpr{
								pos:  position{line: 917, col: 79, offset: 25898},
								name: "JoinKey",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 917, col: 87, offset: 25906},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 917, col: 90, offset: 25909},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 917, col: 94, offset: 25913},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 917, col: 97, offset: 25916},
							label: "rightKey",
							expr: &ruleRefExpr{
								pos:  position{line: 917, col: 106, offset: 25925},
								name: "JoinKey",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoinStyle",
			pos:  position{line: 932, col: 1, offset: 26156},
			expr: &choiceExpr{
				pos: position{line: 933, col: 5, offset: 26173},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 933, col: 5, offset: 26173},
						run: (*parser).callonSQLJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 933, col: 5, offset: 26173},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 933, col: 5, offset: 26173},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 933, col: 7, offset: 26175},
									label: "style",
									expr: &choiceExpr{
										pos: position{line: 933, col: 14, offset: 26182},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 933, col: 14, offset: 26182},
												name: "ANTI",
											},
											&ruleRefExpr{
												pos:  position{line: 933, col: 21, offset: 26189},
												name: "INNER",
											},
											&ruleRefExpr{
												pos:  position{line: 933, col: 29, offset: 26197},
												name: "LEFT",
											},
											&ruleRefExpr{
												pos:  position{line: 933, col: 36, offset: 26204},
												name: "RIGHT",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 934, col: 5, offset: 26237},
						run: (*parser).callonSQLJoinStyle11,
						expr: &litMatcher{
							pos:        position{line: 934, col: 5, offset: 26237},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLWhere",
			pos:  position{line: 936, col: 1, offset: 26265},
			expr: &actionExpr{
				pos: position{line: 937, col: 5, offset: 26278},
				run: (*parser).callonSQLWhere1,
				expr: &seqExpr{
					pos: position{line: 937, col: 5, offset: 26278},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 937, col: 5, offset: 26278},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 937, col: 7, offset: 26280},
							name: "WHERE",
						},
						&ruleRefExpr{
							pos:  position{line: 937, col: 13, offset: 26286},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 937, col: 15, offset: 26288},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 937, col: 20, offset: 26293},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLGroupBy",
			pos:  position{line: 939, col: 1, offset: 26329},
			expr: &actionExpr{
				pos: position{line: 940, col: 5, offset: 26344},
				run: (*parser).callonSQLGroupBy1,
				expr: &seqExpr{
					pos: position{line: 940, col: 5, offset: 26344},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 940, col: 5, offset: 26344},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 940, col: 7, offset: 26346},
							name: "GROUP",
						},
						&ruleRefExpr{
							pos:  position{line: 940, col: 13, offset: 26352},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 940, col: 15, offset: 26354},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 940, col: 18, offset: 26357},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 940, col: 20, offset: 26359},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 940, col: 28, offset: 26367},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLHaving",
			pos:  position{line: 942, col: 1, offset: 26403},
			expr: &actionExpr{
				pos: position{line: 943, col: 5, offset: 26417},
				run: (*parser).callonSQLHaving1,
				expr: &seqExpr{
					pos: position{line: 943, col: 5, offset: 26417},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 943, col: 5, offset: 26417},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 943, col: 7, offset: 26419},
							name: "HAVING",
						},
						&ruleRefExpr{
							pos:  position{line: 943, col: 14, offset: 26426},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 943, col: 16, offset: 26428},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 943, col: 21, offset: 26433},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrderBy",
			pos:  position{line: 945, col: 1, offset: 26469},
			expr: &actionExpr{
				pos: position{line: 946, col: 5, offset: 26484},
				run: (*parser).callonSQLOrderBy1,
				expr: &seqExpr{
					pos: position{line: 946, col: 5, offset: 26484},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 946, col: 5, offset: 26484},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 946, col: 7, offset: 26486},
							name: "ORDER",
						},
						&ruleRefExpr{
							pos:  position{line: 946, col: 13, offset: 26492},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 946, col: 15, offset: 26494},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 946, col: 18, offset: 26497},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 946, col: 20, offset: 26499},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 946, col: 25, offset: 26504},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 946, col: 31, offset: 26510},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 946, col: 37, offset: 26516},
								name: "SQLOrder",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrder",
			pos:  position{line: 950, col: 1, offset: 26626},
			expr: &choiceExpr{
				pos: position{line: 951, col: 5, offset: 26639},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 951, col: 5, offset: 26639},
						run: (*parser).callonSQLOrder2,
						expr: &seqExpr{
							pos: position{line: 951, col: 5, offset: 26639},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 951, col: 5, offset: 26639},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 951, col: 7, offset: 26641},
									label: "dir",
									expr: &choiceExpr{
										pos: position{line: 951, col: 12, offset: 26646},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 951, col: 12, offset: 26646},
												name: "ASC",
											},
											&ruleRefExpr{
												pos:  position{line: 951, col: 18, offset: 26652},
												name: "DESC",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 952, col: 5, offset: 26682},
						run: (*parser).callonSQLOrder9,
						expr: &litMatcher{
							pos:        position{line: 952, col: 5, offset: 26682},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLLimit",
			pos:  position{line: 954, col: 1, offset: 26708},
			expr: &choiceExpr{
				pos: position{line: 955, col: 5, offset: 26721},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 955, col: 5, offset: 26721},
						run: (*parser).callonSQLLimit2,
						expr: &seqExpr{
							pos: position{line: 955, col: 5, offset: 26721},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 955, col: 5, offset: 26721},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 955, col: 7, offset: 26723},
									name: "LIMIT",
								},
								&ruleRefExpr{
									pos:  position{line: 955, col: 13, offset: 26729},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 955, col: 15, offset: 26731},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 955, col: 21, offset: 26737},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 956, col: 5, offset: 26768},
						run: (*parser).callonSQLLimit9,
						expr: &litMatcher{
							pos:        position{line: 956, col: 5, offset: 26768},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SELECT",
			pos:  position{line: 958, col: 1, offset: 26790},
			expr: &actionExpr{
				pos: position{line: 958, col: 10, offset: 26799},
				run: (*parser).callonSELECT1,
				expr: &litMatcher{
					pos:        position{line: 958, col: 10, offset: 26799},
					val:        "select",
					ignoreCase: true,
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 959, col: 1, offset: 26834},
			expr: &actionExpr{
				pos: position{line: 959, col: 6, offset: 26839},
				run: (*parser).callonAS1,
				expr: &litMatcher{
					pos:        position{line: 959, col: 6, offset: 26839},
					val:        "as",
					ignoreCase: true,
				},
			},
		},
		{
			name: "FROM",
			pos:  position{line: 960, col: 1, offset: 26866},
			expr: &actionExpr{
				pos: position{line: 960, col: 8, offset: 26873},
				run: (*parser).callonFROM1,
				expr: &litMatcher{
					pos:        position{line: 960, col: 8, offset: 26873},
					val:        "from",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JOIN",
			pos:  position{line: 961, col: 1, offset: 26904},
			expr: &actionExpr{
				pos: position{line: 961, col: 8, offset: 26911},
				run: (*parser).callonJOIN1,
				expr: &litMatcher{
					pos:        position{line: 961, col: 8, offset: 26911},
					val:        "join",
					ignoreCase: true,
				},
			},
		},
		{
			name: "WHERE",
			pos:  position{line: 962, col: 1, offset: 26942},
			expr: &actionExpr{
				pos: position{line: 962, col: 9, offset: 26950},
				run: (*parser).callonWHERE1,
				expr: &litMatcher{
					pos:        position{line: 962, col: 9, offset: 26950},
					val:        "where",
					ignoreCase: true,
				},
			},
		},
		{
			name: "GROUP",
			pos:  position{line: 963, col: 1, offset: 26983},
			expr: &actionExpr{
				pos: position{line: 963, col: 9, offset: 26991},
				run: (*parser).callonGROUP1,
				expr: &litMatcher{
					pos:        position{line: 963, col: 9, offset: 26991},
					val:        "group",
					ignoreCase: true,
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 964, col: 1, offset: 27024},
			expr: &actionExpr{
				pos: position{line: 964, col: 6, offset: 27029},
				run: (*parser).callonBY1,
				expr: &litMatcher{
					pos:        position{line: 964, col: 6, offset: 27029},
					val:        "by",
					ignoreCase: true,
				},
			},
		},
		{
			name: "HAVING",
			pos:  position{line: 965, col: 1, offset: 27056},
			expr: &actionExpr{
				pos: position{line: 965, col: 10, offset: 27065},
				run: (*parser).callonHAVING1,
				expr: &litMatcher{
					pos:        position{line: 965, col: 10, offset: 27065},
					val:        "having",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ORDER",
			pos:  position{line: 966, col: 1, offset: 27100},
			expr: &actionExpr{
				pos: position{line: 966, col: 9, offset: 27108},
				run: (*parser).callonORDER1,
				expr: &litMatcher{
					pos:        position{line: 966, col: 9, offset: 27108},
					val:        "order",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ON",
			pos:  position{line: 967, col: 1, offset: 27141},
			expr: &actionExpr{
				pos: position{line: 967, col: 6, offset: 27146},
				run: (*parser).callonON1,
				expr: &litMatcher{
					pos:        position{line: 967, col: 6, offset: 27146},
					val:        "on",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LIMIT",
			pos:  position{line: 968, col: 1, offset: 27173},
			expr: &actionExpr{
				pos: position{line: 968, col: 9, offset: 27181},
				run: (*parser).callonLIMIT1,
				expr: &litMatcher{
					pos:        position{line: 968, col: 9, offset: 27181},
					val:        "limit",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ASC",
			pos:  position{line: 969, col: 1, offset: 27214},
			expr: &actionExpr{
				pos: position{line: 969, col: 7, offset: 27220},
				run: (*parser).callonASC1,
				expr: &litMatcher{
					pos:        position{line: 969, col: 7, offset: 27220},
					val:        "asc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "DESC",
			pos:  position{line: 970, col: 1, offset: 27249},
			expr: &actionExpr{
				pos: position{line: 970, col: 8, offset: 27256},
				run: (*parser).callonDESC1,
				expr: &litMatcher{
					pos:        position{line: 970, col: 8, offset: 27256},
					val:        "desc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ANTI",
			pos:  position{line: 971, col: 1, offset: 27287},
			expr: &actionExpr{
				pos: position{line: 971, col: 8, offset: 27294},
				run: (*parser).callonANTI1,
				expr: &litMatcher{
					pos:        position{line: 971, col: 8, offset: 27294},
					val:        "anti",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LEFT",
			pos:  position{line: 972, col: 1, offset: 27325},
			expr: &actionExpr{
				pos: position{line: 972, col: 8, offset: 27332},
				run: (*parser).callonLEFT1,
				expr: &litMatcher{
					pos:        position{line: 972, col: 8, offset: 27332},
					val:        "left",
					ignoreCase: true,
				},
			},
		},
		{
			name: "RIGHT",
			pos:  position{line: 973, col: 1, offset: 27363},
			expr: &actionExpr{
				pos: position{line: 973, col: 9, offset: 27371},
				run: (*parser).callonRIGHT1,
				expr: &litMatcher{
					pos:        position{line: 973, col: 9, offset: 27371},
					val:        "right",
					ignoreCase: true,
				},
			},
		},
		{
			name: "INNER",
			pos:  position{line: 974, col: 1, offset: 27404},
			expr: &actionExpr{
				pos: position{line: 974, col: 9, offset: 27412},
				run: (*parser).callonINNER1,
				expr: &litMatcher{
					pos:        position{line: 974, col: 9, offset: 27412},
					val:        "inner",
					ignoreCase: true,
				},
			},
		},
		{
			name: "SQLTokenSentinels",
			pos:  position{line: 976, col: 1, offset: 27446},
			expr: &choiceExpr{
				pos: position{line: 977, col: 5, offset: 27468},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 977, col: 5, offset: 27468},
						name: "SELECT",
					},
					&ruleRefExpr{
						pos:  position{line: 977, col: 14, offset: 27477},
						name: "AS",
					},
					&ruleRefExpr{
						pos:  position{line: 977, col: 19, offset: 27482},
						name: "FROM",
					},
					&ruleRefExpr{
						pos:  position{line: 977, col: 27, offset: 27490},
						name: "JOIN",
					},
					&ruleRefExpr{
						pos:  position{line: 977, col: 34, offset: 27497},
						name: "WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 977, col: 42, offset: 27505},
						name: "GROUP",
					},
					&ruleRefExpr{
						pos:  position{line: 977, col: 50, offset: 27513},
						name: "HAVING",
					},
					&ruleRefExpr{
						pos:  position{line: 977, col: 59, offset: 27522},
						name: "ORDER",
					},
					&ruleRefExpr{
						pos:  position{line: 977, col: 67, offset: 27530},
						name: "LIMIT",
					},
					&ruleRefExpr{
						pos:  position{line: 977, col: 75, offset: 27538},
						name: "ON",
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 981, col: 1, offset: 27564},
			expr: &choiceExpr{
				pos: position{line: 982, col: 5, offset: 27576},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 982, col: 5, offset: 27576},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 983, col: 5, offset: 27592},
						name: "TemplateLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 984, col: 5, offset: 27612},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 985, col: 5, offset: 27630},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 986, col: 5, offset: 27649},
						name: "BytesLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 987, col: 5, offset: 27666},
						name: "Duration",
					},
					&ruleRefExpr{
						pos:  position{line: 988, col: 5, offset: 27679},
						name: "Time",
					},
					&ruleRefExpr{
						pos:  position{line: 989, col: 5, offset: 27688},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 990, col: 5, offset: 27705},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 991, col: 5, offset: 27724},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 992, col: 5, offset: 27743},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 994, col: 1, offset: 27756},
			expr: &choiceExpr{
				pos: position{line: 995, col: 5, offset: 27774},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 995, col: 5, offset: 27774},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 995, col: 5, offset: 27774},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 995, col: 5, offset: 27774},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 995, col: 7, offset: 27776},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 995, col: 14, offset: 27783},
									expr: &ruleRefExpr{
										pos:  position{line: 995, col: 15, offset: 27784},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 998, col: 5, offset: 27899},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 998, col: 5, offset: 27899},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 998, col: 7, offset: 27901},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 1002, col: 1, offset: 28005},
			expr: &choiceExpr{
				pos: position{line: 1003, col: 5, offset: 28024},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1003, col: 5, offset: 28024},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 1003, col: 5, offset: 28024},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1003, col: 5, offset: 28024},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1003, col: 7, offset: 28026},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 1003, col: 11, offset: 28030},
									expr: &ruleRefExpr{
										pos:  position{line: 1003, col: 12, offset: 28031},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1006, col: 5, offset: 28145},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 1006, col: 5, offset: 28145},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1006, col: 7, offset: 28147},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 1010, col: 1, offset: 28246},
			expr: &actionExpr{
				pos: position{line: 1011, col: 5, offset: 28263},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1011, col: 5, offset: 28263},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1011, col: 7, offset: 28265},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 1015, col: 1, offset: 28378},
			expr: &actionExpr{
				pos: position{line: 1016, col: 5, offset: 28397},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1016, col: 5, offset: 28397},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1016, col: 7, offset: 28399},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 1020, col: 1, offset: 28508},
			expr: &choiceExpr{
				pos: position{line: 1021, col: 5, offset: 28527},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1021, col: 5, offset: 28527},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 1021, col: 5, offset: 28527},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1022, col: 5, offset: 28640},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 1022, col: 5, offset: 28640},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 1024, col: 1, offset: 28751},
			expr: &actionExpr{
				pos: position{line: 1025, col: 5, offset: 28767},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 1025, col: 5, offset: 28767},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "BytesLiteral",
			pos:  position{line: 1027, col: 1, offset: 28873},
			expr: &actionExpr{
				pos: position{line: 1028, col: 5, offset: 28890},
				run: (*parser).callonBytesLiteral1,
				expr: &seqExpr{
					pos: position{line: 1028, col: 5, offset: 28890},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1028, col: 5, offset: 28890},
							val:        "0x",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1028, col: 10, offset: 28895},
							expr: &ruleRefExpr{
								pos:  position{line: 1028, col: 10, offset: 28895},
								name: "HexDigit",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeLiteral",
			pos:  position{line: 1032, col: 1, offset: 29010},
			expr: &actionExpr{
				pos: position{line: 1033, col: 5, offset: 29026},
				run: (*parser).callonTypeLiteral1,
				expr: &seqExpr{
					pos: position{line: 1033, col: 5, offset: 29026},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1033, col: 5, offset: 29026},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1033, col: 9, offset: 29030},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1033, col: 13, offset: 29034},
								name: "Type",
							},
						},
						&litMatcher{
							pos:        position{line: 1033, col: 18, offset: 29039},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "CastType",
			pos:  position{line: 1037, col: 1, offset: 29128},
			expr: &choiceExpr{
				pos: position{line: 1038, col: 5, offset: 29141},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1038, col: 5, offset: 29141},
						name: "TypeLiteral",
					},
					&actionExpr{
						pos: position{line: 1039, col: 5, offset: 29157},
						run: (*parser).callonCastType3,
						expr: &labeledExpr{
							pos:   position{line: 1039, col: 5, offset: 29157},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1039, col: 9, offset: 29161},
								name: "PrimitiveType",
							},
						},
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 1043, col: 1, offset: 29260},
			expr: &choiceExpr{
				pos: position{line: 1044, col: 5, offset: 29269},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1044, col: 5, offset: 29269},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1045, col: 5, offset: 29285},
						name: "AmbiguousType",
					},
					&ruleRefExpr{
						pos:  position{line: 1046, col: 5, offset: 29303},
						name: "ComplexType",
					},
				},
			},
		},
		{
			name: "AmbiguousType",
			pos:  position{line: 1048, col: 1, offset: 29316},
			expr: &choiceExpr{
				pos: position{line: 1049, col: 5, offset: 29334},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1049, col: 5, offset: 29334},
						run: (*parser).callonAmbiguousType2,
						expr: &seqExpr{
							pos: position{line: 1049, col: 5, offset: 29334},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1049, col: 5, offset: 29334},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1049, col: 10, offset: 29339},
										name: "PrimitiveType",
									},
								},
								&notExpr{
									pos: position{line: 1049, col: 24, offset: 29353},
									expr: &ruleRefExpr{
										pos:  position{line: 1049, col: 25, offset: 29354},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1050, col: 5, offset: 29394},
						run: (*parser).callonAmbiguousType8,
						expr: &seqExpr{
							pos: position{line: 1050, col: 5, offset: 29394},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1050, col: 5, offset: 29394},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1050, col: 10, offset: 29399},
										name: "IdentifierName",
									},
								},
								&labeledExpr{
									pos:   position{line: 1050, col: 25, offset: 29414},
									label: "opt",
									expr: &zeroOrOneExpr{
										pos: position{line: 1050, col: 29, offset: 29418},
										expr: &seqExpr{
											pos: position{line: 1050, col: 30, offset: 29419},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1050, col: 30, offset: 29419},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 1050, col: 33, offset: 29422},
													val:        "=",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 1050, col: 37, offset: 29426},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 1050, col: 40, offset: 29429},
													name: "Type",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1056, col: 5, offset: 29661},
						run: (*parser).callonAmbiguousType19,
						expr: &seqExpr{
							pos: position{line: 1056, col: 5, offset: 29661},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1056, col: 5, offset: 29661},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1056, col: 9, offset: 29665},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1056, col: 12, offset: 29668},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 1056, col: 14, offset: 29670},
										name: "TypeUnion",
									},
								},
								&litMatcher{
									pos:        position{line: 1056, col: 25, offset: 29681},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeUnion",
			pos:  position{line: 1058, col: 1, offset: 29704},
			expr: &actionExpr{
				pos: position{line: 1059, col: 5, offset: 29718},
				run: (*parser).callonTypeUnion1,
				expr: &labeledExpr{
					pos:   position{line: 1059, col: 5, offset: 29718},
					label: "types",
					expr: &ruleRefExpr{
						pos:  position{line: 1059, col: 11, offset: 29724},
						name: "TypeList",
					},
				},
			},
		},
		{
			name: "TypeList",
			pos:  position{line: 1063, col: 1, offset: 29820},
			expr: &actionExpr{
				pos: position{line: 1064, col: 5, offset: 29833},
				run: (*parser).callonTypeList1,
				expr: &seqExpr{
					pos: position{line: 1064, col: 5, offset: 29833},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1064, col: 5, offset: 29833},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1064, col: 11, offset: 29839},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 1064, col: 16, offset: 29844},
							label: "rest",
							expr: &oneOrMoreExpr{
								pos: position{line: 1064, col: 21, offset: 29849},
								expr: &ruleRefExpr{
									pos:  position{line: 1064, col: 21, offset: 29849},
									name: "TypeListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeListTail",
			pos:  position{line: 1068, col: 1, offset: 29943},
			expr: &actionExpr{
				pos: position{line: 1068, col: 16, offset: 29958},
				run: (*parser).callonTypeListTail1,
				expr: &seqExpr{
					pos: position{line: 1068, col: 16, offset: 29958},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1068, col: 16, offset: 29958},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1068, col: 19, offset: 29961},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1068, col: 23, offset: 29965},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1068, col: 26, offset: 29968},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1068, col: 30, offset: 29972},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexType",
			pos:  position{line: 1070, col: 1, offset: 29998},
			expr: &choiceExpr{
				pos: position{line: 1071, col: 5, offset: 30014},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1071, col: 5, offset: 30014},
						run: (*parser).callonComplexType2,
						expr: &seqExpr{
							pos: position{line: 1071, col: 5, offset: 30014},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1071, col: 5, offset: 30014},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1071, col: 9, offset: 30018},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1071, col: 12, offset: 30021},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 1071, col: 19, offset: 30028},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1071, col: 33, offset: 30042},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1071, col: 36, offset: 30045},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1074, col: 5, offset: 30140},
						run: (*parser).callonComplexType10,
						expr: &seqExpr{
							pos: position{line: 1074, col: 5, offset: 30140},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1074, col: 5, offset: 30140},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1074, col: 9, offset: 30144},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1074, col: 12, offset: 30147},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1074, col: 16, offset: 30151},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1074, col: 21, offset: 30156},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1074, col: 24, offset: 30159},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1077, col: 5, offset: 30248},
						run: (*parser).callonComplexType18,
						expr: &seqExpr{
							pos: position{line: 1077, col: 5, offset: 30248},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1077, col: 5, offset: 30248},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1077, col: 10, offset: 30253},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1077, col: 14, offset: 30257},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1077, col: 18, offset: 30261},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1077, col: 23, offset: 30266},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1077, col: 26, offset: 30269},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1080, col: 5, offset: 30357},
						run: (*parser).callonComplexType26,
						expr: &seqExpr{
							pos: position{line: 1080, col: 5, offset: 30357},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1080, col: 5, offset: 30357},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1080, col: 10, offset: 30362},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1080, col: 13, offset: 30365},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 1080, col: 21, offset: 30373},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1080, col: 26, offset: 30378},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1080, col: 29, offset: 30381},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1080, col: 33, offset: 30385},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1080, col: 36, offset: 30388},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 1080, col: 44, offset: 30396},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1080, col: 49, offset: 30401},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1080, col: 52, offset: 30404},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateLiteral",
			pos:  position{line: 1084, col: 1, offset: 30518},
			expr: &actionExpr{
				pos: position{line: 1085, col: 5, offset: 30538},
				run: (*parser).callonTemplateLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1085, col: 5, offset: 30538},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1085, col: 7, offset: 30540},
						name: "TemplateLiteralParts",
					},
				},
			},
		},
		{
			name: "TemplateLiteralParts",
			pos:  position{line: 1092, col: 1, offset: 30756},
			expr: &choiceExpr{
				pos: position{line: 1093, col: 5, offset: 30781},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1093, col: 5, offset: 30781},
						run: (*parser).callonTemplateLiteralParts2,
						expr: &seqExpr{
							pos: position{line: 1093, col: 5, offset: 30781},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1093, col: 5, offset: 30781},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1093, col: 9, offset: 30785},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1093, col: 11, offset: 30787},
										expr: &ruleRefExpr{
											pos:  position{line: 1093, col: 11, offset: 30787},
											name: "TemplateDoubleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1093, col: 37, offset: 30813},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1094, col: 5, offset: 30839},
						run: (*parser).callonTemplateLiteralParts9,
						expr: &seqExpr{
							pos: position{line: 1094, col: 5, offset: 30839},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1094, col: 5, offset: 30839},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1094, col: 9, offset: 30843},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1094, col: 11, offset: 30845},
										expr: &ruleRefExpr{
											pos:  position{line: 1094, col: 11, offset: 30845},
											name: "TemplateSingleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1094, col: 37, offset: 30871},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedPart",
			pos:  position{line: 1096, col: 1, offset: 30894},
			expr: &choiceExpr{
				pos: position{line: 1097, col: 5, offset: 30923},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1097, col: 5, offset: 30923},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 1098, col: 5, offset: 30940},
						run: (*parser).callonTemplateDoubleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 1098, col: 5, offset: 30940},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1098, col: 7, offset: 30942},
								expr: &ruleRefExpr{
									pos:  position{line: 1098, col: 7, offset: 30942},
									name: "TemplateDoubleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedChar",
			pos:  position{line: 1102, col: 1, offset: 31079},
			expr: &choiceExpr{
				pos: position{line: 1103, col: 5, offset: 31108},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1103, col: 5, offset: 31108},
						run: (*parser).callonTemplateDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1103, col: 5, offset: 31108},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1103, col: 5, offset: 31108},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1103, col: 10, offset: 31113},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1103, col: 12, offset: 31115},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1104, col: 5, offset: 31142},
						run: (*parser).callonTemplateDoubleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1104, col: 5, offset: 31142},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1104, col: 5, offset: 31142},
									expr: &litMatcher{
										pos:        position{line: 1104, col: 8, offset: 31145},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1104, col: 15, offset: 31152},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1104, col: 17, offset: 31154},
										name: "DoubleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedPart",
			pos:  position{line: 1106, col: 1, offset: 31190},
			expr: &choiceExpr{
				pos: position{line: 1107, col: 5, offset: 31219},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1107, col: 5, offset: 31219},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 1108, col: 5, offset: 31236},
						run: (*parser).callonTemplateSingleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 1108, col: 5, offset: 31236},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1108, col: 7, offset: 31238},
								expr: &ruleRefExpr{
									pos:  position{line: 1108, col: 7, offset: 31238},
									name: "TemplateSingleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedChar",
			pos:  position{line: 1112, col: 1, offset: 31375},
			expr: &choiceExpr{
				pos: position{line: 1113, col: 5, offset: 31404},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1113, col: 5, offset: 31404},
						run: (*parser).callonTemplateSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1113, col: 5, offset: 31404},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1113, col: 5, offset: 31404},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1113, col: 10, offset: 31409},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1113, col: 12, offset: 31411},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1114, col: 5, offset: 31438},
						run: (*parser).callonTemplateSingleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1114, col: 5, offset: 31438},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1114, col: 5, offset: 31438},
									expr: &litMatcher{
										pos:        position{line: 1114, col: 8, offset: 31441},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1114, col: 15, offset: 31448},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1114, col: 17, offset: 31450},
										name: "SingleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateExpr",
			pos:  position{line: 1116, col: 1, offset: 31486},
			expr: &actionExpr{
				pos: position{line: 1117, col: 5, offset: 31503},
				run: (*parser).callonTemplateExpr1,
				expr: &seqExpr{
					pos: position{line: 1117, col: 5, offset: 31503},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1117, col: 5, offset: 31503},
							val:        "${",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1117, col: 10, offset: 31508},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1117, col: 13, offset: 31511},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 1117, col: 15, offset: 31513},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1117, col: 20, offset: 31518},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1117, col: 23, offset: 31521},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 1132, col: 1, offset: 31817},
			expr: &actionExpr{
				pos: position{line: 1133, col: 5, offset: 31835},
				run: (*parser).callonPrimitiveType1,
				expr: &choiceExpr{
					pos: position{line: 1133, col: 9, offset: 31839},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 1133, col: 9, offset: 31839},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1133, col: 19, offset: 31849},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1133, col: 30, offset: 31860},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1133, col: 41, offset: 31871},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1134, col: 9, offset: 31888},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1134, col: 18, offset: 31897},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1134, col: 28, offset: 31907},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1134, col: 38, offset: 31917},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1135, col: 9, offset: 31933},
							val:        "float32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1135, col: 21, offset: 31945},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1136, col: 9, offset: 31963},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1136, col: 18, offset: 31972},
							val:        "string",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1137, col: 9, offset: 31989},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1137, col: 22, offset: 32002},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1138, col: 9, offset: 32017},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1139, col: 9, offset: 32033},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1139, col: 16, offset: 32040},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1140, col: 9, offset: 32054},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1140, col: 18, offset: 32063},
							val:        "null",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldList",
			pos:  position{line: 1144, col: 1, offset: 32179},
			expr: &choiceExpr{
				pos: position{line: 1145, col: 5, offset: 32197},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1145, col: 5, offset: 32197},
						run: (*parser).callonTypeFieldList2,
						expr: &seqExpr{
							pos: position{line: 1145, col: 5, offset: 32197},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1145, col: 5, offset: 32197},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 1145, col: 11, offset: 32203},
										name: "TypeField",
									},
								},
								&labeledExpr{
									pos:   position{line: 1145, col: 21, offset: 32213},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1145, col: 26, offset: 32218},
										expr: &ruleRefExpr{
											pos:  position{line: 1145, col: 26, offset: 32218},
											name: "TypeFieldListTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1148, col: 5, offset: 32320},
						run: (*parser).callonTypeFieldList9,
						expr: &litMatcher{
							pos:        position{line: 1148, col: 5, offset: 32320},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTail",
			pos:  position{line: 1150, col: 1, offset: 32344},
			expr: &actionExpr{
				pos: position{line: 1150, col: 21, offset: 32364},
				run: (*parser).callonTypeFieldListTail1,
				expr: &seqExpr{
					pos: position{line: 1150, col: 21, offset: 32364},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1150, col: 21, offset: 32364},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1150, col: 24, offset: 32367},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1150, col: 28, offset: 32371},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1150, col: 31, offset: 32374},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1150, col: 35, offset: 32378},
								name: "TypeField",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeField",
			pos:  position{line: 1152, col: 1, offset: 32409},
			expr: &actionExpr{
				pos: position{line: 1153, col: 5, offset: 32423},
				run: (*parser).callonTypeField1,
				expr: &seqExpr{
					pos: position{line: 1153, col: 5, offset: 32423},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1153, col: 5, offset: 32423},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1153, col: 10, offset: 32428},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1153, col: 20, offset: 32438},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1153, col: 23, offset: 32441},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1153, col: 27, offset: 32445},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1153, col: 30, offset: 32448},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1153, col: 34, offset: 32452},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 1157, col: 1, offset: 32534},
			expr: &choiceExpr{
				pos: position{line: 1158, col: 5, offset: 32548},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1158, col: 5, offset: 32548},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 1159, col: 5, offset: 32567},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 1161, col: 1, offset: 32581},
			expr: &actionExpr{
				pos: position{line: 1161, col: 12, offset: 32592},
				run: (*parser).callonAndToken1,
				expr: &seqExpr{
					pos: position{line: 1161, col: 12, offset: 32592},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1161, col: 13, offset: 32593},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1161, col: 13, offset: 32593},
									val:        "and",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1161, col: 21, offset: 32601},
									val:        "AND",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1161, col: 28, offset: 32608},
							expr: &ruleRefExpr{
								pos:  position{line: 1161, col: 29, offset: 32609},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 1162, col: 1, offset: 32646},
			expr: &actionExpr{
				pos: position{line: 1162, col: 11, offset: 32656},
				run: (*parser).callonOrToken1,
				expr: &seqExpr{
					pos: position{line: 1162, col: 11, offset: 32656},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1162, col: 12, offset: 32657},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1162, col: 12, offset: 32657},
									val:        "or",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1162, col: 19, offset: 32664},
									val:        "OR",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1162, col: 25, offset: 32670},
							expr: &ruleRefExpr{
								pos:  position{line: 1162, col: 26, offset: 32671},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 1163, col: 1, offset: 32707},
			expr: &actionExpr{
				pos: position{line: 1163, col: 11, offset: 32717},
				run: (*parser).callonInToken1,
				expr: &seqExpr{
					pos: position{line: 1163, col: 11, offset: 32717},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1163, col: 11, offset: 32717},
							val:        "in",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1163, col: 16, offset: 32722},
							expr: &ruleRefExpr{
								pos:  position{line: 1163, col: 17, offset: 32723},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 1164, col: 1, offset: 32759},
			expr: &actionExpr{
				pos: position{line: 1164, col: 12, offset: 32770},
				run: (*parser).callonNotToken1,
				expr: &seqExpr{
					pos: position{line: 1164, col: 12, offset: 32770},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1164, col: 13, offset: 32771},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1164, col: 13, offset: 32771},
									val:        "not",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1164, col: 21, offset: 32779},
									val:        "NOT",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1164, col: 28, offset: 32786},
							expr: &ruleRefExpr{
								pos:  position{line: 1164, col: 29, offset: 32787},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 1165, col: 1, offset: 32824},
			expr: &actionExpr{
				pos: position{line: 1165, col: 11, offset: 32834},
				run: (*parser).callonByToken1,
				expr: &seqExpr{
					pos: position{line: 1165, col: 11, offset: 32834},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1165, col: 11, offset: 32834},
							val:        "by",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1165, col: 16, offset: 32839},
							expr: &ruleRefExpr{
								pos:  position{line: 1165, col: 17, offset: 32840},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 1167, col: 1, offset: 32877},
			expr: &charClassMatcher{
				pos:        position{line: 1167, col: 19, offset: 32895},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 1169, col: 1, offset: 32907},
			expr: &choiceExpr{
				pos: position{line: 1169, col: 18, offset: 32924},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1169, col: 18, offset: 32924},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 1169, col: 36, offset: 32942},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 1171, col: 1, offset: 32949},
			expr: &actionExpr{
				pos: position{line: 1172, col: 5, offset: 32964},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 1172, col: 5, offset: 32964},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 1172, col: 8, offset: 32967},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 1174, col: 1, offset: 33048},
			expr: &choiceExpr{
				pos: position{line: 1175, col: 5, offset: 33067},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1175, col: 5, offset: 33067},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 1175, col: 5, offset: 33067},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1175, col: 5, offset: 33067},
									expr: &seqExpr{
										pos: position{line: 1175, col: 7, offset: 33069},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1175, col: 7, offset: 33069},
												name: "IDGuard",
											},
											&notExpr{
												pos: position{line: 1175, col: 15, offset: 33077},
												expr: &ruleRefExpr{
													pos:  position{line: 1175, col: 16, offset: 33078},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1175, col: 32, offset: 33094},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1175, col: 48, offset: 33110},
									expr: &ruleRefExpr{
										pos:  position{line: 1175, col: 48, offset: 33110},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1176, col: 5, offset: 33162},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 1176, col: 5, offset: 33162},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1177, col: 5, offset: 33201},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 1177, col: 5, offset: 33201},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1177, col: 5, offset: 33201},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1177, col: 10, offset: 33206},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1177, col: 13, offset: 33209},
										name: "IDGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1179, col: 5, offset: 33300},
						run: (*parser).callonIdentifierName19,
						expr: &litMatcher{
							pos:        position{line: 1179, col: 5, offset: 33300},
							val:        "type",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1180, col: 5, offset: 33342},
						run: (*parser).callonIdentifierName21,
						expr: &seqExpr{
							pos: position{line: 1180, col: 5, offset: 33342},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1180, col: 5, offset: 33342},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1180, col: 8, offset: 33345},
										name: "SQLTokenSentinels",
									},
								},
								&andExpr{
									pos: position{line: 1180, col: 26, offset: 33363},
									expr: &seqExpr{
										pos: position{line: 1180, col: 28, offset: 33365},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1180, col: 28, offset: 33365},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1180, col: 31, offset: 33368},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IDGuard",
			pos:  position{line: 1182, col: 1, offset: 33393},
			expr: &choiceExpr{
				pos: position{line: 1183, col: 5, offset: 33405},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1183, col: 5, offset: 33405},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1184, col: 5, offset: 33424},
						name: "NullLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1185, col: 5, offset: 33440},
						name: "NaN",
					},
					&ruleRefExpr{
						pos:  position{line: 1186, col: 5, offset: 33448},
						name: "Infinity",
					},
				},
			},
		},
		{
			name: "Time",
			pos:  position{line: 1188, col: 1, offset: 33458},
			expr: &actionExpr{
				pos: position{line: 1189, col: 5, offset: 33467},
				run: (*parser).callonTime1,
				expr: &seqExpr{
					pos: position{line: 1189, col: 5, offset: 33467},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1189, col: 5, offset: 33467},
							name: "FullDate",
						},
						&litMatcher{
							pos:        position{line: 1189, col: 14, offset: 33476},
							val:        "T",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1189, col: 18, offset: 33480},
							name: "FullTime",
						},
					},
				},
			},
		},
		{
			name: "FullDate",
			pos:  position{line: 1193, col: 1, offset: 33600},
			expr: &seqExpr{
				pos: position{line: 1193, col: 12, offset: 33611},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1193, col: 12, offset: 33611},
						name: "D4",
					},
					&litMatcher{
						pos:        position{line: 1193, col: 15, offset: 33614},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1193, col: 19, offset: 33618},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1193, col: 22, offset: 33621},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1193, col: 26, offset: 33625},
						name: "D2",
					},
				},
			},
		},
		{
			name: "D4",
			pos:  position{line: 1195, col: 1, offset: 33629},
			expr: &seqExpr{
				pos: position{line: 1195, col: 6, offset: 33634},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1195, col: 6, offset: 33634},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1195, col: 11, offset: 33639},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1195, col: 16, offset: 33644},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1195, col: 21, offset: 33649},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "D2",
			pos:  position{line: 1196, col: 1, offset: 33655},
			expr: &seqExpr{
				pos: position{line: 1196, col: 6, offset: 33660},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1196, col: 6, offset: 33660},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1196, col: 11, offset: 33665},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "FullTime",
			pos:  position{line: 1198, col: 1, offset: 33672},
			expr: &seqExpr{
				pos: position{line: 1198, col: 12, offset: 33683},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1198, col: 12, offset: 33683},
						name: "PartialTime",
					},
					&ruleRefExpr{
						pos:  position{line: 1198, col: 24, offset: 33695},
						name: "TimeOffset",
					},
				},
			},
		},
		{
			name: "PartialTime",
			pos:  position{line: 1200, col: 1, offset: 33707},
			expr: &seqExpr{
				pos: position{line: 1200, col: 15, offset: 33721},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1200, col: 15, offset: 33721},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1200, col: 18, offset: 33724},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1200, col: 22, offset: 33728},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1200, col: 25, offset: 33731},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1200, col: 29, offset: 33735},
						name: "D2",
					},
					&zeroOrOneExpr{
						pos: position{line: 1200, col: 32, offset: 33738},
						expr: &seqExpr{
							pos: position{line: 1200, col: 33, offset: 33739},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1200, col: 33, offset: 33739},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1200, col: 37, offset: 33743},
									expr: &charClassMatcher{
										pos:        position{line: 1200, col: 37, offset: 33743},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeOffset",
			pos:  position{line: 1202, col: 1, offset: 33753},
			expr: &choiceExpr{
				pos: position{line: 1203, col: 5, offset: 33768},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1203, col: 5, offset: 33768},
						val:        "Z",
						ignoreCase: false,
					},
					&seqExpr{
						pos: position{line: 1204, col: 5, offset: 33776},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 1204, col: 6, offset: 33777},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1204, col: 6, offset: 33777},
										val:        "+",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 1204, col: 12, offset: 33783},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1204, col: 17, offset: 33788},
								name: "D2",
							},
							&litMatcher{
								pos:        position{line: 1204, col: 20, offset: 33791},
								val:        ":",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 1204, col: 24, offset: 33795},
								name: "D2",
							},
							&zeroOrOneExpr{
								pos: position{line: 1204, col: 27, offset: 33798},
								expr: &seqExpr{
									pos: position{line: 1204, col: 28, offset: 33799},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1204, col: 28, offset: 33799},
											val:        ".",
											ignoreCase: false,
										},
										&oneOrMoreExpr{
											pos: position{line: 1204, col: 32, offset: 33803},
											expr: &charClassMatcher{
												pos:        position{line: 1204, col: 32, offset: 33803},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 1206, col: 1, offset: 33813},
			expr: &actionExpr{
				pos: position{line: 1207, col: 5, offset: 33826},
				run: (*parser).callonDuration1,
				expr: &seqExpr{
					pos: position{line: 1207, col: 5, offset: 33826},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1207, col: 5, offset: 33826},
							expr: &litMatcher{
								pos:        position{line: 1207, col: 5, offset: 33826},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1207, col: 10, offset: 33831},
							expr: &seqExpr{
								pos: position{line: 1207, col: 11, offset: 33832},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1207, col: 11, offset: 33832},
										name: "Decimal",
									},
									&ruleRefExpr{
										pos:  position{line: 1207, col: 19, offset: 33840},
										name: "TimeUnit",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Decimal",
			pos:  position{line: 1211, col: 1, offset: 33966},
			expr: &seqExpr{
				pos: position{line: 1211, col: 11, offset: 33976},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1211, col: 11, offset: 33976},
						name: "UInt",
					},
					&zeroOrOneExpr{
						pos: position{line: 1211, col: 16, offset: 33981},
						expr: &seqExpr{
							pos: position{line: 1211, col: 17, offset: 33982},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1211, col: 17, offset: 33982},
									val:        ".",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1211, col: 21, offset: 33986},
									name: "UInt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeUnit",
			pos:  position{line: 1213, col: 1, offset: 33994},
			expr: &choiceExpr{
				pos: position{line: 1214, col: 5, offset: 34007},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1214, col: 5, offset: 34007},
						val:        "ns",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1215, col: 5, offset: 34016},
						val:        "us",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1216, col: 5, offset: 34025},
						val:        "ms",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1217, col: 5, offset: 34034},
						val:        "s",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1218, col: 5, offset: 34042},
						val:        "m",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1219, col: 5, offset: 34050},
						val:        "h",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1220, col: 5, offset: 34058},
						val:        "d",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1221, col: 5, offset: 34066},
						val:        "w",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1222, col: 5, offset: 34074},
						val:        "y",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 1224, col: 1, offset: 34079},
			expr: &actionExpr{
				pos: position{line: 1225, col: 5, offset: 34086},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 1225, col: 5, offset: 34086},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1225, col: 5, offset: 34086},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1225, col: 10, offset: 34091},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1225, col: 14, offset: 34095},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1225, col: 19, offset: 34100},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1225, col: 23, offset: 34104},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1225, col: 28, offset: 34109},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1225, col: 32, offset: 34113},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 1227, col: 1, offset: 34150},
			expr: &actionExpr{
				pos: position{line: 1228, col: 5, offset: 34158},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 1228, col: 5, offset: 34158},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1228, col: 5, offset: 34158},
							expr: &seqExpr{
								pos: position{line: 1228, col: 8, offset: 34161},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1228, col: 8, offset: 34161},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 1228, col: 12, offset: 34165},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 1228, col: 16, offset: 34169},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 1228, col: 20, offset: 34173},
										expr: &choiceExpr{
											pos: position{line: 1228, col: 22, offset: 34175},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1228, col: 22, offset: 34175},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 1228, col: 33, offset: 34186},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1228, col: 39, offset: 34192},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1228, col: 41, offset: 34194},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 1232, col: 1, offset: 34358},
			expr: &choiceExpr{
				pos: position{line: 1233, col: 5, offset: 34376},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1233, col: 5, offset: 34376},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 1233, col: 5, offset: 34376},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1233, col: 5, offset: 34376},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 1233, col: 7, offset: 34378},
										expr: &ruleRefExpr{
											pos:  position{line: 1233, col: 7, offset: 34378},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1233, col: 17, offset: 34388},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1233, col: 19, offset: 34390},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1236, col: 5, offset: 34454},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 1236, col: 5, offset: 34454},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1236, col: 5, offset: 34454},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1236, col: 7, offset: 34456},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1236, col: 11, offset: 34460},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1236, col: 13, offset: 34462},
										expr: &ruleRefExpr{
											pos:  position{line: 1236, col: 13, offset: 34462},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1236, col: 23, offset: 34472},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1236, col: 28, offset: 34477},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1236, col: 30, offset: 34479},
										expr: &ruleRefExpr{
											pos:  position{line: 1236, col: 30, offset: 34479},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1236, col: 40, offset: 34489},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 1236, col: 42, offset: 34491},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1239, col: 5, offset: 34590},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 1239, col: 5, offset: 34590},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1239, col: 5, offset: 34590},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1239, col: 10, offset: 34595},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1239, col: 12, offset: 34597},
										expr: &ruleRefExpr{
											pos:  position{line: 1239, col: 12, offset: 34597},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1239, col: 22, offset: 34607},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1239, col: 24, offset: 34609},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1242, col: 5, offset: 34680},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 1242, col: 5, offset: 34680},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1242, col: 5, offset: 34680},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1242, col: 7, offset: 34682},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1242, col: 11, offset: 34686},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1242, col: 13, offset: 34688},
										expr: &ruleRefExpr{
											pos:  position{line: 1242, col: 13, offset: 34688},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1242, col: 23, offset: 34698},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1245, col: 5, offset: 34766},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 1245, col: 5, offset: 34766},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 1249, col: 1, offset: 34803},
			expr: &choiceExpr{
				pos: position{line: 1250, col: 5, offset: 34815},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1250, col: 5, offset: 34815},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 1251, col: 5, offset: 34822},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 1253, col: 1, offset: 34827},
			expr: &actionExpr{
				pos: position{line: 1253, col: 12, offset: 34838},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 1253, col: 12, offset: 34838},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1253, col: 12, offset: 34838},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1253, col: 16, offset: 34842},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1253, col: 18, offset: 34844},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 1255, col: 1, offset: 34882},
			expr: &actionExpr{
				pos: position{line: 1255, col: 12, offset: 34893},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 1255, col: 12, offset: 34893},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1255, col: 12, offset: 34893},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1255, col: 14, offset: 34895},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 1255, col: 18, offset: 34899},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 1257, col: 1, offset: 34937},
			expr: &actionExpr{
				pos: position{line: 1258, col: 5, offset: 34948},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 1258, col: 5, offset: 34948},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1258, col: 5, offset: 34948},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1258, col: 7, offset: 34950},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 1258, col: 10, offset: 34953},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1258, col: 14, offset: 34957},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1258, col: 16, offset: 34959},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 1262, col: 1, offset: 35032},
			expr: &actionExpr{
				pos: position{line: 1263, col: 5, offset: 35043},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 1263, col: 5, offset: 35043},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1263, col: 5, offset: 35043},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1263, col: 7, offset: 35045},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 1263, col: 11, offset: 35049},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1263, col: 15, offset: 35053},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1263, col: 17, offset: 35055},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 1267, col: 1, offset: 35118},
			expr: &actionExpr{
				pos: position{line: 1268, col: 4, offset: 35126},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 1268, col: 4, offset: 35126},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 1268, col: 6, offset: 35128},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 1270, col: 1, offset: 35168},
			expr: &choiceExpr{
				pos: position{line: 1271, col: 5, offset: 35182},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1271, col: 5, offset: 35182},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 1272, col: 5, offset: 35197},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 1274, col: 1, offset: 35213},
			expr: &actionExpr{
				pos: position{line: 1274, col: 14, offset: 35226},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1274, col: 14, offset: 35226},
					expr: &charClassMatcher{
						pos:        position{line: 1274, col: 14, offset: 35226},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 1276, col: 1, offset: 35265},
			expr: &actionExpr{
				pos: position{line: 1277, col: 5, offset: 35284},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 1277, col: 5, offset: 35284},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1277, col: 5, offset: 35284},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1277, col: 9, offset: 35288},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 1279, col: 1, offset: 35331},
			expr: &choiceExpr{
				pos: position{line: 1280, col: 5, offset: 35347},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1280, col: 5, offset: 35347},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 1280, col: 5, offset: 35347},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1280, col: 5, offset: 35347},
									expr: &litMatcher{
										pos:        position{line: 1280, col: 5, offset: 35347},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1280, col: 10, offset: 35352},
									expr: &charClassMatcher{
										pos:        position{line: 1280, col: 10, offset: 35352},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 1280, col: 17, offset: 35359},
									val:        ".",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1280, col: 21, offset: 35363},
									expr: &charClassMatcher{
										pos:        position{line: 1280, col: 21, offset: 35363},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1280, col: 28, offset: 35370},
									expr: &ruleRefExpr{
										pos:  position{line: 1280, col: 28, offset: 35370},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1283, col: 5, offset: 35429},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 1283, col: 5, offset: 35429},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1283, col: 5, offset: 35429},
									expr: &litMatcher{
										pos:        position{line: 1283, col: 5, offset: 35429},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1283, col: 10, offset: 35434},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1283, col: 14, offset: 35438},
									expr: &charClassMatcher{
										pos:        position{line: 1283, col: 14, offset: 35438},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1283, col: 21, offset: 35445},
									expr: &ruleRefExpr{
										pos:  position{line: 1283, col: 21, offset: 35445},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1286, col: 5, offset: 35504},
						run: (*parser).callonFloatString22,
						expr: &choiceExpr{
							pos: position{line: 1286, col: 7, offset: 35506},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1286, col: 7, offset: 35506},
									name: "NaN",
								},
								&ruleRefExpr{
									pos:  position{line: 1286, col: 13, offset: 35512},
									name: "Infinity",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 1289, col: 1, offset: 35556},
			expr: &seqExpr{
				pos: position{line: 1289, col: 16, offset: 35571},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1289, col: 16, offset: 35571},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 1289, col: 21, offset: 35576},
						expr: &charClassMatcher{
							pos:        position{line: 1289, col: 21, offset: 35576},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1289, col: 27, offset: 35582},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "NaN",
			pos:  position{line: 1291, col: 1, offset: 35594},
			expr: &litMatcher{
				pos:        position{line: 1291, col: 7, offset: 35600},
				val:        "NaN",
				ignoreCase: false,
			},
		},
		{
			name: "Infinity",
			pos:  position{line: 1293, col: 1, offset: 35607},
			expr: &seqExpr{
				pos: position{line: 1293, col: 12, offset: 35618},
				exprs: []interface{}{
					&zeroOrOneExpr{
						pos: position{line: 1293, col: 12, offset: 35618},
						expr: &choiceExpr{
							pos: position{line: 1293, col: 13, offset: 35619},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1293, col: 13, offset: 35619},
									val:        "-",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1293, col: 19, offset: 35625},
									val:        "+",
									ignoreCase: false,
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1293, col: 25, offset: 35631},
						val:        "Inf",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 1295, col: 1, offset: 35638},
			expr: &actionExpr{
				pos: position{line: 1295, col: 7, offset: 35644},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1295, col: 7, offset: 35644},
					expr: &ruleRefExpr{
						pos:  position{line: 1295, col: 7, offset: 35644},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 1297, col: 1, offset: 35686},
			expr: &charClassMatcher{
				pos:        position{line: 1297, col: 12, offset: 35697},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1299, col: 1, offset: 35710},
			expr: &choiceExpr{
				pos: position{line: 1300, col: 5, offset: 35727},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1300, col: 5, offset: 35727},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 1300, col: 5, offset: 35727},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1300, col: 5, offset: 35727},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1300, col: 9, offset: 35731},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1300, col: 11, offset: 35733},
										expr: &ruleRefExpr{
											pos:  position{line: 1300, col: 11, offset: 35733},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1300, col: 29, offset: 35751},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1301, col: 5, offset: 35788},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 1301, col: 5, offset: 35788},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1301, col: 5, offset: 35788},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1301, col: 9, offset: 35792},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1301, col: 11, offset: 35794},
										expr: &ruleRefExpr{
											pos:  position{line: 1301, col: 11, offset: 35794},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1301, col: 29, offset: 35812},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 1303, col: 1, offset: 35846},
			expr: &choiceExpr{
				pos: position{line: 1304, col: 5, offset: 35867},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1304, col: 5, offset: 35867},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1304, col: 5, offset: 35867},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1304, col: 5, offset: 35867},
									expr: &choiceExpr{
										pos: position{line: 1304, col: 7, offset: 35869},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1304, col: 7, offset: 35869},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1304, col: 13, offset: 35875},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1304, col: 26, offset: 35888,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1305, col: 5, offset: 35925},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1305, col: 5, offset: 35925},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1305, col: 5, offset: 35925},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1305, col: 10, offset: 35930},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1305, col: 12, offset: 35932},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 1307, col: 1, offset: 35966},
			expr: &actionExpr{
				pos: position{line: 1308, col: 5, offset: 35978},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 1308, col: 5, offset: 35978},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1308, col: 5, offset: 35978},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1308, col: 10, offset: 35983},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1308, col: 23, offset: 35996},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1308, col: 28, offset: 36001},
								expr: &ruleRefExpr{
									pos:  position{line: 1308, col: 28, offset: 36001},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 1310, col: 1, offset: 36063},
			expr: &choiceExpr{
				pos: position{line: 1311, col: 5, offset: 36080},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1311, col: 5, offset: 36080},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1312, col: 5, offset: 36097},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordChars",
			pos:  position{line: 1314, col: 1, offset: 36109},
			expr: &actionExpr{
				pos: position{line: 1314, col: 16, offset: 36124},
				run: (*parser).callonKeyWordChars1,
				expr: &charClassMatcher{
					pos:        position{line: 1314, col: 16, offset: 36124},
					val:        "[a-zA-Z_.:/%#@~]",
					chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
					ranges:     []rune{'a', 'z', 'A', 'Z'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 1316, col: 1, offset: 36173},
			expr: &choiceExpr{
				pos: position{line: 1317, col: 5, offset: 36189},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1317, col: 5, offset: 36189},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 1318, col: 5, offset: 36206},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 1320, col: 1, offset: 36213},
			expr: &actionExpr{
				pos: position{line: 1320, col: 14, offset: 36226},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 1320, col: 14, offset: 36226},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1320, col: 14, offset: 36226},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1320, col: 19, offset: 36231},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1320, col: 22, offset: 36234},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1320, col: 22, offset: 36234},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1320, col: 38, offset: 36250},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobPattern",
			pos:  position{line: 1322, col: 1, offset: 36286},
			expr: &actionExpr{
				pos: position{line: 1323, col: 5, offset: 36302},
				run: (*parser).callonGlobPattern1,
				expr: &seqExpr{
					pos: position{line: 1323, col: 5, offset: 36302},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1323, col: 5, offset: 36302},
							expr: &ruleRefExpr{
								pos:  position{line: 1323, col: 6, offset: 36303},
								name: "GlobProperStart",
							},
						},
						&andExpr{
							pos: position{line: 1323, col: 22, offset: 36319},
							expr: &ruleRefExpr{
								pos:  position{line: 1323, col: 23, offset: 36320},
								name: "GlobHasStar",
							},
						},
						&labeledExpr{
							pos:   position{line: 1323, col: 35, offset: 36332},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1323, col: 40, offset: 36337},
								name: "GlobStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1323, col: 50, offset: 36347},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1323, col: 55, offset: 36352},
								expr: &ruleRefExpr{
									pos:  position{line: 1323, col: 55, offset: 36352},
									name: "GlobRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobProperStart",
			pos:  position{line: 1327, col: 1, offset: 36421},
			expr: &seqExpr{
				pos: position{line: 1327, col: 19, offset: 36439},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1327, col: 19, offset: 36439},
						expr: &litMatcher{
							pos:        position{line: 1327, col: 19, offset: 36439},
							val:        "*",
							ignoreCase: false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1327, col: 24, offset: 36444},
						name: "KeyWordStart",
					},
				},
			},
		},
		{
			name: "GlobHasStar",
			pos:  position{line: 1328, col: 1, offset: 36457},
			expr: &seqExpr{
				pos: position{line: 1328, col: 15, offset: 36471},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1328, col: 15, offset: 36471},
						expr: &ruleRefExpr{
							pos:  position{line: 1328, col: 15, offset: 36471},
							name: "KeyWordRest",
						},
					},
					&litMatcher{
						pos:        position{line: 1328, col: 28, offset: 36484},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "GlobStart",
			pos:  position{line: 1330, col: 1, offset: 36489},
			expr: &choiceExpr{
				pos: position{line: 1331, col: 5, offset: 36503},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1331, col: 5, offset: 36503},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1332, col: 5, offset: 36520},
						name: "GlobEsc",
					},
					&actionExpr{
						pos: position{line: 1333, col: 5, offset: 36532},
						run: (*parser).callonGlobStart4,
						expr: &litMatcher{
							pos:        position{line: 1333, col: 5, offset: 36532},
							val:        "*",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GlobRest",
			pos:  position{line: 1335, col: 1, offset: 36556},
			expr: &choiceExpr{
				pos: position{line: 1336, col: 5, offset: 36569},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1336, col: 5, offset: 36569},
						name: "GlobStart",
					},
					&charClassMatcher{
						pos:        position{line: 1337, col: 5, offset: 36583},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "GlobEsc",
			pos:  position{line: 1339, col: 1, offset: 36590},
			expr: &actionExpr{
				pos: position{line: 1339, col: 11, offset: 36600},
				run: (*parser).callonGlobEsc1,
				expr: &seqExpr{
					pos: position{line: 1339, col: 11, offset: 36600},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1339, col: 11, offset: 36600},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1339, col: 16, offset: 36605},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1339, col: 19, offset: 36608},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1339, col: 19, offset: 36608},
										name: "GlobEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1339, col: 32, offset: 36621},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobEscape",
			pos:  position{line: 1341, col: 1, offset: 36657},
			expr: &choiceExpr{
				pos: position{line: 1342, col: 5, offset: 36672},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1342, col: 5, offset: 36672},
						run: (*parser).callonGlobEscape2,
						expr: &litMatcher{
							pos:        position{line: 1342, col: 5, offset: 36672},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1343, col: 5, offset: 36700},
						run: (*parser).callonGlobEscape4,
						expr: &litMatcher{
							pos:        position{line: 1343, col: 5, offset: 36700},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1344, col: 5, offset: 36730},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 1347, col: 1, offset: 36737},
			expr: &choiceExpr{
				pos: position{line: 1348, col: 5, offset: 36758},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1348, col: 5, offset: 36758},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1348, col: 5, offset: 36758},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1348, col: 5, offset: 36758},
									expr: &choiceExpr{
										pos: position{line: 1348, col: 7, offset: 36760},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1348, col: 7, offset: 36760},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1348, col: 13, offset: 36766},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1348, col: 26, offset: 36779,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1349, col: 5, offset: 36816},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1349, col: 5, offset: 36816},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1349, col: 5, offset: 36816},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1349, col: 10, offset: 36821},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1349, col: 12, offset: 36823},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 1351, col: 1, offset: 36857},
			expr: &choiceExpr{
				pos: position{line: 1352, col: 5, offset: 36876},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1352, col: 5, offset: 36876},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 1353, col: 5, offset: 36897},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 1355, col: 1, offset: 36912},
			expr: &choiceExpr{
				pos: position{line: 1356, col: 5, offset: 36933},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1356, col: 5, offset: 36933},
						val:        "'",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1357, col: 5, offset: 36941},
						run: (*parser).callonSingleCharEscape3,
						expr: &litMatcher{
							pos:        position{line: 1357, col: 5, offset: 36941},
							val:        "\"",
							ignoreCase: false,
						},
					},
					&litMatcher{
						pos:        position{line: 1358, col: 5, offset: 36981},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1359, col: 5, offset: 36990},
						run: (*parser).callonSingleCharEscape6,
						expr: &litMatcher{
							pos:        position{line: 1359, col: 5, offset: 36990},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1360, col: 5, offset: 37019},
						run: (*parser).callonSingleCharEscape8,
						expr: &litMatcher{
							pos:        position{line: 1360, col: 5, offset: 37019},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1361, col: 5, offset: 37048},
						run: (*parser).callonSingleCharEscape10,
						expr: &litMatcher{
							pos:        position{line: 1361, col: 5, offset: 37048},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1362, col: 5, offset: 37077},
						run: (*parser).callonSingleCharEscape12,
						expr: &litMatcher{
							pos:        position{line: 1362, col: 5, offset: 37077},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1363, col: 5, offset: 37106},
						run: (*parser).callonSingleCharEscape14,
						expr: &litMatcher{
							pos:        position{line: 1363, col: 5, offset: 37106},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1364, col: 5, offset: 37135},
						run: (*parser).callonSingleCharEscape16,
						expr: &litMatcher{
							pos:        position{line: 1364, col: 5, offset: 37135},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 1366, col: 1, offset: 37161},
			expr: &choiceExpr{
				pos: position{line: 1367, col: 5, offset: 37179},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1367, col: 5, offset: 37179},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 1367, col: 5, offset: 37179},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1368, col: 5, offset: 37207},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 1368, col: 5, offset: 37207},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1369, col: 5, offset: 37235},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 1371, col: 1, offset: 37241},
			expr: &choiceExpr{
				pos: position{line: 1372, col: 5, offset: 37259},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1372, col: 5, offset: 37259},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 1372, col: 5, offset: 37259},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1372, col: 5, offset: 37259},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1372, col: 9, offset: 37263},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1372, col: 16, offset: 37270},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1372, col: 16, offset: 37270},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1372, col: 25, offset: 37279},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1372, col: 34, offset: 37288},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1372, col: 43, offset: 37297},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1375, col: 5, offset: 37360},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 1375, col: 5, offset: 37360},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1375, col: 5, offset: 37360},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1375, col: 9, offset: 37364},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1375, col: 13, offset: 37368},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1375, col: 20, offset: 37375},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1375, col: 20, offset: 37375},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 1375, col: 29, offset: 37384},
												expr: &ruleRefExpr{
													pos:  position{line: 1375, col: 29, offset: 37384},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1375, col: 39, offset: 37394},
												expr: &ruleRefExpr{
													pos:  position{line: 1375, col: 39, offset: 37394},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1375, col: 49, offset: 37404},
												expr: &ruleRefExpr{
													pos:  position{line: 1375, col: 49, offset: 37404},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1375, col: 59, offset: 37414},
												expr: &ruleRefExpr{
													pos:  position{line: 1375, col: 59, offset: 37414},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1375, col: 69, offset: 37424},
												expr: &ruleRefExpr{
													pos:  position{line: 1375, col: 69, offset: 37424},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1375, col: 80, offset: 37435},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpPattern",
			pos:  position{line: 1379, col: 1, offset: 37489},
			expr: &actionExpr{
				pos: position{line: 1380, col: 5, offset: 37507},
				run: (*parser).callonRegexpPattern1,
				expr: &seqExpr{
					pos: position{line: 1380, col: 5, offset: 37507},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1380, col: 5, offset: 37507},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1380, col: 9, offset: 37511},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1380, col: 14, offset: 37516},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 1380, col: 25, offset: 37527},
							val:        "/",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1380, col: 29, offset: 37531},
							expr: &ruleRefExpr{
								pos:  position{line: 1380, col: 30, offset: 37532},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 1382, col: 1, offset: 37567},
			expr: &actionExpr{
				pos: position{line: 1383, col: 5, offset: 37582},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1383, col: 5, offset: 37582},
					expr: &choiceExpr{
						pos: position{line: 1383, col: 6, offset: 37583},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 1383, col: 6, offset: 37583},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&seqExpr{
								pos: position{line: 1383, col: 15, offset: 37592},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1383, col: 15, offset: 37592},
										val:        "\\",
										ignoreCase: false,
									},
									&anyMatcher{
										line: 1383, col: 20, offset: 37597,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 1385, col: 1, offset: 37633},
			expr: &charClassMatcher{
				pos:        position{line: 1386, col: 5, offset: 37649},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 1388, col: 1, offset: 37664},
			expr: &oneOrMoreExpr{
				pos: position{line: 1388, col: 6, offset: 37669},
				expr: &ruleRefExpr{
					pos:  position{line: 1388, col: 6, offset: 37669},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1390, col: 1, offset: 37680},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1390, col: 6, offset: 37685},
				expr: &ruleRefExpr{
					pos:  position{line: 1390, col: 6, offset: 37685},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 1392, col: 1, offset: 37696},
			expr: &choiceExpr{
				pos: position{line: 1393, col: 5, offset: 37709},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1393, col: 5, offset: 37709},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 1394, col: 5, offset: 37724},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 1395, col: 5, offset: 37743},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 1397, col: 1, offset: 37752},
			expr: &anyMatcher{
				line: 1398, col: 5, offset: 37772,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 1400, col: 1, offset: 37775},
			expr: &choiceExpr{
				pos: position{line: 1401, col: 5, offset: 37803},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1401, col: 5, offset: 37803},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1402, col: 5, offset: 37812},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1403, col: 5, offset: 37821},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1404, col: 5, offset: 37830},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1405, col: 5, offset: 37838},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1406, col: 5, offset: 37851},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 1408, col: 1, offset: 37861},
			expr: &charClassMatcher{
				pos:        position{line: 1409, col: 5, offset: 37880},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 1415, col: 1, offset: 38210},
			expr: &ruleRefExpr{
				pos:  position{line: 1418, col: 5, offset: 38281},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1420, col: 1, offset: 38300},
			expr: &seqExpr{
				pos: position{line: 1421, col: 5, offset: 38321},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1421, col: 5, offset: 38321},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1421, col: 10, offset: 38326},
						expr: &seqExpr{
							pos: position{line: 1421, col: 11, offset: 38327},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1421, col: 11, offset: 38327},
									expr: &litMatcher{
										pos:        position{line: 1421, col: 12, offset: 38328},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1421, col: 17, offset: 38333},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1421, col: 35, offset: 38351},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1423, col: 1, offset: 38357},
			expr: &seqExpr{
				pos: position{line: 1424, col: 5, offset: 38379},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1424, col: 5, offset: 38379},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1424, col: 10, offset: 38384},
						expr: &seqExpr{
							pos: position{line: 1424, col: 11, offset: 38385},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1424, col: 11, offset: 38385},
									expr: &ruleRefExpr{
										pos:  position{line: 1424, col: 12, offset: 38386},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1424, col: 27, offset: 38401},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1426, col: 1, offset: 38420},
			expr: &seqExpr{
				pos: position{line: 1426, col: 7, offset: 38426},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1426, col: 7, offset: 38426},
						expr: &ruleRefExpr{
							pos:  position{line: 1426, col: 7, offset: 38426},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1426, col: 19, offset: 38438},
						name: "LineTerminator",
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 1428, col: 1, offset: 38454},
			expr: &choiceExpr{
				pos: position{line: 1428, col: 7, offset: 38460},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1428, col: 7, offset: 38460},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 1428, col: 11, offset: 38464},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1430, col: 1, offset: 38469},
			expr: &notExpr{
				pos: position{line: 1430, col: 7, offset: 38475},
				expr: &anyMatcher{
					line: 1430, col: 8, offset: 38476,
				},
			},
		},
		{
			name: "EOKW",
			pos:  position{line: 1432, col: 1, offset: 38479},
			expr: &notExpr{
				pos: position{line: 1432, col: 8, offset: 38486},
				expr: &ruleRefExpr{
					pos:  position{line: 1432, col: 9, offset: 38487},
					name: "KeyWordChars",
				},
			},
		},
	},
}

func (c *current) onstart1(ast interface{}) (interface{}, error) {
	return ast, nil
}

func (p *parser) callonstart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart1(stack["ast"])
}

func (c *current) onSequential1(consts, first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "ops": append([]interface{}{first}, (rest.([]interface{}))...), "consts": consts}, nil

}

func (p *parser) callonSequential1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential1(stack["consts"], stack["first"], stack["rest"])
}

func (c *current) onSequentialTail1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonSequentialTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequentialTail1(stack["p"])
}

func (c *current) onConsts4() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonConsts4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConsts4()
}

func (c *current) onConst1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonConst1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConst1(stack["v"])
}

func (c *current) onConstDef2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"name": id, "expr": expr}, nil

}

func (p *parser) callonConstDef2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDef2(stack["id"], stack["expr"])
}

func (c *current) onConstDef13(id, typ interface{}) (interface{}, error) {
	return map[string]interface{}{

		"name": id,

		"expr": map[string]interface{}{"kind": "TypeValue", "value": map[string]interface{}{"kind": "TypeDef", "name": id, "type": typ}}}, nil

}

func (p *parser) callonConstDef13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDef13(stack["id"], stack["typ"])
}

func (c *current) onOperation2(ops interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Parallel", "ops": ops}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["ops"])
}

func (c *current) onOperation12(expr, cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": expr, "cases": cases}, nil

}

func (p *parser) callonOperation12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation12(stack["expr"], stack["cases"])
}

func (c *current) onOperation25(cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": nil, "cases": cases}, nil

}

func (p *parser) callonOperation25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation25(stack["cases"])
}

func (c *current) onOperation35(trunks interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": trunks}, nil

}

func (p *parser) callonOperation35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation35(stack["trunks"])
}

func (c *current) onOperation47(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation47(stack["a"])
}

func (c *current) onOperation53(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation53(stack["a"])
}

func (c *current) onOperation63(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Search", "expr": expr}, nil

}

func (p *parser) callonOperation63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation63(stack["expr"])
}

func (c *current) onOperation69(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation69(stack["expr"])
}

func (c *current) onOperation72(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation72(stack["expr"])
}

func (c *current) onOperation75(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation75(stack["expr"])
}

func (c *current) onLeg1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLeg1(stack["s"])
}

func (c *current) onSwitchLeg1(expr, op interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": expr, "op": op}, nil

}

func (p *parser) callonSwitchLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchLeg1(stack["expr"], stack["op"])
}

func (c *current) onCase2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonCase2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase2(stack["expr"])
}

func (c *current) onCase8() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonCase8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase8()
}

func (c *current) onFromLeg1(source, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Trunk", "source": source, "seq": nil}
	if opt != nil {
		m["seq"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonFromLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromLeg1(stack["source"], stack["opt"])
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor13(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor13(stack["expr"])
}

func (c *current) onSearchExpr4(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Term", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonSearchExpr4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr4(stack["v"])
}

func (c *current) onSearchExpr15() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil

}

func (p *parser) callonSearchExpr15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr15()
}

func (c *current) onSearchPredicate2(lhs, op, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": op, "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonSearchPredicate2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPredicate2(stack["lhs"], stack["op"], stack["rhs"])
}

func (c *current) onSearchPredicate12(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchPredicate12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPredicate12(stack["first"], stack["rest"])
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onGlob1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Glob", "pattern": pattern}, nil

}

func (p *parser) callonGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlob1(stack["pattern"])
}

func (c *current) onRegexp1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Regexp", "pattern": pattern}, nil

}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["pattern"])
}

func (c *current) onAggregation2(keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Summarize", "keys": keys, "aggs": nil, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["keys"], stack["limit"])
}

func (c *current) onAggregation10(aggs, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"kind": "Summarize", "keys": nil, "aggs": aggs, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation10(stack["aggs"], stack["keys"], stack["limit"])
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAggAssignment2(lval, agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lval, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment2(stack["lval"], stack["agg"])
}

func (c *current) onAggAssignment11(agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment11(stack["agg"])
}

func (c *current) onAgg1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"kind": "Agg", "name": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonAgg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAgg1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onAggAssignments1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonAggAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssertOp6(e interface{}) (interface{}, error) {
	return []interface{}{e, string(c.text)}, nil
}

func (p *parser) callonAssertOp6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssertOp6(stack["e"])
}

func (c *current) onAssertOp1(expr interface{}) (interface{}, error) {
	// 'assert EXPR' is equivalent to
	// 'yield EXPR ? this : error({message: "assertion failed", "expr": EXPR_text, "on": this}'
	// where EXPR_text is the literal text of EXPR.
	return map[string]interface{}{"kind": "Yield", "exprs": []interface{}{map[string]interface{}{

		"kind": "Conditional",

		"cond": expr.([]interface{})[0],

		"then": map[string]interface{}{"kind": "ID", "name": "this"},

		"else": map[string]interface{}{

			"kind": "Call",

			"name": "error",

			"args": []interface{}{map[string]interface{}{"kind": "RecordExpr", "elems": []interface{}{

				map[string]interface{}{"kind": "Field", "name": "message", "value": map[string]interface{}{

					"kind": "Primitive", "text": "assertion failed", "type": "string"}},

				map[string]interface{}{"kind": "Field", "name": "expr", "value": map[string]interface{}{

					"kind": "Primitive", "text": expr.([]interface{})[1], "type": "string"}},

				map[string]interface{}{"kind": "Field", "name": "on", "value": map[string]interface{}{

					"kind": "ID", "name": "this"}}}}},

			"where": nil}}}}, nil

}

func (p *parser) callonAssertOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssertOp1(stack["expr"])
}

func (c *current) onSortOp10(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortOp10(stack["l"])
}

func (c *current) onSortOp1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var op = map[string]interface{}{"kind": "Sort", "args": list, "order": "asc", "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		op["order"] = "desc"
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			op["nullsfirst"] = true
		}
	}
	return op, nil

}

func (p *parser) callonSortOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortOp1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopOp8(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopOp8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp8(stack["n"])
}

func (c *current) onTopOp20(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopOp20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp20(stack["f"])
}

func (c *current) onTopOp1(limit, flush, fields interface{}) (interface{}, error) {
	var op = map[string]interface{}{"kind": "Top", "limit": 0, "args": nil, "flush": false}
	if limit != nil {
		op["limit"] = limit
	}
	if fields != nil {
		op["args"] = fields
	}
	if flush != nil {
		op["flush"] = true
	}
	return op, nil

}

func (p *parser) callonTopOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cut", "args": args}, nil

}

func (p *parser) callonCutOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutOp1(stack["args"])
}

func (c *current) onDropOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Drop", "args": args}, nil

}

func (p *parser) callonDropOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropOp1(stack["args"])
}

func (c *current) onHeadOp2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": count}, nil
}

func (p *parser) callonHeadOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOp2(stack["count"])
}

func (c *current) onHeadOp8() (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": 1}, nil
}

func (p *parser) callonHeadOp8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOp8()
}

func (c *current) onTailOp2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": count}, nil
}

func (p *parser) callonTailOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailOp2(stack["count"])
}

func (c *current) onTailOp8() (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": 1}, nil
}

func (p *parser) callonTailOp8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailOp8()
}

func (c *current) onWhereOp1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Where", "expr": expr}, nil

}

func (p *parser) callonWhereOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereOp1(stack["expr"])
}

func (c *current) onUniqOp2() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": true}, nil

}

func (p *parser) callonUniqOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqOp2()
}

func (c *current) onUniqOp7() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": false}, nil

}

func (p *parser) callonUniqOp7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqOp7()
}

func (c *current) onPutOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Put", "args": args}, nil

}

func (p *parser) callonPutOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutOp1(stack["args"])
}

func (c *current) onRenameOp9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameOp9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameOp9(stack["cl"])
}

func (c *current) onRenameOp1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Rename", "args": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameOp1(stack["first"], stack["rest"])
}

func (c *current) onFuseOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Fuse"}, nil

}

func (p *parser) callonFuseOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseOp1()
}

func (c *current) onShapeOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Shape"}, nil

}

func (p *parser) callonShapeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShapeOp1()
}

func (c *current) onJoinOp1(style, key, optKey, optArgs interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Join", "style": style, "left_key": key, "right_key": key, "args": nil}
	if optKey != nil {
		m["right_key"] = optKey.([]interface{})[3]
	}
	if optArgs != nil {
		m["args"] = optArgs.([]interface{})[1]
	}
	return m, nil

}

func (p *parser) callonJoinOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinOp1(stack["style"], stack["key"], stack["optKey"], stack["optArgs"])
}

func (c *current) onJoinStyle2() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle2()
}

func (c *current) onJoinStyle6() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle6()
}

func (c *current) onJoinStyle10() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle10()
}

func (c *current) onJoinStyle14() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonJoinStyle14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle14()
}

func (c *current) onJoinStyle18() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle18()
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onSampleOp1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "consts": []interface{}{}, "ops": []interface{}{

		map[string]interface{}{"kind": "Summarize",

			"keys": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "shape"},

				"rhs": map[string]interface{}{"kind": "Call", "name": "typeof",

					"args": []interface{}{e},

					"where": nil}}},

			"aggs": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "sample"},

				"rhs": map[string]interface{}{"kind": "Agg",

					"name": "any",

					"expr": e,

					"where": nil}}},

			"limit": 0},

		map[string]interface{}{"kind": "Yield",

			"exprs": []interface{}{

				map[string]interface{}{"kind": "ID", "name": "sample"}}}}}, nil

}

func (p *parser) callonSampleOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleOp1(stack["e"])
}

func (c *current) onOpAssignment1(a interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpAssignment", "assignments": a}, nil

}

func (p *parser) callonOpAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpAssignment1(stack["a"])
}

func (c *current) onSampleExpr2(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonSampleExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr2(stack["lval"])
}

func (c *current) onSampleExpr7() (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": "this"}, nil
}

func (p *parser) callonSampleExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr7()
}

func (c *current) onFromOp1(source interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": []interface{}{map[string]interface{}{"kind": "Trunk", "source": source}}}, nil

}

func (p *parser) callonFromOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromOp1(stack["source"])
}

func (c *current) onFile1(path, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "File", "path": path, "format": format, "layout": layout}, nil

}

func (p *parser) callonFile1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile1(stack["path"], stack["format"], stack["layout"])
}

func (c *current) onFrom1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonFrom1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrom1(stack["body"])
}

func (c *current) onPool1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonPool1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPool1(stack["body"])
}

func (c *current) onPoolBody1(spec, at, over, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pool", "spec": spec, "at": at, "range": over, "scan_order": order}, nil

}

func (p *parser) callonPoolBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBody1(stack["spec"], stack["at"], stack["over"], stack["order"])
}

func (c *current) onGet1(url, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "HTTP", "url": url, "format": format, "layout": layout}, nil

}

func (p *parser) callonGet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGet1(stack["url"], stack["format"], stack["layout"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onPath2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonPath2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath2(stack["v"])
}

func (c *current) onPath5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPath5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath5()
}

func (c *current) onPoolAt1(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonPoolAt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolAt1(stack["id"])
}

func (c *current) onKSUID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKSUID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKSUID1()
}

func (c *current) onPoolRange1(lower, upper interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Range", "lower": lower, "upper": upper}, nil

}

func (p *parser) callonPoolRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolRange1(stack["lower"], stack["upper"])
}

func (c *current) onPoolSpec2(pool, commit, meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": pool, "commit": commit, "meta": meta}, nil

}

func (p *parser) callonPoolSpec2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec2(stack["pool"], stack["commit"], stack["meta"])
}

func (c *current) onPoolSpec12(meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": nil, "commit": nil, "meta": meta}, nil

}

func (p *parser) callonPoolSpec12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec12(stack["meta"])
}

func (c *current) onPoolCommit1(commit interface{}) (interface{}, error) {
	return commit, nil
}

func (p *parser) callonPoolCommit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolCommit1(stack["commit"])
}

func (c *current) onPoolMeta1(meta interface{}) (interface{}, error) {
	return meta, nil
}

func (p *parser) callonPoolMeta1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolMeta1(stack["meta"])
}

func (c *current) onPoolIdentifier1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPoolIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolIdentifier1()
}

func (c *current) onLayoutArg1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Layout", "keys": keys, "order": order}, nil

}

func (p *parser) callonLayoutArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLayoutArg1(stack["keys"], stack["order"])
}

func (c *current) onFormatArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonFormatArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArg1(stack["val"])
}

func (c *current) onOrderSuffix2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix2()
}

func (c *current) onOrderSuffix4() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderSuffix4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix4()
}

func (c *current) onOrderSuffix6() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix6()
}

func (c *current) onOrderArg2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg2()
}

func (c *current) onOrderArg8() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderArg8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg8()
}

func (c *current) onPassOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Pass"}, nil

}

func (p *parser) callonPassOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassOp1()
}

func (c *current) onExplodeOp1(args, typ, as interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Explode", "args": args, "as": as, "type": typ}, nil

}

func (p *parser) callonExplodeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplodeOp1(stack["args"], stack["typ"], stack["as"])
}

func (c *current) onMergeOp1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Merge", "expr": expr}, nil

}

func (p *parser) callonMergeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMergeOp1(stack["expr"])
}

func (c *current) onOverOp1(exprs, locals, scope interface{}) (interface{}, error) {
	var over = map[string]interface{}{"kind": "Over", "exprs": exprs, "scope": scope}
	if locals != nil {
		return map[string]interface{}{"kind": "Let", "locals": locals, "over": over}, nil
	}
	return over, nil

}

func (p *parser) callonOverOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverOp1(stack["exprs"], stack["locals"], stack["scope"])
}

func (c *current) onScope1(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonScope1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope1(stack["seq"])
}

func (c *current) onLocals10(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonLocals10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocals10(stack["a"])
}

func (c *current) onLocals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLocals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocals1(stack["first"], stack["rest"])
}

func (c *current) onLocalsAssignment1(name, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"name": name, "expr": map[string]interface{}{"kind": "ID", "name": name}}
	if opt != nil {
		m["expr"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonLocalsAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocalsAssignment1(stack["name"], stack["opt"])
}

func (c *current) onYieldOp1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Yield", "exprs": exprs}, nil

}

func (p *parser) callonYieldOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYieldOp1(stack["exprs"])
}

func (c *current) onTypeArg1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeArg1(stack["typ"])
}

func (c *current) onAsArg1(lhs interface{}) (interface{}, error) {
	return lhs, nil
}

func (p *parser) callonAsArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsArg1(stack["lhs"])
}

func (c *current) onLvals7(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonLvals7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals7(stack["lval"])
}

func (c *current) onLvals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLvals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals1(stack["first"], stack["rest"])
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignments7(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments7(stack["a"])
}

func (c *current) onAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr1(cond, opt interface{}) (interface{}, error) {
	if opt != nil {
		var Then = opt.([]interface{})[3]
		var Else = opt.([]interface{})[7]
		return map[string]interface{}{"kind": "Conditional", "cond": cond, "then": Then, "else": Else}, nil
	}
	return cond, nil

}

func (p *parser) callonConditionalExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr1(stack["cond"], stack["opt"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onComparisonExpr15() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparisonExpr15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr15()
}

func (c *current) onComparisonExpr1(lhs, opAndRHS interface{}) (interface{}, error) {
	if opAndRHS == nil {
		return lhs, nil
	}
	var op = opAndRHS.([]interface{})[1]
	var rhs = opAndRHS.([]interface{})[3]
	return map[string]interface{}{"kind": "BinaryExpr", "op": op, "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonComparisonExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr1(stack["lhs"], stack["opAndRHS"])
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onNegationExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "-", "operand": e}, nil

}

func (p *parser) callonNegationExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNegationExpr2(stack["e"])
}

func (c *current) onFuncExpr2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr2(stack["first"], stack["rest"])
}

func (c *current) onFuncExpr9(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr9(stack["first"], stack["rest"])
}

func (c *current) onCast1(typ, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": expr, "type": typ}, nil

}

func (p *parser) callonCast1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCast1(stack["typ"], stack["expr"])
}

func (c *current) onFunction3(fn, args, where interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": fn, "args": args, "where": where}, nil

}

func (p *parser) callonFunction3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction3(stack["fn"], stack["args"], stack["where"])
}

func (c *current) onFunctionArgs2(o interface{}) (interface{}, error) {
	return []interface{}{o}, nil
}

func (p *parser) callonFunctionArgs2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunctionArgs2(stack["o"])
}

func (c *current) onGrep1(pattern, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Grep", "pattern": pattern, "expr": map[string]interface{}{"kind": "ID", "name": "this"}}
	if opt != nil {
		m["expr"] = opt.([]interface{})[2]
	}
	return m, nil

}

func (p *parser) callonGrep1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrep1(stack["pattern"], stack["opt"])
}

func (c *current) onPattern4(s interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "String", "text": s}, nil

}

func (p *parser) callonPattern4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPattern4(stack["s"])
}

func (c *current) onOptionalExprs3() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonOptionalExprs3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalExprs3()
}

func (c *current) onExprs7(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonExprs7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs7(stack["e"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr1(stack["first"], stack["rest"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref14(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": nil, "rhs": to}}, nil

}

func (p *parser) callonDeref14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref14(stack["to"])
}

func (c *current) onDeref23(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref23(stack["expr"])
}

func (c *current) onDeref29(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref29(stack["id"])
}

func (c *current) onPrimary7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary7(stack["expr"])
}

func (c *current) onPrimary15(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary15(stack["expr"])
}

func (c *current) onOverExpr1(exprs, locals, scope interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OverExpr", "locals": locals, "exprs": exprs, "scope": scope}, nil

}

func (p *parser) callonOverExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverExpr1(stack["exprs"], stack["locals"], stack["scope"])
}

func (c *current) onRecord1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RecordExpr", "elems": elems}, nil

}

func (p *parser) callonRecord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecord1(stack["elems"])
}

func (c *current) onRecordElems2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonRecordElems2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems2(stack["first"], stack["rest"])
}

func (c *current) onRecordElems9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonRecordElems9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems9()
}

func (c *current) onRecordElemTail1(elem interface{}) (interface{}, error) {
	return elem, nil
}

func (p *parser) callonRecordElemTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElemTail1(stack["elem"])
}

func (c *current) onSpread1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Spread", "expr": expr}, nil

}

func (p *parser) callonSpread1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpread1(stack["expr"])
}

func (c *current) onField1(name, value interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Field", "name": name, "value": value}, nil

}

func (p *parser) callonField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField1(stack["name"], stack["value"])
}

func (c *current) onArray1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ArrayExpr", "elems": elems}, nil

}

func (p *parser) callonArray1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArray1(stack["elems"])
}

func (c *current) onSet1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SetExpr", "elems": elems}, nil

}

func (p *parser) callonSet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSet1(stack["elems"])
}

func (c *current) onVectorElems8(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonVectorElems8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems8(stack["e"])
}

func (c *current) onVectorElems2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonVectorElems2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems2(stack["first"], stack["rest"])
}

func (c *current) onVectorElems15() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonVectorElems15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems15()
}

func (c *current) onVectorElem3(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "VectorValue", "expr": e}, nil
}

func (p *parser) callonVectorElem3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElem3(stack["e"])
}

func (c *current) onMap1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "MapExpr", "entries": exprs}, nil

}

func (p *parser) callonMap1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMap1(stack["exprs"])
}

func (c *current) onEntries2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonEntries2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries2(stack["first"], stack["rest"])
}

func (c *current) onEntries9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonEntries9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries9()
}

func (c *current) onEntryTail1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonEntryTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntryTail1(stack["e"])
}

func (c *current) onEntry1(key, value interface{}) (interface{}, error) {
	return map[string]interface{}{"key": key, "value": value}, nil

}

func (p *parser) callonEntry1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntry1(stack["key"], stack["value"])
}

func (c *current) onSQLOp1(selection, from, joins, where, groupby, having, orderby, limit interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "SQLExpr",

		"select": selection,

		"from": from,

		"joins": joins,

		"where": where,

		"group_by": groupby,

		"having": having,

		"order_by": orderby,

		"limit": limit}, nil

}

func (p *parser) callonSQLOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOp1(stack["selection"], stack["from"], stack["joins"], stack["where"], stack["groupby"], stack["having"], stack["orderby"], stack["limit"])
}

func (c *current) onSQLSelect2() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLSelect2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect2()
}

func (c *current) onSQLSelect7(assignments interface{}) (interface{}, error) {
	return assignments, nil
}

func (p *parser) callonSQLSelect7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect7(stack["assignments"])
}

func (c *current) onSQLAssignment1(rhs, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": rhs}
	if opt != nil {
		m["lhs"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonSQLAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment1(stack["rhs"], stack["opt"])
}

func (c *current) onSQLAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments7(stack["expr"])
}

func (c *current) onSQLAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSQLFrom2(table, alias interface{}) (interface{}, error) {
	return map[string]interface{}{"table": table, "alias": alias}, nil

}

func (p *parser) callonSQLFrom2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom2(stack["table"], stack["alias"])
}

func (c *current) onSQLFrom12() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLFrom12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom12()
}

func (c *current) onSQLAlias2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias2(stack["id"])
}

func (c *current) onSQLAlias9(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias9(stack["id"])
}

func (c *current) onSQLJoins7(join interface{}) (interface{}, error) {
	return join, nil
}

func (p *parser) callonSQLJoins7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins7(stack["join"])
}

func (c *current) onSQLJoins1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLJoins1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins1(stack["first"], stack["rest"])
}

func (c *current) onSQLJoin1(style, table, alias, leftKey, rightKey interface{}) (interface{}, error) {
	return map[string]interface{}{

		"table": table,

		"style": style,

		"left_key": leftKey,

		"right_key": rightKey,

		"alias": alias}, nil

}

func (p *parser) callonSQLJoin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoin1(stack["style"], stack["table"], stack["alias"], stack["leftKey"], stack["rightKey"])
}

func (c *current) onSQLJoinStyle2(style interface{}) (interface{}, error) {
	return style, nil
}

func (p *parser) callonSQLJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle2(stack["style"])
}

func (c *current) onSQLJoinStyle11() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonSQLJoinStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle11()
}

func (c *current) onSQLWhere1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLWhere1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLWhere1(stack["expr"])
}

func (c *current) onSQLGroupBy1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonSQLGroupBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLGroupBy1(stack["columns"])
}

func (c *current) onSQLHaving1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLHaving1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLHaving1(stack["expr"])
}

func (c *current) onSQLOrderBy1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SQLOrderBy", "keys": keys, "order": order}, nil

}

func (p *parser) callonSQLOrderBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrderBy1(stack["keys"], stack["order"])
}

func (c *current) onSQLOrder2(dir interface{}) (interface{}, error) {
	return dir, nil
}

func (p *parser) callonSQLOrder2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder2(stack["dir"])
}

func (c *current) onSQLOrder9() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonSQLOrder9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder9()
}

func (c *current) onSQLLimit2(count interface{}) (interface{}, error) {
	return count, nil
}

func (p *parser) callonSQLLimit2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit2(stack["count"])
}

func (c *current) onSQLLimit9() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonSQLLimit9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit9()
}

func (c *current) onSELECT1() (interface{}, error) {
	return "select", nil
}

func (p *parser) callonSELECT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSELECT1()
}

func (c *current) onAS1() (interface{}, error) {
	return "as", nil
}

func (p *parser) callonAS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAS1()
}

func (c *current) onFROM1() (interface{}, error) {
	return "from", nil
}

func (p *parser) callonFROM1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFROM1()
}

func (c *current) onJOIN1() (interface{}, error) {
	return "join", nil
}

func (p *parser) callonJOIN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJOIN1()
}

func (c *current) onWHERE1() (interface{}, error) {
	return "where", nil
}

func (p *parser) callonWHERE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWHERE1()
}

func (c *current) onGROUP1() (interface{}, error) {
	return "group", nil
}

func (p *parser) callonGROUP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGROUP1()
}

func (c *current) onBY1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonBY1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBY1()
}

func (c *current) onHAVING1() (interface{}, error) {
	return "having", nil
}

func (p *parser) callonHAVING1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHAVING1()
}

func (c *current) onORDER1() (interface{}, error) {
	return "order", nil
}

func (p *parser) callonORDER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onORDER1()
}

func (c *current) onON1() (interface{}, error) {
	return "on", nil
}

func (p *parser) callonON1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onON1()
}

func (c *current) onLIMIT1() (interface{}, error) {
	return "limit", nil
}

func (p *parser) callonLIMIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIMIT1()
}

func (c *current) onASC1() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonASC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onASC1()
}

func (c *current) onDESC1() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonDESC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDESC1()
}

func (c *current) onANTI1() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonANTI1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onANTI1()
}

func (c *current) onLEFT1() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonLEFT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLEFT1()
}

func (c *current) onRIGHT1() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonRIGHT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRIGHT1()
}

func (c *current) onINNER1() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonINNER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINNER1()
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "float64", "text": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "int64", "text": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "null", "text": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onBytesLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bytes", "text": string(c.text)}, nil

}

func (p *parser) callonBytesLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBytesLiteral1()
}

func (c *current) onTypeLiteral1(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonTypeLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeLiteral1(stack["typ"])
}

func (c *current) onCastType3(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonCastType3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCastType3(stack["typ"])
}

func (c *current) onAmbiguousType2(name interface{}) (interface{}, error) {
	return name, nil
}

func (p *parser) callonAmbiguousType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType2(stack["name"])
}

func (c *current) onAmbiguousType8(name, opt interface{}) (interface{}, error) {
	if opt != nil {
		return map[string]interface{}{"kind": "TypeDef", "name": name, "type": opt.([]interface{})[3]}, nil
	}
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType8(stack["name"], stack["opt"])
}

func (c *current) onAmbiguousType19(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonAmbiguousType19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType19(stack["u"])
}

func (c *current) onTypeUnion1(types interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeUnion", "types": types}, nil

}

func (p *parser) callonTypeUnion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeUnion1(stack["types"])
}

func (c *current) onTypeList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeList1(stack["first"], stack["rest"])
}

func (c *current) onTypeListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeListTail1(stack["typ"])
}

func (c *current) onComplexType2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType2(stack["fields"])
}

func (c *current) onComplexType10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexType10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType10(stack["typ"])
}

func (c *current) onComplexType18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexType18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType18(stack["typ"])
}

func (c *current) onComplexType26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexType26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType26(stack["keyType"], stack["valType"])
}

func (c *current) onTemplateLiteral1(v interface{}) (interface{}, error) {
	if len(v.([]interface{})) == 0 {
		return map[string]interface{}{"kind": "Primitive", "type": "string", "text": ""}, nil
	}
	return makeTemplateExprChain(v), nil

}

func (p *parser) callonTemplateLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteral1(stack["v"])
}

func (c *current) onTemplateLiteralParts2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts2(stack["v"])
}

func (c *current) onTemplateLiteralParts9(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts9(stack["v"])
}

func (c *current) onTemplateDoubleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateDoubleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedPart3(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar2(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar7(stack["v"])
}

func (c *current) onTemplateSingleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateSingleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedPart3(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar2(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar7(stack["v"])
}

func (c *current) onTemplateExpr1(e interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "Cast",

		"expr": e,

		"type": map[string]interface{}{

			"kind": "TypeValue",

			"value": map[string]interface{}{"kind": "TypePrimitive", "name": "string"}}}, nil

}

func (p *parser) callonTemplateExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateExpr1(stack["e"])
}

func (c *current) onPrimitiveType1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveType1()
}

func (c *current) onTypeFieldList2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList2(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldList9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonTypeFieldList9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList9()
}

func (c *current) onTypeFieldListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTail1(stack["typ"])
}

func (c *current) onTypeField1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeField1(stack["name"], stack["typ"])
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return "in", nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onIdentifierName19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName19()
}

func (c *current) onIdentifierName21(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName21(stack["id"])
}

func (c *current) onTime1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "time", "text": string(c.text)}, nil

}

func (p *parser) callonTime1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTime1()
}

func (c *current) onDuration1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "duration", "text": string(c.text)}, nil

}

func (p *parser) callonDuration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDuration1()
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onFloatString22() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFloatString22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString22()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordChars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordChars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordChars1()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onGlobPattern1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil

}

func (p *parser) callonGlobPattern1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobPattern1(stack["head"], stack["tail"])
}

func (c *current) onGlobStart4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonGlobStart4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobStart4()
}

func (c *current) onGlobEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonGlobEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEsc1(stack["s"])
}

func (c *current) onGlobEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonGlobEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape2()
}

func (c *current) onGlobEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonGlobEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape4()
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onSingleCharEscape3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleCharEscape3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape3()
}

func (c *current) onSingleCharEscape6() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape6()
}

func (c *current) onSingleCharEscape8() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape8()
}

func (c *current) onSingleCharEscape10() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape10()
}

func (c *current) onSingleCharEscape12() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape12()
}

func (c *current) onSingleCharEscape14() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape14()
}

func (c *current) onSingleCharEscape16() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape16()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexpPattern1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexpPattern1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpPattern1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
