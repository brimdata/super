// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/brimdata/zed/reglob"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 7, col: 1, offset: 26},
			expr: &actionExpr{
				pos: position{line: 7, col: 9, offset: 34},
				run: (*parser).callonstart1,
				expr: &seqExpr{
					pos: position{line: 7, col: 9, offset: 34},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 7, col: 9, offset: 34},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 7, col: 12, offset: 37},
							label: "ast",
							expr: &ruleRefExpr{
								pos:  position{line: 7, col: 16, offset: 41},
								name: "Z",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 18, offset: 43},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 21, offset: 46},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Z",
			pos:  position{line: 13, col: 1, offset: 355},
			expr: &choiceExpr{
				pos: position{line: 14, col: 5, offset: 435},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 14, col: 5, offset: 435},
						run: (*parser).callonZ2,
						expr: &seqExpr{
							pos: position{line: 14, col: 5, offset: 435},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 14, col: 5, offset: 435},
									label: "decls",
									expr: &oneOrMoreExpr{
										pos: position{line: 14, col: 11, offset: 441},
										expr: &ruleRefExpr{
											pos:  position{line: 14, col: 11, offset: 441},
											name: "Decl",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 14, col: 17, offset: 447},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 14, col: 20, offset: 450},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 14, col: 26, offset: 456},
										name: "Operation",
									},
								},
								&labeledExpr{
									pos:   position{line: 14, col: 36, offset: 466},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 14, col: 41, offset: 471},
										expr: &ruleRefExpr{
											pos:  position{line: 14, col: 41, offset: 471},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 22, col: 5, offset: 744},
						name: "Sequential",
					},
				},
			},
		},
		{
			name: "Decl",
			pos:  position{line: 24, col: 1, offset: 756},
			expr: &actionExpr{
				pos: position{line: 24, col: 8, offset: 763},
				run: (*parser).callonDecl1,
				expr: &seqExpr{
					pos: position{line: 24, col: 8, offset: 763},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 24, col: 8, offset: 763},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 24, col: 11, offset: 766},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 24, col: 13, offset: 768},
								name: "AnyDecl",
							},
						},
					},
				},
			},
		},
		{
			name: "AnyDecl",
			pos:  position{line: 26, col: 1, offset: 795},
			expr: &choiceExpr{
				pos: position{line: 27, col: 5, offset: 807},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 27, col: 5, offset: 807},
						run: (*parser).callonAnyDecl2,
						expr: &seqExpr{
							pos: position{line: 27, col: 5, offset: 807},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 27, col: 5, offset: 807},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 13, offset: 815},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 15, offset: 817},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 18, offset: 820},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 33, offset: 835},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 27, col: 36, offset: 838},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 40, offset: 842},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 43, offset: 845},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 48, offset: 850},
										name: "Expr",
									},
								},
								&choiceExpr{
									pos: position{line: 27, col: 55, offset: 857},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 27, col: 55, offset: 857},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 27, col: 55, offset: 857},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 27, col: 58, offset: 860},
													val:        ";",
													ignoreCase: false,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 27, col: 64, offset: 866},
											name: "EOL",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 30, col: 5, offset: 964},
						run: (*parser).callonAnyDecl18,
						expr: &seqExpr{
							pos: position{line: 30, col: 5, offset: 964},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 30, col: 5, offset: 964},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 12, offset: 971},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 14, offset: 973},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 30, col: 17, offset: 976},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 32, offset: 991},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 30, col: 35, offset: 994},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 39, offset: 998},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 42, offset: 1001},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 30, col: 46, offset: 1005},
										name: "Type",
									},
								},
								&choiceExpr{
									pos: position{line: 30, col: 53, offset: 1012},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 30, col: 53, offset: 1012},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 30, col: 53, offset: 1012},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 30, col: 56, offset: 1015},
													val:        ";",
													ignoreCase: false,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 30, col: 62, offset: 1021},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Sequential",
			pos:  position{line: 34, col: 1, offset: 1118},
			expr: &choiceExpr{
				pos: position{line: 35, col: 5, offset: 1133},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 35, col: 5, offset: 1133},
						run: (*parser).callonSequential2,
						expr: &seqExpr{
							pos: position{line: 35, col: 5, offset: 1133},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 35, col: 5, offset: 1133},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 35, col: 11, offset: 1139},
										name: "Operation",
									},
								},
								&labeledExpr{
									pos:   position{line: 35, col: 21, offset: 1149},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 35, col: 26, offset: 1154},
										expr: &ruleRefExpr{
											pos:  position{line: 35, col: 26, offset: 1154},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 38, col: 5, offset: 1312},
						run: (*parser).callonSequential9,
						expr: &labeledExpr{
							pos:   position{line: 38, col: 5, offset: 1312},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 38, col: 8, offset: 1315},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "SequentialTail",
			pos:  position{line: 42, col: 1, offset: 1425},
			expr: &actionExpr{
				pos: position{line: 42, col: 18, offset: 1442},
				run: (*parser).callonSequentialTail1,
				expr: &seqExpr{
					pos: position{line: 42, col: 18, offset: 1442},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 42, col: 18, offset: 1442},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 21, offset: 1445},
							name: "Pipe",
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 26, offset: 1450},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 42, col: 29, offset: 1453},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 31, offset: 1455},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Parallel",
			pos:  position{line: 44, col: 1, offset: 1484},
			expr: &actionExpr{
				pos: position{line: 45, col: 5, offset: 1497},
				run: (*parser).callonParallel1,
				expr: &seqExpr{
					pos: position{line: 45, col: 5, offset: 1497},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 45, col: 5, offset: 1497},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 45, col: 8, offset: 1500},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 45, col: 13, offset: 1505},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 45, col: 16, offset: 1508},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 45, col: 18, offset: 1510},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 45, col: 29, offset: 1521},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 45, col: 32, offset: 1524},
							val:        ";",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromTrunk",
			pos:  position{line: 47, col: 1, offset: 1547},
			expr: &actionExpr{
				pos: position{line: 48, col: 5, offset: 1561},
				run: (*parser).callonFromTrunk1,
				expr: &seqExpr{
					pos: position{line: 48, col: 5, offset: 1561},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 48, col: 5, offset: 1561},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 48, col: 8, offset: 1564},
							label: "source",
							expr: &ruleRefExpr{
								pos:  position{line: 48, col: 15, offset: 1571},
								name: "FromSource",
							},
						},
						&labeledExpr{
							pos:   position{line: 48, col: 27, offset: 1583},
							label: "seq",
							expr: &zeroOrOneExpr{
								pos: position{line: 48, col: 31, offset: 1587},
								expr: &ruleRefExpr{
									pos:  position{line: 48, col: 31, offset: 1587},
									name: "FromTrunkSeq",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 48, col: 45, offset: 1601},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 48, col: 48, offset: 1604},
							val:        ";",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromTrunkSeq",
			pos:  position{line: 52, col: 1, offset: 1705},
			expr: &actionExpr{
				pos: position{line: 53, col: 5, offset: 1722},
				run: (*parser).callonFromTrunkSeq1,
				expr: &seqExpr{
					pos: position{line: 53, col: 5, offset: 1722},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 53, col: 5, offset: 1722},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 53, col: 8, offset: 1725},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 53, col: 13, offset: 1730},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 53, col: 16, offset: 1733},
							label: "seq",
							expr: &ruleRefExpr{
								pos:  position{line: 53, col: 20, offset: 1737},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "FromSource",
			pos:  position{line: 55, col: 1, offset: 1769},
			expr: &choiceExpr{
				pos: position{line: 56, col: 5, offset: 1784},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 56, col: 5, offset: 1784},
						name: "FileProc",
					},
					&ruleRefExpr{
						pos:  position{line: 57, col: 5, offset: 1797},
						name: "HTTPProc",
					},
					&ruleRefExpr{
						pos:  position{line: 58, col: 5, offset: 1810},
						name: "PassProc",
					},
					&ruleRefExpr{
						pos:  position{line: 59, col: 5, offset: 1823},
						name: "PoolBody",
					},
				},
			},
		},
		{
			name: "Operation",
			pos:  position{line: 61, col: 1, offset: 1833},
			expr: &choiceExpr{
				pos: position{line: 62, col: 5, offset: 1847},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 62, col: 5, offset: 1847},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 62, col: 5, offset: 1847},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 62, col: 5, offset: 1847},
									val:        "split",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 62, col: 13, offset: 1855},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 62, col: 16, offset: 1858},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 62, col: 20, offset: 1862},
									label: "procArray",
									expr: &oneOrMoreExpr{
										pos: position{line: 62, col: 30, offset: 1872},
										expr: &ruleRefExpr{
											pos:  position{line: 62, col: 30, offset: 1872},
											name: "Parallel",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 62, col: 40, offset: 1882},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 62, col: 43, offset: 1885},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 65, col: 5, offset: 1982},
						run: (*parser).callonOperation12,
						expr: &seqExpr{
							pos: position{line: 65, col: 5, offset: 1982},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 65, col: 5, offset: 1982},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 65, col: 14, offset: 1991},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 65, col: 16, offset: 1993},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 65, col: 21, offset: 1998},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 65, col: 26, offset: 2003},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 65, col: 28, offset: 2005},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 65, col: 32, offset: 2009},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 65, col: 38, offset: 2015},
										expr: &ruleRefExpr{
											pos:  position{line: 65, col: 38, offset: 2015},
											name: "SwitchLiteralClause",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 65, col: 59, offset: 2036},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 65, col: 62, offset: 2039},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 68, col: 5, offset: 2144},
						run: (*parser).callonOperation25,
						expr: &seqExpr{
							pos: position{line: 68, col: 5, offset: 2144},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 68, col: 5, offset: 2144},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 68, col: 14, offset: 2153},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 68, col: 17, offset: 2156},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 68, col: 21, offset: 2160},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 68, col: 27, offset: 2166},
										expr: &ruleRefExpr{
											pos:  position{line: 68, col: 27, offset: 2166},
											name: "SwitchSearchBooleanClause",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 68, col: 54, offset: 2193},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 68, col: 57, offset: 2196},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 71, col: 5, offset: 2300},
						run: (*parser).callonOperation35,
						expr: &seqExpr{
							pos: position{line: 71, col: 5, offset: 2300},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 71, col: 5, offset: 2300},
									val:        "from",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 71, col: 12, offset: 2307},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 71, col: 15, offset: 2310},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 71, col: 19, offset: 2314},
									label: "trunks",
									expr: &oneOrMoreExpr{
										pos: position{line: 71, col: 26, offset: 2321},
										expr: &ruleRefExpr{
											pos:  position{line: 71, col: 26, offset: 2321},
											name: "FromTrunk",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 71, col: 37, offset: 2332},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 71, col: 40, offset: 2335},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 74, col: 5, offset: 2426},
						name: "Operator",
					},
					&actionExpr{
						pos: position{line: 75, col: 5, offset: 2439},
						run: (*parser).callonOperation46,
						expr: &seqExpr{
							pos: position{line: 75, col: 5, offset: 2439},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 75, col: 5, offset: 2439},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 75, col: 7, offset: 2441},
										name: "OpExprs",
									},
								},
								&andExpr{
									pos: position{line: 75, col: 15, offset: 2449},
									expr: &ruleRefExpr{
										pos:  position{line: 75, col: 16, offset: 2450},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 76, col: 5, offset: 2480},
						run: (*parser).callonOperation52,
						expr: &seqExpr{
							pos: position{line: 76, col: 5, offset: 2480},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 76, col: 5, offset: 2480},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 76, col: 7, offset: 2482},
										name: "Aggregation",
									},
								},
								&andExpr{
									pos: position{line: 76, col: 19, offset: 2494},
									expr: &ruleRefExpr{
										pos:  position{line: 76, col: 20, offset: 2495},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 77, col: 5, offset: 2526},
						run: (*parser).callonOperation58,
						expr: &seqExpr{
							pos: position{line: 77, col: 5, offset: 2526},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 77, col: 5, offset: 2526},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 77, col: 10, offset: 2531},
										name: "SearchBoolean",
									},
								},
								&notExpr{
									pos: position{line: 77, col: 24, offset: 2545},
									expr: &ruleRefExpr{
										pos:  position{line: 77, col: 25, offset: 2546},
										name: "AggGuard",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchLiteralClause",
			pos:  position{line: 81, col: 1, offset: 2637},
			expr: &actionExpr{
				pos: position{line: 82, col: 5, offset: 2661},
				run: (*parser).callonSwitchLiteralClause1,
				expr: &seqExpr{
					pos: position{line: 82, col: 5, offset: 2661},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 82, col: 5, offset: 2661},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 82, col: 8, offset: 2664},
							label: "expr",
							expr: &choiceExpr{
								pos: position{line: 82, col: 14, offset: 2670},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 82, col: 14, offset: 2670},
										name: "DefaultToken",
									},
									&ruleRefExpr{
										pos:  position{line: 82, col: 29, offset: 2685},
										name: "Literal",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 82, col: 38, offset: 2694},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 82, col: 41, offset: 2697},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 82, col: 46, offset: 2702},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 82, col: 49, offset: 2705},
							label: "proc",
							expr: &ruleRefExpr{
								pos:  position{line: 82, col: 54, offset: 2710},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 82, col: 65, offset: 2721},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 82, col: 68, offset: 2724},
							val:        ";",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SwitchSearchBooleanClause",
			pos:  position{line: 86, col: 1, offset: 2806},
			expr: &actionExpr{
				pos: position{line: 87, col: 5, offset: 2836},
				run: (*parser).callonSwitchSearchBooleanClause1,
				expr: &seqExpr{
					pos: position{line: 87, col: 5, offset: 2836},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 87, col: 5, offset: 2836},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 87, col: 8, offset: 2839},
							label: "expr",
							expr: &choiceExpr{
								pos: position{line: 87, col: 14, offset: 2845},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 87, col: 14, offset: 2845},
										name: "DefaultToken",
									},
									&ruleRefExpr{
										pos:  position{line: 87, col: 29, offset: 2860},
										name: "SearchBoolean",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 87, col: 44, offset: 2875},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 87, col: 47, offset: 2878},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 87, col: 52, offset: 2883},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 87, col: 55, offset: 2886},
							label: "proc",
							expr: &ruleRefExpr{
								pos:  position{line: 87, col: 60, offset: 2891},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 87, col: 71, offset: 2902},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 87, col: 74, offset: 2905},
							val:        ";",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DefaultToken",
			pos:  position{line: 91, col: 1, offset: 2987},
			expr: &actionExpr{
				pos: position{line: 91, col: 16, offset: 3002},
				run: (*parser).callonDefaultToken1,
				expr: &litMatcher{
					pos:        position{line: 91, col: 16, offset: 3002},
					val:        "default",
					ignoreCase: true,
				},
			},
		},
		{
			name: "EndOfOp",
			pos:  position{line: 93, col: 1, offset: 3034},
			expr: &seqExpr{
				pos: position{line: 93, col: 11, offset: 3044},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 93, col: 11, offset: 3044},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 93, col: 15, offset: 3048},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 93, col: 15, offset: 3048},
								name: "Pipe",
							},
							&litMatcher{
								pos:        position{line: 93, col: 22, offset: 3055},
								val:        "=>",
								ignoreCase: false,
							},
							&charClassMatcher{
								pos:        position{line: 93, col: 29, offset: 3062},
								val:        "[);]",
								chars:      []rune{')', ';'},
								ignoreCase: false,
								inverted:   false,
							},
							&ruleRefExpr{
								pos:  position{line: 93, col: 36, offset: 3069},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "Pipe",
			pos:  position{line: 94, col: 1, offset: 3074},
			expr: &seqExpr{
				pos: position{line: 94, col: 8, offset: 3081},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 94, col: 8, offset: 3081},
						val:        "|",
						ignoreCase: false,
					},
					&notExpr{
						pos: position{line: 94, col: 12, offset: 3085},
						expr: &choiceExpr{
							pos: position{line: 94, col: 14, offset: 3087},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 94, col: 14, offset: 3087},
									val:        "{",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 94, col: 20, offset: 3093},
									val:        "[",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 96, col: 1, offset: 3099},
			expr: &seqExpr{
				pos: position{line: 96, col: 13, offset: 3111},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 96, col: 13, offset: 3111},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 96, col: 17, offset: 3115},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 96, col: 18, offset: 3116},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 96, col: 18, offset: 3116},
										expr: &litMatcher{
											pos:        position{line: 96, col: 19, offset: 3117},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 96, col: 24, offset: 3122},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 96, col: 38, offset: 3136},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 96, col: 57, offset: 3155},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 96, col: 82, offset: 3180},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 96, col: 88, offset: 3186},
								val:        "(",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 96, col: 94, offset: 3192},
								val:        "[",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 96, col: 100, offset: 3198},
								val:        "matches",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 98, col: 1, offset: 3210},
			expr: &actionExpr{
				pos: position{line: 98, col: 14, offset: 3223},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 98, col: 15, offset: 3224},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 98, col: 15, offset: 3224},
							val:        "==",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 98, col: 22, offset: 3231},
							val:        "!=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 98, col: 29, offset: 3238},
							val:        "in",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 98, col: 36, offset: 3245},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 98, col: 43, offset: 3252},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 98, col: 49, offset: 3258},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 98, col: 56, offset: 3265},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AggGuard",
			pos:  position{line: 100, col: 1, offset: 3302},
			expr: &choiceExpr{
				pos: position{line: 100, col: 12, offset: 3313},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 100, col: 13, offset: 3314},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 100, col: 13, offset: 3314},
								name: "_",
							},
							&choiceExpr{
								pos: position{line: 100, col: 16, offset: 3317},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 100, col: 16, offset: 3317},
										name: "ByToken",
									},
									&litMatcher{
										pos:        position{line: 100, col: 26, offset: 3327},
										val:        "-with",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 100, col: 35, offset: 3336},
								name: "EOT",
							},
						},
					},
					&seqExpr{
						pos: position{line: 100, col: 43, offset: 3344},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 100, col: 43, offset: 3344},
								name: "__",
							},
							&litMatcher{
								pos:        position{line: 100, col: 46, offset: 3347},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 102, col: 1, offset: 3353},
			expr: &actionExpr{
				pos: position{line: 103, col: 5, offset: 3371},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 103, col: 5, offset: 3371},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 103, col: 5, offset: 3371},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 103, col: 11, offset: 3377},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 103, col: 21, offset: 3387},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 103, col: 26, offset: 3392},
								expr: &ruleRefExpr{
									pos:  position{line: 103, col: 26, offset: 3392},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 107, col: 1, offset: 3466},
			expr: &actionExpr{
				pos: position{line: 107, col: 16, offset: 3481},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 107, col: 16, offset: 3481},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 107, col: 16, offset: 3481},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 107, col: 18, offset: 3483},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 107, col: 26, offset: 3491},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 107, col: 28, offset: 3493},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 107, col: 30, offset: 3495},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 109, col: 1, offset: 3545},
			expr: &actionExpr{
				pos: position{line: 110, col: 5, offset: 3559},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 110, col: 5, offset: 3559},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 110, col: 5, offset: 3559},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 110, col: 11, offset: 3565},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 111, col: 5, offset: 3582},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 111, col: 10, offset: 3587},
								expr: &actionExpr{
									pos: position{line: 111, col: 11, offset: 3588},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 111, col: 11, offset: 3588},
										exprs: []interface{}{
											&zeroOrOneExpr{
												pos: position{line: 111, col: 11, offset: 3588},
												expr: &seqExpr{
													pos: position{line: 111, col: 12, offset: 3589},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 111, col: 12, offset: 3589},
															name: "_",
														},
														&ruleRefExpr{
															pos:  position{line: 111, col: 14, offset: 3591},
															name: "AndToken",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 111, col: 25, offset: 3602},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 111, col: 27, offset: 3604},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 111, col: 32, offset: 3609},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 115, col: 1, offset: 3725},
			expr: &choiceExpr{
				pos: position{line: 116, col: 5, offset: 3742},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 116, col: 5, offset: 3742},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 116, col: 5, offset: 3742},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 116, col: 6, offset: 3743},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 116, col: 6, offset: 3743},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 116, col: 6, offset: 3743},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 116, col: 15, offset: 3752},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 116, col: 19, offset: 3756},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 116, col: 19, offset: 3756},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 116, col: 23, offset: 3760},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 116, col: 27, offset: 3764},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 116, col: 29, offset: 3766},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 119, col: 5, offset: 3878},
						run: (*parser).callonSearchFactor13,
						expr: &seqExpr{
							pos: position{line: 119, col: 5, offset: 3878},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 119, col: 5, offset: 3878},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 119, col: 9, offset: 3882},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 119, col: 12, offset: 3885},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 119, col: 17, offset: 3890},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 119, col: 31, offset: 3904},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 119, col: 34, offset: 3907},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 120, col: 5, offset: 3936},
						name: "SearchExpr",
					},
				},
			},
		},
		{
			name: "TBD",
			pos:  position{line: 123, col: 1, offset: 3949},
			expr: &choiceExpr{
				pos: position{line: 124, col: 5, offset: 3957},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 124, col: 5, offset: 3957},
						run: (*parser).callonTBD2,
						expr: &seqExpr{
							pos: position{line: 124, col: 5, offset: 3957},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 124, col: 5, offset: 3957},
									val:        "*",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 124, col: 9, offset: 3961},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 124, col: 12, offset: 3964},
									label: "compareOp",
									expr: &ruleRefExpr{
										pos:  position{line: 124, col: 22, offset: 3974},
										name: "EqualityToken",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 124, col: 36, offset: 3988},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 124, col: 39, offset: 3991},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 124, col: 41, offset: 3993},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 151, col: 5, offset: 4675},
						run: (*parser).callonTBD11,
						expr: &seqExpr{
							pos: position{line: 151, col: 5, offset: 4675},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 151, col: 5, offset: 4675},
									label: "match",
									expr: &ruleRefExpr{
										pos:  position{line: 151, col: 11, offset: 4681},
										name: "PatternMatch",
									},
								},
								&notExpr{
									pos: position{line: 151, col: 24, offset: 4694},
									expr: &ruleRefExpr{
										pos:  position{line: 151, col: 25, offset: 4695},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 152, col: 5, offset: 4731},
						run: (*parser).callonTBD17,
						expr: &seqExpr{
							pos: position{line: 152, col: 5, offset: 4731},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 152, col: 5, offset: 4731},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 152, col: 7, offset: 4733},
										name: "SearchValue",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 152, col: 19, offset: 4745},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 152, col: 21, offset: 4747},
									name: "InToken",
								},
								&ruleRefExpr{
									pos:  position{line: 152, col: 29, offset: 4755},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 152, col: 31, offset: 4757},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 180, col: 1, offset: 5436},
			expr: &choiceExpr{
				pos: position{line: 181, col: 5, offset: 5451},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 181, col: 5, offset: 5451},
						run: (*parser).callonSearchExpr2,
						expr: &seqExpr{
							pos: position{line: 181, col: 5, offset: 5451},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 181, col: 5, offset: 5451},
									expr: &seqExpr{
										pos: position{line: 181, col: 7, offset: 5453},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 181, col: 7, offset: 5453},
												name: "SearchGuard",
											},
											&ruleRefExpr{
												pos:  position{line: 181, col: 19, offset: 5465},
												name: "EOT",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 181, col: 24, offset: 5470},
									label: "search",
									expr: &ruleRefExpr{
										pos:  position{line: 181, col: 31, offset: 5477},
										name: "PatternSearch",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 182, col: 5, offset: 5518},
						run: (*parser).callonSearchExpr10,
						expr: &seqExpr{
							pos: position{line: 182, col: 5, offset: 5518},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 182, col: 5, offset: 5518},
									expr: &seqExpr{
										pos: position{line: 182, col: 7, offset: 5520},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 182, col: 7, offset: 5520},
												name: "SearchGuard",
											},
											&ruleRefExpr{
												pos:  position{line: 182, col: 19, offset: 5532},
												name: "EOT",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 182, col: 24, offset: 5537},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 182, col: 26, offset: 5539},
										name: "SearchValue",
									},
								},
								&notExpr{
									pos: position{line: 182, col: 38, offset: 5551},
									expr: &ruleRefExpr{
										pos:  position{line: 182, col: 39, offset: 5552},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 185, col: 5, offset: 5669},
						run: (*parser).callonSearchExpr20,
						expr: &seqExpr{
							pos: position{line: 185, col: 5, offset: 5669},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 185, col: 5, offset: 5669},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 185, col: 9, offset: 5673},
									expr: &ruleRefExpr{
										pos:  position{line: 185, col: 10, offset: 5674},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 188, col: 5, offset: 5790},
						name: "EqualityCompareExpr",
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 190, col: 1, offset: 5811},
			expr: &choiceExpr{
				pos: position{line: 191, col: 5, offset: 5827},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 191, col: 5, offset: 5827},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 192, col: 5, offset: 5839},
						run: (*parser).callonSearchValue3,
						expr: &seqExpr{
							pos: position{line: 192, col: 5, offset: 5839},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 192, col: 5, offset: 5839},
									expr: &ruleRefExpr{
										pos:  position{line: 192, col: 6, offset: 5840},
										name: "Regexp",
									},
								},
								&labeledExpr{
									pos:   position{line: 192, col: 13, offset: 5847},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 192, col: 15, offset: 5849},
										name: "KeyWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PatternSearch",
			pos:  position{line: 196, col: 1, offset: 5957},
			expr: &actionExpr{
				pos: position{line: 197, col: 5, offset: 5975},
				run: (*parser).callonPatternSearch1,
				expr: &labeledExpr{
					pos:   position{line: 197, col: 5, offset: 5975},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 197, col: 13, offset: 5983},
						name: "Pattern",
					},
				},
			},
		},
		{
			name: "PatternMatch",
			pos:  position{line: 201, col: 1, offset: 6085},
			expr: &actionExpr{
				pos: position{line: 202, col: 5, offset: 6102},
				run: (*parser).callonPatternMatch1,
				expr: &seqExpr{
					pos: position{line: 202, col: 5, offset: 6102},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 202, col: 5, offset: 6102},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 202, col: 7, offset: 6104},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 202, col: 12, offset: 6109},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 202, col: 14, offset: 6111},
							val:        "matches",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 202, col: 25, offset: 6122},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 202, col: 28, offset: 6125},
							label: "pattern",
							expr: &ruleRefExpr{
								pos:  position{line: 202, col: 36, offset: 6133},
								name: "Pattern",
							},
						},
					},
				},
			},
		},
		{
			name: "Pattern",
			pos:  position{line: 206, col: 1, offset: 6245},
			expr: &choiceExpr{
				pos: position{line: 206, col: 11, offset: 6255},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 206, col: 11, offset: 6255},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 206, col: 20, offset: 6264},
						name: "Glob",
					},
				},
			},
		},
		{
			name: "SearchGuard",
			pos:  position{line: 208, col: 1, offset: 6270},
			expr: &choiceExpr{
				pos: position{line: 209, col: 5, offset: 6286},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 209, col: 5, offset: 6286},
						name: "SQLTokenSentinels",
					},
					&ruleRefExpr{
						pos:  position{line: 210, col: 5, offset: 6308},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 211, col: 5, offset: 6321},
						name: "OrToken",
					},
					&ruleRefExpr{
						pos:  position{line: 212, col: 5, offset: 6333},
						name: "NotToken",
					},
					&ruleRefExpr{
						pos:  position{line: 213, col: 5, offset: 6346},
						name: "InToken",
					},
					&ruleRefExpr{
						pos:  position{line: 214, col: 5, offset: 6358},
						name: "ByToken",
					},
					&ruleRefExpr{
						pos:  position{line: 215, col: 5, offset: 6370},
						name: "DefaultToken",
					},
					&litMatcher{
						pos:        position{line: 216, col: 5, offset: 6387},
						val:        "type(",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 217, col: 5, offset: 6399},
						val:        "matches",
						ignoreCase: true,
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 221, col: 1, offset: 6437},
			expr: &choiceExpr{
				pos: position{line: 222, col: 5, offset: 6453},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 222, col: 5, offset: 6453},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 222, col: 5, offset: 6453},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 222, col: 5, offset: 6453},
									expr: &ruleRefExpr{
										pos:  position{line: 222, col: 5, offset: 6453},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 222, col: 16, offset: 6464},
									label: "every",
									expr: &zeroOrOneExpr{
										pos: position{line: 222, col: 22, offset: 6470},
										expr: &ruleRefExpr{
											pos:  position{line: 222, col: 22, offset: 6470},
											name: "EveryDur",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 222, col: 32, offset: 6480},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 222, col: 37, offset: 6485},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 222, col: 49, offset: 6497},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 222, col: 55, offset: 6503},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 225, col: 5, offset: 6648},
						run: (*parser).callonAggregation13,
						expr: &seqExpr{
							pos: position{line: 225, col: 5, offset: 6648},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 225, col: 5, offset: 6648},
									expr: &ruleRefExpr{
										pos:  position{line: 225, col: 5, offset: 6648},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 225, col: 16, offset: 6659},
									label: "every",
									expr: &zeroOrOneExpr{
										pos: position{line: 225, col: 22, offset: 6665},
										expr: &ruleRefExpr{
											pos:  position{line: 225, col: 22, offset: 6665},
											name: "EveryDur",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 225, col: 32, offset: 6675},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 225, col: 37, offset: 6680},
										name: "AggAssignments",
									},
								},
								&labeledExpr{
									pos:   position{line: 225, col: 52, offset: 6695},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 225, col: 57, offset: 6700},
										expr: &seqExpr{
											pos: position{line: 225, col: 58, offset: 6701},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 225, col: 58, offset: 6701},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 225, col: 60, offset: 6703},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 225, col: 74, offset: 6717},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 225, col: 80, offset: 6723},
										name: "LimitArg",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Summarize",
			pos:  position{line: 233, col: 1, offset: 6956},
			expr: &seqExpr{
				pos: position{line: 233, col: 13, offset: 6968},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 233, col: 13, offset: 6968},
						val:        "summarize",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 233, col: 25, offset: 6980},
						name: "_",
					},
				},
			},
		},
		{
			name: "EveryDur",
			pos:  position{line: 235, col: 1, offset: 6983},
			expr: &actionExpr{
				pos: position{line: 236, col: 5, offset: 6996},
				run: (*parser).callonEveryDur1,
				expr: &seqExpr{
					pos: position{line: 236, col: 5, offset: 6996},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 236, col: 5, offset: 6996},
							val:        "every",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 236, col: 14, offset: 7005},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 236, col: 16, offset: 7007},
							label: "dur",
							expr: &ruleRefExpr{
								pos:  position{line: 236, col: 20, offset: 7011},
								name: "Duration",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 236, col: 29, offset: 7020},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 238, col: 1, offset: 7043},
			expr: &actionExpr{
				pos: position{line: 239, col: 5, offset: 7059},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 239, col: 5, offset: 7059},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 239, col: 5, offset: 7059},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 239, col: 13, offset: 7067},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 239, col: 15, offset: 7069},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 239, col: 23, offset: 7077},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 241, col: 1, offset: 7118},
			expr: &choiceExpr{
				pos: position{line: 242, col: 5, offset: 7131},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 242, col: 5, offset: 7131},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 242, col: 5, offset: 7131},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 242, col: 5, offset: 7131},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 242, col: 7, offset: 7133},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 242, col: 14, offset: 7140},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 242, col: 16, offset: 7142},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 242, col: 25, offset: 7151},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 242, col: 27, offset: 7153},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 242, col: 33, offset: 7159},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 243, col: 5, offset: 7190},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 243, col: 5, offset: 7190},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 248, col: 1, offset: 7450},
			expr: &choiceExpr{
				pos: position{line: 249, col: 5, offset: 7469},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 249, col: 5, offset: 7469},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 250, col: 5, offset: 7484},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 250, col: 5, offset: 7484},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 250, col: 10, offset: 7489},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 252, col: 1, offset: 7581},
			expr: &actionExpr{
				pos: position{line: 253, col: 5, offset: 7601},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 253, col: 5, offset: 7601},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 253, col: 5, offset: 7601},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 253, col: 11, offset: 7607},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 253, col: 26, offset: 7622},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 253, col: 31, offset: 7627},
								expr: &actionExpr{
									pos: position{line: 253, col: 32, offset: 7628},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 253, col: 32, offset: 7628},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 253, col: 32, offset: 7628},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 253, col: 35, offset: 7631},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 253, col: 39, offset: 7635},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 253, col: 42, offset: 7638},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 253, col: 47, offset: 7643},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignment",
			pos:  position{line: 257, col: 1, offset: 7765},
			expr: &choiceExpr{
				pos: position{line: 258, col: 5, offset: 7783},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 258, col: 5, offset: 7783},
						run: (*parser).callonAggAssignment2,
						expr: &seqExpr{
							pos: position{line: 258, col: 5, offset: 7783},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 258, col: 5, offset: 7783},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 258, col: 10, offset: 7788},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 258, col: 15, offset: 7793},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 258, col: 18, offset: 7796},
									val:        ":=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 258, col: 23, offset: 7801},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 258, col: 26, offset: 7804},
									label: "agg",
									expr: &ruleRefExpr{
										pos:  position{line: 258, col: 30, offset: 7808},
										name: "Agg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 261, col: 5, offset: 7912},
						run: (*parser).callonAggAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 261, col: 5, offset: 7912},
							label: "agg",
							expr: &ruleRefExpr{
								pos:  position{line: 261, col: 9, offset: 7916},
								name: "Agg",
							},
						},
					},
				},
			},
		},
		{
			name: "Agg",
			pos:  position{line: 265, col: 1, offset: 8016},
			expr: &actionExpr{
				pos: position{line: 266, col: 5, offset: 8024},
				run: (*parser).callonAgg1,
				expr: &seqExpr{
					pos: position{line: 266, col: 5, offset: 8024},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 266, col: 5, offset: 8024},
							expr: &ruleRefExpr{
								pos:  position{line: 266, col: 6, offset: 8025},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 266, col: 16, offset: 8035},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 266, col: 19, offset: 8038},
								name: "AggName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 266, col: 27, offset: 8046},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 266, col: 30, offset: 8049},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 266, col: 34, offset: 8053},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 266, col: 37, offset: 8056},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 266, col: 42, offset: 8061},
								expr: &ruleRefExpr{
									pos:  position{line: 266, col: 42, offset: 8061},
									name: "Expr",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 266, col: 49, offset: 8068},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 266, col: 52, offset: 8071},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 266, col: 56, offset: 8075},
							expr: &seqExpr{
								pos: position{line: 266, col: 58, offset: 8077},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 266, col: 58, offset: 8077},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 266, col: 61, offset: 8080},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 266, col: 66, offset: 8085},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 266, col: 72, offset: 8091},
								expr: &ruleRefExpr{
									pos:  position{line: 266, col: 72, offset: 8091},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggName",
			pos:  position{line: 274, col: 1, offset: 8281},
			expr: &choiceExpr{
				pos: position{line: 275, col: 5, offset: 8293},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 275, col: 5, offset: 8293},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 276, col: 5, offset: 8312},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 277, col: 5, offset: 8325},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 279, col: 1, offset: 8334},
			expr: &actionExpr{
				pos: position{line: 279, col: 15, offset: 8348},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 279, col: 15, offset: 8348},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 279, col: 15, offset: 8348},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 279, col: 17, offset: 8350},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 279, col: 25, offset: 8358},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 279, col: 27, offset: 8360},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 279, col: 32, offset: 8365},
								name: "SearchBoolean",
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignments",
			pos:  position{line: 281, col: 1, offset: 8401},
			expr: &actionExpr{
				pos: position{line: 282, col: 5, offset: 8420},
				run: (*parser).callonAggAssignments1,
				expr: &seqExpr{
					pos: position{line: 282, col: 5, offset: 8420},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 282, col: 5, offset: 8420},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 282, col: 11, offset: 8426},
								name: "AggAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 282, col: 25, offset: 8440},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 282, col: 30, offset: 8445},
								expr: &seqExpr{
									pos: position{line: 282, col: 31, offset: 8446},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 282, col: 31, offset: 8446},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 282, col: 34, offset: 8449},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 282, col: 38, offset: 8453},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 282, col: 41, offset: 8456},
											name: "AggAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 292, col: 1, offset: 8692},
			expr: &choiceExpr{
				pos: position{line: 293, col: 5, offset: 8705},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 293, col: 5, offset: 8705},
						name: "SortProc",
					},
					&ruleRefExpr{
						pos:  position{line: 294, col: 5, offset: 8718},
						name: "TopProc",
					},
					&ruleRefExpr{
						pos:  position{line: 295, col: 5, offset: 8730},
						name: "CutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 296, col: 5, offset: 8742},
						name: "PickProc",
					},
					&ruleRefExpr{
						pos:  position{line: 297, col: 5, offset: 8755},
						name: "DropProc",
					},
					&ruleRefExpr{
						pos:  position{line: 298, col: 5, offset: 8768},
						name: "HeadProc",
					},
					&ruleRefExpr{
						pos:  position{line: 299, col: 5, offset: 8781},
						name: "TailProc",
					},
					&ruleRefExpr{
						pos:  position{line: 300, col: 5, offset: 8794},
						name: "FilterProc",
					},
					&ruleRefExpr{
						pos:  position{line: 301, col: 5, offset: 8809},
						name: "UniqProc",
					},
					&ruleRefExpr{
						pos:  position{line: 302, col: 5, offset: 8822},
						name: "PutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 303, col: 5, offset: 8834},
						name: "RenameProc",
					},
					&ruleRefExpr{
						pos:  position{line: 304, col: 5, offset: 8849},
						name: "FuseProc",
					},
					&ruleRefExpr{
						pos:  position{line: 305, col: 5, offset: 8862},
						name: "ShapeProc",
					},
					&ruleRefExpr{
						pos:  position{line: 306, col: 5, offset: 8876},
						name: "JoinProc",
					},
					&ruleRefExpr{
						pos:  position{line: 307, col: 5, offset: 8889},
						name: "SampleProc",
					},
					&ruleRefExpr{
						pos:  position{line: 308, col: 5, offset: 8904},
						name: "SQLProc",
					},
					&ruleRefExpr{
						pos:  position{line: 309, col: 5, offset: 8916},
						name: "FromProc",
					},
					&ruleRefExpr{
						pos:  position{line: 310, col: 5, offset: 8929},
						name: "PassProc",
					},
					&ruleRefExpr{
						pos:  position{line: 311, col: 5, offset: 8942},
						name: "ExplodeProc",
					},
				},
			},
		},
		{
			name: "SortProc",
			pos:  position{line: 313, col: 1, offset: 8955},
			expr: &actionExpr{
				pos: position{line: 314, col: 5, offset: 8968},
				run: (*parser).callonSortProc1,
				expr: &seqExpr{
					pos: position{line: 314, col: 5, offset: 8968},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 314, col: 5, offset: 8968},
							val:        "sort",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 314, col: 13, offset: 8976},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 314, col: 18, offset: 8981},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 314, col: 27, offset: 8990},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 314, col: 32, offset: 8995},
								expr: &actionExpr{
									pos: position{line: 314, col: 33, offset: 8996},
									run: (*parser).callonSortProc8,
									expr: &seqExpr{
										pos: position{line: 314, col: 33, offset: 8996},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 314, col: 33, offset: 8996},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 314, col: 35, offset: 8998},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 314, col: 37, offset: 9000},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 328, col: 1, offset: 9419},
			expr: &actionExpr{
				pos: position{line: 328, col: 12, offset: 9430},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 328, col: 12, offset: 9430},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 328, col: 17, offset: 9435},
						expr: &actionExpr{
							pos: position{line: 328, col: 18, offset: 9436},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 328, col: 18, offset: 9436},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 328, col: 18, offset: 9436},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 328, col: 20, offset: 9438},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 328, col: 22, offset: 9440},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 330, col: 1, offset: 9496},
			expr: &choiceExpr{
				pos: position{line: 331, col: 5, offset: 9508},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 331, col: 5, offset: 9508},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 331, col: 5, offset: 9508},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 332, col: 5, offset: 9583},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 332, col: 5, offset: 9583},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 332, col: 5, offset: 9583},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 332, col: 14, offset: 9592},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 332, col: 16, offset: 9594},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 332, col: 23, offset: 9601},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 332, col: 24, offset: 9602},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 332, col: 24, offset: 9602},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 332, col: 34, offset: 9612},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopProc",
			pos:  position{line: 334, col: 1, offset: 9726},
			expr: &actionExpr{
				pos: position{line: 335, col: 5, offset: 9738},
				run: (*parser).callonTopProc1,
				expr: &seqExpr{
					pos: position{line: 335, col: 5, offset: 9738},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 335, col: 5, offset: 9738},
							val:        "top",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 335, col: 12, offset: 9745},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 335, col: 18, offset: 9751},
								expr: &actionExpr{
									pos: position{line: 335, col: 19, offset: 9752},
									run: (*parser).callonTopProc6,
									expr: &seqExpr{
										pos: position{line: 335, col: 19, offset: 9752},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 335, col: 19, offset: 9752},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 335, col: 21, offset: 9754},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 335, col: 23, offset: 9756},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 335, col: 47, offset: 9780},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 335, col: 53, offset: 9786},
								expr: &seqExpr{
									pos: position{line: 335, col: 54, offset: 9787},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 335, col: 54, offset: 9787},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 335, col: 56, offset: 9789},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 335, col: 67, offset: 9800},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 335, col: 74, offset: 9807},
								expr: &actionExpr{
									pos: position{line: 335, col: 75, offset: 9808},
									run: (*parser).callonTopProc18,
									expr: &seqExpr{
										pos: position{line: 335, col: 75, offset: 9808},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 335, col: 75, offset: 9808},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 335, col: 77, offset: 9810},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 335, col: 79, offset: 9812},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutProc",
			pos:  position{line: 349, col: 1, offset: 10157},
			expr: &actionExpr{
				pos: position{line: 350, col: 5, offset: 10169},
				run: (*parser).callonCutProc1,
				expr: &seqExpr{
					pos: position{line: 350, col: 5, offset: 10169},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 350, col: 5, offset: 10169},
							val:        "cut",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 350, col: 12, offset: 10176},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 350, col: 14, offset: 10178},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 350, col: 19, offset: 10183},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "PickProc",
			pos:  position{line: 354, col: 1, offset: 10278},
			expr: &actionExpr{
				pos: position{line: 355, col: 5, offset: 10291},
				run: (*parser).callonPickProc1,
				expr: &seqExpr{
					pos: position{line: 355, col: 5, offset: 10291},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 355, col: 5, offset: 10291},
							val:        "pick",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 355, col: 13, offset: 10299},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 355, col: 15, offset: 10301},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 355, col: 20, offset: 10306},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropProc",
			pos:  position{line: 359, col: 1, offset: 10402},
			expr: &actionExpr{
				pos: position{line: 360, col: 5, offset: 10415},
				run: (*parser).callonDropProc1,
				expr: &seqExpr{
					pos: position{line: 360, col: 5, offset: 10415},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 360, col: 5, offset: 10415},
							val:        "drop",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 360, col: 13, offset: 10423},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 360, col: 15, offset: 10425},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 360, col: 20, offset: 10430},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadProc",
			pos:  position{line: 364, col: 1, offset: 10521},
			expr: &choiceExpr{
				pos: position{line: 365, col: 5, offset: 10534},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 365, col: 5, offset: 10534},
						run: (*parser).callonHeadProc2,
						expr: &seqExpr{
							pos: position{line: 365, col: 5, offset: 10534},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 365, col: 5, offset: 10534},
									val:        "head",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 365, col: 13, offset: 10542},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 365, col: 15, offset: 10544},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 365, col: 21, offset: 10550},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 366, col: 5, offset: 10630},
						run: (*parser).callonHeadProc8,
						expr: &litMatcher{
							pos:        position{line: 366, col: 5, offset: 10630},
							val:        "head",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "TailProc",
			pos:  position{line: 368, col: 1, offset: 10706},
			expr: &choiceExpr{
				pos: position{line: 369, col: 5, offset: 10719},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 369, col: 5, offset: 10719},
						run: (*parser).callonTailProc2,
						expr: &seqExpr{
							pos: position{line: 369, col: 5, offset: 10719},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 369, col: 5, offset: 10719},
									val:        "tail",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 369, col: 13, offset: 10727},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 369, col: 15, offset: 10729},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 369, col: 21, offset: 10735},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 370, col: 5, offset: 10815},
						run: (*parser).callonTailProc8,
						expr: &litMatcher{
							pos:        position{line: 370, col: 5, offset: 10815},
							val:        "tail",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "FilterProc",
			pos:  position{line: 372, col: 1, offset: 10891},
			expr: &actionExpr{
				pos: position{line: 373, col: 5, offset: 10906},
				run: (*parser).callonFilterProc1,
				expr: &seqExpr{
					pos: position{line: 373, col: 5, offset: 10906},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 373, col: 5, offset: 10906},
							val:        "filter",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 373, col: 15, offset: 10916},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 373, col: 17, offset: 10918},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 373, col: 20, offset: 10921},
								name: "Filter",
							},
						},
					},
				},
			},
		},
		{
			name: "Filter",
			pos:  position{line: 377, col: 1, offset: 10958},
			expr: &actionExpr{
				pos: position{line: 378, col: 5, offset: 10969},
				run: (*parser).callonFilter1,
				expr: &labeledExpr{
					pos:   position{line: 378, col: 5, offset: 10969},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 378, col: 10, offset: 10974},
						name: "SearchBoolean",
					},
				},
			},
		},
		{
			name: "UniqProc",
			pos:  position{line: 382, col: 1, offset: 11070},
			expr: &choiceExpr{
				pos: position{line: 383, col: 5, offset: 11083},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 383, col: 5, offset: 11083},
						run: (*parser).callonUniqProc2,
						expr: &seqExpr{
							pos: position{line: 383, col: 5, offset: 11083},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 383, col: 5, offset: 11083},
									val:        "uniq",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 383, col: 13, offset: 11091},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 383, col: 15, offset: 11093},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 386, col: 5, offset: 11182},
						run: (*parser).callonUniqProc7,
						expr: &litMatcher{
							pos:        position{line: 386, col: 5, offset: 11182},
							val:        "uniq",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "PutProc",
			pos:  position{line: 390, col: 1, offset: 11272},
			expr: &actionExpr{
				pos: position{line: 391, col: 5, offset: 11284},
				run: (*parser).callonPutProc1,
				expr: &seqExpr{
					pos: position{line: 391, col: 5, offset: 11284},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 391, col: 5, offset: 11284},
							val:        "put",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 391, col: 12, offset: 11291},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 391, col: 14, offset: 11293},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 391, col: 19, offset: 11298},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameProc",
			pos:  position{line: 395, col: 1, offset: 11393},
			expr: &actionExpr{
				pos: position{line: 396, col: 5, offset: 11408},
				run: (*parser).callonRenameProc1,
				expr: &seqExpr{
					pos: position{line: 396, col: 5, offset: 11408},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 396, col: 5, offset: 11408},
							val:        "rename",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 396, col: 15, offset: 11418},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 396, col: 17, offset: 11420},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 396, col: 23, offset: 11426},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 396, col: 34, offset: 11437},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 396, col: 39, offset: 11442},
								expr: &actionExpr{
									pos: position{line: 396, col: 40, offset: 11443},
									run: (*parser).callonRenameProc9,
									expr: &seqExpr{
										pos: position{line: 396, col: 40, offset: 11443},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 396, col: 40, offset: 11443},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 396, col: 43, offset: 11446},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 396, col: 47, offset: 11450},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 396, col: 50, offset: 11453},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 396, col: 53, offset: 11456},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseProc",
			pos:  position{line: 404, col: 1, offset: 11865},
			expr: &actionExpr{
				pos: position{line: 405, col: 5, offset: 11878},
				run: (*parser).callonFuseProc1,
				expr: &seqExpr{
					pos: position{line: 405, col: 5, offset: 11878},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 405, col: 5, offset: 11878},
							val:        "fuse",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 405, col: 13, offset: 11886},
							expr: &seqExpr{
								pos: position{line: 405, col: 15, offset: 11888},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 405, col: 15, offset: 11888},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 405, col: 18, offset: 11891},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShapeProc",
			pos:  position{line: 409, col: 1, offset: 11962},
			expr: &actionExpr{
				pos: position{line: 410, col: 5, offset: 11976},
				run: (*parser).callonShapeProc1,
				expr: &litMatcher{
					pos:        position{line: 410, col: 5, offset: 11976},
					val:        "shape",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JoinProc",
			pos:  position{line: 414, col: 1, offset: 12052},
			expr: &choiceExpr{
				pos: position{line: 415, col: 5, offset: 12065},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 415, col: 5, offset: 12065},
						run: (*parser).callonJoinProc2,
						expr: &seqExpr{
							pos: position{line: 415, col: 5, offset: 12065},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 415, col: 5, offset: 12065},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 415, col: 11, offset: 12071},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 415, col: 21, offset: 12081},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 415, col: 29, offset: 12089},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 415, col: 31, offset: 12091},
									name: "ON",
								},
								&ruleRefExpr{
									pos:  position{line: 415, col: 34, offset: 12094},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 415, col: 36, offset: 12096},
									label: "leftKey",
									expr: &ruleRefExpr{
										pos:  position{line: 415, col: 44, offset: 12104},
										name: "JoinKey",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 415, col: 52, offset: 12112},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 415, col: 55, offset: 12115},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 415, col: 59, offset: 12119},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 415, col: 62, offset: 12122},
									label: "rightKey",
									expr: &ruleRefExpr{
										pos:  position{line: 415, col: 71, offset: 12131},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 415, col: 79, offset: 12139},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 415, col: 87, offset: 12147},
										expr: &seqExpr{
											pos: position{line: 415, col: 88, offset: 12148},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 415, col: 88, offset: 12148},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 415, col: 90, offset: 12150},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 422, col: 5, offset: 12416},
						run: (*parser).callonJoinProc22,
						expr: &seqExpr{
							pos: position{line: 422, col: 5, offset: 12416},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 422, col: 5, offset: 12416},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 422, col: 11, offset: 12422},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 422, col: 22, offset: 12433},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 422, col: 30, offset: 12441},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 422, col: 32, offset: 12443},
									name: "ON",
								},
								&ruleRefExpr{
									pos:  position{line: 422, col: 35, offset: 12446},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 422, col: 37, offset: 12448},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 422, col: 41, offset: 12452},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 422, col: 49, offset: 12460},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 422, col: 57, offset: 12468},
										expr: &seqExpr{
											pos: position{line: 422, col: 58, offset: 12469},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 422, col: 58, offset: 12469},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 422, col: 60, offset: 12471},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinStyle",
			pos:  position{line: 430, col: 1, offset: 12725},
			expr: &choiceExpr{
				pos: position{line: 431, col: 5, offset: 12739},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 431, col: 5, offset: 12739},
						run: (*parser).callonJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 431, col: 5, offset: 12739},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 431, col: 5, offset: 12739},
									val:        "inner",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 431, col: 14, offset: 12748},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 432, col: 5, offset: 12778},
						run: (*parser).callonJoinStyle6,
						expr: &seqExpr{
							pos: position{line: 432, col: 5, offset: 12778},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 432, col: 5, offset: 12778},
									val:        "left",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 432, col: 14, offset: 12787},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 433, col: 5, offset: 12816},
						run: (*parser).callonJoinStyle10,
						expr: &seqExpr{
							pos: position{line: 433, col: 5, offset: 12816},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 433, col: 5, offset: 12816},
									val:        "right",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 433, col: 14, offset: 12825},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 434, col: 5, offset: 12855},
						run: (*parser).callonJoinStyle14,
						expr: &litMatcher{
							pos:        position{line: 434, col: 5, offset: 12855},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 436, col: 1, offset: 12891},
			expr: &choiceExpr{
				pos: position{line: 437, col: 5, offset: 12903},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 437, col: 5, offset: 12903},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 438, col: 5, offset: 12912},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 438, col: 5, offset: 12912},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 438, col: 5, offset: 12912},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 438, col: 9, offset: 12916},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 438, col: 14, offset: 12921},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 438, col: 19, offset: 12926},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SampleProc",
			pos:  position{line: 440, col: 1, offset: 12952},
			expr: &actionExpr{
				pos: position{line: 441, col: 5, offset: 12967},
				run: (*parser).callonSampleProc1,
				expr: &seqExpr{
					pos: position{line: 441, col: 5, offset: 12967},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 441, col: 5, offset: 12967},
							val:        "sample",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 441, col: 15, offset: 12977},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 441, col: 17, offset: 12979},
								name: "SampleExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "OpExprs",
			pos:  position{line: 484, col: 1, offset: 14569},
			expr: &actionExpr{
				pos: position{line: 485, col: 5, offset: 14581},
				run: (*parser).callonOpExprs1,
				expr: &seqExpr{
					pos: position{line: 485, col: 5, offset: 14581},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 485, col: 5, offset: 14581},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 485, col: 11, offset: 14587},
								name: "OpExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 485, col: 18, offset: 14594},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 485, col: 23, offset: 14599},
								expr: &actionExpr{
									pos: position{line: 485, col: 24, offset: 14600},
									run: (*parser).callonOpExprs7,
									expr: &seqExpr{
										pos: position{line: 485, col: 24, offset: 14600},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 485, col: 24, offset: 14600},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 485, col: 27, offset: 14603},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 485, col: 31, offset: 14607},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 485, col: 34, offset: 14610},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 485, col: 39, offset: 14615},
													name: "OpExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OpExpr",
			pos:  position{line: 489, col: 1, offset: 14777},
			expr: &choiceExpr{
				pos: position{line: 490, col: 4, offset: 14787},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 490, col: 4, offset: 14787},
						name: "Assignment",
					},
					&ruleRefExpr{
						pos:  position{line: 491, col: 4, offset: 14801},
						name: "Function",
					},
				},
			},
		},
		{
			name: "SampleExpr",
			pos:  position{line: 493, col: 1, offset: 14811},
			expr: &choiceExpr{
				pos: position{line: 494, col: 5, offset: 14826},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 494, col: 5, offset: 14826},
						run: (*parser).callonSampleExpr2,
						expr: &seqExpr{
							pos: position{line: 494, col: 5, offset: 14826},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 494, col: 5, offset: 14826},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 494, col: 7, offset: 14828},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 494, col: 12, offset: 14833},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 495, col: 5, offset: 14862},
						run: (*parser).callonSampleExpr7,
						expr: &litMatcher{
							pos:        position{line: 495, col: 5, offset: 14862},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromProc",
			pos:  position{line: 497, col: 1, offset: 14920},
			expr: &actionExpr{
				pos: position{line: 498, col: 5, offset: 14933},
				run: (*parser).callonFromProc1,
				expr: &labeledExpr{
					pos:   position{line: 498, col: 5, offset: 14933},
					label: "source",
					expr: &ruleRefExpr{
						pos:  position{line: 498, col: 12, offset: 14940},
						name: "FromAny",
					},
				},
			},
		},
		{
			name: "FromAny",
			pos:  position{line: 502, col: 1, offset: 15096},
			expr: &choiceExpr{
				pos: position{line: 503, col: 5, offset: 15108},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 503, col: 5, offset: 15108},
						name: "FileProc",
					},
					&ruleRefExpr{
						pos:  position{line: 504, col: 5, offset: 15121},
						name: "HTTPProc",
					},
					&ruleRefExpr{
						pos:  position{line: 505, col: 5, offset: 15134},
						name: "PoolProc",
					},
				},
			},
		},
		{
			name: "FileProc",
			pos:  position{line: 507, col: 1, offset: 15144},
			expr: &actionExpr{
				pos: position{line: 508, col: 5, offset: 15157},
				run: (*parser).callonFileProc1,
				expr: &seqExpr{
					pos: position{line: 508, col: 5, offset: 15157},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 508, col: 5, offset: 15157},
							val:        "file",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 508, col: 13, offset: 15165},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 508, col: 15, offset: 15167},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 508, col: 20, offset: 15172},
								name: "Path",
							},
						},
						&labeledExpr{
							pos:   position{line: 508, col: 25, offset: 15177},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 508, col: 32, offset: 15184},
								expr: &ruleRefExpr{
									pos:  position{line: 508, col: 32, offset: 15184},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 508, col: 43, offset: 15195},
							label: "layout",
							expr: &zeroOrOneExpr{
								pos: position{line: 508, col: 50, offset: 15202},
								expr: &ruleRefExpr{
									pos:  position{line: 508, col: 50, offset: 15202},
									name: "LayoutArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PoolProc",
			pos:  position{line: 512, col: 1, offset: 15331},
			expr: &actionExpr{
				pos: position{line: 513, col: 5, offset: 15344},
				run: (*parser).callonPoolProc1,
				expr: &seqExpr{
					pos: position{line: 513, col: 5, offset: 15344},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 513, col: 5, offset: 15344},
							val:        "from",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 513, col: 13, offset: 15352},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 513, col: 15, offset: 15354},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 513, col: 20, offset: 15359},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolBody",
			pos:  position{line: 515, col: 1, offset: 15390},
			expr: &actionExpr{
				pos: position{line: 516, col: 5, offset: 15403},
				run: (*parser).callonPoolBody1,
				expr: &seqExpr{
					pos: position{line: 516, col: 5, offset: 15403},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 516, col: 5, offset: 15403},
							label: "spec",
							expr: &ruleRefExpr{
								pos:  position{line: 516, col: 10, offset: 15408},
								name: "PoolSpec",
							},
						},
						&labeledExpr{
							pos:   position{line: 516, col: 19, offset: 15417},
							label: "at",
							expr: &zeroOrOneExpr{
								pos: position{line: 516, col: 22, offset: 15420},
								expr: &ruleRefExpr{
									pos:  position{line: 516, col: 22, offset: 15420},
									name: "PoolAt",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 516, col: 30, offset: 15428},
							label: "over",
							expr: &zeroOrOneExpr{
								pos: position{line: 516, col: 35, offset: 15433},
								expr: &ruleRefExpr{
									pos:  position{line: 516, col: 35, offset: 15433},
									name: "PoolRange",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 516, col: 46, offset: 15444},
							label: "order",
							expr: &zeroOrOneExpr{
								pos: position{line: 516, col: 52, offset: 15450},
								expr: &ruleRefExpr{
									pos:  position{line: 516, col: 52, offset: 15450},
									name: "OrderArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "HTTPProc",
			pos:  position{line: 520, col: 1, offset: 15586},
			expr: &actionExpr{
				pos: position{line: 521, col: 5, offset: 15599},
				run: (*parser).callonHTTPProc1,
				expr: &seqExpr{
					pos: position{line: 521, col: 5, offset: 15599},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 521, col: 5, offset: 15599},
							val:        "get",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 521, col: 12, offset: 15606},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 521, col: 14, offset: 15608},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 521, col: 18, offset: 15612},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 521, col: 22, offset: 15616},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 521, col: 29, offset: 15623},
								expr: &ruleRefExpr{
									pos:  position{line: 521, col: 29, offset: 15623},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 521, col: 40, offset: 15634},
							label: "layout",
							expr: &zeroOrOneExpr{
								pos: position{line: 521, col: 47, offset: 15641},
								expr: &ruleRefExpr{
									pos:  position{line: 521, col: 47, offset: 15641},
									name: "LayoutArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 525, col: 1, offset: 15767},
			expr: &actionExpr{
				pos: position{line: 525, col: 7, offset: 15773},
				run: (*parser).callonURL1,
				expr: &seqExpr{
					pos: position{line: 525, col: 7, offset: 15773},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 525, col: 8, offset: 15774},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 525, col: 8, offset: 15774},
									val:        "http:",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 525, col: 18, offset: 15784},
									val:        "https:",
									ignoreCase: false,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 525, col: 28, offset: 15794},
							name: "Path",
						},
					},
				},
			},
		},
		{
			name: "Path",
			pos:  position{line: 527, col: 1, offset: 15831},
			expr: &choiceExpr{
				pos: position{line: 528, col: 5, offset: 15840},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 528, col: 5, offset: 15840},
						run: (*parser).callonPath2,
						expr: &labeledExpr{
							pos:   position{line: 528, col: 5, offset: 15840},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 528, col: 7, offset: 15842},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 529, col: 5, offset: 15877},
						run: (*parser).callonPath5,
						expr: &oneOrMoreExpr{
							pos: position{line: 529, col: 5, offset: 15877},
							expr: &charClassMatcher{
								pos:        position{line: 529, col: 5, offset: 15877},
								val:        "[0-9a-zA-Z!@$%^&*()_=<>,./?:[\\]{}~|+-]",
								chars:      []rune{'!', '@', '$', '%', '^', '&', '*', '(', ')', '_', '=', '<', '>', ',', '.', '/', '?', ':', '[', ']', '{', '}', '~', '|', '+', '-'},
								ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PoolAt",
			pos:  position{line: 531, col: 1, offset: 15949},
			expr: &actionExpr{
				pos: position{line: 532, col: 5, offset: 15960},
				run: (*parser).callonPoolAt1,
				expr: &seqExpr{
					pos: position{line: 532, col: 5, offset: 15960},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 532, col: 5, offset: 15960},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 532, col: 7, offset: 15962},
							val:        "at",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 532, col: 13, offset: 15968},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 532, col: 15, offset: 15970},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 532, col: 18, offset: 15973},
								name: "KSUID",
							},
						},
					},
				},
			},
		},
		{
			name: "KSUID",
			pos:  position{line: 534, col: 1, offset: 15999},
			expr: &actionExpr{
				pos: position{line: 534, col: 9, offset: 16007},
				run: (*parser).callonKSUID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 534, col: 9, offset: 16007},
					expr: &charClassMatcher{
						pos:        position{line: 534, col: 10, offset: 16008},
						val:        "[0-9a-zA-Z]",
						ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "PoolRange",
			pos:  position{line: 536, col: 1, offset: 16054},
			expr: &actionExpr{
				pos: position{line: 537, col: 5, offset: 16068},
				run: (*parser).callonPoolRange1,
				expr: &seqExpr{
					pos: position{line: 537, col: 5, offset: 16068},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 537, col: 5, offset: 16068},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 537, col: 7, offset: 16070},
							val:        "range",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 537, col: 16, offset: 16079},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 537, col: 18, offset: 16081},
							label: "lower",
							expr: &ruleRefExpr{
								pos:  position{line: 537, col: 24, offset: 16087},
								name: "Literal",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 537, col: 32, offset: 16095},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 537, col: 34, offset: 16097},
							val:        "to",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 537, col: 40, offset: 16103},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 537, col: 42, offset: 16105},
							label: "upper",
							expr: &ruleRefExpr{
								pos:  position{line: 537, col: 48, offset: 16111},
								name: "Literal",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolSpec",
			pos:  position{line: 541, col: 1, offset: 16216},
			expr: &choiceExpr{
				pos: position{line: 542, col: 5, offset: 16229},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 542, col: 5, offset: 16229},
						run: (*parser).callonPoolSpec2,
						expr: &seqExpr{
							pos: position{line: 542, col: 5, offset: 16229},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 542, col: 5, offset: 16229},
									label: "pool",
									expr: &ruleRefExpr{
										pos:  position{line: 542, col: 10, offset: 16234},
										name: "PoolName",
									},
								},
								&labeledExpr{
									pos:   position{line: 542, col: 19, offset: 16243},
									label: "branch",
									expr: &zeroOrOneExpr{
										pos: position{line: 542, col: 26, offset: 16250},
										expr: &ruleRefExpr{
											pos:  position{line: 542, col: 26, offset: 16250},
											name: "PoolBranch",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 542, col: 38, offset: 16262},
									label: "meta",
									expr: &zeroOrOneExpr{
										pos: position{line: 542, col: 43, offset: 16267},
										expr: &ruleRefExpr{
											pos:  position{line: 542, col: 43, offset: 16267},
											name: "PoolMeta",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 545, col: 5, offset: 16376},
						run: (*parser).callonPoolSpec12,
						expr: &labeledExpr{
							pos:   position{line: 545, col: 5, offset: 16376},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 545, col: 10, offset: 16381},
								name: "PoolMeta",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolBranch",
			pos:  position{line: 549, col: 1, offset: 16482},
			expr: &actionExpr{
				pos: position{line: 550, col: 5, offset: 16497},
				run: (*parser).callonPoolBranch1,
				expr: &seqExpr{
					pos: position{line: 550, col: 5, offset: 16497},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 550, col: 5, offset: 16497},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 550, col: 9, offset: 16501},
							label: "branch",
							expr: &ruleRefExpr{
								pos:  position{line: 550, col: 16, offset: 16508},
								name: "PoolName",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolMeta",
			pos:  position{line: 552, col: 1, offset: 16541},
			expr: &actionExpr{
				pos: position{line: 553, col: 5, offset: 16554},
				run: (*parser).callonPoolMeta1,
				expr: &seqExpr{
					pos: position{line: 553, col: 5, offset: 16554},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 553, col: 5, offset: 16554},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 553, col: 9, offset: 16558},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 553, col: 14, offset: 16563},
								name: "IdentifierName",
							},
						},
						&litMatcher{
							pos:        position{line: 553, col: 29, offset: 16578},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PoolName",
			pos:  position{line: 555, col: 1, offset: 16604},
			expr: &choiceExpr{
				pos: position{line: 556, col: 5, offset: 16617},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 556, col: 5, offset: 16617},
						run: (*parser).callonPoolName2,
						expr: &labeledExpr{
							pos:   position{line: 556, col: 5, offset: 16617},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 556, col: 10, offset: 16622},
								name: "IdentifierName",
							},
						},
					},
					&actionExpr{
						pos: position{line: 557, col: 5, offset: 16662},
						run: (*parser).callonPoolName5,
						expr: &labeledExpr{
							pos:   position{line: 557, col: 5, offset: 16662},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 557, col: 8, offset: 16665},
								name: "KSUID",
							},
						},
					},
					&actionExpr{
						pos: position{line: 558, col: 5, offset: 16694},
						run: (*parser).callonPoolName8,
						expr: &labeledExpr{
							pos:   position{line: 558, col: 5, offset: 16694},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 558, col: 7, offset: 16696},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "LayoutArg",
			pos:  position{line: 560, col: 1, offset: 16728},
			expr: &actionExpr{
				pos: position{line: 561, col: 5, offset: 16742},
				run: (*parser).callonLayoutArg1,
				expr: &seqExpr{
					pos: position{line: 561, col: 5, offset: 16742},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 561, col: 5, offset: 16742},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 561, col: 7, offset: 16744},
							val:        "order",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 561, col: 16, offset: 16753},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 561, col: 18, offset: 16755},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 561, col: 23, offset: 16760},
								name: "FieldExprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 561, col: 34, offset: 16771},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 561, col: 40, offset: 16777},
								name: "OrderSuffix",
							},
						},
					},
				},
			},
		},
		{
			name: "FormatArg",
			pos:  position{line: 565, col: 1, offset: 16887},
			expr: &actionExpr{
				pos: position{line: 566, col: 5, offset: 16901},
				run: (*parser).callonFormatArg1,
				expr: &seqExpr{
					pos: position{line: 566, col: 5, offset: 16901},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 566, col: 5, offset: 16901},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 566, col: 7, offset: 16903},
							val:        "format",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 566, col: 17, offset: 16913},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 566, col: 19, offset: 16915},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 566, col: 23, offset: 16919},
								name: "IdentifierName",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderSuffix",
			pos:  position{line: 568, col: 1, offset: 16955},
			expr: &choiceExpr{
				pos: position{line: 569, col: 5, offset: 16971},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 569, col: 5, offset: 16971},
						run: (*parser).callonOrderSuffix2,
						expr: &litMatcher{
							pos:        position{line: 569, col: 5, offset: 16971},
							val:        ":asc",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 570, col: 5, offset: 17006},
						run: (*parser).callonOrderSuffix4,
						expr: &litMatcher{
							pos:        position{line: 570, col: 5, offset: 17006},
							val:        ":desc",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 571, col: 5, offset: 17043},
						run: (*parser).callonOrderSuffix6,
						expr: &litMatcher{
							pos:        position{line: 571, col: 5, offset: 17043},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OrderArg",
			pos:  position{line: 573, col: 1, offset: 17069},
			expr: &choiceExpr{
				pos: position{line: 574, col: 5, offset: 17082},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 574, col: 5, offset: 17082},
						run: (*parser).callonOrderArg2,
						expr: &seqExpr{
							pos: position{line: 574, col: 5, offset: 17082},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 574, col: 5, offset: 17082},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 574, col: 7, offset: 17084},
									val:        "order",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 574, col: 16, offset: 17093},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 574, col: 18, offset: 17095},
									val:        "asc",
									ignoreCase: true,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 575, col: 5, offset: 17129},
						run: (*parser).callonOrderArg8,
						expr: &seqExpr{
							pos: position{line: 575, col: 5, offset: 17129},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 575, col: 5, offset: 17129},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 575, col: 7, offset: 17131},
									val:        "order",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 575, col: 16, offset: 17140},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 575, col: 18, offset: 17142},
									val:        "desc",
									ignoreCase: true,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassProc",
			pos:  position{line: 577, col: 1, offset: 17175},
			expr: &actionExpr{
				pos: position{line: 578, col: 5, offset: 17188},
				run: (*parser).callonPassProc1,
				expr: &litMatcher{
					pos:        position{line: 578, col: 5, offset: 17188},
					val:        "pass",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ExplodeProc",
			pos:  position{line: 584, col: 1, offset: 17383},
			expr: &actionExpr{
				pos: position{line: 585, col: 5, offset: 17399},
				run: (*parser).callonExplodeProc1,
				expr: &seqExpr{
					pos: position{line: 585, col: 5, offset: 17399},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 585, col: 5, offset: 17399},
							val:        "explode",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 585, col: 16, offset: 17410},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 585, col: 18, offset: 17412},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 585, col: 23, offset: 17417},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 585, col: 29, offset: 17423},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 585, col: 33, offset: 17427},
								name: "TypeArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 585, col: 41, offset: 17435},
							label: "as",
							expr: &zeroOrOneExpr{
								pos: position{line: 585, col: 44, offset: 17438},
								expr: &ruleRefExpr{
									pos:  position{line: 585, col: 44, offset: 17438},
									name: "AsArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeArg",
			pos:  position{line: 589, col: 1, offset: 17550},
			expr: &actionExpr{
				pos: position{line: 590, col: 5, offset: 17562},
				run: (*parser).callonTypeArg1,
				expr: &seqExpr{
					pos: position{line: 590, col: 5, offset: 17562},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 590, col: 5, offset: 17562},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 590, col: 7, offset: 17564},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 590, col: 10, offset: 17567},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 590, col: 12, offset: 17569},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 590, col: 16, offset: 17573},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "AsArg",
			pos:  position{line: 592, col: 1, offset: 17598},
			expr: &actionExpr{
				pos: position{line: 593, col: 5, offset: 17608},
				run: (*parser).callonAsArg1,
				expr: &seqExpr{
					pos: position{line: 593, col: 5, offset: 17608},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 593, col: 5, offset: 17608},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 593, col: 7, offset: 17610},
							name: "AS",
						},
						&ruleRefExpr{
							pos:  position{line: 593, col: 10, offset: 17613},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 593, col: 12, offset: 17615},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 593, col: 16, offset: 17619},
								name: "Lval",
							},
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 597, col: 1, offset: 17670},
			expr: &ruleRefExpr{
				pos:  position{line: 597, col: 8, offset: 17677},
				name: "DerefExpr",
			},
		},
		{
			name: "Lvals",
			pos:  position{line: 599, col: 1, offset: 17688},
			expr: &actionExpr{
				pos: position{line: 600, col: 5, offset: 17698},
				run: (*parser).callonLvals1,
				expr: &seqExpr{
					pos: position{line: 600, col: 5, offset: 17698},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 600, col: 5, offset: 17698},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 600, col: 11, offset: 17704},
								name: "Lval",
							},
						},
						&labeledExpr{
							pos:   position{line: 600, col: 16, offset: 17709},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 600, col: 21, offset: 17714},
								expr: &actionExpr{
									pos: position{line: 600, col: 22, offset: 17715},
									run: (*parser).callonLvals7,
									expr: &seqExpr{
										pos: position{line: 600, col: 22, offset: 17715},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 600, col: 22, offset: 17715},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 600, col: 25, offset: 17718},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 600, col: 29, offset: 17722},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 600, col: 32, offset: 17725},
												label: "lval",
												expr: &ruleRefExpr{
													pos:  position{line: 600, col: 37, offset: 17730},
													name: "Lval",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 604, col: 1, offset: 17842},
			expr: &ruleRefExpr{
				pos:  position{line: 604, col: 13, offset: 17854},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 606, col: 1, offset: 17860},
			expr: &actionExpr{
				pos: position{line: 607, col: 5, offset: 17875},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 607, col: 5, offset: 17875},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 607, col: 5, offset: 17875},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 607, col: 11, offset: 17881},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 607, col: 21, offset: 17891},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 607, col: 26, offset: 17896},
								expr: &seqExpr{
									pos: position{line: 607, col: 27, offset: 17897},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 607, col: 27, offset: 17897},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 607, col: 30, offset: 17900},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 607, col: 34, offset: 17904},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 607, col: 37, offset: 17907},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 617, col: 1, offset: 18106},
			expr: &actionExpr{
				pos: position{line: 618, col: 5, offset: 18121},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 618, col: 5, offset: 18121},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 618, col: 5, offset: 18121},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 618, col: 9, offset: 18125},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 618, col: 14, offset: 18130},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 618, col: 17, offset: 18133},
							val:        ":=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 618, col: 22, offset: 18138},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 618, col: 25, offset: 18141},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 618, col: 29, offset: 18145},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 620, col: 1, offset: 18236},
			expr: &ruleRefExpr{
				pos:  position{line: 620, col: 8, offset: 18243},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 622, col: 1, offset: 18260},
			expr: &choiceExpr{
				pos: position{line: 623, col: 5, offset: 18280},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 623, col: 5, offset: 18280},
						run: (*parser).callonConditionalExpr2,
						expr: &seqExpr{
							pos: position{line: 623, col: 5, offset: 18280},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 623, col: 5, offset: 18280},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 623, col: 15, offset: 18290},
										name: "LogicalOrExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 623, col: 29, offset: 18304},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 623, col: 32, offset: 18307},
									val:        "?",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 623, col: 36, offset: 18311},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 623, col: 39, offset: 18314},
									label: "thenClause",
									expr: &ruleRefExpr{
										pos:  position{line: 623, col: 50, offset: 18325},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 623, col: 55, offset: 18330},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 623, col: 58, offset: 18333},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 623, col: 62, offset: 18337},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 623, col: 65, offset: 18340},
									label: "elseClause",
									expr: &ruleRefExpr{
										pos:  position{line: 623, col: 76, offset: 18351},
										name: "Expr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 626, col: 5, offset: 18491},
						name: "LogicalOrExpr",
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 628, col: 1, offset: 18506},
			expr: &actionExpr{
				pos: position{line: 629, col: 5, offset: 18524},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 629, col: 5, offset: 18524},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 629, col: 5, offset: 18524},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 629, col: 11, offset: 18530},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 630, col: 5, offset: 18549},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 630, col: 10, offset: 18554},
								expr: &actionExpr{
									pos: position{line: 630, col: 11, offset: 18555},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 630, col: 11, offset: 18555},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 630, col: 11, offset: 18555},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 630, col: 14, offset: 18558},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 630, col: 17, offset: 18561},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 630, col: 25, offset: 18569},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 630, col: 28, offset: 18572},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 630, col: 33, offset: 18577},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 634, col: 1, offset: 18695},
			expr: &actionExpr{
				pos: position{line: 635, col: 5, offset: 18714},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 635, col: 5, offset: 18714},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 635, col: 5, offset: 18714},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 635, col: 11, offset: 18720},
								name: "EqualityCompareExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 636, col: 5, offset: 18744},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 636, col: 10, offset: 18749},
								expr: &actionExpr{
									pos: position{line: 636, col: 11, offset: 18750},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 636, col: 11, offset: 18750},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 636, col: 11, offset: 18750},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 636, col: 14, offset: 18753},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 636, col: 17, offset: 18756},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 636, col: 26, offset: 18765},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 636, col: 29, offset: 18768},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 636, col: 34, offset: 18773},
													name: "EqualityCompareExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityCompareExpr",
			pos:  position{line: 640, col: 1, offset: 18896},
			expr: &choiceExpr{
				pos: position{line: 641, col: 5, offset: 18920},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 641, col: 5, offset: 18920},
						name: "PatternMatch",
					},
					&actionExpr{
						pos: position{line: 642, col: 5, offset: 18937},
						run: (*parser).callonEqualityCompareExpr3,
						expr: &seqExpr{
							pos: position{line: 642, col: 5, offset: 18937},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 642, col: 5, offset: 18937},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 642, col: 11, offset: 18943},
										name: "RelativeExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 643, col: 5, offset: 18960},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 643, col: 10, offset: 18965},
										expr: &actionExpr{
											pos: position{line: 643, col: 11, offset: 18966},
											run: (*parser).callonEqualityCompareExpr9,
											expr: &seqExpr{
												pos: position{line: 643, col: 11, offset: 18966},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 643, col: 11, offset: 18966},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 643, col: 14, offset: 18969},
														label: "comp",
														expr: &ruleRefExpr{
															pos:  position{line: 643, col: 19, offset: 18974},
															name: "EqualityComparator",
														},
													},
													&ruleRefExpr{
														pos:  position{line: 643, col: 38, offset: 18993},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 643, col: 41, offset: 18996},
														label: "expr",
														expr: &ruleRefExpr{
															pos:  position{line: 643, col: 46, offset: 19001},
															name: "RelativeExpr",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityOperator",
			pos:  position{line: 647, col: 1, offset: 19119},
			expr: &choiceExpr{
				pos: position{line: 648, col: 5, offset: 19140},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 648, col: 5, offset: 19140},
						run: (*parser).callonEqualityOperator2,
						expr: &litMatcher{
							pos:        position{line: 648, col: 5, offset: 19140},
							val:        "==",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 649, col: 5, offset: 19169},
						run: (*parser).callonEqualityOperator4,
						expr: &litMatcher{
							pos:        position{line: 649, col: 5, offset: 19169},
							val:        "!=",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "EqualityComparator",
			pos:  position{line: 651, col: 1, offset: 19206},
			expr: &choiceExpr{
				pos: position{line: 652, col: 5, offset: 19229},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 652, col: 5, offset: 19229},
						name: "EqualityOperator",
					},
					&actionExpr{
						pos: position{line: 653, col: 5, offset: 19250},
						run: (*parser).callonEqualityComparator3,
						expr: &seqExpr{
							pos: position{line: 653, col: 5, offset: 19250},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 653, col: 5, offset: 19250},
									val:        "in",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 653, col: 10, offset: 19255},
									expr: &ruleRefExpr{
										pos:  position{line: 653, col: 11, offset: 19256},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeExpr",
			pos:  position{line: 655, col: 1, offset: 19303},
			expr: &actionExpr{
				pos: position{line: 656, col: 5, offset: 19320},
				run: (*parser).callonRelativeExpr1,
				expr: &seqExpr{
					pos: position{line: 656, col: 5, offset: 19320},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 656, col: 5, offset: 19320},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 656, col: 11, offset: 19326},
								name: "AdditiveExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 657, col: 5, offset: 19343},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 657, col: 10, offset: 19348},
								expr: &actionExpr{
									pos: position{line: 657, col: 11, offset: 19349},
									run: (*parser).callonRelativeExpr7,
									expr: &seqExpr{
										pos: position{line: 657, col: 11, offset: 19349},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 657, col: 11, offset: 19349},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 657, col: 14, offset: 19352},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 657, col: 17, offset: 19355},
													name: "RelativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 657, col: 34, offset: 19372},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 657, col: 37, offset: 19375},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 657, col: 42, offset: 19380},
													name: "AdditiveExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeOperator",
			pos:  position{line: 661, col: 1, offset: 19496},
			expr: &actionExpr{
				pos: position{line: 661, col: 20, offset: 19515},
				run: (*parser).callonRelativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 661, col: 21, offset: 19516},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 661, col: 21, offset: 19516},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 661, col: 28, offset: 19523},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 661, col: 34, offset: 19529},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 661, col: 41, offset: 19536},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 663, col: 1, offset: 19573},
			expr: &actionExpr{
				pos: position{line: 664, col: 5, offset: 19590},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 664, col: 5, offset: 19590},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 664, col: 5, offset: 19590},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 664, col: 11, offset: 19596},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 665, col: 5, offset: 19619},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 665, col: 10, offset: 19624},
								expr: &actionExpr{
									pos: position{line: 665, col: 11, offset: 19625},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 665, col: 11, offset: 19625},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 665, col: 11, offset: 19625},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 665, col: 14, offset: 19628},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 665, col: 17, offset: 19631},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 665, col: 34, offset: 19648},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 665, col: 37, offset: 19651},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 665, col: 42, offset: 19656},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 669, col: 1, offset: 19778},
			expr: &actionExpr{
				pos: position{line: 669, col: 20, offset: 19797},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 669, col: 21, offset: 19798},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 669, col: 21, offset: 19798},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 669, col: 27, offset: 19804},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 671, col: 1, offset: 19841},
			expr: &actionExpr{
				pos: position{line: 672, col: 5, offset: 19864},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 672, col: 5, offset: 19864},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 672, col: 5, offset: 19864},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 672, col: 11, offset: 19870},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 673, col: 5, offset: 19882},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 673, col: 10, offset: 19887},
								expr: &actionExpr{
									pos: position{line: 673, col: 11, offset: 19888},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 673, col: 11, offset: 19888},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 673, col: 11, offset: 19888},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 673, col: 14, offset: 19891},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 673, col: 17, offset: 19894},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 673, col: 40, offset: 19917},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 673, col: 43, offset: 19920},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 673, col: 48, offset: 19925},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 677, col: 1, offset: 20036},
			expr: &actionExpr{
				pos: position{line: 677, col: 26, offset: 20061},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 677, col: 27, offset: 20062},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 677, col: 27, offset: 20062},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 677, col: 33, offset: 20068},
							val:        "/",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 679, col: 1, offset: 20105},
			expr: &choiceExpr{
				pos: position{line: 680, col: 5, offset: 20117},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 680, col: 5, offset: 20117},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 680, col: 5, offset: 20117},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 680, col: 5, offset: 20117},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 680, col: 9, offset: 20121},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 680, col: 12, offset: 20124},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 680, col: 14, offset: 20126},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 683, col: 5, offset: 20235},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 685, col: 1, offset: 20245},
			expr: &choiceExpr{
				pos: position{line: 686, col: 5, offset: 20258},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 686, col: 5, offset: 20258},
						name: "SelectExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 687, col: 5, offset: 20273},
						name: "MatchExpr",
					},
					&actionExpr{
						pos: position{line: 688, col: 5, offset: 20287},
						run: (*parser).callonFuncExpr4,
						expr: &seqExpr{
							pos: position{line: 688, col: 5, offset: 20287},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 688, col: 5, offset: 20287},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 688, col: 9, offset: 20291},
										name: "TypeLiteral",
									},
								},
								&notExpr{
									pos: position{line: 688, col: 21, offset: 20303},
									expr: &seqExpr{
										pos: position{line: 688, col: 23, offset: 20305},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 688, col: 23, offset: 20305},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 688, col: 26, offset: 20308},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 689, col: 5, offset: 20337},
						run: (*parser).callonFuncExpr12,
						expr: &seqExpr{
							pos: position{line: 689, col: 5, offset: 20337},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 689, col: 5, offset: 20337},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 689, col: 11, offset: 20343},
										name: "Cast",
									},
								},
								&labeledExpr{
									pos:   position{line: 689, col: 16, offset: 20348},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 689, col: 21, offset: 20353},
										expr: &ruleRefExpr{
											pos:  position{line: 689, col: 22, offset: 20354},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 692, col: 5, offset: 20425},
						run: (*parser).callonFuncExpr19,
						expr: &seqExpr{
							pos: position{line: 692, col: 5, offset: 20425},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 692, col: 5, offset: 20425},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 692, col: 11, offset: 20431},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 692, col: 20, offset: 20440},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 692, col: 25, offset: 20445},
										expr: &ruleRefExpr{
											pos:  position{line: 692, col: 26, offset: 20446},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 695, col: 5, offset: 20517},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 696, col: 5, offset: 20531},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FuncGuard",
			pos:  position{line: 698, col: 1, offset: 20540},
			expr: &seqExpr{
				pos: position{line: 698, col: 13, offset: 20552},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 698, col: 13, offset: 20552},
						name: "NotFuncs",
					},
					&ruleRefExpr{
						pos:  position{line: 698, col: 22, offset: 20561},
						name: "__",
					},
					&litMatcher{
						pos:        position{line: 698, col: 25, offset: 20564},
						val:        "(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "NotFuncs",
			pos:  position{line: 700, col: 1, offset: 20569},
			expr: &choiceExpr{
				pos: position{line: 701, col: 5, offset: 20582},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 701, col: 5, offset: 20582},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 702, col: 5, offset: 20592},
						val:        "match",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 703, col: 5, offset: 20604},
						val:        "select",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 704, col: 5, offset: 20617},
						val:        "type",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "MatchExpr",
			pos:  position{line: 706, col: 1, offset: 20625},
			expr: &actionExpr{
				pos: position{line: 707, col: 5, offset: 20639},
				run: (*parser).callonMatchExpr1,
				expr: &seqExpr{
					pos: position{line: 707, col: 5, offset: 20639},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 707, col: 5, offset: 20639},
							val:        "match",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 707, col: 13, offset: 20647},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 707, col: 16, offset: 20650},
							val:        "(",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 707, col: 20, offset: 20654},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 707, col: 25, offset: 20659},
								name: "SearchBoolean",
							},
						},
						&litMatcher{
							pos:        position{line: 707, col: 39, offset: 20673},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SelectExpr",
			pos:  position{line: 709, col: 1, offset: 20699},
			expr: &actionExpr{
				pos: position{line: 710, col: 5, offset: 20714},
				run: (*parser).callonSelectExpr1,
				expr: &seqExpr{
					pos: position{line: 710, col: 5, offset: 20714},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 710, col: 5, offset: 20714},
							val:        "select",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 710, col: 14, offset: 20723},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 710, col: 17, offset: 20726},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 710, col: 21, offset: 20730},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 710, col: 24, offset: 20733},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 710, col: 29, offset: 20738},
								name: "Exprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 710, col: 35, offset: 20744},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 710, col: 38, offset: 20747},
							val:        ")",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 710, col: 42, offset: 20751},
							label: "methods",
							expr: &zeroOrOneExpr{
								pos: position{line: 710, col: 50, offset: 20759},
								expr: &ruleRefExpr{
									pos:  position{line: 710, col: 50, offset: 20759},
									name: "Methods",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Methods",
			pos:  position{line: 718, col: 1, offset: 21158},
			expr: &actionExpr{
				pos: position{line: 719, col: 5, offset: 21170},
				run: (*parser).callonMethods1,
				expr: &labeledExpr{
					pos:   position{line: 719, col: 5, offset: 21170},
					label: "methods",
					expr: &oneOrMoreExpr{
						pos: position{line: 719, col: 13, offset: 21178},
						expr: &ruleRefExpr{
							pos:  position{line: 719, col: 13, offset: 21178},
							name: "Method",
						},
					},
				},
			},
		},
		{
			name: "Method",
			pos:  position{line: 721, col: 1, offset: 21211},
			expr: &actionExpr{
				pos: position{line: 722, col: 5, offset: 21222},
				run: (*parser).callonMethod1,
				expr: &seqExpr{
					pos: position{line: 722, col: 5, offset: 21222},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 722, col: 5, offset: 21222},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 722, col: 8, offset: 21225},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 722, col: 12, offset: 21229},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 722, col: 15, offset: 21232},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 722, col: 17, offset: 21234},
								name: "Function",
							},
						},
					},
				},
			},
		},
		{
			name: "Cast",
			pos:  position{line: 724, col: 1, offset: 21262},
			expr: &actionExpr{
				pos: position{line: 725, col: 5, offset: 21271},
				run: (*parser).callonCast1,
				expr: &seqExpr{
					pos: position{line: 725, col: 5, offset: 21271},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 725, col: 5, offset: 21271},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 725, col: 9, offset: 21275},
								name: "CastType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 725, col: 18, offset: 21284},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 725, col: 21, offset: 21287},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 725, col: 25, offset: 21291},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 725, col: 28, offset: 21294},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 725, col: 33, offset: 21299},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 725, col: 38, offset: 21304},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 725, col: 41, offset: 21307},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 729, col: 1, offset: 21404},
			expr: &actionExpr{
				pos: position{line: 730, col: 5, offset: 21417},
				run: (*parser).callonFunction1,
				expr: &seqExpr{
					pos: position{line: 730, col: 5, offset: 21417},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 730, col: 5, offset: 21417},
							expr: &ruleRefExpr{
								pos:  position{line: 730, col: 6, offset: 21418},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 730, col: 16, offset: 21428},
							label: "fn",
							expr: &ruleRefExpr{
								pos:  position{line: 730, col: 19, offset: 21431},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 730, col: 34, offset: 21446},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 730, col: 37, offset: 21449},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 730, col: 41, offset: 21453},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 730, col: 44, offset: 21456},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 730, col: 49, offset: 21461},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 730, col: 63, offset: 21475},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 730, col: 66, offset: 21478},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OptionalExprs",
			pos:  position{line: 734, col: 1, offset: 21574},
			expr: &choiceExpr{
				pos: position{line: 735, col: 5, offset: 21592},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 735, col: 5, offset: 21592},
						name: "Exprs",
					},
					&actionExpr{
						pos: position{line: 736, col: 5, offset: 21602},
						run: (*parser).callonOptionalExprs3,
						expr: &ruleRefExpr{
							pos:  position{line: 736, col: 5, offset: 21602},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 738, col: 1, offset: 21638},
			expr: &actionExpr{
				pos: position{line: 739, col: 5, offset: 21648},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 739, col: 5, offset: 21648},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 739, col: 5, offset: 21648},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 739, col: 11, offset: 21654},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 739, col: 16, offset: 21659},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 739, col: 21, offset: 21664},
								expr: &actionExpr{
									pos: position{line: 739, col: 22, offset: 21665},
									run: (*parser).callonExprs7,
									expr: &seqExpr{
										pos: position{line: 739, col: 22, offset: 21665},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 739, col: 22, offset: 21665},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 739, col: 25, offset: 21668},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 739, col: 29, offset: 21672},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 739, col: 32, offset: 21675},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 739, col: 34, offset: 21677},
													name: "Expr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 743, col: 1, offset: 21786},
			expr: &actionExpr{
				pos: position{line: 743, col: 13, offset: 21798},
				run: (*parser).callonDerefExpr1,
				expr: &seqExpr{
					pos: position{line: 743, col: 13, offset: 21798},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 743, col: 13, offset: 21798},
							expr: &ruleRefExpr{
								pos:  position{line: 743, col: 14, offset: 21799},
								name: "IP6",
							},
						},
						&labeledExpr{
							pos:   position{line: 743, col: 18, offset: 21803},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 743, col: 20, offset: 21805},
								name: "DerefExprPattern",
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExprPattern",
			pos:  position{line: 745, col: 1, offset: 21841},
			expr: &choiceExpr{
				pos: position{line: 746, col: 5, offset: 21862},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 746, col: 5, offset: 21862},
						run: (*parser).callonDerefExprPattern2,
						expr: &seqExpr{
							pos: position{line: 746, col: 5, offset: 21862},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 746, col: 5, offset: 21862},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 746, col: 11, offset: 21868},
										name: "DotID",
									},
								},
								&labeledExpr{
									pos:   position{line: 746, col: 17, offset: 21874},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 746, col: 22, offset: 21879},
										expr: &ruleRefExpr{
											pos:  position{line: 746, col: 23, offset: 21880},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 749, col: 5, offset: 21951},
						run: (*parser).callonDerefExprPattern9,
						expr: &seqExpr{
							pos: position{line: 749, col: 5, offset: 21951},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 749, col: 5, offset: 21951},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 749, col: 11, offset: 21957},
										name: "RootRecord",
									},
								},
								&labeledExpr{
									pos:   position{line: 749, col: 22, offset: 21968},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 749, col: 27, offset: 21973},
										expr: &ruleRefExpr{
											pos:  position{line: 749, col: 28, offset: 21974},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 752, col: 5, offset: 22045},
						run: (*parser).callonDerefExprPattern16,
						expr: &seqExpr{
							pos: position{line: 752, col: 5, offset: 22045},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 752, col: 5, offset: 22045},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 752, col: 11, offset: 22051},
										name: "Identifier",
									},
								},
								&labeledExpr{
									pos:   position{line: 752, col: 22, offset: 22062},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 752, col: 27, offset: 22067},
										expr: &ruleRefExpr{
											pos:  position{line: 752, col: 28, offset: 22068},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 755, col: 5, offset: 22139},
						run: (*parser).callonDerefExprPattern23,
						expr: &litMatcher{
							pos:        position{line: 755, col: 5, offset: 22139},
							val:        ".",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RootRecord",
			pos:  position{line: 759, col: 1, offset: 22208},
			expr: &actionExpr{
				pos: position{line: 759, col: 14, offset: 22221},
				run: (*parser).callonRootRecord1,
				expr: &litMatcher{
					pos:        position{line: 759, col: 14, offset: 22221},
					val:        "this",
					ignoreCase: false,
				},
			},
		},
		{
			name: "DotID",
			pos:  position{line: 761, col: 1, offset: 22283},
			expr: &choiceExpr{
				pos: position{line: 762, col: 5, offset: 22293},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 762, col: 5, offset: 22293},
						run: (*parser).callonDotID2,
						expr: &seqExpr{
							pos: position{line: 762, col: 5, offset: 22293},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 762, col: 5, offset: 22293},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 762, col: 9, offset: 22297},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 762, col: 15, offset: 22303},
										name: "Identifier",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 771, col: 5, offset: 22519},
						run: (*parser).callonDotID7,
						expr: &seqExpr{
							pos: position{line: 771, col: 5, offset: 22519},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 771, col: 5, offset: 22519},
									val:        ".",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 771, col: 9, offset: 22523},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 771, col: 13, offset: 22527},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 771, col: 18, offset: 22532},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 771, col: 23, offset: 22537},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 781, col: 1, offset: 22742},
			expr: &choiceExpr{
				pos: position{line: 782, col: 5, offset: 22752},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 782, col: 5, offset: 22752},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 782, col: 5, offset: 22752},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 782, col: 5, offset: 22752},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 782, col: 9, offset: 22756},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 782, col: 14, offset: 22761},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 782, col: 27, offset: 22774},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 782, col: 30, offset: 22777},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 782, col: 34, offset: 22781},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 782, col: 37, offset: 22784},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 782, col: 40, offset: 22787},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 782, col: 53, offset: 22800},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 788, col: 5, offset: 22971},
						run: (*parser).callonDeref13,
						expr: &seqExpr{
							pos: position{line: 788, col: 5, offset: 22971},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 788, col: 5, offset: 22971},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 788, col: 9, offset: 22975},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 788, col: 12, offset: 22978},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 788, col: 16, offset: 22982},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 788, col: 19, offset: 22985},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 788, col: 22, offset: 22988},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 788, col: 35, offset: 23001},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 794, col: 5, offset: 23172},
						run: (*parser).callonDeref22,
						expr: &seqExpr{
							pos: position{line: 794, col: 5, offset: 23172},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 794, col: 5, offset: 23172},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 794, col: 9, offset: 23176},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 794, col: 14, offset: 23181},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 794, col: 27, offset: 23194},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 794, col: 30, offset: 23197},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 794, col: 34, offset: 23201},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 794, col: 37, offset: 23204},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 800, col: 5, offset: 23377},
						run: (*parser).callonDeref31,
						expr: &seqExpr{
							pos: position{line: 800, col: 5, offset: 23377},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 800, col: 5, offset: 23377},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 800, col: 9, offset: 23381},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 800, col: 14, offset: 23386},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 800, col: 19, offset: 23391},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 801, col: 5, offset: 23440},
						run: (*parser).callonDeref37,
						expr: &seqExpr{
							pos: position{line: 801, col: 5, offset: 23440},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 801, col: 5, offset: 23440},
									val:        ".",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 801, col: 9, offset: 23444},
									expr: &litMatcher{
										pos:        position{line: 801, col: 11, offset: 23446},
										val:        ".",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 801, col: 16, offset: 23451},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 801, col: 19, offset: 23454},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 803, col: 1, offset: 23505},
			expr: &choiceExpr{
				pos: position{line: 804, col: 5, offset: 23517},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 804, col: 5, offset: 23517},
						name: "Literal",
					},
					&ruleRefExpr{
						pos:  position{line: 805, col: 5, offset: 23529},
						name: "Record",
					},
					&ruleRefExpr{
						pos:  position{line: 806, col: 5, offset: 23540},
						name: "Array",
					},
					&ruleRefExpr{
						pos:  position{line: 807, col: 5, offset: 23550},
						name: "Set",
					},
					&ruleRefExpr{
						pos:  position{line: 808, col: 5, offset: 23558},
						name: "Map",
					},
					&actionExpr{
						pos: position{line: 809, col: 5, offset: 23566},
						run: (*parser).callonPrimary7,
						expr: &seqExpr{
							pos: position{line: 809, col: 5, offset: 23566},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 809, col: 5, offset: 23566},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 809, col: 9, offset: 23570},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 809, col: 12, offset: 23573},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 809, col: 17, offset: 23578},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 809, col: 22, offset: 23583},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 809, col: 25, offset: 23586},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Record",
			pos:  position{line: 811, col: 1, offset: 23612},
			expr: &actionExpr{
				pos: position{line: 812, col: 5, offset: 23623},
				run: (*parser).callonRecord1,
				expr: &seqExpr{
					pos: position{line: 812, col: 5, offset: 23623},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 812, col: 5, offset: 23623},
							val:        "{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 812, col: 9, offset: 23627},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 812, col: 12, offset: 23630},
							label: "fields",
							expr: &ruleRefExpr{
								pos:  position{line: 812, col: 19, offset: 23637},
								name: "Fields",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 812, col: 26, offset: 23644},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 812, col: 29, offset: 23647},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Fields",
			pos:  position{line: 816, col: 1, offset: 23740},
			expr: &actionExpr{
				pos: position{line: 817, col: 5, offset: 23751},
				run: (*parser).callonFields1,
				expr: &seqExpr{
					pos: position{line: 817, col: 5, offset: 23751},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 817, col: 5, offset: 23751},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 817, col: 11, offset: 23757},
								name: "Field",
							},
						},
						&labeledExpr{
							pos:   position{line: 817, col: 17, offset: 23763},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 817, col: 22, offset: 23768},
								expr: &ruleRefExpr{
									pos:  position{line: 817, col: 22, offset: 23768},
									name: "FieldTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldTail",
			pos:  position{line: 821, col: 1, offset: 23859},
			expr: &actionExpr{
				pos: position{line: 821, col: 13, offset: 23871},
				run: (*parser).callonFieldTail1,
				expr: &seqExpr{
					pos: position{line: 821, col: 13, offset: 23871},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 821, col: 13, offset: 23871},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 821, col: 16, offset: 23874},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 821, col: 20, offset: 23878},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 821, col: 23, offset: 23881},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 821, col: 25, offset: 23883},
								name: "Field",
							},
						},
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 823, col: 1, offset: 23908},
			expr: &actionExpr{
				pos: position{line: 824, col: 5, offset: 23918},
				run: (*parser).callonField1,
				expr: &seqExpr{
					pos: position{line: 824, col: 5, offset: 23918},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 824, col: 5, offset: 23918},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 824, col: 10, offset: 23923},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 824, col: 20, offset: 23933},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 824, col: 23, offset: 23936},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 824, col: 27, offset: 23940},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 824, col: 30, offset: 23943},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 824, col: 36, offset: 23949},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Array",
			pos:  position{line: 828, col: 1, offset: 24034},
			expr: &actionExpr{
				pos: position{line: 829, col: 5, offset: 24044},
				run: (*parser).callonArray1,
				expr: &seqExpr{
					pos: position{line: 829, col: 5, offset: 24044},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 829, col: 5, offset: 24044},
							val:        "[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 829, col: 9, offset: 24048},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 829, col: 12, offset: 24051},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 829, col: 18, offset: 24057},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 829, col: 32, offset: 24071},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 829, col: 35, offset: 24074},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Set",
			pos:  position{line: 833, col: 1, offset: 24164},
			expr: &actionExpr{
				pos: position{line: 834, col: 5, offset: 24172},
				run: (*parser).callonSet1,
				expr: &seqExpr{
					pos: position{line: 834, col: 5, offset: 24172},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 834, col: 5, offset: 24172},
							val:        "|[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 834, col: 10, offset: 24177},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 834, col: 13, offset: 24180},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 834, col: 19, offset: 24186},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 834, col: 33, offset: 24200},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 834, col: 36, offset: 24203},
							val:        "]|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Map",
			pos:  position{line: 838, col: 1, offset: 24292},
			expr: &actionExpr{
				pos: position{line: 839, col: 5, offset: 24300},
				run: (*parser).callonMap1,
				expr: &seqExpr{
					pos: position{line: 839, col: 5, offset: 24300},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 839, col: 5, offset: 24300},
							val:        "|{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 839, col: 10, offset: 24305},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 839, col: 13, offset: 24308},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 839, col: 19, offset: 24314},
								name: "Entries",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 839, col: 27, offset: 24322},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 839, col: 30, offset: 24325},
							val:        "}|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Entries",
			pos:  position{line: 843, col: 1, offset: 24416},
			expr: &choiceExpr{
				pos: position{line: 844, col: 5, offset: 24428},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 844, col: 5, offset: 24428},
						run: (*parser).callonEntries2,
						expr: &seqExpr{
							pos: position{line: 844, col: 5, offset: 24428},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 844, col: 5, offset: 24428},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 844, col: 11, offset: 24434},
										name: "Entry",
									},
								},
								&labeledExpr{
									pos:   position{line: 844, col: 17, offset: 24440},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 844, col: 22, offset: 24445},
										expr: &ruleRefExpr{
											pos:  position{line: 844, col: 22, offset: 24445},
											name: "EntryTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 847, col: 5, offset: 24539},
						run: (*parser).callonEntries9,
						expr: &ruleRefExpr{
							pos:  position{line: 847, col: 5, offset: 24539},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "EntryTail",
			pos:  position{line: 850, col: 1, offset: 24576},
			expr: &actionExpr{
				pos: position{line: 850, col: 13, offset: 24588},
				run: (*parser).callonEntryTail1,
				expr: &seqExpr{
					pos: position{line: 850, col: 13, offset: 24588},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 850, col: 13, offset: 24588},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 850, col: 16, offset: 24591},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 850, col: 20, offset: 24595},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 850, col: 23, offset: 24598},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 850, col: 25, offset: 24600},
								name: "Entry",
							},
						},
					},
				},
			},
		},
		{
			name: "Entry",
			pos:  position{line: 852, col: 1, offset: 24625},
			expr: &actionExpr{
				pos: position{line: 853, col: 5, offset: 24635},
				run: (*parser).callonEntry1,
				expr: &seqExpr{
					pos: position{line: 853, col: 5, offset: 24635},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 853, col: 5, offset: 24635},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 853, col: 9, offset: 24639},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 853, col: 14, offset: 24644},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 853, col: 17, offset: 24647},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 853, col: 21, offset: 24651},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 853, col: 24, offset: 24654},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 853, col: 30, offset: 24660},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLProc",
			pos:  position{line: 859, col: 1, offset: 24767},
			expr: &actionExpr{
				pos: position{line: 860, col: 5, offset: 24779},
				run: (*parser).callonSQLProc1,
				expr: &seqExpr{
					pos: position{line: 860, col: 5, offset: 24779},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 860, col: 5, offset: 24779},
							label: "selection",
							expr: &ruleRefExpr{
								pos:  position{line: 860, col: 15, offset: 24789},
								name: "SQLSelect",
							},
						},
						&labeledExpr{
							pos:   position{line: 861, col: 5, offset: 24803},
							label: "from",
							expr: &zeroOrOneExpr{
								pos: position{line: 861, col: 10, offset: 24808},
								expr: &ruleRefExpr{
									pos:  position{line: 861, col: 10, offset: 24808},
									name: "SQLFrom",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 862, col: 5, offset: 24821},
							label: "joins",
							expr: &zeroOrOneExpr{
								pos: position{line: 862, col: 11, offset: 24827},
								expr: &ruleRefExpr{
									pos:  position{line: 862, col: 11, offset: 24827},
									name: "SQLJoins",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 863, col: 5, offset: 24841},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 863, col: 11, offset: 24847},
								expr: &ruleRefExpr{
									pos:  position{line: 863, col: 11, offset: 24847},
									name: "SQLWhere",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 864, col: 5, offset: 24861},
							label: "groupby",
							expr: &zeroOrOneExpr{
								pos: position{line: 864, col: 13, offset: 24869},
								expr: &ruleRefExpr{
									pos:  position{line: 864, col: 13, offset: 24869},
									name: "SQLGroupBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 865, col: 5, offset: 24885},
							label: "having",
							expr: &zeroOrOneExpr{
								pos: position{line: 865, col: 12, offset: 24892},
								expr: &ruleRefExpr{
									pos:  position{line: 865, col: 12, offset: 24892},
									name: "SQLHaving",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 866, col: 5, offset: 24907},
							label: "orderby",
							expr: &zeroOrOneExpr{
								pos: position{line: 866, col: 13, offset: 24915},
								expr: &ruleRefExpr{
									pos:  position{line: 866, col: 13, offset: 24915},
									name: "SQLOrderBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 867, col: 5, offset: 24931},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 867, col: 11, offset: 24937},
								name: "SQLLimit",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLSelect",
			pos:  position{line: 891, col: 1, offset: 25304},
			expr: &choiceExpr{
				pos: position{line: 892, col: 5, offset: 25318},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 892, col: 5, offset: 25318},
						run: (*parser).callonSQLSelect2,
						expr: &seqExpr{
							pos: position{line: 892, col: 5, offset: 25318},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 892, col: 5, offset: 25318},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 892, col: 12, offset: 25325},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 892, col: 14, offset: 25327},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 893, col: 5, offset: 25355},
						run: (*parser).callonSQLSelect7,
						expr: &seqExpr{
							pos: position{line: 893, col: 5, offset: 25355},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 893, col: 5, offset: 25355},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 893, col: 12, offset: 25362},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 893, col: 14, offset: 25364},
									label: "assignments",
									expr: &ruleRefExpr{
										pos:  position{line: 893, col: 26, offset: 25376},
										name: "SQLAssignments",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignment",
			pos:  position{line: 895, col: 1, offset: 25420},
			expr: &choiceExpr{
				pos: position{line: 896, col: 5, offset: 25438},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 896, col: 5, offset: 25438},
						run: (*parser).callonSQLAssignment2,
						expr: &seqExpr{
							pos: position{line: 896, col: 5, offset: 25438},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 896, col: 5, offset: 25438},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 896, col: 9, offset: 25442},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 896, col: 14, offset: 25447},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 896, col: 16, offset: 25449},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 896, col: 19, offset: 25452},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 896, col: 21, offset: 25454},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 896, col: 25, offset: 25458},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 897, col: 5, offset: 25552},
						run: (*parser).callonSQLAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 897, col: 5, offset: 25552},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 897, col: 10, offset: 25557},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignments",
			pos:  position{line: 899, col: 1, offset: 25649},
			expr: &actionExpr{
				pos: position{line: 900, col: 5, offset: 25668},
				run: (*parser).callonSQLAssignments1,
				expr: &seqExpr{
					pos: position{line: 900, col: 5, offset: 25668},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 900, col: 5, offset: 25668},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 900, col: 11, offset: 25674},
								name: "SQLAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 900, col: 25, offset: 25688},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 900, col: 30, offset: 25693},
								expr: &actionExpr{
									pos: position{line: 900, col: 31, offset: 25694},
									run: (*parser).callonSQLAssignments7,
									expr: &seqExpr{
										pos: position{line: 900, col: 31, offset: 25694},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 900, col: 31, offset: 25694},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 900, col: 34, offset: 25697},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 900, col: 38, offset: 25701},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 900, col: 41, offset: 25704},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 900, col: 46, offset: 25709},
													name: "SQLAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLFrom",
			pos:  position{line: 904, col: 1, offset: 25830},
			expr: &choiceExpr{
				pos: position{line: 905, col: 5, offset: 25842},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 905, col: 5, offset: 25842},
						run: (*parser).callonSQLFrom2,
						expr: &seqExpr{
							pos: position{line: 905, col: 5, offset: 25842},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 905, col: 5, offset: 25842},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 905, col: 7, offset: 25844},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 905, col: 12, offset: 25849},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 905, col: 14, offset: 25851},
									label: "table",
									expr: &ruleRefExpr{
										pos:  position{line: 905, col: 20, offset: 25857},
										name: "SQLTable",
									},
								},
								&labeledExpr{
									pos:   position{line: 905, col: 29, offset: 25866},
									label: "alias",
									expr: &zeroOrOneExpr{
										pos: position{line: 905, col: 35, offset: 25872},
										expr: &ruleRefExpr{
											pos:  position{line: 905, col: 35, offset: 25872},
											name: "SQLAlias",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 908, col: 5, offset: 25967},
						run: (*parser).callonSQLFrom12,
						expr: &seqExpr{
							pos: position{line: 908, col: 5, offset: 25967},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 908, col: 5, offset: 25967},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 908, col: 7, offset: 25969},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 908, col: 12, offset: 25974},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 908, col: 14, offset: 25976},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAlias",
			pos:  position{line: 910, col: 1, offset: 26001},
			expr: &choiceExpr{
				pos: position{line: 911, col: 5, offset: 26014},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 911, col: 5, offset: 26014},
						run: (*parser).callonSQLAlias2,
						expr: &seqExpr{
							pos: position{line: 911, col: 5, offset: 26014},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 911, col: 5, offset: 26014},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 911, col: 7, offset: 26016},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 911, col: 10, offset: 26019},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 911, col: 12, offset: 26021},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 911, col: 15, offset: 26024},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 912, col: 5, offset: 26052},
						run: (*parser).callonSQLAlias9,
						expr: &seqExpr{
							pos: position{line: 912, col: 5, offset: 26052},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 912, col: 5, offset: 26052},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 912, col: 7, offset: 26054},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 912, col: 10, offset: 26057},
										name: "Lval",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLTable",
			pos:  position{line: 914, col: 1, offset: 26082},
			expr: &ruleRefExpr{
				pos:  position{line: 915, col: 5, offset: 26095},
				name: "Expr",
			},
		},
		{
			name: "SQLJoins",
			pos:  position{line: 917, col: 1, offset: 26101},
			expr: &actionExpr{
				pos: position{line: 918, col: 5, offset: 26114},
				run: (*parser).callonSQLJoins1,
				expr: &seqExpr{
					pos: position{line: 918, col: 5, offset: 26114},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 918, col: 5, offset: 26114},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 918, col: 11, offset: 26120},
								name: "SQLJoin",
							},
						},
						&labeledExpr{
							pos:   position{line: 918, col: 19, offset: 26128},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 918, col: 24, offset: 26133},
								expr: &actionExpr{
									pos: position{line: 918, col: 25, offset: 26134},
									run: (*parser).callonSQLJoins7,
									expr: &labeledExpr{
										pos:   position{line: 918, col: 25, offset: 26134},
										label: "join",
										expr: &ruleRefExpr{
											pos:  position{line: 918, col: 30, offset: 26139},
											name: "SQLJoin",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoin",
			pos:  position{line: 922, col: 1, offset: 26254},
			expr: &actionExpr{
				pos: position{line: 923, col: 5, offset: 26266},
				run: (*parser).callonSQLJoin1,
				expr: &seqExpr{
					pos: position{line: 923, col: 5, offset: 26266},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 923, col: 5, offset: 26266},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 923, col: 11, offset: 26272},
								name: "SQLJoinStyle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 923, col: 24, offset: 26285},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 923, col: 26, offset: 26287},
							name: "JOIN",
						},
						&ruleRefExpr{
							pos:  position{line: 923, col: 31, offset: 26292},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 923, col: 33, offset: 26294},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 923, col: 39, offset: 26300},
								name: "SQLTable",
							},
						},
						&labeledExpr{
							pos:   position{line: 923, col: 48, offset: 26309},
							label: "alias",
							expr: &zeroOrOneExpr{
								pos: position{line: 923, col: 54, offset: 26315},
								expr: &ruleRefExpr{
									pos:  position{line: 923, col: 54, offset: 26315},
									name: "SQLAlias",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 923, col: 64, offset: 26325},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 923, col: 66, offset: 26327},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 923, col: 69, offset: 26330},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 923, col: 71, offset: 26332},
							label: "leftKey",
							expr: &ruleRefExpr{
								pos:  position{line: 923, col: 79, offset: 26340},
								name: "JoinKey",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 923, col: 87, offset: 26348},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 923, col: 90, offset: 26351},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 923, col: 94, offset: 26355},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 923, col: 97, offset: 26358},
							label: "rightKey",
							expr: &ruleRefExpr{
								pos:  position{line: 923, col: 106, offset: 26367},
								name: "JoinKey",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoinStyle",
			pos:  position{line: 942, col: 1, offset: 26602},
			expr: &choiceExpr{
				pos: position{line: 943, col: 5, offset: 26619},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 943, col: 5, offset: 26619},
						run: (*parser).callonSQLJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 943, col: 5, offset: 26619},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 943, col: 5, offset: 26619},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 943, col: 7, offset: 26621},
									label: "style",
									expr: &choiceExpr{
										pos: position{line: 943, col: 14, offset: 26628},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 943, col: 14, offset: 26628},
												name: "LEFT",
											},
											&ruleRefExpr{
												pos:  position{line: 943, col: 21, offset: 26635},
												name: "RIGHT",
											},
											&ruleRefExpr{
												pos:  position{line: 943, col: 29, offset: 26643},
												name: "INNER",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 944, col: 5, offset: 26676},
						run: (*parser).callonSQLJoinStyle10,
						expr: &litMatcher{
							pos:        position{line: 944, col: 5, offset: 26676},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLWhere",
			pos:  position{line: 946, col: 1, offset: 26712},
			expr: &actionExpr{
				pos: position{line: 947, col: 5, offset: 26725},
				run: (*parser).callonSQLWhere1,
				expr: &seqExpr{
					pos: position{line: 947, col: 5, offset: 26725},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 947, col: 5, offset: 26725},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 947, col: 7, offset: 26727},
							name: "WHERE",
						},
						&ruleRefExpr{
							pos:  position{line: 947, col: 13, offset: 26733},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 947, col: 15, offset: 26735},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 947, col: 20, offset: 26740},
								name: "SearchBoolean",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLGroupBy",
			pos:  position{line: 949, col: 1, offset: 26776},
			expr: &actionExpr{
				pos: position{line: 950, col: 5, offset: 26791},
				run: (*parser).callonSQLGroupBy1,
				expr: &seqExpr{
					pos: position{line: 950, col: 5, offset: 26791},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 950, col: 5, offset: 26791},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 950, col: 7, offset: 26793},
							name: "GROUP",
						},
						&ruleRefExpr{
							pos:  position{line: 950, col: 13, offset: 26799},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 950, col: 15, offset: 26801},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 950, col: 18, offset: 26804},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 950, col: 20, offset: 26806},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 950, col: 28, offset: 26814},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLHaving",
			pos:  position{line: 952, col: 1, offset: 26850},
			expr: &actionExpr{
				pos: position{line: 953, col: 5, offset: 26864},
				run: (*parser).callonSQLHaving1,
				expr: &seqExpr{
					pos: position{line: 953, col: 5, offset: 26864},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 953, col: 5, offset: 26864},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 953, col: 7, offset: 26866},
							name: "HAVING",
						},
						&ruleRefExpr{
							pos:  position{line: 953, col: 14, offset: 26873},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 953, col: 16, offset: 26875},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 953, col: 21, offset: 26880},
								name: "SearchBoolean",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrderBy",
			pos:  position{line: 955, col: 1, offset: 26916},
			expr: &actionExpr{
				pos: position{line: 956, col: 5, offset: 26931},
				run: (*parser).callonSQLOrderBy1,
				expr: &seqExpr{
					pos: position{line: 956, col: 5, offset: 26931},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 956, col: 5, offset: 26931},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 956, col: 7, offset: 26933},
							name: "ORDER",
						},
						&ruleRefExpr{
							pos:  position{line: 956, col: 13, offset: 26939},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 956, col: 15, offset: 26941},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 956, col: 18, offset: 26944},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 956, col: 20, offset: 26946},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 956, col: 25, offset: 26951},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 956, col: 31, offset: 26957},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 956, col: 37, offset: 26963},
								name: "SQLOrder",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrder",
			pos:  position{line: 960, col: 1, offset: 27073},
			expr: &choiceExpr{
				pos: position{line: 961, col: 5, offset: 27086},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 961, col: 5, offset: 27086},
						run: (*parser).callonSQLOrder2,
						expr: &seqExpr{
							pos: position{line: 961, col: 5, offset: 27086},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 961, col: 5, offset: 27086},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 961, col: 7, offset: 27088},
									label: "dir",
									expr: &choiceExpr{
										pos: position{line: 961, col: 12, offset: 27093},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 961, col: 12, offset: 27093},
												name: "ASC",
											},
											&ruleRefExpr{
												pos:  position{line: 961, col: 18, offset: 27099},
												name: "DESC",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 962, col: 5, offset: 27129},
						run: (*parser).callonSQLOrder9,
						expr: &litMatcher{
							pos:        position{line: 962, col: 5, offset: 27129},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLLimit",
			pos:  position{line: 964, col: 1, offset: 27155},
			expr: &choiceExpr{
				pos: position{line: 965, col: 5, offset: 27168},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 965, col: 5, offset: 27168},
						run: (*parser).callonSQLLimit2,
						expr: &seqExpr{
							pos: position{line: 965, col: 5, offset: 27168},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 965, col: 5, offset: 27168},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 965, col: 7, offset: 27170},
									name: "LIMIT",
								},
								&ruleRefExpr{
									pos:  position{line: 965, col: 13, offset: 27176},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 965, col: 15, offset: 27178},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 965, col: 21, offset: 27184},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 966, col: 5, offset: 27215},
						run: (*parser).callonSQLLimit9,
						expr: &litMatcher{
							pos:        position{line: 966, col: 5, offset: 27215},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SELECT",
			pos:  position{line: 968, col: 1, offset: 27237},
			expr: &actionExpr{
				pos: position{line: 968, col: 10, offset: 27246},
				run: (*parser).callonSELECT1,
				expr: &litMatcher{
					pos:        position{line: 968, col: 10, offset: 27246},
					val:        "select",
					ignoreCase: true,
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 969, col: 1, offset: 27281},
			expr: &actionExpr{
				pos: position{line: 969, col: 6, offset: 27286},
				run: (*parser).callonAS1,
				expr: &litMatcher{
					pos:        position{line: 969, col: 6, offset: 27286},
					val:        "as",
					ignoreCase: true,
				},
			},
		},
		{
			name: "FROM",
			pos:  position{line: 970, col: 1, offset: 27313},
			expr: &actionExpr{
				pos: position{line: 970, col: 8, offset: 27320},
				run: (*parser).callonFROM1,
				expr: &litMatcher{
					pos:        position{line: 970, col: 8, offset: 27320},
					val:        "from",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JOIN",
			pos:  position{line: 971, col: 1, offset: 27351},
			expr: &actionExpr{
				pos: position{line: 971, col: 8, offset: 27358},
				run: (*parser).callonJOIN1,
				expr: &litMatcher{
					pos:        position{line: 971, col: 8, offset: 27358},
					val:        "join",
					ignoreCase: true,
				},
			},
		},
		{
			name: "WHERE",
			pos:  position{line: 972, col: 1, offset: 27389},
			expr: &actionExpr{
				pos: position{line: 972, col: 9, offset: 27397},
				run: (*parser).callonWHERE1,
				expr: &litMatcher{
					pos:        position{line: 972, col: 9, offset: 27397},
					val:        "where",
					ignoreCase: true,
				},
			},
		},
		{
			name: "GROUP",
			pos:  position{line: 973, col: 1, offset: 27430},
			expr: &actionExpr{
				pos: position{line: 973, col: 9, offset: 27438},
				run: (*parser).callonGROUP1,
				expr: &litMatcher{
					pos:        position{line: 973, col: 9, offset: 27438},
					val:        "group",
					ignoreCase: true,
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 974, col: 1, offset: 27471},
			expr: &ruleRefExpr{
				pos:  position{line: 974, col: 6, offset: 27476},
				name: "ByToken",
			},
		},
		{
			name: "HAVING",
			pos:  position{line: 975, col: 1, offset: 27484},
			expr: &actionExpr{
				pos: position{line: 975, col: 10, offset: 27493},
				run: (*parser).callonHAVING1,
				expr: &litMatcher{
					pos:        position{line: 975, col: 10, offset: 27493},
					val:        "having",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ORDER",
			pos:  position{line: 976, col: 1, offset: 27528},
			expr: &actionExpr{
				pos: position{line: 976, col: 9, offset: 27536},
				run: (*parser).callonORDER1,
				expr: &litMatcher{
					pos:        position{line: 976, col: 9, offset: 27536},
					val:        "order",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ON",
			pos:  position{line: 977, col: 1, offset: 27569},
			expr: &actionExpr{
				pos: position{line: 977, col: 6, offset: 27574},
				run: (*parser).callonON1,
				expr: &litMatcher{
					pos:        position{line: 977, col: 6, offset: 27574},
					val:        "on",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LIMIT",
			pos:  position{line: 978, col: 1, offset: 27601},
			expr: &actionExpr{
				pos: position{line: 978, col: 9, offset: 27609},
				run: (*parser).callonLIMIT1,
				expr: &litMatcher{
					pos:        position{line: 978, col: 9, offset: 27609},
					val:        "limit",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ASC",
			pos:  position{line: 979, col: 1, offset: 27642},
			expr: &actionExpr{
				pos: position{line: 979, col: 7, offset: 27648},
				run: (*parser).callonASC1,
				expr: &litMatcher{
					pos:        position{line: 979, col: 7, offset: 27648},
					val:        "asc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "DESC",
			pos:  position{line: 980, col: 1, offset: 27677},
			expr: &actionExpr{
				pos: position{line: 980, col: 8, offset: 27684},
				run: (*parser).callonDESC1,
				expr: &litMatcher{
					pos:        position{line: 980, col: 8, offset: 27684},
					val:        "desc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LEFT",
			pos:  position{line: 981, col: 1, offset: 27715},
			expr: &actionExpr{
				pos: position{line: 981, col: 8, offset: 27722},
				run: (*parser).callonLEFT1,
				expr: &litMatcher{
					pos:        position{line: 981, col: 8, offset: 27722},
					val:        "left",
					ignoreCase: true,
				},
			},
		},
		{
			name: "RIGHT",
			pos:  position{line: 982, col: 1, offset: 27753},
			expr: &actionExpr{
				pos: position{line: 982, col: 9, offset: 27761},
				run: (*parser).callonRIGHT1,
				expr: &litMatcher{
					pos:        position{line: 982, col: 9, offset: 27761},
					val:        "right",
					ignoreCase: true,
				},
			},
		},
		{
			name: "INNER",
			pos:  position{line: 983, col: 1, offset: 27794},
			expr: &actionExpr{
				pos: position{line: 983, col: 9, offset: 27802},
				run: (*parser).callonINNER1,
				expr: &litMatcher{
					pos:        position{line: 983, col: 9, offset: 27802},
					val:        "inner",
					ignoreCase: true,
				},
			},
		},
		{
			name: "SQLTokenSentinels",
			pos:  position{line: 985, col: 1, offset: 27836},
			expr: &choiceExpr{
				pos: position{line: 986, col: 5, offset: 27858},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 986, col: 5, offset: 27858},
						name: "SELECT",
					},
					&ruleRefExpr{
						pos:  position{line: 986, col: 14, offset: 27867},
						name: "AS",
					},
					&ruleRefExpr{
						pos:  position{line: 986, col: 19, offset: 27872},
						name: "FROM",
					},
					&ruleRefExpr{
						pos:  position{line: 986, col: 27, offset: 27880},
						name: "JOIN",
					},
					&ruleRefExpr{
						pos:  position{line: 986, col: 34, offset: 27887},
						name: "WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 986, col: 42, offset: 27895},
						name: "GROUP",
					},
					&ruleRefExpr{
						pos:  position{line: 986, col: 50, offset: 27903},
						name: "HAVING",
					},
					&ruleRefExpr{
						pos:  position{line: 986, col: 59, offset: 27912},
						name: "ORDER",
					},
					&ruleRefExpr{
						pos:  position{line: 986, col: 67, offset: 27920},
						name: "LIMIT",
					},
					&ruleRefExpr{
						pos:  position{line: 986, col: 75, offset: 27928},
						name: "ON",
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 990, col: 1, offset: 27954},
			expr: &choiceExpr{
				pos: position{line: 991, col: 5, offset: 27966},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 991, col: 5, offset: 27966},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 992, col: 5, offset: 27982},
						name: "StringLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 993, col: 5, offset: 28000},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 994, col: 5, offset: 28018},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 995, col: 5, offset: 28037},
						name: "Duration",
					},
					&ruleRefExpr{
						pos:  position{line: 996, col: 5, offset: 28050},
						name: "Time",
					},
					&ruleRefExpr{
						pos:  position{line: 997, col: 5, offset: 28059},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 998, col: 5, offset: 28076},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 999, col: 5, offset: 28095},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1000, col: 5, offset: 28114},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "StringLiteral",
			pos:  position{line: 1002, col: 1, offset: 28127},
			expr: &actionExpr{
				pos: position{line: 1003, col: 5, offset: 28145},
				run: (*parser).callonStringLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1003, col: 5, offset: 28145},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1003, col: 7, offset: 28147},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 1007, col: 1, offset: 28260},
			expr: &choiceExpr{
				pos: position{line: 1008, col: 5, offset: 28278},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1008, col: 5, offset: 28278},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 1008, col: 5, offset: 28278},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1008, col: 5, offset: 28278},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1008, col: 7, offset: 28280},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 1008, col: 14, offset: 28287},
									expr: &ruleRefExpr{
										pos:  position{line: 1008, col: 15, offset: 28288},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1011, col: 5, offset: 28403},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 1011, col: 5, offset: 28403},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1011, col: 7, offset: 28405},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 1015, col: 1, offset: 28509},
			expr: &choiceExpr{
				pos: position{line: 1016, col: 5, offset: 28528},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1016, col: 5, offset: 28528},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 1016, col: 5, offset: 28528},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1016, col: 5, offset: 28528},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1016, col: 7, offset: 28530},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 1016, col: 11, offset: 28534},
									expr: &ruleRefExpr{
										pos:  position{line: 1016, col: 12, offset: 28535},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1019, col: 5, offset: 28649},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 1019, col: 5, offset: 28649},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1019, col: 7, offset: 28651},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 1023, col: 1, offset: 28750},
			expr: &actionExpr{
				pos: position{line: 1024, col: 5, offset: 28767},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1024, col: 5, offset: 28767},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1024, col: 7, offset: 28769},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 1028, col: 1, offset: 28882},
			expr: &actionExpr{
				pos: position{line: 1029, col: 5, offset: 28901},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1029, col: 5, offset: 28901},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1029, col: 7, offset: 28903},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 1033, col: 1, offset: 29012},
			expr: &choiceExpr{
				pos: position{line: 1034, col: 5, offset: 29031},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1034, col: 5, offset: 29031},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 1034, col: 5, offset: 29031},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1035, col: 5, offset: 29144},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 1035, col: 5, offset: 29144},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 1037, col: 1, offset: 29255},
			expr: &actionExpr{
				pos: position{line: 1038, col: 5, offset: 29271},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 1038, col: 5, offset: 29271},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "TypeLiteral",
			pos:  position{line: 1040, col: 1, offset: 29377},
			expr: &actionExpr{
				pos: position{line: 1041, col: 5, offset: 29393},
				run: (*parser).callonTypeLiteral1,
				expr: &seqExpr{
					pos: position{line: 1041, col: 5, offset: 29393},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1041, col: 5, offset: 29393},
							expr: &seqExpr{
								pos: position{line: 1041, col: 7, offset: 29395},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1041, col: 7, offset: 29395},
										name: "SQLTokenSentinels",
									},
									&ruleRefExpr{
										pos:  position{line: 1041, col: 25, offset: 29413},
										name: "EOT",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1041, col: 30, offset: 29418},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1041, col: 34, offset: 29422},
								name: "TypeExternal",
							},
						},
					},
				},
			},
		},
		{
			name: "CastType",
			pos:  position{line: 1045, col: 1, offset: 29520},
			expr: &choiceExpr{
				pos: position{line: 1046, col: 5, offset: 29533},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1046, col: 5, offset: 29533},
						name: "TypeExternal",
					},
					&ruleRefExpr{
						pos:  position{line: 1047, col: 5, offset: 29550},
						name: "PrimitiveType",
					},
				},
			},
		},
		{
			name: "TypeExternal",
			pos:  position{line: 1049, col: 1, offset: 29565},
			expr: &choiceExpr{
				pos: position{line: 1050, col: 5, offset: 29582},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1050, col: 5, offset: 29582},
						name: "ExplicitType",
					},
					&ruleRefExpr{
						pos:  position{line: 1051, col: 5, offset: 29599},
						name: "ComplexTypeExternal",
					},
					&actionExpr{
						pos: position{line: 1052, col: 5, offset: 29623},
						run: (*parser).callonTypeExternal4,
						expr: &seqExpr{
							pos: position{line: 1052, col: 5, offset: 29623},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1052, col: 5, offset: 29623},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1052, col: 9, offset: 29627},
										name: "PrimitiveTypeExternal",
									},
								},
								&notExpr{
									pos: position{line: 1052, col: 31, offset: 29649},
									expr: &ruleRefExpr{
										pos:  position{line: 1052, col: 32, offset: 29650},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 1054, col: 1, offset: 29686},
			expr: &choiceExpr{
				pos: position{line: 1055, col: 5, offset: 29695},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1055, col: 5, offset: 29695},
						name: "ExplicitType",
					},
					&ruleRefExpr{
						pos:  position{line: 1056, col: 5, offset: 29712},
						name: "AmbiguousType",
					},
					&ruleRefExpr{
						pos:  position{line: 1057, col: 5, offset: 29730},
						name: "ComplexType",
					},
				},
			},
		},
		{
			name: "ExplicitType",
			pos:  position{line: 1059, col: 1, offset: 29743},
			expr: &choiceExpr{
				pos: position{line: 1060, col: 5, offset: 29760},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1060, col: 5, offset: 29760},
						run: (*parser).callonExplicitType2,
						expr: &seqExpr{
							pos: position{line: 1060, col: 5, offset: 29760},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1060, col: 5, offset: 29760},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1060, col: 12, offset: 29767},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1060, col: 15, offset: 29770},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1060, col: 19, offset: 29774},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1060, col: 22, offset: 29777},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1060, col: 26, offset: 29781},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1060, col: 31, offset: 29786},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1060, col: 34, offset: 29789},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1061, col: 5, offset: 29816},
						run: (*parser).callonExplicitType12,
						expr: &seqExpr{
							pos: position{line: 1061, col: 5, offset: 29816},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1061, col: 5, offset: 29816},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1061, col: 12, offset: 29823},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1061, col: 15, offset: 29826},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1061, col: 19, offset: 29830},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1061, col: 22, offset: 29833},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1061, col: 26, offset: 29837},
										name: "TypeUnion",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1061, col: 36, offset: 29847},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1061, col: 39, offset: 29850},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AmbiguousType",
			pos:  position{line: 1063, col: 1, offset: 29875},
			expr: &choiceExpr{
				pos: position{line: 1064, col: 5, offset: 29893},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1064, col: 5, offset: 29893},
						run: (*parser).callonAmbiguousType2,
						expr: &seqExpr{
							pos: position{line: 1064, col: 5, offset: 29893},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1064, col: 5, offset: 29893},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1064, col: 10, offset: 29898},
										name: "PrimitiveType",
									},
								},
								&notExpr{
									pos: position{line: 1064, col: 24, offset: 29912},
									expr: &ruleRefExpr{
										pos:  position{line: 1064, col: 25, offset: 29913},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1065, col: 5, offset: 29953},
						run: (*parser).callonAmbiguousType8,
						expr: &seqExpr{
							pos: position{line: 1065, col: 5, offset: 29953},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1065, col: 5, offset: 29953},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1065, col: 10, offset: 29958},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1065, col: 25, offset: 29973},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1065, col: 28, offset: 29976},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1065, col: 32, offset: 29980},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1065, col: 35, offset: 29983},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1065, col: 39, offset: 29987},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1065, col: 42, offset: 29990},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1065, col: 46, offset: 29994},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1065, col: 51, offset: 29999},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1065, col: 54, offset: 30002},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1068, col: 5, offset: 30103},
						run: (*parser).callonAmbiguousType21,
						expr: &labeledExpr{
							pos:   position{line: 1068, col: 5, offset: 30103},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1068, col: 10, offset: 30108},
								name: "IdentifierName",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1071, col: 5, offset: 30210},
						run: (*parser).callonAmbiguousType24,
						expr: &seqExpr{
							pos: position{line: 1071, col: 5, offset: 30210},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1071, col: 5, offset: 30210},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1071, col: 9, offset: 30214},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1071, col: 12, offset: 30217},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 1071, col: 14, offset: 30219},
										name: "TypeUnion",
									},
								},
								&litMatcher{
									pos:        position{line: 1071, col: 25, offset: 30230},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeUnion",
			pos:  position{line: 1073, col: 1, offset: 30253},
			expr: &actionExpr{
				pos: position{line: 1074, col: 5, offset: 30267},
				run: (*parser).callonTypeUnion1,
				expr: &labeledExpr{
					pos:   position{line: 1074, col: 5, offset: 30267},
					label: "types",
					expr: &ruleRefExpr{
						pos:  position{line: 1074, col: 11, offset: 30273},
						name: "TypeList",
					},
				},
			},
		},
		{
			name: "TypeList",
			pos:  position{line: 1078, col: 1, offset: 30369},
			expr: &actionExpr{
				pos: position{line: 1079, col: 5, offset: 30382},
				run: (*parser).callonTypeList1,
				expr: &seqExpr{
					pos: position{line: 1079, col: 5, offset: 30382},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1079, col: 5, offset: 30382},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1079, col: 11, offset: 30388},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 1079, col: 16, offset: 30393},
							label: "rest",
							expr: &oneOrMoreExpr{
								pos: position{line: 1079, col: 21, offset: 30398},
								expr: &ruleRefExpr{
									pos:  position{line: 1079, col: 21, offset: 30398},
									name: "TypeListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeListTail",
			pos:  position{line: 1083, col: 1, offset: 30492},
			expr: &actionExpr{
				pos: position{line: 1083, col: 16, offset: 30507},
				run: (*parser).callonTypeListTail1,
				expr: &seqExpr{
					pos: position{line: 1083, col: 16, offset: 30507},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1083, col: 16, offset: 30507},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1083, col: 19, offset: 30510},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1083, col: 23, offset: 30514},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1083, col: 26, offset: 30517},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1083, col: 30, offset: 30521},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexType",
			pos:  position{line: 1085, col: 1, offset: 30547},
			expr: &choiceExpr{
				pos: position{line: 1086, col: 5, offset: 30563},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1086, col: 5, offset: 30563},
						run: (*parser).callonComplexType2,
						expr: &seqExpr{
							pos: position{line: 1086, col: 5, offset: 30563},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1086, col: 5, offset: 30563},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1086, col: 9, offset: 30567},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1086, col: 12, offset: 30570},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 1086, col: 19, offset: 30577},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1086, col: 33, offset: 30591},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1086, col: 36, offset: 30594},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1089, col: 5, offset: 30689},
						run: (*parser).callonComplexType10,
						expr: &seqExpr{
							pos: position{line: 1089, col: 5, offset: 30689},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1089, col: 5, offset: 30689},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1089, col: 9, offset: 30693},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1089, col: 12, offset: 30696},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1089, col: 16, offset: 30700},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1089, col: 21, offset: 30705},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1089, col: 24, offset: 30708},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1092, col: 5, offset: 30797},
						run: (*parser).callonComplexType18,
						expr: &seqExpr{
							pos: position{line: 1092, col: 5, offset: 30797},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1092, col: 5, offset: 30797},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1092, col: 10, offset: 30802},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1092, col: 14, offset: 30806},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1092, col: 18, offset: 30810},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1092, col: 23, offset: 30815},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1092, col: 26, offset: 30818},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1095, col: 5, offset: 30906},
						run: (*parser).callonComplexType26,
						expr: &seqExpr{
							pos: position{line: 1095, col: 5, offset: 30906},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1095, col: 5, offset: 30906},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1095, col: 10, offset: 30911},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1095, col: 13, offset: 30914},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 1095, col: 21, offset: 30922},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1095, col: 26, offset: 30927},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1095, col: 29, offset: 30930},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1095, col: 33, offset: 30934},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1095, col: 36, offset: 30937},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 1095, col: 44, offset: 30945},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1095, col: 49, offset: 30950},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1095, col: 52, offset: 30953},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexTypeExternal",
			pos:  position{line: 1099, col: 1, offset: 31067},
			expr: &choiceExpr{
				pos: position{line: 1100, col: 5, offset: 31091},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1100, col: 5, offset: 31091},
						run: (*parser).callonComplexTypeExternal2,
						expr: &seqExpr{
							pos: position{line: 1100, col: 5, offset: 31091},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1100, col: 5, offset: 31091},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1100, col: 9, offset: 31095},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1100, col: 12, offset: 31098},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 1100, col: 19, offset: 31105},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1100, col: 33, offset: 31119},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1100, col: 36, offset: 31122},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1103, col: 5, offset: 31217},
						run: (*parser).callonComplexTypeExternal10,
						expr: &seqExpr{
							pos: position{line: 1103, col: 5, offset: 31217},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1103, col: 5, offset: 31217},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1103, col: 9, offset: 31221},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1103, col: 12, offset: 31224},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1103, col: 16, offset: 31228},
										name: "TypeExternal",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1103, col: 29, offset: 31241},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1103, col: 32, offset: 31244},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1106, col: 5, offset: 31333},
						run: (*parser).callonComplexTypeExternal18,
						expr: &seqExpr{
							pos: position{line: 1106, col: 5, offset: 31333},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1106, col: 5, offset: 31333},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1106, col: 10, offset: 31338},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1106, col: 13, offset: 31341},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1106, col: 17, offset: 31345},
										name: "TypeExternal",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1106, col: 30, offset: 31358},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1106, col: 33, offset: 31361},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1109, col: 5, offset: 31449},
						run: (*parser).callonComplexTypeExternal26,
						expr: &seqExpr{
							pos: position{line: 1109, col: 5, offset: 31449},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1109, col: 5, offset: 31449},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1109, col: 10, offset: 31454},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1109, col: 13, offset: 31457},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 1109, col: 21, offset: 31465},
										name: "TypeExternal",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1109, col: 34, offset: 31478},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1109, col: 37, offset: 31481},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1109, col: 41, offset: 31485},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1109, col: 44, offset: 31488},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 1109, col: 52, offset: 31496},
										name: "TypeExternal",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1109, col: 65, offset: 31509},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1109, col: 68, offset: 31512},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 1113, col: 1, offset: 31626},
			expr: &choiceExpr{
				pos: position{line: 1114, col: 5, offset: 31644},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1114, col: 5, offset: 31644},
						name: "PrimitiveTypeExternal",
					},
					&ruleRefExpr{
						pos:  position{line: 1115, col: 5, offset: 31670},
						name: "PrimitiveTypeInternal",
					},
				},
			},
		},
		{
			name: "PrimitiveTypeExternal",
			pos:  position{line: 1121, col: 1, offset: 31929},
			expr: &actionExpr{
				pos: position{line: 1122, col: 5, offset: 31955},
				run: (*parser).callonPrimitiveTypeExternal1,
				expr: &choiceExpr{
					pos: position{line: 1122, col: 9, offset: 31959},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 1122, col: 9, offset: 31959},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1122, col: 19, offset: 31969},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1122, col: 30, offset: 31980},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1122, col: 41, offset: 31991},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1123, col: 9, offset: 32008},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1123, col: 18, offset: 32017},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1123, col: 28, offset: 32027},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1123, col: 38, offset: 32037},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1124, col: 9, offset: 32053},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1125, col: 9, offset: 32071},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1125, col: 18, offset: 32080},
							val:        "string",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PrimitiveTypeInternal",
			pos:  position{line: 1136, col: 1, offset: 32721},
			expr: &actionExpr{
				pos: position{line: 1137, col: 5, offset: 32747},
				run: (*parser).callonPrimitiveTypeInternal1,
				expr: &choiceExpr{
					pos: position{line: 1137, col: 9, offset: 32751},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 1137, col: 9, offset: 32751},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1137, col: 22, offset: 32764},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1138, col: 9, offset: 32779},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1139, col: 9, offset: 32795},
							val:        "bstring",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1140, col: 9, offset: 32813},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1140, col: 16, offset: 32820},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1141, col: 9, offset: 32834},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1141, col: 18, offset: 32843},
							val:        "error",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1141, col: 28, offset: 32853},
							val:        "null",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldList",
			pos:  position{line: 1145, col: 1, offset: 32969},
			expr: &actionExpr{
				pos: position{line: 1146, col: 5, offset: 32987},
				run: (*parser).callonTypeFieldList1,
				expr: &seqExpr{
					pos: position{line: 1146, col: 5, offset: 32987},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1146, col: 5, offset: 32987},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1146, col: 11, offset: 32993},
								name: "TypeField",
							},
						},
						&labeledExpr{
							pos:   position{line: 1146, col: 21, offset: 33003},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1146, col: 26, offset: 33008},
								expr: &ruleRefExpr{
									pos:  position{line: 1146, col: 26, offset: 33008},
									name: "TypeFieldListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTail",
			pos:  position{line: 1150, col: 1, offset: 33107},
			expr: &actionExpr{
				pos: position{line: 1150, col: 21, offset: 33127},
				run: (*parser).callonTypeFieldListTail1,
				expr: &seqExpr{
					pos: position{line: 1150, col: 21, offset: 33127},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1150, col: 21, offset: 33127},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1150, col: 24, offset: 33130},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1150, col: 28, offset: 33134},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1150, col: 31, offset: 33137},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1150, col: 35, offset: 33141},
								name: "TypeField",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeField",
			pos:  position{line: 1152, col: 1, offset: 33172},
			expr: &actionExpr{
				pos: position{line: 1153, col: 5, offset: 33186},
				run: (*parser).callonTypeField1,
				expr: &seqExpr{
					pos: position{line: 1153, col: 5, offset: 33186},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1153, col: 5, offset: 33186},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1153, col: 10, offset: 33191},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1153, col: 20, offset: 33201},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1153, col: 23, offset: 33204},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1153, col: 27, offset: 33208},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1153, col: 30, offset: 33211},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1153, col: 34, offset: 33215},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListExternal",
			pos:  position{line: 1157, col: 1, offset: 33297},
			expr: &actionExpr{
				pos: position{line: 1158, col: 5, offset: 33323},
				run: (*parser).callonTypeFieldListExternal1,
				expr: &seqExpr{
					pos: position{line: 1158, col: 5, offset: 33323},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1158, col: 5, offset: 33323},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1158, col: 11, offset: 33329},
								name: "TypeField",
							},
						},
						&labeledExpr{
							pos:   position{line: 1158, col: 21, offset: 33339},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1158, col: 26, offset: 33344},
								expr: &ruleRefExpr{
									pos:  position{line: 1158, col: 26, offset: 33344},
									name: "TypeFieldListTailExternal",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTailExternal",
			pos:  position{line: 1162, col: 1, offset: 33451},
			expr: &actionExpr{
				pos: position{line: 1162, col: 29, offset: 33479},
				run: (*parser).callonTypeFieldListTailExternal1,
				expr: &seqExpr{
					pos: position{line: 1162, col: 29, offset: 33479},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1162, col: 29, offset: 33479},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1162, col: 32, offset: 33482},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1162, col: 36, offset: 33486},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1162, col: 39, offset: 33489},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1162, col: 43, offset: 33493},
								name: "TypeFieldExternal",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldExternal",
			pos:  position{line: 1164, col: 1, offset: 33532},
			expr: &actionExpr{
				pos: position{line: 1165, col: 5, offset: 33554},
				run: (*parser).callonTypeFieldExternal1,
				expr: &seqExpr{
					pos: position{line: 1165, col: 5, offset: 33554},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1165, col: 5, offset: 33554},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1165, col: 10, offset: 33559},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1165, col: 20, offset: 33569},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1165, col: 23, offset: 33572},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1165, col: 27, offset: 33576},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1165, col: 30, offset: 33579},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1165, col: 34, offset: 33583},
								name: "TypeExternal",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 1169, col: 1, offset: 33673},
			expr: &choiceExpr{
				pos: position{line: 1170, col: 5, offset: 33687},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1170, col: 5, offset: 33687},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 1171, col: 5, offset: 33706},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "EqualityToken",
			pos:  position{line: 1173, col: 1, offset: 33720},
			expr: &choiceExpr{
				pos: position{line: 1174, col: 5, offset: 33738},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1174, col: 5, offset: 33738},
						name: "EqualityOperator",
					},
					&ruleRefExpr{
						pos:  position{line: 1174, col: 24, offset: 33757},
						name: "RelativeOperator",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 1176, col: 1, offset: 33775},
			expr: &actionExpr{
				pos: position{line: 1176, col: 12, offset: 33786},
				run: (*parser).callonAndToken1,
				expr: &seqExpr{
					pos: position{line: 1176, col: 12, offset: 33786},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1176, col: 12, offset: 33786},
							val:        "and",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1176, col: 19, offset: 33793},
							expr: &ruleRefExpr{
								pos:  position{line: 1176, col: 20, offset: 33794},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 1177, col: 1, offset: 33831},
			expr: &actionExpr{
				pos: position{line: 1177, col: 11, offset: 33841},
				run: (*parser).callonOrToken1,
				expr: &seqExpr{
					pos: position{line: 1177, col: 11, offset: 33841},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1177, col: 11, offset: 33841},
							val:        "or",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1177, col: 17, offset: 33847},
							expr: &ruleRefExpr{
								pos:  position{line: 1177, col: 18, offset: 33848},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 1178, col: 1, offset: 33884},
			expr: &actionExpr{
				pos: position{line: 1178, col: 11, offset: 33894},
				run: (*parser).callonInToken1,
				expr: &seqExpr{
					pos: position{line: 1178, col: 11, offset: 33894},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1178, col: 11, offset: 33894},
							val:        "in",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1178, col: 17, offset: 33900},
							expr: &ruleRefExpr{
								pos:  position{line: 1178, col: 18, offset: 33901},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 1179, col: 1, offset: 33937},
			expr: &actionExpr{
				pos: position{line: 1179, col: 12, offset: 33948},
				run: (*parser).callonNotToken1,
				expr: &seqExpr{
					pos: position{line: 1179, col: 12, offset: 33948},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1179, col: 12, offset: 33948},
							val:        "not",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1179, col: 19, offset: 33955},
							expr: &ruleRefExpr{
								pos:  position{line: 1179, col: 20, offset: 33956},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 1180, col: 1, offset: 33993},
			expr: &actionExpr{
				pos: position{line: 1180, col: 11, offset: 34003},
				run: (*parser).callonByToken1,
				expr: &seqExpr{
					pos: position{line: 1180, col: 11, offset: 34003},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1180, col: 11, offset: 34003},
							val:        "by",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1180, col: 17, offset: 34009},
							expr: &ruleRefExpr{
								pos:  position{line: 1180, col: 18, offset: 34010},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 1182, col: 1, offset: 34047},
			expr: &charClassMatcher{
				pos:        position{line: 1182, col: 19, offset: 34065},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 1184, col: 1, offset: 34077},
			expr: &choiceExpr{
				pos: position{line: 1184, col: 18, offset: 34094},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1184, col: 18, offset: 34094},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 1184, col: 36, offset: 34112},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 1186, col: 1, offset: 34119},
			expr: &actionExpr{
				pos: position{line: 1187, col: 5, offset: 34134},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 1187, col: 5, offset: 34134},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 1187, col: 8, offset: 34137},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 1189, col: 1, offset: 34218},
			expr: &choiceExpr{
				pos: position{line: 1190, col: 5, offset: 34237},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1190, col: 5, offset: 34237},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 1190, col: 5, offset: 34237},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1190, col: 5, offset: 34237},
									expr: &seqExpr{
										pos: position{line: 1190, col: 7, offset: 34239},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1190, col: 7, offset: 34239},
												name: "IDGuard",
											},
											&notExpr{
												pos: position{line: 1190, col: 15, offset: 34247},
												expr: &ruleRefExpr{
													pos:  position{line: 1190, col: 16, offset: 34248},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1190, col: 32, offset: 34264},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1190, col: 48, offset: 34280},
									expr: &ruleRefExpr{
										pos:  position{line: 1190, col: 48, offset: 34280},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1191, col: 5, offset: 34332},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 1191, col: 5, offset: 34332},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1192, col: 5, offset: 34371},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 1192, col: 5, offset: 34371},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1192, col: 5, offset: 34371},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1192, col: 10, offset: 34376},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1192, col: 13, offset: 34379},
										name: "IDGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1194, col: 5, offset: 34470},
						run: (*parser).callonIdentifierName19,
						expr: &litMatcher{
							pos:        position{line: 1194, col: 5, offset: 34470},
							val:        "type",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1195, col: 5, offset: 34512},
						run: (*parser).callonIdentifierName21,
						expr: &seqExpr{
							pos: position{line: 1195, col: 5, offset: 34512},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1195, col: 5, offset: 34512},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1195, col: 8, offset: 34515},
										name: "SQLTokenSentinels",
									},
								},
								&andExpr{
									pos: position{line: 1195, col: 26, offset: 34533},
									expr: &seqExpr{
										pos: position{line: 1195, col: 28, offset: 34535},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1195, col: 28, offset: 34535},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1195, col: 31, offset: 34538},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IDGuard",
			pos:  position{line: 1197, col: 1, offset: 34563},
			expr: &choiceExpr{
				pos: position{line: 1198, col: 5, offset: 34575},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1198, col: 5, offset: 34575},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1199, col: 5, offset: 34594},
						name: "NullLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1200, col: 5, offset: 34610},
						name: "TypeExternal",
					},
					&ruleRefExpr{
						pos:  position{line: 1201, col: 5, offset: 34627},
						name: "SearchGuard",
					},
				},
			},
		},
		{
			name: "Time",
			pos:  position{line: 1203, col: 1, offset: 34640},
			expr: &actionExpr{
				pos: position{line: 1204, col: 5, offset: 34649},
				run: (*parser).callonTime1,
				expr: &seqExpr{
					pos: position{line: 1204, col: 5, offset: 34649},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1204, col: 5, offset: 34649},
							name: "FullDate",
						},
						&litMatcher{
							pos:        position{line: 1204, col: 14, offset: 34658},
							val:        "T",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1204, col: 18, offset: 34662},
							name: "FullTime",
						},
					},
				},
			},
		},
		{
			name: "FullDate",
			pos:  position{line: 1208, col: 1, offset: 34782},
			expr: &seqExpr{
				pos: position{line: 1208, col: 12, offset: 34793},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1208, col: 12, offset: 34793},
						name: "D4",
					},
					&litMatcher{
						pos:        position{line: 1208, col: 15, offset: 34796},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1208, col: 19, offset: 34800},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1208, col: 22, offset: 34803},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1208, col: 26, offset: 34807},
						name: "D2",
					},
				},
			},
		},
		{
			name: "D4",
			pos:  position{line: 1210, col: 1, offset: 34811},
			expr: &seqExpr{
				pos: position{line: 1210, col: 6, offset: 34816},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1210, col: 6, offset: 34816},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1210, col: 11, offset: 34821},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1210, col: 16, offset: 34826},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1210, col: 21, offset: 34831},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "D2",
			pos:  position{line: 1211, col: 1, offset: 34837},
			expr: &seqExpr{
				pos: position{line: 1211, col: 6, offset: 34842},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1211, col: 6, offset: 34842},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1211, col: 11, offset: 34847},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "FullTime",
			pos:  position{line: 1213, col: 1, offset: 34854},
			expr: &seqExpr{
				pos: position{line: 1213, col: 12, offset: 34865},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1213, col: 12, offset: 34865},
						name: "PartialTime",
					},
					&ruleRefExpr{
						pos:  position{line: 1213, col: 24, offset: 34877},
						name: "TimeOffset",
					},
				},
			},
		},
		{
			name: "PartialTime",
			pos:  position{line: 1215, col: 1, offset: 34889},
			expr: &seqExpr{
				pos: position{line: 1215, col: 15, offset: 34903},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1215, col: 15, offset: 34903},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1215, col: 18, offset: 34906},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1215, col: 22, offset: 34910},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1215, col: 25, offset: 34913},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1215, col: 29, offset: 34917},
						name: "D2",
					},
					&zeroOrOneExpr{
						pos: position{line: 1215, col: 32, offset: 34920},
						expr: &seqExpr{
							pos: position{line: 1215, col: 33, offset: 34921},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1215, col: 33, offset: 34921},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1215, col: 37, offset: 34925},
									expr: &charClassMatcher{
										pos:        position{line: 1215, col: 37, offset: 34925},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeOffset",
			pos:  position{line: 1217, col: 1, offset: 34935},
			expr: &choiceExpr{
				pos: position{line: 1218, col: 5, offset: 34950},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1218, col: 5, offset: 34950},
						val:        "Z",
						ignoreCase: false,
					},
					&seqExpr{
						pos: position{line: 1219, col: 5, offset: 34958},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 1219, col: 6, offset: 34959},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1219, col: 6, offset: 34959},
										val:        "+",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 1219, col: 12, offset: 34965},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1219, col: 17, offset: 34970},
								name: "D2",
							},
							&litMatcher{
								pos:        position{line: 1219, col: 20, offset: 34973},
								val:        ":",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 1219, col: 24, offset: 34977},
								name: "D2",
							},
							&zeroOrOneExpr{
								pos: position{line: 1219, col: 27, offset: 34980},
								expr: &seqExpr{
									pos: position{line: 1219, col: 28, offset: 34981},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1219, col: 28, offset: 34981},
											val:        ".",
											ignoreCase: false,
										},
										&oneOrMoreExpr{
											pos: position{line: 1219, col: 32, offset: 34985},
											expr: &charClassMatcher{
												pos:        position{line: 1219, col: 32, offset: 34985},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 1221, col: 1, offset: 34995},
			expr: &actionExpr{
				pos: position{line: 1222, col: 5, offset: 35008},
				run: (*parser).callonDuration1,
				expr: &seqExpr{
					pos: position{line: 1222, col: 5, offset: 35008},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1222, col: 5, offset: 35008},
							expr: &litMatcher{
								pos:        position{line: 1222, col: 5, offset: 35008},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1222, col: 10, offset: 35013},
							expr: &seqExpr{
								pos: position{line: 1222, col: 11, offset: 35014},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1222, col: 11, offset: 35014},
										name: "Decimal",
									},
									&ruleRefExpr{
										pos:  position{line: 1222, col: 19, offset: 35022},
										name: "TimeUnit",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Decimal",
			pos:  position{line: 1226, col: 1, offset: 35148},
			expr: &seqExpr{
				pos: position{line: 1226, col: 11, offset: 35158},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1226, col: 11, offset: 35158},
						name: "UInt",
					},
					&zeroOrOneExpr{
						pos: position{line: 1226, col: 16, offset: 35163},
						expr: &seqExpr{
							pos: position{line: 1226, col: 17, offset: 35164},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1226, col: 17, offset: 35164},
									val:        ".",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1226, col: 21, offset: 35168},
									name: "UInt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeUnit",
			pos:  position{line: 1228, col: 1, offset: 35176},
			expr: &choiceExpr{
				pos: position{line: 1229, col: 5, offset: 35189},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1229, col: 5, offset: 35189},
						val:        "ns",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1230, col: 5, offset: 35199},
						val:        "us",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1231, col: 5, offset: 35209},
						val:        "ms",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1232, col: 5, offset: 35219},
						val:        "s",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1233, col: 5, offset: 35228},
						val:        "m",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1234, col: 5, offset: 35237},
						val:        "h",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1235, col: 5, offset: 35246},
						val:        "d",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1236, col: 5, offset: 35255},
						val:        "w",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1237, col: 5, offset: 35264},
						val:        "y",
						ignoreCase: true,
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 1239, col: 1, offset: 35270},
			expr: &actionExpr{
				pos: position{line: 1240, col: 5, offset: 35277},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 1240, col: 5, offset: 35277},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1240, col: 5, offset: 35277},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1240, col: 10, offset: 35282},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1240, col: 14, offset: 35286},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1240, col: 19, offset: 35291},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1240, col: 23, offset: 35295},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1240, col: 28, offset: 35300},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1240, col: 32, offset: 35304},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 1242, col: 1, offset: 35341},
			expr: &actionExpr{
				pos: position{line: 1243, col: 5, offset: 35349},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 1243, col: 5, offset: 35349},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1243, col: 5, offset: 35349},
							expr: &seqExpr{
								pos: position{line: 1243, col: 8, offset: 35352},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1243, col: 8, offset: 35352},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 1243, col: 12, offset: 35356},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 1243, col: 16, offset: 35360},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 1243, col: 20, offset: 35364},
										expr: &choiceExpr{
											pos: position{line: 1243, col: 22, offset: 35366},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1243, col: 22, offset: 35366},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 1243, col: 33, offset: 35377},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1243, col: 39, offset: 35383},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1243, col: 41, offset: 35385},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 1247, col: 1, offset: 35549},
			expr: &choiceExpr{
				pos: position{line: 1248, col: 5, offset: 35567},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1248, col: 5, offset: 35567},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 1248, col: 5, offset: 35567},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1248, col: 5, offset: 35567},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 1248, col: 7, offset: 35569},
										expr: &ruleRefExpr{
											pos:  position{line: 1248, col: 7, offset: 35569},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1248, col: 17, offset: 35579},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1248, col: 19, offset: 35581},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1251, col: 5, offset: 35645},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 1251, col: 5, offset: 35645},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1251, col: 5, offset: 35645},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1251, col: 7, offset: 35647},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1251, col: 11, offset: 35651},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1251, col: 13, offset: 35653},
										expr: &ruleRefExpr{
											pos:  position{line: 1251, col: 13, offset: 35653},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1251, col: 23, offset: 35663},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1251, col: 28, offset: 35668},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1251, col: 30, offset: 35670},
										expr: &ruleRefExpr{
											pos:  position{line: 1251, col: 30, offset: 35670},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1251, col: 40, offset: 35680},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 1251, col: 42, offset: 35682},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1254, col: 5, offset: 35781},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 1254, col: 5, offset: 35781},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1254, col: 5, offset: 35781},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1254, col: 10, offset: 35786},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1254, col: 12, offset: 35788},
										expr: &ruleRefExpr{
											pos:  position{line: 1254, col: 12, offset: 35788},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1254, col: 22, offset: 35798},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1254, col: 24, offset: 35800},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1257, col: 5, offset: 35871},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 1257, col: 5, offset: 35871},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1257, col: 5, offset: 35871},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1257, col: 7, offset: 35873},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1257, col: 11, offset: 35877},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1257, col: 13, offset: 35879},
										expr: &ruleRefExpr{
											pos:  position{line: 1257, col: 13, offset: 35879},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1257, col: 23, offset: 35889},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1260, col: 5, offset: 35957},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 1260, col: 5, offset: 35957},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 1264, col: 1, offset: 35994},
			expr: &choiceExpr{
				pos: position{line: 1265, col: 5, offset: 36006},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1265, col: 5, offset: 36006},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 1266, col: 5, offset: 36013},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 1268, col: 1, offset: 36018},
			expr: &actionExpr{
				pos: position{line: 1268, col: 12, offset: 36029},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 1268, col: 12, offset: 36029},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1268, col: 12, offset: 36029},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1268, col: 16, offset: 36033},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1268, col: 18, offset: 36035},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 1270, col: 1, offset: 36073},
			expr: &actionExpr{
				pos: position{line: 1270, col: 12, offset: 36084},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 1270, col: 12, offset: 36084},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1270, col: 12, offset: 36084},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1270, col: 14, offset: 36086},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 1270, col: 18, offset: 36090},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 1272, col: 1, offset: 36128},
			expr: &actionExpr{
				pos: position{line: 1273, col: 5, offset: 36139},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 1273, col: 5, offset: 36139},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1273, col: 5, offset: 36139},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1273, col: 7, offset: 36141},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 1273, col: 10, offset: 36144},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1273, col: 14, offset: 36148},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1273, col: 16, offset: 36150},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 1277, col: 1, offset: 36223},
			expr: &actionExpr{
				pos: position{line: 1278, col: 5, offset: 36234},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 1278, col: 5, offset: 36234},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1278, col: 5, offset: 36234},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1278, col: 7, offset: 36236},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 1278, col: 11, offset: 36240},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1278, col: 15, offset: 36244},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1278, col: 17, offset: 36246},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 1282, col: 1, offset: 36309},
			expr: &actionExpr{
				pos: position{line: 1283, col: 4, offset: 36317},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 1283, col: 4, offset: 36317},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 1283, col: 6, offset: 36319},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 1285, col: 1, offset: 36359},
			expr: &choiceExpr{
				pos: position{line: 1286, col: 5, offset: 36373},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1286, col: 5, offset: 36373},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 1287, col: 5, offset: 36388},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 1289, col: 1, offset: 36404},
			expr: &actionExpr{
				pos: position{line: 1289, col: 14, offset: 36417},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1289, col: 14, offset: 36417},
					expr: &charClassMatcher{
						pos:        position{line: 1289, col: 14, offset: 36417},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 1291, col: 1, offset: 36456},
			expr: &actionExpr{
				pos: position{line: 1292, col: 5, offset: 36475},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 1292, col: 5, offset: 36475},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1292, col: 5, offset: 36475},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1292, col: 9, offset: 36479},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 1294, col: 1, offset: 36522},
			expr: &choiceExpr{
				pos: position{line: 1295, col: 5, offset: 36538},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1295, col: 5, offset: 36538},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 1295, col: 5, offset: 36538},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1295, col: 5, offset: 36538},
									expr: &litMatcher{
										pos:        position{line: 1295, col: 5, offset: 36538},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1295, col: 10, offset: 36543},
									expr: &charClassMatcher{
										pos:        position{line: 1295, col: 10, offset: 36543},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 1295, col: 17, offset: 36550},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1295, col: 21, offset: 36554},
									expr: &charClassMatcher{
										pos:        position{line: 1295, col: 21, offset: 36554},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1295, col: 28, offset: 36561},
									expr: &ruleRefExpr{
										pos:  position{line: 1295, col: 28, offset: 36561},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1298, col: 5, offset: 36620},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 1298, col: 5, offset: 36620},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1298, col: 5, offset: 36620},
									expr: &litMatcher{
										pos:        position{line: 1298, col: 5, offset: 36620},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1298, col: 10, offset: 36625},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1298, col: 14, offset: 36629},
									expr: &charClassMatcher{
										pos:        position{line: 1298, col: 14, offset: 36629},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1298, col: 21, offset: 36636},
									expr: &ruleRefExpr{
										pos:  position{line: 1298, col: 21, offset: 36636},
										name: "ExponentPart",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 1302, col: 1, offset: 36692},
			expr: &seqExpr{
				pos: position{line: 1302, col: 16, offset: 36707},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1302, col: 16, offset: 36707},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 1302, col: 21, offset: 36712},
						expr: &charClassMatcher{
							pos:        position{line: 1302, col: 21, offset: 36712},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1302, col: 27, offset: 36718},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 1304, col: 1, offset: 36730},
			expr: &actionExpr{
				pos: position{line: 1304, col: 7, offset: 36736},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1304, col: 7, offset: 36736},
					expr: &ruleRefExpr{
						pos:  position{line: 1304, col: 7, offset: 36736},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 1306, col: 1, offset: 36778},
			expr: &charClassMatcher{
				pos:        position{line: 1306, col: 12, offset: 36789},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1309, col: 1, offset: 36803},
			expr: &choiceExpr{
				pos: position{line: 1310, col: 5, offset: 36820},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1310, col: 5, offset: 36820},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 1310, col: 5, offset: 36820},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1310, col: 5, offset: 36820},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1310, col: 9, offset: 36824},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1310, col: 11, offset: 36826},
										expr: &ruleRefExpr{
											pos:  position{line: 1310, col: 11, offset: 36826},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1310, col: 29, offset: 36844},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1311, col: 5, offset: 36881},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 1311, col: 5, offset: 36881},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1311, col: 5, offset: 36881},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1311, col: 9, offset: 36885},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1311, col: 11, offset: 36887},
										expr: &ruleRefExpr{
											pos:  position{line: 1311, col: 11, offset: 36887},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1311, col: 29, offset: 36905},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 1313, col: 1, offset: 36939},
			expr: &choiceExpr{
				pos: position{line: 1314, col: 5, offset: 36960},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1314, col: 5, offset: 36960},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1314, col: 5, offset: 36960},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1314, col: 5, offset: 36960},
									expr: &choiceExpr{
										pos: position{line: 1314, col: 7, offset: 36962},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1314, col: 7, offset: 36962},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1314, col: 13, offset: 36968},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1314, col: 26, offset: 36981,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1315, col: 5, offset: 37018},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1315, col: 5, offset: 37018},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1315, col: 5, offset: 37018},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1315, col: 10, offset: 37023},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1315, col: 12, offset: 37025},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 1317, col: 1, offset: 37059},
			expr: &actionExpr{
				pos: position{line: 1318, col: 5, offset: 37071},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 1318, col: 5, offset: 37071},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1318, col: 5, offset: 37071},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1318, col: 10, offset: 37076},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1318, col: 23, offset: 37089},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1318, col: 28, offset: 37094},
								expr: &ruleRefExpr{
									pos:  position{line: 1318, col: 28, offset: 37094},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 1320, col: 1, offset: 37156},
			expr: &choiceExpr{
				pos: position{line: 1321, col: 5, offset: 37173},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1321, col: 5, offset: 37173},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1322, col: 5, offset: 37190},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordChars",
			pos:  position{line: 1324, col: 1, offset: 37202},
			expr: &actionExpr{
				pos: position{line: 1324, col: 16, offset: 37217},
				run: (*parser).callonKeyWordChars1,
				expr: &charClassMatcher{
					pos:        position{line: 1324, col: 16, offset: 37217},
					val:        "[a-zA-Z_.:/%#@~]",
					chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
					ranges:     []rune{'a', 'z', 'A', 'Z'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 1326, col: 1, offset: 37266},
			expr: &choiceExpr{
				pos: position{line: 1327, col: 5, offset: 37282},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1327, col: 5, offset: 37282},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 1328, col: 5, offset: 37299},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 1330, col: 1, offset: 37306},
			expr: &actionExpr{
				pos: position{line: 1330, col: 14, offset: 37319},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 1330, col: 14, offset: 37319},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1330, col: 14, offset: 37319},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1330, col: 19, offset: 37324},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1330, col: 22, offset: 37327},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1330, col: 22, offset: 37327},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1330, col: 38, offset: 37343},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Glob",
			pos:  position{line: 1332, col: 1, offset: 37379},
			expr: &actionExpr{
				pos: position{line: 1333, col: 5, offset: 37388},
				run: (*parser).callonGlob1,
				expr: &seqExpr{
					pos: position{line: 1333, col: 5, offset: 37388},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1333, col: 5, offset: 37388},
							expr: &ruleRefExpr{
								pos:  position{line: 1333, col: 6, offset: 37389},
								name: "GlobProperStart",
							},
						},
						&andExpr{
							pos: position{line: 1333, col: 22, offset: 37405},
							expr: &ruleRefExpr{
								pos:  position{line: 1333, col: 23, offset: 37406},
								name: "GlobHasStar",
							},
						},
						&labeledExpr{
							pos:   position{line: 1333, col: 35, offset: 37418},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1333, col: 40, offset: 37423},
								name: "GlobStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1333, col: 50, offset: 37433},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1333, col: 55, offset: 37438},
								expr: &ruleRefExpr{
									pos:  position{line: 1333, col: 55, offset: 37438},
									name: "GlobRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobProperStart",
			pos:  position{line: 1337, col: 1, offset: 37522},
			expr: &seqExpr{
				pos: position{line: 1337, col: 19, offset: 37540},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1337, col: 19, offset: 37540},
						expr: &litMatcher{
							pos:        position{line: 1337, col: 19, offset: 37540},
							val:        "*",
							ignoreCase: false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1337, col: 24, offset: 37545},
						name: "KeyWordStart",
					},
				},
			},
		},
		{
			name: "GlobHasStar",
			pos:  position{line: 1338, col: 1, offset: 37558},
			expr: &seqExpr{
				pos: position{line: 1338, col: 15, offset: 37572},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1338, col: 15, offset: 37572},
						expr: &ruleRefExpr{
							pos:  position{line: 1338, col: 15, offset: 37572},
							name: "KeyWordRest",
						},
					},
					&litMatcher{
						pos:        position{line: 1338, col: 28, offset: 37585},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "GlobStart",
			pos:  position{line: 1340, col: 1, offset: 37590},
			expr: &choiceExpr{
				pos: position{line: 1341, col: 5, offset: 37604},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1341, col: 5, offset: 37604},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1342, col: 5, offset: 37621},
						name: "GlobEsc",
					},
					&actionExpr{
						pos: position{line: 1343, col: 5, offset: 37633},
						run: (*parser).callonGlobStart4,
						expr: &litMatcher{
							pos:        position{line: 1343, col: 5, offset: 37633},
							val:        "*",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GlobRest",
			pos:  position{line: 1345, col: 1, offset: 37657},
			expr: &choiceExpr{
				pos: position{line: 1346, col: 5, offset: 37670},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1346, col: 5, offset: 37670},
						name: "GlobStart",
					},
					&charClassMatcher{
						pos:        position{line: 1347, col: 5, offset: 37684},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "GlobEsc",
			pos:  position{line: 1349, col: 1, offset: 37691},
			expr: &actionExpr{
				pos: position{line: 1349, col: 11, offset: 37701},
				run: (*parser).callonGlobEsc1,
				expr: &seqExpr{
					pos: position{line: 1349, col: 11, offset: 37701},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1349, col: 11, offset: 37701},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1349, col: 16, offset: 37706},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1349, col: 19, offset: 37709},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1349, col: 19, offset: 37709},
										name: "GlobEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1349, col: 32, offset: 37722},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobEscape",
			pos:  position{line: 1351, col: 1, offset: 37758},
			expr: &choiceExpr{
				pos: position{line: 1352, col: 5, offset: 37773},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1352, col: 5, offset: 37773},
						run: (*parser).callonGlobEscape2,
						expr: &litMatcher{
							pos:        position{line: 1352, col: 5, offset: 37773},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1353, col: 5, offset: 37801},
						run: (*parser).callonGlobEscape4,
						expr: &litMatcher{
							pos:        position{line: 1353, col: 5, offset: 37801},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1354, col: 5, offset: 37831},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 1357, col: 1, offset: 37838},
			expr: &choiceExpr{
				pos: position{line: 1358, col: 5, offset: 37859},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1358, col: 5, offset: 37859},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1358, col: 5, offset: 37859},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1358, col: 5, offset: 37859},
									expr: &choiceExpr{
										pos: position{line: 1358, col: 7, offset: 37861},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1358, col: 7, offset: 37861},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1358, col: 13, offset: 37867},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1358, col: 26, offset: 37880,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1359, col: 5, offset: 37917},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1359, col: 5, offset: 37917},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1359, col: 5, offset: 37917},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1359, col: 10, offset: 37922},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1359, col: 12, offset: 37924},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 1361, col: 1, offset: 37958},
			expr: &choiceExpr{
				pos: position{line: 1362, col: 5, offset: 37977},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1362, col: 5, offset: 37977},
						run: (*parser).callonEscapeSequence2,
						expr: &seqExpr{
							pos: position{line: 1362, col: 5, offset: 37977},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1362, col: 5, offset: 37977},
									val:        "x",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1362, col: 9, offset: 37981},
									name: "HexDigit",
								},
								&ruleRefExpr{
									pos:  position{line: 1362, col: 18, offset: 37990},
									name: "HexDigit",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1363, col: 5, offset: 38041},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 1364, col: 5, offset: 38062},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 1366, col: 1, offset: 38077},
			expr: &choiceExpr{
				pos: position{line: 1367, col: 5, offset: 38098},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1367, col: 5, offset: 38098},
						val:        "'",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1368, col: 5, offset: 38106},
						run: (*parser).callonSingleCharEscape3,
						expr: &litMatcher{
							pos:        position{line: 1368, col: 5, offset: 38106},
							val:        "\"",
							ignoreCase: false,
						},
					},
					&litMatcher{
						pos:        position{line: 1369, col: 5, offset: 38146},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1370, col: 5, offset: 38155},
						run: (*parser).callonSingleCharEscape6,
						expr: &litMatcher{
							pos:        position{line: 1370, col: 5, offset: 38155},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1371, col: 5, offset: 38184},
						run: (*parser).callonSingleCharEscape8,
						expr: &litMatcher{
							pos:        position{line: 1371, col: 5, offset: 38184},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1372, col: 5, offset: 38213},
						run: (*parser).callonSingleCharEscape10,
						expr: &litMatcher{
							pos:        position{line: 1372, col: 5, offset: 38213},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1373, col: 5, offset: 38242},
						run: (*parser).callonSingleCharEscape12,
						expr: &litMatcher{
							pos:        position{line: 1373, col: 5, offset: 38242},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1374, col: 5, offset: 38271},
						run: (*parser).callonSingleCharEscape14,
						expr: &litMatcher{
							pos:        position{line: 1374, col: 5, offset: 38271},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1375, col: 5, offset: 38300},
						run: (*parser).callonSingleCharEscape16,
						expr: &litMatcher{
							pos:        position{line: 1375, col: 5, offset: 38300},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 1377, col: 1, offset: 38326},
			expr: &choiceExpr{
				pos: position{line: 1378, col: 5, offset: 38344},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1378, col: 5, offset: 38344},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 1378, col: 5, offset: 38344},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1379, col: 5, offset: 38372},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 1379, col: 5, offset: 38372},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1380, col: 5, offset: 38400},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 1382, col: 1, offset: 38406},
			expr: &choiceExpr{
				pos: position{line: 1383, col: 5, offset: 38424},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1383, col: 5, offset: 38424},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 1383, col: 5, offset: 38424},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1383, col: 5, offset: 38424},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1383, col: 9, offset: 38428},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1383, col: 16, offset: 38435},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1383, col: 16, offset: 38435},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1383, col: 25, offset: 38444},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1383, col: 34, offset: 38453},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1383, col: 43, offset: 38462},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1386, col: 5, offset: 38525},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 1386, col: 5, offset: 38525},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1386, col: 5, offset: 38525},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1386, col: 9, offset: 38529},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1386, col: 13, offset: 38533},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1386, col: 20, offset: 38540},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1386, col: 20, offset: 38540},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 1386, col: 29, offset: 38549},
												expr: &ruleRefExpr{
													pos:  position{line: 1386, col: 29, offset: 38549},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1386, col: 39, offset: 38559},
												expr: &ruleRefExpr{
													pos:  position{line: 1386, col: 39, offset: 38559},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1386, col: 49, offset: 38569},
												expr: &ruleRefExpr{
													pos:  position{line: 1386, col: 49, offset: 38569},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1386, col: 59, offset: 38579},
												expr: &ruleRefExpr{
													pos:  position{line: 1386, col: 59, offset: 38579},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1386, col: 69, offset: 38589},
												expr: &ruleRefExpr{
													pos:  position{line: 1386, col: 69, offset: 38589},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1386, col: 80, offset: 38600},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 1390, col: 1, offset: 38654},
			expr: &actionExpr{
				pos: position{line: 1391, col: 5, offset: 38665},
				run: (*parser).callonRegexp1,
				expr: &seqExpr{
					pos: position{line: 1391, col: 5, offset: 38665},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1391, col: 5, offset: 38665},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1391, col: 9, offset: 38669},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1391, col: 14, offset: 38674},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 1391, col: 25, offset: 38685},
							val:        "/",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1391, col: 29, offset: 38689},
							expr: &ruleRefExpr{
								pos:  position{line: 1391, col: 30, offset: 38690},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 1393, col: 1, offset: 38725},
			expr: &actionExpr{
				pos: position{line: 1394, col: 5, offset: 38740},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1394, col: 5, offset: 38740},
					expr: &choiceExpr{
						pos: position{line: 1394, col: 6, offset: 38741},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 1394, col: 6, offset: 38741},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&litMatcher{
								pos:        position{line: 1394, col: 13, offset: 38748},
								val:        "\\/",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 1396, col: 1, offset: 38788},
			expr: &charClassMatcher{
				pos:        position{line: 1397, col: 5, offset: 38804},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 1399, col: 1, offset: 38819},
			expr: &oneOrMoreExpr{
				pos: position{line: 1399, col: 6, offset: 38824},
				expr: &ruleRefExpr{
					pos:  position{line: 1399, col: 6, offset: 38824},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1401, col: 1, offset: 38835},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1401, col: 6, offset: 38840},
				expr: &ruleRefExpr{
					pos:  position{line: 1401, col: 6, offset: 38840},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 1403, col: 1, offset: 38851},
			expr: &choiceExpr{
				pos: position{line: 1404, col: 5, offset: 38864},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1404, col: 5, offset: 38864},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 1405, col: 5, offset: 38879},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 1406, col: 5, offset: 38898},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 1408, col: 1, offset: 38907},
			expr: &anyMatcher{
				line: 1409, col: 5, offset: 38927,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 1411, col: 1, offset: 38930},
			expr: &choiceExpr{
				pos: position{line: 1412, col: 5, offset: 38958},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1412, col: 5, offset: 38958},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1413, col: 5, offset: 38967},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1414, col: 5, offset: 38976},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1415, col: 5, offset: 38985},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1416, col: 5, offset: 38993},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1417, col: 5, offset: 39006},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 1419, col: 1, offset: 39016},
			expr: &charClassMatcher{
				pos:        position{line: 1420, col: 5, offset: 39035},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 1426, col: 1, offset: 39365},
			expr: &ruleRefExpr{
				pos:  position{line: 1429, col: 5, offset: 39436},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1431, col: 1, offset: 39455},
			expr: &seqExpr{
				pos: position{line: 1432, col: 5, offset: 39476},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1432, col: 5, offset: 39476},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1432, col: 10, offset: 39481},
						expr: &seqExpr{
							pos: position{line: 1432, col: 11, offset: 39482},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1432, col: 11, offset: 39482},
									expr: &litMatcher{
										pos:        position{line: 1432, col: 12, offset: 39483},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1432, col: 17, offset: 39488},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1432, col: 35, offset: 39506},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1434, col: 1, offset: 39512},
			expr: &seqExpr{
				pos: position{line: 1435, col: 5, offset: 39534},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1435, col: 5, offset: 39534},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1435, col: 10, offset: 39539},
						expr: &seqExpr{
							pos: position{line: 1435, col: 11, offset: 39540},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1435, col: 11, offset: 39540},
									expr: &ruleRefExpr{
										pos:  position{line: 1435, col: 12, offset: 39541},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1435, col: 27, offset: 39556},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1437, col: 1, offset: 39575},
			expr: &seqExpr{
				pos: position{line: 1437, col: 7, offset: 39581},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1437, col: 7, offset: 39581},
						expr: &ruleRefExpr{
							pos:  position{line: 1437, col: 7, offset: 39581},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1437, col: 19, offset: 39593},
						name: "LineTerminator",
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 1439, col: 1, offset: 39609},
			expr: &choiceExpr{
				pos: position{line: 1439, col: 7, offset: 39615},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1439, col: 7, offset: 39615},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 1439, col: 11, offset: 39619},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1441, col: 1, offset: 39624},
			expr: &notExpr{
				pos: position{line: 1441, col: 7, offset: 39630},
				expr: &anyMatcher{
					line: 1441, col: 8, offset: 39631,
				},
			},
		},
	},
}

func (c *current) onstart1(ast interface{}) (interface{}, error) {
	return ast, nil
}

func (p *parser) callonstart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart1(stack["ast"])
}

func (c *current) onZ2(decls, first, rest interface{}) (interface{}, error) {
	var procs = decls.([]interface{})
	procs = append(procs, first)
	for _, p := range rest.([]interface{}) {
		procs = append(procs, p)
	}
	return map[string]interface{}{"kind": "Sequential", "procs": procs}, nil

}

func (p *parser) callonZ2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onZ2(stack["decls"], stack["first"], stack["rest"])
}

func (c *current) onDecl1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonDecl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDecl1(stack["v"])
}

func (c *current) onAnyDecl2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Const", "name": id, "expr": expr}, nil

}

func (p *parser) callonAnyDecl2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyDecl2(stack["id"], stack["expr"])
}

func (c *current) onAnyDecl18(id, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeProc", "name": id, "type": typ}, nil

}

func (p *parser) callonAnyDecl18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyDecl18(stack["id"], stack["typ"])
}

func (c *current) onSequential2(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonSequential2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential2(stack["first"], stack["rest"])
}

func (c *current) onSequential9(op interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": []interface{}{op}}, nil

}

func (p *parser) callonSequential9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential9(stack["op"])
}

func (c *current) onSequentialTail1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonSequentialTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequentialTail1(stack["p"])
}

func (c *current) onParallel1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonParallel1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallel1(stack["s"])
}

func (c *current) onFromTrunk1(source, seq interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Trunk", "source": source, "seq": seq}, nil

}

func (p *parser) callonFromTrunk1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromTrunk1(stack["source"], stack["seq"])
}

func (c *current) onFromTrunkSeq1(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonFromTrunkSeq1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromTrunkSeq1(stack["seq"])
}

func (c *current) onOperation2(procArray interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Parallel", "procs": procArray}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["procArray"])
}

func (c *current) onOperation12(expr, cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": expr, "cases": cases}, nil

}

func (p *parser) callonOperation12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation12(stack["expr"], stack["cases"])
}

func (c *current) onOperation25(cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": nil, "cases": cases}, nil

}

func (p *parser) callonOperation25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation25(stack["cases"])
}

func (c *current) onOperation35(trunks interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": trunks}, nil

}

func (p *parser) callonOperation35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation35(stack["trunks"])
}

func (c *current) onOperation46(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation46(stack["a"])
}

func (c *current) onOperation52(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation52(stack["a"])
}

func (c *current) onOperation58(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Filter", "expr": expr}, nil

}

func (p *parser) callonOperation58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation58(stack["expr"])
}

func (c *current) onSwitchLiteralClause1(expr, proc interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": expr, "proc": proc}, nil

}

func (p *parser) callonSwitchLiteralClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchLiteralClause1(stack["expr"], stack["proc"])
}

func (c *current) onSwitchSearchBooleanClause1(expr, proc interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": expr, "proc": proc}, nil

}

func (p *parser) callonSwitchSearchBooleanClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchSearchBooleanClause1(stack["expr"], stack["proc"])
}

func (c *current) onDefaultToken1() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonDefaultToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultToken1()
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor13(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor13(stack["expr"])
}

func (c *current) onTBD2(compareOp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": "or",

		"args": []interface{}{

			map[string]interface{}{"kind": "SelectExpr",

				"selectors": []interface{}{map[string]interface{}{"kind": "Root"}},

				"methods": []interface{}{

					map[string]interface{}{"kind": "Call", "name": "map",

						"args": []interface{}{map[string]interface{}{"kind": "BinaryExpr", "op": "=",

							"lhs": map[string]interface{}{"kind": "ID", "name": "$"},

							"rhs": v}}}}}}}, nil

}

func (p *parser) callonTBD2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTBD2(stack["compareOp"], stack["v"])
}

func (c *current) onTBD11(match interface{}) (interface{}, error) {
	return match, nil
}

func (p *parser) callonTBD11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTBD11(stack["match"])
}

func (c *current) onTBD17(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": "or",

		"args": []interface{}{

			map[string]interface{}{"kind": "SelectExpr",

				"selectors": []interface{}{map[string]interface{}{"kind": "Root"}},

				"methods": []interface{}{

					map[string]interface{}{"kind": "Call", "name": "map",

						"args": []interface{}{map[string]interface{}{"kind": "BinaryExpr", "op": "in",

							"rhs": map[string]interface{}{"kind": "ID", "name": "$"},

							"lhs": v}}}}}}}, nil

}

func (p *parser) callonTBD17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTBD17(stack["v"])
}

func (c *current) onSearchExpr2(search interface{}) (interface{}, error) {
	return search, nil
}

func (p *parser) callonSearchExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr2(stack["search"])
}

func (c *current) onSearchExpr10(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Search", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonSearchExpr10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr10(stack["v"])
}

func (c *current) onSearchExpr20() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil

}

func (p *parser) callonSearchExpr20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr20()
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onPatternSearch1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RegexpSearch", "pattern": pattern}, nil

}

func (p *parser) callonPatternSearch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternSearch1(stack["pattern"])
}

func (c *current) onPatternMatch1(f, pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RegexpMatch", "pattern": pattern, "expr": f}, nil

}

func (p *parser) callonPatternMatch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternMatch1(stack["f"], stack["pattern"])
}

func (c *current) onAggregation2(every, keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Summarize", "keys": keys, "aggs": nil, "duration": every, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["every"], stack["keys"], stack["limit"])
}

func (c *current) onAggregation13(every, aggs, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"kind": "Summarize", "keys": nil, "aggs": aggs, "duration": every, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation13(stack["every"], stack["aggs"], stack["keys"], stack["limit"])
}

func (c *current) onEveryDur1(dur interface{}) (interface{}, error) {
	return dur, nil
}

func (p *parser) callonEveryDur1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEveryDur1(stack["dur"])
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAggAssignment2(lval, agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lval, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment2(stack["lval"], stack["agg"])
}

func (c *current) onAggAssignment11(agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment11(stack["agg"])
}

func (c *current) onAgg1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"kind": "Agg", "name": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonAgg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAgg1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onAggAssignments1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonAggAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSortProc8(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc8(stack["l"])
}

func (c *current) onSortProc1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var proc = map[string]interface{}{"kind": "Sort", "args": list, "order": "asc", "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		proc["order"] = "desc"
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			proc["nullsfirst"] = true
		}
	}
	return proc, nil

}

func (p *parser) callonSortProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopProc6(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopProc6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc6(stack["n"])
}

func (c *current) onTopProc18(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopProc18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc18(stack["f"])
}

func (c *current) onTopProc1(limit, flush, fields interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Top", "limit": 0, "args": nil, "flush": false}
	if limit != nil {
		proc["limit"] = limit
	}
	if fields != nil {
		proc["args"] = fields
	}
	if flush != nil {
		proc["flush"] = true
	}
	return proc, nil

}

func (p *parser) callonTopProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cut", "args": args}, nil

}

func (p *parser) callonCutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutProc1(stack["args"])
}

func (c *current) onPickProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pick", "args": args}, nil

}

func (p *parser) callonPickProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPickProc1(stack["args"])
}

func (c *current) onDropProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Drop", "args": args}, nil

}

func (p *parser) callonDropProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropProc1(stack["args"])
}

func (c *current) onHeadProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": count}, nil
}

func (p *parser) callonHeadProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc2(stack["count"])
}

func (c *current) onHeadProc8() (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": 1}, nil
}

func (p *parser) callonHeadProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc8()
}

func (c *current) onTailProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": count}, nil
}

func (p *parser) callonTailProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc2(stack["count"])
}

func (c *current) onTailProc8() (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": 1}, nil
}

func (p *parser) callonTailProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc8()
}

func (c *current) onFilterProc1(op interface{}) (interface{}, error) {
	return op, nil

}

func (p *parser) callonFilterProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilterProc1(stack["op"])
}

func (c *current) onFilter1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Filter", "expr": expr}, nil

}

func (p *parser) callonFilter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilter1(stack["expr"])
}

func (c *current) onUniqProc2() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": true}, nil

}

func (p *parser) callonUniqProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc2()
}

func (c *current) onUniqProc7() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": false}, nil

}

func (p *parser) callonUniqProc7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc7()
}

func (c *current) onPutProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Put", "args": args}, nil

}

func (p *parser) callonPutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutProc1(stack["args"])
}

func (c *current) onRenameProc9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameProc9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc9(stack["cl"])
}

func (c *current) onRenameProc1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Rename", "args": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc1(stack["first"], stack["rest"])
}

func (c *current) onFuseProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Fuse"}, nil

}

func (p *parser) callonFuseProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseProc1()
}

func (c *current) onShapeProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Shape"}, nil

}

func (p *parser) callonShapeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShapeProc1()
}

func (c *current) onJoinProc2(style, leftKey, rightKey, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Join", "style": style, "left_key": leftKey, "right_key": rightKey, "args": nil}
	if columns != nil {
		proc["args"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc2(stack["style"], stack["leftKey"], stack["rightKey"], stack["columns"])
}

func (c *current) onJoinProc22(style, key, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Join", "style": style, "left_key": key, "right_key": key, "args": nil}
	if columns != nil {
		proc["args"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc22(stack["style"], stack["key"], stack["columns"])
}

func (c *current) onJoinStyle2() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle2()
}

func (c *current) onJoinStyle6() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonJoinStyle6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle6()
}

func (c *current) onJoinStyle10() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle10()
}

func (c *current) onJoinStyle14() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle14()
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onSampleProc1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": []interface{}{

		map[string]interface{}{"kind": "Summarize",

			"keys": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "shape"},

				"rhs": map[string]interface{}{"kind": "Call", "name": "typeof",

					"args": []interface{}{e}}}},

			"aggs": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "sample"},

				"rhs": map[string]interface{}{"kind": "Agg",

					"name": "any",

					"expr": e,

					"where": nil}}},

			"duration": nil, "limit": 0},

		map[string]interface{}{"kind": "Cut",

			"args": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": nil,

				"rhs": map[string]interface{}{"kind": "ID", "name": "sample"}}}}}}, nil

}

func (p *parser) callonSampleProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleProc1(stack["e"])
}

func (c *current) onOpExprs7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonOpExprs7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpExprs7(stack["expr"])
}

func (c *current) onOpExprs1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExprs", "exprs": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonOpExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpExprs1(stack["first"], stack["rest"])
}

func (c *current) onSampleExpr2(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonSampleExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr2(stack["lval"])
}

func (c *current) onSampleExpr7() (interface{}, error) {
	return map[string]interface{}{"kind": "Root"}, nil
}

func (p *parser) callonSampleExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr7()
}

func (c *current) onFromProc1(source interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": []interface{}{map[string]interface{}{"kind": "Trunk", "source": source}}}, nil

}

func (p *parser) callonFromProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromProc1(stack["source"])
}

func (c *current) onFileProc1(path, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "File", "path": path, "format": format, "layout": layout}, nil

}

func (p *parser) callonFileProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileProc1(stack["path"], stack["format"], stack["layout"])
}

func (c *current) onPoolProc1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonPoolProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolProc1(stack["body"])
}

func (c *current) onPoolBody1(spec, at, over, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pool", "spec": spec, "at": at, "range": over, "scan_order": order}, nil

}

func (p *parser) callonPoolBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBody1(stack["spec"], stack["at"], stack["over"], stack["order"])
}

func (c *current) onHTTPProc1(url, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "HTTP", "url": url, "format": format, "layout": layout}, nil

}

func (p *parser) callonHTTPProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHTTPProc1(stack["url"], stack["format"], stack["layout"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onPath2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonPath2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath2(stack["v"])
}

func (c *current) onPath5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPath5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath5()
}

func (c *current) onPoolAt1(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonPoolAt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolAt1(stack["id"])
}

func (c *current) onKSUID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKSUID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKSUID1()
}

func (c *current) onPoolRange1(lower, upper interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Range", "lower": lower, "upper": upper}, nil

}

func (p *parser) callonPoolRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolRange1(stack["lower"], stack["upper"])
}

func (c *current) onPoolSpec2(pool, branch, meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": pool, "branch": branch, "meta": meta}, nil

}

func (p *parser) callonPoolSpec2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec2(stack["pool"], stack["branch"], stack["meta"])
}

func (c *current) onPoolSpec12(meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": nil, "branch": nil, "meta": meta}, nil

}

func (p *parser) callonPoolSpec12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec12(stack["meta"])
}

func (c *current) onPoolBranch1(branch interface{}) (interface{}, error) {
	return branch, nil
}

func (p *parser) callonPoolBranch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBranch1(stack["branch"])
}

func (c *current) onPoolMeta1(meta interface{}) (interface{}, error) {
	return meta, nil
}

func (p *parser) callonPoolMeta1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolMeta1(stack["meta"])
}

func (c *current) onPoolName2(name interface{}) (interface{}, error) {
	return name, nil
}

func (p *parser) callonPoolName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName2(stack["name"])
}

func (c *current) onPoolName5(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonPoolName5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName5(stack["id"])
}

func (c *current) onPoolName8(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonPoolName8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName8(stack["s"])
}

func (c *current) onLayoutArg1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Layout", "keys": keys, "order": order}, nil

}

func (p *parser) callonLayoutArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLayoutArg1(stack["keys"], stack["order"])
}

func (c *current) onFormatArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonFormatArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArg1(stack["val"])
}

func (c *current) onOrderSuffix2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix2()
}

func (c *current) onOrderSuffix4() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderSuffix4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix4()
}

func (c *current) onOrderSuffix6() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix6()
}

func (c *current) onOrderArg2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg2()
}

func (c *current) onOrderArg8() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderArg8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg8()
}

func (c *current) onPassProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Pass"}, nil

}

func (p *parser) callonPassProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassProc1()
}

func (c *current) onExplodeProc1(args, typ, as interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Explode", "args": args, "as": as, "type": typ}, nil

}

func (p *parser) callonExplodeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplodeProc1(stack["args"], stack["typ"], stack["as"])
}

func (c *current) onTypeArg1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeArg1(stack["typ"])
}

func (c *current) onAsArg1(lhs interface{}) (interface{}, error) {
	return lhs, nil
}

func (p *parser) callonAsArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsArg1(stack["lhs"])
}

func (c *current) onLvals7(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonLvals7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals7(stack["lval"])
}

func (c *current) onLvals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLvals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals1(stack["first"], stack["rest"])
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr2(condition, thenClause, elseClause interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Conditional", "cond": condition, "then": thenClause, "else": elseClause}, nil

}

func (p *parser) callonConditionalExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr2(stack["condition"], stack["thenClause"], stack["elseClause"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onEqualityCompareExpr9(comp, expr interface{}) (interface{}, error) {
	return []interface{}{comp, expr}, nil
}

func (p *parser) callonEqualityCompareExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr9(stack["comp"], stack["expr"])
}

func (c *current) onEqualityCompareExpr3(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonEqualityCompareExpr3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr3(stack["first"], stack["rest"])
}

func (c *current) onEqualityOperator2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonEqualityOperator2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator2()
}

func (c *current) onEqualityOperator4() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityOperator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator4()
}

func (c *current) onEqualityComparator3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityComparator3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityComparator3()
}

func (c *current) onRelativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonRelativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onRelativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonRelativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onRelativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeOperator1()
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onFuncExpr4(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonFuncExpr4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr4(stack["typ"])
}

func (c *current) onFuncExpr12(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr12(stack["first"], stack["rest"])
}

func (c *current) onFuncExpr19(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr19(stack["first"], stack["rest"])
}

func (c *current) onMatchExpr1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonMatchExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchExpr1(stack["expr"])
}

func (c *current) onSelectExpr1(args, methods interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SelectExpr", "selectors": args, "methods": methods}, nil

}

func (p *parser) callonSelectExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectExpr1(stack["args"], stack["methods"])
}

func (c *current) onMethods1(methods interface{}) (interface{}, error) {
	return methods, nil
}

func (p *parser) callonMethods1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethods1(stack["methods"])
}

func (c *current) onMethod1(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonMethod1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethod1(stack["f"])
}

func (c *current) onCast1(typ, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": expr, "type": typ}, nil

}

func (p *parser) callonCast1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCast1(stack["typ"], stack["expr"])
}

func (c *current) onFunction1(fn, args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": fn, "args": args}, nil

}

func (p *parser) callonFunction1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction1(stack["fn"], stack["args"])
}

func (c *current) onOptionalExprs3() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonOptionalExprs3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalExprs3()
}

func (c *current) onExprs7(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonExprs7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs7(stack["e"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonDerefExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr1(stack["e"])
}

func (c *current) onDerefExprPattern2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExprPattern2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExprPattern2(stack["first"], stack["rest"])
}

func (c *current) onDerefExprPattern9(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExprPattern9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExprPattern9(stack["first"], stack["rest"])
}

func (c *current) onDerefExprPattern16(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExprPattern16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExprPattern16(stack["first"], stack["rest"])
}

func (c *current) onDerefExprPattern23() (interface{}, error) {
	return map[string]interface{}{"kind": "Root"}, nil

}

func (p *parser) callonDerefExprPattern23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExprPattern23()
}

func (c *current) onRootRecord1() (interface{}, error) {
	return map[string]interface{}{"kind": "Root"}, nil
}

func (p *parser) callonRootRecord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRootRecord1()
}

func (c *current) onDotID2(field interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": ".",

		"lhs": map[string]interface{}{"kind": "Root"},

		"rhs": field}, nil

}

func (p *parser) callonDotID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotID2(stack["field"])
}

func (c *current) onDotID7(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": "[",

		"lhs": map[string]interface{}{"kind": "Root"},

		"rhs": expr}, nil

}

func (p *parser) callonDotID7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotID7(stack["expr"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref13(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": nil, "rhs": to}}, nil

}

func (p *parser) callonDeref13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref13(stack["to"])
}

func (c *current) onDeref22(from interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": nil}}, nil

}

func (p *parser) callonDeref22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref22(stack["from"])
}

func (c *current) onDeref31(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref31(stack["expr"])
}

func (c *current) onDeref37(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref37(stack["id"])
}

func (c *current) onPrimary7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary7(stack["expr"])
}

func (c *current) onRecord1(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RecordExpr", "fields": fields}, nil

}

func (p *parser) callonRecord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecord1(stack["fields"])
}

func (c *current) onFields1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFields1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFields1(stack["first"], stack["rest"])
}

func (c *current) onFieldTail1(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonFieldTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldTail1(stack["f"])
}

func (c *current) onField1(name, value interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "value": value}, nil

}

func (p *parser) callonField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField1(stack["name"], stack["value"])
}

func (c *current) onArray1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ArrayExpr", "exprs": exprs}, nil

}

func (p *parser) callonArray1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArray1(stack["exprs"])
}

func (c *current) onSet1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SetExpr", "exprs": exprs}, nil

}

func (p *parser) callonSet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSet1(stack["exprs"])
}

func (c *current) onMap1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "MapExpr", "entries": exprs}, nil

}

func (p *parser) callonMap1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMap1(stack["exprs"])
}

func (c *current) onEntries2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonEntries2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries2(stack["first"], stack["rest"])
}

func (c *current) onEntries9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonEntries9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries9()
}

func (c *current) onEntryTail1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonEntryTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntryTail1(stack["e"])
}

func (c *current) onEntry1(key, value interface{}) (interface{}, error) {
	return map[string]interface{}{"key": key, "value": value}, nil

}

func (p *parser) callonEntry1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntry1(stack["key"], stack["value"])
}

func (c *current) onSQLProc1(selection, from, joins, where, groupby, having, orderby, limit interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "SQLExpr",

		"select": selection,

		"from": from,

		"joins": joins,

		"where": where,

		"group_by": groupby,

		"having": having,

		"order_by": orderby,

		"limit": limit}, nil

}

func (p *parser) callonSQLProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLProc1(stack["selection"], stack["from"], stack["joins"], stack["where"], stack["groupby"], stack["having"], stack["orderby"], stack["limit"])
}

func (c *current) onSQLSelect2() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLSelect2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect2()
}

func (c *current) onSQLSelect7(assignments interface{}) (interface{}, error) {
	return assignments, nil
}

func (p *parser) callonSQLSelect7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect7(stack["assignments"])
}

func (c *current) onSQLAssignment2(rhs, lhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonSQLAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment2(stack["rhs"], stack["lhs"])
}

func (c *current) onSQLAssignment11(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonSQLAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment11(stack["expr"])
}

func (c *current) onSQLAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments7(stack["expr"])
}

func (c *current) onSQLAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSQLFrom2(table, alias interface{}) (interface{}, error) {
	return map[string]interface{}{"table": table, "alias": alias}, nil

}

func (p *parser) callonSQLFrom2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom2(stack["table"], stack["alias"])
}

func (c *current) onSQLFrom12() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLFrom12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom12()
}

func (c *current) onSQLAlias2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias2(stack["id"])
}

func (c *current) onSQLAlias9(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias9(stack["id"])
}

func (c *current) onSQLJoins7(join interface{}) (interface{}, error) {
	return join, nil
}

func (p *parser) callonSQLJoins7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins7(stack["join"])
}

func (c *current) onSQLJoins1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLJoins1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins1(stack["first"], stack["rest"])
}

func (c *current) onSQLJoin1(style, table, alias, leftKey, rightKey interface{}) (interface{}, error) {
	return map[string]interface{}{

		"table": table,

		"style": style,

		"left_key": leftKey,

		"right_key": rightKey,

		"alias": alias}, nil

}

func (p *parser) callonSQLJoin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoin1(stack["style"], stack["table"], stack["alias"], stack["leftKey"], stack["rightKey"])
}

func (c *current) onSQLJoinStyle2(style interface{}) (interface{}, error) {
	return style, nil
}

func (p *parser) callonSQLJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle2(stack["style"])
}

func (c *current) onSQLJoinStyle10() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonSQLJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle10()
}

func (c *current) onSQLWhere1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLWhere1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLWhere1(stack["expr"])
}

func (c *current) onSQLGroupBy1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonSQLGroupBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLGroupBy1(stack["columns"])
}

func (c *current) onSQLHaving1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLHaving1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLHaving1(stack["expr"])
}

func (c *current) onSQLOrderBy1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SQLOrderBy", "keys": keys, "order": order}, nil

}

func (p *parser) callonSQLOrderBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrderBy1(stack["keys"], stack["order"])
}

func (c *current) onSQLOrder2(dir interface{}) (interface{}, error) {
	return dir, nil
}

func (p *parser) callonSQLOrder2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder2(stack["dir"])
}

func (c *current) onSQLOrder9() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonSQLOrder9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder9()
}

func (c *current) onSQLLimit2(count interface{}) (interface{}, error) {
	return count, nil
}

func (p *parser) callonSQLLimit2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit2(stack["count"])
}

func (c *current) onSQLLimit9() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonSQLLimit9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit9()
}

func (c *current) onSELECT1() (interface{}, error) {
	return "select", nil
}

func (p *parser) callonSELECT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSELECT1()
}

func (c *current) onAS1() (interface{}, error) {
	return "as", nil
}

func (p *parser) callonAS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAS1()
}

func (c *current) onFROM1() (interface{}, error) {
	return "from", nil
}

func (p *parser) callonFROM1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFROM1()
}

func (c *current) onJOIN1() (interface{}, error) {
	return "join", nil
}

func (p *parser) callonJOIN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJOIN1()
}

func (c *current) onWHERE1() (interface{}, error) {
	return "where", nil
}

func (p *parser) callonWHERE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWHERE1()
}

func (c *current) onGROUP1() (interface{}, error) {
	return "group", nil
}

func (p *parser) callonGROUP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGROUP1()
}

func (c *current) onHAVING1() (interface{}, error) {
	return "having", nil
}

func (p *parser) callonHAVING1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHAVING1()
}

func (c *current) onORDER1() (interface{}, error) {
	return "order", nil
}

func (p *parser) callonORDER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onORDER1()
}

func (c *current) onON1() (interface{}, error) {
	return "on", nil
}

func (p *parser) callonON1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onON1()
}

func (c *current) onLIMIT1() (interface{}, error) {
	return "limit", nil
}

func (p *parser) callonLIMIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIMIT1()
}

func (c *current) onASC1() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonASC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onASC1()
}

func (c *current) onDESC1() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonDESC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDESC1()
}

func (c *current) onLEFT1() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonLEFT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLEFT1()
}

func (c *current) onRIGHT1() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonRIGHT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRIGHT1()
}

func (c *current) onINNER1() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonINNER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINNER1()
}

func (c *current) onStringLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonStringLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringLiteral1(stack["v"])
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "float64", "text": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "int64", "text": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "null", "text": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onTypeLiteral1(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonTypeLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeLiteral1(stack["typ"])
}

func (c *current) onTypeExternal4(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeExternal4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeExternal4(stack["typ"])
}

func (c *current) onExplicitType2(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonExplicitType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplicitType2(stack["typ"])
}

func (c *current) onExplicitType12(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonExplicitType12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplicitType12(stack["typ"])
}

func (c *current) onAmbiguousType2(name interface{}) (interface{}, error) {
	return name, nil
}

func (p *parser) callonAmbiguousType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType2(stack["name"])
}

func (c *current) onAmbiguousType8(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeDef", "name": name, "type": typ}, nil

}

func (p *parser) callonAmbiguousType8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType8(stack["name"], stack["typ"])
}

func (c *current) onAmbiguousType21(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType21(stack["name"])
}

func (c *current) onAmbiguousType24(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonAmbiguousType24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType24(stack["u"])
}

func (c *current) onTypeUnion1(types interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeUnion", "types": types}, nil

}

func (p *parser) callonTypeUnion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeUnion1(stack["types"])
}

func (c *current) onTypeList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeList1(stack["first"], stack["rest"])
}

func (c *current) onTypeListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeListTail1(stack["typ"])
}

func (c *current) onComplexType2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType2(stack["fields"])
}

func (c *current) onComplexType10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexType10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType10(stack["typ"])
}

func (c *current) onComplexType18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexType18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType18(stack["typ"])
}

func (c *current) onComplexType26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexType26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType26(stack["keyType"], stack["valType"])
}

func (c *current) onComplexTypeExternal2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexTypeExternal2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexTypeExternal2(stack["fields"])
}

func (c *current) onComplexTypeExternal10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexTypeExternal10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexTypeExternal10(stack["typ"])
}

func (c *current) onComplexTypeExternal18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexTypeExternal18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexTypeExternal18(stack["typ"])
}

func (c *current) onComplexTypeExternal26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexTypeExternal26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexTypeExternal26(stack["keyType"], stack["valType"])
}

func (c *current) onPrimitiveTypeExternal1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveTypeExternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveTypeExternal1()
}

func (c *current) onPrimitiveTypeInternal1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveTypeInternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveTypeInternal1()
}

func (c *current) onTypeFieldList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList1(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTail1(stack["typ"])
}

func (c *current) onTypeField1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeField1(stack["name"], stack["typ"])
}

func (c *current) onTypeFieldListExternal1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldListExternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListExternal1(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldListTailExternal1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTailExternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTailExternal1(stack["typ"])
}

func (c *current) onTypeFieldExternal1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeFieldExternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldExternal1(stack["name"], stack["typ"])
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return "in", nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onIdentifierName19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName19()
}

func (c *current) onIdentifierName21(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName21(stack["id"])
}

func (c *current) onTime1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "time", "text": string(c.text)}, nil

}

func (p *parser) callonTime1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTime1()
}

func (c *current) onDuration1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "duration", "text": string(c.text)}, nil

}

func (p *parser) callonDuration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDuration1()
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordChars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordChars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordChars1()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onGlob1(head, tail interface{}) (interface{}, error) {
	return reglob.Reglob(head.(string) + joinChars(tail)), nil

}

func (p *parser) callonGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlob1(stack["head"], stack["tail"])
}

func (c *current) onGlobStart4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonGlobStart4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobStart4()
}

func (c *current) onGlobEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonGlobEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEsc1(stack["s"])
}

func (c *current) onGlobEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonGlobEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape2()
}

func (c *current) onGlobEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonGlobEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape4()
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onEscapeSequence2() (interface{}, error) {
	return "\\" + string(c.text), nil
}

func (p *parser) callonEscapeSequence2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapeSequence2()
}

func (c *current) onSingleCharEscape3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleCharEscape3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape3()
}

func (c *current) onSingleCharEscape6() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape6()
}

func (c *current) onSingleCharEscape8() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape8()
}

func (c *current) onSingleCharEscape10() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape10()
}

func (c *current) onSingleCharEscape12() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape12()
}

func (c *current) onSingleCharEscape14() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape14()
}

func (c *current) onSingleCharEscape16() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape16()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexp1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
