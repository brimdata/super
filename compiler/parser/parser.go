// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 7, col: 1, offset: 26},
			expr: &choiceExpr{
				pos: position{line: 8, col: 5, offset: 36},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 8, col: 5, offset: 36},
						run: (*parser).callonstart2,
						expr: &seqExpr{
							pos: position{line: 8, col: 5, offset: 36},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 8, col: 5, offset: 36},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 8, col: 8, offset: 39},
									label: "scope",
									expr: &ruleRefExpr{
										pos:  position{line: 8, col: 14, offset: 45},
										name: "Scope",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 8, col: 20, offset: 51},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 8, col: 23, offset: 54},
									name: "EOF",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 9, col: 5, offset: 99},
						run: (*parser).callonstart9,
						expr: &seqExpr{
							pos: position{line: 9, col: 5, offset: 99},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 9, col: 5, offset: 99},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 9, col: 8, offset: 102},
									label: "seq",
									expr: &ruleRefExpr{
										pos:  position{line: 9, col: 12, offset: 106},
										name: "Seq",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 9, col: 16, offset: 110},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 9, col: 19, offset: 113},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Scope",
			pos:  position{line: 11, col: 1, offset: 138},
			expr: &actionExpr{
				pos: position{line: 12, col: 5, offset: 148},
				run: (*parser).callonScope1,
				expr: &seqExpr{
					pos: position{line: 12, col: 5, offset: 148},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 12, col: 5, offset: 148},
							label: "decls",
							expr: &oneOrMoreExpr{
								pos: position{line: 12, col: 11, offset: 154},
								expr: &ruleRefExpr{
									pos:  position{line: 12, col: 11, offset: 154},
									name: "Decl",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 12, col: 17, offset: 160},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 12, col: 22, offset: 165},
								name: "Seq",
							},
						},
					},
				},
			},
		},
		{
			name: "Seq",
			pos:  position{line: 16, col: 1, offset: 266},
			expr: &actionExpr{
				pos: position{line: 17, col: 5, offset: 274},
				run: (*parser).callonSeq1,
				expr: &seqExpr{
					pos: position{line: 17, col: 5, offset: 274},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 5, offset: 274},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 11, offset: 280},
								name: "Operation",
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 21, offset: 290},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 17, col: 26, offset: 295},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 26, offset: 295},
									name: "SeqTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SeqTail",
			pos:  position{line: 21, col: 1, offset: 388},
			expr: &actionExpr{
				pos: position{line: 21, col: 11, offset: 398},
				run: (*parser).callonSeqTail1,
				expr: &seqExpr{
					pos: position{line: 21, col: 11, offset: 398},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 21, col: 11, offset: 398},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 14, offset: 401},
							name: "Pipe",
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 19, offset: 406},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 21, col: 22, offset: 409},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 24, offset: 411},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Decl",
			pos:  position{line: 23, col: 1, offset: 440},
			expr: &actionExpr{
				pos: position{line: 24, col: 5, offset: 449},
				run: (*parser).callonDecl1,
				expr: &seqExpr{
					pos: position{line: 24, col: 5, offset: 449},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 24, col: 5, offset: 449},
							label: "v",
							expr: &choiceExpr{
								pos: position{line: 24, col: 8, offset: 452},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 24, col: 8, offset: 452},
										name: "ConstDecl",
									},
									&ruleRefExpr{
										pos:  position{line: 24, col: 20, offset: 464},
										name: "FuncDecl",
									},
									&ruleRefExpr{
										pos:  position{line: 24, col: 31, offset: 475},
										name: "OpDecl",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 24, col: 39, offset: 483},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "ConstDecl",
			pos:  position{line: 26, col: 1, offset: 504},
			expr: &choiceExpr{
				pos: position{line: 27, col: 5, offset: 518},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 27, col: 5, offset: 518},
						run: (*parser).callonConstDecl2,
						expr: &seqExpr{
							pos: position{line: 27, col: 5, offset: 518},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 27, col: 5, offset: 518},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 13, offset: 526},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 15, offset: 528},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 18, offset: 531},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 33, offset: 546},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 27, col: 36, offset: 549},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 40, offset: 553},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 43, offset: 556},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 48, offset: 561},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 30, col: 5, offset: 666},
						run: (*parser).callonConstDecl13,
						expr: &seqExpr{
							pos: position{line: 30, col: 5, offset: 666},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 30, col: 5, offset: 666},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 12, offset: 673},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 14, offset: 675},
									label: "id",
									expr: &choiceExpr{
										pos: position{line: 30, col: 18, offset: 679},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 30, col: 18, offset: 679},
												name: "IdentifierName",
											},
											&ruleRefExpr{
												pos:  position{line: 30, col: 35, offset: 696},
												name: "QuotedString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 49, offset: 710},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 30, col: 52, offset: 713},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 56, offset: 717},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 59, offset: 720},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 30, col: 63, offset: 724},
										name: "Type",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuncDecl",
			pos:  position{line: 41, col: 1, offset: 993},
			expr: &actionExpr{
				pos: position{line: 42, col: 5, offset: 1006},
				run: (*parser).callonFuncDecl1,
				expr: &seqExpr{
					pos: position{line: 42, col: 5, offset: 1006},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 42, col: 5, offset: 1006},
							val:        "func",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 12, offset: 1013},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 42, col: 14, offset: 1015},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 17, offset: 1018},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 32, offset: 1033},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 42, col: 35, offset: 1036},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 39, offset: 1040},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 42, col: 42, offset: 1043},
							label: "params",
							expr: &zeroOrOneExpr{
								pos: position{line: 42, col: 49, offset: 1050},
								expr: &ruleRefExpr{
									pos:  position{line: 42, col: 49, offset: 1050},
									name: "IdentifierNames",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 66, offset: 1067},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 42, col: 69, offset: 1070},
							val:        ")",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 73, offset: 1074},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 42, col: 76, offset: 1077},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 80, offset: 1081},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 42, col: 83, offset: 1084},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 87, offset: 1088},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 42, col: 90, offset: 1091},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 95, offset: 1096},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 100, offset: 1101},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 42, col: 103, offset: 1104},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OpDecl",
			pos:  position{line: 55, col: 1, offset: 1288},
			expr: &actionExpr{
				pos: position{line: 56, col: 5, offset: 1299},
				run: (*parser).callonOpDecl1,
				expr: &seqExpr{
					pos: position{line: 56, col: 5, offset: 1299},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 56, col: 5, offset: 1299},
							val:        "op",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 56, col: 10, offset: 1304},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 56, col: 12, offset: 1306},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 56, col: 17, offset: 1311},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 56, col: 32, offset: 1326},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 56, col: 35, offset: 1329},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 56, col: 39, offset: 1333},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 56, col: 42, offset: 1336},
							label: "params",
							expr: &zeroOrOneExpr{
								pos: position{line: 56, col: 49, offset: 1343},
								expr: &ruleRefExpr{
									pos:  position{line: 56, col: 49, offset: 1343},
									name: "IdentifierNames",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 56, col: 66, offset: 1360},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 56, col: 69, offset: 1363},
							val:        ")",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 56, col: 73, offset: 1367},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 56, col: 76, offset: 1370},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 56, col: 80, offset: 1374},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 56, col: 83, offset: 1377},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 56, col: 87, offset: 1381},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 56, col: 90, offset: 1384},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 56, col: 95, offset: 1389},
								name: "Seq",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 56, col: 99, offset: 1393},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 56, col: 102, offset: 1396},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Operation",
			pos:  position{line: 69, col: 1, offset: 1580},
			expr: &choiceExpr{
				pos: position{line: 70, col: 5, offset: 1594},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 70, col: 5, offset: 1594},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 70, col: 5, offset: 1594},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 70, col: 5, offset: 1594},
									val:        "fork",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 70, col: 12, offset: 1601},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 70, col: 15, offset: 1604},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 70, col: 19, offset: 1608},
									label: "paths",
									expr: &oneOrMoreExpr{
										pos: position{line: 70, col: 25, offset: 1614},
										expr: &ruleRefExpr{
											pos:  position{line: 70, col: 25, offset: 1614},
											name: "Leg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 70, col: 30, offset: 1619},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 70, col: 33, offset: 1622},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 73, col: 5, offset: 1715},
						run: (*parser).callonOperation12,
						expr: &seqExpr{
							pos: position{line: 73, col: 5, offset: 1715},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 73, col: 5, offset: 1715},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 73, col: 14, offset: 1724},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 73, col: 16, offset: 1726},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 73, col: 21, offset: 1731},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 73, col: 26, offset: 1736},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 73, col: 28, offset: 1738},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 73, col: 32, offset: 1742},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 73, col: 38, offset: 1748},
										expr: &ruleRefExpr{
											pos:  position{line: 73, col: 38, offset: 1748},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 73, col: 49, offset: 1759},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 73, col: 52, offset: 1762},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 76, col: 5, offset: 1867},
						run: (*parser).callonOperation25,
						expr: &seqExpr{
							pos: position{line: 76, col: 5, offset: 1867},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 76, col: 5, offset: 1867},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 76, col: 14, offset: 1876},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 76, col: 17, offset: 1879},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 76, col: 21, offset: 1883},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 76, col: 27, offset: 1889},
										expr: &ruleRefExpr{
											pos:  position{line: 76, col: 27, offset: 1889},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 76, col: 38, offset: 1900},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 76, col: 41, offset: 1903},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 79, col: 5, offset: 2007},
						run: (*parser).callonOperation35,
						expr: &seqExpr{
							pos: position{line: 79, col: 5, offset: 2007},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 79, col: 5, offset: 2007},
									val:        "from",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 79, col: 12, offset: 2014},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 79, col: 15, offset: 2017},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 79, col: 19, offset: 2021},
									label: "trunks",
									expr: &oneOrMoreExpr{
										pos: position{line: 79, col: 26, offset: 2028},
										expr: &ruleRefExpr{
											pos:  position{line: 79, col: 26, offset: 2028},
											name: "FromLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 79, col: 35, offset: 2037},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 79, col: 38, offset: 2040},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 82, col: 5, offset: 2131},
						run: (*parser).callonOperation45,
						expr: &seqExpr{
							pos: position{line: 82, col: 5, offset: 2131},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 82, col: 5, offset: 2131},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 82, col: 9, offset: 2135},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 82, col: 12, offset: 2138},
									label: "scope",
									expr: &ruleRefExpr{
										pos:  position{line: 82, col: 18, offset: 2144},
										name: "Scope",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 82, col: 24, offset: 2150},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 82, col: 27, offset: 2153},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&labeledExpr{
						pos:   position{line: 83, col: 5, offset: 2183},
						label: "op",
						expr: &ruleRefExpr{
							pos:  position{line: 83, col: 8, offset: 2186},
							name: "Operator",
						},
					},
					&actionExpr{
						pos: position{line: 84, col: 5, offset: 2199},
						run: (*parser).callonOperation55,
						expr: &seqExpr{
							pos: position{line: 84, col: 5, offset: 2199},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 84, col: 5, offset: 2199},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 84, col: 7, offset: 2201},
										name: "OpAssignment",
									},
								},
								&andExpr{
									pos: position{line: 84, col: 20, offset: 2214},
									expr: &ruleRefExpr{
										pos:  position{line: 84, col: 21, offset: 2215},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 85, col: 5, offset: 2245},
						run: (*parser).callonOperation61,
						expr: &seqExpr{
							pos: position{line: 85, col: 5, offset: 2245},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 85, col: 5, offset: 2245},
									expr: &seqExpr{
										pos: position{line: 85, col: 7, offset: 2247},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 85, col: 7, offset: 2247},
												name: "Function",
											},
											&ruleRefExpr{
												pos:  position{line: 85, col: 16, offset: 2256},
												name: "EndOfOp",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 85, col: 25, offset: 2265},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 85, col: 27, offset: 2267},
										name: "Aggregation",
									},
								},
								&andExpr{
									pos: position{line: 85, col: 39, offset: 2279},
									expr: &ruleRefExpr{
										pos:  position{line: 85, col: 40, offset: 2280},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 86, col: 5, offset: 2310},
						run: (*parser).callonOperation71,
						expr: &seqExpr{
							pos: position{line: 86, col: 5, offset: 2310},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 86, col: 5, offset: 2310},
									val:        "search",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 86, col: 14, offset: 2319},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 86, col: 16, offset: 2321},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 86, col: 21, offset: 2326},
										name: "SearchBoolean",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 89, col: 5, offset: 2425},
						run: (*parser).callonOperation77,
						expr: &labeledExpr{
							pos:   position{line: 89, col: 5, offset: 2425},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 89, col: 10, offset: 2430},
								name: "SearchBoolean",
							},
						},
					},
					&actionExpr{
						pos: position{line: 92, col: 5, offset: 2529},
						run: (*parser).callonOperation80,
						expr: &labeledExpr{
							pos:   position{line: 92, col: 5, offset: 2529},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 92, col: 10, offset: 2534},
								name: "Cast",
							},
						},
					},
					&actionExpr{
						pos: position{line: 95, col: 5, offset: 2622},
						run: (*parser).callonOperation83,
						expr: &labeledExpr{
							pos:   position{line: 95, col: 5, offset: 2622},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 95, col: 10, offset: 2627},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "EndOfOp",
			pos:  position{line: 99, col: 1, offset: 2714},
			expr: &seqExpr{
				pos: position{line: 99, col: 11, offset: 2724},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 99, col: 11, offset: 2724},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 99, col: 15, offset: 2728},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 99, col: 15, offset: 2728},
								name: "Pipe",
							},
							&ruleRefExpr{
								pos:  position{line: 99, col: 22, offset: 2735},
								name: "SearchKeywordGuard",
							},
							&litMatcher{
								pos:        position{line: 99, col: 43, offset: 2756},
								val:        "=>",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 99, col: 50, offset: 2763},
								val:        ")",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 99, col: 56, offset: 2769},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "Pipe",
			pos:  position{line: 100, col: 1, offset: 2774},
			expr: &seqExpr{
				pos: position{line: 100, col: 8, offset: 2781},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 100, col: 8, offset: 2781},
						val:        "|",
						ignoreCase: false,
					},
					&notExpr{
						pos: position{line: 100, col: 12, offset: 2785},
						expr: &choiceExpr{
							pos: position{line: 100, col: 14, offset: 2787},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 100, col: 14, offset: 2787},
									val:        "{",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 100, col: 20, offset: 2793},
									val:        "[",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Leg",
			pos:  position{line: 102, col: 1, offset: 2799},
			expr: &actionExpr{
				pos: position{line: 102, col: 7, offset: 2805},
				run: (*parser).callonLeg1,
				expr: &seqExpr{
					pos: position{line: 102, col: 7, offset: 2805},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 102, col: 7, offset: 2805},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 102, col: 10, offset: 2808},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 102, col: 15, offset: 2813},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 102, col: 18, offset: 2816},
							label: "seq",
							expr: &ruleRefExpr{
								pos:  position{line: 102, col: 22, offset: 2820},
								name: "Seq",
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchLeg",
			pos:  position{line: 104, col: 1, offset: 2845},
			expr: &actionExpr{
				pos: position{line: 105, col: 5, offset: 2859},
				run: (*parser).callonSwitchLeg1,
				expr: &seqExpr{
					pos: position{line: 105, col: 5, offset: 2859},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 105, col: 5, offset: 2859},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 105, col: 8, offset: 2862},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 105, col: 13, offset: 2867},
								name: "Case",
							},
						},
						&labeledExpr{
							pos:   position{line: 105, col: 18, offset: 2872},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 105, col: 23, offset: 2877},
								name: "Leg",
							},
						},
					},
				},
			},
		},
		{
			name: "Case",
			pos:  position{line: 109, col: 1, offset: 2959},
			expr: &choiceExpr{
				pos: position{line: 110, col: 5, offset: 2968},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 110, col: 5, offset: 2968},
						run: (*parser).callonCase2,
						expr: &seqExpr{
							pos: position{line: 110, col: 5, offset: 2968},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 110, col: 5, offset: 2968},
									val:        "case",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 110, col: 12, offset: 2975},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 110, col: 14, offset: 2977},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 110, col: 19, offset: 2982},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 111, col: 5, offset: 3012},
						run: (*parser).callonCase8,
						expr: &litMatcher{
							pos:        position{line: 111, col: 5, offset: 3012},
							val:        "default",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromLeg",
			pos:  position{line: 113, col: 1, offset: 3043},
			expr: &actionExpr{
				pos: position{line: 114, col: 5, offset: 3055},
				run: (*parser).callonFromLeg1,
				expr: &seqExpr{
					pos: position{line: 114, col: 5, offset: 3055},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 114, col: 5, offset: 3055},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 114, col: 8, offset: 3058},
							label: "source",
							expr: &ruleRefExpr{
								pos:  position{line: 114, col: 15, offset: 3065},
								name: "FromSource",
							},
						},
						&labeledExpr{
							pos:   position{line: 114, col: 26, offset: 3076},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 114, col: 30, offset: 3080},
								expr: &seqExpr{
									pos: position{line: 114, col: 31, offset: 3081},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 114, col: 31, offset: 3081},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 114, col: 34, offset: 3084},
											val:        "=>",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 114, col: 39, offset: 3089},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 114, col: 42, offset: 3092},
											name: "Seq",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FromSource",
			pos:  position{line: 122, col: 1, offset: 3283},
			expr: &choiceExpr{
				pos: position{line: 123, col: 5, offset: 3298},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 123, col: 5, offset: 3298},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 124, col: 5, offset: 3307},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 125, col: 5, offset: 3315},
						name: "Pool",
					},
					&ruleRefExpr{
						pos:  position{line: 126, col: 5, offset: 3324},
						name: "PassOp",
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 128, col: 1, offset: 3332},
			expr: &seqExpr{
				pos: position{line: 128, col: 13, offset: 3344},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 128, col: 13, offset: 3344},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 128, col: 17, offset: 3348},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 128, col: 18, offset: 3349},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 128, col: 18, offset: 3349},
										expr: &litMatcher{
											pos:        position{line: 128, col: 19, offset: 3350},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 128, col: 24, offset: 3355},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 128, col: 38, offset: 3369},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 128, col: 57, offset: 3388},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 128, col: 82, offset: 3413},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 128, col: 88, offset: 3419},
								val:        "(",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 128, col: 94, offset: 3425},
								val:        "[",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 128, col: 100, offset: 3431},
								val:        "~",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 130, col: 1, offset: 3437},
			expr: &actionExpr{
				pos: position{line: 130, col: 14, offset: 3450},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 130, col: 15, offset: 3451},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 130, col: 15, offset: 3451},
							val:        "==",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 130, col: 22, offset: 3458},
							val:        "!=",
							ignoreCase: false,
						},
						&seqExpr{
							pos: position{line: 130, col: 30, offset: 3466},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 130, col: 30, offset: 3466},
									val:        "in",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 130, col: 35, offset: 3471},
									expr: &ruleRefExpr{
										pos:  position{line: 130, col: 36, offset: 3472},
										name: "IdentifierRest",
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 130, col: 54, offset: 3490},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 130, col: 61, offset: 3497},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 130, col: 67, offset: 3503},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 130, col: 74, offset: 3510},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 132, col: 1, offset: 3547},
			expr: &actionExpr{
				pos: position{line: 133, col: 5, offset: 3565},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 133, col: 5, offset: 3565},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 133, col: 5, offset: 3565},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 133, col: 11, offset: 3571},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 133, col: 21, offset: 3581},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 133, col: 26, offset: 3586},
								expr: &ruleRefExpr{
									pos:  position{line: 133, col: 26, offset: 3586},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 137, col: 1, offset: 3660},
			expr: &actionExpr{
				pos: position{line: 137, col: 16, offset: 3675},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 137, col: 16, offset: 3675},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 137, col: 16, offset: 3675},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 137, col: 18, offset: 3677},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 137, col: 26, offset: 3685},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 137, col: 28, offset: 3687},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 137, col: 30, offset: 3689},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 139, col: 1, offset: 3739},
			expr: &actionExpr{
				pos: position{line: 140, col: 5, offset: 3753},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 140, col: 5, offset: 3753},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 140, col: 5, offset: 3753},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 140, col: 11, offset: 3759},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 141, col: 5, offset: 3776},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 141, col: 10, offset: 3781},
								expr: &actionExpr{
									pos: position{line: 141, col: 11, offset: 3782},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 141, col: 11, offset: 3782},
										exprs: []interface{}{
											&zeroOrOneExpr{
												pos: position{line: 141, col: 11, offset: 3782},
												expr: &seqExpr{
													pos: position{line: 141, col: 12, offset: 3783},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 141, col: 12, offset: 3783},
															name: "_",
														},
														&ruleRefExpr{
															pos:  position{line: 141, col: 14, offset: 3785},
															name: "AndToken",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 141, col: 25, offset: 3796},
												name: "_",
											},
											&notExpr{
												pos: position{line: 141, col: 27, offset: 3798},
												expr: &choiceExpr{
													pos: position{line: 141, col: 29, offset: 3800},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 141, col: 29, offset: 3800},
															name: "OrToken",
														},
														&ruleRefExpr{
															pos:  position{line: 141, col: 39, offset: 3810},
															name: "SearchKeywordGuard",
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 141, col: 59, offset: 3830},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 141, col: 64, offset: 3835},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchKeywordGuard",
			pos:  position{line: 145, col: 1, offset: 3953},
			expr: &choiceExpr{
				pos: position{line: 146, col: 5, offset: 3976},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 146, col: 5, offset: 3976},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 146, col: 5, offset: 3976},
								name: "FromSource",
							},
							&ruleRefExpr{
								pos:  position{line: 146, col: 16, offset: 3987},
								name: "__",
							},
							&litMatcher{
								pos:        position{line: 146, col: 19, offset: 3990},
								val:        "=>",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 146, col: 24, offset: 3995},
								name: "__",
							},
						},
					},
					&seqExpr{
						pos: position{line: 147, col: 5, offset: 4002},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 147, col: 5, offset: 4002},
								name: "Case",
							},
							&ruleRefExpr{
								pos:  position{line: 147, col: 10, offset: 4007},
								name: "__",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 149, col: 1, offset: 4011},
			expr: &choiceExpr{
				pos: position{line: 150, col: 5, offset: 4028},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 150, col: 5, offset: 4028},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 150, col: 5, offset: 4028},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 150, col: 6, offset: 4029},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 150, col: 6, offset: 4029},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 150, col: 6, offset: 4029},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 150, col: 15, offset: 4038},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 150, col: 19, offset: 4042},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 150, col: 19, offset: 4042},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 150, col: 23, offset: 4046},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 150, col: 27, offset: 4050},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 150, col: 29, offset: 4052},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 153, col: 5, offset: 4164},
						run: (*parser).callonSearchFactor13,
						expr: &seqExpr{
							pos: position{line: 153, col: 5, offset: 4164},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 153, col: 5, offset: 4164},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 153, col: 9, offset: 4168},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 153, col: 12, offset: 4171},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 153, col: 17, offset: 4176},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 153, col: 31, offset: 4190},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 153, col: 34, offset: 4193},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 154, col: 5, offset: 4222},
						name: "SearchExpr",
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 156, col: 1, offset: 4234},
			expr: &choiceExpr{
				pos: position{line: 157, col: 5, offset: 4249},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 157, col: 5, offset: 4249},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 158, col: 5, offset: 4260},
						name: "Glob",
					},
					&actionExpr{
						pos: position{line: 159, col: 5, offset: 4269},
						run: (*parser).callonSearchExpr4,
						expr: &seqExpr{
							pos: position{line: 159, col: 5, offset: 4269},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 159, col: 5, offset: 4269},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 159, col: 7, offset: 4271},
										name: "SearchValue",
									},
								},
								&choiceExpr{
									pos: position{line: 159, col: 20, offset: 4284},
									alternatives: []interface{}{
										&notExpr{
											pos: position{line: 159, col: 20, offset: 4284},
											expr: &ruleRefExpr{
												pos:  position{line: 159, col: 21, offset: 4285},
												name: "ExprGuard",
											},
										},
										&andExpr{
											pos: position{line: 159, col: 33, offset: 4297},
											expr: &seqExpr{
												pos: position{line: 159, col: 35, offset: 4299},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 159, col: 35, offset: 4299},
														name: "_",
													},
													&ruleRefExpr{
														pos:  position{line: 159, col: 37, offset: 4301},
														name: "Glob",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 162, col: 5, offset: 4413},
						run: (*parser).callonSearchExpr15,
						expr: &seqExpr{
							pos: position{line: 162, col: 5, offset: 4413},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 162, col: 5, offset: 4413},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 162, col: 9, offset: 4417},
									expr: &ruleRefExpr{
										pos:  position{line: 162, col: 10, offset: 4418},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 165, col: 5, offset: 4534},
						name: "SearchPredicate",
					},
				},
			},
		},
		{
			name: "SearchPredicate",
			pos:  position{line: 167, col: 1, offset: 4551},
			expr: &choiceExpr{
				pos: position{line: 168, col: 5, offset: 4571},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 168, col: 5, offset: 4571},
						run: (*parser).callonSearchPredicate2,
						expr: &seqExpr{
							pos: position{line: 168, col: 5, offset: 4571},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 168, col: 5, offset: 4571},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 168, col: 9, offset: 4575},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 168, col: 22, offset: 4588},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 168, col: 25, offset: 4591},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 168, col: 28, offset: 4594},
										name: "Comparator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 168, col: 39, offset: 4605},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 168, col: 42, offset: 4608},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 168, col: 46, offset: 4612},
										name: "AdditiveExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 171, col: 6, offset: 4735},
						run: (*parser).callonSearchPredicate12,
						expr: &seqExpr{
							pos: position{line: 171, col: 6, offset: 4735},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 171, col: 6, offset: 4735},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 171, col: 12, offset: 4741},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 171, col: 21, offset: 4750},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 171, col: 26, offset: 4755},
										expr: &ruleRefExpr{
											pos:  position{line: 171, col: 27, offset: 4756},
											name: "Deref",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 175, col: 1, offset: 4828},
			expr: &choiceExpr{
				pos: position{line: 176, col: 5, offset: 4844},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 176, col: 5, offset: 4844},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 177, col: 5, offset: 4856},
						run: (*parser).callonSearchValue3,
						expr: &seqExpr{
							pos: position{line: 177, col: 5, offset: 4856},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 177, col: 5, offset: 4856},
									expr: &ruleRefExpr{
										pos:  position{line: 177, col: 6, offset: 4857},
										name: "RegexpPattern",
									},
								},
								&labeledExpr{
									pos:   position{line: 177, col: 20, offset: 4871},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 177, col: 22, offset: 4873},
										name: "KeyWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Glob",
			pos:  position{line: 181, col: 1, offset: 4981},
			expr: &actionExpr{
				pos: position{line: 182, col: 5, offset: 4990},
				run: (*parser).callonGlob1,
				expr: &labeledExpr{
					pos:   position{line: 182, col: 5, offset: 4990},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 182, col: 13, offset: 4998},
						name: "GlobPattern",
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 186, col: 1, offset: 5094},
			expr: &actionExpr{
				pos: position{line: 187, col: 5, offset: 5105},
				run: (*parser).callonRegexp1,
				expr: &labeledExpr{
					pos:   position{line: 187, col: 5, offset: 5105},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 187, col: 13, offset: 5113},
						name: "RegexpPattern",
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 193, col: 1, offset: 5239},
			expr: &choiceExpr{
				pos: position{line: 194, col: 5, offset: 5255},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 194, col: 5, offset: 5255},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 194, col: 5, offset: 5255},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 194, col: 5, offset: 5255},
									expr: &ruleRefExpr{
										pos:  position{line: 194, col: 5, offset: 5255},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 194, col: 16, offset: 5266},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 194, col: 21, offset: 5271},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 194, col: 33, offset: 5283},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 194, col: 39, offset: 5289},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 197, col: 5, offset: 5415},
						run: (*parser).callonAggregation10,
						expr: &seqExpr{
							pos: position{line: 197, col: 5, offset: 5415},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 197, col: 5, offset: 5415},
									expr: &ruleRefExpr{
										pos:  position{line: 197, col: 5, offset: 5415},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 197, col: 16, offset: 5426},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 197, col: 21, offset: 5431},
										name: "AggAssignments",
									},
								},
								&labeledExpr{
									pos:   position{line: 197, col: 36, offset: 5446},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 197, col: 41, offset: 5451},
										expr: &seqExpr{
											pos: position{line: 197, col: 42, offset: 5452},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 197, col: 42, offset: 5452},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 197, col: 44, offset: 5454},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 197, col: 58, offset: 5468},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 197, col: 64, offset: 5474},
										name: "LimitArg",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Summarize",
			pos:  position{line: 205, col: 1, offset: 5688},
			expr: &seqExpr{
				pos: position{line: 205, col: 13, offset: 5700},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 205, col: 13, offset: 5700},
						val:        "summarize",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 205, col: 25, offset: 5712},
						name: "_",
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 207, col: 1, offset: 5715},
			expr: &actionExpr{
				pos: position{line: 208, col: 5, offset: 5731},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 208, col: 5, offset: 5731},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 208, col: 5, offset: 5731},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 208, col: 13, offset: 5739},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 208, col: 15, offset: 5741},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 208, col: 23, offset: 5749},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 210, col: 1, offset: 5790},
			expr: &choiceExpr{
				pos: position{line: 211, col: 5, offset: 5803},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 211, col: 5, offset: 5803},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 211, col: 5, offset: 5803},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 211, col: 5, offset: 5803},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 211, col: 7, offset: 5805},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 211, col: 14, offset: 5812},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 211, col: 16, offset: 5814},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 211, col: 25, offset: 5823},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 211, col: 27, offset: 5825},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 211, col: 33, offset: 5831},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 212, col: 5, offset: 5862},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 212, col: 5, offset: 5862},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 217, col: 1, offset: 6122},
			expr: &choiceExpr{
				pos: position{line: 218, col: 5, offset: 6141},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 218, col: 5, offset: 6141},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 219, col: 5, offset: 6156},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 219, col: 5, offset: 6156},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 219, col: 10, offset: 6161},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 221, col: 1, offset: 6253},
			expr: &actionExpr{
				pos: position{line: 222, col: 5, offset: 6273},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 222, col: 5, offset: 6273},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 222, col: 5, offset: 6273},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 222, col: 11, offset: 6279},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 222, col: 26, offset: 6294},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 222, col: 31, offset: 6299},
								expr: &actionExpr{
									pos: position{line: 222, col: 32, offset: 6300},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 222, col: 32, offset: 6300},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 222, col: 32, offset: 6300},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 222, col: 35, offset: 6303},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 222, col: 39, offset: 6307},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 222, col: 42, offset: 6310},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 222, col: 47, offset: 6315},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignment",
			pos:  position{line: 226, col: 1, offset: 6437},
			expr: &choiceExpr{
				pos: position{line: 227, col: 5, offset: 6455},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 227, col: 5, offset: 6455},
						run: (*parser).callonAggAssignment2,
						expr: &seqExpr{
							pos: position{line: 227, col: 5, offset: 6455},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 227, col: 5, offset: 6455},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 227, col: 10, offset: 6460},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 227, col: 15, offset: 6465},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 227, col: 18, offset: 6468},
									val:        ":=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 227, col: 23, offset: 6473},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 227, col: 26, offset: 6476},
									label: "agg",
									expr: &ruleRefExpr{
										pos:  position{line: 227, col: 30, offset: 6480},
										name: "Agg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 230, col: 5, offset: 6584},
						run: (*parser).callonAggAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 230, col: 5, offset: 6584},
							label: "agg",
							expr: &ruleRefExpr{
								pos:  position{line: 230, col: 9, offset: 6588},
								name: "Agg",
							},
						},
					},
				},
			},
		},
		{
			name: "Agg",
			pos:  position{line: 234, col: 1, offset: 6688},
			expr: &actionExpr{
				pos: position{line: 235, col: 5, offset: 6696},
				run: (*parser).callonAgg1,
				expr: &seqExpr{
					pos: position{line: 235, col: 5, offset: 6696},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 235, col: 5, offset: 6696},
							expr: &ruleRefExpr{
								pos:  position{line: 235, col: 6, offset: 6697},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 235, col: 16, offset: 6707},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 235, col: 19, offset: 6710},
								name: "AggName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 235, col: 27, offset: 6718},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 235, col: 30, offset: 6721},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 235, col: 34, offset: 6725},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 235, col: 37, offset: 6728},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 235, col: 42, offset: 6733},
								expr: &choiceExpr{
									pos: position{line: 235, col: 43, offset: 6734},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 235, col: 43, offset: 6734},
											name: "OverExpr",
										},
										&ruleRefExpr{
											pos:  position{line: 235, col: 54, offset: 6745},
											name: "Expr",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 235, col: 61, offset: 6752},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 235, col: 64, offset: 6755},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 235, col: 68, offset: 6759},
							expr: &seqExpr{
								pos: position{line: 235, col: 70, offset: 6761},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 235, col: 70, offset: 6761},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 235, col: 73, offset: 6764},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 235, col: 78, offset: 6769},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 235, col: 84, offset: 6775},
								expr: &ruleRefExpr{
									pos:  position{line: 235, col: 84, offset: 6775},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggName",
			pos:  position{line: 243, col: 1, offset: 6966},
			expr: &choiceExpr{
				pos: position{line: 244, col: 5, offset: 6978},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 244, col: 5, offset: 6978},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 245, col: 5, offset: 6997},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 246, col: 5, offset: 7010},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 248, col: 1, offset: 7019},
			expr: &actionExpr{
				pos: position{line: 248, col: 15, offset: 7033},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 248, col: 15, offset: 7033},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 248, col: 15, offset: 7033},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 248, col: 17, offset: 7035},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 248, col: 25, offset: 7043},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 248, col: 27, offset: 7045},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 248, col: 32, offset: 7050},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignments",
			pos:  position{line: 250, col: 1, offset: 7086},
			expr: &actionExpr{
				pos: position{line: 251, col: 5, offset: 7105},
				run: (*parser).callonAggAssignments1,
				expr: &seqExpr{
					pos: position{line: 251, col: 5, offset: 7105},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 251, col: 5, offset: 7105},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 251, col: 11, offset: 7111},
								name: "AggAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 251, col: 25, offset: 7125},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 251, col: 30, offset: 7130},
								expr: &seqExpr{
									pos: position{line: 251, col: 31, offset: 7131},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 251, col: 31, offset: 7131},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 251, col: 34, offset: 7134},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 251, col: 38, offset: 7138},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 251, col: 41, offset: 7141},
											name: "AggAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 261, col: 1, offset: 7365},
			expr: &choiceExpr{
				pos: position{line: 262, col: 5, offset: 7378},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 262, col: 5, offset: 7378},
						name: "AssertOp",
					},
					&ruleRefExpr{
						pos:  position{line: 263, col: 5, offset: 7391},
						name: "SortOp",
					},
					&ruleRefExpr{
						pos:  position{line: 264, col: 5, offset: 7402},
						name: "TopOp",
					},
					&ruleRefExpr{
						pos:  position{line: 265, col: 5, offset: 7412},
						name: "CutOp",
					},
					&ruleRefExpr{
						pos:  position{line: 266, col: 5, offset: 7422},
						name: "DropOp",
					},
					&ruleRefExpr{
						pos:  position{line: 267, col: 5, offset: 7433},
						name: "HeadOp",
					},
					&ruleRefExpr{
						pos:  position{line: 268, col: 5, offset: 7444},
						name: "TailOp",
					},
					&ruleRefExpr{
						pos:  position{line: 269, col: 5, offset: 7455},
						name: "WhereOp",
					},
					&ruleRefExpr{
						pos:  position{line: 270, col: 5, offset: 7467},
						name: "UniqOp",
					},
					&ruleRefExpr{
						pos:  position{line: 271, col: 5, offset: 7478},
						name: "PutOp",
					},
					&ruleRefExpr{
						pos:  position{line: 272, col: 5, offset: 7488},
						name: "RenameOp",
					},
					&ruleRefExpr{
						pos:  position{line: 273, col: 5, offset: 7501},
						name: "FuseOp",
					},
					&ruleRefExpr{
						pos:  position{line: 274, col: 5, offset: 7512},
						name: "ShapeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 275, col: 5, offset: 7524},
						name: "JoinOp",
					},
					&ruleRefExpr{
						pos:  position{line: 276, col: 5, offset: 7535},
						name: "SampleOp",
					},
					&ruleRefExpr{
						pos:  position{line: 277, col: 5, offset: 7548},
						name: "SQLOp",
					},
					&ruleRefExpr{
						pos:  position{line: 278, col: 5, offset: 7558},
						name: "FromOp",
					},
					&ruleRefExpr{
						pos:  position{line: 279, col: 5, offset: 7569},
						name: "PassOp",
					},
					&ruleRefExpr{
						pos:  position{line: 280, col: 5, offset: 7580},
						name: "ExplodeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 281, col: 5, offset: 7594},
						name: "MergeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 282, col: 5, offset: 7606},
						name: "OverOp",
					},
					&ruleRefExpr{
						pos:  position{line: 283, col: 5, offset: 7617},
						name: "YieldOp",
					},
					&ruleRefExpr{
						pos:  position{line: 284, col: 5, offset: 7629},
						name: "LoadOp",
					},
				},
			},
		},
		{
			name: "AssertOp",
			pos:  position{line: 286, col: 1, offset: 7637},
			expr: &actionExpr{
				pos: position{line: 287, col: 5, offset: 7650},
				run: (*parser).callonAssertOp1,
				expr: &seqExpr{
					pos: position{line: 287, col: 5, offset: 7650},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 287, col: 5, offset: 7650},
							val:        "assert",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 287, col: 14, offset: 7659},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 287, col: 16, offset: 7661},
							label: "expr",
							expr: &actionExpr{
								pos: position{line: 287, col: 22, offset: 7667},
								run: (*parser).callonAssertOp6,
								expr: &labeledExpr{
									pos:   position{line: 287, col: 22, offset: 7667},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 287, col: 24, offset: 7669},
										name: "Expr",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortOp",
			pos:  position{line: 323, col: 1, offset: 9020},
			expr: &actionExpr{
				pos: position{line: 324, col: 5, offset: 9031},
				run: (*parser).callonSortOp1,
				expr: &seqExpr{
					pos: position{line: 324, col: 5, offset: 9031},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 324, col: 5, offset: 9031},
							val:        "sort",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 324, col: 12, offset: 9038},
							expr: &ruleRefExpr{
								pos:  position{line: 324, col: 13, offset: 9039},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 324, col: 18, offset: 9044},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 324, col: 23, offset: 9049},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 324, col: 32, offset: 9058},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 324, col: 37, offset: 9063},
								expr: &actionExpr{
									pos: position{line: 324, col: 38, offset: 9064},
									run: (*parser).callonSortOp10,
									expr: &seqExpr{
										pos: position{line: 324, col: 38, offset: 9064},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 324, col: 38, offset: 9064},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 324, col: 40, offset: 9066},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 324, col: 42, offset: 9068},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 338, col: 1, offset: 9479},
			expr: &actionExpr{
				pos: position{line: 338, col: 12, offset: 9490},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 338, col: 12, offset: 9490},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 338, col: 17, offset: 9495},
						expr: &actionExpr{
							pos: position{line: 338, col: 18, offset: 9496},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 338, col: 18, offset: 9496},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 338, col: 18, offset: 9496},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 338, col: 20, offset: 9498},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 338, col: 22, offset: 9500},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 340, col: 1, offset: 9557},
			expr: &choiceExpr{
				pos: position{line: 341, col: 5, offset: 9569},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 341, col: 5, offset: 9569},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 341, col: 5, offset: 9569},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 342, col: 5, offset: 9644},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 342, col: 5, offset: 9644},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 342, col: 5, offset: 9644},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 342, col: 14, offset: 9653},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 342, col: 16, offset: 9655},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 342, col: 23, offset: 9662},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 342, col: 24, offset: 9663},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 342, col: 24, offset: 9663},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 342, col: 34, offset: 9673},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopOp",
			pos:  position{line: 344, col: 1, offset: 9786},
			expr: &actionExpr{
				pos: position{line: 345, col: 5, offset: 9796},
				run: (*parser).callonTopOp1,
				expr: &seqExpr{
					pos: position{line: 345, col: 5, offset: 9796},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 345, col: 5, offset: 9796},
							val:        "top",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 345, col: 11, offset: 9802},
							expr: &ruleRefExpr{
								pos:  position{line: 345, col: 12, offset: 9803},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 345, col: 17, offset: 9808},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 345, col: 23, offset: 9814},
								expr: &actionExpr{
									pos: position{line: 345, col: 24, offset: 9815},
									run: (*parser).callonTopOp8,
									expr: &seqExpr{
										pos: position{line: 345, col: 24, offset: 9815},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 345, col: 24, offset: 9815},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 345, col: 26, offset: 9817},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 345, col: 28, offset: 9819},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 345, col: 53, offset: 9844},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 345, col: 59, offset: 9850},
								expr: &seqExpr{
									pos: position{line: 345, col: 60, offset: 9851},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 345, col: 60, offset: 9851},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 345, col: 62, offset: 9853},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 345, col: 73, offset: 9864},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 345, col: 80, offset: 9871},
								expr: &actionExpr{
									pos: position{line: 345, col: 81, offset: 9872},
									run: (*parser).callonTopOp20,
									expr: &seqExpr{
										pos: position{line: 345, col: 81, offset: 9872},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 345, col: 81, offset: 9872},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 345, col: 83, offset: 9874},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 345, col: 85, offset: 9876},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutOp",
			pos:  position{line: 359, col: 1, offset: 10211},
			expr: &actionExpr{
				pos: position{line: 360, col: 5, offset: 10221},
				run: (*parser).callonCutOp1,
				expr: &seqExpr{
					pos: position{line: 360, col: 5, offset: 10221},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 360, col: 5, offset: 10221},
							val:        "cut",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 360, col: 11, offset: 10227},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 360, col: 13, offset: 10229},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 360, col: 18, offset: 10234},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropOp",
			pos:  position{line: 364, col: 1, offset: 10329},
			expr: &actionExpr{
				pos: position{line: 365, col: 5, offset: 10340},
				run: (*parser).callonDropOp1,
				expr: &seqExpr{
					pos: position{line: 365, col: 5, offset: 10340},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 365, col: 5, offset: 10340},
							val:        "drop",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 365, col: 12, offset: 10347},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 365, col: 14, offset: 10349},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 365, col: 19, offset: 10354},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadOp",
			pos:  position{line: 369, col: 1, offset: 10445},
			expr: &choiceExpr{
				pos: position{line: 370, col: 5, offset: 10456},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 370, col: 5, offset: 10456},
						run: (*parser).callonHeadOp2,
						expr: &seqExpr{
							pos: position{line: 370, col: 5, offset: 10456},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 370, col: 5, offset: 10456},
									val:        "head",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 370, col: 12, offset: 10463},
									name: "_",
								},
								&notExpr{
									pos: position{line: 370, col: 14, offset: 10465},
									expr: &ruleRefExpr{
										pos:  position{line: 370, col: 15, offset: 10466},
										name: "EndOfOp",
									},
								},
								&labeledExpr{
									pos:   position{line: 370, col: 23, offset: 10474},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 370, col: 29, offset: 10480},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 371, col: 5, offset: 10560},
						run: (*parser).callonHeadOp10,
						expr: &litMatcher{
							pos:        position{line: 371, col: 5, offset: 10560},
							val:        "head",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TailOp",
			pos:  position{line: 373, col: 1, offset: 10707},
			expr: &choiceExpr{
				pos: position{line: 374, col: 5, offset: 10718},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 374, col: 5, offset: 10718},
						run: (*parser).callonTailOp2,
						expr: &seqExpr{
							pos: position{line: 374, col: 5, offset: 10718},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 374, col: 5, offset: 10718},
									val:        "tail",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 374, col: 12, offset: 10725},
									name: "_",
								},
								&notExpr{
									pos: position{line: 374, col: 14, offset: 10727},
									expr: &ruleRefExpr{
										pos:  position{line: 374, col: 15, offset: 10728},
										name: "EndOfOp",
									},
								},
								&labeledExpr{
									pos:   position{line: 374, col: 23, offset: 10736},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 374, col: 29, offset: 10742},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 375, col: 5, offset: 10822},
						run: (*parser).callonTailOp10,
						expr: &litMatcher{
							pos:        position{line: 375, col: 5, offset: 10822},
							val:        "tail",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "WhereOp",
			pos:  position{line: 377, col: 1, offset: 10969},
			expr: &actionExpr{
				pos: position{line: 378, col: 5, offset: 10981},
				run: (*parser).callonWhereOp1,
				expr: &seqExpr{
					pos: position{line: 378, col: 5, offset: 10981},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 378, col: 5, offset: 10981},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 378, col: 13, offset: 10989},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 378, col: 15, offset: 10991},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 378, col: 20, offset: 10996},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "UniqOp",
			pos:  position{line: 382, col: 1, offset: 11082},
			expr: &choiceExpr{
				pos: position{line: 383, col: 5, offset: 11093},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 383, col: 5, offset: 11093},
						run: (*parser).callonUniqOp2,
						expr: &seqExpr{
							pos: position{line: 383, col: 5, offset: 11093},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 383, col: 5, offset: 11093},
									val:        "uniq",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 383, col: 12, offset: 11100},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 383, col: 14, offset: 11102},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 386, col: 5, offset: 11191},
						run: (*parser).callonUniqOp7,
						expr: &litMatcher{
							pos:        position{line: 386, col: 5, offset: 11191},
							val:        "uniq",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PutOp",
			pos:  position{line: 390, col: 1, offset: 11280},
			expr: &actionExpr{
				pos: position{line: 391, col: 5, offset: 11290},
				run: (*parser).callonPutOp1,
				expr: &seqExpr{
					pos: position{line: 391, col: 5, offset: 11290},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 391, col: 5, offset: 11290},
							val:        "put",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 391, col: 11, offset: 11296},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 391, col: 13, offset: 11298},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 391, col: 18, offset: 11303},
								name: "Assignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameOp",
			pos:  position{line: 395, col: 1, offset: 11394},
			expr: &actionExpr{
				pos: position{line: 396, col: 5, offset: 11407},
				run: (*parser).callonRenameOp1,
				expr: &seqExpr{
					pos: position{line: 396, col: 5, offset: 11407},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 396, col: 5, offset: 11407},
							val:        "rename",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 396, col: 14, offset: 11416},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 396, col: 16, offset: 11418},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 396, col: 22, offset: 11424},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 396, col: 33, offset: 11435},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 396, col: 38, offset: 11440},
								expr: &actionExpr{
									pos: position{line: 396, col: 39, offset: 11441},
									run: (*parser).callonRenameOp9,
									expr: &seqExpr{
										pos: position{line: 396, col: 39, offset: 11441},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 396, col: 39, offset: 11441},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 396, col: 42, offset: 11444},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 396, col: 46, offset: 11448},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 396, col: 49, offset: 11451},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 396, col: 52, offset: 11454},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseOp",
			pos:  position{line: 404, col: 1, offset: 11861},
			expr: &actionExpr{
				pos: position{line: 405, col: 5, offset: 11872},
				run: (*parser).callonFuseOp1,
				expr: &seqExpr{
					pos: position{line: 405, col: 5, offset: 11872},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 405, col: 5, offset: 11872},
							val:        "fuse",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 405, col: 12, offset: 11879},
							expr: &seqExpr{
								pos: position{line: 405, col: 14, offset: 11881},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 405, col: 14, offset: 11881},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 405, col: 17, offset: 11884},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 405, col: 22, offset: 11889},
							expr: &ruleRefExpr{
								pos:  position{line: 405, col: 23, offset: 11890},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "ShapeOp",
			pos:  position{line: 409, col: 1, offset: 11961},
			expr: &actionExpr{
				pos: position{line: 410, col: 5, offset: 11973},
				run: (*parser).callonShapeOp1,
				expr: &seqExpr{
					pos: position{line: 410, col: 5, offset: 11973},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 410, col: 5, offset: 11973},
							val:        "shape",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 410, col: 13, offset: 11981},
							expr: &seqExpr{
								pos: position{line: 410, col: 15, offset: 11983},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 410, col: 15, offset: 11983},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 410, col: 18, offset: 11986},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 410, col: 23, offset: 11991},
							expr: &ruleRefExpr{
								pos:  position{line: 410, col: 24, offset: 11992},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "JoinOp",
			pos:  position{line: 414, col: 1, offset: 12064},
			expr: &actionExpr{
				pos: position{line: 415, col: 5, offset: 12075},
				run: (*parser).callonJoinOp1,
				expr: &seqExpr{
					pos: position{line: 415, col: 5, offset: 12075},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 415, col: 5, offset: 12075},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 415, col: 11, offset: 12081},
								name: "JoinStyle",
							},
						},
						&litMatcher{
							pos:        position{line: 415, col: 21, offset: 12091},
							val:        "join",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 415, col: 28, offset: 12098},
							label: "rightInput",
							expr: &ruleRefExpr{
								pos:  position{line: 415, col: 39, offset: 12109},
								name: "JoinRightInput",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 415, col: 54, offset: 12124},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 415, col: 57, offset: 12127},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 415, col: 59, offset: 12129},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 415, col: 63, offset: 12133},
								name: "JoinKey",
							},
						},
						&labeledExpr{
							pos:   position{line: 415, col: 71, offset: 12141},
							label: "optKey",
							expr: &zeroOrOneExpr{
								pos: position{line: 415, col: 78, offset: 12148},
								expr: &seqExpr{
									pos: position{line: 415, col: 79, offset: 12149},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 415, col: 79, offset: 12149},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 415, col: 82, offset: 12152},
											val:        "=",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 415, col: 86, offset: 12156},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 415, col: 89, offset: 12159},
											name: "JoinKey",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 415, col: 99, offset: 12169},
							label: "optArgs",
							expr: &zeroOrOneExpr{
								pos: position{line: 415, col: 107, offset: 12177},
								expr: &seqExpr{
									pos: position{line: 415, col: 108, offset: 12178},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 415, col: 108, offset: 12178},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 415, col: 110, offset: 12180},
											name: "FlexAssignments",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinStyle",
			pos:  position{line: 426, col: 1, offset: 12536},
			expr: &choiceExpr{
				pos: position{line: 427, col: 5, offset: 12550},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 427, col: 5, offset: 12550},
						run: (*parser).callonJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 427, col: 5, offset: 12550},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 427, col: 5, offset: 12550},
									val:        "anti",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 427, col: 12, offset: 12557},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 428, col: 5, offset: 12587},
						run: (*parser).callonJoinStyle6,
						expr: &seqExpr{
							pos: position{line: 428, col: 5, offset: 12587},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 428, col: 5, offset: 12587},
									val:        "inner",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 428, col: 13, offset: 12595},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 429, col: 5, offset: 12625},
						run: (*parser).callonJoinStyle10,
						expr: &seqExpr{
							pos: position{line: 429, col: 5, offset: 12625},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 429, col: 5, offset: 12625},
									val:        "left",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 429, col: 13, offset: 12633},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 430, col: 5, offset: 12662},
						run: (*parser).callonJoinStyle14,
						expr: &seqExpr{
							pos: position{line: 430, col: 5, offset: 12662},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 430, col: 5, offset: 12662},
									val:        "right",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 430, col: 13, offset: 12670},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 431, col: 5, offset: 12700},
						run: (*parser).callonJoinStyle18,
						expr: &litMatcher{
							pos:        position{line: 431, col: 5, offset: 12700},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "JoinRightInput",
			pos:  position{line: 433, col: 1, offset: 12735},
			expr: &choiceExpr{
				pos: position{line: 434, col: 5, offset: 12754},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 434, col: 5, offset: 12754},
						run: (*parser).callonJoinRightInput2,
						expr: &seqExpr{
							pos: position{line: 434, col: 5, offset: 12754},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 434, col: 5, offset: 12754},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 434, col: 8, offset: 12757},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 434, col: 12, offset: 12761},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 434, col: 15, offset: 12764},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 434, col: 17, offset: 12766},
										name: "Seq",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 434, col: 21, offset: 12770},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 434, col: 24, offset: 12773},
									val:        ")",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 434, col: 28, offset: 12777},
									name: "__",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 435, col: 5, offset: 12802},
						run: (*parser).callonJoinRightInput12,
						expr: &ruleRefExpr{
							pos:  position{line: 435, col: 5, offset: 12802},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 437, col: 1, offset: 12825},
			expr: &choiceExpr{
				pos: position{line: 438, col: 5, offset: 12837},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 438, col: 5, offset: 12837},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 439, col: 5, offset: 12846},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 439, col: 5, offset: 12846},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 439, col: 5, offset: 12846},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 439, col: 9, offset: 12850},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 439, col: 14, offset: 12855},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 439, col: 19, offset: 12860},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SampleOp",
			pos:  position{line: 441, col: 1, offset: 12886},
			expr: &actionExpr{
				pos: position{line: 442, col: 5, offset: 12899},
				run: (*parser).callonSampleOp1,
				expr: &seqExpr{
					pos: position{line: 442, col: 5, offset: 12899},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 442, col: 5, offset: 12899},
							val:        "sample",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 442, col: 14, offset: 12908},
							expr: &ruleRefExpr{
								pos:  position{line: 442, col: 15, offset: 12909},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 442, col: 20, offset: 12914},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 442, col: 22, offset: 12916},
								name: "SampleExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "OpAssignment",
			pos:  position{line: 449, col: 1, offset: 13264},
			expr: &actionExpr{
				pos: position{line: 450, col: 5, offset: 13281},
				run: (*parser).callonOpAssignment1,
				expr: &labeledExpr{
					pos:   position{line: 450, col: 5, offset: 13281},
					label: "a",
					expr: &ruleRefExpr{
						pos:  position{line: 450, col: 7, offset: 13283},
						name: "Assignments",
					},
				},
			},
		},
		{
			name: "SampleExpr",
			pos:  position{line: 454, col: 1, offset: 13383},
			expr: &choiceExpr{
				pos: position{line: 455, col: 5, offset: 13398},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 455, col: 5, offset: 13398},
						run: (*parser).callonSampleExpr2,
						expr: &seqExpr{
							pos: position{line: 455, col: 5, offset: 13398},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 455, col: 5, offset: 13398},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 455, col: 7, offset: 13400},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 455, col: 12, offset: 13405},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 456, col: 5, offset: 13435},
						run: (*parser).callonSampleExpr7,
						expr: &litMatcher{
							pos:        position{line: 456, col: 5, offset: 13435},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LoadOp",
			pos:  position{line: 458, col: 1, offset: 13508},
			expr: &actionExpr{
				pos: position{line: 459, col: 5, offset: 13519},
				run: (*parser).callonLoadOp1,
				expr: &seqExpr{
					pos: position{line: 459, col: 5, offset: 13519},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 459, col: 5, offset: 13519},
							val:        "load",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 459, col: 12, offset: 13526},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 459, col: 14, offset: 13528},
							label: "pool",
							expr: &ruleRefExpr{
								pos:  position{line: 459, col: 19, offset: 13533},
								name: "PoolNameString",
							},
						},
						&labeledExpr{
							pos:   position{line: 459, col: 34, offset: 13548},
							label: "branch",
							expr: &zeroOrOneExpr{
								pos: position{line: 459, col: 41, offset: 13555},
								expr: &ruleRefExpr{
									pos:  position{line: 459, col: 41, offset: 13555},
									name: "PoolBranch",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 459, col: 53, offset: 13567},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 459, col: 60, offset: 13574},
								expr: &ruleRefExpr{
									pos:  position{line: 459, col: 60, offset: 13574},
									name: "AuthorArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 459, col: 71, offset: 13585},
							label: "message",
							expr: &zeroOrOneExpr{
								pos: position{line: 459, col: 79, offset: 13593},
								expr: &ruleRefExpr{
									pos:  position{line: 459, col: 79, offset: 13593},
									name: "MessageArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 459, col: 91, offset: 13605},
							label: "meta",
							expr: &zeroOrOneExpr{
								pos: position{line: 459, col: 96, offset: 13610},
								expr: &ruleRefExpr{
									pos:  position{line: 459, col: 96, offset: 13610},
									name: "MetaArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AuthorArg",
			pos:  position{line: 463, col: 1, offset: 13769},
			expr: &actionExpr{
				pos: position{line: 464, col: 5, offset: 13783},
				run: (*parser).callonAuthorArg1,
				expr: &seqExpr{
					pos: position{line: 464, col: 5, offset: 13783},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 464, col: 5, offset: 13783},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 464, col: 7, offset: 13785},
							val:        "author",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 464, col: 16, offset: 13794},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 464, col: 18, offset: 13796},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 464, col: 22, offset: 13800},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "MessageArg",
			pos:  position{line: 466, col: 1, offset: 13834},
			expr: &actionExpr{
				pos: position{line: 467, col: 5, offset: 13849},
				run: (*parser).callonMessageArg1,
				expr: &seqExpr{
					pos: position{line: 467, col: 5, offset: 13849},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 467, col: 5, offset: 13849},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 467, col: 7, offset: 13851},
							val:        "message",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 467, col: 17, offset: 13861},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 467, col: 19, offset: 13863},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 467, col: 23, offset: 13867},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "MetaArg",
			pos:  position{line: 469, col: 1, offset: 13901},
			expr: &actionExpr{
				pos: position{line: 470, col: 5, offset: 13913},
				run: (*parser).callonMetaArg1,
				expr: &seqExpr{
					pos: position{line: 470, col: 5, offset: 13913},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 470, col: 5, offset: 13913},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 470, col: 7, offset: 13915},
							val:        "meta",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 470, col: 14, offset: 13922},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 470, col: 16, offset: 13924},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 470, col: 20, offset: 13928},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolBranch",
			pos:  position{line: 472, col: 1, offset: 13962},
			expr: &actionExpr{
				pos: position{line: 473, col: 5, offset: 13977},
				run: (*parser).callonPoolBranch1,
				expr: &seqExpr{
					pos: position{line: 473, col: 5, offset: 13977},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 473, col: 5, offset: 13977},
							val:        "@",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 473, col: 9, offset: 13981},
							label: "branch",
							expr: &choiceExpr{
								pos: position{line: 473, col: 17, offset: 13989},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 473, col: 17, offset: 13989},
										name: "PoolIdentifier",
									},
									&ruleRefExpr{
										pos:  position{line: 473, col: 34, offset: 14006},
										name: "QuotedString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FromOp",
			pos:  position{line: 475, col: 1, offset: 14044},
			expr: &actionExpr{
				pos: position{line: 476, col: 5, offset: 14055},
				run: (*parser).callonFromOp1,
				expr: &labeledExpr{
					pos:   position{line: 476, col: 5, offset: 14055},
					label: "source",
					expr: &ruleRefExpr{
						pos:  position{line: 476, col: 12, offset: 14062},
						name: "FromAny",
					},
				},
			},
		},
		{
			name: "FromAny",
			pos:  position{line: 480, col: 1, offset: 14220},
			expr: &choiceExpr{
				pos: position{line: 481, col: 5, offset: 14232},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 481, col: 5, offset: 14232},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 482, col: 5, offset: 14241},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 483, col: 5, offset: 14249},
						name: "From",
					},
				},
			},
		},
		{
			name: "File",
			pos:  position{line: 485, col: 1, offset: 14255},
			expr: &actionExpr{
				pos: position{line: 486, col: 5, offset: 14264},
				run: (*parser).callonFile1,
				expr: &seqExpr{
					pos: position{line: 486, col: 5, offset: 14264},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 486, col: 5, offset: 14264},
							val:        "file",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 486, col: 12, offset: 14271},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 486, col: 14, offset: 14273},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 486, col: 19, offset: 14278},
								name: "Path",
							},
						},
						&labeledExpr{
							pos:   position{line: 486, col: 24, offset: 14283},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 486, col: 31, offset: 14290},
								expr: &ruleRefExpr{
									pos:  position{line: 486, col: 31, offset: 14290},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 486, col: 42, offset: 14301},
							label: "sort_key",
							expr: &zeroOrOneExpr{
								pos: position{line: 486, col: 51, offset: 14310},
								expr: &ruleRefExpr{
									pos:  position{line: 486, col: 51, offset: 14310},
									name: "SortKeyArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "From",
			pos:  position{line: 490, col: 1, offset: 14442},
			expr: &actionExpr{
				pos: position{line: 491, col: 5, offset: 14451},
				run: (*parser).callonFrom1,
				expr: &seqExpr{
					pos: position{line: 491, col: 5, offset: 14451},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 491, col: 5, offset: 14451},
							val:        "from",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 491, col: 12, offset: 14458},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 491, col: 14, offset: 14460},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 491, col: 19, offset: 14465},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "Pool",
			pos:  position{line: 493, col: 1, offset: 14496},
			expr: &actionExpr{
				pos: position{line: 494, col: 5, offset: 14505},
				run: (*parser).callonPool1,
				expr: &seqExpr{
					pos: position{line: 494, col: 5, offset: 14505},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 494, col: 5, offset: 14505},
							val:        "pool",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 494, col: 12, offset: 14512},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 494, col: 14, offset: 14514},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 494, col: 19, offset: 14519},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolBody",
			pos:  position{line: 496, col: 1, offset: 14550},
			expr: &actionExpr{
				pos: position{line: 497, col: 5, offset: 14563},
				run: (*parser).callonPoolBody1,
				expr: &seqExpr{
					pos: position{line: 497, col: 5, offset: 14563},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 497, col: 5, offset: 14563},
							label: "spec",
							expr: &ruleRefExpr{
								pos:  position{line: 497, col: 10, offset: 14568},
								name: "PoolSpec",
							},
						},
						&labeledExpr{
							pos:   position{line: 497, col: 19, offset: 14577},
							label: "at",
							expr: &zeroOrOneExpr{
								pos: position{line: 497, col: 22, offset: 14580},
								expr: &ruleRefExpr{
									pos:  position{line: 497, col: 22, offset: 14580},
									name: "PoolAt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Get",
			pos:  position{line: 501, col: 1, offset: 14678},
			expr: &actionExpr{
				pos: position{line: 502, col: 5, offset: 14686},
				run: (*parser).callonGet1,
				expr: &seqExpr{
					pos: position{line: 502, col: 5, offset: 14686},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 502, col: 5, offset: 14686},
							val:        "get",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 502, col: 11, offset: 14692},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 502, col: 13, offset: 14694},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 502, col: 17, offset: 14698},
								name: "Path",
							},
						},
						&labeledExpr{
							pos:   position{line: 502, col: 22, offset: 14703},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 502, col: 29, offset: 14710},
								expr: &ruleRefExpr{
									pos:  position{line: 502, col: 29, offset: 14710},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 502, col: 40, offset: 14721},
							label: "sort_key",
							expr: &zeroOrOneExpr{
								pos: position{line: 502, col: 49, offset: 14730},
								expr: &ruleRefExpr{
									pos:  position{line: 502, col: 49, offset: 14730},
									name: "SortKeyArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 502, col: 61, offset: 14742},
							label: "method",
							expr: &zeroOrOneExpr{
								pos: position{line: 502, col: 68, offset: 14749},
								expr: &ruleRefExpr{
									pos:  position{line: 502, col: 68, offset: 14749},
									name: "MethodArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 502, col: 79, offset: 14760},
							label: "headers",
							expr: &zeroOrOneExpr{
								pos: position{line: 502, col: 87, offset: 14768},
								expr: &ruleRefExpr{
									pos:  position{line: 502, col: 87, offset: 14768},
									name: "HeadersArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 502, col: 99, offset: 14780},
							label: "body",
							expr: &zeroOrOneExpr{
								pos: position{line: 502, col: 104, offset: 14785},
								expr: &ruleRefExpr{
									pos:  position{line: 502, col: 104, offset: 14785},
									name: "BodyArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MethodArg",
			pos:  position{line: 521, col: 1, offset: 15075},
			expr: &actionExpr{
				pos: position{line: 521, col: 13, offset: 15087},
				run: (*parser).callonMethodArg1,
				expr: &seqExpr{
					pos: position{line: 521, col: 13, offset: 15087},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 521, col: 13, offset: 15087},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 521, col: 15, offset: 15089},
							val:        "method",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 521, col: 24, offset: 15098},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 521, col: 26, offset: 15100},
							label: "v",
							expr: &choiceExpr{
								pos: position{line: 521, col: 29, offset: 15103},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 521, col: 29, offset: 15103},
										name: "IdentifierName",
									},
									&ruleRefExpr{
										pos:  position{line: 521, col: 46, offset: 15120},
										name: "QuotedString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "HeadersArg",
			pos:  position{line: 523, col: 1, offset: 15153},
			expr: &actionExpr{
				pos: position{line: 523, col: 14, offset: 15166},
				run: (*parser).callonHeadersArg1,
				expr: &seqExpr{
					pos: position{line: 523, col: 14, offset: 15166},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 523, col: 14, offset: 15166},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 523, col: 16, offset: 15168},
							val:        "headers",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 523, col: 26, offset: 15178},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 523, col: 28, offset: 15180},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 523, col: 30, offset: 15182},
								name: "Record",
							},
						},
					},
				},
			},
		},
		{
			name: "BodyArg",
			pos:  position{line: 525, col: 1, offset: 15208},
			expr: &actionExpr{
				pos: position{line: 525, col: 11, offset: 15218},
				run: (*parser).callonBodyArg1,
				expr: &seqExpr{
					pos: position{line: 525, col: 11, offset: 15218},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 525, col: 11, offset: 15218},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 525, col: 13, offset: 15220},
							val:        "body",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 525, col: 20, offset: 15227},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 525, col: 22, offset: 15229},
							label: "v",
							expr: &choiceExpr{
								pos: position{line: 525, col: 25, offset: 15232},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 525, col: 25, offset: 15232},
										name: "IdentifierName",
									},
									&ruleRefExpr{
										pos:  position{line: 525, col: 42, offset: 15249},
										name: "QuotedString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Path",
			pos:  position{line: 527, col: 1, offset: 15282},
			expr: &choiceExpr{
				pos: position{line: 528, col: 5, offset: 15291},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 528, col: 5, offset: 15291},
						run: (*parser).callonPath2,
						expr: &labeledExpr{
							pos:   position{line: 528, col: 5, offset: 15291},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 528, col: 7, offset: 15293},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 529, col: 5, offset: 15384},
						run: (*parser).callonPath5,
						expr: &oneOrMoreExpr{
							pos: position{line: 529, col: 5, offset: 15384},
							expr: &charClassMatcher{
								pos:        position{line: 529, col: 5, offset: 15384},
								val:        "[0-9a-zA-Z!@$%^&*_=<>,./?:[\\]{}~+-]",
								chars:      []rune{'!', '@', '$', '%', '^', '&', '*', '_', '=', '<', '>', ',', '.', '/', '?', ':', '[', ']', '{', '}', '~', '+', '-'},
								ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PoolAt",
			pos:  position{line: 532, col: 1, offset: 15536},
			expr: &actionExpr{
				pos: position{line: 533, col: 5, offset: 15547},
				run: (*parser).callonPoolAt1,
				expr: &seqExpr{
					pos: position{line: 533, col: 5, offset: 15547},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 533, col: 5, offset: 15547},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 533, col: 7, offset: 15549},
							val:        "at",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 533, col: 12, offset: 15554},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 533, col: 14, offset: 15556},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 533, col: 17, offset: 15559},
								name: "KSUID",
							},
						},
					},
				},
			},
		},
		{
			name: "KSUID",
			pos:  position{line: 536, col: 1, offset: 15625},
			expr: &actionExpr{
				pos: position{line: 536, col: 9, offset: 15633},
				run: (*parser).callonKSUID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 536, col: 9, offset: 15633},
					expr: &charClassMatcher{
						pos:        position{line: 536, col: 10, offset: 15634},
						val:        "[0-9a-zA-Z]",
						ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "PoolSpec",
			pos:  position{line: 538, col: 1, offset: 15680},
			expr: &choiceExpr{
				pos: position{line: 539, col: 5, offset: 15693},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 539, col: 5, offset: 15693},
						run: (*parser).callonPoolSpec2,
						expr: &seqExpr{
							pos: position{line: 539, col: 5, offset: 15693},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 539, col: 5, offset: 15693},
									label: "pool",
									expr: &ruleRefExpr{
										pos:  position{line: 539, col: 10, offset: 15698},
										name: "PoolName",
									},
								},
								&labeledExpr{
									pos:   position{line: 539, col: 19, offset: 15707},
									label: "commit",
									expr: &zeroOrOneExpr{
										pos: position{line: 539, col: 26, offset: 15714},
										expr: &ruleRefExpr{
											pos:  position{line: 539, col: 26, offset: 15714},
											name: "PoolCommit",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 539, col: 38, offset: 15726},
									label: "meta",
									expr: &zeroOrOneExpr{
										pos: position{line: 539, col: 43, offset: 15731},
										expr: &ruleRefExpr{
											pos:  position{line: 539, col: 43, offset: 15731},
											name: "PoolMeta",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 539, col: 53, offset: 15741},
									label: "tap",
									expr: &ruleRefExpr{
										pos:  position{line: 539, col: 57, offset: 15745},
										name: "TapArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 542, col: 5, offset: 15863},
						run: (*parser).callonPoolSpec14,
						expr: &labeledExpr{
							pos:   position{line: 542, col: 5, offset: 15863},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 542, col: 10, offset: 15868},
								name: "PoolMeta",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolCommit",
			pos:  position{line: 546, col: 1, offset: 15969},
			expr: &actionExpr{
				pos: position{line: 547, col: 5, offset: 15984},
				run: (*parser).callonPoolCommit1,
				expr: &seqExpr{
					pos: position{line: 547, col: 5, offset: 15984},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 547, col: 5, offset: 15984},
							val:        "@",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 547, col: 9, offset: 15988},
							label: "commit",
							expr: &ruleRefExpr{
								pos:  position{line: 547, col: 16, offset: 15995},
								name: "PoolNameString",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolMeta",
			pos:  position{line: 549, col: 1, offset: 16034},
			expr: &actionExpr{
				pos: position{line: 550, col: 5, offset: 16047},
				run: (*parser).callonPoolMeta1,
				expr: &seqExpr{
					pos: position{line: 550, col: 5, offset: 16047},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 550, col: 5, offset: 16047},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 550, col: 9, offset: 16051},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 550, col: 14, offset: 16056},
								name: "PoolIdentifier",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolName",
			pos:  position{line: 552, col: 1, offset: 16093},
			expr: &choiceExpr{
				pos: position{line: 553, col: 5, offset: 16106},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 553, col: 5, offset: 16106},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 554, col: 5, offset: 16117},
						name: "Glob",
					},
					&actionExpr{
						pos: position{line: 555, col: 5, offset: 16126},
						run: (*parser).callonPoolName4,
						expr: &seqExpr{
							pos: position{line: 555, col: 5, offset: 16126},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 555, col: 5, offset: 16126},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 555, col: 9, offset: 16130},
									expr: &ruleRefExpr{
										pos:  position{line: 555, col: 10, offset: 16131},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 556, col: 5, offset: 16216},
						run: (*parser).callonPoolName9,
						expr: &labeledExpr{
							pos:   position{line: 556, col: 5, offset: 16216},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 556, col: 10, offset: 16221},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 557, col: 5, offset: 16315},
						run: (*parser).callonPoolName12,
						expr: &labeledExpr{
							pos:   position{line: 557, col: 5, offset: 16315},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 557, col: 10, offset: 16320},
								name: "PoolNameString",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolNameString",
			pos:  position{line: 559, col: 1, offset: 16407},
			expr: &choiceExpr{
				pos: position{line: 560, col: 5, offset: 16426},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 560, col: 5, offset: 16426},
						name: "PoolIdentifier",
					},
					&ruleRefExpr{
						pos:  position{line: 561, col: 5, offset: 16445},
						name: "KSUID",
					},
					&ruleRefExpr{
						pos:  position{line: 562, col: 5, offset: 16455},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "PoolIdentifier",
			pos:  position{line: 564, col: 1, offset: 16469},
			expr: &actionExpr{
				pos: position{line: 565, col: 5, offset: 16488},
				run: (*parser).callonPoolIdentifier1,
				expr: &seqExpr{
					pos: position{line: 565, col: 5, offset: 16488},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 565, col: 6, offset: 16489},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 565, col: 6, offset: 16489},
									name: "IdentifierStart",
								},
								&litMatcher{
									pos:        position{line: 565, col: 24, offset: 16507},
									val:        ".",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 565, col: 29, offset: 16512},
							expr: &choiceExpr{
								pos: position{line: 565, col: 30, offset: 16513},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 565, col: 30, offset: 16513},
										name: "IdentifierRest",
									},
									&litMatcher{
										pos:        position{line: 565, col: 47, offset: 16530},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortKeyArg",
			pos:  position{line: 567, col: 1, offset: 16568},
			expr: &actionExpr{
				pos: position{line: 568, col: 5, offset: 16583},
				run: (*parser).callonSortKeyArg1,
				expr: &seqExpr{
					pos: position{line: 568, col: 5, offset: 16583},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 568, col: 5, offset: 16583},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 568, col: 7, offset: 16585},
							val:        "order",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 568, col: 15, offset: 16593},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 568, col: 17, offset: 16595},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 568, col: 22, offset: 16600},
								name: "FieldExprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 568, col: 33, offset: 16611},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 568, col: 39, offset: 16617},
								name: "OrderSuffix",
							},
						},
					},
				},
			},
		},
		{
			name: "TapArg",
			pos:  position{line: 572, col: 1, offset: 16728},
			expr: &choiceExpr{
				pos: position{line: 573, col: 5, offset: 16739},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 573, col: 5, offset: 16739},
						run: (*parser).callonTapArg2,
						expr: &seqExpr{
							pos: position{line: 573, col: 5, offset: 16739},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 573, col: 5, offset: 16739},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 573, col: 7, offset: 16741},
									val:        "tap",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 574, col: 5, offset: 16772},
						run: (*parser).callonTapArg6,
						expr: &litMatcher{
							pos:        position{line: 574, col: 5, offset: 16772},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FormatArg",
			pos:  position{line: 576, col: 1, offset: 16798},
			expr: &actionExpr{
				pos: position{line: 577, col: 5, offset: 16812},
				run: (*parser).callonFormatArg1,
				expr: &seqExpr{
					pos: position{line: 577, col: 5, offset: 16812},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 577, col: 5, offset: 16812},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 577, col: 7, offset: 16814},
							val:        "format",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 577, col: 16, offset: 16823},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 577, col: 18, offset: 16825},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 577, col: 22, offset: 16829},
								name: "IdentifierName",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderSuffix",
			pos:  position{line: 579, col: 1, offset: 16865},
			expr: &choiceExpr{
				pos: position{line: 580, col: 5, offset: 16881},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 580, col: 5, offset: 16881},
						run: (*parser).callonOrderSuffix2,
						expr: &litMatcher{
							pos:        position{line: 580, col: 5, offset: 16881},
							val:        ":asc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 581, col: 5, offset: 16915},
						run: (*parser).callonOrderSuffix4,
						expr: &litMatcher{
							pos:        position{line: 581, col: 5, offset: 16915},
							val:        ":desc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 582, col: 5, offset: 16950},
						run: (*parser).callonOrderSuffix6,
						expr: &litMatcher{
							pos:        position{line: 582, col: 5, offset: 16950},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PassOp",
			pos:  position{line: 584, col: 1, offset: 16981},
			expr: &actionExpr{
				pos: position{line: 585, col: 5, offset: 16992},
				run: (*parser).callonPassOp1,
				expr: &seqExpr{
					pos: position{line: 585, col: 5, offset: 16992},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 585, col: 5, offset: 16992},
							val:        "pass",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 585, col: 12, offset: 16999},
							expr: &ruleRefExpr{
								pos:  position{line: 585, col: 13, offset: 17000},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "ExplodeOp",
			pos:  position{line: 591, col: 1, offset: 17193},
			expr: &actionExpr{
				pos: position{line: 592, col: 5, offset: 17207},
				run: (*parser).callonExplodeOp1,
				expr: &seqExpr{
					pos: position{line: 592, col: 5, offset: 17207},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 592, col: 5, offset: 17207},
							val:        "explode",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 592, col: 15, offset: 17217},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 592, col: 17, offset: 17219},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 592, col: 22, offset: 17224},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 592, col: 28, offset: 17230},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 592, col: 32, offset: 17234},
								name: "TypeArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 592, col: 40, offset: 17242},
							label: "as",
							expr: &zeroOrOneExpr{
								pos: position{line: 592, col: 43, offset: 17245},
								expr: &ruleRefExpr{
									pos:  position{line: 592, col: 43, offset: 17245},
									name: "AsArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MergeOp",
			pos:  position{line: 596, col: 1, offset: 17358},
			expr: &actionExpr{
				pos: position{line: 597, col: 5, offset: 17370},
				run: (*parser).callonMergeOp1,
				expr: &seqExpr{
					pos: position{line: 597, col: 5, offset: 17370},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 597, col: 5, offset: 17370},
							val:        "merge",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 597, col: 13, offset: 17378},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 597, col: 15, offset: 17380},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 597, col: 20, offset: 17385},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "OverOp",
			pos:  position{line: 601, col: 1, offset: 17471},
			expr: &actionExpr{
				pos: position{line: 602, col: 5, offset: 17482},
				run: (*parser).callonOverOp1,
				expr: &seqExpr{
					pos: position{line: 602, col: 5, offset: 17482},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 602, col: 5, offset: 17482},
							val:        "over",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 602, col: 12, offset: 17489},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 602, col: 14, offset: 17491},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 602, col: 20, offset: 17497},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 602, col: 26, offset: 17503},
							label: "locals",
							expr: &zeroOrOneExpr{
								pos: position{line: 602, col: 33, offset: 17510},
								expr: &ruleRefExpr{
									pos:  position{line: 602, col: 33, offset: 17510},
									name: "Locals",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 602, col: 41, offset: 17518},
							label: "body",
							expr: &zeroOrOneExpr{
								pos: position{line: 602, col: 46, offset: 17523},
								expr: &ruleRefExpr{
									pos:  position{line: 602, col: 46, offset: 17523},
									name: "Lateral",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Lateral",
			pos:  position{line: 606, col: 1, offset: 17646},
			expr: &choiceExpr{
				pos: position{line: 607, col: 5, offset: 17658},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 607, col: 5, offset: 17658},
						run: (*parser).callonLateral2,
						expr: &seqExpr{
							pos: position{line: 607, col: 5, offset: 17658},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 607, col: 5, offset: 17658},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 607, col: 8, offset: 17661},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 607, col: 13, offset: 17666},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 607, col: 16, offset: 17669},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 607, col: 20, offset: 17673},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 607, col: 23, offset: 17676},
									label: "scope",
									expr: &ruleRefExpr{
										pos:  position{line: 607, col: 29, offset: 17682},
										name: "Scope",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 607, col: 35, offset: 17688},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 607, col: 38, offset: 17691},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 608, col: 5, offset: 17721},
						run: (*parser).callonLateral13,
						expr: &seqExpr{
							pos: position{line: 608, col: 5, offset: 17721},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 608, col: 5, offset: 17721},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 608, col: 8, offset: 17724},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 608, col: 13, offset: 17729},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 608, col: 16, offset: 17732},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 608, col: 20, offset: 17736},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 608, col: 23, offset: 17739},
									label: "seq",
									expr: &ruleRefExpr{
										pos:  position{line: 608, col: 27, offset: 17743},
										name: "Seq",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 608, col: 31, offset: 17747},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 608, col: 34, offset: 17750},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Locals",
			pos:  position{line: 610, col: 1, offset: 17775},
			expr: &actionExpr{
				pos: position{line: 611, col: 5, offset: 17786},
				run: (*parser).callonLocals1,
				expr: &seqExpr{
					pos: position{line: 611, col: 5, offset: 17786},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 611, col: 5, offset: 17786},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 611, col: 7, offset: 17788},
							val:        "with",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 611, col: 14, offset: 17795},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 611, col: 16, offset: 17797},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 611, col: 22, offset: 17803},
								name: "LocalsAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 611, col: 39, offset: 17820},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 611, col: 44, offset: 17825},
								expr: &actionExpr{
									pos: position{line: 611, col: 45, offset: 17826},
									run: (*parser).callonLocals10,
									expr: &seqExpr{
										pos: position{line: 611, col: 45, offset: 17826},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 611, col: 45, offset: 17826},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 611, col: 48, offset: 17829},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 611, col: 52, offset: 17833},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 611, col: 55, offset: 17836},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 611, col: 57, offset: 17838},
													name: "LocalsAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocalsAssignment",
			pos:  position{line: 615, col: 1, offset: 17959},
			expr: &actionExpr{
				pos: position{line: 616, col: 5, offset: 17980},
				run: (*parser).callonLocalsAssignment1,
				expr: &seqExpr{
					pos: position{line: 616, col: 5, offset: 17980},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 616, col: 5, offset: 17980},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 616, col: 10, offset: 17985},
								name: "IdentifierName",
							},
						},
						&labeledExpr{
							pos:   position{line: 616, col: 25, offset: 18000},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 616, col: 29, offset: 18004},
								expr: &seqExpr{
									pos: position{line: 616, col: 30, offset: 18005},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 616, col: 30, offset: 18005},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 616, col: 33, offset: 18008},
											val:        "=",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 616, col: 37, offset: 18012},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 616, col: 40, offset: 18015},
											name: "Expr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "YieldOp",
			pos:  position{line: 624, col: 1, offset: 18236},
			expr: &actionExpr{
				pos: position{line: 625, col: 5, offset: 18248},
				run: (*parser).callonYieldOp1,
				expr: &seqExpr{
					pos: position{line: 625, col: 5, offset: 18248},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 625, col: 5, offset: 18248},
							val:        "yield",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 625, col: 13, offset: 18256},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 625, col: 15, offset: 18258},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 625, col: 21, offset: 18264},
								name: "Exprs",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeArg",
			pos:  position{line: 629, col: 1, offset: 18353},
			expr: &actionExpr{
				pos: position{line: 630, col: 5, offset: 18365},
				run: (*parser).callonTypeArg1,
				expr: &seqExpr{
					pos: position{line: 630, col: 5, offset: 18365},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 630, col: 5, offset: 18365},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 630, col: 7, offset: 18367},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 630, col: 10, offset: 18370},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 630, col: 12, offset: 18372},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 630, col: 16, offset: 18376},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "AsArg",
			pos:  position{line: 632, col: 1, offset: 18402},
			expr: &actionExpr{
				pos: position{line: 633, col: 5, offset: 18412},
				run: (*parser).callonAsArg1,
				expr: &seqExpr{
					pos: position{line: 633, col: 5, offset: 18412},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 633, col: 5, offset: 18412},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 633, col: 7, offset: 18414},
							name: "AS",
						},
						&ruleRefExpr{
							pos:  position{line: 633, col: 10, offset: 18417},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 633, col: 12, offset: 18419},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 633, col: 16, offset: 18423},
								name: "Lval",
							},
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 637, col: 1, offset: 18474},
			expr: &ruleRefExpr{
				pos:  position{line: 637, col: 8, offset: 18481},
				name: "DerefExpr",
			},
		},
		{
			name: "Lvals",
			pos:  position{line: 639, col: 1, offset: 18492},
			expr: &actionExpr{
				pos: position{line: 640, col: 5, offset: 18502},
				run: (*parser).callonLvals1,
				expr: &seqExpr{
					pos: position{line: 640, col: 5, offset: 18502},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 640, col: 5, offset: 18502},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 640, col: 11, offset: 18508},
								name: "Lval",
							},
						},
						&labeledExpr{
							pos:   position{line: 640, col: 16, offset: 18513},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 640, col: 21, offset: 18518},
								expr: &actionExpr{
									pos: position{line: 640, col: 22, offset: 18519},
									run: (*parser).callonLvals7,
									expr: &seqExpr{
										pos: position{line: 640, col: 22, offset: 18519},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 640, col: 22, offset: 18519},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 640, col: 25, offset: 18522},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 640, col: 29, offset: 18526},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 640, col: 32, offset: 18529},
												label: "lval",
												expr: &ruleRefExpr{
													pos:  position{line: 640, col: 37, offset: 18534},
													name: "Lval",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 644, col: 1, offset: 18646},
			expr: &ruleRefExpr{
				pos:  position{line: 644, col: 13, offset: 18658},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 646, col: 1, offset: 18664},
			expr: &actionExpr{
				pos: position{line: 647, col: 5, offset: 18679},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 647, col: 5, offset: 18679},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 647, col: 5, offset: 18679},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 647, col: 11, offset: 18685},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 647, col: 21, offset: 18695},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 647, col: 26, offset: 18700},
								expr: &seqExpr{
									pos: position{line: 647, col: 27, offset: 18701},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 647, col: 27, offset: 18701},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 647, col: 30, offset: 18704},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 647, col: 34, offset: 18708},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 647, col: 37, offset: 18711},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignments",
			pos:  position{line: 657, col: 1, offset: 18910},
			expr: &actionExpr{
				pos: position{line: 658, col: 5, offset: 18926},
				run: (*parser).callonAssignments1,
				expr: &seqExpr{
					pos: position{line: 658, col: 5, offset: 18926},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 658, col: 5, offset: 18926},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 658, col: 11, offset: 18932},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 658, col: 22, offset: 18943},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 658, col: 27, offset: 18948},
								expr: &actionExpr{
									pos: position{line: 658, col: 28, offset: 18949},
									run: (*parser).callonAssignments7,
									expr: &seqExpr{
										pos: position{line: 658, col: 28, offset: 18949},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 658, col: 28, offset: 18949},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 658, col: 31, offset: 18952},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 658, col: 35, offset: 18956},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 658, col: 38, offset: 18959},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 658, col: 40, offset: 18961},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 662, col: 1, offset: 19072},
			expr: &actionExpr{
				pos: position{line: 663, col: 5, offset: 19087},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 663, col: 5, offset: 19087},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 663, col: 5, offset: 19087},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 663, col: 9, offset: 19091},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 663, col: 14, offset: 19096},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 663, col: 17, offset: 19099},
							val:        ":=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 663, col: 22, offset: 19104},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 663, col: 25, offset: 19107},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 663, col: 29, offset: 19111},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 665, col: 1, offset: 19202},
			expr: &ruleRefExpr{
				pos:  position{line: 665, col: 8, offset: 19209},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 667, col: 1, offset: 19226},
			expr: &actionExpr{
				pos: position{line: 668, col: 5, offset: 19246},
				run: (*parser).callonConditionalExpr1,
				expr: &seqExpr{
					pos: position{line: 668, col: 5, offset: 19246},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 668, col: 5, offset: 19246},
							label: "cond",
							expr: &ruleRefExpr{
								pos:  position{line: 668, col: 10, offset: 19251},
								name: "LogicalOrExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 668, col: 24, offset: 19265},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 668, col: 28, offset: 19269},
								expr: &seqExpr{
									pos: position{line: 668, col: 29, offset: 19270},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 668, col: 29, offset: 19270},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 668, col: 32, offset: 19273},
											val:        "?",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 668, col: 36, offset: 19277},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 668, col: 39, offset: 19280},
											name: "Expr",
										},
										&ruleRefExpr{
											pos:  position{line: 668, col: 44, offset: 19285},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 668, col: 47, offset: 19288},
											val:        ":",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 668, col: 51, offset: 19292},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 668, col: 54, offset: 19295},
											name: "Expr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 677, col: 1, offset: 19556},
			expr: &actionExpr{
				pos: position{line: 678, col: 5, offset: 19574},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 678, col: 5, offset: 19574},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 678, col: 5, offset: 19574},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 678, col: 11, offset: 19580},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 679, col: 5, offset: 19599},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 679, col: 10, offset: 19604},
								expr: &actionExpr{
									pos: position{line: 679, col: 11, offset: 19605},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 679, col: 11, offset: 19605},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 679, col: 11, offset: 19605},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 679, col: 14, offset: 19608},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 679, col: 17, offset: 19611},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 679, col: 25, offset: 19619},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 679, col: 28, offset: 19622},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 679, col: 33, offset: 19627},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 683, col: 1, offset: 19746},
			expr: &actionExpr{
				pos: position{line: 684, col: 5, offset: 19765},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 684, col: 5, offset: 19765},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 684, col: 5, offset: 19765},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 684, col: 11, offset: 19771},
								name: "ComparisonExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 685, col: 5, offset: 19790},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 685, col: 10, offset: 19795},
								expr: &actionExpr{
									pos: position{line: 685, col: 11, offset: 19796},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 685, col: 11, offset: 19796},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 685, col: 11, offset: 19796},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 685, col: 14, offset: 19799},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 685, col: 17, offset: 19802},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 685, col: 26, offset: 19811},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 685, col: 29, offset: 19814},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 685, col: 34, offset: 19819},
													name: "ComparisonExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ComparisonExpr",
			pos:  position{line: 689, col: 1, offset: 19938},
			expr: &actionExpr{
				pos: position{line: 690, col: 5, offset: 19957},
				run: (*parser).callonComparisonExpr1,
				expr: &seqExpr{
					pos: position{line: 690, col: 5, offset: 19957},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 690, col: 5, offset: 19957},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 690, col: 9, offset: 19961},
								name: "AdditiveExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 690, col: 22, offset: 19974},
							label: "opAndRHS",
							expr: &zeroOrOneExpr{
								pos: position{line: 690, col: 31, offset: 19983},
								expr: &choiceExpr{
									pos: position{line: 690, col: 32, offset: 19984},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 690, col: 32, offset: 19984},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 690, col: 32, offset: 19984},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 690, col: 35, offset: 19987},
													name: "Comparator",
												},
												&ruleRefExpr{
													pos:  position{line: 690, col: 46, offset: 19998},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 690, col: 49, offset: 20001},
													name: "AdditiveExpr",
												},
											},
										},
										&seqExpr{
											pos: position{line: 690, col: 64, offset: 20016},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 690, col: 64, offset: 20016},
													name: "__",
												},
												&actionExpr{
													pos: position{line: 690, col: 68, offset: 20020},
													run: (*parser).callonComparisonExpr15,
													expr: &litMatcher{
														pos:        position{line: 690, col: 68, offset: 20020},
														val:        "~",
														ignoreCase: false,
													},
												},
												&ruleRefExpr{
													pos:  position{line: 690, col: 104, offset: 20056},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 690, col: 107, offset: 20059},
													name: "Regexp",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 699, col: 1, offset: 20320},
			expr: &actionExpr{
				pos: position{line: 700, col: 5, offset: 20337},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 700, col: 5, offset: 20337},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 700, col: 5, offset: 20337},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 700, col: 11, offset: 20343},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 701, col: 5, offset: 20366},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 701, col: 10, offset: 20371},
								expr: &actionExpr{
									pos: position{line: 701, col: 11, offset: 20372},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 701, col: 11, offset: 20372},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 701, col: 11, offset: 20372},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 701, col: 14, offset: 20375},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 701, col: 17, offset: 20378},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 701, col: 34, offset: 20395},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 701, col: 37, offset: 20398},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 701, col: 42, offset: 20403},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 705, col: 1, offset: 20526},
			expr: &actionExpr{
				pos: position{line: 705, col: 20, offset: 20545},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 705, col: 21, offset: 20546},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 705, col: 21, offset: 20546},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 705, col: 27, offset: 20552},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 707, col: 1, offset: 20589},
			expr: &actionExpr{
				pos: position{line: 708, col: 5, offset: 20612},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 708, col: 5, offset: 20612},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 708, col: 5, offset: 20612},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 708, col: 11, offset: 20618},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 709, col: 5, offset: 20630},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 709, col: 10, offset: 20635},
								expr: &actionExpr{
									pos: position{line: 709, col: 11, offset: 20636},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 709, col: 11, offset: 20636},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 709, col: 11, offset: 20636},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 709, col: 14, offset: 20639},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 709, col: 17, offset: 20642},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 709, col: 40, offset: 20665},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 709, col: 43, offset: 20668},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 709, col: 48, offset: 20673},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 713, col: 1, offset: 20785},
			expr: &actionExpr{
				pos: position{line: 713, col: 26, offset: 20810},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 713, col: 27, offset: 20811},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 713, col: 27, offset: 20811},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 713, col: 33, offset: 20817},
							val:        "/",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 713, col: 39, offset: 20823},
							val:        "%",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 715, col: 1, offset: 20860},
			expr: &choiceExpr{
				pos: position{line: 716, col: 5, offset: 20872},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 716, col: 5, offset: 20872},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 716, col: 5, offset: 20872},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 716, col: 5, offset: 20872},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 716, col: 9, offset: 20876},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 716, col: 12, offset: 20879},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 716, col: 14, offset: 20881},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 719, col: 5, offset: 20990},
						name: "NegationExpr",
					},
				},
			},
		},
		{
			name: "NegationExpr",
			pos:  position{line: 721, col: 1, offset: 21004},
			expr: &choiceExpr{
				pos: position{line: 722, col: 5, offset: 21021},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 722, col: 5, offset: 21021},
						run: (*parser).callonNegationExpr2,
						expr: &seqExpr{
							pos: position{line: 722, col: 5, offset: 21021},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 722, col: 5, offset: 21021},
									expr: &ruleRefExpr{
										pos:  position{line: 722, col: 6, offset: 21022},
										name: "Literal",
									},
								},
								&litMatcher{
									pos:        position{line: 722, col: 14, offset: 21030},
									val:        "-",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 722, col: 18, offset: 21034},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 722, col: 21, offset: 21037},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 722, col: 23, offset: 21039},
										name: "FuncExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 725, col: 5, offset: 21149},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 727, col: 1, offset: 21159},
			expr: &choiceExpr{
				pos: position{line: 728, col: 5, offset: 21172},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 728, col: 5, offset: 21172},
						run: (*parser).callonFuncExpr2,
						expr: &seqExpr{
							pos: position{line: 728, col: 5, offset: 21172},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 728, col: 5, offset: 21172},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 728, col: 11, offset: 21178},
										name: "Cast",
									},
								},
								&labeledExpr{
									pos:   position{line: 728, col: 16, offset: 21183},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 728, col: 21, offset: 21188},
										expr: &ruleRefExpr{
											pos:  position{line: 728, col: 22, offset: 21189},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 731, col: 5, offset: 21260},
						run: (*parser).callonFuncExpr9,
						expr: &seqExpr{
							pos: position{line: 731, col: 5, offset: 21260},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 731, col: 5, offset: 21260},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 731, col: 11, offset: 21266},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 731, col: 20, offset: 21275},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 731, col: 25, offset: 21280},
										expr: &ruleRefExpr{
											pos:  position{line: 731, col: 26, offset: 21281},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 734, col: 5, offset: 21352},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 735, col: 5, offset: 21366},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FuncGuard",
			pos:  position{line: 737, col: 1, offset: 21375},
			expr: &seqExpr{
				pos: position{line: 737, col: 13, offset: 21387},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 737, col: 13, offset: 21387},
						name: "NotFuncs",
					},
					&ruleRefExpr{
						pos:  position{line: 737, col: 22, offset: 21396},
						name: "__",
					},
					&litMatcher{
						pos:        position{line: 737, col: 25, offset: 21399},
						val:        "(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "NotFuncs",
			pos:  position{line: 739, col: 1, offset: 21404},
			expr: &choiceExpr{
				pos: position{line: 740, col: 5, offset: 21417},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 740, col: 5, offset: 21417},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 741, col: 5, offset: 21427},
						val:        "select",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Cast",
			pos:  position{line: 743, col: 1, offset: 21437},
			expr: &actionExpr{
				pos: position{line: 744, col: 5, offset: 21446},
				run: (*parser).callonCast1,
				expr: &seqExpr{
					pos: position{line: 744, col: 5, offset: 21446},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 744, col: 5, offset: 21446},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 744, col: 9, offset: 21450},
								name: "CastType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 744, col: 18, offset: 21459},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 744, col: 21, offset: 21462},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 744, col: 25, offset: 21466},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 744, col: 28, offset: 21469},
							label: "expr",
							expr: &choiceExpr{
								pos: position{line: 744, col: 34, offset: 21475},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 744, col: 34, offset: 21475},
										name: "OverExpr",
									},
									&ruleRefExpr{
										pos:  position{line: 744, col: 45, offset: 21486},
										name: "Expr",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 744, col: 51, offset: 21492},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 744, col: 54, offset: 21495},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 748, col: 1, offset: 21592},
			expr: &choiceExpr{
				pos: position{line: 749, col: 5, offset: 21605},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 749, col: 5, offset: 21605},
						name: "Grep",
					},
					&actionExpr{
						pos: position{line: 751, col: 5, offset: 21692},
						run: (*parser).callonFunction3,
						expr: &seqExpr{
							pos: position{line: 751, col: 5, offset: 21692},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 751, col: 5, offset: 21692},
									val:        "regexp",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 751, col: 14, offset: 21701},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 751, col: 17, offset: 21704},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 751, col: 21, offset: 21708},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 751, col: 24, offset: 21711},
									label: "arg0Text",
									expr: &ruleRefExpr{
										pos:  position{line: 751, col: 33, offset: 21720},
										name: "RegexpPattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 751, col: 47, offset: 21734},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 751, col: 50, offset: 21737},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 751, col: 54, offset: 21741},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 751, col: 57, offset: 21744},
									label: "arg1",
									expr: &ruleRefExpr{
										pos:  position{line: 751, col: 62, offset: 21749},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 751, col: 67, offset: 21754},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 751, col: 70, offset: 21757},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 751, col: 74, offset: 21761},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 751, col: 80, offset: 21767},
										expr: &ruleRefExpr{
											pos:  position{line: 751, col: 80, offset: 21767},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 755, col: 5, offset: 22015},
						run: (*parser).callonFunction21,
						expr: &seqExpr{
							pos: position{line: 755, col: 5, offset: 22015},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 755, col: 5, offset: 22015},
									val:        "regexp_replace",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 755, col: 22, offset: 22032},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 755, col: 25, offset: 22035},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 755, col: 29, offset: 22039},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 755, col: 32, offset: 22042},
									label: "arg0",
									expr: &ruleRefExpr{
										pos:  position{line: 755, col: 37, offset: 22047},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 755, col: 42, offset: 22052},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 755, col: 45, offset: 22055},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 755, col: 49, offset: 22059},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 755, col: 52, offset: 22062},
									label: "arg1Text",
									expr: &ruleRefExpr{
										pos:  position{line: 755, col: 61, offset: 22071},
										name: "RegexpPattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 755, col: 75, offset: 22085},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 755, col: 78, offset: 22088},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 755, col: 82, offset: 22092},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 755, col: 85, offset: 22095},
									label: "arg2",
									expr: &ruleRefExpr{
										pos:  position{line: 755, col: 90, offset: 22100},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 755, col: 95, offset: 22105},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 755, col: 98, offset: 22108},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 755, col: 102, offset: 22112},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 755, col: 108, offset: 22118},
										expr: &ruleRefExpr{
											pos:  position{line: 755, col: 108, offset: 22118},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 759, col: 5, offset: 22380},
						run: (*parser).callonFunction44,
						expr: &seqExpr{
							pos: position{line: 759, col: 5, offset: 22380},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 759, col: 5, offset: 22380},
									expr: &ruleRefExpr{
										pos:  position{line: 759, col: 6, offset: 22381},
										name: "FuncGuard",
									},
								},
								&labeledExpr{
									pos:   position{line: 759, col: 16, offset: 22391},
									label: "fn",
									expr: &ruleRefExpr{
										pos:  position{line: 759, col: 19, offset: 22394},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 759, col: 34, offset: 22409},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 759, col: 37, offset: 22412},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 759, col: 41, offset: 22416},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 759, col: 44, offset: 22419},
									label: "args",
									expr: &ruleRefExpr{
										pos:  position{line: 759, col: 49, offset: 22424},
										name: "FunctionArgs",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 759, col: 62, offset: 22437},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 759, col: 65, offset: 22440},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 759, col: 69, offset: 22444},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 759, col: 75, offset: 22450},
										expr: &ruleRefExpr{
											pos:  position{line: 759, col: 75, offset: 22450},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FunctionArgs",
			pos:  position{line: 763, col: 1, offset: 22571},
			expr: &choiceExpr{
				pos: position{line: 764, col: 5, offset: 22588},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 764, col: 5, offset: 22588},
						run: (*parser).callonFunctionArgs2,
						expr: &labeledExpr{
							pos:   position{line: 764, col: 5, offset: 22588},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 764, col: 7, offset: 22590},
								name: "OverExpr",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 765, col: 5, offset: 22636},
						name: "OptionalExprs",
					},
				},
			},
		},
		{
			name: "Grep",
			pos:  position{line: 767, col: 1, offset: 22651},
			expr: &actionExpr{
				pos: position{line: 768, col: 5, offset: 22660},
				run: (*parser).callonGrep1,
				expr: &seqExpr{
					pos: position{line: 768, col: 5, offset: 22660},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 768, col: 5, offset: 22660},
							val:        "grep",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 768, col: 12, offset: 22667},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 768, col: 15, offset: 22670},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 768, col: 19, offset: 22674},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 768, col: 22, offset: 22677},
							label: "pattern",
							expr: &ruleRefExpr{
								pos:  position{line: 768, col: 30, offset: 22685},
								name: "Pattern",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 768, col: 38, offset: 22693},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 768, col: 41, offset: 22696},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 768, col: 45, offset: 22700},
								expr: &seqExpr{
									pos: position{line: 768, col: 46, offset: 22701},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 768, col: 46, offset: 22701},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 768, col: 50, offset: 22705},
											name: "__",
										},
										&choiceExpr{
											pos: position{line: 768, col: 54, offset: 22709},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 768, col: 54, offset: 22709},
													name: "OverExpr",
												},
												&ruleRefExpr{
													pos:  position{line: 768, col: 65, offset: 22720},
													name: "Expr",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 768, col: 71, offset: 22726},
											name: "__",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 768, col: 76, offset: 22731},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Pattern",
			pos:  position{line: 776, col: 1, offset: 22972},
			expr: &choiceExpr{
				pos: position{line: 777, col: 5, offset: 22984},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 777, col: 5, offset: 22984},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 778, col: 5, offset: 22995},
						name: "Glob",
					},
					&actionExpr{
						pos: position{line: 779, col: 5, offset: 23004},
						run: (*parser).callonPattern4,
						expr: &labeledExpr{
							pos:   position{line: 779, col: 5, offset: 23004},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 779, col: 7, offset: 23006},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "OptionalExprs",
			pos:  position{line: 783, col: 1, offset: 23098},
			expr: &choiceExpr{
				pos: position{line: 784, col: 5, offset: 23116},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 784, col: 5, offset: 23116},
						name: "Exprs",
					},
					&actionExpr{
						pos: position{line: 785, col: 5, offset: 23126},
						run: (*parser).callonOptionalExprs3,
						expr: &ruleRefExpr{
							pos:  position{line: 785, col: 5, offset: 23126},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 787, col: 1, offset: 23162},
			expr: &actionExpr{
				pos: position{line: 788, col: 5, offset: 23172},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 788, col: 5, offset: 23172},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 788, col: 5, offset: 23172},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 788, col: 11, offset: 23178},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 788, col: 16, offset: 23183},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 788, col: 21, offset: 23188},
								expr: &actionExpr{
									pos: position{line: 788, col: 22, offset: 23189},
									run: (*parser).callonExprs7,
									expr: &seqExpr{
										pos: position{line: 788, col: 22, offset: 23189},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 788, col: 22, offset: 23189},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 788, col: 25, offset: 23192},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 788, col: 29, offset: 23196},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 788, col: 32, offset: 23199},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 788, col: 34, offset: 23201},
													name: "Expr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 792, col: 1, offset: 23310},
			expr: &actionExpr{
				pos: position{line: 793, col: 5, offset: 23324},
				run: (*parser).callonDerefExpr1,
				expr: &seqExpr{
					pos: position{line: 793, col: 5, offset: 23324},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 793, col: 5, offset: 23324},
							expr: &ruleRefExpr{
								pos:  position{line: 793, col: 6, offset: 23325},
								name: "IP6",
							},
						},
						&labeledExpr{
							pos:   position{line: 793, col: 10, offset: 23329},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 793, col: 16, offset: 23335},
								name: "Identifier",
							},
						},
						&labeledExpr{
							pos:   position{line: 793, col: 27, offset: 23346},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 793, col: 32, offset: 23351},
								expr: &ruleRefExpr{
									pos:  position{line: 793, col: 33, offset: 23352},
									name: "Deref",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 797, col: 1, offset: 23420},
			expr: &choiceExpr{
				pos: position{line: 798, col: 5, offset: 23430},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 798, col: 5, offset: 23430},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 798, col: 5, offset: 23430},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 798, col: 5, offset: 23430},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 798, col: 9, offset: 23434},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 798, col: 14, offset: 23439},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 798, col: 27, offset: 23452},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 798, col: 30, offset: 23455},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 798, col: 34, offset: 23459},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 798, col: 37, offset: 23462},
									label: "to",
									expr: &zeroOrOneExpr{
										pos: position{line: 798, col: 40, offset: 23465},
										expr: &ruleRefExpr{
											pos:  position{line: 798, col: 40, offset: 23465},
											name: "AdditiveExpr",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 798, col: 54, offset: 23479},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 804, col: 5, offset: 23653},
						run: (*parser).callonDeref14,
						expr: &seqExpr{
							pos: position{line: 804, col: 5, offset: 23653},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 804, col: 5, offset: 23653},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 804, col: 9, offset: 23657},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 804, col: 12, offset: 23660},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 804, col: 16, offset: 23664},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 804, col: 19, offset: 23667},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 804, col: 22, offset: 23670},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 804, col: 35, offset: 23683},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 810, col: 5, offset: 23856},
						run: (*parser).callonDeref23,
						expr: &seqExpr{
							pos: position{line: 810, col: 5, offset: 23856},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 810, col: 5, offset: 23856},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 810, col: 9, offset: 23860},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 810, col: 14, offset: 23865},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 810, col: 19, offset: 23870},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 811, col: 5, offset: 23919},
						run: (*parser).callonDeref29,
						expr: &seqExpr{
							pos: position{line: 811, col: 5, offset: 23919},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 811, col: 5, offset: 23919},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 811, col: 9, offset: 23923},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 811, col: 12, offset: 23926},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 813, col: 1, offset: 23977},
			expr: &choiceExpr{
				pos: position{line: 814, col: 5, offset: 23989},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 814, col: 5, offset: 23989},
						name: "Record",
					},
					&ruleRefExpr{
						pos:  position{line: 815, col: 5, offset: 24000},
						name: "Array",
					},
					&ruleRefExpr{
						pos:  position{line: 816, col: 5, offset: 24010},
						name: "Set",
					},
					&ruleRefExpr{
						pos:  position{line: 817, col: 5, offset: 24018},
						name: "Map",
					},
					&ruleRefExpr{
						pos:  position{line: 818, col: 5, offset: 24026},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 819, col: 5, offset: 24038},
						run: (*parser).callonPrimary7,
						expr: &seqExpr{
							pos: position{line: 819, col: 5, offset: 24038},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 819, col: 5, offset: 24038},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 819, col: 9, offset: 24042},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 819, col: 12, offset: 24045},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 819, col: 17, offset: 24050},
										name: "OverExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 819, col: 26, offset: 24059},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 819, col: 29, offset: 24062},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 820, col: 5, offset: 24091},
						run: (*parser).callonPrimary15,
						expr: &seqExpr{
							pos: position{line: 820, col: 5, offset: 24091},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 820, col: 5, offset: 24091},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 820, col: 9, offset: 24095},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 820, col: 12, offset: 24098},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 820, col: 17, offset: 24103},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 820, col: 22, offset: 24108},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 820, col: 25, offset: 24111},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OverExpr",
			pos:  position{line: 822, col: 1, offset: 24137},
			expr: &actionExpr{
				pos: position{line: 823, col: 5, offset: 24150},
				run: (*parser).callonOverExpr1,
				expr: &seqExpr{
					pos: position{line: 823, col: 5, offset: 24150},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 823, col: 5, offset: 24150},
							val:        "over",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 823, col: 12, offset: 24157},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 823, col: 14, offset: 24159},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 823, col: 20, offset: 24165},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 823, col: 26, offset: 24171},
							label: "locals",
							expr: &zeroOrOneExpr{
								pos: position{line: 823, col: 33, offset: 24178},
								expr: &ruleRefExpr{
									pos:  position{line: 823, col: 33, offset: 24178},
									name: "Locals",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 823, col: 41, offset: 24186},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 823, col: 44, offset: 24189},
							val:        "|",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 823, col: 48, offset: 24193},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 823, col: 51, offset: 24196},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 823, col: 56, offset: 24201},
								name: "Seq",
							},
						},
					},
				},
			},
		},
		{
			name: "Record",
			pos:  position{line: 827, col: 1, offset: 24323},
			expr: &actionExpr{
				pos: position{line: 828, col: 5, offset: 24334},
				run: (*parser).callonRecord1,
				expr: &seqExpr{
					pos: position{line: 828, col: 5, offset: 24334},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 828, col: 5, offset: 24334},
							val:        "{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 828, col: 9, offset: 24338},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 828, col: 12, offset: 24341},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 828, col: 18, offset: 24347},
								name: "RecordElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 828, col: 30, offset: 24359},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 828, col: 33, offset: 24362},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RecordElems",
			pos:  position{line: 832, col: 1, offset: 24454},
			expr: &choiceExpr{
				pos: position{line: 833, col: 5, offset: 24470},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 833, col: 5, offset: 24470},
						run: (*parser).callonRecordElems2,
						expr: &seqExpr{
							pos: position{line: 833, col: 5, offset: 24470},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 833, col: 5, offset: 24470},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 833, col: 11, offset: 24476},
										name: "RecordElem",
									},
								},
								&labeledExpr{
									pos:   position{line: 833, col: 22, offset: 24487},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 833, col: 27, offset: 24492},
										expr: &ruleRefExpr{
											pos:  position{line: 833, col: 27, offset: 24492},
											name: "RecordElemTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 836, col: 5, offset: 24591},
						run: (*parser).callonRecordElems9,
						expr: &ruleRefExpr{
							pos:  position{line: 836, col: 5, offset: 24591},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "RecordElemTail",
			pos:  position{line: 838, col: 1, offset: 24627},
			expr: &actionExpr{
				pos: position{line: 838, col: 18, offset: 24644},
				run: (*parser).callonRecordElemTail1,
				expr: &seqExpr{
					pos: position{line: 838, col: 18, offset: 24644},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 838, col: 18, offset: 24644},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 838, col: 21, offset: 24647},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 838, col: 25, offset: 24651},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 838, col: 28, offset: 24654},
							label: "elem",
							expr: &ruleRefExpr{
								pos:  position{line: 838, col: 33, offset: 24659},
								name: "RecordElem",
							},
						},
					},
				},
			},
		},
		{
			name: "RecordElem",
			pos:  position{line: 840, col: 1, offset: 24692},
			expr: &choiceExpr{
				pos: position{line: 841, col: 5, offset: 24707},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 841, col: 5, offset: 24707},
						name: "Spread",
					},
					&ruleRefExpr{
						pos:  position{line: 842, col: 5, offset: 24718},
						name: "Field",
					},
					&ruleRefExpr{
						pos:  position{line: 843, col: 5, offset: 24728},
						name: "Identifier",
					},
				},
			},
		},
		{
			name: "Spread",
			pos:  position{line: 845, col: 1, offset: 24740},
			expr: &actionExpr{
				pos: position{line: 846, col: 5, offset: 24751},
				run: (*parser).callonSpread1,
				expr: &seqExpr{
					pos: position{line: 846, col: 5, offset: 24751},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 846, col: 5, offset: 24751},
							val:        "...",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 846, col: 11, offset: 24757},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 846, col: 14, offset: 24760},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 846, col: 19, offset: 24765},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 850, col: 1, offset: 24852},
			expr: &actionExpr{
				pos: position{line: 851, col: 5, offset: 24862},
				run: (*parser).callonField1,
				expr: &seqExpr{
					pos: position{line: 851, col: 5, offset: 24862},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 851, col: 5, offset: 24862},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 851, col: 10, offset: 24867},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 851, col: 20, offset: 24877},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 851, col: 23, offset: 24880},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 851, col: 27, offset: 24884},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 851, col: 30, offset: 24887},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 851, col: 36, offset: 24893},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Array",
			pos:  position{line: 855, col: 1, offset: 24995},
			expr: &actionExpr{
				pos: position{line: 856, col: 5, offset: 25005},
				run: (*parser).callonArray1,
				expr: &seqExpr{
					pos: position{line: 856, col: 5, offset: 25005},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 856, col: 5, offset: 25005},
							val:        "[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 856, col: 9, offset: 25009},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 856, col: 12, offset: 25012},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 856, col: 18, offset: 25018},
								name: "VectorElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 856, col: 30, offset: 25030},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 856, col: 33, offset: 25033},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Set",
			pos:  position{line: 860, col: 1, offset: 25124},
			expr: &actionExpr{
				pos: position{line: 861, col: 5, offset: 25132},
				run: (*parser).callonSet1,
				expr: &seqExpr{
					pos: position{line: 861, col: 5, offset: 25132},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 861, col: 5, offset: 25132},
							val:        "|[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 861, col: 10, offset: 25137},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 861, col: 13, offset: 25140},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 861, col: 19, offset: 25146},
								name: "VectorElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 861, col: 31, offset: 25158},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 861, col: 34, offset: 25161},
							val:        "]|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "VectorElems",
			pos:  position{line: 865, col: 1, offset: 25251},
			expr: &choiceExpr{
				pos: position{line: 866, col: 5, offset: 25267},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 866, col: 5, offset: 25267},
						run: (*parser).callonVectorElems2,
						expr: &seqExpr{
							pos: position{line: 866, col: 5, offset: 25267},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 866, col: 5, offset: 25267},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 866, col: 11, offset: 25273},
										name: "VectorElem",
									},
								},
								&labeledExpr{
									pos:   position{line: 866, col: 22, offset: 25284},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 866, col: 27, offset: 25289},
										expr: &actionExpr{
											pos: position{line: 866, col: 28, offset: 25290},
											run: (*parser).callonVectorElems8,
											expr: &seqExpr{
												pos: position{line: 866, col: 28, offset: 25290},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 866, col: 28, offset: 25290},
														name: "__",
													},
													&litMatcher{
														pos:        position{line: 866, col: 31, offset: 25293},
														val:        ",",
														ignoreCase: false,
													},
													&ruleRefExpr{
														pos:  position{line: 866, col: 35, offset: 25297},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 866, col: 38, offset: 25300},
														label: "e",
														expr: &ruleRefExpr{
															pos:  position{line: 866, col: 40, offset: 25302},
															name: "VectorElem",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 869, col: 5, offset: 25420},
						run: (*parser).callonVectorElems15,
						expr: &ruleRefExpr{
							pos:  position{line: 869, col: 5, offset: 25420},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "VectorElem",
			pos:  position{line: 871, col: 1, offset: 25456},
			expr: &choiceExpr{
				pos: position{line: 872, col: 5, offset: 25471},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 872, col: 5, offset: 25471},
						name: "Spread",
					},
					&actionExpr{
						pos: position{line: 873, col: 5, offset: 25482},
						run: (*parser).callonVectorElem3,
						expr: &labeledExpr{
							pos:   position{line: 873, col: 5, offset: 25482},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 873, col: 7, offset: 25484},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Map",
			pos:  position{line: 875, col: 1, offset: 25563},
			expr: &actionExpr{
				pos: position{line: 876, col: 5, offset: 25571},
				run: (*parser).callonMap1,
				expr: &seqExpr{
					pos: position{line: 876, col: 5, offset: 25571},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 876, col: 5, offset: 25571},
							val:        "|{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 876, col: 10, offset: 25576},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 876, col: 13, offset: 25579},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 876, col: 19, offset: 25585},
								name: "Entries",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 876, col: 27, offset: 25593},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 876, col: 30, offset: 25596},
							val:        "}|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Entries",
			pos:  position{line: 880, col: 1, offset: 25688},
			expr: &choiceExpr{
				pos: position{line: 881, col: 5, offset: 25700},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 881, col: 5, offset: 25700},
						run: (*parser).callonEntries2,
						expr: &seqExpr{
							pos: position{line: 881, col: 5, offset: 25700},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 881, col: 5, offset: 25700},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 881, col: 11, offset: 25706},
										name: "Entry",
									},
								},
								&labeledExpr{
									pos:   position{line: 881, col: 17, offset: 25712},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 881, col: 22, offset: 25717},
										expr: &ruleRefExpr{
											pos:  position{line: 881, col: 22, offset: 25717},
											name: "EntryTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 884, col: 5, offset: 25811},
						run: (*parser).callonEntries9,
						expr: &ruleRefExpr{
							pos:  position{line: 884, col: 5, offset: 25811},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "EntryTail",
			pos:  position{line: 887, col: 1, offset: 25848},
			expr: &actionExpr{
				pos: position{line: 887, col: 13, offset: 25860},
				run: (*parser).callonEntryTail1,
				expr: &seqExpr{
					pos: position{line: 887, col: 13, offset: 25860},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 887, col: 13, offset: 25860},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 887, col: 16, offset: 25863},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 887, col: 20, offset: 25867},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 887, col: 23, offset: 25870},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 887, col: 25, offset: 25872},
								name: "Entry",
							},
						},
					},
				},
			},
		},
		{
			name: "Entry",
			pos:  position{line: 889, col: 1, offset: 25897},
			expr: &actionExpr{
				pos: position{line: 890, col: 5, offset: 25907},
				run: (*parser).callonEntry1,
				expr: &seqExpr{
					pos: position{line: 890, col: 5, offset: 25907},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 890, col: 5, offset: 25907},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 890, col: 9, offset: 25911},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 890, col: 14, offset: 25916},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 890, col: 17, offset: 25919},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 890, col: 21, offset: 25923},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 890, col: 24, offset: 25926},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 890, col: 30, offset: 25932},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOp",
			pos:  position{line: 896, col: 1, offset: 26039},
			expr: &actionExpr{
				pos: position{line: 897, col: 5, offset: 26049},
				run: (*parser).callonSQLOp1,
				expr: &seqExpr{
					pos: position{line: 897, col: 5, offset: 26049},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 897, col: 5, offset: 26049},
							label: "selection",
							expr: &ruleRefExpr{
								pos:  position{line: 897, col: 15, offset: 26059},
								name: "SQLSelect",
							},
						},
						&labeledExpr{
							pos:   position{line: 898, col: 5, offset: 26073},
							label: "from",
							expr: &zeroOrOneExpr{
								pos: position{line: 898, col: 10, offset: 26078},
								expr: &ruleRefExpr{
									pos:  position{line: 898, col: 10, offset: 26078},
									name: "SQLFrom",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 899, col: 5, offset: 26091},
							label: "joins",
							expr: &zeroOrOneExpr{
								pos: position{line: 899, col: 11, offset: 26097},
								expr: &ruleRefExpr{
									pos:  position{line: 899, col: 11, offset: 26097},
									name: "SQLJoins",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 900, col: 5, offset: 26111},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 900, col: 11, offset: 26117},
								expr: &ruleRefExpr{
									pos:  position{line: 900, col: 11, offset: 26117},
									name: "SQLWhere",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 901, col: 5, offset: 26131},
							label: "groupby",
							expr: &zeroOrOneExpr{
								pos: position{line: 901, col: 13, offset: 26139},
								expr: &ruleRefExpr{
									pos:  position{line: 901, col: 13, offset: 26139},
									name: "SQLGroupBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 902, col: 5, offset: 26155},
							label: "having",
							expr: &zeroOrOneExpr{
								pos: position{line: 902, col: 12, offset: 26162},
								expr: &ruleRefExpr{
									pos:  position{line: 902, col: 12, offset: 26162},
									name: "SQLHaving",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 903, col: 5, offset: 26177},
							label: "orderby",
							expr: &zeroOrOneExpr{
								pos: position{line: 903, col: 13, offset: 26185},
								expr: &ruleRefExpr{
									pos:  position{line: 903, col: 13, offset: 26185},
									name: "SQLOrderBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 904, col: 5, offset: 26201},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 904, col: 11, offset: 26207},
								name: "SQLLimit",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLSelect",
			pos:  position{line: 928, col: 1, offset: 26573},
			expr: &choiceExpr{
				pos: position{line: 929, col: 5, offset: 26587},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 929, col: 5, offset: 26587},
						run: (*parser).callonSQLSelect2,
						expr: &seqExpr{
							pos: position{line: 929, col: 5, offset: 26587},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 929, col: 5, offset: 26587},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 929, col: 12, offset: 26594},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 929, col: 14, offset: 26596},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 930, col: 5, offset: 26624},
						run: (*parser).callonSQLSelect7,
						expr: &seqExpr{
							pos: position{line: 930, col: 5, offset: 26624},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 930, col: 5, offset: 26624},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 930, col: 12, offset: 26631},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 930, col: 14, offset: 26633},
									label: "assignments",
									expr: &ruleRefExpr{
										pos:  position{line: 930, col: 26, offset: 26645},
										name: "SQLAssignments",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignment",
			pos:  position{line: 932, col: 1, offset: 26689},
			expr: &actionExpr{
				pos: position{line: 933, col: 5, offset: 26707},
				run: (*parser).callonSQLAssignment1,
				expr: &seqExpr{
					pos: position{line: 933, col: 5, offset: 26707},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 933, col: 5, offset: 26707},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 933, col: 9, offset: 26711},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 933, col: 14, offset: 26716},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 933, col: 18, offset: 26720},
								expr: &seqExpr{
									pos: position{line: 933, col: 19, offset: 26721},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 933, col: 19, offset: 26721},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 933, col: 21, offset: 26723},
											name: "AS",
										},
										&ruleRefExpr{
											pos:  position{line: 933, col: 24, offset: 26726},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 933, col: 26, offset: 26728},
											name: "Lval",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignments",
			pos:  position{line: 941, col: 1, offset: 26919},
			expr: &actionExpr{
				pos: position{line: 942, col: 5, offset: 26938},
				run: (*parser).callonSQLAssignments1,
				expr: &seqExpr{
					pos: position{line: 942, col: 5, offset: 26938},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 942, col: 5, offset: 26938},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 942, col: 11, offset: 26944},
								name: "SQLAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 942, col: 25, offset: 26958},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 942, col: 30, offset: 26963},
								expr: &actionExpr{
									pos: position{line: 942, col: 31, offset: 26964},
									run: (*parser).callonSQLAssignments7,
									expr: &seqExpr{
										pos: position{line: 942, col: 31, offset: 26964},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 942, col: 31, offset: 26964},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 942, col: 34, offset: 26967},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 942, col: 38, offset: 26971},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 942, col: 41, offset: 26974},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 942, col: 46, offset: 26979},
													name: "SQLAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLFrom",
			pos:  position{line: 946, col: 1, offset: 27100},
			expr: &choiceExpr{
				pos: position{line: 947, col: 5, offset: 27112},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 947, col: 5, offset: 27112},
						run: (*parser).callonSQLFrom2,
						expr: &seqExpr{
							pos: position{line: 947, col: 5, offset: 27112},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 947, col: 5, offset: 27112},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 947, col: 7, offset: 27114},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 947, col: 12, offset: 27119},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 947, col: 14, offset: 27121},
									label: "table",
									expr: &ruleRefExpr{
										pos:  position{line: 947, col: 20, offset: 27127},
										name: "SQLTable",
									},
								},
								&labeledExpr{
									pos:   position{line: 947, col: 29, offset: 27136},
									label: "alias",
									expr: &zeroOrOneExpr{
										pos: position{line: 947, col: 35, offset: 27142},
										expr: &ruleRefExpr{
											pos:  position{line: 947, col: 35, offset: 27142},
											name: "SQLAlias",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 950, col: 5, offset: 27237},
						run: (*parser).callonSQLFrom12,
						expr: &seqExpr{
							pos: position{line: 950, col: 5, offset: 27237},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 950, col: 5, offset: 27237},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 950, col: 7, offset: 27239},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 950, col: 12, offset: 27244},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 950, col: 14, offset: 27246},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAlias",
			pos:  position{line: 952, col: 1, offset: 27271},
			expr: &choiceExpr{
				pos: position{line: 953, col: 5, offset: 27284},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 953, col: 5, offset: 27284},
						run: (*parser).callonSQLAlias2,
						expr: &seqExpr{
							pos: position{line: 953, col: 5, offset: 27284},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 953, col: 5, offset: 27284},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 953, col: 7, offset: 27286},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 953, col: 10, offset: 27289},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 953, col: 12, offset: 27291},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 953, col: 15, offset: 27294},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 954, col: 5, offset: 27322},
						run: (*parser).callonSQLAlias9,
						expr: &seqExpr{
							pos: position{line: 954, col: 5, offset: 27322},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 954, col: 5, offset: 27322},
									name: "_",
								},
								&notExpr{
									pos: position{line: 954, col: 7, offset: 27324},
									expr: &seqExpr{
										pos: position{line: 954, col: 9, offset: 27326},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 954, col: 9, offset: 27326},
												name: "SQLTokenSentinels",
											},
											&ruleRefExpr{
												pos:  position{line: 954, col: 27, offset: 27344},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 954, col: 30, offset: 27347},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 954, col: 33, offset: 27350},
										name: "Lval",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLTable",
			pos:  position{line: 956, col: 1, offset: 27375},
			expr: &ruleRefExpr{
				pos:  position{line: 957, col: 5, offset: 27388},
				name: "Expr",
			},
		},
		{
			name: "SQLJoins",
			pos:  position{line: 959, col: 1, offset: 27394},
			expr: &actionExpr{
				pos: position{line: 960, col: 5, offset: 27407},
				run: (*parser).callonSQLJoins1,
				expr: &seqExpr{
					pos: position{line: 960, col: 5, offset: 27407},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 960, col: 5, offset: 27407},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 960, col: 11, offset: 27413},
								name: "SQLJoin",
							},
						},
						&labeledExpr{
							pos:   position{line: 960, col: 19, offset: 27421},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 960, col: 24, offset: 27426},
								expr: &actionExpr{
									pos: position{line: 960, col: 25, offset: 27427},
									run: (*parser).callonSQLJoins7,
									expr: &labeledExpr{
										pos:   position{line: 960, col: 25, offset: 27427},
										label: "join",
										expr: &ruleRefExpr{
											pos:  position{line: 960, col: 30, offset: 27432},
											name: "SQLJoin",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoin",
			pos:  position{line: 964, col: 1, offset: 27547},
			expr: &actionExpr{
				pos: position{line: 965, col: 5, offset: 27559},
				run: (*parser).callonSQLJoin1,
				expr: &seqExpr{
					pos: position{line: 965, col: 5, offset: 27559},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 965, col: 5, offset: 27559},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 965, col: 11, offset: 27565},
								name: "SQLJoinStyle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 965, col: 24, offset: 27578},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 965, col: 26, offset: 27580},
							name: "JOIN",
						},
						&ruleRefExpr{
							pos:  position{line: 965, col: 31, offset: 27585},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 965, col: 33, offset: 27587},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 965, col: 39, offset: 27593},
								name: "SQLTable",
							},
						},
						&labeledExpr{
							pos:   position{line: 965, col: 48, offset: 27602},
							label: "alias",
							expr: &zeroOrOneExpr{
								pos: position{line: 965, col: 54, offset: 27608},
								expr: &ruleRefExpr{
									pos:  position{line: 965, col: 54, offset: 27608},
									name: "SQLAlias",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 965, col: 64, offset: 27618},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 965, col: 66, offset: 27620},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 965, col: 69, offset: 27623},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 965, col: 71, offset: 27625},
							label: "leftKey",
							expr: &ruleRefExpr{
								pos:  position{line: 965, col: 79, offset: 27633},
								name: "JoinKey",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 965, col: 87, offset: 27641},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 965, col: 90, offset: 27644},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 965, col: 94, offset: 27648},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 965, col: 97, offset: 27651},
							label: "rightKey",
							expr: &ruleRefExpr{
								pos:  position{line: 965, col: 106, offset: 27660},
								name: "JoinKey",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoinStyle",
			pos:  position{line: 980, col: 1, offset: 27891},
			expr: &choiceExpr{
				pos: position{line: 981, col: 5, offset: 27908},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 981, col: 5, offset: 27908},
						run: (*parser).callonSQLJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 981, col: 5, offset: 27908},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 981, col: 5, offset: 27908},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 981, col: 7, offset: 27910},
									label: "style",
									expr: &choiceExpr{
										pos: position{line: 981, col: 14, offset: 27917},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 981, col: 14, offset: 27917},
												name: "ANTI",
											},
											&ruleRefExpr{
												pos:  position{line: 981, col: 21, offset: 27924},
												name: "INNER",
											},
											&ruleRefExpr{
												pos:  position{line: 981, col: 29, offset: 27932},
												name: "LEFT",
											},
											&ruleRefExpr{
												pos:  position{line: 981, col: 36, offset: 27939},
												name: "RIGHT",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 982, col: 5, offset: 27972},
						run: (*parser).callonSQLJoinStyle11,
						expr: &litMatcher{
							pos:        position{line: 982, col: 5, offset: 27972},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLWhere",
			pos:  position{line: 984, col: 1, offset: 28000},
			expr: &actionExpr{
				pos: position{line: 985, col: 5, offset: 28013},
				run: (*parser).callonSQLWhere1,
				expr: &seqExpr{
					pos: position{line: 985, col: 5, offset: 28013},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 985, col: 5, offset: 28013},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 985, col: 7, offset: 28015},
							name: "WHERE",
						},
						&ruleRefExpr{
							pos:  position{line: 985, col: 13, offset: 28021},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 985, col: 15, offset: 28023},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 985, col: 20, offset: 28028},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLGroupBy",
			pos:  position{line: 987, col: 1, offset: 28064},
			expr: &actionExpr{
				pos: position{line: 988, col: 5, offset: 28079},
				run: (*parser).callonSQLGroupBy1,
				expr: &seqExpr{
					pos: position{line: 988, col: 5, offset: 28079},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 988, col: 5, offset: 28079},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 988, col: 7, offset: 28081},
							name: "GROUP",
						},
						&ruleRefExpr{
							pos:  position{line: 988, col: 13, offset: 28087},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 988, col: 15, offset: 28089},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 988, col: 18, offset: 28092},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 988, col: 20, offset: 28094},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 988, col: 28, offset: 28102},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLHaving",
			pos:  position{line: 990, col: 1, offset: 28138},
			expr: &actionExpr{
				pos: position{line: 991, col: 5, offset: 28152},
				run: (*parser).callonSQLHaving1,
				expr: &seqExpr{
					pos: position{line: 991, col: 5, offset: 28152},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 991, col: 5, offset: 28152},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 991, col: 7, offset: 28154},
							name: "HAVING",
						},
						&ruleRefExpr{
							pos:  position{line: 991, col: 14, offset: 28161},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 991, col: 16, offset: 28163},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 991, col: 21, offset: 28168},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrderBy",
			pos:  position{line: 993, col: 1, offset: 28204},
			expr: &actionExpr{
				pos: position{line: 994, col: 5, offset: 28219},
				run: (*parser).callonSQLOrderBy1,
				expr: &seqExpr{
					pos: position{line: 994, col: 5, offset: 28219},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 994, col: 5, offset: 28219},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 994, col: 7, offset: 28221},
							name: "ORDER",
						},
						&ruleRefExpr{
							pos:  position{line: 994, col: 13, offset: 28227},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 994, col: 15, offset: 28229},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 994, col: 18, offset: 28232},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 994, col: 20, offset: 28234},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 994, col: 25, offset: 28239},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 994, col: 31, offset: 28245},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 994, col: 37, offset: 28251},
								name: "SQLOrder",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrder",
			pos:  position{line: 998, col: 1, offset: 28362},
			expr: &choiceExpr{
				pos: position{line: 999, col: 5, offset: 28375},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 999, col: 5, offset: 28375},
						run: (*parser).callonSQLOrder2,
						expr: &seqExpr{
							pos: position{line: 999, col: 5, offset: 28375},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 999, col: 5, offset: 28375},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 999, col: 7, offset: 28377},
									label: "dir",
									expr: &choiceExpr{
										pos: position{line: 999, col: 12, offset: 28382},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 999, col: 12, offset: 28382},
												name: "ASC",
											},
											&ruleRefExpr{
												pos:  position{line: 999, col: 18, offset: 28388},
												name: "DESC",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1000, col: 5, offset: 28418},
						run: (*parser).callonSQLOrder9,
						expr: &litMatcher{
							pos:        position{line: 1000, col: 5, offset: 28418},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLLimit",
			pos:  position{line: 1002, col: 1, offset: 28444},
			expr: &choiceExpr{
				pos: position{line: 1003, col: 5, offset: 28457},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1003, col: 5, offset: 28457},
						run: (*parser).callonSQLLimit2,
						expr: &seqExpr{
							pos: position{line: 1003, col: 5, offset: 28457},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1003, col: 5, offset: 28457},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 1003, col: 7, offset: 28459},
									name: "LIMIT",
								},
								&ruleRefExpr{
									pos:  position{line: 1003, col: 13, offset: 28465},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 1003, col: 15, offset: 28467},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 1003, col: 21, offset: 28473},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1004, col: 5, offset: 28504},
						run: (*parser).callonSQLLimit9,
						expr: &litMatcher{
							pos:        position{line: 1004, col: 5, offset: 28504},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SELECT",
			pos:  position{line: 1006, col: 1, offset: 28526},
			expr: &actionExpr{
				pos: position{line: 1006, col: 10, offset: 28535},
				run: (*parser).callonSELECT1,
				expr: &litMatcher{
					pos:        position{line: 1006, col: 10, offset: 28535},
					val:        "select",
					ignoreCase: true,
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 1007, col: 1, offset: 28570},
			expr: &actionExpr{
				pos: position{line: 1007, col: 6, offset: 28575},
				run: (*parser).callonAS1,
				expr: &litMatcher{
					pos:        position{line: 1007, col: 6, offset: 28575},
					val:        "as",
					ignoreCase: true,
				},
			},
		},
		{
			name: "FROM",
			pos:  position{line: 1008, col: 1, offset: 28602},
			expr: &actionExpr{
				pos: position{line: 1008, col: 8, offset: 28609},
				run: (*parser).callonFROM1,
				expr: &litMatcher{
					pos:        position{line: 1008, col: 8, offset: 28609},
					val:        "from",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JOIN",
			pos:  position{line: 1009, col: 1, offset: 28640},
			expr: &actionExpr{
				pos: position{line: 1009, col: 8, offset: 28647},
				run: (*parser).callonJOIN1,
				expr: &litMatcher{
					pos:        position{line: 1009, col: 8, offset: 28647},
					val:        "join",
					ignoreCase: true,
				},
			},
		},
		{
			name: "WHERE",
			pos:  position{line: 1010, col: 1, offset: 28678},
			expr: &actionExpr{
				pos: position{line: 1010, col: 9, offset: 28686},
				run: (*parser).callonWHERE1,
				expr: &litMatcher{
					pos:        position{line: 1010, col: 9, offset: 28686},
					val:        "where",
					ignoreCase: true,
				},
			},
		},
		{
			name: "GROUP",
			pos:  position{line: 1011, col: 1, offset: 28719},
			expr: &actionExpr{
				pos: position{line: 1011, col: 9, offset: 28727},
				run: (*parser).callonGROUP1,
				expr: &litMatcher{
					pos:        position{line: 1011, col: 9, offset: 28727},
					val:        "group",
					ignoreCase: true,
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 1012, col: 1, offset: 28760},
			expr: &actionExpr{
				pos: position{line: 1012, col: 6, offset: 28765},
				run: (*parser).callonBY1,
				expr: &litMatcher{
					pos:        position{line: 1012, col: 6, offset: 28765},
					val:        "by",
					ignoreCase: true,
				},
			},
		},
		{
			name: "HAVING",
			pos:  position{line: 1013, col: 1, offset: 28792},
			expr: &actionExpr{
				pos: position{line: 1013, col: 10, offset: 28801},
				run: (*parser).callonHAVING1,
				expr: &litMatcher{
					pos:        position{line: 1013, col: 10, offset: 28801},
					val:        "having",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ORDER",
			pos:  position{line: 1014, col: 1, offset: 28836},
			expr: &actionExpr{
				pos: position{line: 1014, col: 9, offset: 28844},
				run: (*parser).callonORDER1,
				expr: &litMatcher{
					pos:        position{line: 1014, col: 9, offset: 28844},
					val:        "order",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ON",
			pos:  position{line: 1015, col: 1, offset: 28877},
			expr: &actionExpr{
				pos: position{line: 1015, col: 6, offset: 28882},
				run: (*parser).callonON1,
				expr: &litMatcher{
					pos:        position{line: 1015, col: 6, offset: 28882},
					val:        "on",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LIMIT",
			pos:  position{line: 1016, col: 1, offset: 28909},
			expr: &actionExpr{
				pos: position{line: 1016, col: 9, offset: 28917},
				run: (*parser).callonLIMIT1,
				expr: &litMatcher{
					pos:        position{line: 1016, col: 9, offset: 28917},
					val:        "limit",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ASC",
			pos:  position{line: 1017, col: 1, offset: 28950},
			expr: &actionExpr{
				pos: position{line: 1017, col: 7, offset: 28956},
				run: (*parser).callonASC1,
				expr: &litMatcher{
					pos:        position{line: 1017, col: 7, offset: 28956},
					val:        "asc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "DESC",
			pos:  position{line: 1018, col: 1, offset: 28985},
			expr: &actionExpr{
				pos: position{line: 1018, col: 8, offset: 28992},
				run: (*parser).callonDESC1,
				expr: &litMatcher{
					pos:        position{line: 1018, col: 8, offset: 28992},
					val:        "desc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ANTI",
			pos:  position{line: 1019, col: 1, offset: 29023},
			expr: &actionExpr{
				pos: position{line: 1019, col: 8, offset: 29030},
				run: (*parser).callonANTI1,
				expr: &litMatcher{
					pos:        position{line: 1019, col: 8, offset: 29030},
					val:        "anti",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LEFT",
			pos:  position{line: 1020, col: 1, offset: 29061},
			expr: &actionExpr{
				pos: position{line: 1020, col: 8, offset: 29068},
				run: (*parser).callonLEFT1,
				expr: &litMatcher{
					pos:        position{line: 1020, col: 8, offset: 29068},
					val:        "left",
					ignoreCase: true,
				},
			},
		},
		{
			name: "RIGHT",
			pos:  position{line: 1021, col: 1, offset: 29099},
			expr: &actionExpr{
				pos: position{line: 1021, col: 9, offset: 29107},
				run: (*parser).callonRIGHT1,
				expr: &litMatcher{
					pos:        position{line: 1021, col: 9, offset: 29107},
					val:        "right",
					ignoreCase: true,
				},
			},
		},
		{
			name: "INNER",
			pos:  position{line: 1022, col: 1, offset: 29140},
			expr: &actionExpr{
				pos: position{line: 1022, col: 9, offset: 29148},
				run: (*parser).callonINNER1,
				expr: &litMatcher{
					pos:        position{line: 1022, col: 9, offset: 29148},
					val:        "inner",
					ignoreCase: true,
				},
			},
		},
		{
			name: "SQLTokenSentinels",
			pos:  position{line: 1024, col: 1, offset: 29182},
			expr: &choiceExpr{
				pos: position{line: 1025, col: 5, offset: 29204},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1025, col: 5, offset: 29204},
						name: "SELECT",
					},
					&ruleRefExpr{
						pos:  position{line: 1025, col: 14, offset: 29213},
						name: "AS",
					},
					&ruleRefExpr{
						pos:  position{line: 1025, col: 19, offset: 29218},
						name: "FROM",
					},
					&ruleRefExpr{
						pos:  position{line: 1025, col: 26, offset: 29225},
						name: "JOIN",
					},
					&ruleRefExpr{
						pos:  position{line: 1025, col: 33, offset: 29232},
						name: "WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 1025, col: 41, offset: 29240},
						name: "GROUP",
					},
					&ruleRefExpr{
						pos:  position{line: 1025, col: 49, offset: 29248},
						name: "HAVING",
					},
					&ruleRefExpr{
						pos:  position{line: 1025, col: 58, offset: 29257},
						name: "ORDER",
					},
					&ruleRefExpr{
						pos:  position{line: 1025, col: 66, offset: 29265},
						name: "LIMIT",
					},
					&ruleRefExpr{
						pos:  position{line: 1025, col: 74, offset: 29273},
						name: "ON",
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 1029, col: 1, offset: 29299},
			expr: &choiceExpr{
				pos: position{line: 1030, col: 5, offset: 29311},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1030, col: 5, offset: 29311},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1031, col: 5, offset: 29327},
						name: "TemplateLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1032, col: 5, offset: 29347},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1033, col: 5, offset: 29365},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1034, col: 5, offset: 29384},
						name: "BytesLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1035, col: 5, offset: 29401},
						name: "Duration",
					},
					&ruleRefExpr{
						pos:  position{line: 1036, col: 5, offset: 29414},
						name: "Time",
					},
					&ruleRefExpr{
						pos:  position{line: 1037, col: 5, offset: 29423},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1038, col: 5, offset: 29440},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1039, col: 5, offset: 29459},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1040, col: 5, offset: 29478},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 1042, col: 1, offset: 29491},
			expr: &choiceExpr{
				pos: position{line: 1043, col: 5, offset: 29509},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1043, col: 5, offset: 29509},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 1043, col: 5, offset: 29509},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1043, col: 5, offset: 29509},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1043, col: 7, offset: 29511},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 1043, col: 14, offset: 29518},
									expr: &ruleRefExpr{
										pos:  position{line: 1043, col: 15, offset: 29519},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1046, col: 5, offset: 29634},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 1046, col: 5, offset: 29634},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1046, col: 7, offset: 29636},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 1050, col: 1, offset: 29740},
			expr: &choiceExpr{
				pos: position{line: 1051, col: 5, offset: 29759},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1051, col: 5, offset: 29759},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 1051, col: 5, offset: 29759},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1051, col: 5, offset: 29759},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1051, col: 7, offset: 29761},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 1051, col: 11, offset: 29765},
									expr: &ruleRefExpr{
										pos:  position{line: 1051, col: 12, offset: 29766},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1054, col: 5, offset: 29880},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 1054, col: 5, offset: 29880},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1054, col: 7, offset: 29882},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 1058, col: 1, offset: 29981},
			expr: &actionExpr{
				pos: position{line: 1059, col: 5, offset: 29998},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1059, col: 5, offset: 29998},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1059, col: 7, offset: 30000},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 1063, col: 1, offset: 30113},
			expr: &actionExpr{
				pos: position{line: 1064, col: 5, offset: 30132},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1064, col: 5, offset: 30132},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1064, col: 7, offset: 30134},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 1068, col: 1, offset: 30243},
			expr: &choiceExpr{
				pos: position{line: 1069, col: 5, offset: 30262},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1069, col: 5, offset: 30262},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 1069, col: 5, offset: 30262},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1070, col: 5, offset: 30366},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 1070, col: 5, offset: 30366},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 1072, col: 1, offset: 30468},
			expr: &actionExpr{
				pos: position{line: 1073, col: 5, offset: 30484},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 1073, col: 5, offset: 30484},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "BytesLiteral",
			pos:  position{line: 1075, col: 1, offset: 30580},
			expr: &actionExpr{
				pos: position{line: 1076, col: 5, offset: 30597},
				run: (*parser).callonBytesLiteral1,
				expr: &seqExpr{
					pos: position{line: 1076, col: 5, offset: 30597},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1076, col: 5, offset: 30597},
							val:        "0x",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1076, col: 10, offset: 30602},
							expr: &ruleRefExpr{
								pos:  position{line: 1076, col: 10, offset: 30602},
								name: "HexDigit",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeLiteral",
			pos:  position{line: 1080, col: 1, offset: 30717},
			expr: &actionExpr{
				pos: position{line: 1081, col: 5, offset: 30733},
				run: (*parser).callonTypeLiteral1,
				expr: &seqExpr{
					pos: position{line: 1081, col: 5, offset: 30733},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1081, col: 5, offset: 30733},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1081, col: 9, offset: 30737},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1081, col: 13, offset: 30741},
								name: "Type",
							},
						},
						&litMatcher{
							pos:        position{line: 1081, col: 18, offset: 30746},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "CastType",
			pos:  position{line: 1085, col: 1, offset: 30835},
			expr: &choiceExpr{
				pos: position{line: 1086, col: 5, offset: 30848},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1086, col: 5, offset: 30848},
						name: "TypeLiteral",
					},
					&actionExpr{
						pos: position{line: 1087, col: 5, offset: 30864},
						run: (*parser).callonCastType3,
						expr: &labeledExpr{
							pos:   position{line: 1087, col: 5, offset: 30864},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1087, col: 9, offset: 30868},
								name: "PrimitiveType",
							},
						},
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 1091, col: 1, offset: 30967},
			expr: &choiceExpr{
				pos: position{line: 1092, col: 5, offset: 30976},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1092, col: 5, offset: 30976},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1093, col: 5, offset: 30992},
						name: "AmbiguousType",
					},
					&ruleRefExpr{
						pos:  position{line: 1094, col: 5, offset: 31010},
						name: "ComplexType",
					},
				},
			},
		},
		{
			name: "AmbiguousType",
			pos:  position{line: 1096, col: 1, offset: 31023},
			expr: &choiceExpr{
				pos: position{line: 1097, col: 5, offset: 31041},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1097, col: 5, offset: 31041},
						run: (*parser).callonAmbiguousType2,
						expr: &seqExpr{
							pos: position{line: 1097, col: 5, offset: 31041},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1097, col: 5, offset: 31041},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1097, col: 10, offset: 31046},
										name: "PrimitiveType",
									},
								},
								&notExpr{
									pos: position{line: 1097, col: 24, offset: 31060},
									expr: &ruleRefExpr{
										pos:  position{line: 1097, col: 25, offset: 31061},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1098, col: 5, offset: 31101},
						run: (*parser).callonAmbiguousType8,
						expr: &seqExpr{
							pos: position{line: 1098, col: 5, offset: 31101},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1098, col: 5, offset: 31101},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1098, col: 10, offset: 31106},
										name: "IdentifierName",
									},
								},
								&labeledExpr{
									pos:   position{line: 1098, col: 25, offset: 31121},
									label: "opt",
									expr: &zeroOrOneExpr{
										pos: position{line: 1098, col: 29, offset: 31125},
										expr: &seqExpr{
											pos: position{line: 1098, col: 30, offset: 31126},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1098, col: 30, offset: 31126},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 1098, col: 33, offset: 31129},
													val:        "=",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 1098, col: 37, offset: 31133},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 1098, col: 40, offset: 31136},
													name: "Type",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1104, col: 5, offset: 31368},
						run: (*parser).callonAmbiguousType19,
						expr: &labeledExpr{
							pos:   position{line: 1104, col: 5, offset: 31368},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1104, col: 10, offset: 31373},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1107, col: 5, offset: 31473},
						run: (*parser).callonAmbiguousType22,
						expr: &seqExpr{
							pos: position{line: 1107, col: 5, offset: 31473},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1107, col: 5, offset: 31473},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1107, col: 9, offset: 31477},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1107, col: 12, offset: 31480},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 1107, col: 14, offset: 31482},
										name: "TypeUnion",
									},
								},
								&litMatcher{
									pos:        position{line: 1107, col: 24, offset: 31492},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeUnion",
			pos:  position{line: 1109, col: 1, offset: 31515},
			expr: &actionExpr{
				pos: position{line: 1110, col: 5, offset: 31529},
				run: (*parser).callonTypeUnion1,
				expr: &labeledExpr{
					pos:   position{line: 1110, col: 5, offset: 31529},
					label: "types",
					expr: &ruleRefExpr{
						pos:  position{line: 1110, col: 11, offset: 31535},
						name: "TypeList",
					},
				},
			},
		},
		{
			name: "TypeList",
			pos:  position{line: 1114, col: 1, offset: 31631},
			expr: &actionExpr{
				pos: position{line: 1115, col: 5, offset: 31644},
				run: (*parser).callonTypeList1,
				expr: &seqExpr{
					pos: position{line: 1115, col: 5, offset: 31644},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1115, col: 5, offset: 31644},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1115, col: 11, offset: 31650},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 1115, col: 16, offset: 31655},
							label: "rest",
							expr: &oneOrMoreExpr{
								pos: position{line: 1115, col: 21, offset: 31660},
								expr: &ruleRefExpr{
									pos:  position{line: 1115, col: 21, offset: 31660},
									name: "TypeListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeListTail",
			pos:  position{line: 1119, col: 1, offset: 31754},
			expr: &actionExpr{
				pos: position{line: 1119, col: 16, offset: 31769},
				run: (*parser).callonTypeListTail1,
				expr: &seqExpr{
					pos: position{line: 1119, col: 16, offset: 31769},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1119, col: 16, offset: 31769},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1119, col: 19, offset: 31772},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1119, col: 23, offset: 31776},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1119, col: 26, offset: 31779},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1119, col: 30, offset: 31783},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexType",
			pos:  position{line: 1121, col: 1, offset: 31809},
			expr: &choiceExpr{
				pos: position{line: 1122, col: 5, offset: 31825},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1122, col: 5, offset: 31825},
						run: (*parser).callonComplexType2,
						expr: &seqExpr{
							pos: position{line: 1122, col: 5, offset: 31825},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1122, col: 5, offset: 31825},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1122, col: 9, offset: 31829},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1122, col: 12, offset: 31832},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 1122, col: 19, offset: 31839},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1122, col: 33, offset: 31853},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1122, col: 36, offset: 31856},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1125, col: 5, offset: 31953},
						run: (*parser).callonComplexType10,
						expr: &seqExpr{
							pos: position{line: 1125, col: 5, offset: 31953},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1125, col: 5, offset: 31953},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1125, col: 9, offset: 31957},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1125, col: 12, offset: 31960},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1125, col: 16, offset: 31964},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1125, col: 21, offset: 31969},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1125, col: 24, offset: 31972},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1128, col: 5, offset: 32063},
						run: (*parser).callonComplexType18,
						expr: &seqExpr{
							pos: position{line: 1128, col: 5, offset: 32063},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1128, col: 5, offset: 32063},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1128, col: 10, offset: 32068},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1128, col: 13, offset: 32071},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1128, col: 17, offset: 32075},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1128, col: 22, offset: 32080},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1128, col: 25, offset: 32083},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1131, col: 5, offset: 32173},
						run: (*parser).callonComplexType26,
						expr: &seqExpr{
							pos: position{line: 1131, col: 5, offset: 32173},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1131, col: 5, offset: 32173},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1131, col: 10, offset: 32178},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1131, col: 13, offset: 32181},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 1131, col: 21, offset: 32189},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1131, col: 26, offset: 32194},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1131, col: 29, offset: 32197},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1131, col: 33, offset: 32201},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1131, col: 36, offset: 32204},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 1131, col: 44, offset: 32212},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1131, col: 49, offset: 32217},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1131, col: 52, offset: 32220},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateLiteral",
			pos:  position{line: 1135, col: 1, offset: 32336},
			expr: &actionExpr{
				pos: position{line: 1136, col: 5, offset: 32356},
				run: (*parser).callonTemplateLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1136, col: 5, offset: 32356},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1136, col: 7, offset: 32358},
						name: "TemplateLiteralParts",
					},
				},
			},
		},
		{
			name: "TemplateLiteralParts",
			pos:  position{line: 1143, col: 1, offset: 32574},
			expr: &choiceExpr{
				pos: position{line: 1144, col: 5, offset: 32599},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1144, col: 5, offset: 32599},
						run: (*parser).callonTemplateLiteralParts2,
						expr: &seqExpr{
							pos: position{line: 1144, col: 5, offset: 32599},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1144, col: 5, offset: 32599},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1144, col: 9, offset: 32603},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1144, col: 11, offset: 32605},
										expr: &ruleRefExpr{
											pos:  position{line: 1144, col: 11, offset: 32605},
											name: "TemplateDoubleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1144, col: 37, offset: 32631},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1145, col: 5, offset: 32657},
						run: (*parser).callonTemplateLiteralParts9,
						expr: &seqExpr{
							pos: position{line: 1145, col: 5, offset: 32657},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1145, col: 5, offset: 32657},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1145, col: 9, offset: 32661},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1145, col: 11, offset: 32663},
										expr: &ruleRefExpr{
											pos:  position{line: 1145, col: 11, offset: 32663},
											name: "TemplateSingleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1145, col: 37, offset: 32689},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedPart",
			pos:  position{line: 1147, col: 1, offset: 32712},
			expr: &choiceExpr{
				pos: position{line: 1148, col: 5, offset: 32741},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1148, col: 5, offset: 32741},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 1149, col: 5, offset: 32758},
						run: (*parser).callonTemplateDoubleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 1149, col: 5, offset: 32758},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1149, col: 7, offset: 32760},
								expr: &ruleRefExpr{
									pos:  position{line: 1149, col: 7, offset: 32760},
									name: "TemplateDoubleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedChar",
			pos:  position{line: 1153, col: 1, offset: 32897},
			expr: &choiceExpr{
				pos: position{line: 1154, col: 5, offset: 32926},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1154, col: 5, offset: 32926},
						run: (*parser).callonTemplateDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1154, col: 5, offset: 32926},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1154, col: 5, offset: 32926},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1154, col: 10, offset: 32931},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1154, col: 12, offset: 32933},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1155, col: 5, offset: 32960},
						run: (*parser).callonTemplateDoubleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1155, col: 5, offset: 32960},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1155, col: 5, offset: 32960},
									expr: &litMatcher{
										pos:        position{line: 1155, col: 7, offset: 32962},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1155, col: 13, offset: 32968},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1155, col: 15, offset: 32970},
										name: "DoubleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedPart",
			pos:  position{line: 1157, col: 1, offset: 33006},
			expr: &choiceExpr{
				pos: position{line: 1158, col: 5, offset: 33035},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1158, col: 5, offset: 33035},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 1159, col: 5, offset: 33052},
						run: (*parser).callonTemplateSingleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 1159, col: 5, offset: 33052},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1159, col: 7, offset: 33054},
								expr: &ruleRefExpr{
									pos:  position{line: 1159, col: 7, offset: 33054},
									name: "TemplateSingleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedChar",
			pos:  position{line: 1163, col: 1, offset: 33191},
			expr: &choiceExpr{
				pos: position{line: 1164, col: 5, offset: 33220},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1164, col: 5, offset: 33220},
						run: (*parser).callonTemplateSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1164, col: 5, offset: 33220},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1164, col: 5, offset: 33220},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1164, col: 10, offset: 33225},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1164, col: 12, offset: 33227},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1165, col: 5, offset: 33254},
						run: (*parser).callonTemplateSingleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1165, col: 5, offset: 33254},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1165, col: 5, offset: 33254},
									expr: &litMatcher{
										pos:        position{line: 1165, col: 7, offset: 33256},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1165, col: 13, offset: 33262},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1165, col: 15, offset: 33264},
										name: "SingleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateExpr",
			pos:  position{line: 1167, col: 1, offset: 33300},
			expr: &actionExpr{
				pos: position{line: 1168, col: 5, offset: 33317},
				run: (*parser).callonTemplateExpr1,
				expr: &seqExpr{
					pos: position{line: 1168, col: 5, offset: 33317},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1168, col: 5, offset: 33317},
							val:        "${",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1168, col: 10, offset: 33322},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1168, col: 13, offset: 33325},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 1168, col: 15, offset: 33327},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1168, col: 20, offset: 33332},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1168, col: 23, offset: 33335},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 1183, col: 1, offset: 33631},
			expr: &actionExpr{
				pos: position{line: 1184, col: 5, offset: 33649},
				run: (*parser).callonPrimitiveType1,
				expr: &choiceExpr{
					pos: position{line: 1184, col: 9, offset: 33653},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 1184, col: 9, offset: 33653},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1184, col: 19, offset: 33663},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1184, col: 30, offset: 33674},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1184, col: 41, offset: 33685},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1185, col: 9, offset: 33702},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1185, col: 18, offset: 33711},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1185, col: 28, offset: 33721},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1185, col: 38, offset: 33731},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1186, col: 9, offset: 33747},
							val:        "float16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1186, col: 21, offset: 33759},
							val:        "float32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1186, col: 33, offset: 33771},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1187, col: 9, offset: 33789},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1187, col: 18, offset: 33798},
							val:        "string",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1188, col: 9, offset: 33815},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1188, col: 22, offset: 33828},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1189, col: 9, offset: 33843},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1190, col: 9, offset: 33859},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1190, col: 16, offset: 33866},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1191, col: 9, offset: 33880},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1191, col: 18, offset: 33889},
							val:        "null",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldList",
			pos:  position{line: 1195, col: 1, offset: 34004},
			expr: &choiceExpr{
				pos: position{line: 1196, col: 5, offset: 34022},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1196, col: 5, offset: 34022},
						run: (*parser).callonTypeFieldList2,
						expr: &seqExpr{
							pos: position{line: 1196, col: 5, offset: 34022},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1196, col: 5, offset: 34022},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 1196, col: 11, offset: 34028},
										name: "TypeField",
									},
								},
								&labeledExpr{
									pos:   position{line: 1196, col: 21, offset: 34038},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1196, col: 26, offset: 34043},
										expr: &ruleRefExpr{
											pos:  position{line: 1196, col: 26, offset: 34043},
											name: "TypeFieldListTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1199, col: 5, offset: 34145},
						run: (*parser).callonTypeFieldList9,
						expr: &litMatcher{
							pos:        position{line: 1199, col: 5, offset: 34145},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTail",
			pos:  position{line: 1201, col: 1, offset: 34169},
			expr: &actionExpr{
				pos: position{line: 1201, col: 21, offset: 34189},
				run: (*parser).callonTypeFieldListTail1,
				expr: &seqExpr{
					pos: position{line: 1201, col: 21, offset: 34189},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1201, col: 21, offset: 34189},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1201, col: 24, offset: 34192},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1201, col: 28, offset: 34196},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1201, col: 31, offset: 34199},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1201, col: 35, offset: 34203},
								name: "TypeField",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeField",
			pos:  position{line: 1203, col: 1, offset: 34234},
			expr: &actionExpr{
				pos: position{line: 1204, col: 5, offset: 34248},
				run: (*parser).callonTypeField1,
				expr: &seqExpr{
					pos: position{line: 1204, col: 5, offset: 34248},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1204, col: 5, offset: 34248},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1204, col: 10, offset: 34253},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1204, col: 20, offset: 34263},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1204, col: 23, offset: 34266},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1204, col: 27, offset: 34270},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1204, col: 30, offset: 34273},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1204, col: 34, offset: 34277},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 1208, col: 1, offset: 34359},
			expr: &choiceExpr{
				pos: position{line: 1209, col: 5, offset: 34373},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1209, col: 5, offset: 34373},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 1210, col: 5, offset: 34392},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 1212, col: 1, offset: 34406},
			expr: &actionExpr{
				pos: position{line: 1212, col: 12, offset: 34417},
				run: (*parser).callonAndToken1,
				expr: &seqExpr{
					pos: position{line: 1212, col: 12, offset: 34417},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1212, col: 13, offset: 34418},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1212, col: 13, offset: 34418},
									val:        "and",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1212, col: 21, offset: 34426},
									val:        "AND",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1212, col: 28, offset: 34433},
							expr: &ruleRefExpr{
								pos:  position{line: 1212, col: 29, offset: 34434},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 1213, col: 1, offset: 34471},
			expr: &actionExpr{
				pos: position{line: 1213, col: 11, offset: 34481},
				run: (*parser).callonOrToken1,
				expr: &seqExpr{
					pos: position{line: 1213, col: 11, offset: 34481},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1213, col: 12, offset: 34482},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1213, col: 12, offset: 34482},
									val:        "or",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1213, col: 19, offset: 34489},
									val:        "OR",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1213, col: 25, offset: 34495},
							expr: &ruleRefExpr{
								pos:  position{line: 1213, col: 26, offset: 34496},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 1214, col: 1, offset: 34532},
			expr: &actionExpr{
				pos: position{line: 1214, col: 11, offset: 34542},
				run: (*parser).callonInToken1,
				expr: &seqExpr{
					pos: position{line: 1214, col: 11, offset: 34542},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1214, col: 11, offset: 34542},
							val:        "in",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1214, col: 16, offset: 34547},
							expr: &ruleRefExpr{
								pos:  position{line: 1214, col: 17, offset: 34548},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 1215, col: 1, offset: 34584},
			expr: &actionExpr{
				pos: position{line: 1215, col: 12, offset: 34595},
				run: (*parser).callonNotToken1,
				expr: &seqExpr{
					pos: position{line: 1215, col: 12, offset: 34595},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1215, col: 13, offset: 34596},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1215, col: 13, offset: 34596},
									val:        "not",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1215, col: 21, offset: 34604},
									val:        "NOT",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1215, col: 28, offset: 34611},
							expr: &ruleRefExpr{
								pos:  position{line: 1215, col: 29, offset: 34612},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 1216, col: 1, offset: 34649},
			expr: &actionExpr{
				pos: position{line: 1216, col: 11, offset: 34659},
				run: (*parser).callonByToken1,
				expr: &seqExpr{
					pos: position{line: 1216, col: 11, offset: 34659},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1216, col: 11, offset: 34659},
							val:        "by",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1216, col: 16, offset: 34664},
							expr: &ruleRefExpr{
								pos:  position{line: 1216, col: 17, offset: 34665},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 1218, col: 1, offset: 34702},
			expr: &charClassMatcher{
				pos:        position{line: 1218, col: 19, offset: 34720},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 1220, col: 1, offset: 34732},
			expr: &choiceExpr{
				pos: position{line: 1220, col: 18, offset: 34749},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1220, col: 18, offset: 34749},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 1220, col: 36, offset: 34767},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 1222, col: 1, offset: 34774},
			expr: &actionExpr{
				pos: position{line: 1223, col: 5, offset: 34789},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 1223, col: 5, offset: 34789},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 1223, col: 8, offset: 34792},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 1225, col: 1, offset: 34873},
			expr: &choiceExpr{
				pos: position{line: 1226, col: 5, offset: 34892},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1226, col: 5, offset: 34892},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 1226, col: 5, offset: 34892},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1226, col: 5, offset: 34892},
									expr: &seqExpr{
										pos: position{line: 1226, col: 7, offset: 34894},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1226, col: 7, offset: 34894},
												name: "IDGuard",
											},
											&notExpr{
												pos: position{line: 1226, col: 15, offset: 34902},
												expr: &ruleRefExpr{
													pos:  position{line: 1226, col: 16, offset: 34903},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1226, col: 32, offset: 34919},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1226, col: 48, offset: 34935},
									expr: &ruleRefExpr{
										pos:  position{line: 1226, col: 48, offset: 34935},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1227, col: 5, offset: 34986},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 1227, col: 5, offset: 34986},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1228, col: 5, offset: 35025},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 1228, col: 5, offset: 35025},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1228, col: 5, offset: 35025},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1228, col: 10, offset: 35030},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1228, col: 13, offset: 35033},
										name: "IDGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1230, col: 5, offset: 35124},
						run: (*parser).callonIdentifierName19,
						expr: &litMatcher{
							pos:        position{line: 1230, col: 5, offset: 35124},
							val:        "type",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1231, col: 5, offset: 35166},
						run: (*parser).callonIdentifierName21,
						expr: &seqExpr{
							pos: position{line: 1231, col: 5, offset: 35166},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1231, col: 5, offset: 35166},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1231, col: 8, offset: 35169},
										name: "SQLTokenSentinels",
									},
								},
								&andExpr{
									pos: position{line: 1231, col: 26, offset: 35187},
									expr: &seqExpr{
										pos: position{line: 1231, col: 28, offset: 35189},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1231, col: 28, offset: 35189},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1231, col: 31, offset: 35192},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierNames",
			pos:  position{line: 1233, col: 1, offset: 35217},
			expr: &actionExpr{
				pos: position{line: 1234, col: 5, offset: 35237},
				run: (*parser).callonIdentifierNames1,
				expr: &seqExpr{
					pos: position{line: 1234, col: 5, offset: 35237},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1234, col: 5, offset: 35237},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1234, col: 11, offset: 35243},
								name: "IdentifierName",
							},
						},
						&labeledExpr{
							pos:   position{line: 1234, col: 26, offset: 35258},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1234, col: 31, offset: 35263},
								expr: &actionExpr{
									pos: position{line: 1234, col: 32, offset: 35264},
									run: (*parser).callonIdentifierNames7,
									expr: &seqExpr{
										pos: position{line: 1234, col: 32, offset: 35264},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1234, col: 32, offset: 35264},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1234, col: 35, offset: 35267},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1234, col: 39, offset: 35271},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 1234, col: 42, offset: 35274},
												label: "id",
												expr: &ruleRefExpr{
													pos:  position{line: 1234, col: 45, offset: 35277},
													name: "IdentifierName",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IDGuard",
			pos:  position{line: 1238, col: 1, offset: 35393},
			expr: &choiceExpr{
				pos: position{line: 1239, col: 5, offset: 35405},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1239, col: 5, offset: 35405},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1240, col: 5, offset: 35424},
						name: "NullLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1241, col: 5, offset: 35440},
						name: "NaN",
					},
					&ruleRefExpr{
						pos:  position{line: 1242, col: 5, offset: 35448},
						name: "Infinity",
					},
				},
			},
		},
		{
			name: "Time",
			pos:  position{line: 1244, col: 1, offset: 35458},
			expr: &actionExpr{
				pos: position{line: 1245, col: 5, offset: 35467},
				run: (*parser).callonTime1,
				expr: &seqExpr{
					pos: position{line: 1245, col: 5, offset: 35467},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1245, col: 5, offset: 35467},
							name: "FullDate",
						},
						&litMatcher{
							pos:        position{line: 1245, col: 14, offset: 35476},
							val:        "T",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1245, col: 18, offset: 35480},
							name: "FullTime",
						},
					},
				},
			},
		},
		{
			name: "FullDate",
			pos:  position{line: 1249, col: 1, offset: 35600},
			expr: &seqExpr{
				pos: position{line: 1249, col: 12, offset: 35611},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1249, col: 12, offset: 35611},
						name: "D4",
					},
					&litMatcher{
						pos:        position{line: 1249, col: 15, offset: 35614},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1249, col: 19, offset: 35618},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1249, col: 22, offset: 35621},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1249, col: 26, offset: 35625},
						name: "D2",
					},
				},
			},
		},
		{
			name: "D4",
			pos:  position{line: 1251, col: 1, offset: 35629},
			expr: &seqExpr{
				pos: position{line: 1251, col: 6, offset: 35634},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1251, col: 6, offset: 35634},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1251, col: 11, offset: 35639},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1251, col: 16, offset: 35644},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1251, col: 21, offset: 35649},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "D2",
			pos:  position{line: 1252, col: 1, offset: 35655},
			expr: &seqExpr{
				pos: position{line: 1252, col: 6, offset: 35660},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1252, col: 6, offset: 35660},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1252, col: 11, offset: 35665},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "FullTime",
			pos:  position{line: 1254, col: 1, offset: 35672},
			expr: &seqExpr{
				pos: position{line: 1254, col: 12, offset: 35683},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1254, col: 12, offset: 35683},
						name: "PartialTime",
					},
					&ruleRefExpr{
						pos:  position{line: 1254, col: 24, offset: 35695},
						name: "TimeOffset",
					},
				},
			},
		},
		{
			name: "PartialTime",
			pos:  position{line: 1256, col: 1, offset: 35707},
			expr: &seqExpr{
				pos: position{line: 1256, col: 15, offset: 35721},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1256, col: 15, offset: 35721},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1256, col: 18, offset: 35724},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1256, col: 22, offset: 35728},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1256, col: 25, offset: 35731},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1256, col: 29, offset: 35735},
						name: "D2",
					},
					&zeroOrOneExpr{
						pos: position{line: 1256, col: 32, offset: 35738},
						expr: &seqExpr{
							pos: position{line: 1256, col: 33, offset: 35739},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1256, col: 33, offset: 35739},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1256, col: 37, offset: 35743},
									expr: &charClassMatcher{
										pos:        position{line: 1256, col: 37, offset: 35743},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeOffset",
			pos:  position{line: 1258, col: 1, offset: 35753},
			expr: &choiceExpr{
				pos: position{line: 1259, col: 5, offset: 35768},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1259, col: 5, offset: 35768},
						val:        "Z",
						ignoreCase: false,
					},
					&seqExpr{
						pos: position{line: 1260, col: 5, offset: 35776},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 1260, col: 6, offset: 35777},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1260, col: 6, offset: 35777},
										val:        "+",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 1260, col: 12, offset: 35783},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1260, col: 17, offset: 35788},
								name: "D2",
							},
							&litMatcher{
								pos:        position{line: 1260, col: 20, offset: 35791},
								val:        ":",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 1260, col: 24, offset: 35795},
								name: "D2",
							},
							&zeroOrOneExpr{
								pos: position{line: 1260, col: 27, offset: 35798},
								expr: &seqExpr{
									pos: position{line: 1260, col: 28, offset: 35799},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1260, col: 28, offset: 35799},
											val:        ".",
											ignoreCase: false,
										},
										&oneOrMoreExpr{
											pos: position{line: 1260, col: 32, offset: 35803},
											expr: &charClassMatcher{
												pos:        position{line: 1260, col: 32, offset: 35803},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 1262, col: 1, offset: 35813},
			expr: &actionExpr{
				pos: position{line: 1263, col: 5, offset: 35826},
				run: (*parser).callonDuration1,
				expr: &seqExpr{
					pos: position{line: 1263, col: 5, offset: 35826},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1263, col: 5, offset: 35826},
							expr: &litMatcher{
								pos:        position{line: 1263, col: 5, offset: 35826},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1263, col: 10, offset: 35831},
							expr: &seqExpr{
								pos: position{line: 1263, col: 11, offset: 35832},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1263, col: 11, offset: 35832},
										name: "Decimal",
									},
									&ruleRefExpr{
										pos:  position{line: 1263, col: 19, offset: 35840},
										name: "TimeUnit",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Decimal",
			pos:  position{line: 1267, col: 1, offset: 35966},
			expr: &seqExpr{
				pos: position{line: 1267, col: 11, offset: 35976},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1267, col: 11, offset: 35976},
						name: "UInt",
					},
					&zeroOrOneExpr{
						pos: position{line: 1267, col: 16, offset: 35981},
						expr: &seqExpr{
							pos: position{line: 1267, col: 17, offset: 35982},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1267, col: 17, offset: 35982},
									val:        ".",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1267, col: 21, offset: 35986},
									name: "UInt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeUnit",
			pos:  position{line: 1269, col: 1, offset: 35994},
			expr: &choiceExpr{
				pos: position{line: 1270, col: 5, offset: 36007},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1270, col: 5, offset: 36007},
						val:        "ns",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1271, col: 5, offset: 36016},
						val:        "us",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1272, col: 5, offset: 36025},
						val:        "ms",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1273, col: 5, offset: 36034},
						val:        "s",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1274, col: 5, offset: 36042},
						val:        "m",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1275, col: 5, offset: 36050},
						val:        "h",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1276, col: 5, offset: 36058},
						val:        "d",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1277, col: 5, offset: 36066},
						val:        "w",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1278, col: 5, offset: 36074},
						val:        "y",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 1280, col: 1, offset: 36079},
			expr: &actionExpr{
				pos: position{line: 1281, col: 5, offset: 36086},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 1281, col: 5, offset: 36086},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1281, col: 5, offset: 36086},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1281, col: 10, offset: 36091},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1281, col: 14, offset: 36095},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1281, col: 19, offset: 36100},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1281, col: 23, offset: 36104},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1281, col: 28, offset: 36109},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1281, col: 32, offset: 36113},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 1283, col: 1, offset: 36150},
			expr: &actionExpr{
				pos: position{line: 1284, col: 5, offset: 36158},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 1284, col: 5, offset: 36158},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1284, col: 5, offset: 36158},
							expr: &seqExpr{
								pos: position{line: 1284, col: 7, offset: 36160},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1284, col: 7, offset: 36160},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 1284, col: 11, offset: 36164},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 1284, col: 15, offset: 36168},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 1284, col: 19, offset: 36172},
										expr: &choiceExpr{
											pos: position{line: 1284, col: 21, offset: 36174},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1284, col: 21, offset: 36174},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 1284, col: 32, offset: 36185},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1284, col: 38, offset: 36191},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1284, col: 40, offset: 36193},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 1288, col: 1, offset: 36357},
			expr: &choiceExpr{
				pos: position{line: 1289, col: 5, offset: 36375},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1289, col: 5, offset: 36375},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 1289, col: 5, offset: 36375},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1289, col: 5, offset: 36375},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 1289, col: 7, offset: 36377},
										expr: &ruleRefExpr{
											pos:  position{line: 1289, col: 7, offset: 36377},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1289, col: 17, offset: 36387},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1289, col: 19, offset: 36389},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1292, col: 5, offset: 36453},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 1292, col: 5, offset: 36453},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1292, col: 5, offset: 36453},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1292, col: 7, offset: 36455},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1292, col: 11, offset: 36459},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1292, col: 13, offset: 36461},
										expr: &ruleRefExpr{
											pos:  position{line: 1292, col: 13, offset: 36461},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1292, col: 23, offset: 36471},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1292, col: 28, offset: 36476},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1292, col: 30, offset: 36478},
										expr: &ruleRefExpr{
											pos:  position{line: 1292, col: 30, offset: 36478},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1292, col: 40, offset: 36488},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 1292, col: 42, offset: 36490},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1295, col: 5, offset: 36589},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 1295, col: 5, offset: 36589},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1295, col: 5, offset: 36589},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1295, col: 10, offset: 36594},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1295, col: 12, offset: 36596},
										expr: &ruleRefExpr{
											pos:  position{line: 1295, col: 12, offset: 36596},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1295, col: 22, offset: 36606},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1295, col: 24, offset: 36608},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1298, col: 5, offset: 36679},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 1298, col: 5, offset: 36679},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1298, col: 5, offset: 36679},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1298, col: 7, offset: 36681},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1298, col: 11, offset: 36685},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1298, col: 13, offset: 36687},
										expr: &ruleRefExpr{
											pos:  position{line: 1298, col: 13, offset: 36687},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1298, col: 23, offset: 36697},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1301, col: 5, offset: 36765},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 1301, col: 5, offset: 36765},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 1305, col: 1, offset: 36802},
			expr: &choiceExpr{
				pos: position{line: 1306, col: 5, offset: 36814},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1306, col: 5, offset: 36814},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 1307, col: 5, offset: 36821},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 1309, col: 1, offset: 36826},
			expr: &actionExpr{
				pos: position{line: 1309, col: 12, offset: 36837},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 1309, col: 12, offset: 36837},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1309, col: 12, offset: 36837},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1309, col: 16, offset: 36841},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1309, col: 18, offset: 36843},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 1311, col: 1, offset: 36881},
			expr: &actionExpr{
				pos: position{line: 1311, col: 12, offset: 36892},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 1311, col: 12, offset: 36892},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1311, col: 12, offset: 36892},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1311, col: 14, offset: 36894},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 1311, col: 18, offset: 36898},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 1313, col: 1, offset: 36936},
			expr: &actionExpr{
				pos: position{line: 1314, col: 5, offset: 36947},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 1314, col: 5, offset: 36947},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1314, col: 5, offset: 36947},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1314, col: 7, offset: 36949},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 1314, col: 10, offset: 36952},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1314, col: 14, offset: 36956},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1314, col: 16, offset: 36958},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 1318, col: 1, offset: 37031},
			expr: &actionExpr{
				pos: position{line: 1319, col: 5, offset: 37042},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 1319, col: 5, offset: 37042},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1319, col: 5, offset: 37042},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1319, col: 7, offset: 37044},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 1319, col: 11, offset: 37048},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1319, col: 15, offset: 37052},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1319, col: 17, offset: 37054},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 1323, col: 1, offset: 37117},
			expr: &actionExpr{
				pos: position{line: 1324, col: 4, offset: 37125},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 1324, col: 4, offset: 37125},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 1324, col: 6, offset: 37127},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 1326, col: 1, offset: 37167},
			expr: &choiceExpr{
				pos: position{line: 1327, col: 5, offset: 37181},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1327, col: 5, offset: 37181},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 1328, col: 5, offset: 37196},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 1330, col: 1, offset: 37212},
			expr: &actionExpr{
				pos: position{line: 1330, col: 14, offset: 37225},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1330, col: 14, offset: 37225},
					expr: &charClassMatcher{
						pos:        position{line: 1330, col: 14, offset: 37225},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 1332, col: 1, offset: 37264},
			expr: &actionExpr{
				pos: position{line: 1333, col: 5, offset: 37283},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 1333, col: 5, offset: 37283},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1333, col: 5, offset: 37283},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1333, col: 9, offset: 37287},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 1335, col: 1, offset: 37330},
			expr: &choiceExpr{
				pos: position{line: 1336, col: 5, offset: 37346},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1336, col: 5, offset: 37346},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 1336, col: 5, offset: 37346},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1336, col: 5, offset: 37346},
									expr: &litMatcher{
										pos:        position{line: 1336, col: 5, offset: 37346},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1336, col: 10, offset: 37351},
									expr: &charClassMatcher{
										pos:        position{line: 1336, col: 10, offset: 37351},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 1336, col: 17, offset: 37358},
									val:        ".",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1336, col: 21, offset: 37362},
									expr: &charClassMatcher{
										pos:        position{line: 1336, col: 21, offset: 37362},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1336, col: 28, offset: 37369},
									expr: &ruleRefExpr{
										pos:  position{line: 1336, col: 28, offset: 37369},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1339, col: 5, offset: 37428},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 1339, col: 5, offset: 37428},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1339, col: 5, offset: 37428},
									expr: &litMatcher{
										pos:        position{line: 1339, col: 5, offset: 37428},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1339, col: 10, offset: 37433},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1339, col: 14, offset: 37437},
									expr: &charClassMatcher{
										pos:        position{line: 1339, col: 14, offset: 37437},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1339, col: 21, offset: 37444},
									expr: &ruleRefExpr{
										pos:  position{line: 1339, col: 21, offset: 37444},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1342, col: 5, offset: 37503},
						run: (*parser).callonFloatString22,
						expr: &choiceExpr{
							pos: position{line: 1342, col: 6, offset: 37504},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1342, col: 6, offset: 37504},
									name: "NaN",
								},
								&ruleRefExpr{
									pos:  position{line: 1342, col: 12, offset: 37510},
									name: "Infinity",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 1345, col: 1, offset: 37553},
			expr: &seqExpr{
				pos: position{line: 1345, col: 16, offset: 37568},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1345, col: 16, offset: 37568},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 1345, col: 21, offset: 37573},
						expr: &charClassMatcher{
							pos:        position{line: 1345, col: 21, offset: 37573},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1345, col: 27, offset: 37579},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "NaN",
			pos:  position{line: 1347, col: 1, offset: 37591},
			expr: &litMatcher{
				pos:        position{line: 1347, col: 7, offset: 37597},
				val:        "NaN",
				ignoreCase: false,
			},
		},
		{
			name: "Infinity",
			pos:  position{line: 1349, col: 1, offset: 37604},
			expr: &seqExpr{
				pos: position{line: 1349, col: 12, offset: 37615},
				exprs: []interface{}{
					&zeroOrOneExpr{
						pos: position{line: 1349, col: 12, offset: 37615},
						expr: &choiceExpr{
							pos: position{line: 1349, col: 13, offset: 37616},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1349, col: 13, offset: 37616},
									val:        "-",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1349, col: 19, offset: 37622},
									val:        "+",
									ignoreCase: false,
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1349, col: 25, offset: 37628},
						val:        "Inf",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 1351, col: 1, offset: 37635},
			expr: &actionExpr{
				pos: position{line: 1351, col: 7, offset: 37641},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1351, col: 7, offset: 37641},
					expr: &ruleRefExpr{
						pos:  position{line: 1351, col: 7, offset: 37641},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 1353, col: 1, offset: 37683},
			expr: &charClassMatcher{
				pos:        position{line: 1353, col: 12, offset: 37694},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1355, col: 1, offset: 37707},
			expr: &choiceExpr{
				pos: position{line: 1356, col: 5, offset: 37724},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1356, col: 5, offset: 37724},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 1356, col: 5, offset: 37724},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1356, col: 5, offset: 37724},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1356, col: 9, offset: 37728},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1356, col: 11, offset: 37730},
										expr: &ruleRefExpr{
											pos:  position{line: 1356, col: 11, offset: 37730},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1356, col: 29, offset: 37748},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1357, col: 5, offset: 37785},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 1357, col: 5, offset: 37785},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1357, col: 5, offset: 37785},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1357, col: 9, offset: 37789},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1357, col: 11, offset: 37791},
										expr: &ruleRefExpr{
											pos:  position{line: 1357, col: 11, offset: 37791},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1357, col: 29, offset: 37809},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 1359, col: 1, offset: 37843},
			expr: &choiceExpr{
				pos: position{line: 1360, col: 5, offset: 37864},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1360, col: 5, offset: 37864},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1360, col: 5, offset: 37864},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1360, col: 5, offset: 37864},
									expr: &choiceExpr{
										pos: position{line: 1360, col: 7, offset: 37866},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1360, col: 7, offset: 37866},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1360, col: 13, offset: 37872},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1360, col: 26, offset: 37885,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1361, col: 5, offset: 37922},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1361, col: 5, offset: 37922},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1361, col: 5, offset: 37922},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1361, col: 10, offset: 37927},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1361, col: 12, offset: 37929},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 1363, col: 1, offset: 37963},
			expr: &actionExpr{
				pos: position{line: 1364, col: 5, offset: 37975},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 1364, col: 5, offset: 37975},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1364, col: 5, offset: 37975},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1364, col: 10, offset: 37980},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1364, col: 23, offset: 37993},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1364, col: 28, offset: 37998},
								expr: &ruleRefExpr{
									pos:  position{line: 1364, col: 28, offset: 37998},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 1366, col: 1, offset: 38060},
			expr: &choiceExpr{
				pos: position{line: 1367, col: 5, offset: 38077},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1367, col: 5, offset: 38077},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1368, col: 5, offset: 38094},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordChars",
			pos:  position{line: 1370, col: 1, offset: 38106},
			expr: &actionExpr{
				pos: position{line: 1370, col: 16, offset: 38121},
				run: (*parser).callonKeyWordChars1,
				expr: &charClassMatcher{
					pos:        position{line: 1370, col: 16, offset: 38121},
					val:        "[a-zA-Z_.:/%#@~]",
					chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
					ranges:     []rune{'a', 'z', 'A', 'Z'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 1372, col: 1, offset: 38170},
			expr: &choiceExpr{
				pos: position{line: 1373, col: 5, offset: 38186},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1373, col: 5, offset: 38186},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 1374, col: 5, offset: 38203},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 1376, col: 1, offset: 38210},
			expr: &actionExpr{
				pos: position{line: 1376, col: 14, offset: 38223},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 1376, col: 14, offset: 38223},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1376, col: 14, offset: 38223},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1376, col: 19, offset: 38228},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1376, col: 22, offset: 38231},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1376, col: 22, offset: 38231},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1376, col: 38, offset: 38247},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobPattern",
			pos:  position{line: 1378, col: 1, offset: 38282},
			expr: &actionExpr{
				pos: position{line: 1379, col: 5, offset: 38298},
				run: (*parser).callonGlobPattern1,
				expr: &seqExpr{
					pos: position{line: 1379, col: 5, offset: 38298},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1379, col: 5, offset: 38298},
							expr: &ruleRefExpr{
								pos:  position{line: 1379, col: 6, offset: 38299},
								name: "GlobProperStart",
							},
						},
						&andExpr{
							pos: position{line: 1379, col: 22, offset: 38315},
							expr: &ruleRefExpr{
								pos:  position{line: 1379, col: 23, offset: 38316},
								name: "GlobHasStar",
							},
						},
						&labeledExpr{
							pos:   position{line: 1379, col: 35, offset: 38328},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1379, col: 40, offset: 38333},
								name: "GlobStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1379, col: 50, offset: 38343},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1379, col: 55, offset: 38348},
								expr: &ruleRefExpr{
									pos:  position{line: 1379, col: 55, offset: 38348},
									name: "GlobRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobProperStart",
			pos:  position{line: 1383, col: 1, offset: 38417},
			expr: &choiceExpr{
				pos: position{line: 1383, col: 19, offset: 38435},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1383, col: 19, offset: 38435},
						name: "KeyWordStart",
					},
					&seqExpr{
						pos: position{line: 1383, col: 34, offset: 38450},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1383, col: 34, offset: 38450},
								expr: &litMatcher{
									pos:        position{line: 1383, col: 34, offset: 38450},
									val:        "*",
									ignoreCase: false,
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1383, col: 39, offset: 38455},
								name: "KeyWordRest",
							},
						},
					},
				},
			},
		},
		{
			name: "GlobHasStar",
			pos:  position{line: 1384, col: 1, offset: 38467},
			expr: &seqExpr{
				pos: position{line: 1384, col: 15, offset: 38481},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1384, col: 15, offset: 38481},
						expr: &ruleRefExpr{
							pos:  position{line: 1384, col: 15, offset: 38481},
							name: "KeyWordRest",
						},
					},
					&litMatcher{
						pos:        position{line: 1384, col: 28, offset: 38494},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "GlobStart",
			pos:  position{line: 1386, col: 1, offset: 38499},
			expr: &choiceExpr{
				pos: position{line: 1387, col: 5, offset: 38513},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1387, col: 5, offset: 38513},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1388, col: 5, offset: 38530},
						name: "GlobEsc",
					},
					&actionExpr{
						pos: position{line: 1389, col: 5, offset: 38542},
						run: (*parser).callonGlobStart4,
						expr: &litMatcher{
							pos:        position{line: 1389, col: 5, offset: 38542},
							val:        "*",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GlobRest",
			pos:  position{line: 1391, col: 1, offset: 38567},
			expr: &choiceExpr{
				pos: position{line: 1392, col: 5, offset: 38580},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1392, col: 5, offset: 38580},
						name: "GlobStart",
					},
					&charClassMatcher{
						pos:        position{line: 1393, col: 5, offset: 38594},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "GlobEsc",
			pos:  position{line: 1395, col: 1, offset: 38601},
			expr: &actionExpr{
				pos: position{line: 1395, col: 11, offset: 38611},
				run: (*parser).callonGlobEsc1,
				expr: &seqExpr{
					pos: position{line: 1395, col: 11, offset: 38611},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1395, col: 11, offset: 38611},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1395, col: 16, offset: 38616},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1395, col: 19, offset: 38619},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1395, col: 19, offset: 38619},
										name: "GlobEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1395, col: 32, offset: 38632},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobEscape",
			pos:  position{line: 1397, col: 1, offset: 38667},
			expr: &choiceExpr{
				pos: position{line: 1398, col: 5, offset: 38682},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1398, col: 5, offset: 38682},
						run: (*parser).callonGlobEscape2,
						expr: &litMatcher{
							pos:        position{line: 1398, col: 5, offset: 38682},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1399, col: 5, offset: 38710},
						run: (*parser).callonGlobEscape4,
						expr: &litMatcher{
							pos:        position{line: 1399, col: 5, offset: 38710},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1400, col: 5, offset: 38740},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 1402, col: 1, offset: 38746},
			expr: &choiceExpr{
				pos: position{line: 1403, col: 5, offset: 38767},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1403, col: 5, offset: 38767},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1403, col: 5, offset: 38767},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1403, col: 5, offset: 38767},
									expr: &choiceExpr{
										pos: position{line: 1403, col: 7, offset: 38769},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1403, col: 7, offset: 38769},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1403, col: 13, offset: 38775},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1403, col: 26, offset: 38788,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1404, col: 5, offset: 38825},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1404, col: 5, offset: 38825},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1404, col: 5, offset: 38825},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1404, col: 10, offset: 38830},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1404, col: 12, offset: 38832},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 1406, col: 1, offset: 38866},
			expr: &choiceExpr{
				pos: position{line: 1407, col: 5, offset: 38885},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1407, col: 5, offset: 38885},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 1408, col: 5, offset: 38906},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 1410, col: 1, offset: 38921},
			expr: &choiceExpr{
				pos: position{line: 1411, col: 5, offset: 38942},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1411, col: 5, offset: 38942},
						val:        "'",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1412, col: 5, offset: 38950},
						run: (*parser).callonSingleCharEscape3,
						expr: &litMatcher{
							pos:        position{line: 1412, col: 5, offset: 38950},
							val:        "\"",
							ignoreCase: false,
						},
					},
					&litMatcher{
						pos:        position{line: 1413, col: 5, offset: 38990},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1414, col: 5, offset: 38999},
						run: (*parser).callonSingleCharEscape6,
						expr: &litMatcher{
							pos:        position{line: 1414, col: 5, offset: 38999},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1415, col: 5, offset: 39028},
						run: (*parser).callonSingleCharEscape8,
						expr: &litMatcher{
							pos:        position{line: 1415, col: 5, offset: 39028},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1416, col: 5, offset: 39057},
						run: (*parser).callonSingleCharEscape10,
						expr: &litMatcher{
							pos:        position{line: 1416, col: 5, offset: 39057},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1417, col: 5, offset: 39086},
						run: (*parser).callonSingleCharEscape12,
						expr: &litMatcher{
							pos:        position{line: 1417, col: 5, offset: 39086},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1418, col: 5, offset: 39115},
						run: (*parser).callonSingleCharEscape14,
						expr: &litMatcher{
							pos:        position{line: 1418, col: 5, offset: 39115},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1419, col: 5, offset: 39144},
						run: (*parser).callonSingleCharEscape16,
						expr: &litMatcher{
							pos:        position{line: 1419, col: 5, offset: 39144},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 1421, col: 1, offset: 39170},
			expr: &choiceExpr{
				pos: position{line: 1422, col: 5, offset: 39188},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1422, col: 5, offset: 39188},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 1422, col: 5, offset: 39188},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1423, col: 5, offset: 39216},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 1423, col: 5, offset: 39216},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1424, col: 5, offset: 39244},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 1426, col: 1, offset: 39250},
			expr: &choiceExpr{
				pos: position{line: 1427, col: 5, offset: 39268},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1427, col: 5, offset: 39268},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 1427, col: 5, offset: 39268},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1427, col: 5, offset: 39268},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1427, col: 9, offset: 39272},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1427, col: 16, offset: 39279},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1427, col: 16, offset: 39279},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1427, col: 25, offset: 39288},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1427, col: 34, offset: 39297},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1427, col: 43, offset: 39306},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1430, col: 5, offset: 39369},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 1430, col: 5, offset: 39369},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1430, col: 5, offset: 39369},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1430, col: 9, offset: 39373},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1430, col: 13, offset: 39377},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1430, col: 20, offset: 39384},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1430, col: 20, offset: 39384},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 1430, col: 29, offset: 39393},
												expr: &ruleRefExpr{
													pos:  position{line: 1430, col: 29, offset: 39393},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1430, col: 39, offset: 39403},
												expr: &ruleRefExpr{
													pos:  position{line: 1430, col: 39, offset: 39403},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1430, col: 49, offset: 39413},
												expr: &ruleRefExpr{
													pos:  position{line: 1430, col: 49, offset: 39413},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1430, col: 59, offset: 39423},
												expr: &ruleRefExpr{
													pos:  position{line: 1430, col: 59, offset: 39423},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1430, col: 69, offset: 39433},
												expr: &ruleRefExpr{
													pos:  position{line: 1430, col: 69, offset: 39433},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1430, col: 80, offset: 39444},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpPattern",
			pos:  position{line: 1434, col: 1, offset: 39498},
			expr: &actionExpr{
				pos: position{line: 1435, col: 5, offset: 39516},
				run: (*parser).callonRegexpPattern1,
				expr: &seqExpr{
					pos: position{line: 1435, col: 5, offset: 39516},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1435, col: 5, offset: 39516},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1435, col: 9, offset: 39520},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1435, col: 14, offset: 39525},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 1435, col: 25, offset: 39536},
							val:        "/",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1435, col: 29, offset: 39540},
							expr: &ruleRefExpr{
								pos:  position{line: 1435, col: 30, offset: 39541},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 1437, col: 1, offset: 39576},
			expr: &actionExpr{
				pos: position{line: 1438, col: 5, offset: 39591},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1438, col: 5, offset: 39591},
					expr: &choiceExpr{
						pos: position{line: 1438, col: 6, offset: 39592},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 1438, col: 6, offset: 39592},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&seqExpr{
								pos: position{line: 1438, col: 15, offset: 39601},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1438, col: 15, offset: 39601},
										val:        "\\",
										ignoreCase: false,
									},
									&anyMatcher{
										line: 1438, col: 20, offset: 39606,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 1440, col: 1, offset: 39642},
			expr: &charClassMatcher{
				pos:        position{line: 1441, col: 5, offset: 39658},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 1443, col: 1, offset: 39673},
			expr: &oneOrMoreExpr{
				pos: position{line: 1443, col: 5, offset: 39677},
				expr: &ruleRefExpr{
					pos:  position{line: 1443, col: 5, offset: 39677},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1445, col: 1, offset: 39688},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1445, col: 6, offset: 39693},
				expr: &ruleRefExpr{
					pos:  position{line: 1445, col: 6, offset: 39693},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 1447, col: 1, offset: 39704},
			expr: &choiceExpr{
				pos: position{line: 1448, col: 5, offset: 39717},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1448, col: 5, offset: 39717},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 1449, col: 5, offset: 39732},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 1450, col: 5, offset: 39751},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 1452, col: 1, offset: 39760},
			expr: &anyMatcher{
				line: 1453, col: 5, offset: 39780,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 1455, col: 1, offset: 39783},
			expr: &choiceExpr{
				pos: position{line: 1456, col: 5, offset: 39811},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1456, col: 5, offset: 39811},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1457, col: 5, offset: 39820},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1458, col: 5, offset: 39829},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1459, col: 5, offset: 39838},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1460, col: 5, offset: 39846},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1461, col: 5, offset: 39859},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 1463, col: 1, offset: 39869},
			expr: &charClassMatcher{
				pos:        position{line: 1464, col: 5, offset: 39888},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 1470, col: 1, offset: 40218},
			expr: &ruleRefExpr{
				pos:  position{line: 1473, col: 5, offset: 40289},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1475, col: 1, offset: 40308},
			expr: &seqExpr{
				pos: position{line: 1476, col: 5, offset: 40329},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1476, col: 5, offset: 40329},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1476, col: 10, offset: 40334},
						expr: &seqExpr{
							pos: position{line: 1476, col: 11, offset: 40335},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1476, col: 11, offset: 40335},
									expr: &litMatcher{
										pos:        position{line: 1476, col: 12, offset: 40336},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1476, col: 17, offset: 40341},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1476, col: 35, offset: 40359},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1478, col: 1, offset: 40365},
			expr: &seqExpr{
				pos: position{line: 1479, col: 5, offset: 40387},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1479, col: 5, offset: 40387},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1479, col: 10, offset: 40392},
						expr: &seqExpr{
							pos: position{line: 1479, col: 11, offset: 40393},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1479, col: 11, offset: 40393},
									expr: &ruleRefExpr{
										pos:  position{line: 1479, col: 12, offset: 40394},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1479, col: 27, offset: 40409},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1481, col: 1, offset: 40428},
			expr: &seqExpr{
				pos: position{line: 1481, col: 7, offset: 40434},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1481, col: 7, offset: 40434},
						expr: &ruleRefExpr{
							pos:  position{line: 1481, col: 7, offset: 40434},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1481, col: 19, offset: 40446},
						name: "LineTerminator",
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 1483, col: 1, offset: 40462},
			expr: &choiceExpr{
				pos: position{line: 1483, col: 7, offset: 40468},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1483, col: 7, offset: 40468},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 1483, col: 11, offset: 40472},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1485, col: 1, offset: 40477},
			expr: &notExpr{
				pos: position{line: 1485, col: 7, offset: 40483},
				expr: &anyMatcher{
					line: 1485, col: 8, offset: 40484,
				},
			},
		},
		{
			name: "EOKW",
			pos:  position{line: 1487, col: 1, offset: 40487},
			expr: &notExpr{
				pos: position{line: 1487, col: 8, offset: 40494},
				expr: &ruleRefExpr{
					pos:  position{line: 1487, col: 9, offset: 40495},
					name: "KeyWordChars",
				},
			},
		},
	},
}

func (c *current) onstart2(scope interface{}) (interface{}, error) {
	return []interface{}{scope}, nil
}

func (p *parser) callonstart2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart2(stack["scope"])
}

func (c *current) onstart9(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonstart9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart9(stack["seq"])
}

func (c *current) onScope1(decls, body interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Scope", "decls": decls, "body": body}, nil

}

func (p *parser) callonScope1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope1(stack["decls"], stack["body"])
}

func (c *current) onSeq1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSeq1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSeq1(stack["first"], stack["rest"])
}

func (c *current) onSeqTail1(o interface{}) (interface{}, error) {
	return o, nil
}

func (p *parser) callonSeqTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSeqTail1(stack["o"])
}

func (c *current) onDecl1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonDecl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDecl1(stack["v"])
}

func (c *current) onConstDecl2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ConstDecl", "name": id, "expr": expr}, nil

}

func (p *parser) callonConstDecl2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDecl2(stack["id"], stack["expr"])
}

func (c *current) onConstDecl13(id, typ interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "ConstDecl",

		"name": id,

		"expr": map[string]interface{}{"kind": "TypeValue", "value": map[string]interface{}{"kind": "TypeDef", "name": id, "type": typ}}}, nil

}

func (p *parser) callonConstDecl13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDecl13(stack["id"], stack["typ"])
}

func (c *current) onFuncDecl1(id, params, expr interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "FuncDecl",

		"name": id,

		"params": params,

		"expr": expr}, nil

}

func (p *parser) callonFuncDecl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncDecl1(stack["id"], stack["params"], stack["expr"])
}

func (c *current) onOpDecl1(name, params, body interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "OpDecl",

		"name": name,

		"params": params,

		"body": body}, nil

}

func (p *parser) callonOpDecl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpDecl1(stack["name"], stack["params"], stack["body"])
}

func (c *current) onOperation2(paths interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Parallel", "paths": paths}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["paths"])
}

func (c *current) onOperation12(expr, cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": expr, "cases": cases}, nil

}

func (p *parser) callonOperation12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation12(stack["expr"], stack["cases"])
}

func (c *current) onOperation25(cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": nil, "cases": cases}, nil

}

func (p *parser) callonOperation25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation25(stack["cases"])
}

func (c *current) onOperation35(trunks interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": trunks}, nil

}

func (p *parser) callonOperation35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation35(stack["trunks"])
}

func (c *current) onOperation45(scope interface{}) (interface{}, error) {
	return scope, nil
}

func (p *parser) callonOperation45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation45(stack["scope"])
}

func (c *current) onOperation55(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation55(stack["a"])
}

func (c *current) onOperation61(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation61(stack["a"])
}

func (c *current) onOperation71(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Search", "expr": expr}, nil

}

func (p *parser) callonOperation71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation71(stack["expr"])
}

func (c *current) onOperation77(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation77(stack["expr"])
}

func (c *current) onOperation80(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation80(stack["expr"])
}

func (c *current) onOperation83(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation83(stack["expr"])
}

func (c *current) onLeg1(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLeg1(stack["seq"])
}

func (c *current) onSwitchLeg1(expr, path interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": expr, "path": path}, nil

}

func (p *parser) callonSwitchLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchLeg1(stack["expr"], stack["path"])
}

func (c *current) onCase2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonCase2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase2(stack["expr"])
}

func (c *current) onCase8() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonCase8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase8()
}

func (c *current) onFromLeg1(source, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Trunk", "source": source, "seq": nil}
	if opt != nil {
		m["seq"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonFromLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromLeg1(stack["source"], stack["opt"])
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor13(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor13(stack["expr"])
}

func (c *current) onSearchExpr4(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Term", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonSearchExpr4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr4(stack["v"])
}

func (c *current) onSearchExpr15() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil

}

func (p *parser) callonSearchExpr15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr15()
}

func (c *current) onSearchPredicate2(lhs, op, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": op, "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonSearchPredicate2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPredicate2(stack["lhs"], stack["op"], stack["rhs"])
}

func (c *current) onSearchPredicate12(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchPredicate12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPredicate12(stack["first"], stack["rest"])
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onGlob1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Glob", "pattern": pattern}, nil

}

func (p *parser) callonGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlob1(stack["pattern"])
}

func (c *current) onRegexp1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Regexp", "pattern": pattern}, nil

}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["pattern"])
}

func (c *current) onAggregation2(keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Summarize", "keys": keys, "aggs": nil, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["keys"], stack["limit"])
}

func (c *current) onAggregation10(aggs, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"kind": "Summarize", "keys": nil, "aggs": aggs, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation10(stack["aggs"], stack["keys"], stack["limit"])
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAggAssignment2(lval, agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lval, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment2(stack["lval"], stack["agg"])
}

func (c *current) onAggAssignment11(agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment11(stack["agg"])
}

func (c *current) onAgg1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"kind": "Agg", "name": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonAgg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAgg1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onAggAssignments1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonAggAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssertOp6(e interface{}) (interface{}, error) {
	return []interface{}{e, string(c.text)}, nil
}

func (p *parser) callonAssertOp6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssertOp6(stack["e"])
}

func (c *current) onAssertOp1(expr interface{}) (interface{}, error) {
	// 'assert EXPR' is equivalent to
	// 'yield EXPR ? this : error({message: "assertion failed", "expr": EXPR_text, "on": this}'
	// where EXPR_text is the literal text of EXPR.
	return map[string]interface{}{"kind": "Yield", "exprs": []interface{}{map[string]interface{}{

		"kind": "Conditional",

		"cond": expr.([]interface{})[0],

		"then": map[string]interface{}{"kind": "ID", "name": "this"},

		"else": map[string]interface{}{

			"kind": "Call",

			"name": "error",

			"args": []interface{}{map[string]interface{}{"kind": "RecordExpr", "elems": []interface{}{

				map[string]interface{}{"kind": "Field", "name": "message", "value": map[string]interface{}{

					"kind": "Primitive", "text": "assertion failed", "type": "string"}},

				map[string]interface{}{"kind": "Field", "name": "expr", "value": map[string]interface{}{

					"kind": "Primitive", "text": expr.([]interface{})[1], "type": "string"}},

				map[string]interface{}{"kind": "Field", "name": "on", "value": map[string]interface{}{

					"kind": "ID", "name": "this"}}}}},

			"where": nil}}}}, nil

}

func (p *parser) callonAssertOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssertOp1(stack["expr"])
}

func (c *current) onSortOp10(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortOp10(stack["l"])
}

func (c *current) onSortOp1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var op = map[string]interface{}{"kind": "Sort", "args": list, "order": "asc", "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		op["order"] = "desc"
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			op["nullsfirst"] = true
		}
	}
	return op, nil

}

func (p *parser) callonSortOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortOp1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopOp8(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopOp8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp8(stack["n"])
}

func (c *current) onTopOp20(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopOp20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp20(stack["f"])
}

func (c *current) onTopOp1(limit, flush, fields interface{}) (interface{}, error) {
	var op = map[string]interface{}{"kind": "Top", "limit": 0, "args": nil, "flush": false}
	if limit != nil {
		op["limit"] = limit
	}
	if fields != nil {
		op["args"] = fields
	}
	if flush != nil {
		op["flush"] = true
	}
	return op, nil

}

func (p *parser) callonTopOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cut", "args": args}, nil

}

func (p *parser) callonCutOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutOp1(stack["args"])
}

func (c *current) onDropOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Drop", "args": args}, nil

}

func (p *parser) callonDropOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropOp1(stack["args"])
}

func (c *current) onHeadOp2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": count}, nil
}

func (p *parser) callonHeadOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOp2(stack["count"])
}

func (c *current) onHeadOp10() (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": map[string]interface{}{"kind": "Primitive", "type": "int64", "text": "1"}}, nil
}

func (p *parser) callonHeadOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOp10()
}

func (c *current) onTailOp2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": count}, nil
}

func (p *parser) callonTailOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailOp2(stack["count"])
}

func (c *current) onTailOp10() (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": map[string]interface{}{"kind": "Primitive", "type": "int64", "text": "1"}}, nil
}

func (p *parser) callonTailOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailOp10()
}

func (c *current) onWhereOp1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Where", "expr": expr}, nil

}

func (p *parser) callonWhereOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereOp1(stack["expr"])
}

func (c *current) onUniqOp2() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": true}, nil

}

func (p *parser) callonUniqOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqOp2()
}

func (c *current) onUniqOp7() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": false}, nil

}

func (p *parser) callonUniqOp7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqOp7()
}

func (c *current) onPutOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Put", "args": args}, nil

}

func (p *parser) callonPutOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutOp1(stack["args"])
}

func (c *current) onRenameOp9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameOp9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameOp9(stack["cl"])
}

func (c *current) onRenameOp1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Rename", "args": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameOp1(stack["first"], stack["rest"])
}

func (c *current) onFuseOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Fuse"}, nil

}

func (p *parser) callonFuseOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseOp1()
}

func (c *current) onShapeOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Shape"}, nil

}

func (p *parser) callonShapeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShapeOp1()
}

func (c *current) onJoinOp1(style, rightInput, key, optKey, optArgs interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Join", "style": style, "right_input": rightInput, "left_key": key, "right_key": key, "args": nil}
	if optKey != nil {
		m["right_key"] = optKey.([]interface{})[3]
	}
	if optArgs != nil {
		m["args"] = optArgs.([]interface{})[1]
	}
	return m, nil

}

func (p *parser) callonJoinOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinOp1(stack["style"], stack["rightInput"], stack["key"], stack["optKey"], stack["optArgs"])
}

func (c *current) onJoinStyle2() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle2()
}

func (c *current) onJoinStyle6() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle6()
}

func (c *current) onJoinStyle10() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle10()
}

func (c *current) onJoinStyle14() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonJoinStyle14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle14()
}

func (c *current) onJoinStyle18() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle18()
}

func (c *current) onJoinRightInput2(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonJoinRightInput2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinRightInput2(stack["s"])
}

func (c *current) onJoinRightInput12() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonJoinRightInput12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinRightInput12()
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onSampleOp1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sample", "expr": e}, nil
}

func (p *parser) callonSampleOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleOp1(stack["e"])
}

func (c *current) onOpAssignment1(a interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpAssignment", "assignments": a}, nil

}

func (p *parser) callonOpAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpAssignment1(stack["a"])
}

func (c *current) onSampleExpr2(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonSampleExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr2(stack["lval"])
}

func (c *current) onSampleExpr7() (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": "this"}, nil
}

func (p *parser) callonSampleExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr7()
}

func (c *current) onLoadOp1(pool, branch, author, message, meta interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Load", "pool": pool, "branch": branch, "author": author, "message": message, "meta": meta}, nil

}

func (p *parser) callonLoadOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLoadOp1(stack["pool"], stack["branch"], stack["author"], stack["message"], stack["meta"])
}

func (c *current) onAuthorArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonAuthorArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAuthorArg1(stack["val"])
}

func (c *current) onMessageArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonMessageArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMessageArg1(stack["val"])
}

func (c *current) onMetaArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonMetaArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMetaArg1(stack["val"])
}

func (c *current) onPoolBranch1(branch interface{}) (interface{}, error) {
	return branch, nil
}

func (p *parser) callonPoolBranch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBranch1(stack["branch"])
}

func (c *current) onFromOp1(source interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": []interface{}{map[string]interface{}{"kind": "Trunk", "source": source}}}, nil

}

func (p *parser) callonFromOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromOp1(stack["source"])
}

func (c *current) onFile1(path, format, sort_key interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "File", "path": path, "format": format, "sort_key": sort_key}, nil

}

func (p *parser) callonFile1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile1(stack["path"], stack["format"], stack["sort_key"])
}

func (c *current) onFrom1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonFrom1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrom1(stack["body"])
}

func (c *current) onPool1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonPool1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPool1(stack["body"])
}

func (c *current) onPoolBody1(spec, at interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pool", "spec": spec, "at": at}, nil

}

func (p *parser) callonPoolBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBody1(stack["spec"], stack["at"])
}

func (c *current) onGet1(url, format, sort_key, method, headers, body interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "HTTP",

		"url": url,

		"format": format,

		"sort_key": sort_key,

		"method": method,

		"headers": headers,

		"body": body}, nil

}

func (p *parser) callonGet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGet1(stack["url"], stack["format"], stack["sort_key"], stack["method"], stack["headers"], stack["body"])
}

func (c *current) onMethodArg1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonMethodArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethodArg1(stack["v"])
}

func (c *current) onHeadersArg1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonHeadersArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadersArg1(stack["v"])
}

func (c *current) onBodyArg1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonBodyArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBodyArg1(stack["v"])
}

func (c *current) onPath2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "QuotedString", "text": v}, nil
}

func (p *parser) callonPath2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath2(stack["v"])
}

func (c *current) onPath5() (interface{}, error) {
	return map[string]interface{}{"kind": "String", "text": string(c.text)}, nil
}

func (p *parser) callonPath5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath5()
}

func (c *current) onPoolAt1(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonPoolAt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolAt1(stack["id"])
}

func (c *current) onKSUID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKSUID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKSUID1()
}

func (c *current) onPoolSpec2(pool, commit, meta, tap interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": pool, "commit": commit, "meta": meta, "tap": tap}, nil

}

func (p *parser) callonPoolSpec2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec2(stack["pool"], stack["commit"], stack["meta"], stack["tap"])
}

func (c *current) onPoolSpec14(meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": nil, "commit": nil, "meta": meta}, nil

}

func (p *parser) callonPoolSpec14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec14(stack["meta"])
}

func (c *current) onPoolCommit1(commit interface{}) (interface{}, error) {
	return commit, nil
}

func (p *parser) callonPoolCommit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolCommit1(stack["commit"])
}

func (c *current) onPoolMeta1(meta interface{}) (interface{}, error) {
	return meta, nil
}

func (p *parser) callonPoolMeta1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolMeta1(stack["meta"])
}

func (c *current) onPoolName4() (interface{}, error) {
	return map[string]interface{}{"kind": "Glob", "pattern": "*"}, nil
}

func (p *parser) callonPoolName4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName4()
}

func (c *current) onPoolName9(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "QuotedString", "text": name}, nil
}

func (p *parser) callonPoolName9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName9(stack["name"])
}

func (c *current) onPoolName12(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "String", "text": name}, nil
}

func (p *parser) callonPoolName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName12(stack["name"])
}

func (c *current) onPoolIdentifier1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPoolIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolIdentifier1()
}

func (c *current) onSortKeyArg1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SortKey", "keys": keys, "order": order}, nil

}

func (p *parser) callonSortKeyArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortKeyArg1(stack["keys"], stack["order"])
}

func (c *current) onTapArg2() (interface{}, error) {
	return true, nil
}

func (p *parser) callonTapArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTapArg2()
}

func (c *current) onTapArg6() (interface{}, error) {
	return false, nil
}

func (p *parser) callonTapArg6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTapArg6()
}

func (c *current) onFormatArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonFormatArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArg1(stack["val"])
}

func (c *current) onOrderSuffix2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix2()
}

func (c *current) onOrderSuffix4() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderSuffix4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix4()
}

func (c *current) onOrderSuffix6() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix6()
}

func (c *current) onPassOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Pass"}, nil

}

func (p *parser) callonPassOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassOp1()
}

func (c *current) onExplodeOp1(args, typ, as interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Explode", "args": args, "as": as, "type": typ}, nil

}

func (p *parser) callonExplodeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplodeOp1(stack["args"], stack["typ"], stack["as"])
}

func (c *current) onMergeOp1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Merge", "expr": expr}, nil

}

func (p *parser) callonMergeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMergeOp1(stack["expr"])
}

func (c *current) onOverOp1(exprs, locals, body interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Over", "exprs": exprs, "locals": locals, "body": body}, nil

}

func (p *parser) callonOverOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverOp1(stack["exprs"], stack["locals"], stack["body"])
}

func (c *current) onLateral2(scope interface{}) (interface{}, error) {
	return scope, nil
}

func (p *parser) callonLateral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLateral2(stack["scope"])
}

func (c *current) onLateral13(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonLateral13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLateral13(stack["seq"])
}

func (c *current) onLocals10(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonLocals10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocals10(stack["a"])
}

func (c *current) onLocals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLocals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocals1(stack["first"], stack["rest"])
}

func (c *current) onLocalsAssignment1(name, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"name": name, "expr": map[string]interface{}{"kind": "ID", "name": name}}
	if opt != nil {
		m["expr"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonLocalsAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocalsAssignment1(stack["name"], stack["opt"])
}

func (c *current) onYieldOp1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Yield", "exprs": exprs}, nil

}

func (p *parser) callonYieldOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYieldOp1(stack["exprs"])
}

func (c *current) onTypeArg1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeArg1(stack["typ"])
}

func (c *current) onAsArg1(lhs interface{}) (interface{}, error) {
	return lhs, nil
}

func (p *parser) callonAsArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsArg1(stack["lhs"])
}

func (c *current) onLvals7(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonLvals7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals7(stack["lval"])
}

func (c *current) onLvals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLvals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals1(stack["first"], stack["rest"])
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignments7(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments7(stack["a"])
}

func (c *current) onAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr1(cond, opt interface{}) (interface{}, error) {
	if opt != nil {
		var Then = opt.([]interface{})[3]
		var Else = opt.([]interface{})[7]
		return map[string]interface{}{"kind": "Conditional", "cond": cond, "then": Then, "else": Else}, nil
	}
	return cond, nil

}

func (p *parser) callonConditionalExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr1(stack["cond"], stack["opt"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onComparisonExpr15() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparisonExpr15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr15()
}

func (c *current) onComparisonExpr1(lhs, opAndRHS interface{}) (interface{}, error) {
	if opAndRHS == nil {
		return lhs, nil
	}
	var op = opAndRHS.([]interface{})[1]
	var rhs = opAndRHS.([]interface{})[3]
	return map[string]interface{}{"kind": "BinaryExpr", "op": op, "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonComparisonExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr1(stack["lhs"], stack["opAndRHS"])
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onNegationExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "-", "operand": e}, nil

}

func (p *parser) callonNegationExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNegationExpr2(stack["e"])
}

func (c *current) onFuncExpr2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr2(stack["first"], stack["rest"])
}

func (c *current) onFuncExpr9(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr9(stack["first"], stack["rest"])
}

func (c *current) onCast1(typ, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": expr, "type": typ}, nil

}

func (p *parser) callonCast1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCast1(stack["typ"], stack["expr"])
}

func (c *current) onFunction3(arg0Text, arg1, where interface{}) (interface{}, error) {
	var arg0 = map[string]interface{}{"kind": "Primitive", "type": "string", "text": arg0Text}
	return map[string]interface{}{"kind": "Call", "name": "regexp", "args": []interface{}{arg0, arg1}, "where": where}, nil

}

func (p *parser) callonFunction3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction3(stack["arg0Text"], stack["arg1"], stack["where"])
}

func (c *current) onFunction21(arg0, arg1Text, arg2, where interface{}) (interface{}, error) {
	var arg1 = map[string]interface{}{"kind": "Primitive", "type": "string", "text": arg1Text}
	return map[string]interface{}{"kind": "Call", "name": "regexp_replace", "args": []interface{}{arg0, arg1, arg2}, "where": where}, nil

}

func (p *parser) callonFunction21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction21(stack["arg0"], stack["arg1Text"], stack["arg2"], stack["where"])
}

func (c *current) onFunction44(fn, args, where interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": fn, "args": args, "where": where}, nil

}

func (p *parser) callonFunction44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction44(stack["fn"], stack["args"], stack["where"])
}

func (c *current) onFunctionArgs2(o interface{}) (interface{}, error) {
	return []interface{}{o}, nil
}

func (p *parser) callonFunctionArgs2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunctionArgs2(stack["o"])
}

func (c *current) onGrep1(pattern, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Grep", "pattern": pattern, "expr": map[string]interface{}{"kind": "ID", "name": "this"}}
	if opt != nil {
		m["expr"] = opt.([]interface{})[2]
	}
	return m, nil

}

func (p *parser) callonGrep1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrep1(stack["pattern"], stack["opt"])
}

func (c *current) onPattern4(s interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "String", "text": s}, nil

}

func (p *parser) callonPattern4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPattern4(stack["s"])
}

func (c *current) onOptionalExprs3() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonOptionalExprs3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalExprs3()
}

func (c *current) onExprs7(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonExprs7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs7(stack["e"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr1(stack["first"], stack["rest"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref14(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": nil, "rhs": to}}, nil

}

func (p *parser) callonDeref14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref14(stack["to"])
}

func (c *current) onDeref23(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref23(stack["expr"])
}

func (c *current) onDeref29(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref29(stack["id"])
}

func (c *current) onPrimary7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary7(stack["expr"])
}

func (c *current) onPrimary15(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary15(stack["expr"])
}

func (c *current) onOverExpr1(exprs, locals, body interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OverExpr", "locals": locals, "exprs": exprs, "body": body}, nil

}

func (p *parser) callonOverExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverExpr1(stack["exprs"], stack["locals"], stack["body"])
}

func (c *current) onRecord1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RecordExpr", "elems": elems}, nil

}

func (p *parser) callonRecord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecord1(stack["elems"])
}

func (c *current) onRecordElems2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonRecordElems2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems2(stack["first"], stack["rest"])
}

func (c *current) onRecordElems9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonRecordElems9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems9()
}

func (c *current) onRecordElemTail1(elem interface{}) (interface{}, error) {
	return elem, nil
}

func (p *parser) callonRecordElemTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElemTail1(stack["elem"])
}

func (c *current) onSpread1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Spread", "expr": expr}, nil

}

func (p *parser) callonSpread1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpread1(stack["expr"])
}

func (c *current) onField1(name, value interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Field", "name": name, "value": value}, nil

}

func (p *parser) callonField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField1(stack["name"], stack["value"])
}

func (c *current) onArray1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ArrayExpr", "elems": elems}, nil

}

func (p *parser) callonArray1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArray1(stack["elems"])
}

func (c *current) onSet1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SetExpr", "elems": elems}, nil

}

func (p *parser) callonSet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSet1(stack["elems"])
}

func (c *current) onVectorElems8(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonVectorElems8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems8(stack["e"])
}

func (c *current) onVectorElems2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonVectorElems2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems2(stack["first"], stack["rest"])
}

func (c *current) onVectorElems15() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonVectorElems15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems15()
}

func (c *current) onVectorElem3(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "VectorValue", "expr": e}, nil
}

func (p *parser) callonVectorElem3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElem3(stack["e"])
}

func (c *current) onMap1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "MapExpr", "entries": exprs}, nil

}

func (p *parser) callonMap1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMap1(stack["exprs"])
}

func (c *current) onEntries2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonEntries2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries2(stack["first"], stack["rest"])
}

func (c *current) onEntries9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonEntries9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries9()
}

func (c *current) onEntryTail1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonEntryTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntryTail1(stack["e"])
}

func (c *current) onEntry1(key, value interface{}) (interface{}, error) {
	return map[string]interface{}{"key": key, "value": value}, nil

}

func (p *parser) callonEntry1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntry1(stack["key"], stack["value"])
}

func (c *current) onSQLOp1(selection, from, joins, where, groupby, having, orderby, limit interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "SQLExpr",

		"select": selection,

		"from": from,

		"joins": joins,

		"where": where,

		"group_by": groupby,

		"having": having,

		"order_by": orderby,

		"limit": limit}, nil

}

func (p *parser) callonSQLOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOp1(stack["selection"], stack["from"], stack["joins"], stack["where"], stack["groupby"], stack["having"], stack["orderby"], stack["limit"])
}

func (c *current) onSQLSelect2() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLSelect2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect2()
}

func (c *current) onSQLSelect7(assignments interface{}) (interface{}, error) {
	return assignments, nil
}

func (p *parser) callonSQLSelect7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect7(stack["assignments"])
}

func (c *current) onSQLAssignment1(rhs, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": rhs}
	if opt != nil {
		m["lhs"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonSQLAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment1(stack["rhs"], stack["opt"])
}

func (c *current) onSQLAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments7(stack["expr"])
}

func (c *current) onSQLAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSQLFrom2(table, alias interface{}) (interface{}, error) {
	return map[string]interface{}{"table": table, "alias": alias}, nil

}

func (p *parser) callonSQLFrom2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom2(stack["table"], stack["alias"])
}

func (c *current) onSQLFrom12() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLFrom12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom12()
}

func (c *current) onSQLAlias2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias2(stack["id"])
}

func (c *current) onSQLAlias9(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias9(stack["id"])
}

func (c *current) onSQLJoins7(join interface{}) (interface{}, error) {
	return join, nil
}

func (p *parser) callonSQLJoins7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins7(stack["join"])
}

func (c *current) onSQLJoins1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLJoins1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins1(stack["first"], stack["rest"])
}

func (c *current) onSQLJoin1(style, table, alias, leftKey, rightKey interface{}) (interface{}, error) {
	return map[string]interface{}{

		"table": table,

		"style": style,

		"left_key": leftKey,

		"right_key": rightKey,

		"alias": alias}, nil

}

func (p *parser) callonSQLJoin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoin1(stack["style"], stack["table"], stack["alias"], stack["leftKey"], stack["rightKey"])
}

func (c *current) onSQLJoinStyle2(style interface{}) (interface{}, error) {
	return style, nil
}

func (p *parser) callonSQLJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle2(stack["style"])
}

func (c *current) onSQLJoinStyle11() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonSQLJoinStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle11()
}

func (c *current) onSQLWhere1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLWhere1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLWhere1(stack["expr"])
}

func (c *current) onSQLGroupBy1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonSQLGroupBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLGroupBy1(stack["columns"])
}

func (c *current) onSQLHaving1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLHaving1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLHaving1(stack["expr"])
}

func (c *current) onSQLOrderBy1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SQLOrderBy", "keys": keys, "order": order}, nil

}

func (p *parser) callonSQLOrderBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrderBy1(stack["keys"], stack["order"])
}

func (c *current) onSQLOrder2(dir interface{}) (interface{}, error) {
	return dir, nil
}

func (p *parser) callonSQLOrder2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder2(stack["dir"])
}

func (c *current) onSQLOrder9() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonSQLOrder9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder9()
}

func (c *current) onSQLLimit2(count interface{}) (interface{}, error) {
	return count, nil
}

func (p *parser) callonSQLLimit2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit2(stack["count"])
}

func (c *current) onSQLLimit9() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonSQLLimit9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit9()
}

func (c *current) onSELECT1() (interface{}, error) {
	return "select", nil
}

func (p *parser) callonSELECT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSELECT1()
}

func (c *current) onAS1() (interface{}, error) {
	return "as", nil
}

func (p *parser) callonAS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAS1()
}

func (c *current) onFROM1() (interface{}, error) {
	return "from", nil
}

func (p *parser) callonFROM1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFROM1()
}

func (c *current) onJOIN1() (interface{}, error) {
	return "join", nil
}

func (p *parser) callonJOIN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJOIN1()
}

func (c *current) onWHERE1() (interface{}, error) {
	return "where", nil
}

func (p *parser) callonWHERE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWHERE1()
}

func (c *current) onGROUP1() (interface{}, error) {
	return "group", nil
}

func (p *parser) callonGROUP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGROUP1()
}

func (c *current) onBY1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonBY1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBY1()
}

func (c *current) onHAVING1() (interface{}, error) {
	return "having", nil
}

func (p *parser) callonHAVING1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHAVING1()
}

func (c *current) onORDER1() (interface{}, error) {
	return "order", nil
}

func (p *parser) callonORDER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onORDER1()
}

func (c *current) onON1() (interface{}, error) {
	return "on", nil
}

func (p *parser) callonON1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onON1()
}

func (c *current) onLIMIT1() (interface{}, error) {
	return "limit", nil
}

func (p *parser) callonLIMIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIMIT1()
}

func (c *current) onASC1() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonASC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onASC1()
}

func (c *current) onDESC1() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonDESC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDESC1()
}

func (c *current) onANTI1() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonANTI1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onANTI1()
}

func (c *current) onLEFT1() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonLEFT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLEFT1()
}

func (c *current) onRIGHT1() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonRIGHT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRIGHT1()
}

func (c *current) onINNER1() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonINNER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINNER1()
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "float64", "text": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "int64", "text": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "null", "text": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onBytesLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bytes", "text": string(c.text)}, nil

}

func (p *parser) callonBytesLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBytesLiteral1()
}

func (c *current) onTypeLiteral1(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonTypeLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeLiteral1(stack["typ"])
}

func (c *current) onCastType3(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonCastType3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCastType3(stack["typ"])
}

func (c *current) onAmbiguousType2(name interface{}) (interface{}, error) {
	return name, nil
}

func (p *parser) callonAmbiguousType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType2(stack["name"])
}

func (c *current) onAmbiguousType8(name, opt interface{}) (interface{}, error) {
	if opt != nil {
		return map[string]interface{}{"kind": "TypeDef", "name": name, "type": opt.([]interface{})[3]}, nil
	}
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType8(stack["name"], stack["opt"])
}

func (c *current) onAmbiguousType19(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType19(stack["name"])
}

func (c *current) onAmbiguousType22(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonAmbiguousType22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType22(stack["u"])
}

func (c *current) onTypeUnion1(types interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeUnion", "types": types}, nil

}

func (p *parser) callonTypeUnion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeUnion1(stack["types"])
}

func (c *current) onTypeList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeList1(stack["first"], stack["rest"])
}

func (c *current) onTypeListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeListTail1(stack["typ"])
}

func (c *current) onComplexType2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType2(stack["fields"])
}

func (c *current) onComplexType10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexType10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType10(stack["typ"])
}

func (c *current) onComplexType18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexType18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType18(stack["typ"])
}

func (c *current) onComplexType26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexType26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType26(stack["keyType"], stack["valType"])
}

func (c *current) onTemplateLiteral1(v interface{}) (interface{}, error) {
	if len(v.([]interface{})) == 0 {
		return map[string]interface{}{"kind": "Primitive", "type": "string", "text": ""}, nil
	}
	return makeTemplateExprChain(v), nil

}

func (p *parser) callonTemplateLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteral1(stack["v"])
}

func (c *current) onTemplateLiteralParts2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts2(stack["v"])
}

func (c *current) onTemplateLiteralParts9(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts9(stack["v"])
}

func (c *current) onTemplateDoubleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateDoubleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedPart3(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar2(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar7(stack["v"])
}

func (c *current) onTemplateSingleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateSingleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedPart3(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar2(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar7(stack["v"])
}

func (c *current) onTemplateExpr1(e interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "Cast",

		"expr": e,

		"type": map[string]interface{}{

			"kind": "TypeValue",

			"value": map[string]interface{}{"kind": "TypePrimitive", "name": "string"}}}, nil

}

func (p *parser) callonTemplateExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateExpr1(stack["e"])
}

func (c *current) onPrimitiveType1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveType1()
}

func (c *current) onTypeFieldList2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList2(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldList9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonTypeFieldList9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList9()
}

func (c *current) onTypeFieldListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTail1(stack["typ"])
}

func (c *current) onTypeField1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeField1(stack["name"], stack["typ"])
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return "in", nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onIdentifierName19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName19()
}

func (c *current) onIdentifierName21(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName21(stack["id"])
}

func (c *current) onIdentifierNames7(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierNames7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierNames7(stack["id"])
}

func (c *current) onIdentifierNames1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonIdentifierNames1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierNames1(stack["first"], stack["rest"])
}

func (c *current) onTime1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "time", "text": string(c.text)}, nil

}

func (p *parser) callonTime1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTime1()
}

func (c *current) onDuration1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "duration", "text": string(c.text)}, nil

}

func (p *parser) callonDuration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDuration1()
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onFloatString22() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFloatString22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString22()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordChars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordChars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordChars1()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onGlobPattern1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil

}

func (p *parser) callonGlobPattern1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobPattern1(stack["head"], stack["tail"])
}

func (c *current) onGlobStart4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonGlobStart4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobStart4()
}

func (c *current) onGlobEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonGlobEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEsc1(stack["s"])
}

func (c *current) onGlobEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonGlobEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape2()
}

func (c *current) onGlobEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonGlobEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape4()
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onSingleCharEscape3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleCharEscape3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape3()
}

func (c *current) onSingleCharEscape6() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape6()
}

func (c *current) onSingleCharEscape8() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape8()
}

func (c *current) onSingleCharEscape10() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape10()
}

func (c *current) onSingleCharEscape12() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape12()
}

func (c *current) onSingleCharEscape14() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape14()
}

func (c *current) onSingleCharEscape16() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape16()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexpPattern1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexpPattern1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpPattern1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
