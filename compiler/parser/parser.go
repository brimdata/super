// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 7, col: 1, offset: 26},
			expr: &actionExpr{
				pos: position{line: 7, col: 9, offset: 34},
				run: (*parser).callonstart1,
				expr: &seqExpr{
					pos: position{line: 7, col: 9, offset: 34},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 7, col: 9, offset: 34},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 7, col: 12, offset: 37},
							label: "ast",
							expr: &ruleRefExpr{
								pos:  position{line: 7, col: 16, offset: 41},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 27, offset: 52},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 30, offset: 55},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Sequential",
			pos:  position{line: 9, col: 1, offset: 80},
			expr: &actionExpr{
				pos: position{line: 10, col: 5, offset: 95},
				run: (*parser).callonSequential1,
				expr: &seqExpr{
					pos: position{line: 10, col: 5, offset: 95},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 10, col: 5, offset: 95},
							label: "decls",
							expr: &ruleRefExpr{
								pos:  position{line: 10, col: 11, offset: 101},
								name: "Decls",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 10, col: 17, offset: 107},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 10, col: 20, offset: 110},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 10, col: 26, offset: 116},
								name: "Operation",
							},
						},
						&labeledExpr{
							pos:   position{line: 10, col: 36, offset: 126},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 10, col: 41, offset: 131},
								expr: &ruleRefExpr{
									pos:  position{line: 10, col: 41, offset: 131},
									name: "SequentialTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SequentialTail",
			pos:  position{line: 14, col: 1, offset: 300},
			expr: &actionExpr{
				pos: position{line: 14, col: 18, offset: 317},
				run: (*parser).callonSequentialTail1,
				expr: &seqExpr{
					pos: position{line: 14, col: 18, offset: 317},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 14, col: 18, offset: 317},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 14, col: 21, offset: 320},
							name: "Pipe",
						},
						&ruleRefExpr{
							pos:  position{line: 14, col: 26, offset: 325},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 14, col: 29, offset: 328},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 14, col: 31, offset: 330},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Decls",
			pos:  position{line: 16, col: 1, offset: 359},
			expr: &choiceExpr{
				pos: position{line: 17, col: 5, offset: 369},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 17, col: 5, offset: 369},
						expr: &ruleRefExpr{
							pos:  position{line: 17, col: 5, offset: 369},
							name: "Decl",
						},
					},
					&actionExpr{
						pos: position{line: 18, col: 5, offset: 379},
						run: (*parser).callonDecls4,
						expr: &ruleRefExpr{
							pos:  position{line: 18, col: 5, offset: 379},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Decl",
			pos:  position{line: 20, col: 1, offset: 415},
			expr: &actionExpr{
				pos: position{line: 21, col: 5, offset: 424},
				run: (*parser).callonDecl1,
				expr: &seqExpr{
					pos: position{line: 21, col: 5, offset: 424},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 21, col: 5, offset: 424},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 21, col: 8, offset: 427},
							label: "v",
							expr: &choiceExpr{
								pos: position{line: 21, col: 11, offset: 430},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 21, col: 11, offset: 430},
										name: "ConstDecl",
									},
									&ruleRefExpr{
										pos:  position{line: 21, col: 23, offset: 442},
										name: "FuncDecl",
									},
									&ruleRefExpr{
										pos:  position{line: 21, col: 34, offset: 453},
										name: "OpDecl",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConstDecl",
			pos:  position{line: 23, col: 1, offset: 480},
			expr: &choiceExpr{
				pos: position{line: 24, col: 5, offset: 494},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 24, col: 5, offset: 494},
						run: (*parser).callonConstDecl2,
						expr: &seqExpr{
							pos: position{line: 24, col: 5, offset: 494},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 24, col: 5, offset: 494},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 24, col: 13, offset: 502},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 24, col: 15, offset: 504},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 24, col: 18, offset: 507},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 24, col: 33, offset: 522},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 24, col: 36, offset: 525},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 24, col: 40, offset: 529},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 24, col: 43, offset: 532},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 24, col: 48, offset: 537},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 27, col: 5, offset: 639},
						run: (*parser).callonConstDecl13,
						expr: &seqExpr{
							pos: position{line: 27, col: 5, offset: 639},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 27, col: 5, offset: 639},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 12, offset: 646},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 14, offset: 648},
									label: "id",
									expr: &choiceExpr{
										pos: position{line: 27, col: 18, offset: 652},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 27, col: 18, offset: 652},
												name: "IdentifierName",
											},
											&ruleRefExpr{
												pos:  position{line: 27, col: 35, offset: 669},
												name: "QuotedString",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 49, offset: 683},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 27, col: 52, offset: 686},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 56, offset: 690},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 59, offset: 693},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 63, offset: 697},
										name: "Type",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuncDecl",
			pos:  position{line: 38, col: 1, offset: 955},
			expr: &actionExpr{
				pos: position{line: 39, col: 5, offset: 968},
				run: (*parser).callonFuncDecl1,
				expr: &seqExpr{
					pos: position{line: 39, col: 5, offset: 968},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 39, col: 5, offset: 968},
							val:        "func",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 39, col: 12, offset: 975},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 39, col: 14, offset: 977},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 39, col: 17, offset: 980},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 39, col: 32, offset: 995},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 39, col: 35, offset: 998},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 39, col: 39, offset: 1002},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 39, col: 42, offset: 1005},
							label: "params",
							expr: &ruleRefExpr{
								pos:  position{line: 39, col: 49, offset: 1012},
								name: "IdentifierNames",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 39, col: 65, offset: 1028},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 39, col: 68, offset: 1031},
							val:        ")",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 39, col: 72, offset: 1035},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 39, col: 75, offset: 1038},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 39, col: 79, offset: 1042},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 39, col: 82, offset: 1045},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 39, col: 86, offset: 1049},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 39, col: 89, offset: 1052},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 39, col: 94, offset: 1057},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 39, col: 99, offset: 1062},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 39, col: 102, offset: 1065},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OpDecl",
			pos:  position{line: 52, col: 1, offset: 1245},
			expr: &actionExpr{
				pos: position{line: 53, col: 5, offset: 1256},
				run: (*parser).callonOpDecl1,
				expr: &seqExpr{
					pos: position{line: 53, col: 5, offset: 1256},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 53, col: 5, offset: 1256},
							val:        "op",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 53, col: 10, offset: 1261},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 53, col: 12, offset: 1263},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 53, col: 17, offset: 1268},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 53, col: 32, offset: 1283},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 53, col: 35, offset: 1286},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 53, col: 39, offset: 1290},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 53, col: 42, offset: 1293},
							label: "params",
							expr: &ruleRefExpr{
								pos:  position{line: 53, col: 49, offset: 1300},
								name: "IdentifierNames",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 53, col: 65, offset: 1316},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 53, col: 68, offset: 1319},
							val:        ")",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 53, col: 72, offset: 1323},
							label: "scope",
							expr: &ruleRefExpr{
								pos:  position{line: 53, col: 78, offset: 1329},
								name: "Scope",
							},
						},
					},
				},
			},
		},
		{
			name: "Operation",
			pos:  position{line: 66, col: 1, offset: 1513},
			expr: &choiceExpr{
				pos: position{line: 67, col: 5, offset: 1527},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 67, col: 5, offset: 1527},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 67, col: 5, offset: 1527},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 67, col: 5, offset: 1527},
									val:        "fork",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 67, col: 12, offset: 1534},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 67, col: 15, offset: 1537},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 67, col: 19, offset: 1541},
									label: "ops",
									expr: &oneOrMoreExpr{
										pos: position{line: 67, col: 23, offset: 1545},
										expr: &ruleRefExpr{
											pos:  position{line: 67, col: 23, offset: 1545},
											name: "Leg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 67, col: 28, offset: 1550},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 67, col: 31, offset: 1553},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 70, col: 5, offset: 1642},
						run: (*parser).callonOperation12,
						expr: &seqExpr{
							pos: position{line: 70, col: 5, offset: 1642},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 70, col: 5, offset: 1642},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 70, col: 14, offset: 1651},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 70, col: 16, offset: 1653},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 70, col: 21, offset: 1658},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 70, col: 26, offset: 1663},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 70, col: 28, offset: 1665},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 70, col: 32, offset: 1669},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 70, col: 38, offset: 1675},
										expr: &ruleRefExpr{
											pos:  position{line: 70, col: 38, offset: 1675},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 70, col: 49, offset: 1686},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 70, col: 52, offset: 1689},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 73, col: 5, offset: 1794},
						run: (*parser).callonOperation25,
						expr: &seqExpr{
							pos: position{line: 73, col: 5, offset: 1794},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 73, col: 5, offset: 1794},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 73, col: 14, offset: 1803},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 73, col: 17, offset: 1806},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 73, col: 21, offset: 1810},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 73, col: 27, offset: 1816},
										expr: &ruleRefExpr{
											pos:  position{line: 73, col: 27, offset: 1816},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 73, col: 38, offset: 1827},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 73, col: 41, offset: 1830},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 76, col: 5, offset: 1934},
						run: (*parser).callonOperation35,
						expr: &seqExpr{
							pos: position{line: 76, col: 5, offset: 1934},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 76, col: 5, offset: 1934},
									val:        "from",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 76, col: 12, offset: 1941},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 76, col: 15, offset: 1944},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 76, col: 19, offset: 1948},
									label: "trunks",
									expr: &oneOrMoreExpr{
										pos: position{line: 76, col: 26, offset: 1955},
										expr: &ruleRefExpr{
											pos:  position{line: 76, col: 26, offset: 1955},
											name: "FromLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 76, col: 35, offset: 1964},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 76, col: 38, offset: 1967},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&labeledExpr{
						pos:   position{line: 79, col: 5, offset: 2058},
						label: "op",
						expr: &ruleRefExpr{
							pos:  position{line: 79, col: 8, offset: 2061},
							name: "Operator",
						},
					},
					&actionExpr{
						pos: position{line: 80, col: 5, offset: 2074},
						run: (*parser).callonOperation47,
						expr: &seqExpr{
							pos: position{line: 80, col: 5, offset: 2074},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 80, col: 5, offset: 2074},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 80, col: 7, offset: 2076},
										name: "OpAssignment",
									},
								},
								&andExpr{
									pos: position{line: 80, col: 20, offset: 2089},
									expr: &ruleRefExpr{
										pos:  position{line: 80, col: 21, offset: 2090},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 81, col: 5, offset: 2120},
						run: (*parser).callonOperation53,
						expr: &seqExpr{
							pos: position{line: 81, col: 5, offset: 2120},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 81, col: 5, offset: 2120},
									expr: &seqExpr{
										pos: position{line: 81, col: 7, offset: 2122},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 81, col: 7, offset: 2122},
												name: "Function",
											},
											&ruleRefExpr{
												pos:  position{line: 81, col: 16, offset: 2131},
												name: "EndOfOp",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 81, col: 25, offset: 2140},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 81, col: 27, offset: 2142},
										name: "Aggregation",
									},
								},
								&andExpr{
									pos: position{line: 81, col: 39, offset: 2154},
									expr: &ruleRefExpr{
										pos:  position{line: 81, col: 40, offset: 2155},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 82, col: 5, offset: 2186},
						run: (*parser).callonOperation63,
						expr: &seqExpr{
							pos: position{line: 82, col: 5, offset: 2186},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 82, col: 5, offset: 2186},
									val:        "search",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 82, col: 14, offset: 2195},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 82, col: 16, offset: 2197},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 82, col: 21, offset: 2202},
										name: "SearchBoolean",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 85, col: 5, offset: 2301},
						run: (*parser).callonOperation69,
						expr: &labeledExpr{
							pos:   position{line: 85, col: 5, offset: 2301},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 85, col: 10, offset: 2306},
								name: "SearchBoolean",
							},
						},
					},
					&actionExpr{
						pos: position{line: 88, col: 5, offset: 2405},
						run: (*parser).callonOperation72,
						expr: &labeledExpr{
							pos:   position{line: 88, col: 5, offset: 2405},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 88, col: 10, offset: 2410},
								name: "Cast",
							},
						},
					},
					&actionExpr{
						pos: position{line: 91, col: 5, offset: 2498},
						run: (*parser).callonOperation75,
						expr: &labeledExpr{
							pos:   position{line: 91, col: 5, offset: 2498},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 91, col: 10, offset: 2503},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "EndOfOp",
			pos:  position{line: 95, col: 1, offset: 2590},
			expr: &seqExpr{
				pos: position{line: 95, col: 11, offset: 2600},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 95, col: 11, offset: 2600},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 95, col: 15, offset: 2604},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 95, col: 15, offset: 2604},
								name: "Pipe",
							},
							&ruleRefExpr{
								pos:  position{line: 95, col: 22, offset: 2611},
								name: "SearchKeywordGuard",
							},
							&litMatcher{
								pos:        position{line: 95, col: 43, offset: 2632},
								val:        "=>",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 95, col: 50, offset: 2639},
								val:        ")",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 95, col: 56, offset: 2645},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "Pipe",
			pos:  position{line: 96, col: 1, offset: 2650},
			expr: &seqExpr{
				pos: position{line: 96, col: 8, offset: 2657},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 96, col: 8, offset: 2657},
						val:        "|",
						ignoreCase: false,
					},
					&notExpr{
						pos: position{line: 96, col: 12, offset: 2661},
						expr: &choiceExpr{
							pos: position{line: 96, col: 14, offset: 2663},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 96, col: 14, offset: 2663},
									val:        "{",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 96, col: 20, offset: 2669},
									val:        "[",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Leg",
			pos:  position{line: 98, col: 1, offset: 2675},
			expr: &actionExpr{
				pos: position{line: 99, col: 5, offset: 2683},
				run: (*parser).callonLeg1,
				expr: &seqExpr{
					pos: position{line: 99, col: 5, offset: 2683},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 99, col: 5, offset: 2683},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 99, col: 8, offset: 2686},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 99, col: 13, offset: 2691},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 99, col: 16, offset: 2694},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 99, col: 18, offset: 2696},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchLeg",
			pos:  position{line: 101, col: 1, offset: 2726},
			expr: &actionExpr{
				pos: position{line: 102, col: 5, offset: 2740},
				run: (*parser).callonSwitchLeg1,
				expr: &seqExpr{
					pos: position{line: 102, col: 5, offset: 2740},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 102, col: 5, offset: 2740},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 102, col: 8, offset: 2743},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 102, col: 13, offset: 2748},
								name: "Case",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 102, col: 18, offset: 2753},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 102, col: 21, offset: 2756},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 102, col: 26, offset: 2761},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 102, col: 29, offset: 2764},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 102, col: 32, offset: 2767},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "Case",
			pos:  position{line: 106, col: 1, offset: 2852},
			expr: &choiceExpr{
				pos: position{line: 107, col: 5, offset: 2861},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 107, col: 5, offset: 2861},
						run: (*parser).callonCase2,
						expr: &seqExpr{
							pos: position{line: 107, col: 5, offset: 2861},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 107, col: 5, offset: 2861},
									val:        "case",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 107, col: 12, offset: 2868},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 107, col: 14, offset: 2870},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 107, col: 19, offset: 2875},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 108, col: 5, offset: 2905},
						run: (*parser).callonCase8,
						expr: &litMatcher{
							pos:        position{line: 108, col: 5, offset: 2905},
							val:        "default",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromLeg",
			pos:  position{line: 110, col: 1, offset: 2936},
			expr: &actionExpr{
				pos: position{line: 111, col: 5, offset: 2948},
				run: (*parser).callonFromLeg1,
				expr: &seqExpr{
					pos: position{line: 111, col: 5, offset: 2948},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 111, col: 5, offset: 2948},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 111, col: 8, offset: 2951},
							label: "source",
							expr: &ruleRefExpr{
								pos:  position{line: 111, col: 15, offset: 2958},
								name: "FromSource",
							},
						},
						&labeledExpr{
							pos:   position{line: 111, col: 26, offset: 2969},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 111, col: 30, offset: 2973},
								expr: &seqExpr{
									pos: position{line: 111, col: 31, offset: 2974},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 111, col: 31, offset: 2974},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 111, col: 34, offset: 2977},
											val:        "=>",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 111, col: 39, offset: 2982},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 111, col: 43, offset: 2986},
											name: "Sequential",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FromSource",
			pos:  position{line: 119, col: 1, offset: 3184},
			expr: &choiceExpr{
				pos: position{line: 120, col: 5, offset: 3199},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 120, col: 5, offset: 3199},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 121, col: 5, offset: 3208},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 122, col: 5, offset: 3216},
						name: "Pool",
					},
					&ruleRefExpr{
						pos:  position{line: 123, col: 5, offset: 3225},
						name: "PassOp",
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 125, col: 1, offset: 3233},
			expr: &seqExpr{
				pos: position{line: 125, col: 13, offset: 3245},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 125, col: 13, offset: 3245},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 125, col: 17, offset: 3249},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 125, col: 18, offset: 3250},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 125, col: 18, offset: 3250},
										expr: &litMatcher{
											pos:        position{line: 125, col: 19, offset: 3251},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 125, col: 24, offset: 3256},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 125, col: 38, offset: 3270},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 125, col: 57, offset: 3289},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 125, col: 82, offset: 3314},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 125, col: 88, offset: 3320},
								val:        "(",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 125, col: 94, offset: 3326},
								val:        "[",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 125, col: 100, offset: 3332},
								val:        "~",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 127, col: 1, offset: 3338},
			expr: &actionExpr{
				pos: position{line: 127, col: 14, offset: 3351},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 127, col: 15, offset: 3352},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 127, col: 15, offset: 3352},
							val:        "==",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 127, col: 22, offset: 3359},
							val:        "!=",
							ignoreCase: false,
						},
						&seqExpr{
							pos: position{line: 127, col: 30, offset: 3367},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 127, col: 30, offset: 3367},
									val:        "in",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 127, col: 35, offset: 3372},
									expr: &ruleRefExpr{
										pos:  position{line: 127, col: 36, offset: 3373},
										name: "IdentifierRest",
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 127, col: 54, offset: 3391},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 127, col: 61, offset: 3398},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 127, col: 67, offset: 3404},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 127, col: 74, offset: 3411},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 129, col: 1, offset: 3448},
			expr: &actionExpr{
				pos: position{line: 130, col: 5, offset: 3466},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 130, col: 5, offset: 3466},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 130, col: 5, offset: 3466},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 130, col: 11, offset: 3472},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 130, col: 21, offset: 3482},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 130, col: 26, offset: 3487},
								expr: &ruleRefExpr{
									pos:  position{line: 130, col: 26, offset: 3487},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 134, col: 1, offset: 3561},
			expr: &actionExpr{
				pos: position{line: 134, col: 16, offset: 3576},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 134, col: 16, offset: 3576},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 134, col: 16, offset: 3576},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 134, col: 18, offset: 3578},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 134, col: 26, offset: 3586},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 134, col: 28, offset: 3588},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 134, col: 30, offset: 3590},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 136, col: 1, offset: 3640},
			expr: &actionExpr{
				pos: position{line: 137, col: 5, offset: 3654},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 137, col: 5, offset: 3654},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 137, col: 5, offset: 3654},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 137, col: 11, offset: 3660},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 138, col: 5, offset: 3677},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 138, col: 10, offset: 3682},
								expr: &actionExpr{
									pos: position{line: 138, col: 11, offset: 3683},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 138, col: 11, offset: 3683},
										exprs: []interface{}{
											&zeroOrOneExpr{
												pos: position{line: 138, col: 11, offset: 3683},
												expr: &seqExpr{
													pos: position{line: 138, col: 12, offset: 3684},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 138, col: 12, offset: 3684},
															name: "_",
														},
														&ruleRefExpr{
															pos:  position{line: 138, col: 14, offset: 3686},
															name: "AndToken",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 138, col: 25, offset: 3697},
												name: "_",
											},
											&notExpr{
												pos: position{line: 138, col: 27, offset: 3699},
												expr: &choiceExpr{
													pos: position{line: 138, col: 29, offset: 3701},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 138, col: 29, offset: 3701},
															name: "OrToken",
														},
														&ruleRefExpr{
															pos:  position{line: 138, col: 39, offset: 3711},
															name: "SearchKeywordGuard",
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 138, col: 59, offset: 3731},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 138, col: 64, offset: 3736},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchKeywordGuard",
			pos:  position{line: 142, col: 1, offset: 3852},
			expr: &choiceExpr{
				pos: position{line: 143, col: 5, offset: 3875},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 143, col: 5, offset: 3875},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 143, col: 5, offset: 3875},
								name: "FromSource",
							},
							&ruleRefExpr{
								pos:  position{line: 143, col: 16, offset: 3886},
								name: "__",
							},
							&litMatcher{
								pos:        position{line: 143, col: 19, offset: 3889},
								val:        "=>",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 143, col: 24, offset: 3894},
								name: "__",
							},
						},
					},
					&seqExpr{
						pos: position{line: 144, col: 5, offset: 3901},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 144, col: 5, offset: 3901},
								name: "Case",
							},
							&ruleRefExpr{
								pos:  position{line: 144, col: 10, offset: 3906},
								name: "__",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 146, col: 1, offset: 3910},
			expr: &choiceExpr{
				pos: position{line: 147, col: 5, offset: 3927},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 147, col: 5, offset: 3927},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 147, col: 5, offset: 3927},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 147, col: 6, offset: 3928},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 147, col: 6, offset: 3928},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 147, col: 6, offset: 3928},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 147, col: 15, offset: 3937},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 147, col: 19, offset: 3941},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 147, col: 19, offset: 3941},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 147, col: 23, offset: 3945},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 147, col: 27, offset: 3949},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 147, col: 29, offset: 3951},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 150, col: 5, offset: 4063},
						run: (*parser).callonSearchFactor13,
						expr: &seqExpr{
							pos: position{line: 150, col: 5, offset: 4063},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 150, col: 5, offset: 4063},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 150, col: 9, offset: 4067},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 150, col: 12, offset: 4070},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 150, col: 17, offset: 4075},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 150, col: 31, offset: 4089},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 150, col: 34, offset: 4092},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 151, col: 5, offset: 4121},
						name: "SearchExpr",
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 153, col: 1, offset: 4133},
			expr: &choiceExpr{
				pos: position{line: 154, col: 5, offset: 4148},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 154, col: 5, offset: 4148},
						name: "Glob",
					},
					&ruleRefExpr{
						pos:  position{line: 155, col: 5, offset: 4157},
						name: "Regexp",
					},
					&actionExpr{
						pos: position{line: 156, col: 5, offset: 4168},
						run: (*parser).callonSearchExpr4,
						expr: &seqExpr{
							pos: position{line: 156, col: 5, offset: 4168},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 156, col: 5, offset: 4168},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 156, col: 7, offset: 4170},
										name: "SearchValue",
									},
								},
								&choiceExpr{
									pos: position{line: 156, col: 20, offset: 4183},
									alternatives: []interface{}{
										&notExpr{
											pos: position{line: 156, col: 20, offset: 4183},
											expr: &ruleRefExpr{
												pos:  position{line: 156, col: 21, offset: 4184},
												name: "ExprGuard",
											},
										},
										&andExpr{
											pos: position{line: 156, col: 33, offset: 4196},
											expr: &seqExpr{
												pos: position{line: 156, col: 35, offset: 4198},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 156, col: 35, offset: 4198},
														name: "_",
													},
													&ruleRefExpr{
														pos:  position{line: 156, col: 37, offset: 4200},
														name: "Glob",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 159, col: 5, offset: 4312},
						run: (*parser).callonSearchExpr15,
						expr: &seqExpr{
							pos: position{line: 159, col: 5, offset: 4312},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 159, col: 5, offset: 4312},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 159, col: 9, offset: 4316},
									expr: &ruleRefExpr{
										pos:  position{line: 159, col: 10, offset: 4317},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 162, col: 5, offset: 4433},
						name: "SearchPredicate",
					},
				},
			},
		},
		{
			name: "SearchPredicate",
			pos:  position{line: 164, col: 1, offset: 4450},
			expr: &choiceExpr{
				pos: position{line: 165, col: 5, offset: 4470},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 165, col: 5, offset: 4470},
						run: (*parser).callonSearchPredicate2,
						expr: &seqExpr{
							pos: position{line: 165, col: 5, offset: 4470},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 165, col: 5, offset: 4470},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 165, col: 9, offset: 4474},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 165, col: 22, offset: 4487},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 165, col: 25, offset: 4490},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 165, col: 28, offset: 4493},
										name: "Comparator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 165, col: 39, offset: 4504},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 165, col: 42, offset: 4507},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 165, col: 46, offset: 4511},
										name: "AdditiveExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 168, col: 6, offset: 4634},
						run: (*parser).callonSearchPredicate12,
						expr: &seqExpr{
							pos: position{line: 168, col: 6, offset: 4634},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 168, col: 6, offset: 4634},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 168, col: 12, offset: 4640},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 168, col: 21, offset: 4649},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 168, col: 26, offset: 4654},
										expr: &ruleRefExpr{
											pos:  position{line: 168, col: 27, offset: 4655},
											name: "Deref",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 172, col: 1, offset: 4727},
			expr: &choiceExpr{
				pos: position{line: 173, col: 5, offset: 4743},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 173, col: 5, offset: 4743},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 174, col: 5, offset: 4755},
						run: (*parser).callonSearchValue3,
						expr: &seqExpr{
							pos: position{line: 174, col: 5, offset: 4755},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 174, col: 5, offset: 4755},
									expr: &ruleRefExpr{
										pos:  position{line: 174, col: 6, offset: 4756},
										name: "RegexpPattern",
									},
								},
								&labeledExpr{
									pos:   position{line: 174, col: 20, offset: 4770},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 174, col: 22, offset: 4772},
										name: "KeyWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Glob",
			pos:  position{line: 178, col: 1, offset: 4880},
			expr: &actionExpr{
				pos: position{line: 179, col: 5, offset: 4889},
				run: (*parser).callonGlob1,
				expr: &labeledExpr{
					pos:   position{line: 179, col: 5, offset: 4889},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 179, col: 13, offset: 4897},
						name: "GlobPattern",
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 183, col: 1, offset: 4993},
			expr: &actionExpr{
				pos: position{line: 184, col: 5, offset: 5004},
				run: (*parser).callonRegexp1,
				expr: &labeledExpr{
					pos:   position{line: 184, col: 5, offset: 5004},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 184, col: 13, offset: 5012},
						name: "RegexpPattern",
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 190, col: 1, offset: 5138},
			expr: &choiceExpr{
				pos: position{line: 191, col: 5, offset: 5154},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 191, col: 5, offset: 5154},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 191, col: 5, offset: 5154},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 191, col: 5, offset: 5154},
									expr: &ruleRefExpr{
										pos:  position{line: 191, col: 5, offset: 5154},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 191, col: 16, offset: 5165},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 191, col: 21, offset: 5170},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 191, col: 33, offset: 5182},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 191, col: 39, offset: 5188},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 194, col: 5, offset: 5314},
						run: (*parser).callonAggregation10,
						expr: &seqExpr{
							pos: position{line: 194, col: 5, offset: 5314},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 194, col: 5, offset: 5314},
									expr: &ruleRefExpr{
										pos:  position{line: 194, col: 5, offset: 5314},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 194, col: 16, offset: 5325},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 194, col: 21, offset: 5330},
										name: "AggAssignments",
									},
								},
								&labeledExpr{
									pos:   position{line: 194, col: 36, offset: 5345},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 194, col: 41, offset: 5350},
										expr: &seqExpr{
											pos: position{line: 194, col: 42, offset: 5351},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 194, col: 42, offset: 5351},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 194, col: 44, offset: 5353},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 194, col: 58, offset: 5367},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 194, col: 64, offset: 5373},
										name: "LimitArg",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Summarize",
			pos:  position{line: 202, col: 1, offset: 5587},
			expr: &seqExpr{
				pos: position{line: 202, col: 13, offset: 5599},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 202, col: 13, offset: 5599},
						val:        "summarize",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 202, col: 25, offset: 5611},
						name: "_",
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 204, col: 1, offset: 5614},
			expr: &actionExpr{
				pos: position{line: 205, col: 5, offset: 5630},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 205, col: 5, offset: 5630},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 205, col: 5, offset: 5630},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 205, col: 13, offset: 5638},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 205, col: 15, offset: 5640},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 205, col: 23, offset: 5648},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 207, col: 1, offset: 5689},
			expr: &choiceExpr{
				pos: position{line: 208, col: 5, offset: 5702},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 208, col: 5, offset: 5702},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 208, col: 5, offset: 5702},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 208, col: 5, offset: 5702},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 208, col: 7, offset: 5704},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 208, col: 14, offset: 5711},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 208, col: 16, offset: 5713},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 208, col: 25, offset: 5722},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 208, col: 27, offset: 5724},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 208, col: 33, offset: 5730},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 209, col: 5, offset: 5761},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 209, col: 5, offset: 5761},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 214, col: 1, offset: 6021},
			expr: &choiceExpr{
				pos: position{line: 215, col: 5, offset: 6040},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 215, col: 5, offset: 6040},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 216, col: 5, offset: 6055},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 216, col: 5, offset: 6055},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 216, col: 10, offset: 6060},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 218, col: 1, offset: 6152},
			expr: &actionExpr{
				pos: position{line: 219, col: 5, offset: 6172},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 219, col: 5, offset: 6172},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 219, col: 5, offset: 6172},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 219, col: 11, offset: 6178},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 219, col: 26, offset: 6193},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 219, col: 31, offset: 6198},
								expr: &actionExpr{
									pos: position{line: 219, col: 32, offset: 6199},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 219, col: 32, offset: 6199},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 219, col: 32, offset: 6199},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 219, col: 35, offset: 6202},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 219, col: 39, offset: 6206},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 219, col: 42, offset: 6209},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 219, col: 47, offset: 6214},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignment",
			pos:  position{line: 223, col: 1, offset: 6336},
			expr: &choiceExpr{
				pos: position{line: 224, col: 5, offset: 6354},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 224, col: 5, offset: 6354},
						run: (*parser).callonAggAssignment2,
						expr: &seqExpr{
							pos: position{line: 224, col: 5, offset: 6354},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 224, col: 5, offset: 6354},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 224, col: 10, offset: 6359},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 224, col: 15, offset: 6364},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 224, col: 18, offset: 6367},
									val:        ":=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 224, col: 23, offset: 6372},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 224, col: 26, offset: 6375},
									label: "agg",
									expr: &ruleRefExpr{
										pos:  position{line: 224, col: 30, offset: 6379},
										name: "Agg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 227, col: 5, offset: 6483},
						run: (*parser).callonAggAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 227, col: 5, offset: 6483},
							label: "agg",
							expr: &ruleRefExpr{
								pos:  position{line: 227, col: 9, offset: 6487},
								name: "Agg",
							},
						},
					},
				},
			},
		},
		{
			name: "Agg",
			pos:  position{line: 231, col: 1, offset: 6587},
			expr: &actionExpr{
				pos: position{line: 232, col: 5, offset: 6595},
				run: (*parser).callonAgg1,
				expr: &seqExpr{
					pos: position{line: 232, col: 5, offset: 6595},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 232, col: 5, offset: 6595},
							expr: &ruleRefExpr{
								pos:  position{line: 232, col: 6, offset: 6596},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 232, col: 16, offset: 6606},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 232, col: 19, offset: 6609},
								name: "AggName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 232, col: 27, offset: 6617},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 232, col: 30, offset: 6620},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 232, col: 34, offset: 6624},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 232, col: 37, offset: 6627},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 232, col: 42, offset: 6632},
								expr: &choiceExpr{
									pos: position{line: 232, col: 43, offset: 6633},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 232, col: 43, offset: 6633},
											name: "OverExpr",
										},
										&ruleRefExpr{
											pos:  position{line: 232, col: 54, offset: 6644},
											name: "Expr",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 232, col: 62, offset: 6652},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 232, col: 65, offset: 6655},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 232, col: 69, offset: 6659},
							expr: &seqExpr{
								pos: position{line: 232, col: 71, offset: 6661},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 232, col: 71, offset: 6661},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 232, col: 74, offset: 6664},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 232, col: 79, offset: 6669},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 232, col: 85, offset: 6675},
								expr: &ruleRefExpr{
									pos:  position{line: 232, col: 85, offset: 6675},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggName",
			pos:  position{line: 240, col: 1, offset: 6865},
			expr: &choiceExpr{
				pos: position{line: 241, col: 5, offset: 6877},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 241, col: 5, offset: 6877},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 242, col: 5, offset: 6896},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 243, col: 5, offset: 6909},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 245, col: 1, offset: 6918},
			expr: &actionExpr{
				pos: position{line: 245, col: 15, offset: 6932},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 245, col: 15, offset: 6932},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 245, col: 15, offset: 6932},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 245, col: 17, offset: 6934},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 245, col: 25, offset: 6942},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 245, col: 27, offset: 6944},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 245, col: 32, offset: 6949},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignments",
			pos:  position{line: 247, col: 1, offset: 6985},
			expr: &actionExpr{
				pos: position{line: 248, col: 5, offset: 7004},
				run: (*parser).callonAggAssignments1,
				expr: &seqExpr{
					pos: position{line: 248, col: 5, offset: 7004},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 248, col: 5, offset: 7004},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 248, col: 11, offset: 7010},
								name: "AggAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 248, col: 25, offset: 7024},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 248, col: 30, offset: 7029},
								expr: &seqExpr{
									pos: position{line: 248, col: 31, offset: 7030},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 248, col: 31, offset: 7030},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 248, col: 34, offset: 7033},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 248, col: 38, offset: 7037},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 248, col: 41, offset: 7040},
											name: "AggAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 258, col: 1, offset: 7264},
			expr: &choiceExpr{
				pos: position{line: 259, col: 5, offset: 7277},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 259, col: 5, offset: 7277},
						name: "AssertOp",
					},
					&ruleRefExpr{
						pos:  position{line: 260, col: 5, offset: 7290},
						name: "SortOp",
					},
					&ruleRefExpr{
						pos:  position{line: 261, col: 5, offset: 7301},
						name: "TopOp",
					},
					&ruleRefExpr{
						pos:  position{line: 262, col: 5, offset: 7311},
						name: "CutOp",
					},
					&ruleRefExpr{
						pos:  position{line: 263, col: 5, offset: 7321},
						name: "DropOp",
					},
					&ruleRefExpr{
						pos:  position{line: 264, col: 5, offset: 7332},
						name: "HeadOp",
					},
					&ruleRefExpr{
						pos:  position{line: 265, col: 5, offset: 7343},
						name: "TailOp",
					},
					&ruleRefExpr{
						pos:  position{line: 266, col: 5, offset: 7354},
						name: "WhereOp",
					},
					&ruleRefExpr{
						pos:  position{line: 267, col: 5, offset: 7366},
						name: "UniqOp",
					},
					&ruleRefExpr{
						pos:  position{line: 268, col: 5, offset: 7377},
						name: "PutOp",
					},
					&ruleRefExpr{
						pos:  position{line: 269, col: 5, offset: 7387},
						name: "RenameOp",
					},
					&ruleRefExpr{
						pos:  position{line: 270, col: 5, offset: 7400},
						name: "FuseOp",
					},
					&ruleRefExpr{
						pos:  position{line: 271, col: 5, offset: 7411},
						name: "ShapeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 272, col: 5, offset: 7423},
						name: "JoinOp",
					},
					&ruleRefExpr{
						pos:  position{line: 273, col: 5, offset: 7434},
						name: "SampleOp",
					},
					&ruleRefExpr{
						pos:  position{line: 274, col: 5, offset: 7447},
						name: "SQLOp",
					},
					&ruleRefExpr{
						pos:  position{line: 275, col: 5, offset: 7457},
						name: "FromOp",
					},
					&ruleRefExpr{
						pos:  position{line: 276, col: 5, offset: 7468},
						name: "PassOp",
					},
					&ruleRefExpr{
						pos:  position{line: 277, col: 5, offset: 7479},
						name: "ExplodeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 278, col: 5, offset: 7493},
						name: "MergeOp",
					},
					&ruleRefExpr{
						pos:  position{line: 279, col: 5, offset: 7505},
						name: "OverOp",
					},
					&ruleRefExpr{
						pos:  position{line: 280, col: 5, offset: 7516},
						name: "YieldOp",
					},
				},
			},
		},
		{
			name: "AssertOp",
			pos:  position{line: 282, col: 1, offset: 7525},
			expr: &actionExpr{
				pos: position{line: 283, col: 5, offset: 7538},
				run: (*parser).callonAssertOp1,
				expr: &seqExpr{
					pos: position{line: 283, col: 5, offset: 7538},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 283, col: 5, offset: 7538},
							val:        "assert",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 283, col: 14, offset: 7547},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 283, col: 16, offset: 7549},
							label: "expr",
							expr: &actionExpr{
								pos: position{line: 283, col: 22, offset: 7555},
								run: (*parser).callonAssertOp6,
								expr: &labeledExpr{
									pos:   position{line: 283, col: 22, offset: 7555},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 283, col: 24, offset: 7557},
										name: "Expr",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortOp",
			pos:  position{line: 319, col: 1, offset: 8908},
			expr: &actionExpr{
				pos: position{line: 320, col: 5, offset: 8919},
				run: (*parser).callonSortOp1,
				expr: &seqExpr{
					pos: position{line: 320, col: 5, offset: 8919},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 320, col: 5, offset: 8919},
							val:        "sort",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 320, col: 12, offset: 8926},
							expr: &ruleRefExpr{
								pos:  position{line: 320, col: 13, offset: 8927},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 320, col: 18, offset: 8932},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 320, col: 23, offset: 8937},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 320, col: 32, offset: 8946},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 320, col: 37, offset: 8951},
								expr: &actionExpr{
									pos: position{line: 320, col: 38, offset: 8952},
									run: (*parser).callonSortOp10,
									expr: &seqExpr{
										pos: position{line: 320, col: 38, offset: 8952},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 320, col: 38, offset: 8952},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 320, col: 40, offset: 8954},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 320, col: 42, offset: 8956},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 334, col: 1, offset: 9367},
			expr: &actionExpr{
				pos: position{line: 334, col: 12, offset: 9378},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 334, col: 12, offset: 9378},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 334, col: 17, offset: 9383},
						expr: &actionExpr{
							pos: position{line: 334, col: 18, offset: 9384},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 334, col: 18, offset: 9384},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 334, col: 18, offset: 9384},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 334, col: 20, offset: 9386},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 334, col: 22, offset: 9388},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 336, col: 1, offset: 9444},
			expr: &choiceExpr{
				pos: position{line: 337, col: 5, offset: 9456},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 337, col: 5, offset: 9456},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 337, col: 5, offset: 9456},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 338, col: 5, offset: 9531},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 338, col: 5, offset: 9531},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 338, col: 5, offset: 9531},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 338, col: 14, offset: 9540},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 338, col: 16, offset: 9542},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 338, col: 23, offset: 9549},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 338, col: 24, offset: 9550},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 338, col: 24, offset: 9550},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 338, col: 34, offset: 9560},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopOp",
			pos:  position{line: 340, col: 1, offset: 9674},
			expr: &actionExpr{
				pos: position{line: 341, col: 5, offset: 9684},
				run: (*parser).callonTopOp1,
				expr: &seqExpr{
					pos: position{line: 341, col: 5, offset: 9684},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 341, col: 5, offset: 9684},
							val:        "top",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 341, col: 11, offset: 9690},
							expr: &ruleRefExpr{
								pos:  position{line: 341, col: 12, offset: 9691},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 341, col: 17, offset: 9696},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 341, col: 23, offset: 9702},
								expr: &actionExpr{
									pos: position{line: 341, col: 24, offset: 9703},
									run: (*parser).callonTopOp8,
									expr: &seqExpr{
										pos: position{line: 341, col: 24, offset: 9703},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 341, col: 24, offset: 9703},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 341, col: 26, offset: 9705},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 341, col: 28, offset: 9707},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 341, col: 52, offset: 9731},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 341, col: 58, offset: 9737},
								expr: &seqExpr{
									pos: position{line: 341, col: 59, offset: 9738},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 341, col: 59, offset: 9738},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 341, col: 61, offset: 9740},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 341, col: 72, offset: 9751},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 341, col: 79, offset: 9758},
								expr: &actionExpr{
									pos: position{line: 341, col: 80, offset: 9759},
									run: (*parser).callonTopOp20,
									expr: &seqExpr{
										pos: position{line: 341, col: 80, offset: 9759},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 341, col: 80, offset: 9759},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 341, col: 82, offset: 9761},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 341, col: 84, offset: 9763},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutOp",
			pos:  position{line: 355, col: 1, offset: 10098},
			expr: &actionExpr{
				pos: position{line: 356, col: 5, offset: 10108},
				run: (*parser).callonCutOp1,
				expr: &seqExpr{
					pos: position{line: 356, col: 5, offset: 10108},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 356, col: 5, offset: 10108},
							val:        "cut",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 356, col: 11, offset: 10114},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 356, col: 13, offset: 10116},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 356, col: 18, offset: 10121},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropOp",
			pos:  position{line: 360, col: 1, offset: 10216},
			expr: &actionExpr{
				pos: position{line: 361, col: 5, offset: 10227},
				run: (*parser).callonDropOp1,
				expr: &seqExpr{
					pos: position{line: 361, col: 5, offset: 10227},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 361, col: 5, offset: 10227},
							val:        "drop",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 361, col: 12, offset: 10234},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 361, col: 14, offset: 10236},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 361, col: 19, offset: 10241},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadOp",
			pos:  position{line: 365, col: 1, offset: 10332},
			expr: &choiceExpr{
				pos: position{line: 366, col: 5, offset: 10343},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 366, col: 5, offset: 10343},
						run: (*parser).callonHeadOp2,
						expr: &seqExpr{
							pos: position{line: 366, col: 5, offset: 10343},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 366, col: 5, offset: 10343},
									val:        "head",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 366, col: 12, offset: 10350},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 366, col: 14, offset: 10352},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 366, col: 20, offset: 10358},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 367, col: 5, offset: 10438},
						run: (*parser).callonHeadOp8,
						expr: &litMatcher{
							pos:        position{line: 367, col: 5, offset: 10438},
							val:        "head",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TailOp",
			pos:  position{line: 369, col: 1, offset: 10513},
			expr: &choiceExpr{
				pos: position{line: 370, col: 5, offset: 10524},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 370, col: 5, offset: 10524},
						run: (*parser).callonTailOp2,
						expr: &seqExpr{
							pos: position{line: 370, col: 5, offset: 10524},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 370, col: 5, offset: 10524},
									val:        "tail",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 370, col: 12, offset: 10531},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 370, col: 14, offset: 10533},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 370, col: 20, offset: 10539},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 371, col: 5, offset: 10619},
						run: (*parser).callonTailOp8,
						expr: &litMatcher{
							pos:        position{line: 371, col: 5, offset: 10619},
							val:        "tail",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "WhereOp",
			pos:  position{line: 373, col: 1, offset: 10694},
			expr: &actionExpr{
				pos: position{line: 374, col: 5, offset: 10706},
				run: (*parser).callonWhereOp1,
				expr: &seqExpr{
					pos: position{line: 374, col: 5, offset: 10706},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 374, col: 5, offset: 10706},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 374, col: 13, offset: 10714},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 374, col: 15, offset: 10716},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 374, col: 20, offset: 10721},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "UniqOp",
			pos:  position{line: 378, col: 1, offset: 10807},
			expr: &choiceExpr{
				pos: position{line: 379, col: 5, offset: 10818},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 379, col: 5, offset: 10818},
						run: (*parser).callonUniqOp2,
						expr: &seqExpr{
							pos: position{line: 379, col: 5, offset: 10818},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 379, col: 5, offset: 10818},
									val:        "uniq",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 379, col: 12, offset: 10825},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 379, col: 14, offset: 10827},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 382, col: 5, offset: 10916},
						run: (*parser).callonUniqOp7,
						expr: &litMatcher{
							pos:        position{line: 382, col: 5, offset: 10916},
							val:        "uniq",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PutOp",
			pos:  position{line: 386, col: 1, offset: 11005},
			expr: &actionExpr{
				pos: position{line: 387, col: 5, offset: 11015},
				run: (*parser).callonPutOp1,
				expr: &seqExpr{
					pos: position{line: 387, col: 5, offset: 11015},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 387, col: 5, offset: 11015},
							val:        "put",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 387, col: 11, offset: 11021},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 387, col: 13, offset: 11023},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 387, col: 18, offset: 11028},
								name: "Assignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameOp",
			pos:  position{line: 391, col: 1, offset: 11119},
			expr: &actionExpr{
				pos: position{line: 392, col: 5, offset: 11132},
				run: (*parser).callonRenameOp1,
				expr: &seqExpr{
					pos: position{line: 392, col: 5, offset: 11132},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 392, col: 5, offset: 11132},
							val:        "rename",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 392, col: 14, offset: 11141},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 392, col: 16, offset: 11143},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 392, col: 22, offset: 11149},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 392, col: 33, offset: 11160},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 392, col: 38, offset: 11165},
								expr: &actionExpr{
									pos: position{line: 392, col: 39, offset: 11166},
									run: (*parser).callonRenameOp9,
									expr: &seqExpr{
										pos: position{line: 392, col: 39, offset: 11166},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 392, col: 39, offset: 11166},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 392, col: 42, offset: 11169},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 392, col: 46, offset: 11173},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 392, col: 49, offset: 11176},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 392, col: 52, offset: 11179},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseOp",
			pos:  position{line: 400, col: 1, offset: 11586},
			expr: &actionExpr{
				pos: position{line: 401, col: 5, offset: 11597},
				run: (*parser).callonFuseOp1,
				expr: &seqExpr{
					pos: position{line: 401, col: 5, offset: 11597},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 401, col: 5, offset: 11597},
							val:        "fuse",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 401, col: 12, offset: 11604},
							expr: &seqExpr{
								pos: position{line: 401, col: 14, offset: 11606},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 401, col: 14, offset: 11606},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 401, col: 17, offset: 11609},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 401, col: 22, offset: 11614},
							expr: &ruleRefExpr{
								pos:  position{line: 401, col: 23, offset: 11615},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "ShapeOp",
			pos:  position{line: 405, col: 1, offset: 11686},
			expr: &actionExpr{
				pos: position{line: 406, col: 5, offset: 11698},
				run: (*parser).callonShapeOp1,
				expr: &seqExpr{
					pos: position{line: 406, col: 5, offset: 11698},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 406, col: 5, offset: 11698},
							val:        "shape",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 406, col: 13, offset: 11706},
							expr: &seqExpr{
								pos: position{line: 406, col: 15, offset: 11708},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 406, col: 15, offset: 11708},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 406, col: 18, offset: 11711},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 406, col: 23, offset: 11716},
							expr: &ruleRefExpr{
								pos:  position{line: 406, col: 24, offset: 11717},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "JoinOp",
			pos:  position{line: 410, col: 1, offset: 11789},
			expr: &actionExpr{
				pos: position{line: 411, col: 5, offset: 11800},
				run: (*parser).callonJoinOp1,
				expr: &seqExpr{
					pos: position{line: 411, col: 5, offset: 11800},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 411, col: 5, offset: 11800},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 411, col: 11, offset: 11806},
								name: "JoinStyle",
							},
						},
						&litMatcher{
							pos:        position{line: 411, col: 21, offset: 11816},
							val:        "join",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 411, col: 28, offset: 11823},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 411, col: 30, offset: 11825},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 411, col: 33, offset: 11828},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 411, col: 35, offset: 11830},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 411, col: 39, offset: 11834},
								name: "JoinKey",
							},
						},
						&labeledExpr{
							pos:   position{line: 411, col: 47, offset: 11842},
							label: "optKey",
							expr: &zeroOrOneExpr{
								pos: position{line: 411, col: 54, offset: 11849},
								expr: &seqExpr{
									pos: position{line: 411, col: 55, offset: 11850},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 411, col: 55, offset: 11850},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 411, col: 58, offset: 11853},
											val:        "=",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 411, col: 62, offset: 11857},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 411, col: 65, offset: 11860},
											name: "JoinKey",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 411, col: 75, offset: 11870},
							label: "optArgs",
							expr: &zeroOrOneExpr{
								pos: position{line: 411, col: 83, offset: 11878},
								expr: &seqExpr{
									pos: position{line: 411, col: 84, offset: 11879},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 411, col: 84, offset: 11879},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 411, col: 86, offset: 11881},
											name: "FlexAssignments",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinStyle",
			pos:  position{line: 422, col: 1, offset: 12210},
			expr: &choiceExpr{
				pos: position{line: 423, col: 5, offset: 12224},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 423, col: 5, offset: 12224},
						run: (*parser).callonJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 423, col: 5, offset: 12224},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 423, col: 5, offset: 12224},
									val:        "anti",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 423, col: 12, offset: 12231},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 424, col: 5, offset: 12261},
						run: (*parser).callonJoinStyle6,
						expr: &seqExpr{
							pos: position{line: 424, col: 5, offset: 12261},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 424, col: 5, offset: 12261},
									val:        "inner",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 424, col: 13, offset: 12269},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 425, col: 5, offset: 12299},
						run: (*parser).callonJoinStyle10,
						expr: &seqExpr{
							pos: position{line: 425, col: 5, offset: 12299},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 425, col: 5, offset: 12299},
									val:        "left",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 425, col: 13, offset: 12307},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 426, col: 5, offset: 12336},
						run: (*parser).callonJoinStyle14,
						expr: &seqExpr{
							pos: position{line: 426, col: 5, offset: 12336},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 426, col: 5, offset: 12336},
									val:        "right",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 426, col: 13, offset: 12344},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 427, col: 5, offset: 12374},
						run: (*parser).callonJoinStyle18,
						expr: &litMatcher{
							pos:        position{line: 427, col: 5, offset: 12374},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 429, col: 1, offset: 12410},
			expr: &choiceExpr{
				pos: position{line: 430, col: 5, offset: 12422},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 430, col: 5, offset: 12422},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 431, col: 5, offset: 12431},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 431, col: 5, offset: 12431},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 431, col: 5, offset: 12431},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 431, col: 9, offset: 12435},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 431, col: 14, offset: 12440},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 431, col: 19, offset: 12445},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SampleOp",
			pos:  position{line: 433, col: 1, offset: 12471},
			expr: &actionExpr{
				pos: position{line: 434, col: 5, offset: 12484},
				run: (*parser).callonSampleOp1,
				expr: &seqExpr{
					pos: position{line: 434, col: 5, offset: 12484},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 434, col: 5, offset: 12484},
							val:        "sample",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 434, col: 14, offset: 12493},
							expr: &ruleRefExpr{
								pos:  position{line: 434, col: 15, offset: 12494},
								name: "EOKW",
							},
						},
						&labeledExpr{
							pos:   position{line: 434, col: 20, offset: 12499},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 434, col: 22, offset: 12501},
								name: "SampleExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "OpAssignment",
			pos:  position{line: 476, col: 1, offset: 14000},
			expr: &actionExpr{
				pos: position{line: 477, col: 5, offset: 14017},
				run: (*parser).callonOpAssignment1,
				expr: &labeledExpr{
					pos:   position{line: 477, col: 5, offset: 14017},
					label: "a",
					expr: &ruleRefExpr{
						pos:  position{line: 477, col: 7, offset: 14019},
						name: "Assignments",
					},
				},
			},
		},
		{
			name: "SampleExpr",
			pos:  position{line: 481, col: 1, offset: 14119},
			expr: &choiceExpr{
				pos: position{line: 482, col: 5, offset: 14134},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 482, col: 5, offset: 14134},
						run: (*parser).callonSampleExpr2,
						expr: &seqExpr{
							pos: position{line: 482, col: 5, offset: 14134},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 482, col: 5, offset: 14134},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 482, col: 7, offset: 14136},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 482, col: 12, offset: 14141},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 483, col: 5, offset: 14170},
						run: (*parser).callonSampleExpr7,
						expr: &litMatcher{
							pos:        position{line: 483, col: 5, offset: 14170},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromOp",
			pos:  position{line: 485, col: 1, offset: 14241},
			expr: &actionExpr{
				pos: position{line: 486, col: 5, offset: 14252},
				run: (*parser).callonFromOp1,
				expr: &labeledExpr{
					pos:   position{line: 486, col: 5, offset: 14252},
					label: "source",
					expr: &ruleRefExpr{
						pos:  position{line: 486, col: 12, offset: 14259},
						name: "FromAny",
					},
				},
			},
		},
		{
			name: "FromAny",
			pos:  position{line: 490, col: 1, offset: 14415},
			expr: &choiceExpr{
				pos: position{line: 491, col: 5, offset: 14427},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 491, col: 5, offset: 14427},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 492, col: 5, offset: 14436},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 493, col: 5, offset: 14444},
						name: "From",
					},
				},
			},
		},
		{
			name: "File",
			pos:  position{line: 495, col: 1, offset: 14450},
			expr: &actionExpr{
				pos: position{line: 496, col: 5, offset: 14459},
				run: (*parser).callonFile1,
				expr: &seqExpr{
					pos: position{line: 496, col: 5, offset: 14459},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 496, col: 5, offset: 14459},
							val:        "file",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 496, col: 12, offset: 14466},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 496, col: 14, offset: 14468},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 496, col: 19, offset: 14473},
								name: "Path",
							},
						},
						&labeledExpr{
							pos:   position{line: 496, col: 24, offset: 14478},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 496, col: 31, offset: 14485},
								expr: &ruleRefExpr{
									pos:  position{line: 496, col: 31, offset: 14485},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 496, col: 42, offset: 14496},
							label: "layout",
							expr: &zeroOrOneExpr{
								pos: position{line: 496, col: 49, offset: 14503},
								expr: &ruleRefExpr{
									pos:  position{line: 496, col: 49, offset: 14503},
									name: "LayoutArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "From",
			pos:  position{line: 500, col: 1, offset: 14632},
			expr: &actionExpr{
				pos: position{line: 501, col: 5, offset: 14641},
				run: (*parser).callonFrom1,
				expr: &seqExpr{
					pos: position{line: 501, col: 5, offset: 14641},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 501, col: 5, offset: 14641},
							val:        "from",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 501, col: 12, offset: 14648},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 501, col: 14, offset: 14650},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 501, col: 19, offset: 14655},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "Pool",
			pos:  position{line: 503, col: 1, offset: 14686},
			expr: &actionExpr{
				pos: position{line: 504, col: 5, offset: 14695},
				run: (*parser).callonPool1,
				expr: &seqExpr{
					pos: position{line: 504, col: 5, offset: 14695},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 504, col: 5, offset: 14695},
							val:        "pool",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 504, col: 12, offset: 14702},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 504, col: 14, offset: 14704},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 504, col: 19, offset: 14709},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolBody",
			pos:  position{line: 506, col: 1, offset: 14740},
			expr: &actionExpr{
				pos: position{line: 507, col: 5, offset: 14753},
				run: (*parser).callonPoolBody1,
				expr: &seqExpr{
					pos: position{line: 507, col: 5, offset: 14753},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 507, col: 5, offset: 14753},
							label: "spec",
							expr: &ruleRefExpr{
								pos:  position{line: 507, col: 10, offset: 14758},
								name: "PoolSpec",
							},
						},
						&labeledExpr{
							pos:   position{line: 507, col: 19, offset: 14767},
							label: "at",
							expr: &zeroOrOneExpr{
								pos: position{line: 507, col: 22, offset: 14770},
								expr: &ruleRefExpr{
									pos:  position{line: 507, col: 22, offset: 14770},
									name: "PoolAt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Get",
			pos:  position{line: 511, col: 1, offset: 14868},
			expr: &actionExpr{
				pos: position{line: 512, col: 5, offset: 14876},
				run: (*parser).callonGet1,
				expr: &seqExpr{
					pos: position{line: 512, col: 5, offset: 14876},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 512, col: 5, offset: 14876},
							val:        "get",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 512, col: 11, offset: 14882},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 512, col: 13, offset: 14884},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 512, col: 17, offset: 14888},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 512, col: 21, offset: 14892},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 512, col: 28, offset: 14899},
								expr: &ruleRefExpr{
									pos:  position{line: 512, col: 28, offset: 14899},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 512, col: 39, offset: 14910},
							label: "layout",
							expr: &zeroOrOneExpr{
								pos: position{line: 512, col: 46, offset: 14917},
								expr: &ruleRefExpr{
									pos:  position{line: 512, col: 46, offset: 14917},
									name: "LayoutArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 516, col: 1, offset: 15043},
			expr: &actionExpr{
				pos: position{line: 516, col: 7, offset: 15049},
				run: (*parser).callonURL1,
				expr: &seqExpr{
					pos: position{line: 516, col: 7, offset: 15049},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 516, col: 8, offset: 15050},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 516, col: 8, offset: 15050},
									val:        "http:",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 516, col: 18, offset: 15060},
									val:        "https:",
									ignoreCase: false,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 516, col: 28, offset: 15070},
							name: "Path",
						},
					},
				},
			},
		},
		{
			name: "Path",
			pos:  position{line: 518, col: 1, offset: 15107},
			expr: &choiceExpr{
				pos: position{line: 519, col: 5, offset: 15116},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 519, col: 5, offset: 15116},
						run: (*parser).callonPath2,
						expr: &labeledExpr{
							pos:   position{line: 519, col: 5, offset: 15116},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 519, col: 7, offset: 15118},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 520, col: 5, offset: 15153},
						run: (*parser).callonPath5,
						expr: &oneOrMoreExpr{
							pos: position{line: 520, col: 5, offset: 15153},
							expr: &charClassMatcher{
								pos:        position{line: 520, col: 5, offset: 15153},
								val:        "[0-9a-zA-Z!@$%^&*()_=<>,./?:[\\]{}~|+-]",
								chars:      []rune{'!', '@', '$', '%', '^', '&', '*', '(', ')', '_', '=', '<', '>', ',', '.', '/', '?', ':', '[', ']', '{', '}', '~', '|', '+', '-'},
								ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PoolAt",
			pos:  position{line: 523, col: 1, offset: 15258},
			expr: &actionExpr{
				pos: position{line: 524, col: 5, offset: 15269},
				run: (*parser).callonPoolAt1,
				expr: &seqExpr{
					pos: position{line: 524, col: 5, offset: 15269},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 524, col: 5, offset: 15269},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 524, col: 7, offset: 15271},
							val:        "at",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 524, col: 12, offset: 15276},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 524, col: 14, offset: 15278},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 524, col: 17, offset: 15281},
								name: "KSUID",
							},
						},
					},
				},
			},
		},
		{
			name: "KSUID",
			pos:  position{line: 527, col: 1, offset: 15347},
			expr: &actionExpr{
				pos: position{line: 527, col: 9, offset: 15355},
				run: (*parser).callonKSUID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 527, col: 9, offset: 15355},
					expr: &charClassMatcher{
						pos:        position{line: 527, col: 10, offset: 15356},
						val:        "[0-9a-zA-Z]",
						ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "PoolSpec",
			pos:  position{line: 529, col: 1, offset: 15402},
			expr: &choiceExpr{
				pos: position{line: 530, col: 5, offset: 15415},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 530, col: 5, offset: 15415},
						run: (*parser).callonPoolSpec2,
						expr: &seqExpr{
							pos: position{line: 530, col: 5, offset: 15415},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 530, col: 5, offset: 15415},
									label: "pool",
									expr: &ruleRefExpr{
										pos:  position{line: 530, col: 10, offset: 15420},
										name: "PoolName",
									},
								},
								&labeledExpr{
									pos:   position{line: 530, col: 19, offset: 15429},
									label: "commit",
									expr: &zeroOrOneExpr{
										pos: position{line: 530, col: 26, offset: 15436},
										expr: &ruleRefExpr{
											pos:  position{line: 530, col: 26, offset: 15436},
											name: "PoolCommit",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 530, col: 38, offset: 15448},
									label: "meta",
									expr: &zeroOrOneExpr{
										pos: position{line: 530, col: 43, offset: 15453},
										expr: &ruleRefExpr{
											pos:  position{line: 530, col: 43, offset: 15453},
											name: "PoolMeta",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 533, col: 5, offset: 15562},
						run: (*parser).callonPoolSpec12,
						expr: &labeledExpr{
							pos:   position{line: 533, col: 5, offset: 15562},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 533, col: 10, offset: 15567},
								name: "PoolMeta",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolCommit",
			pos:  position{line: 537, col: 1, offset: 15668},
			expr: &actionExpr{
				pos: position{line: 538, col: 5, offset: 15683},
				run: (*parser).callonPoolCommit1,
				expr: &seqExpr{
					pos: position{line: 538, col: 5, offset: 15683},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 538, col: 5, offset: 15683},
							val:        "@",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 538, col: 9, offset: 15687},
							label: "commit",
							expr: &ruleRefExpr{
								pos:  position{line: 538, col: 16, offset: 15694},
								name: "PoolNameString",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolMeta",
			pos:  position{line: 540, col: 1, offset: 15733},
			expr: &actionExpr{
				pos: position{line: 541, col: 5, offset: 15746},
				run: (*parser).callonPoolMeta1,
				expr: &seqExpr{
					pos: position{line: 541, col: 5, offset: 15746},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 541, col: 5, offset: 15746},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 541, col: 9, offset: 15750},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 541, col: 14, offset: 15755},
								name: "PoolIdentifier",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolName",
			pos:  position{line: 543, col: 1, offset: 15792},
			expr: &choiceExpr{
				pos: position{line: 544, col: 5, offset: 15805},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 544, col: 5, offset: 15805},
						name: "Glob",
					},
					&actionExpr{
						pos: position{line: 545, col: 5, offset: 15814},
						run: (*parser).callonPoolName3,
						expr: &seqExpr{
							pos: position{line: 545, col: 5, offset: 15814},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 545, col: 5, offset: 15814},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 545, col: 9, offset: 15818},
									expr: &ruleRefExpr{
										pos:  position{line: 545, col: 10, offset: 15819},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 546, col: 5, offset: 15904},
						name: "Regexp",
					},
					&actionExpr{
						pos: position{line: 547, col: 5, offset: 15915},
						run: (*parser).callonPoolName9,
						expr: &labeledExpr{
							pos:   position{line: 547, col: 5, offset: 15915},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 547, col: 10, offset: 15920},
								name: "PoolNameString",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolNameString",
			pos:  position{line: 549, col: 1, offset: 16007},
			expr: &choiceExpr{
				pos: position{line: 550, col: 5, offset: 16026},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 550, col: 5, offset: 16026},
						name: "PoolIdentifier",
					},
					&ruleRefExpr{
						pos:  position{line: 551, col: 5, offset: 16045},
						name: "KSUID",
					},
					&ruleRefExpr{
						pos:  position{line: 552, col: 5, offset: 16055},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "PoolIdentifier",
			pos:  position{line: 554, col: 1, offset: 16069},
			expr: &actionExpr{
				pos: position{line: 555, col: 5, offset: 16088},
				run: (*parser).callonPoolIdentifier1,
				expr: &seqExpr{
					pos: position{line: 555, col: 5, offset: 16088},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 555, col: 6, offset: 16089},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 555, col: 6, offset: 16089},
									name: "IdentifierStart",
								},
								&litMatcher{
									pos:        position{line: 555, col: 24, offset: 16107},
									val:        ".",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 555, col: 29, offset: 16112},
							expr: &choiceExpr{
								pos: position{line: 555, col: 30, offset: 16113},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 555, col: 30, offset: 16113},
										name: "IdentifierRest",
									},
									&litMatcher{
										pos:        position{line: 555, col: 47, offset: 16130},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LayoutArg",
			pos:  position{line: 557, col: 1, offset: 16169},
			expr: &actionExpr{
				pos: position{line: 558, col: 5, offset: 16183},
				run: (*parser).callonLayoutArg1,
				expr: &seqExpr{
					pos: position{line: 558, col: 5, offset: 16183},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 558, col: 5, offset: 16183},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 558, col: 7, offset: 16185},
							val:        "order",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 558, col: 15, offset: 16193},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 558, col: 17, offset: 16195},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 558, col: 22, offset: 16200},
								name: "FieldExprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 558, col: 33, offset: 16211},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 558, col: 39, offset: 16217},
								name: "OrderSuffix",
							},
						},
					},
				},
			},
		},
		{
			name: "FormatArg",
			pos:  position{line: 562, col: 1, offset: 16327},
			expr: &actionExpr{
				pos: position{line: 563, col: 5, offset: 16341},
				run: (*parser).callonFormatArg1,
				expr: &seqExpr{
					pos: position{line: 563, col: 5, offset: 16341},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 563, col: 5, offset: 16341},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 563, col: 7, offset: 16343},
							val:        "format",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 563, col: 16, offset: 16352},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 563, col: 18, offset: 16354},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 563, col: 22, offset: 16358},
								name: "IdentifierName",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderSuffix",
			pos:  position{line: 565, col: 1, offset: 16394},
			expr: &choiceExpr{
				pos: position{line: 566, col: 5, offset: 16410},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 566, col: 5, offset: 16410},
						run: (*parser).callonOrderSuffix2,
						expr: &litMatcher{
							pos:        position{line: 566, col: 5, offset: 16410},
							val:        ":asc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 567, col: 5, offset: 16444},
						run: (*parser).callonOrderSuffix4,
						expr: &litMatcher{
							pos:        position{line: 567, col: 5, offset: 16444},
							val:        ":desc",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 568, col: 5, offset: 16480},
						run: (*parser).callonOrderSuffix6,
						expr: &litMatcher{
							pos:        position{line: 568, col: 5, offset: 16480},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PassOp",
			pos:  position{line: 570, col: 1, offset: 16506},
			expr: &actionExpr{
				pos: position{line: 571, col: 5, offset: 16517},
				run: (*parser).callonPassOp1,
				expr: &seqExpr{
					pos: position{line: 571, col: 5, offset: 16517},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 571, col: 5, offset: 16517},
							val:        "pass",
							ignoreCase: false,
						},
						&andExpr{
							pos: position{line: 571, col: 12, offset: 16524},
							expr: &ruleRefExpr{
								pos:  position{line: 571, col: 13, offset: 16525},
								name: "EOKW",
							},
						},
					},
				},
			},
		},
		{
			name: "ExplodeOp",
			pos:  position{line: 577, col: 1, offset: 16717},
			expr: &actionExpr{
				pos: position{line: 578, col: 5, offset: 16731},
				run: (*parser).callonExplodeOp1,
				expr: &seqExpr{
					pos: position{line: 578, col: 5, offset: 16731},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 578, col: 5, offset: 16731},
							val:        "explode",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 578, col: 15, offset: 16741},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 578, col: 17, offset: 16743},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 578, col: 22, offset: 16748},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 578, col: 28, offset: 16754},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 578, col: 32, offset: 16758},
								name: "TypeArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 578, col: 40, offset: 16766},
							label: "as",
							expr: &zeroOrOneExpr{
								pos: position{line: 578, col: 43, offset: 16769},
								expr: &ruleRefExpr{
									pos:  position{line: 578, col: 43, offset: 16769},
									name: "AsArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MergeOp",
			pos:  position{line: 582, col: 1, offset: 16881},
			expr: &actionExpr{
				pos: position{line: 583, col: 5, offset: 16893},
				run: (*parser).callonMergeOp1,
				expr: &seqExpr{
					pos: position{line: 583, col: 5, offset: 16893},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 583, col: 5, offset: 16893},
							val:        "merge",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 583, col: 13, offset: 16901},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 583, col: 15, offset: 16903},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 583, col: 20, offset: 16908},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "OverOp",
			pos:  position{line: 587, col: 1, offset: 16989},
			expr: &actionExpr{
				pos: position{line: 588, col: 5, offset: 17000},
				run: (*parser).callonOverOp1,
				expr: &seqExpr{
					pos: position{line: 588, col: 5, offset: 17000},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 588, col: 5, offset: 17000},
							val:        "over",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 588, col: 12, offset: 17007},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 588, col: 14, offset: 17009},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 588, col: 20, offset: 17015},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 588, col: 26, offset: 17021},
							label: "locals",
							expr: &zeroOrOneExpr{
								pos: position{line: 588, col: 33, offset: 17028},
								expr: &ruleRefExpr{
									pos:  position{line: 588, col: 33, offset: 17028},
									name: "Locals",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 588, col: 41, offset: 17036},
							label: "scope",
							expr: &zeroOrOneExpr{
								pos: position{line: 588, col: 47, offset: 17042},
								expr: &ruleRefExpr{
									pos:  position{line: 588, col: 47, offset: 17042},
									name: "Scope",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Scope",
			pos:  position{line: 596, col: 1, offset: 17292},
			expr: &actionExpr{
				pos: position{line: 597, col: 5, offset: 17302},
				run: (*parser).callonScope1,
				expr: &seqExpr{
					pos: position{line: 597, col: 5, offset: 17302},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 597, col: 5, offset: 17302},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 597, col: 8, offset: 17305},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 597, col: 13, offset: 17310},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 597, col: 16, offset: 17313},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 597, col: 20, offset: 17317},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 597, col: 23, offset: 17320},
							label: "seq",
							expr: &ruleRefExpr{
								pos:  position{line: 597, col: 27, offset: 17324},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 597, col: 38, offset: 17335},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 597, col: 41, offset: 17338},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Locals",
			pos:  position{line: 599, col: 1, offset: 17363},
			expr: &actionExpr{
				pos: position{line: 600, col: 5, offset: 17374},
				run: (*parser).callonLocals1,
				expr: &seqExpr{
					pos: position{line: 600, col: 5, offset: 17374},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 600, col: 5, offset: 17374},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 600, col: 7, offset: 17376},
							val:        "with",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 600, col: 14, offset: 17383},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 600, col: 16, offset: 17385},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 600, col: 22, offset: 17391},
								name: "LocalsAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 600, col: 39, offset: 17408},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 600, col: 44, offset: 17413},
								expr: &actionExpr{
									pos: position{line: 600, col: 45, offset: 17414},
									run: (*parser).callonLocals10,
									expr: &seqExpr{
										pos: position{line: 600, col: 45, offset: 17414},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 600, col: 45, offset: 17414},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 600, col: 48, offset: 17417},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 600, col: 52, offset: 17421},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 600, col: 55, offset: 17424},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 600, col: 57, offset: 17426},
													name: "LocalsAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocalsAssignment",
			pos:  position{line: 604, col: 1, offset: 17547},
			expr: &actionExpr{
				pos: position{line: 605, col: 5, offset: 17568},
				run: (*parser).callonLocalsAssignment1,
				expr: &seqExpr{
					pos: position{line: 605, col: 5, offset: 17568},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 605, col: 5, offset: 17568},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 605, col: 10, offset: 17573},
								name: "IdentifierName",
							},
						},
						&labeledExpr{
							pos:   position{line: 605, col: 25, offset: 17588},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 605, col: 29, offset: 17592},
								expr: &seqExpr{
									pos: position{line: 605, col: 30, offset: 17593},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 605, col: 30, offset: 17593},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 605, col: 33, offset: 17596},
											val:        "=",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 605, col: 37, offset: 17600},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 605, col: 40, offset: 17603},
											name: "Expr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "YieldOp",
			pos:  position{line: 613, col: 1, offset: 17824},
			expr: &actionExpr{
				pos: position{line: 614, col: 5, offset: 17836},
				run: (*parser).callonYieldOp1,
				expr: &seqExpr{
					pos: position{line: 614, col: 5, offset: 17836},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 614, col: 5, offset: 17836},
							val:        "yield",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 614, col: 13, offset: 17844},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 614, col: 15, offset: 17846},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 614, col: 21, offset: 17852},
								name: "Exprs",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeArg",
			pos:  position{line: 618, col: 1, offset: 17936},
			expr: &actionExpr{
				pos: position{line: 619, col: 5, offset: 17948},
				run: (*parser).callonTypeArg1,
				expr: &seqExpr{
					pos: position{line: 619, col: 5, offset: 17948},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 619, col: 5, offset: 17948},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 619, col: 7, offset: 17950},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 619, col: 10, offset: 17953},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 619, col: 12, offset: 17955},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 619, col: 16, offset: 17959},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "AsArg",
			pos:  position{line: 621, col: 1, offset: 17984},
			expr: &actionExpr{
				pos: position{line: 622, col: 5, offset: 17994},
				run: (*parser).callonAsArg1,
				expr: &seqExpr{
					pos: position{line: 622, col: 5, offset: 17994},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 622, col: 5, offset: 17994},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 622, col: 7, offset: 17996},
							name: "AS",
						},
						&ruleRefExpr{
							pos:  position{line: 622, col: 10, offset: 17999},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 622, col: 12, offset: 18001},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 622, col: 16, offset: 18005},
								name: "Lval",
							},
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 626, col: 1, offset: 18056},
			expr: &ruleRefExpr{
				pos:  position{line: 626, col: 8, offset: 18063},
				name: "DerefExpr",
			},
		},
		{
			name: "Lvals",
			pos:  position{line: 628, col: 1, offset: 18074},
			expr: &actionExpr{
				pos: position{line: 629, col: 5, offset: 18084},
				run: (*parser).callonLvals1,
				expr: &seqExpr{
					pos: position{line: 629, col: 5, offset: 18084},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 629, col: 5, offset: 18084},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 629, col: 11, offset: 18090},
								name: "Lval",
							},
						},
						&labeledExpr{
							pos:   position{line: 629, col: 16, offset: 18095},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 629, col: 21, offset: 18100},
								expr: &actionExpr{
									pos: position{line: 629, col: 22, offset: 18101},
									run: (*parser).callonLvals7,
									expr: &seqExpr{
										pos: position{line: 629, col: 22, offset: 18101},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 629, col: 22, offset: 18101},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 629, col: 25, offset: 18104},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 629, col: 29, offset: 18108},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 629, col: 32, offset: 18111},
												label: "lval",
												expr: &ruleRefExpr{
													pos:  position{line: 629, col: 37, offset: 18116},
													name: "Lval",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 633, col: 1, offset: 18228},
			expr: &ruleRefExpr{
				pos:  position{line: 633, col: 13, offset: 18240},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 635, col: 1, offset: 18246},
			expr: &actionExpr{
				pos: position{line: 636, col: 5, offset: 18261},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 636, col: 5, offset: 18261},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 636, col: 5, offset: 18261},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 636, col: 11, offset: 18267},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 636, col: 21, offset: 18277},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 636, col: 26, offset: 18282},
								expr: &seqExpr{
									pos: position{line: 636, col: 27, offset: 18283},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 636, col: 27, offset: 18283},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 636, col: 30, offset: 18286},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 636, col: 34, offset: 18290},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 636, col: 37, offset: 18293},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignments",
			pos:  position{line: 646, col: 1, offset: 18492},
			expr: &actionExpr{
				pos: position{line: 647, col: 5, offset: 18508},
				run: (*parser).callonAssignments1,
				expr: &seqExpr{
					pos: position{line: 647, col: 5, offset: 18508},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 647, col: 5, offset: 18508},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 647, col: 11, offset: 18514},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 647, col: 22, offset: 18525},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 647, col: 27, offset: 18530},
								expr: &actionExpr{
									pos: position{line: 647, col: 28, offset: 18531},
									run: (*parser).callonAssignments7,
									expr: &seqExpr{
										pos: position{line: 647, col: 28, offset: 18531},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 647, col: 28, offset: 18531},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 647, col: 31, offset: 18534},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 647, col: 35, offset: 18538},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 647, col: 38, offset: 18541},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 647, col: 40, offset: 18543},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 651, col: 1, offset: 18654},
			expr: &actionExpr{
				pos: position{line: 652, col: 5, offset: 18669},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 652, col: 5, offset: 18669},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 652, col: 5, offset: 18669},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 652, col: 9, offset: 18673},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 652, col: 14, offset: 18678},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 652, col: 17, offset: 18681},
							val:        ":=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 652, col: 22, offset: 18686},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 652, col: 25, offset: 18689},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 652, col: 29, offset: 18693},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 654, col: 1, offset: 18784},
			expr: &ruleRefExpr{
				pos:  position{line: 654, col: 8, offset: 18791},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 656, col: 1, offset: 18808},
			expr: &actionExpr{
				pos: position{line: 657, col: 5, offset: 18828},
				run: (*parser).callonConditionalExpr1,
				expr: &seqExpr{
					pos: position{line: 657, col: 5, offset: 18828},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 657, col: 5, offset: 18828},
							label: "cond",
							expr: &ruleRefExpr{
								pos:  position{line: 657, col: 10, offset: 18833},
								name: "LogicalOrExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 657, col: 24, offset: 18847},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 657, col: 28, offset: 18851},
								expr: &seqExpr{
									pos: position{line: 657, col: 29, offset: 18852},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 657, col: 29, offset: 18852},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 657, col: 32, offset: 18855},
											val:        "?",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 657, col: 36, offset: 18859},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 657, col: 39, offset: 18862},
											name: "Expr",
										},
										&ruleRefExpr{
											pos:  position{line: 657, col: 44, offset: 18867},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 657, col: 47, offset: 18870},
											val:        ":",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 657, col: 51, offset: 18874},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 657, col: 54, offset: 18877},
											name: "Expr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 666, col: 1, offset: 19138},
			expr: &actionExpr{
				pos: position{line: 667, col: 5, offset: 19156},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 667, col: 5, offset: 19156},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 667, col: 5, offset: 19156},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 667, col: 11, offset: 19162},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 668, col: 5, offset: 19181},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 668, col: 10, offset: 19186},
								expr: &actionExpr{
									pos: position{line: 668, col: 11, offset: 19187},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 668, col: 11, offset: 19187},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 668, col: 11, offset: 19187},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 668, col: 14, offset: 19190},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 668, col: 17, offset: 19193},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 668, col: 25, offset: 19201},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 668, col: 28, offset: 19204},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 668, col: 33, offset: 19209},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 672, col: 1, offset: 19327},
			expr: &actionExpr{
				pos: position{line: 673, col: 5, offset: 19346},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 673, col: 5, offset: 19346},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 673, col: 5, offset: 19346},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 673, col: 11, offset: 19352},
								name: "ComparisonExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 674, col: 5, offset: 19371},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 674, col: 10, offset: 19376},
								expr: &actionExpr{
									pos: position{line: 674, col: 11, offset: 19377},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 674, col: 11, offset: 19377},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 674, col: 11, offset: 19377},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 674, col: 14, offset: 19380},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 674, col: 17, offset: 19383},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 674, col: 26, offset: 19392},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 674, col: 29, offset: 19395},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 674, col: 34, offset: 19400},
													name: "ComparisonExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ComparisonExpr",
			pos:  position{line: 678, col: 1, offset: 19518},
			expr: &actionExpr{
				pos: position{line: 679, col: 5, offset: 19537},
				run: (*parser).callonComparisonExpr1,
				expr: &seqExpr{
					pos: position{line: 679, col: 5, offset: 19537},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 679, col: 5, offset: 19537},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 679, col: 9, offset: 19541},
								name: "AdditiveExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 679, col: 22, offset: 19554},
							label: "opAndRHS",
							expr: &zeroOrOneExpr{
								pos: position{line: 679, col: 31, offset: 19563},
								expr: &choiceExpr{
									pos: position{line: 679, col: 32, offset: 19564},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 679, col: 32, offset: 19564},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 679, col: 32, offset: 19564},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 679, col: 35, offset: 19567},
													name: "Comparator",
												},
												&ruleRefExpr{
													pos:  position{line: 679, col: 46, offset: 19578},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 679, col: 49, offset: 19581},
													name: "AdditiveExpr",
												},
											},
										},
										&seqExpr{
											pos: position{line: 679, col: 64, offset: 19596},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 679, col: 64, offset: 19596},
													name: "__",
												},
												&actionExpr{
													pos: position{line: 679, col: 68, offset: 19600},
													run: (*parser).callonComparisonExpr15,
													expr: &litMatcher{
														pos:        position{line: 679, col: 68, offset: 19600},
														val:        "~",
														ignoreCase: false,
													},
												},
												&ruleRefExpr{
													pos:  position{line: 679, col: 104, offset: 19636},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 679, col: 107, offset: 19639},
													name: "Regexp",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 688, col: 1, offset: 19900},
			expr: &actionExpr{
				pos: position{line: 689, col: 5, offset: 19917},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 689, col: 5, offset: 19917},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 689, col: 5, offset: 19917},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 689, col: 11, offset: 19923},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 690, col: 5, offset: 19946},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 690, col: 10, offset: 19951},
								expr: &actionExpr{
									pos: position{line: 690, col: 11, offset: 19952},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 690, col: 11, offset: 19952},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 690, col: 11, offset: 19952},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 690, col: 14, offset: 19955},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 690, col: 17, offset: 19958},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 690, col: 34, offset: 19975},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 690, col: 37, offset: 19978},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 690, col: 42, offset: 19983},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 694, col: 1, offset: 20105},
			expr: &actionExpr{
				pos: position{line: 694, col: 20, offset: 20124},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 694, col: 21, offset: 20125},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 694, col: 21, offset: 20125},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 694, col: 27, offset: 20131},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 696, col: 1, offset: 20168},
			expr: &actionExpr{
				pos: position{line: 697, col: 5, offset: 20191},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 697, col: 5, offset: 20191},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 697, col: 5, offset: 20191},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 697, col: 11, offset: 20197},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 698, col: 5, offset: 20209},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 698, col: 10, offset: 20214},
								expr: &actionExpr{
									pos: position{line: 698, col: 11, offset: 20215},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 698, col: 11, offset: 20215},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 698, col: 11, offset: 20215},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 698, col: 14, offset: 20218},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 698, col: 17, offset: 20221},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 698, col: 40, offset: 20244},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 698, col: 43, offset: 20247},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 698, col: 48, offset: 20252},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 702, col: 1, offset: 20363},
			expr: &actionExpr{
				pos: position{line: 702, col: 26, offset: 20388},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 702, col: 27, offset: 20389},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 702, col: 27, offset: 20389},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 702, col: 33, offset: 20395},
							val:        "/",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 702, col: 39, offset: 20401},
							val:        "%",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 704, col: 1, offset: 20438},
			expr: &choiceExpr{
				pos: position{line: 705, col: 5, offset: 20450},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 705, col: 5, offset: 20450},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 705, col: 5, offset: 20450},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 705, col: 5, offset: 20450},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 705, col: 9, offset: 20454},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 705, col: 12, offset: 20457},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 705, col: 14, offset: 20459},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 708, col: 5, offset: 20568},
						name: "NegationExpr",
					},
				},
			},
		},
		{
			name: "NegationExpr",
			pos:  position{line: 710, col: 1, offset: 20582},
			expr: &choiceExpr{
				pos: position{line: 711, col: 5, offset: 20599},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 711, col: 5, offset: 20599},
						run: (*parser).callonNegationExpr2,
						expr: &seqExpr{
							pos: position{line: 711, col: 5, offset: 20599},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 711, col: 5, offset: 20599},
									expr: &ruleRefExpr{
										pos:  position{line: 711, col: 6, offset: 20600},
										name: "Literal",
									},
								},
								&litMatcher{
									pos:        position{line: 711, col: 14, offset: 20608},
									val:        "-",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 711, col: 18, offset: 20612},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 711, col: 21, offset: 20615},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 711, col: 23, offset: 20617},
										name: "FuncExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 714, col: 5, offset: 20727},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 716, col: 1, offset: 20737},
			expr: &choiceExpr{
				pos: position{line: 717, col: 5, offset: 20750},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 717, col: 5, offset: 20750},
						run: (*parser).callonFuncExpr2,
						expr: &seqExpr{
							pos: position{line: 717, col: 5, offset: 20750},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 717, col: 5, offset: 20750},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 717, col: 11, offset: 20756},
										name: "Cast",
									},
								},
								&labeledExpr{
									pos:   position{line: 717, col: 16, offset: 20761},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 717, col: 21, offset: 20766},
										expr: &ruleRefExpr{
											pos:  position{line: 717, col: 22, offset: 20767},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 720, col: 5, offset: 20838},
						run: (*parser).callonFuncExpr9,
						expr: &seqExpr{
							pos: position{line: 720, col: 5, offset: 20838},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 720, col: 5, offset: 20838},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 720, col: 11, offset: 20844},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 720, col: 20, offset: 20853},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 720, col: 25, offset: 20858},
										expr: &ruleRefExpr{
											pos:  position{line: 720, col: 26, offset: 20859},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 723, col: 5, offset: 20930},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 724, col: 5, offset: 20944},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FuncGuard",
			pos:  position{line: 726, col: 1, offset: 20953},
			expr: &seqExpr{
				pos: position{line: 726, col: 13, offset: 20965},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 726, col: 13, offset: 20965},
						name: "NotFuncs",
					},
					&ruleRefExpr{
						pos:  position{line: 726, col: 22, offset: 20974},
						name: "__",
					},
					&litMatcher{
						pos:        position{line: 726, col: 25, offset: 20977},
						val:        "(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "NotFuncs",
			pos:  position{line: 728, col: 1, offset: 20982},
			expr: &choiceExpr{
				pos: position{line: 729, col: 5, offset: 20995},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 729, col: 5, offset: 20995},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 730, col: 5, offset: 21005},
						val:        "select",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Cast",
			pos:  position{line: 732, col: 1, offset: 21015},
			expr: &actionExpr{
				pos: position{line: 733, col: 5, offset: 21024},
				run: (*parser).callonCast1,
				expr: &seqExpr{
					pos: position{line: 733, col: 5, offset: 21024},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 733, col: 5, offset: 21024},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 733, col: 9, offset: 21028},
								name: "CastType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 733, col: 18, offset: 21037},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 733, col: 21, offset: 21040},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 733, col: 25, offset: 21044},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 733, col: 28, offset: 21047},
							label: "expr",
							expr: &choiceExpr{
								pos: position{line: 733, col: 34, offset: 21053},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 733, col: 34, offset: 21053},
										name: "OverExpr",
									},
									&ruleRefExpr{
										pos:  position{line: 733, col: 45, offset: 21064},
										name: "Expr",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 733, col: 51, offset: 21070},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 733, col: 54, offset: 21073},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 737, col: 1, offset: 21170},
			expr: &choiceExpr{
				pos: position{line: 738, col: 5, offset: 21183},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 738, col: 5, offset: 21183},
						name: "Grep",
					},
					&actionExpr{
						pos: position{line: 740, col: 5, offset: 21238},
						run: (*parser).callonFunction3,
						expr: &seqExpr{
							pos: position{line: 740, col: 5, offset: 21238},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 740, col: 5, offset: 21238},
									val:        "regexp",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 740, col: 14, offset: 21247},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 740, col: 17, offset: 21250},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 740, col: 21, offset: 21254},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 740, col: 24, offset: 21257},
									label: "arg0Text",
									expr: &ruleRefExpr{
										pos:  position{line: 740, col: 33, offset: 21266},
										name: "RegexpPattern",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 740, col: 47, offset: 21280},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 740, col: 50, offset: 21283},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 740, col: 54, offset: 21287},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 740, col: 57, offset: 21290},
									label: "arg1",
									expr: &ruleRefExpr{
										pos:  position{line: 740, col: 62, offset: 21295},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 740, col: 67, offset: 21300},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 740, col: 70, offset: 21303},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 740, col: 74, offset: 21307},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 740, col: 80, offset: 21313},
										expr: &ruleRefExpr{
											pos:  position{line: 740, col: 80, offset: 21313},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 744, col: 5, offset: 21561},
						run: (*parser).callonFunction21,
						expr: &seqExpr{
							pos: position{line: 744, col: 5, offset: 21561},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 744, col: 5, offset: 21561},
									expr: &ruleRefExpr{
										pos:  position{line: 744, col: 6, offset: 21562},
										name: "FuncGuard",
									},
								},
								&labeledExpr{
									pos:   position{line: 744, col: 16, offset: 21572},
									label: "fn",
									expr: &ruleRefExpr{
										pos:  position{line: 744, col: 19, offset: 21575},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 744, col: 34, offset: 21590},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 744, col: 37, offset: 21593},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 744, col: 41, offset: 21597},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 744, col: 44, offset: 21600},
									label: "args",
									expr: &ruleRefExpr{
										pos:  position{line: 744, col: 49, offset: 21605},
										name: "FunctionArgs",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 744, col: 62, offset: 21618},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 744, col: 65, offset: 21621},
									val:        ")",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 744, col: 69, offset: 21625},
									label: "where",
									expr: &zeroOrOneExpr{
										pos: position{line: 744, col: 75, offset: 21631},
										expr: &ruleRefExpr{
											pos:  position{line: 744, col: 75, offset: 21631},
											name: "WhereClause",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FunctionArgs",
			pos:  position{line: 748, col: 1, offset: 21752},
			expr: &choiceExpr{
				pos: position{line: 749, col: 5, offset: 21769},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 749, col: 5, offset: 21769},
						run: (*parser).callonFunctionArgs2,
						expr: &labeledExpr{
							pos:   position{line: 749, col: 5, offset: 21769},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 749, col: 7, offset: 21771},
								name: "OverExpr",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 750, col: 5, offset: 21817},
						name: "OptionalExprs",
					},
				},
			},
		},
		{
			name: "Grep",
			pos:  position{line: 752, col: 1, offset: 21832},
			expr: &actionExpr{
				pos: position{line: 753, col: 5, offset: 21841},
				run: (*parser).callonGrep1,
				expr: &seqExpr{
					pos: position{line: 753, col: 5, offset: 21841},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 753, col: 5, offset: 21841},
							val:        "grep",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 753, col: 12, offset: 21848},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 753, col: 15, offset: 21851},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 753, col: 19, offset: 21855},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 753, col: 22, offset: 21858},
							label: "pattern",
							expr: &ruleRefExpr{
								pos:  position{line: 753, col: 30, offset: 21866},
								name: "Pattern",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 753, col: 38, offset: 21874},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 753, col: 42, offset: 21878},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 753, col: 46, offset: 21882},
								expr: &seqExpr{
									pos: position{line: 753, col: 47, offset: 21883},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 753, col: 47, offset: 21883},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 753, col: 51, offset: 21887},
											name: "__",
										},
										&choiceExpr{
											pos: position{line: 753, col: 56, offset: 21892},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 753, col: 56, offset: 21892},
													name: "OverExpr",
												},
												&ruleRefExpr{
													pos:  position{line: 753, col: 67, offset: 21903},
													name: "Expr",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 753, col: 73, offset: 21909},
											name: "__",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 753, col: 78, offset: 21914},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Pattern",
			pos:  position{line: 761, col: 1, offset: 22155},
			expr: &choiceExpr{
				pos: position{line: 762, col: 5, offset: 22167},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 762, col: 5, offset: 22167},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 763, col: 5, offset: 22178},
						name: "Glob",
					},
					&actionExpr{
						pos: position{line: 764, col: 5, offset: 22187},
						run: (*parser).callonPattern4,
						expr: &labeledExpr{
							pos:   position{line: 764, col: 5, offset: 22187},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 764, col: 7, offset: 22189},
								name: "QuotedString",
							},
						},
					},
				},
			},
		},
		{
			name: "OptionalExprs",
			pos:  position{line: 768, col: 1, offset: 22281},
			expr: &choiceExpr{
				pos: position{line: 769, col: 5, offset: 22299},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 769, col: 5, offset: 22299},
						name: "Exprs",
					},
					&actionExpr{
						pos: position{line: 770, col: 5, offset: 22309},
						run: (*parser).callonOptionalExprs3,
						expr: &ruleRefExpr{
							pos:  position{line: 770, col: 5, offset: 22309},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 772, col: 1, offset: 22345},
			expr: &actionExpr{
				pos: position{line: 773, col: 5, offset: 22355},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 773, col: 5, offset: 22355},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 773, col: 5, offset: 22355},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 773, col: 11, offset: 22361},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 773, col: 16, offset: 22366},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 773, col: 21, offset: 22371},
								expr: &actionExpr{
									pos: position{line: 773, col: 22, offset: 22372},
									run: (*parser).callonExprs7,
									expr: &seqExpr{
										pos: position{line: 773, col: 22, offset: 22372},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 773, col: 22, offset: 22372},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 773, col: 25, offset: 22375},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 773, col: 29, offset: 22379},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 773, col: 32, offset: 22382},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 773, col: 34, offset: 22384},
													name: "Expr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 777, col: 1, offset: 22493},
			expr: &actionExpr{
				pos: position{line: 778, col: 5, offset: 22507},
				run: (*parser).callonDerefExpr1,
				expr: &seqExpr{
					pos: position{line: 778, col: 5, offset: 22507},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 778, col: 5, offset: 22507},
							expr: &ruleRefExpr{
								pos:  position{line: 778, col: 6, offset: 22508},
								name: "IP6",
							},
						},
						&labeledExpr{
							pos:   position{line: 778, col: 10, offset: 22512},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 778, col: 16, offset: 22518},
								name: "Identifier",
							},
						},
						&labeledExpr{
							pos:   position{line: 778, col: 27, offset: 22529},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 778, col: 32, offset: 22534},
								expr: &ruleRefExpr{
									pos:  position{line: 778, col: 33, offset: 22535},
									name: "Deref",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 782, col: 1, offset: 22603},
			expr: &choiceExpr{
				pos: position{line: 783, col: 5, offset: 22613},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 783, col: 5, offset: 22613},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 783, col: 5, offset: 22613},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 783, col: 5, offset: 22613},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 783, col: 9, offset: 22617},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 783, col: 14, offset: 22622},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 783, col: 27, offset: 22635},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 783, col: 30, offset: 22638},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 783, col: 34, offset: 22642},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 783, col: 37, offset: 22645},
									label: "to",
									expr: &zeroOrOneExpr{
										pos: position{line: 783, col: 40, offset: 22648},
										expr: &ruleRefExpr{
											pos:  position{line: 783, col: 40, offset: 22648},
											name: "AdditiveExpr",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 783, col: 54, offset: 22662},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 789, col: 5, offset: 22833},
						run: (*parser).callonDeref14,
						expr: &seqExpr{
							pos: position{line: 789, col: 5, offset: 22833},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 789, col: 5, offset: 22833},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 789, col: 9, offset: 22837},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 789, col: 12, offset: 22840},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 789, col: 16, offset: 22844},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 789, col: 19, offset: 22847},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 789, col: 22, offset: 22850},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 789, col: 35, offset: 22863},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 795, col: 5, offset: 23034},
						run: (*parser).callonDeref23,
						expr: &seqExpr{
							pos: position{line: 795, col: 5, offset: 23034},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 795, col: 5, offset: 23034},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 795, col: 9, offset: 23038},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 795, col: 14, offset: 23043},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 795, col: 19, offset: 23048},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 796, col: 5, offset: 23097},
						run: (*parser).callonDeref29,
						expr: &seqExpr{
							pos: position{line: 796, col: 5, offset: 23097},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 796, col: 5, offset: 23097},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 796, col: 9, offset: 23101},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 796, col: 12, offset: 23104},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 798, col: 1, offset: 23155},
			expr: &choiceExpr{
				pos: position{line: 799, col: 5, offset: 23167},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 799, col: 5, offset: 23167},
						name: "Record",
					},
					&ruleRefExpr{
						pos:  position{line: 800, col: 5, offset: 23178},
						name: "Array",
					},
					&ruleRefExpr{
						pos:  position{line: 801, col: 5, offset: 23188},
						name: "Set",
					},
					&ruleRefExpr{
						pos:  position{line: 802, col: 5, offset: 23196},
						name: "Map",
					},
					&ruleRefExpr{
						pos:  position{line: 803, col: 5, offset: 23204},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 804, col: 5, offset: 23216},
						run: (*parser).callonPrimary7,
						expr: &seqExpr{
							pos: position{line: 804, col: 5, offset: 23216},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 804, col: 5, offset: 23216},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 804, col: 9, offset: 23220},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 804, col: 12, offset: 23223},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 804, col: 17, offset: 23228},
										name: "OverExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 804, col: 26, offset: 23237},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 804, col: 29, offset: 23240},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 805, col: 5, offset: 23270},
						run: (*parser).callonPrimary15,
						expr: &seqExpr{
							pos: position{line: 805, col: 5, offset: 23270},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 805, col: 5, offset: 23270},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 805, col: 9, offset: 23274},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 805, col: 12, offset: 23277},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 805, col: 17, offset: 23282},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 805, col: 22, offset: 23287},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 805, col: 25, offset: 23290},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OverExpr",
			pos:  position{line: 807, col: 1, offset: 23316},
			expr: &actionExpr{
				pos: position{line: 808, col: 5, offset: 23329},
				run: (*parser).callonOverExpr1,
				expr: &seqExpr{
					pos: position{line: 808, col: 5, offset: 23329},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 808, col: 5, offset: 23329},
							val:        "over",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 808, col: 12, offset: 23336},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 808, col: 14, offset: 23338},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 808, col: 20, offset: 23344},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 808, col: 26, offset: 23350},
							label: "locals",
							expr: &zeroOrOneExpr{
								pos: position{line: 808, col: 33, offset: 23357},
								expr: &ruleRefExpr{
									pos:  position{line: 808, col: 33, offset: 23357},
									name: "Locals",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 808, col: 41, offset: 23365},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 808, col: 44, offset: 23368},
							val:        "|",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 808, col: 48, offset: 23372},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 808, col: 51, offset: 23375},
							label: "scope",
							expr: &ruleRefExpr{
								pos:  position{line: 808, col: 57, offset: 23381},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "Record",
			pos:  position{line: 812, col: 1, offset: 23512},
			expr: &actionExpr{
				pos: position{line: 813, col: 5, offset: 23523},
				run: (*parser).callonRecord1,
				expr: &seqExpr{
					pos: position{line: 813, col: 5, offset: 23523},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 813, col: 5, offset: 23523},
							val:        "{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 813, col: 9, offset: 23527},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 813, col: 12, offset: 23530},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 813, col: 18, offset: 23536},
								name: "RecordElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 813, col: 30, offset: 23548},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 813, col: 33, offset: 23551},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RecordElems",
			pos:  position{line: 817, col: 1, offset: 23641},
			expr: &choiceExpr{
				pos: position{line: 818, col: 5, offset: 23657},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 818, col: 5, offset: 23657},
						run: (*parser).callonRecordElems2,
						expr: &seqExpr{
							pos: position{line: 818, col: 5, offset: 23657},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 818, col: 5, offset: 23657},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 818, col: 11, offset: 23663},
										name: "RecordElem",
									},
								},
								&labeledExpr{
									pos:   position{line: 818, col: 22, offset: 23674},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 818, col: 27, offset: 23679},
										expr: &ruleRefExpr{
											pos:  position{line: 818, col: 27, offset: 23679},
											name: "RecordElemTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 821, col: 5, offset: 23778},
						run: (*parser).callonRecordElems9,
						expr: &ruleRefExpr{
							pos:  position{line: 821, col: 5, offset: 23778},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "RecordElemTail",
			pos:  position{line: 823, col: 1, offset: 23814},
			expr: &actionExpr{
				pos: position{line: 823, col: 18, offset: 23831},
				run: (*parser).callonRecordElemTail1,
				expr: &seqExpr{
					pos: position{line: 823, col: 18, offset: 23831},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 823, col: 18, offset: 23831},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 823, col: 21, offset: 23834},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 823, col: 25, offset: 23838},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 823, col: 28, offset: 23841},
							label: "elem",
							expr: &ruleRefExpr{
								pos:  position{line: 823, col: 33, offset: 23846},
								name: "RecordElem",
							},
						},
					},
				},
			},
		},
		{
			name: "RecordElem",
			pos:  position{line: 825, col: 1, offset: 23879},
			expr: &choiceExpr{
				pos: position{line: 826, col: 5, offset: 23894},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 826, col: 5, offset: 23894},
						name: "Spread",
					},
					&ruleRefExpr{
						pos:  position{line: 827, col: 5, offset: 23905},
						name: "Field",
					},
					&ruleRefExpr{
						pos:  position{line: 828, col: 5, offset: 23915},
						name: "Identifier",
					},
				},
			},
		},
		{
			name: "Spread",
			pos:  position{line: 830, col: 1, offset: 23927},
			expr: &actionExpr{
				pos: position{line: 831, col: 5, offset: 23938},
				run: (*parser).callonSpread1,
				expr: &seqExpr{
					pos: position{line: 831, col: 5, offset: 23938},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 831, col: 5, offset: 23938},
							val:        "...",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 831, col: 11, offset: 23944},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 831, col: 14, offset: 23947},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 831, col: 19, offset: 23952},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 835, col: 1, offset: 24038},
			expr: &actionExpr{
				pos: position{line: 836, col: 5, offset: 24048},
				run: (*parser).callonField1,
				expr: &seqExpr{
					pos: position{line: 836, col: 5, offset: 24048},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 836, col: 5, offset: 24048},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 836, col: 10, offset: 24053},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 836, col: 20, offset: 24063},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 836, col: 23, offset: 24066},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 836, col: 27, offset: 24070},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 836, col: 30, offset: 24073},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 836, col: 36, offset: 24079},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Array",
			pos:  position{line: 840, col: 1, offset: 24179},
			expr: &actionExpr{
				pos: position{line: 841, col: 5, offset: 24189},
				run: (*parser).callonArray1,
				expr: &seqExpr{
					pos: position{line: 841, col: 5, offset: 24189},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 841, col: 5, offset: 24189},
							val:        "[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 841, col: 9, offset: 24193},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 841, col: 12, offset: 24196},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 841, col: 18, offset: 24202},
								name: "VectorElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 841, col: 30, offset: 24214},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 841, col: 33, offset: 24217},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Set",
			pos:  position{line: 845, col: 1, offset: 24307},
			expr: &actionExpr{
				pos: position{line: 846, col: 5, offset: 24315},
				run: (*parser).callonSet1,
				expr: &seqExpr{
					pos: position{line: 846, col: 5, offset: 24315},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 846, col: 5, offset: 24315},
							val:        "|[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 846, col: 10, offset: 24320},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 846, col: 13, offset: 24323},
							label: "elems",
							expr: &ruleRefExpr{
								pos:  position{line: 846, col: 19, offset: 24329},
								name: "VectorElems",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 846, col: 31, offset: 24341},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 846, col: 34, offset: 24344},
							val:        "]|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "VectorElems",
			pos:  position{line: 850, col: 1, offset: 24433},
			expr: &choiceExpr{
				pos: position{line: 851, col: 5, offset: 24449},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 851, col: 5, offset: 24449},
						run: (*parser).callonVectorElems2,
						expr: &seqExpr{
							pos: position{line: 851, col: 5, offset: 24449},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 851, col: 5, offset: 24449},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 851, col: 11, offset: 24455},
										name: "VectorElem",
									},
								},
								&labeledExpr{
									pos:   position{line: 851, col: 22, offset: 24466},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 851, col: 27, offset: 24471},
										expr: &actionExpr{
											pos: position{line: 851, col: 28, offset: 24472},
											run: (*parser).callonVectorElems8,
											expr: &seqExpr{
												pos: position{line: 851, col: 28, offset: 24472},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 851, col: 28, offset: 24472},
														name: "__",
													},
													&litMatcher{
														pos:        position{line: 851, col: 31, offset: 24475},
														val:        ",",
														ignoreCase: false,
													},
													&ruleRefExpr{
														pos:  position{line: 851, col: 35, offset: 24479},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 851, col: 38, offset: 24482},
														label: "e",
														expr: &ruleRefExpr{
															pos:  position{line: 851, col: 40, offset: 24484},
															name: "VectorElem",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 854, col: 5, offset: 24602},
						run: (*parser).callonVectorElems15,
						expr: &ruleRefExpr{
							pos:  position{line: 854, col: 5, offset: 24602},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "VectorElem",
			pos:  position{line: 856, col: 1, offset: 24638},
			expr: &choiceExpr{
				pos: position{line: 857, col: 5, offset: 24653},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 857, col: 5, offset: 24653},
						name: "Spread",
					},
					&actionExpr{
						pos: position{line: 858, col: 5, offset: 24664},
						run: (*parser).callonVectorElem3,
						expr: &labeledExpr{
							pos:   position{line: 858, col: 5, offset: 24664},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 858, col: 7, offset: 24666},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Map",
			pos:  position{line: 860, col: 1, offset: 24742},
			expr: &actionExpr{
				pos: position{line: 861, col: 5, offset: 24750},
				run: (*parser).callonMap1,
				expr: &seqExpr{
					pos: position{line: 861, col: 5, offset: 24750},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 861, col: 5, offset: 24750},
							val:        "|{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 861, col: 10, offset: 24755},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 861, col: 13, offset: 24758},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 861, col: 19, offset: 24764},
								name: "Entries",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 861, col: 27, offset: 24772},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 861, col: 30, offset: 24775},
							val:        "}|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Entries",
			pos:  position{line: 865, col: 1, offset: 24866},
			expr: &choiceExpr{
				pos: position{line: 866, col: 5, offset: 24878},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 866, col: 5, offset: 24878},
						run: (*parser).callonEntries2,
						expr: &seqExpr{
							pos: position{line: 866, col: 5, offset: 24878},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 866, col: 5, offset: 24878},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 866, col: 11, offset: 24884},
										name: "Entry",
									},
								},
								&labeledExpr{
									pos:   position{line: 866, col: 17, offset: 24890},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 866, col: 22, offset: 24895},
										expr: &ruleRefExpr{
											pos:  position{line: 866, col: 22, offset: 24895},
											name: "EntryTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 869, col: 5, offset: 24989},
						run: (*parser).callonEntries9,
						expr: &ruleRefExpr{
							pos:  position{line: 869, col: 5, offset: 24989},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "EntryTail",
			pos:  position{line: 872, col: 1, offset: 25026},
			expr: &actionExpr{
				pos: position{line: 872, col: 13, offset: 25038},
				run: (*parser).callonEntryTail1,
				expr: &seqExpr{
					pos: position{line: 872, col: 13, offset: 25038},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 872, col: 13, offset: 25038},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 872, col: 16, offset: 25041},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 872, col: 20, offset: 25045},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 872, col: 23, offset: 25048},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 872, col: 25, offset: 25050},
								name: "Entry",
							},
						},
					},
				},
			},
		},
		{
			name: "Entry",
			pos:  position{line: 874, col: 1, offset: 25075},
			expr: &actionExpr{
				pos: position{line: 875, col: 5, offset: 25085},
				run: (*parser).callonEntry1,
				expr: &seqExpr{
					pos: position{line: 875, col: 5, offset: 25085},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 875, col: 5, offset: 25085},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 875, col: 9, offset: 25089},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 875, col: 14, offset: 25094},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 875, col: 17, offset: 25097},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 875, col: 21, offset: 25101},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 875, col: 24, offset: 25104},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 875, col: 30, offset: 25110},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOp",
			pos:  position{line: 881, col: 1, offset: 25217},
			expr: &actionExpr{
				pos: position{line: 882, col: 5, offset: 25227},
				run: (*parser).callonSQLOp1,
				expr: &seqExpr{
					pos: position{line: 882, col: 5, offset: 25227},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 882, col: 5, offset: 25227},
							label: "selection",
							expr: &ruleRefExpr{
								pos:  position{line: 882, col: 15, offset: 25237},
								name: "SQLSelect",
							},
						},
						&labeledExpr{
							pos:   position{line: 883, col: 5, offset: 25251},
							label: "from",
							expr: &zeroOrOneExpr{
								pos: position{line: 883, col: 10, offset: 25256},
								expr: &ruleRefExpr{
									pos:  position{line: 883, col: 10, offset: 25256},
									name: "SQLFrom",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 884, col: 5, offset: 25269},
							label: "joins",
							expr: &zeroOrOneExpr{
								pos: position{line: 884, col: 11, offset: 25275},
								expr: &ruleRefExpr{
									pos:  position{line: 884, col: 11, offset: 25275},
									name: "SQLJoins",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 885, col: 5, offset: 25289},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 885, col: 11, offset: 25295},
								expr: &ruleRefExpr{
									pos:  position{line: 885, col: 11, offset: 25295},
									name: "SQLWhere",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 886, col: 5, offset: 25309},
							label: "groupby",
							expr: &zeroOrOneExpr{
								pos: position{line: 886, col: 13, offset: 25317},
								expr: &ruleRefExpr{
									pos:  position{line: 886, col: 13, offset: 25317},
									name: "SQLGroupBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 887, col: 5, offset: 25333},
							label: "having",
							expr: &zeroOrOneExpr{
								pos: position{line: 887, col: 12, offset: 25340},
								expr: &ruleRefExpr{
									pos:  position{line: 887, col: 12, offset: 25340},
									name: "SQLHaving",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 888, col: 5, offset: 25355},
							label: "orderby",
							expr: &zeroOrOneExpr{
								pos: position{line: 888, col: 13, offset: 25363},
								expr: &ruleRefExpr{
									pos:  position{line: 888, col: 13, offset: 25363},
									name: "SQLOrderBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 889, col: 5, offset: 25379},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 889, col: 11, offset: 25385},
								name: "SQLLimit",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLSelect",
			pos:  position{line: 913, col: 1, offset: 25752},
			expr: &choiceExpr{
				pos: position{line: 914, col: 5, offset: 25766},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 914, col: 5, offset: 25766},
						run: (*parser).callonSQLSelect2,
						expr: &seqExpr{
							pos: position{line: 914, col: 5, offset: 25766},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 914, col: 5, offset: 25766},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 914, col: 12, offset: 25773},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 914, col: 14, offset: 25775},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 915, col: 5, offset: 25803},
						run: (*parser).callonSQLSelect7,
						expr: &seqExpr{
							pos: position{line: 915, col: 5, offset: 25803},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 915, col: 5, offset: 25803},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 915, col: 12, offset: 25810},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 915, col: 14, offset: 25812},
									label: "assignments",
									expr: &ruleRefExpr{
										pos:  position{line: 915, col: 26, offset: 25824},
										name: "SQLAssignments",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignment",
			pos:  position{line: 917, col: 1, offset: 25868},
			expr: &actionExpr{
				pos: position{line: 918, col: 5, offset: 25886},
				run: (*parser).callonSQLAssignment1,
				expr: &seqExpr{
					pos: position{line: 918, col: 5, offset: 25886},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 918, col: 5, offset: 25886},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 918, col: 9, offset: 25890},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 918, col: 14, offset: 25895},
							label: "opt",
							expr: &zeroOrOneExpr{
								pos: position{line: 918, col: 18, offset: 25899},
								expr: &seqExpr{
									pos: position{line: 918, col: 19, offset: 25900},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 918, col: 19, offset: 25900},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 918, col: 21, offset: 25902},
											name: "AS",
										},
										&ruleRefExpr{
											pos:  position{line: 918, col: 24, offset: 25905},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 918, col: 26, offset: 25907},
											name: "Lval",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignments",
			pos:  position{line: 926, col: 1, offset: 26098},
			expr: &actionExpr{
				pos: position{line: 927, col: 5, offset: 26117},
				run: (*parser).callonSQLAssignments1,
				expr: &seqExpr{
					pos: position{line: 927, col: 5, offset: 26117},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 927, col: 5, offset: 26117},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 927, col: 11, offset: 26123},
								name: "SQLAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 927, col: 25, offset: 26137},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 927, col: 30, offset: 26142},
								expr: &actionExpr{
									pos: position{line: 927, col: 31, offset: 26143},
									run: (*parser).callonSQLAssignments7,
									expr: &seqExpr{
										pos: position{line: 927, col: 31, offset: 26143},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 927, col: 31, offset: 26143},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 927, col: 34, offset: 26146},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 927, col: 38, offset: 26150},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 927, col: 41, offset: 26153},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 927, col: 46, offset: 26158},
													name: "SQLAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLFrom",
			pos:  position{line: 931, col: 1, offset: 26279},
			expr: &choiceExpr{
				pos: position{line: 932, col: 5, offset: 26291},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 932, col: 5, offset: 26291},
						run: (*parser).callonSQLFrom2,
						expr: &seqExpr{
							pos: position{line: 932, col: 5, offset: 26291},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 932, col: 5, offset: 26291},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 932, col: 7, offset: 26293},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 932, col: 12, offset: 26298},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 932, col: 14, offset: 26300},
									label: "table",
									expr: &ruleRefExpr{
										pos:  position{line: 932, col: 20, offset: 26306},
										name: "SQLTable",
									},
								},
								&labeledExpr{
									pos:   position{line: 932, col: 29, offset: 26315},
									label: "alias",
									expr: &zeroOrOneExpr{
										pos: position{line: 932, col: 35, offset: 26321},
										expr: &ruleRefExpr{
											pos:  position{line: 932, col: 35, offset: 26321},
											name: "SQLAlias",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 935, col: 5, offset: 26416},
						run: (*parser).callonSQLFrom12,
						expr: &seqExpr{
							pos: position{line: 935, col: 5, offset: 26416},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 935, col: 5, offset: 26416},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 935, col: 7, offset: 26418},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 935, col: 12, offset: 26423},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 935, col: 14, offset: 26425},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAlias",
			pos:  position{line: 937, col: 1, offset: 26450},
			expr: &choiceExpr{
				pos: position{line: 938, col: 5, offset: 26463},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 938, col: 5, offset: 26463},
						run: (*parser).callonSQLAlias2,
						expr: &seqExpr{
							pos: position{line: 938, col: 5, offset: 26463},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 938, col: 5, offset: 26463},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 938, col: 7, offset: 26465},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 938, col: 10, offset: 26468},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 938, col: 12, offset: 26470},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 938, col: 15, offset: 26473},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 939, col: 5, offset: 26501},
						run: (*parser).callonSQLAlias9,
						expr: &seqExpr{
							pos: position{line: 939, col: 5, offset: 26501},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 939, col: 5, offset: 26501},
									name: "_",
								},
								&notExpr{
									pos: position{line: 939, col: 7, offset: 26503},
									expr: &seqExpr{
										pos: position{line: 939, col: 9, offset: 26505},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 939, col: 9, offset: 26505},
												name: "SQLTokenSentinels",
											},
											&ruleRefExpr{
												pos:  position{line: 939, col: 27, offset: 26523},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 939, col: 30, offset: 26526},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 939, col: 33, offset: 26529},
										name: "Lval",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLTable",
			pos:  position{line: 941, col: 1, offset: 26554},
			expr: &ruleRefExpr{
				pos:  position{line: 942, col: 5, offset: 26567},
				name: "Expr",
			},
		},
		{
			name: "SQLJoins",
			pos:  position{line: 944, col: 1, offset: 26573},
			expr: &actionExpr{
				pos: position{line: 945, col: 5, offset: 26586},
				run: (*parser).callonSQLJoins1,
				expr: &seqExpr{
					pos: position{line: 945, col: 5, offset: 26586},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 945, col: 5, offset: 26586},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 945, col: 11, offset: 26592},
								name: "SQLJoin",
							},
						},
						&labeledExpr{
							pos:   position{line: 945, col: 19, offset: 26600},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 945, col: 24, offset: 26605},
								expr: &actionExpr{
									pos: position{line: 945, col: 25, offset: 26606},
									run: (*parser).callonSQLJoins7,
									expr: &labeledExpr{
										pos:   position{line: 945, col: 25, offset: 26606},
										label: "join",
										expr: &ruleRefExpr{
											pos:  position{line: 945, col: 30, offset: 26611},
											name: "SQLJoin",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoin",
			pos:  position{line: 949, col: 1, offset: 26726},
			expr: &actionExpr{
				pos: position{line: 950, col: 5, offset: 26738},
				run: (*parser).callonSQLJoin1,
				expr: &seqExpr{
					pos: position{line: 950, col: 5, offset: 26738},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 950, col: 5, offset: 26738},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 950, col: 11, offset: 26744},
								name: "SQLJoinStyle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 950, col: 24, offset: 26757},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 950, col: 26, offset: 26759},
							name: "JOIN",
						},
						&ruleRefExpr{
							pos:  position{line: 950, col: 31, offset: 26764},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 950, col: 33, offset: 26766},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 950, col: 39, offset: 26772},
								name: "SQLTable",
							},
						},
						&labeledExpr{
							pos:   position{line: 950, col: 48, offset: 26781},
							label: "alias",
							expr: &zeroOrOneExpr{
								pos: position{line: 950, col: 54, offset: 26787},
								expr: &ruleRefExpr{
									pos:  position{line: 950, col: 54, offset: 26787},
									name: "SQLAlias",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 950, col: 64, offset: 26797},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 950, col: 66, offset: 26799},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 950, col: 69, offset: 26802},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 950, col: 71, offset: 26804},
							label: "leftKey",
							expr: &ruleRefExpr{
								pos:  position{line: 950, col: 79, offset: 26812},
								name: "JoinKey",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 950, col: 87, offset: 26820},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 950, col: 90, offset: 26823},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 950, col: 94, offset: 26827},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 950, col: 97, offset: 26830},
							label: "rightKey",
							expr: &ruleRefExpr{
								pos:  position{line: 950, col: 106, offset: 26839},
								name: "JoinKey",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoinStyle",
			pos:  position{line: 965, col: 1, offset: 27070},
			expr: &choiceExpr{
				pos: position{line: 966, col: 5, offset: 27087},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 966, col: 5, offset: 27087},
						run: (*parser).callonSQLJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 966, col: 5, offset: 27087},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 966, col: 5, offset: 27087},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 966, col: 7, offset: 27089},
									label: "style",
									expr: &choiceExpr{
										pos: position{line: 966, col: 14, offset: 27096},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 966, col: 14, offset: 27096},
												name: "ANTI",
											},
											&ruleRefExpr{
												pos:  position{line: 966, col: 21, offset: 27103},
												name: "INNER",
											},
											&ruleRefExpr{
												pos:  position{line: 966, col: 29, offset: 27111},
												name: "LEFT",
											},
											&ruleRefExpr{
												pos:  position{line: 966, col: 36, offset: 27118},
												name: "RIGHT",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 967, col: 5, offset: 27151},
						run: (*parser).callonSQLJoinStyle11,
						expr: &litMatcher{
							pos:        position{line: 967, col: 5, offset: 27151},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLWhere",
			pos:  position{line: 969, col: 1, offset: 27179},
			expr: &actionExpr{
				pos: position{line: 970, col: 5, offset: 27192},
				run: (*parser).callonSQLWhere1,
				expr: &seqExpr{
					pos: position{line: 970, col: 5, offset: 27192},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 970, col: 5, offset: 27192},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 970, col: 7, offset: 27194},
							name: "WHERE",
						},
						&ruleRefExpr{
							pos:  position{line: 970, col: 13, offset: 27200},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 970, col: 15, offset: 27202},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 970, col: 20, offset: 27207},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLGroupBy",
			pos:  position{line: 972, col: 1, offset: 27243},
			expr: &actionExpr{
				pos: position{line: 973, col: 5, offset: 27258},
				run: (*parser).callonSQLGroupBy1,
				expr: &seqExpr{
					pos: position{line: 973, col: 5, offset: 27258},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 973, col: 5, offset: 27258},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 973, col: 7, offset: 27260},
							name: "GROUP",
						},
						&ruleRefExpr{
							pos:  position{line: 973, col: 13, offset: 27266},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 973, col: 15, offset: 27268},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 973, col: 18, offset: 27271},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 973, col: 20, offset: 27273},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 973, col: 28, offset: 27281},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLHaving",
			pos:  position{line: 975, col: 1, offset: 27317},
			expr: &actionExpr{
				pos: position{line: 976, col: 5, offset: 27331},
				run: (*parser).callonSQLHaving1,
				expr: &seqExpr{
					pos: position{line: 976, col: 5, offset: 27331},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 976, col: 5, offset: 27331},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 976, col: 7, offset: 27333},
							name: "HAVING",
						},
						&ruleRefExpr{
							pos:  position{line: 976, col: 14, offset: 27340},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 976, col: 16, offset: 27342},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 976, col: 21, offset: 27347},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrderBy",
			pos:  position{line: 978, col: 1, offset: 27383},
			expr: &actionExpr{
				pos: position{line: 979, col: 5, offset: 27398},
				run: (*parser).callonSQLOrderBy1,
				expr: &seqExpr{
					pos: position{line: 979, col: 5, offset: 27398},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 979, col: 5, offset: 27398},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 979, col: 7, offset: 27400},
							name: "ORDER",
						},
						&ruleRefExpr{
							pos:  position{line: 979, col: 13, offset: 27406},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 979, col: 15, offset: 27408},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 979, col: 18, offset: 27411},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 979, col: 20, offset: 27413},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 979, col: 25, offset: 27418},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 979, col: 31, offset: 27424},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 979, col: 37, offset: 27430},
								name: "SQLOrder",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrder",
			pos:  position{line: 983, col: 1, offset: 27540},
			expr: &choiceExpr{
				pos: position{line: 984, col: 5, offset: 27553},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 984, col: 5, offset: 27553},
						run: (*parser).callonSQLOrder2,
						expr: &seqExpr{
							pos: position{line: 984, col: 5, offset: 27553},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 984, col: 5, offset: 27553},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 984, col: 7, offset: 27555},
									label: "dir",
									expr: &choiceExpr{
										pos: position{line: 984, col: 12, offset: 27560},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 984, col: 12, offset: 27560},
												name: "ASC",
											},
											&ruleRefExpr{
												pos:  position{line: 984, col: 18, offset: 27566},
												name: "DESC",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 985, col: 5, offset: 27596},
						run: (*parser).callonSQLOrder9,
						expr: &litMatcher{
							pos:        position{line: 985, col: 5, offset: 27596},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLLimit",
			pos:  position{line: 987, col: 1, offset: 27622},
			expr: &choiceExpr{
				pos: position{line: 988, col: 5, offset: 27635},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 988, col: 5, offset: 27635},
						run: (*parser).callonSQLLimit2,
						expr: &seqExpr{
							pos: position{line: 988, col: 5, offset: 27635},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 988, col: 5, offset: 27635},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 988, col: 7, offset: 27637},
									name: "LIMIT",
								},
								&ruleRefExpr{
									pos:  position{line: 988, col: 13, offset: 27643},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 988, col: 15, offset: 27645},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 988, col: 21, offset: 27651},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 989, col: 5, offset: 27682},
						run: (*parser).callonSQLLimit9,
						expr: &litMatcher{
							pos:        position{line: 989, col: 5, offset: 27682},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SELECT",
			pos:  position{line: 991, col: 1, offset: 27704},
			expr: &actionExpr{
				pos: position{line: 991, col: 10, offset: 27713},
				run: (*parser).callonSELECT1,
				expr: &litMatcher{
					pos:        position{line: 991, col: 10, offset: 27713},
					val:        "select",
					ignoreCase: true,
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 992, col: 1, offset: 27748},
			expr: &actionExpr{
				pos: position{line: 992, col: 6, offset: 27753},
				run: (*parser).callonAS1,
				expr: &litMatcher{
					pos:        position{line: 992, col: 6, offset: 27753},
					val:        "as",
					ignoreCase: true,
				},
			},
		},
		{
			name: "FROM",
			pos:  position{line: 993, col: 1, offset: 27780},
			expr: &actionExpr{
				pos: position{line: 993, col: 8, offset: 27787},
				run: (*parser).callonFROM1,
				expr: &litMatcher{
					pos:        position{line: 993, col: 8, offset: 27787},
					val:        "from",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JOIN",
			pos:  position{line: 994, col: 1, offset: 27818},
			expr: &actionExpr{
				pos: position{line: 994, col: 8, offset: 27825},
				run: (*parser).callonJOIN1,
				expr: &litMatcher{
					pos:        position{line: 994, col: 8, offset: 27825},
					val:        "join",
					ignoreCase: true,
				},
			},
		},
		{
			name: "WHERE",
			pos:  position{line: 995, col: 1, offset: 27856},
			expr: &actionExpr{
				pos: position{line: 995, col: 9, offset: 27864},
				run: (*parser).callonWHERE1,
				expr: &litMatcher{
					pos:        position{line: 995, col: 9, offset: 27864},
					val:        "where",
					ignoreCase: true,
				},
			},
		},
		{
			name: "GROUP",
			pos:  position{line: 996, col: 1, offset: 27897},
			expr: &actionExpr{
				pos: position{line: 996, col: 9, offset: 27905},
				run: (*parser).callonGROUP1,
				expr: &litMatcher{
					pos:        position{line: 996, col: 9, offset: 27905},
					val:        "group",
					ignoreCase: true,
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 997, col: 1, offset: 27938},
			expr: &actionExpr{
				pos: position{line: 997, col: 6, offset: 27943},
				run: (*parser).callonBY1,
				expr: &litMatcher{
					pos:        position{line: 997, col: 6, offset: 27943},
					val:        "by",
					ignoreCase: true,
				},
			},
		},
		{
			name: "HAVING",
			pos:  position{line: 998, col: 1, offset: 27970},
			expr: &actionExpr{
				pos: position{line: 998, col: 10, offset: 27979},
				run: (*parser).callonHAVING1,
				expr: &litMatcher{
					pos:        position{line: 998, col: 10, offset: 27979},
					val:        "having",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ORDER",
			pos:  position{line: 999, col: 1, offset: 28014},
			expr: &actionExpr{
				pos: position{line: 999, col: 9, offset: 28022},
				run: (*parser).callonORDER1,
				expr: &litMatcher{
					pos:        position{line: 999, col: 9, offset: 28022},
					val:        "order",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ON",
			pos:  position{line: 1000, col: 1, offset: 28055},
			expr: &actionExpr{
				pos: position{line: 1000, col: 6, offset: 28060},
				run: (*parser).callonON1,
				expr: &litMatcher{
					pos:        position{line: 1000, col: 6, offset: 28060},
					val:        "on",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LIMIT",
			pos:  position{line: 1001, col: 1, offset: 28087},
			expr: &actionExpr{
				pos: position{line: 1001, col: 9, offset: 28095},
				run: (*parser).callonLIMIT1,
				expr: &litMatcher{
					pos:        position{line: 1001, col: 9, offset: 28095},
					val:        "limit",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ASC",
			pos:  position{line: 1002, col: 1, offset: 28128},
			expr: &actionExpr{
				pos: position{line: 1002, col: 7, offset: 28134},
				run: (*parser).callonASC1,
				expr: &litMatcher{
					pos:        position{line: 1002, col: 7, offset: 28134},
					val:        "asc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "DESC",
			pos:  position{line: 1003, col: 1, offset: 28163},
			expr: &actionExpr{
				pos: position{line: 1003, col: 8, offset: 28170},
				run: (*parser).callonDESC1,
				expr: &litMatcher{
					pos:        position{line: 1003, col: 8, offset: 28170},
					val:        "desc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ANTI",
			pos:  position{line: 1004, col: 1, offset: 28201},
			expr: &actionExpr{
				pos: position{line: 1004, col: 8, offset: 28208},
				run: (*parser).callonANTI1,
				expr: &litMatcher{
					pos:        position{line: 1004, col: 8, offset: 28208},
					val:        "anti",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LEFT",
			pos:  position{line: 1005, col: 1, offset: 28239},
			expr: &actionExpr{
				pos: position{line: 1005, col: 8, offset: 28246},
				run: (*parser).callonLEFT1,
				expr: &litMatcher{
					pos:        position{line: 1005, col: 8, offset: 28246},
					val:        "left",
					ignoreCase: true,
				},
			},
		},
		{
			name: "RIGHT",
			pos:  position{line: 1006, col: 1, offset: 28277},
			expr: &actionExpr{
				pos: position{line: 1006, col: 9, offset: 28285},
				run: (*parser).callonRIGHT1,
				expr: &litMatcher{
					pos:        position{line: 1006, col: 9, offset: 28285},
					val:        "right",
					ignoreCase: true,
				},
			},
		},
		{
			name: "INNER",
			pos:  position{line: 1007, col: 1, offset: 28318},
			expr: &actionExpr{
				pos: position{line: 1007, col: 9, offset: 28326},
				run: (*parser).callonINNER1,
				expr: &litMatcher{
					pos:        position{line: 1007, col: 9, offset: 28326},
					val:        "inner",
					ignoreCase: true,
				},
			},
		},
		{
			name: "SQLTokenSentinels",
			pos:  position{line: 1009, col: 1, offset: 28360},
			expr: &choiceExpr{
				pos: position{line: 1010, col: 5, offset: 28382},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1010, col: 5, offset: 28382},
						name: "SELECT",
					},
					&ruleRefExpr{
						pos:  position{line: 1010, col: 14, offset: 28391},
						name: "AS",
					},
					&ruleRefExpr{
						pos:  position{line: 1010, col: 19, offset: 28396},
						name: "FROM",
					},
					&ruleRefExpr{
						pos:  position{line: 1010, col: 27, offset: 28404},
						name: "JOIN",
					},
					&ruleRefExpr{
						pos:  position{line: 1010, col: 34, offset: 28411},
						name: "WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 1010, col: 42, offset: 28419},
						name: "GROUP",
					},
					&ruleRefExpr{
						pos:  position{line: 1010, col: 50, offset: 28427},
						name: "HAVING",
					},
					&ruleRefExpr{
						pos:  position{line: 1010, col: 59, offset: 28436},
						name: "ORDER",
					},
					&ruleRefExpr{
						pos:  position{line: 1010, col: 67, offset: 28444},
						name: "LIMIT",
					},
					&ruleRefExpr{
						pos:  position{line: 1010, col: 75, offset: 28452},
						name: "ON",
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 1014, col: 1, offset: 28478},
			expr: &choiceExpr{
				pos: position{line: 1015, col: 5, offset: 28490},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1015, col: 5, offset: 28490},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1016, col: 5, offset: 28506},
						name: "TemplateLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1017, col: 5, offset: 28526},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1018, col: 5, offset: 28544},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1019, col: 5, offset: 28563},
						name: "BytesLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1020, col: 5, offset: 28580},
						name: "Duration",
					},
					&ruleRefExpr{
						pos:  position{line: 1021, col: 5, offset: 28593},
						name: "Time",
					},
					&ruleRefExpr{
						pos:  position{line: 1022, col: 5, offset: 28602},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1023, col: 5, offset: 28619},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1024, col: 5, offset: 28638},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1025, col: 5, offset: 28657},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 1027, col: 1, offset: 28670},
			expr: &choiceExpr{
				pos: position{line: 1028, col: 5, offset: 28688},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1028, col: 5, offset: 28688},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 1028, col: 5, offset: 28688},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1028, col: 5, offset: 28688},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1028, col: 7, offset: 28690},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 1028, col: 14, offset: 28697},
									expr: &ruleRefExpr{
										pos:  position{line: 1028, col: 15, offset: 28698},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1031, col: 5, offset: 28813},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 1031, col: 5, offset: 28813},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1031, col: 7, offset: 28815},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 1035, col: 1, offset: 28919},
			expr: &choiceExpr{
				pos: position{line: 1036, col: 5, offset: 28938},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1036, col: 5, offset: 28938},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 1036, col: 5, offset: 28938},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1036, col: 5, offset: 28938},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1036, col: 7, offset: 28940},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 1036, col: 11, offset: 28944},
									expr: &ruleRefExpr{
										pos:  position{line: 1036, col: 12, offset: 28945},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1039, col: 5, offset: 29059},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 1039, col: 5, offset: 29059},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1039, col: 7, offset: 29061},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 1043, col: 1, offset: 29160},
			expr: &actionExpr{
				pos: position{line: 1044, col: 5, offset: 29177},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1044, col: 5, offset: 29177},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1044, col: 7, offset: 29179},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 1048, col: 1, offset: 29292},
			expr: &actionExpr{
				pos: position{line: 1049, col: 5, offset: 29311},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1049, col: 5, offset: 29311},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1049, col: 7, offset: 29313},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 1053, col: 1, offset: 29422},
			expr: &choiceExpr{
				pos: position{line: 1054, col: 5, offset: 29441},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1054, col: 5, offset: 29441},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 1054, col: 5, offset: 29441},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1055, col: 5, offset: 29554},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 1055, col: 5, offset: 29554},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 1057, col: 1, offset: 29665},
			expr: &actionExpr{
				pos: position{line: 1058, col: 5, offset: 29681},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 1058, col: 5, offset: 29681},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "BytesLiteral",
			pos:  position{line: 1060, col: 1, offset: 29787},
			expr: &actionExpr{
				pos: position{line: 1061, col: 5, offset: 29804},
				run: (*parser).callonBytesLiteral1,
				expr: &seqExpr{
					pos: position{line: 1061, col: 5, offset: 29804},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1061, col: 5, offset: 29804},
							val:        "0x",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1061, col: 10, offset: 29809},
							expr: &ruleRefExpr{
								pos:  position{line: 1061, col: 10, offset: 29809},
								name: "HexDigit",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeLiteral",
			pos:  position{line: 1065, col: 1, offset: 29924},
			expr: &actionExpr{
				pos: position{line: 1066, col: 5, offset: 29940},
				run: (*parser).callonTypeLiteral1,
				expr: &seqExpr{
					pos: position{line: 1066, col: 5, offset: 29940},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1066, col: 5, offset: 29940},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1066, col: 9, offset: 29944},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1066, col: 13, offset: 29948},
								name: "Type",
							},
						},
						&litMatcher{
							pos:        position{line: 1066, col: 18, offset: 29953},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "CastType",
			pos:  position{line: 1070, col: 1, offset: 30042},
			expr: &choiceExpr{
				pos: position{line: 1071, col: 5, offset: 30055},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1071, col: 5, offset: 30055},
						name: "TypeLiteral",
					},
					&actionExpr{
						pos: position{line: 1072, col: 5, offset: 30071},
						run: (*parser).callonCastType3,
						expr: &labeledExpr{
							pos:   position{line: 1072, col: 5, offset: 30071},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1072, col: 9, offset: 30075},
								name: "PrimitiveType",
							},
						},
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 1076, col: 1, offset: 30174},
			expr: &choiceExpr{
				pos: position{line: 1077, col: 5, offset: 30183},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1077, col: 5, offset: 30183},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1078, col: 5, offset: 30199},
						name: "AmbiguousType",
					},
					&ruleRefExpr{
						pos:  position{line: 1079, col: 5, offset: 30217},
						name: "ComplexType",
					},
				},
			},
		},
		{
			name: "AmbiguousType",
			pos:  position{line: 1081, col: 1, offset: 30230},
			expr: &choiceExpr{
				pos: position{line: 1082, col: 5, offset: 30248},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1082, col: 5, offset: 30248},
						run: (*parser).callonAmbiguousType2,
						expr: &seqExpr{
							pos: position{line: 1082, col: 5, offset: 30248},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1082, col: 5, offset: 30248},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1082, col: 10, offset: 30253},
										name: "PrimitiveType",
									},
								},
								&notExpr{
									pos: position{line: 1082, col: 24, offset: 30267},
									expr: &ruleRefExpr{
										pos:  position{line: 1082, col: 25, offset: 30268},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1083, col: 5, offset: 30308},
						run: (*parser).callonAmbiguousType8,
						expr: &seqExpr{
							pos: position{line: 1083, col: 5, offset: 30308},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1083, col: 5, offset: 30308},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1083, col: 10, offset: 30313},
										name: "IdentifierName",
									},
								},
								&labeledExpr{
									pos:   position{line: 1083, col: 25, offset: 30328},
									label: "opt",
									expr: &zeroOrOneExpr{
										pos: position{line: 1083, col: 29, offset: 30332},
										expr: &seqExpr{
											pos: position{line: 1083, col: 30, offset: 30333},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1083, col: 30, offset: 30333},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 1083, col: 33, offset: 30336},
													val:        "=",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 1083, col: 37, offset: 30340},
													name: "__",
												},
												&ruleRefExpr{
													pos:  position{line: 1083, col: 40, offset: 30343},
													name: "Type",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1089, col: 5, offset: 30575},
						run: (*parser).callonAmbiguousType19,
						expr: &labeledExpr{
							pos:   position{line: 1089, col: 5, offset: 30575},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1089, col: 10, offset: 30580},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1092, col: 5, offset: 30680},
						run: (*parser).callonAmbiguousType22,
						expr: &seqExpr{
							pos: position{line: 1092, col: 5, offset: 30680},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1092, col: 5, offset: 30680},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1092, col: 9, offset: 30684},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1092, col: 12, offset: 30687},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 1092, col: 14, offset: 30689},
										name: "TypeUnion",
									},
								},
								&litMatcher{
									pos:        position{line: 1092, col: 25, offset: 30700},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeUnion",
			pos:  position{line: 1094, col: 1, offset: 30723},
			expr: &actionExpr{
				pos: position{line: 1095, col: 5, offset: 30737},
				run: (*parser).callonTypeUnion1,
				expr: &labeledExpr{
					pos:   position{line: 1095, col: 5, offset: 30737},
					label: "types",
					expr: &ruleRefExpr{
						pos:  position{line: 1095, col: 11, offset: 30743},
						name: "TypeList",
					},
				},
			},
		},
		{
			name: "TypeList",
			pos:  position{line: 1099, col: 1, offset: 30839},
			expr: &actionExpr{
				pos: position{line: 1100, col: 5, offset: 30852},
				run: (*parser).callonTypeList1,
				expr: &seqExpr{
					pos: position{line: 1100, col: 5, offset: 30852},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1100, col: 5, offset: 30852},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1100, col: 11, offset: 30858},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 1100, col: 16, offset: 30863},
							label: "rest",
							expr: &oneOrMoreExpr{
								pos: position{line: 1100, col: 21, offset: 30868},
								expr: &ruleRefExpr{
									pos:  position{line: 1100, col: 21, offset: 30868},
									name: "TypeListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeListTail",
			pos:  position{line: 1104, col: 1, offset: 30962},
			expr: &actionExpr{
				pos: position{line: 1104, col: 16, offset: 30977},
				run: (*parser).callonTypeListTail1,
				expr: &seqExpr{
					pos: position{line: 1104, col: 16, offset: 30977},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1104, col: 16, offset: 30977},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1104, col: 19, offset: 30980},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1104, col: 23, offset: 30984},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1104, col: 26, offset: 30987},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1104, col: 30, offset: 30991},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexType",
			pos:  position{line: 1106, col: 1, offset: 31017},
			expr: &choiceExpr{
				pos: position{line: 1107, col: 5, offset: 31033},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1107, col: 5, offset: 31033},
						run: (*parser).callonComplexType2,
						expr: &seqExpr{
							pos: position{line: 1107, col: 5, offset: 31033},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1107, col: 5, offset: 31033},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1107, col: 9, offset: 31037},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1107, col: 12, offset: 31040},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 1107, col: 19, offset: 31047},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1107, col: 33, offset: 31061},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1107, col: 36, offset: 31064},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1110, col: 5, offset: 31159},
						run: (*parser).callonComplexType10,
						expr: &seqExpr{
							pos: position{line: 1110, col: 5, offset: 31159},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1110, col: 5, offset: 31159},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1110, col: 9, offset: 31163},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1110, col: 12, offset: 31166},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1110, col: 16, offset: 31170},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1110, col: 21, offset: 31175},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1110, col: 24, offset: 31178},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1113, col: 5, offset: 31267},
						run: (*parser).callonComplexType18,
						expr: &seqExpr{
							pos: position{line: 1113, col: 5, offset: 31267},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1113, col: 5, offset: 31267},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1113, col: 10, offset: 31272},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1113, col: 14, offset: 31276},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1113, col: 18, offset: 31280},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1113, col: 23, offset: 31285},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1113, col: 26, offset: 31288},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1116, col: 5, offset: 31376},
						run: (*parser).callonComplexType26,
						expr: &seqExpr{
							pos: position{line: 1116, col: 5, offset: 31376},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1116, col: 5, offset: 31376},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1116, col: 10, offset: 31381},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1116, col: 13, offset: 31384},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 1116, col: 21, offset: 31392},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1116, col: 26, offset: 31397},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1116, col: 29, offset: 31400},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1116, col: 33, offset: 31404},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1116, col: 36, offset: 31407},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 1116, col: 44, offset: 31415},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1116, col: 49, offset: 31420},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1116, col: 52, offset: 31423},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateLiteral",
			pos:  position{line: 1120, col: 1, offset: 31537},
			expr: &actionExpr{
				pos: position{line: 1121, col: 5, offset: 31557},
				run: (*parser).callonTemplateLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1121, col: 5, offset: 31557},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1121, col: 7, offset: 31559},
						name: "TemplateLiteralParts",
					},
				},
			},
		},
		{
			name: "TemplateLiteralParts",
			pos:  position{line: 1128, col: 1, offset: 31775},
			expr: &choiceExpr{
				pos: position{line: 1129, col: 5, offset: 31800},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1129, col: 5, offset: 31800},
						run: (*parser).callonTemplateLiteralParts2,
						expr: &seqExpr{
							pos: position{line: 1129, col: 5, offset: 31800},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1129, col: 5, offset: 31800},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1129, col: 9, offset: 31804},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1129, col: 11, offset: 31806},
										expr: &ruleRefExpr{
											pos:  position{line: 1129, col: 11, offset: 31806},
											name: "TemplateDoubleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1129, col: 37, offset: 31832},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1130, col: 5, offset: 31858},
						run: (*parser).callonTemplateLiteralParts9,
						expr: &seqExpr{
							pos: position{line: 1130, col: 5, offset: 31858},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1130, col: 5, offset: 31858},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1130, col: 9, offset: 31862},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1130, col: 11, offset: 31864},
										expr: &ruleRefExpr{
											pos:  position{line: 1130, col: 11, offset: 31864},
											name: "TemplateSingleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1130, col: 37, offset: 31890},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedPart",
			pos:  position{line: 1132, col: 1, offset: 31913},
			expr: &choiceExpr{
				pos: position{line: 1133, col: 5, offset: 31942},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1133, col: 5, offset: 31942},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 1134, col: 5, offset: 31959},
						run: (*parser).callonTemplateDoubleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 1134, col: 5, offset: 31959},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1134, col: 7, offset: 31961},
								expr: &ruleRefExpr{
									pos:  position{line: 1134, col: 7, offset: 31961},
									name: "TemplateDoubleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedChar",
			pos:  position{line: 1138, col: 1, offset: 32098},
			expr: &choiceExpr{
				pos: position{line: 1139, col: 5, offset: 32127},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1139, col: 5, offset: 32127},
						run: (*parser).callonTemplateDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1139, col: 5, offset: 32127},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1139, col: 5, offset: 32127},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1139, col: 10, offset: 32132},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1139, col: 12, offset: 32134},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1140, col: 5, offset: 32161},
						run: (*parser).callonTemplateDoubleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1140, col: 5, offset: 32161},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1140, col: 5, offset: 32161},
									expr: &litMatcher{
										pos:        position{line: 1140, col: 8, offset: 32164},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1140, col: 15, offset: 32171},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1140, col: 17, offset: 32173},
										name: "DoubleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedPart",
			pos:  position{line: 1142, col: 1, offset: 32209},
			expr: &choiceExpr{
				pos: position{line: 1143, col: 5, offset: 32238},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1143, col: 5, offset: 32238},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 1144, col: 5, offset: 32255},
						run: (*parser).callonTemplateSingleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 1144, col: 5, offset: 32255},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1144, col: 7, offset: 32257},
								expr: &ruleRefExpr{
									pos:  position{line: 1144, col: 7, offset: 32257},
									name: "TemplateSingleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedChar",
			pos:  position{line: 1148, col: 1, offset: 32394},
			expr: &choiceExpr{
				pos: position{line: 1149, col: 5, offset: 32423},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1149, col: 5, offset: 32423},
						run: (*parser).callonTemplateSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1149, col: 5, offset: 32423},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1149, col: 5, offset: 32423},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1149, col: 10, offset: 32428},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1149, col: 12, offset: 32430},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1150, col: 5, offset: 32457},
						run: (*parser).callonTemplateSingleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1150, col: 5, offset: 32457},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1150, col: 5, offset: 32457},
									expr: &litMatcher{
										pos:        position{line: 1150, col: 8, offset: 32460},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1150, col: 15, offset: 32467},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1150, col: 17, offset: 32469},
										name: "SingleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateExpr",
			pos:  position{line: 1152, col: 1, offset: 32505},
			expr: &actionExpr{
				pos: position{line: 1153, col: 5, offset: 32522},
				run: (*parser).callonTemplateExpr1,
				expr: &seqExpr{
					pos: position{line: 1153, col: 5, offset: 32522},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1153, col: 5, offset: 32522},
							val:        "${",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1153, col: 10, offset: 32527},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1153, col: 13, offset: 32530},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 1153, col: 15, offset: 32532},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1153, col: 20, offset: 32537},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1153, col: 23, offset: 32540},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 1168, col: 1, offset: 32836},
			expr: &actionExpr{
				pos: position{line: 1169, col: 5, offset: 32854},
				run: (*parser).callonPrimitiveType1,
				expr: &choiceExpr{
					pos: position{line: 1169, col: 9, offset: 32858},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 1169, col: 9, offset: 32858},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1169, col: 19, offset: 32868},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1169, col: 30, offset: 32879},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1169, col: 41, offset: 32890},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1170, col: 9, offset: 32907},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1170, col: 18, offset: 32916},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1170, col: 28, offset: 32926},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1170, col: 38, offset: 32936},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1171, col: 9, offset: 32952},
							val:        "float16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1171, col: 21, offset: 32964},
							val:        "float32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1171, col: 33, offset: 32976},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1172, col: 9, offset: 32994},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1172, col: 18, offset: 33003},
							val:        "string",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1173, col: 9, offset: 33020},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1173, col: 22, offset: 33033},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1174, col: 9, offset: 33048},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1175, col: 9, offset: 33064},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1175, col: 16, offset: 33071},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1176, col: 9, offset: 33085},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1176, col: 18, offset: 33094},
							val:        "null",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldList",
			pos:  position{line: 1180, col: 1, offset: 33210},
			expr: &choiceExpr{
				pos: position{line: 1181, col: 5, offset: 33228},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1181, col: 5, offset: 33228},
						run: (*parser).callonTypeFieldList2,
						expr: &seqExpr{
							pos: position{line: 1181, col: 5, offset: 33228},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1181, col: 5, offset: 33228},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 1181, col: 11, offset: 33234},
										name: "TypeField",
									},
								},
								&labeledExpr{
									pos:   position{line: 1181, col: 21, offset: 33244},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1181, col: 26, offset: 33249},
										expr: &ruleRefExpr{
											pos:  position{line: 1181, col: 26, offset: 33249},
											name: "TypeFieldListTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1184, col: 5, offset: 33351},
						run: (*parser).callonTypeFieldList9,
						expr: &litMatcher{
							pos:        position{line: 1184, col: 5, offset: 33351},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTail",
			pos:  position{line: 1186, col: 1, offset: 33375},
			expr: &actionExpr{
				pos: position{line: 1186, col: 21, offset: 33395},
				run: (*parser).callonTypeFieldListTail1,
				expr: &seqExpr{
					pos: position{line: 1186, col: 21, offset: 33395},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1186, col: 21, offset: 33395},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1186, col: 24, offset: 33398},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1186, col: 28, offset: 33402},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1186, col: 31, offset: 33405},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1186, col: 35, offset: 33409},
								name: "TypeField",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeField",
			pos:  position{line: 1188, col: 1, offset: 33440},
			expr: &actionExpr{
				pos: position{line: 1189, col: 5, offset: 33454},
				run: (*parser).callonTypeField1,
				expr: &seqExpr{
					pos: position{line: 1189, col: 5, offset: 33454},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1189, col: 5, offset: 33454},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1189, col: 10, offset: 33459},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1189, col: 20, offset: 33469},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1189, col: 23, offset: 33472},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1189, col: 27, offset: 33476},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1189, col: 30, offset: 33479},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1189, col: 34, offset: 33483},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 1193, col: 1, offset: 33565},
			expr: &choiceExpr{
				pos: position{line: 1194, col: 5, offset: 33579},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1194, col: 5, offset: 33579},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 1195, col: 5, offset: 33598},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 1197, col: 1, offset: 33612},
			expr: &actionExpr{
				pos: position{line: 1197, col: 12, offset: 33623},
				run: (*parser).callonAndToken1,
				expr: &seqExpr{
					pos: position{line: 1197, col: 12, offset: 33623},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1197, col: 13, offset: 33624},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1197, col: 13, offset: 33624},
									val:        "and",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1197, col: 21, offset: 33632},
									val:        "AND",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1197, col: 28, offset: 33639},
							expr: &ruleRefExpr{
								pos:  position{line: 1197, col: 29, offset: 33640},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 1198, col: 1, offset: 33677},
			expr: &actionExpr{
				pos: position{line: 1198, col: 11, offset: 33687},
				run: (*parser).callonOrToken1,
				expr: &seqExpr{
					pos: position{line: 1198, col: 11, offset: 33687},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1198, col: 12, offset: 33688},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1198, col: 12, offset: 33688},
									val:        "or",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1198, col: 19, offset: 33695},
									val:        "OR",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1198, col: 25, offset: 33701},
							expr: &ruleRefExpr{
								pos:  position{line: 1198, col: 26, offset: 33702},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 1199, col: 1, offset: 33738},
			expr: &actionExpr{
				pos: position{line: 1199, col: 11, offset: 33748},
				run: (*parser).callonInToken1,
				expr: &seqExpr{
					pos: position{line: 1199, col: 11, offset: 33748},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1199, col: 11, offset: 33748},
							val:        "in",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1199, col: 16, offset: 33753},
							expr: &ruleRefExpr{
								pos:  position{line: 1199, col: 17, offset: 33754},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 1200, col: 1, offset: 33790},
			expr: &actionExpr{
				pos: position{line: 1200, col: 12, offset: 33801},
				run: (*parser).callonNotToken1,
				expr: &seqExpr{
					pos: position{line: 1200, col: 12, offset: 33801},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1200, col: 13, offset: 33802},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1200, col: 13, offset: 33802},
									val:        "not",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1200, col: 21, offset: 33810},
									val:        "NOT",
									ignoreCase: false,
								},
							},
						},
						&notExpr{
							pos: position{line: 1200, col: 28, offset: 33817},
							expr: &ruleRefExpr{
								pos:  position{line: 1200, col: 29, offset: 33818},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 1201, col: 1, offset: 33855},
			expr: &actionExpr{
				pos: position{line: 1201, col: 11, offset: 33865},
				run: (*parser).callonByToken1,
				expr: &seqExpr{
					pos: position{line: 1201, col: 11, offset: 33865},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1201, col: 11, offset: 33865},
							val:        "by",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1201, col: 16, offset: 33870},
							expr: &ruleRefExpr{
								pos:  position{line: 1201, col: 17, offset: 33871},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 1203, col: 1, offset: 33908},
			expr: &charClassMatcher{
				pos:        position{line: 1203, col: 19, offset: 33926},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 1205, col: 1, offset: 33938},
			expr: &choiceExpr{
				pos: position{line: 1205, col: 18, offset: 33955},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1205, col: 18, offset: 33955},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 1205, col: 36, offset: 33973},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 1207, col: 1, offset: 33980},
			expr: &actionExpr{
				pos: position{line: 1208, col: 5, offset: 33995},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 1208, col: 5, offset: 33995},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 1208, col: 8, offset: 33998},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 1210, col: 1, offset: 34079},
			expr: &choiceExpr{
				pos: position{line: 1211, col: 5, offset: 34098},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1211, col: 5, offset: 34098},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 1211, col: 5, offset: 34098},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1211, col: 5, offset: 34098},
									expr: &seqExpr{
										pos: position{line: 1211, col: 7, offset: 34100},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1211, col: 7, offset: 34100},
												name: "IDGuard",
											},
											&notExpr{
												pos: position{line: 1211, col: 15, offset: 34108},
												expr: &ruleRefExpr{
													pos:  position{line: 1211, col: 16, offset: 34109},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1211, col: 32, offset: 34125},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1211, col: 48, offset: 34141},
									expr: &ruleRefExpr{
										pos:  position{line: 1211, col: 48, offset: 34141},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1212, col: 5, offset: 34193},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 1212, col: 5, offset: 34193},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1213, col: 5, offset: 34232},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 1213, col: 5, offset: 34232},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1213, col: 5, offset: 34232},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1213, col: 10, offset: 34237},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1213, col: 13, offset: 34240},
										name: "IDGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1215, col: 5, offset: 34331},
						run: (*parser).callonIdentifierName19,
						expr: &litMatcher{
							pos:        position{line: 1215, col: 5, offset: 34331},
							val:        "type",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1216, col: 5, offset: 34373},
						run: (*parser).callonIdentifierName21,
						expr: &seqExpr{
							pos: position{line: 1216, col: 5, offset: 34373},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1216, col: 5, offset: 34373},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1216, col: 8, offset: 34376},
										name: "SQLTokenSentinels",
									},
								},
								&andExpr{
									pos: position{line: 1216, col: 26, offset: 34394},
									expr: &seqExpr{
										pos: position{line: 1216, col: 28, offset: 34396},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1216, col: 28, offset: 34396},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1216, col: 31, offset: 34399},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierNames",
			pos:  position{line: 1218, col: 1, offset: 34424},
			expr: &actionExpr{
				pos: position{line: 1219, col: 5, offset: 34444},
				run: (*parser).callonIdentifierNames1,
				expr: &seqExpr{
					pos: position{line: 1219, col: 5, offset: 34444},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1219, col: 5, offset: 34444},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1219, col: 11, offset: 34450},
								name: "IdentifierName",
							},
						},
						&labeledExpr{
							pos:   position{line: 1219, col: 26, offset: 34465},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1219, col: 31, offset: 34470},
								expr: &actionExpr{
									pos: position{line: 1219, col: 32, offset: 34471},
									run: (*parser).callonIdentifierNames7,
									expr: &seqExpr{
										pos: position{line: 1219, col: 32, offset: 34471},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1219, col: 32, offset: 34471},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1219, col: 35, offset: 34474},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1219, col: 39, offset: 34478},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 1219, col: 42, offset: 34481},
												label: "id",
												expr: &ruleRefExpr{
													pos:  position{line: 1219, col: 45, offset: 34484},
													name: "IdentifierName",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IDGuard",
			pos:  position{line: 1223, col: 1, offset: 34599},
			expr: &choiceExpr{
				pos: position{line: 1224, col: 5, offset: 34611},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1224, col: 5, offset: 34611},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1225, col: 5, offset: 34630},
						name: "NullLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1226, col: 5, offset: 34646},
						name: "NaN",
					},
					&ruleRefExpr{
						pos:  position{line: 1227, col: 5, offset: 34654},
						name: "Infinity",
					},
				},
			},
		},
		{
			name: "Time",
			pos:  position{line: 1229, col: 1, offset: 34664},
			expr: &actionExpr{
				pos: position{line: 1230, col: 5, offset: 34673},
				run: (*parser).callonTime1,
				expr: &seqExpr{
					pos: position{line: 1230, col: 5, offset: 34673},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1230, col: 5, offset: 34673},
							name: "FullDate",
						},
						&litMatcher{
							pos:        position{line: 1230, col: 14, offset: 34682},
							val:        "T",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1230, col: 18, offset: 34686},
							name: "FullTime",
						},
					},
				},
			},
		},
		{
			name: "FullDate",
			pos:  position{line: 1234, col: 1, offset: 34806},
			expr: &seqExpr{
				pos: position{line: 1234, col: 12, offset: 34817},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1234, col: 12, offset: 34817},
						name: "D4",
					},
					&litMatcher{
						pos:        position{line: 1234, col: 15, offset: 34820},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1234, col: 19, offset: 34824},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1234, col: 22, offset: 34827},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1234, col: 26, offset: 34831},
						name: "D2",
					},
				},
			},
		},
		{
			name: "D4",
			pos:  position{line: 1236, col: 1, offset: 34835},
			expr: &seqExpr{
				pos: position{line: 1236, col: 6, offset: 34840},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1236, col: 6, offset: 34840},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1236, col: 11, offset: 34845},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1236, col: 16, offset: 34850},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1236, col: 21, offset: 34855},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "D2",
			pos:  position{line: 1237, col: 1, offset: 34861},
			expr: &seqExpr{
				pos: position{line: 1237, col: 6, offset: 34866},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1237, col: 6, offset: 34866},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1237, col: 11, offset: 34871},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "FullTime",
			pos:  position{line: 1239, col: 1, offset: 34878},
			expr: &seqExpr{
				pos: position{line: 1239, col: 12, offset: 34889},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1239, col: 12, offset: 34889},
						name: "PartialTime",
					},
					&ruleRefExpr{
						pos:  position{line: 1239, col: 24, offset: 34901},
						name: "TimeOffset",
					},
				},
			},
		},
		{
			name: "PartialTime",
			pos:  position{line: 1241, col: 1, offset: 34913},
			expr: &seqExpr{
				pos: position{line: 1241, col: 15, offset: 34927},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1241, col: 15, offset: 34927},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1241, col: 18, offset: 34930},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1241, col: 22, offset: 34934},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1241, col: 25, offset: 34937},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1241, col: 29, offset: 34941},
						name: "D2",
					},
					&zeroOrOneExpr{
						pos: position{line: 1241, col: 32, offset: 34944},
						expr: &seqExpr{
							pos: position{line: 1241, col: 33, offset: 34945},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1241, col: 33, offset: 34945},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1241, col: 37, offset: 34949},
									expr: &charClassMatcher{
										pos:        position{line: 1241, col: 37, offset: 34949},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeOffset",
			pos:  position{line: 1243, col: 1, offset: 34959},
			expr: &choiceExpr{
				pos: position{line: 1244, col: 5, offset: 34974},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1244, col: 5, offset: 34974},
						val:        "Z",
						ignoreCase: false,
					},
					&seqExpr{
						pos: position{line: 1245, col: 5, offset: 34982},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 1245, col: 6, offset: 34983},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1245, col: 6, offset: 34983},
										val:        "+",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 1245, col: 12, offset: 34989},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1245, col: 17, offset: 34994},
								name: "D2",
							},
							&litMatcher{
								pos:        position{line: 1245, col: 20, offset: 34997},
								val:        ":",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 1245, col: 24, offset: 35001},
								name: "D2",
							},
							&zeroOrOneExpr{
								pos: position{line: 1245, col: 27, offset: 35004},
								expr: &seqExpr{
									pos: position{line: 1245, col: 28, offset: 35005},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1245, col: 28, offset: 35005},
											val:        ".",
											ignoreCase: false,
										},
										&oneOrMoreExpr{
											pos: position{line: 1245, col: 32, offset: 35009},
											expr: &charClassMatcher{
												pos:        position{line: 1245, col: 32, offset: 35009},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 1247, col: 1, offset: 35019},
			expr: &actionExpr{
				pos: position{line: 1248, col: 5, offset: 35032},
				run: (*parser).callonDuration1,
				expr: &seqExpr{
					pos: position{line: 1248, col: 5, offset: 35032},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1248, col: 5, offset: 35032},
							expr: &litMatcher{
								pos:        position{line: 1248, col: 5, offset: 35032},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1248, col: 10, offset: 35037},
							expr: &seqExpr{
								pos: position{line: 1248, col: 11, offset: 35038},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1248, col: 11, offset: 35038},
										name: "Decimal",
									},
									&ruleRefExpr{
										pos:  position{line: 1248, col: 19, offset: 35046},
										name: "TimeUnit",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Decimal",
			pos:  position{line: 1252, col: 1, offset: 35172},
			expr: &seqExpr{
				pos: position{line: 1252, col: 11, offset: 35182},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1252, col: 11, offset: 35182},
						name: "UInt",
					},
					&zeroOrOneExpr{
						pos: position{line: 1252, col: 16, offset: 35187},
						expr: &seqExpr{
							pos: position{line: 1252, col: 17, offset: 35188},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1252, col: 17, offset: 35188},
									val:        ".",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1252, col: 21, offset: 35192},
									name: "UInt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeUnit",
			pos:  position{line: 1254, col: 1, offset: 35200},
			expr: &choiceExpr{
				pos: position{line: 1255, col: 5, offset: 35213},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1255, col: 5, offset: 35213},
						val:        "ns",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1256, col: 5, offset: 35222},
						val:        "us",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1257, col: 5, offset: 35231},
						val:        "ms",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1258, col: 5, offset: 35240},
						val:        "s",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1259, col: 5, offset: 35248},
						val:        "m",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1260, col: 5, offset: 35256},
						val:        "h",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1261, col: 5, offset: 35264},
						val:        "d",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1262, col: 5, offset: 35272},
						val:        "w",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1263, col: 5, offset: 35280},
						val:        "y",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 1265, col: 1, offset: 35285},
			expr: &actionExpr{
				pos: position{line: 1266, col: 5, offset: 35292},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 1266, col: 5, offset: 35292},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1266, col: 5, offset: 35292},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1266, col: 10, offset: 35297},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1266, col: 14, offset: 35301},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1266, col: 19, offset: 35306},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1266, col: 23, offset: 35310},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1266, col: 28, offset: 35315},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1266, col: 32, offset: 35319},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 1268, col: 1, offset: 35356},
			expr: &actionExpr{
				pos: position{line: 1269, col: 5, offset: 35364},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 1269, col: 5, offset: 35364},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1269, col: 5, offset: 35364},
							expr: &seqExpr{
								pos: position{line: 1269, col: 8, offset: 35367},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1269, col: 8, offset: 35367},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 1269, col: 12, offset: 35371},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 1269, col: 16, offset: 35375},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 1269, col: 20, offset: 35379},
										expr: &choiceExpr{
											pos: position{line: 1269, col: 22, offset: 35381},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1269, col: 22, offset: 35381},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 1269, col: 33, offset: 35392},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1269, col: 39, offset: 35398},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1269, col: 41, offset: 35400},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 1273, col: 1, offset: 35564},
			expr: &choiceExpr{
				pos: position{line: 1274, col: 5, offset: 35582},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1274, col: 5, offset: 35582},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 1274, col: 5, offset: 35582},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1274, col: 5, offset: 35582},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 1274, col: 7, offset: 35584},
										expr: &ruleRefExpr{
											pos:  position{line: 1274, col: 7, offset: 35584},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1274, col: 17, offset: 35594},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1274, col: 19, offset: 35596},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1277, col: 5, offset: 35660},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 1277, col: 5, offset: 35660},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1277, col: 5, offset: 35660},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1277, col: 7, offset: 35662},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1277, col: 11, offset: 35666},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1277, col: 13, offset: 35668},
										expr: &ruleRefExpr{
											pos:  position{line: 1277, col: 13, offset: 35668},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1277, col: 23, offset: 35678},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1277, col: 28, offset: 35683},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1277, col: 30, offset: 35685},
										expr: &ruleRefExpr{
											pos:  position{line: 1277, col: 30, offset: 35685},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1277, col: 40, offset: 35695},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 1277, col: 42, offset: 35697},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1280, col: 5, offset: 35796},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 1280, col: 5, offset: 35796},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1280, col: 5, offset: 35796},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1280, col: 10, offset: 35801},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1280, col: 12, offset: 35803},
										expr: &ruleRefExpr{
											pos:  position{line: 1280, col: 12, offset: 35803},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1280, col: 22, offset: 35813},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1280, col: 24, offset: 35815},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1283, col: 5, offset: 35886},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 1283, col: 5, offset: 35886},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1283, col: 5, offset: 35886},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1283, col: 7, offset: 35888},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1283, col: 11, offset: 35892},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1283, col: 13, offset: 35894},
										expr: &ruleRefExpr{
											pos:  position{line: 1283, col: 13, offset: 35894},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1283, col: 23, offset: 35904},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1286, col: 5, offset: 35972},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 1286, col: 5, offset: 35972},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 1290, col: 1, offset: 36009},
			expr: &choiceExpr{
				pos: position{line: 1291, col: 5, offset: 36021},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1291, col: 5, offset: 36021},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 1292, col: 5, offset: 36028},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 1294, col: 1, offset: 36033},
			expr: &actionExpr{
				pos: position{line: 1294, col: 12, offset: 36044},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 1294, col: 12, offset: 36044},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1294, col: 12, offset: 36044},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1294, col: 16, offset: 36048},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1294, col: 18, offset: 36050},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 1296, col: 1, offset: 36088},
			expr: &actionExpr{
				pos: position{line: 1296, col: 12, offset: 36099},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 1296, col: 12, offset: 36099},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1296, col: 12, offset: 36099},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1296, col: 14, offset: 36101},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 1296, col: 18, offset: 36105},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 1298, col: 1, offset: 36143},
			expr: &actionExpr{
				pos: position{line: 1299, col: 5, offset: 36154},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 1299, col: 5, offset: 36154},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1299, col: 5, offset: 36154},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1299, col: 7, offset: 36156},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 1299, col: 10, offset: 36159},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1299, col: 14, offset: 36163},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1299, col: 16, offset: 36165},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 1303, col: 1, offset: 36238},
			expr: &actionExpr{
				pos: position{line: 1304, col: 5, offset: 36249},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 1304, col: 5, offset: 36249},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1304, col: 5, offset: 36249},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1304, col: 7, offset: 36251},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 1304, col: 11, offset: 36255},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1304, col: 15, offset: 36259},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1304, col: 17, offset: 36261},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 1308, col: 1, offset: 36324},
			expr: &actionExpr{
				pos: position{line: 1309, col: 4, offset: 36332},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 1309, col: 4, offset: 36332},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 1309, col: 6, offset: 36334},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 1311, col: 1, offset: 36374},
			expr: &choiceExpr{
				pos: position{line: 1312, col: 5, offset: 36388},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1312, col: 5, offset: 36388},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 1313, col: 5, offset: 36403},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 1315, col: 1, offset: 36419},
			expr: &actionExpr{
				pos: position{line: 1315, col: 14, offset: 36432},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1315, col: 14, offset: 36432},
					expr: &charClassMatcher{
						pos:        position{line: 1315, col: 14, offset: 36432},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 1317, col: 1, offset: 36471},
			expr: &actionExpr{
				pos: position{line: 1318, col: 5, offset: 36490},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 1318, col: 5, offset: 36490},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1318, col: 5, offset: 36490},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1318, col: 9, offset: 36494},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 1320, col: 1, offset: 36537},
			expr: &choiceExpr{
				pos: position{line: 1321, col: 5, offset: 36553},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1321, col: 5, offset: 36553},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 1321, col: 5, offset: 36553},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1321, col: 5, offset: 36553},
									expr: &litMatcher{
										pos:        position{line: 1321, col: 5, offset: 36553},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1321, col: 10, offset: 36558},
									expr: &charClassMatcher{
										pos:        position{line: 1321, col: 10, offset: 36558},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 1321, col: 17, offset: 36565},
									val:        ".",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1321, col: 21, offset: 36569},
									expr: &charClassMatcher{
										pos:        position{line: 1321, col: 21, offset: 36569},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1321, col: 28, offset: 36576},
									expr: &ruleRefExpr{
										pos:  position{line: 1321, col: 28, offset: 36576},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1324, col: 5, offset: 36635},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 1324, col: 5, offset: 36635},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1324, col: 5, offset: 36635},
									expr: &litMatcher{
										pos:        position{line: 1324, col: 5, offset: 36635},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1324, col: 10, offset: 36640},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1324, col: 14, offset: 36644},
									expr: &charClassMatcher{
										pos:        position{line: 1324, col: 14, offset: 36644},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1324, col: 21, offset: 36651},
									expr: &ruleRefExpr{
										pos:  position{line: 1324, col: 21, offset: 36651},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1327, col: 5, offset: 36710},
						run: (*parser).callonFloatString22,
						expr: &choiceExpr{
							pos: position{line: 1327, col: 7, offset: 36712},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1327, col: 7, offset: 36712},
									name: "NaN",
								},
								&ruleRefExpr{
									pos:  position{line: 1327, col: 13, offset: 36718},
									name: "Infinity",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 1330, col: 1, offset: 36762},
			expr: &seqExpr{
				pos: position{line: 1330, col: 16, offset: 36777},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1330, col: 16, offset: 36777},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 1330, col: 21, offset: 36782},
						expr: &charClassMatcher{
							pos:        position{line: 1330, col: 21, offset: 36782},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1330, col: 27, offset: 36788},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "NaN",
			pos:  position{line: 1332, col: 1, offset: 36800},
			expr: &litMatcher{
				pos:        position{line: 1332, col: 7, offset: 36806},
				val:        "NaN",
				ignoreCase: false,
			},
		},
		{
			name: "Infinity",
			pos:  position{line: 1334, col: 1, offset: 36813},
			expr: &seqExpr{
				pos: position{line: 1334, col: 12, offset: 36824},
				exprs: []interface{}{
					&zeroOrOneExpr{
						pos: position{line: 1334, col: 12, offset: 36824},
						expr: &choiceExpr{
							pos: position{line: 1334, col: 13, offset: 36825},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1334, col: 13, offset: 36825},
									val:        "-",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1334, col: 19, offset: 36831},
									val:        "+",
									ignoreCase: false,
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1334, col: 25, offset: 36837},
						val:        "Inf",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 1336, col: 1, offset: 36844},
			expr: &actionExpr{
				pos: position{line: 1336, col: 7, offset: 36850},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1336, col: 7, offset: 36850},
					expr: &ruleRefExpr{
						pos:  position{line: 1336, col: 7, offset: 36850},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 1338, col: 1, offset: 36892},
			expr: &charClassMatcher{
				pos:        position{line: 1338, col: 12, offset: 36903},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1340, col: 1, offset: 36916},
			expr: &choiceExpr{
				pos: position{line: 1341, col: 5, offset: 36933},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1341, col: 5, offset: 36933},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 1341, col: 5, offset: 36933},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1341, col: 5, offset: 36933},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1341, col: 9, offset: 36937},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1341, col: 11, offset: 36939},
										expr: &ruleRefExpr{
											pos:  position{line: 1341, col: 11, offset: 36939},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1341, col: 29, offset: 36957},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1342, col: 5, offset: 36994},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 1342, col: 5, offset: 36994},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1342, col: 5, offset: 36994},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1342, col: 9, offset: 36998},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1342, col: 11, offset: 37000},
										expr: &ruleRefExpr{
											pos:  position{line: 1342, col: 11, offset: 37000},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1342, col: 29, offset: 37018},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 1344, col: 1, offset: 37052},
			expr: &choiceExpr{
				pos: position{line: 1345, col: 5, offset: 37073},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1345, col: 5, offset: 37073},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1345, col: 5, offset: 37073},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1345, col: 5, offset: 37073},
									expr: &choiceExpr{
										pos: position{line: 1345, col: 7, offset: 37075},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1345, col: 7, offset: 37075},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1345, col: 13, offset: 37081},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1345, col: 26, offset: 37094,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1346, col: 5, offset: 37131},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1346, col: 5, offset: 37131},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1346, col: 5, offset: 37131},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1346, col: 10, offset: 37136},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1346, col: 12, offset: 37138},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 1348, col: 1, offset: 37172},
			expr: &actionExpr{
				pos: position{line: 1349, col: 5, offset: 37184},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 1349, col: 5, offset: 37184},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1349, col: 5, offset: 37184},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1349, col: 10, offset: 37189},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1349, col: 23, offset: 37202},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1349, col: 28, offset: 37207},
								expr: &ruleRefExpr{
									pos:  position{line: 1349, col: 28, offset: 37207},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 1351, col: 1, offset: 37269},
			expr: &choiceExpr{
				pos: position{line: 1352, col: 5, offset: 37286},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1352, col: 5, offset: 37286},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1353, col: 5, offset: 37303},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordChars",
			pos:  position{line: 1355, col: 1, offset: 37315},
			expr: &actionExpr{
				pos: position{line: 1355, col: 16, offset: 37330},
				run: (*parser).callonKeyWordChars1,
				expr: &charClassMatcher{
					pos:        position{line: 1355, col: 16, offset: 37330},
					val:        "[a-zA-Z_.:/%#@~]",
					chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
					ranges:     []rune{'a', 'z', 'A', 'Z'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 1357, col: 1, offset: 37379},
			expr: &choiceExpr{
				pos: position{line: 1358, col: 5, offset: 37395},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1358, col: 5, offset: 37395},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 1359, col: 5, offset: 37412},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 1361, col: 1, offset: 37419},
			expr: &actionExpr{
				pos: position{line: 1361, col: 14, offset: 37432},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 1361, col: 14, offset: 37432},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1361, col: 14, offset: 37432},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1361, col: 19, offset: 37437},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1361, col: 22, offset: 37440},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1361, col: 22, offset: 37440},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1361, col: 38, offset: 37456},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobPattern",
			pos:  position{line: 1363, col: 1, offset: 37492},
			expr: &actionExpr{
				pos: position{line: 1364, col: 5, offset: 37508},
				run: (*parser).callonGlobPattern1,
				expr: &seqExpr{
					pos: position{line: 1364, col: 5, offset: 37508},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1364, col: 5, offset: 37508},
							expr: &ruleRefExpr{
								pos:  position{line: 1364, col: 6, offset: 37509},
								name: "GlobProperStart",
							},
						},
						&andExpr{
							pos: position{line: 1364, col: 22, offset: 37525},
							expr: &ruleRefExpr{
								pos:  position{line: 1364, col: 23, offset: 37526},
								name: "GlobHasStar",
							},
						},
						&labeledExpr{
							pos:   position{line: 1364, col: 35, offset: 37538},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1364, col: 40, offset: 37543},
								name: "GlobStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1364, col: 50, offset: 37553},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1364, col: 55, offset: 37558},
								expr: &ruleRefExpr{
									pos:  position{line: 1364, col: 55, offset: 37558},
									name: "GlobRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobProperStart",
			pos:  position{line: 1368, col: 1, offset: 37627},
			expr: &choiceExpr{
				pos: position{line: 1368, col: 19, offset: 37645},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1368, col: 19, offset: 37645},
						name: "KeyWordStart",
					},
					&seqExpr{
						pos: position{line: 1368, col: 34, offset: 37660},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1368, col: 34, offset: 37660},
								expr: &litMatcher{
									pos:        position{line: 1368, col: 34, offset: 37660},
									val:        "*",
									ignoreCase: false,
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1368, col: 39, offset: 37665},
								name: "KeyWordRest",
							},
						},
					},
				},
			},
		},
		{
			name: "GlobHasStar",
			pos:  position{line: 1369, col: 1, offset: 37677},
			expr: &seqExpr{
				pos: position{line: 1369, col: 15, offset: 37691},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1369, col: 15, offset: 37691},
						expr: &ruleRefExpr{
							pos:  position{line: 1369, col: 15, offset: 37691},
							name: "KeyWordRest",
						},
					},
					&litMatcher{
						pos:        position{line: 1369, col: 28, offset: 37704},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "GlobStart",
			pos:  position{line: 1371, col: 1, offset: 37709},
			expr: &choiceExpr{
				pos: position{line: 1372, col: 5, offset: 37723},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1372, col: 5, offset: 37723},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1373, col: 5, offset: 37740},
						name: "GlobEsc",
					},
					&actionExpr{
						pos: position{line: 1374, col: 5, offset: 37752},
						run: (*parser).callonGlobStart4,
						expr: &litMatcher{
							pos:        position{line: 1374, col: 5, offset: 37752},
							val:        "*",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GlobRest",
			pos:  position{line: 1376, col: 1, offset: 37776},
			expr: &choiceExpr{
				pos: position{line: 1377, col: 5, offset: 37789},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1377, col: 5, offset: 37789},
						name: "GlobStart",
					},
					&charClassMatcher{
						pos:        position{line: 1378, col: 5, offset: 37803},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "GlobEsc",
			pos:  position{line: 1380, col: 1, offset: 37810},
			expr: &actionExpr{
				pos: position{line: 1380, col: 11, offset: 37820},
				run: (*parser).callonGlobEsc1,
				expr: &seqExpr{
					pos: position{line: 1380, col: 11, offset: 37820},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1380, col: 11, offset: 37820},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1380, col: 16, offset: 37825},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1380, col: 19, offset: 37828},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1380, col: 19, offset: 37828},
										name: "GlobEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1380, col: 32, offset: 37841},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobEscape",
			pos:  position{line: 1382, col: 1, offset: 37877},
			expr: &choiceExpr{
				pos: position{line: 1383, col: 5, offset: 37892},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1383, col: 5, offset: 37892},
						run: (*parser).callonGlobEscape2,
						expr: &litMatcher{
							pos:        position{line: 1383, col: 5, offset: 37892},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1384, col: 5, offset: 37920},
						run: (*parser).callonGlobEscape4,
						expr: &litMatcher{
							pos:        position{line: 1384, col: 5, offset: 37920},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1385, col: 5, offset: 37950},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 1388, col: 1, offset: 37957},
			expr: &choiceExpr{
				pos: position{line: 1389, col: 5, offset: 37978},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1389, col: 5, offset: 37978},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1389, col: 5, offset: 37978},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1389, col: 5, offset: 37978},
									expr: &choiceExpr{
										pos: position{line: 1389, col: 7, offset: 37980},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1389, col: 7, offset: 37980},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1389, col: 13, offset: 37986},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1389, col: 26, offset: 37999,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1390, col: 5, offset: 38036},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1390, col: 5, offset: 38036},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1390, col: 5, offset: 38036},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1390, col: 10, offset: 38041},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1390, col: 12, offset: 38043},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 1392, col: 1, offset: 38077},
			expr: &choiceExpr{
				pos: position{line: 1393, col: 5, offset: 38096},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1393, col: 5, offset: 38096},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 1394, col: 5, offset: 38117},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 1396, col: 1, offset: 38132},
			expr: &choiceExpr{
				pos: position{line: 1397, col: 5, offset: 38153},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1397, col: 5, offset: 38153},
						val:        "'",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1398, col: 5, offset: 38161},
						run: (*parser).callonSingleCharEscape3,
						expr: &litMatcher{
							pos:        position{line: 1398, col: 5, offset: 38161},
							val:        "\"",
							ignoreCase: false,
						},
					},
					&litMatcher{
						pos:        position{line: 1399, col: 5, offset: 38201},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1400, col: 5, offset: 38210},
						run: (*parser).callonSingleCharEscape6,
						expr: &litMatcher{
							pos:        position{line: 1400, col: 5, offset: 38210},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1401, col: 5, offset: 38239},
						run: (*parser).callonSingleCharEscape8,
						expr: &litMatcher{
							pos:        position{line: 1401, col: 5, offset: 38239},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1402, col: 5, offset: 38268},
						run: (*parser).callonSingleCharEscape10,
						expr: &litMatcher{
							pos:        position{line: 1402, col: 5, offset: 38268},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1403, col: 5, offset: 38297},
						run: (*parser).callonSingleCharEscape12,
						expr: &litMatcher{
							pos:        position{line: 1403, col: 5, offset: 38297},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1404, col: 5, offset: 38326},
						run: (*parser).callonSingleCharEscape14,
						expr: &litMatcher{
							pos:        position{line: 1404, col: 5, offset: 38326},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1405, col: 5, offset: 38355},
						run: (*parser).callonSingleCharEscape16,
						expr: &litMatcher{
							pos:        position{line: 1405, col: 5, offset: 38355},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 1407, col: 1, offset: 38381},
			expr: &choiceExpr{
				pos: position{line: 1408, col: 5, offset: 38399},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1408, col: 5, offset: 38399},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 1408, col: 5, offset: 38399},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1409, col: 5, offset: 38427},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 1409, col: 5, offset: 38427},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1410, col: 5, offset: 38455},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 1412, col: 1, offset: 38461},
			expr: &choiceExpr{
				pos: position{line: 1413, col: 5, offset: 38479},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1413, col: 5, offset: 38479},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 1413, col: 5, offset: 38479},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1413, col: 5, offset: 38479},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1413, col: 9, offset: 38483},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1413, col: 16, offset: 38490},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1413, col: 16, offset: 38490},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1413, col: 25, offset: 38499},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1413, col: 34, offset: 38508},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1413, col: 43, offset: 38517},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1416, col: 5, offset: 38580},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 1416, col: 5, offset: 38580},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1416, col: 5, offset: 38580},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1416, col: 9, offset: 38584},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1416, col: 13, offset: 38588},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1416, col: 20, offset: 38595},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1416, col: 20, offset: 38595},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 1416, col: 29, offset: 38604},
												expr: &ruleRefExpr{
													pos:  position{line: 1416, col: 29, offset: 38604},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1416, col: 39, offset: 38614},
												expr: &ruleRefExpr{
													pos:  position{line: 1416, col: 39, offset: 38614},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1416, col: 49, offset: 38624},
												expr: &ruleRefExpr{
													pos:  position{line: 1416, col: 49, offset: 38624},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1416, col: 59, offset: 38634},
												expr: &ruleRefExpr{
													pos:  position{line: 1416, col: 59, offset: 38634},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1416, col: 69, offset: 38644},
												expr: &ruleRefExpr{
													pos:  position{line: 1416, col: 69, offset: 38644},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1416, col: 80, offset: 38655},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpPattern",
			pos:  position{line: 1420, col: 1, offset: 38709},
			expr: &actionExpr{
				pos: position{line: 1421, col: 5, offset: 38727},
				run: (*parser).callonRegexpPattern1,
				expr: &seqExpr{
					pos: position{line: 1421, col: 5, offset: 38727},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1421, col: 5, offset: 38727},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1421, col: 9, offset: 38731},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1421, col: 14, offset: 38736},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 1421, col: 25, offset: 38747},
							val:        "/",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1421, col: 29, offset: 38751},
							expr: &ruleRefExpr{
								pos:  position{line: 1421, col: 30, offset: 38752},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 1423, col: 1, offset: 38787},
			expr: &actionExpr{
				pos: position{line: 1424, col: 5, offset: 38802},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1424, col: 5, offset: 38802},
					expr: &choiceExpr{
						pos: position{line: 1424, col: 6, offset: 38803},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 1424, col: 6, offset: 38803},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&seqExpr{
								pos: position{line: 1424, col: 15, offset: 38812},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1424, col: 15, offset: 38812},
										val:        "\\",
										ignoreCase: false,
									},
									&anyMatcher{
										line: 1424, col: 20, offset: 38817,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 1426, col: 1, offset: 38853},
			expr: &charClassMatcher{
				pos:        position{line: 1427, col: 5, offset: 38869},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 1429, col: 1, offset: 38884},
			expr: &oneOrMoreExpr{
				pos: position{line: 1429, col: 6, offset: 38889},
				expr: &ruleRefExpr{
					pos:  position{line: 1429, col: 6, offset: 38889},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1431, col: 1, offset: 38900},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1431, col: 6, offset: 38905},
				expr: &ruleRefExpr{
					pos:  position{line: 1431, col: 6, offset: 38905},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 1433, col: 1, offset: 38916},
			expr: &choiceExpr{
				pos: position{line: 1434, col: 5, offset: 38929},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1434, col: 5, offset: 38929},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 1435, col: 5, offset: 38944},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 1436, col: 5, offset: 38963},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 1438, col: 1, offset: 38972},
			expr: &anyMatcher{
				line: 1439, col: 5, offset: 38992,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 1441, col: 1, offset: 38995},
			expr: &choiceExpr{
				pos: position{line: 1442, col: 5, offset: 39023},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1442, col: 5, offset: 39023},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1443, col: 5, offset: 39032},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1444, col: 5, offset: 39041},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1445, col: 5, offset: 39050},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1446, col: 5, offset: 39058},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1447, col: 5, offset: 39071},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 1449, col: 1, offset: 39081},
			expr: &charClassMatcher{
				pos:        position{line: 1450, col: 5, offset: 39100},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 1456, col: 1, offset: 39430},
			expr: &ruleRefExpr{
				pos:  position{line: 1459, col: 5, offset: 39501},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1461, col: 1, offset: 39520},
			expr: &seqExpr{
				pos: position{line: 1462, col: 5, offset: 39541},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1462, col: 5, offset: 39541},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1462, col: 10, offset: 39546},
						expr: &seqExpr{
							pos: position{line: 1462, col: 11, offset: 39547},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1462, col: 11, offset: 39547},
									expr: &litMatcher{
										pos:        position{line: 1462, col: 12, offset: 39548},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1462, col: 17, offset: 39553},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1462, col: 35, offset: 39571},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1464, col: 1, offset: 39577},
			expr: &seqExpr{
				pos: position{line: 1465, col: 5, offset: 39599},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1465, col: 5, offset: 39599},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1465, col: 10, offset: 39604},
						expr: &seqExpr{
							pos: position{line: 1465, col: 11, offset: 39605},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1465, col: 11, offset: 39605},
									expr: &ruleRefExpr{
										pos:  position{line: 1465, col: 12, offset: 39606},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1465, col: 27, offset: 39621},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1467, col: 1, offset: 39640},
			expr: &seqExpr{
				pos: position{line: 1467, col: 7, offset: 39646},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1467, col: 7, offset: 39646},
						expr: &ruleRefExpr{
							pos:  position{line: 1467, col: 7, offset: 39646},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1467, col: 19, offset: 39658},
						name: "LineTerminator",
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 1469, col: 1, offset: 39674},
			expr: &choiceExpr{
				pos: position{line: 1469, col: 7, offset: 39680},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1469, col: 7, offset: 39680},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 1469, col: 11, offset: 39684},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1471, col: 1, offset: 39689},
			expr: &notExpr{
				pos: position{line: 1471, col: 7, offset: 39695},
				expr: &anyMatcher{
					line: 1471, col: 8, offset: 39696,
				},
			},
		},
		{
			name: "EOKW",
			pos:  position{line: 1473, col: 1, offset: 39699},
			expr: &notExpr{
				pos: position{line: 1473, col: 8, offset: 39706},
				expr: &ruleRefExpr{
					pos:  position{line: 1473, col: 9, offset: 39707},
					name: "KeyWordChars",
				},
			},
		},
	},
}

func (c *current) onstart1(ast interface{}) (interface{}, error) {
	return ast, nil
}

func (p *parser) callonstart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart1(stack["ast"])
}

func (c *current) onSequential1(decls, first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "ops": append([]interface{}{first}, (rest.([]interface{}))...), "decls": decls}, nil

}

func (p *parser) callonSequential1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential1(stack["decls"], stack["first"], stack["rest"])
}

func (c *current) onSequentialTail1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonSequentialTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequentialTail1(stack["p"])
}

func (c *current) onDecls4() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonDecls4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDecls4()
}

func (c *current) onDecl1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonDecl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDecl1(stack["v"])
}

func (c *current) onConstDecl2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ConstDecl", "name": id, "expr": expr}, nil

}

func (p *parser) callonConstDecl2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDecl2(stack["id"], stack["expr"])
}

func (c *current) onConstDecl13(id, typ interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "ConstDecl",

		"name": id,

		"expr": map[string]interface{}{"kind": "TypeValue", "value": map[string]interface{}{"kind": "TypeDef", "name": id, "type": typ}}}, nil

}

func (p *parser) callonConstDecl13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDecl13(stack["id"], stack["typ"])
}

func (c *current) onFuncDecl1(id, params, expr interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "FuncDecl",

		"name": id,

		"params": params,

		"expr": expr}, nil

}

func (p *parser) callonFuncDecl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncDecl1(stack["id"], stack["params"], stack["expr"])
}

func (c *current) onOpDecl1(name, params, scope interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "OpDecl",

		"name": name,

		"params": params,

		"scope": scope}, nil

}

func (p *parser) callonOpDecl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpDecl1(stack["name"], stack["params"], stack["scope"])
}

func (c *current) onOperation2(ops interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Parallel", "ops": ops}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["ops"])
}

func (c *current) onOperation12(expr, cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": expr, "cases": cases}, nil

}

func (p *parser) callonOperation12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation12(stack["expr"], stack["cases"])
}

func (c *current) onOperation25(cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": nil, "cases": cases}, nil

}

func (p *parser) callonOperation25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation25(stack["cases"])
}

func (c *current) onOperation35(trunks interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": trunks}, nil

}

func (p *parser) callonOperation35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation35(stack["trunks"])
}

func (c *current) onOperation47(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation47(stack["a"])
}

func (c *current) onOperation53(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation53(stack["a"])
}

func (c *current) onOperation63(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Search", "expr": expr}, nil

}

func (p *parser) callonOperation63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation63(stack["expr"])
}

func (c *current) onOperation69(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation69(stack["expr"])
}

func (c *current) onOperation72(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation72(stack["expr"])
}

func (c *current) onOperation75(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpExpr", "expr": expr}, nil

}

func (p *parser) callonOperation75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation75(stack["expr"])
}

func (c *current) onLeg1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLeg1(stack["s"])
}

func (c *current) onSwitchLeg1(expr, op interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": expr, "op": op}, nil

}

func (p *parser) callonSwitchLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchLeg1(stack["expr"], stack["op"])
}

func (c *current) onCase2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonCase2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase2(stack["expr"])
}

func (c *current) onCase8() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonCase8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase8()
}

func (c *current) onFromLeg1(source, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Trunk", "source": source, "seq": nil}
	if opt != nil {
		m["seq"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonFromLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromLeg1(stack["source"], stack["opt"])
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor13(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor13(stack["expr"])
}

func (c *current) onSearchExpr4(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Term", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonSearchExpr4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr4(stack["v"])
}

func (c *current) onSearchExpr15() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil

}

func (p *parser) callonSearchExpr15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr15()
}

func (c *current) onSearchPredicate2(lhs, op, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": op, "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonSearchPredicate2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPredicate2(stack["lhs"], stack["op"], stack["rhs"])
}

func (c *current) onSearchPredicate12(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchPredicate12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPredicate12(stack["first"], stack["rest"])
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onGlob1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Glob", "pattern": pattern}, nil

}

func (p *parser) callonGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlob1(stack["pattern"])
}

func (c *current) onRegexp1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Regexp", "pattern": pattern}, nil

}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["pattern"])
}

func (c *current) onAggregation2(keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Summarize", "keys": keys, "aggs": nil, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["keys"], stack["limit"])
}

func (c *current) onAggregation10(aggs, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"kind": "Summarize", "keys": nil, "aggs": aggs, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation10(stack["aggs"], stack["keys"], stack["limit"])
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAggAssignment2(lval, agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lval, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment2(stack["lval"], stack["agg"])
}

func (c *current) onAggAssignment11(agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment11(stack["agg"])
}

func (c *current) onAgg1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"kind": "Agg", "name": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonAgg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAgg1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onAggAssignments1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonAggAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssertOp6(e interface{}) (interface{}, error) {
	return []interface{}{e, string(c.text)}, nil
}

func (p *parser) callonAssertOp6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssertOp6(stack["e"])
}

func (c *current) onAssertOp1(expr interface{}) (interface{}, error) {
	// 'assert EXPR' is equivalent to
	// 'yield EXPR ? this : error({message: "assertion failed", "expr": EXPR_text, "on": this}'
	// where EXPR_text is the literal text of EXPR.
	return map[string]interface{}{"kind": "Yield", "exprs": []interface{}{map[string]interface{}{

		"kind": "Conditional",

		"cond": expr.([]interface{})[0],

		"then": map[string]interface{}{"kind": "ID", "name": "this"},

		"else": map[string]interface{}{

			"kind": "Call",

			"name": "error",

			"args": []interface{}{map[string]interface{}{"kind": "RecordExpr", "elems": []interface{}{

				map[string]interface{}{"kind": "Field", "name": "message", "value": map[string]interface{}{

					"kind": "Primitive", "text": "assertion failed", "type": "string"}},

				map[string]interface{}{"kind": "Field", "name": "expr", "value": map[string]interface{}{

					"kind": "Primitive", "text": expr.([]interface{})[1], "type": "string"}},

				map[string]interface{}{"kind": "Field", "name": "on", "value": map[string]interface{}{

					"kind": "ID", "name": "this"}}}}},

			"where": nil}}}}, nil

}

func (p *parser) callonAssertOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssertOp1(stack["expr"])
}

func (c *current) onSortOp10(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortOp10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortOp10(stack["l"])
}

func (c *current) onSortOp1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var op = map[string]interface{}{"kind": "Sort", "args": list, "order": "asc", "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		op["order"] = "desc"
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			op["nullsfirst"] = true
		}
	}
	return op, nil

}

func (p *parser) callonSortOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortOp1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopOp8(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopOp8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp8(stack["n"])
}

func (c *current) onTopOp20(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopOp20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp20(stack["f"])
}

func (c *current) onTopOp1(limit, flush, fields interface{}) (interface{}, error) {
	var op = map[string]interface{}{"kind": "Top", "limit": 0, "args": nil, "flush": false}
	if limit != nil {
		op["limit"] = limit
	}
	if fields != nil {
		op["args"] = fields
	}
	if flush != nil {
		op["flush"] = true
	}
	return op, nil

}

func (p *parser) callonTopOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopOp1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cut", "args": args}, nil

}

func (p *parser) callonCutOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutOp1(stack["args"])
}

func (c *current) onDropOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Drop", "args": args}, nil

}

func (p *parser) callonDropOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropOp1(stack["args"])
}

func (c *current) onHeadOp2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": count}, nil
}

func (p *parser) callonHeadOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOp2(stack["count"])
}

func (c *current) onHeadOp8() (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": 1}, nil
}

func (p *parser) callonHeadOp8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadOp8()
}

func (c *current) onTailOp2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": count}, nil
}

func (p *parser) callonTailOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailOp2(stack["count"])
}

func (c *current) onTailOp8() (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": 1}, nil
}

func (p *parser) callonTailOp8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailOp8()
}

func (c *current) onWhereOp1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Where", "expr": expr}, nil

}

func (p *parser) callonWhereOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereOp1(stack["expr"])
}

func (c *current) onUniqOp2() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": true}, nil

}

func (p *parser) callonUniqOp2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqOp2()
}

func (c *current) onUniqOp7() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": false}, nil

}

func (p *parser) callonUniqOp7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqOp7()
}

func (c *current) onPutOp1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Put", "args": args}, nil

}

func (p *parser) callonPutOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutOp1(stack["args"])
}

func (c *current) onRenameOp9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameOp9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameOp9(stack["cl"])
}

func (c *current) onRenameOp1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Rename", "args": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameOp1(stack["first"], stack["rest"])
}

func (c *current) onFuseOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Fuse"}, nil

}

func (p *parser) callonFuseOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseOp1()
}

func (c *current) onShapeOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Shape"}, nil

}

func (p *parser) callonShapeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShapeOp1()
}

func (c *current) onJoinOp1(style, key, optKey, optArgs interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Join", "style": style, "left_key": key, "right_key": key, "args": nil}
	if optKey != nil {
		m["right_key"] = optKey.([]interface{})[3]
	}
	if optArgs != nil {
		m["args"] = optArgs.([]interface{})[1]
	}
	return m, nil

}

func (p *parser) callonJoinOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinOp1(stack["style"], stack["key"], stack["optKey"], stack["optArgs"])
}

func (c *current) onJoinStyle2() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle2()
}

func (c *current) onJoinStyle6() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle6()
}

func (c *current) onJoinStyle10() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle10()
}

func (c *current) onJoinStyle14() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonJoinStyle14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle14()
}

func (c *current) onJoinStyle18() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle18()
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onSampleOp1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "decls": []interface{}{}, "ops": []interface{}{

		map[string]interface{}{"kind": "Summarize",

			"keys": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "shape"},

				"rhs": map[string]interface{}{"kind": "Call", "name": "typeof",

					"args": []interface{}{e},

					"where": nil}}},

			"aggs": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "sample"},

				"rhs": map[string]interface{}{"kind": "Agg",

					"name": "any",

					"expr": e,

					"where": nil}}},

			"limit": 0},

		map[string]interface{}{"kind": "Yield",

			"exprs": []interface{}{

				map[string]interface{}{"kind": "ID", "name": "sample"}}}}}, nil

}

func (p *parser) callonSampleOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleOp1(stack["e"])
}

func (c *current) onOpAssignment1(a interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpAssignment", "assignments": a}, nil

}

func (p *parser) callonOpAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpAssignment1(stack["a"])
}

func (c *current) onSampleExpr2(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonSampleExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr2(stack["lval"])
}

func (c *current) onSampleExpr7() (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": "this"}, nil
}

func (p *parser) callonSampleExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr7()
}

func (c *current) onFromOp1(source interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": []interface{}{map[string]interface{}{"kind": "Trunk", "source": source}}}, nil

}

func (p *parser) callonFromOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromOp1(stack["source"])
}

func (c *current) onFile1(path, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "File", "path": path, "format": format, "layout": layout}, nil

}

func (p *parser) callonFile1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile1(stack["path"], stack["format"], stack["layout"])
}

func (c *current) onFrom1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonFrom1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrom1(stack["body"])
}

func (c *current) onPool1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonPool1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPool1(stack["body"])
}

func (c *current) onPoolBody1(spec, at interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pool", "spec": spec, "at": at}, nil

}

func (p *parser) callonPoolBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBody1(stack["spec"], stack["at"])
}

func (c *current) onGet1(url, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "HTTP", "url": url, "format": format, "layout": layout}, nil

}

func (p *parser) callonGet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGet1(stack["url"], stack["format"], stack["layout"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onPath2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonPath2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath2(stack["v"])
}

func (c *current) onPath5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPath5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath5()
}

func (c *current) onPoolAt1(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonPoolAt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolAt1(stack["id"])
}

func (c *current) onKSUID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKSUID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKSUID1()
}

func (c *current) onPoolSpec2(pool, commit, meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": pool, "commit": commit, "meta": meta}, nil

}

func (p *parser) callonPoolSpec2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec2(stack["pool"], stack["commit"], stack["meta"])
}

func (c *current) onPoolSpec12(meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": nil, "commit": nil, "meta": meta}, nil

}

func (p *parser) callonPoolSpec12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec12(stack["meta"])
}

func (c *current) onPoolCommit1(commit interface{}) (interface{}, error) {
	return commit, nil
}

func (p *parser) callonPoolCommit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolCommit1(stack["commit"])
}

func (c *current) onPoolMeta1(meta interface{}) (interface{}, error) {
	return meta, nil
}

func (p *parser) callonPoolMeta1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolMeta1(stack["meta"])
}

func (c *current) onPoolName3() (interface{}, error) {
	return map[string]interface{}{"kind": "Glob", "pattern": "*"}, nil
}

func (p *parser) callonPoolName3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName3()
}

func (c *current) onPoolName9(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "String", "text": name}, nil
}

func (p *parser) callonPoolName9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolName9(stack["name"])
}

func (c *current) onPoolIdentifier1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPoolIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolIdentifier1()
}

func (c *current) onLayoutArg1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Layout", "keys": keys, "order": order}, nil

}

func (p *parser) callonLayoutArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLayoutArg1(stack["keys"], stack["order"])
}

func (c *current) onFormatArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonFormatArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArg1(stack["val"])
}

func (c *current) onOrderSuffix2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix2()
}

func (c *current) onOrderSuffix4() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderSuffix4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix4()
}

func (c *current) onOrderSuffix6() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix6()
}

func (c *current) onPassOp1() (interface{}, error) {
	return map[string]interface{}{"kind": "Pass"}, nil

}

func (p *parser) callonPassOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassOp1()
}

func (c *current) onExplodeOp1(args, typ, as interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Explode", "args": args, "as": as, "type": typ}, nil

}

func (p *parser) callonExplodeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplodeOp1(stack["args"], stack["typ"], stack["as"])
}

func (c *current) onMergeOp1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Merge", "expr": expr}, nil

}

func (p *parser) callonMergeOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMergeOp1(stack["expr"])
}

func (c *current) onOverOp1(exprs, locals, scope interface{}) (interface{}, error) {
	var over = map[string]interface{}{"kind": "Over", "exprs": exprs, "scope": scope}
	if locals != nil {
		return map[string]interface{}{"kind": "Let", "locals": locals, "over": over}, nil
	}
	return over, nil

}

func (p *parser) callonOverOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverOp1(stack["exprs"], stack["locals"], stack["scope"])
}

func (c *current) onScope1(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonScope1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope1(stack["seq"])
}

func (c *current) onLocals10(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonLocals10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocals10(stack["a"])
}

func (c *current) onLocals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLocals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocals1(stack["first"], stack["rest"])
}

func (c *current) onLocalsAssignment1(name, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"name": name, "expr": map[string]interface{}{"kind": "ID", "name": name}}
	if opt != nil {
		m["expr"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonLocalsAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocalsAssignment1(stack["name"], stack["opt"])
}

func (c *current) onYieldOp1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Yield", "exprs": exprs}, nil

}

func (p *parser) callonYieldOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYieldOp1(stack["exprs"])
}

func (c *current) onTypeArg1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeArg1(stack["typ"])
}

func (c *current) onAsArg1(lhs interface{}) (interface{}, error) {
	return lhs, nil
}

func (p *parser) callonAsArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsArg1(stack["lhs"])
}

func (c *current) onLvals7(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonLvals7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals7(stack["lval"])
}

func (c *current) onLvals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLvals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals1(stack["first"], stack["rest"])
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignments7(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments7(stack["a"])
}

func (c *current) onAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr1(cond, opt interface{}) (interface{}, error) {
	if opt != nil {
		var Then = opt.([]interface{})[3]
		var Else = opt.([]interface{})[7]
		return map[string]interface{}{"kind": "Conditional", "cond": cond, "then": Then, "else": Else}, nil
	}
	return cond, nil

}

func (p *parser) callonConditionalExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr1(stack["cond"], stack["opt"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onComparisonExpr15() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparisonExpr15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr15()
}

func (c *current) onComparisonExpr1(lhs, opAndRHS interface{}) (interface{}, error) {
	if opAndRHS == nil {
		return lhs, nil
	}
	var op = opAndRHS.([]interface{})[1]
	var rhs = opAndRHS.([]interface{})[3]
	return map[string]interface{}{"kind": "BinaryExpr", "op": op, "lhs": lhs, "rhs": rhs}, nil

}

func (p *parser) callonComparisonExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparisonExpr1(stack["lhs"], stack["opAndRHS"])
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onNegationExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "-", "operand": e}, nil

}

func (p *parser) callonNegationExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNegationExpr2(stack["e"])
}

func (c *current) onFuncExpr2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr2(stack["first"], stack["rest"])
}

func (c *current) onFuncExpr9(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr9(stack["first"], stack["rest"])
}

func (c *current) onCast1(typ, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": expr, "type": typ}, nil

}

func (p *parser) callonCast1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCast1(stack["typ"], stack["expr"])
}

func (c *current) onFunction3(arg0Text, arg1, where interface{}) (interface{}, error) {
	var arg0 = map[string]interface{}{"kind": "Primitive", "type": "string", "text": arg0Text}
	return map[string]interface{}{"kind": "Call", "name": "regexp", "args": []interface{}{arg0, arg1}, "where": where}, nil

}

func (p *parser) callonFunction3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction3(stack["arg0Text"], stack["arg1"], stack["where"])
}

func (c *current) onFunction21(fn, args, where interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": fn, "args": args, "where": where}, nil

}

func (p *parser) callonFunction21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction21(stack["fn"], stack["args"], stack["where"])
}

func (c *current) onFunctionArgs2(o interface{}) (interface{}, error) {
	return []interface{}{o}, nil
}

func (p *parser) callonFunctionArgs2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunctionArgs2(stack["o"])
}

func (c *current) onGrep1(pattern, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Grep", "pattern": pattern, "expr": map[string]interface{}{"kind": "ID", "name": "this"}}
	if opt != nil {
		m["expr"] = opt.([]interface{})[2]
	}
	return m, nil

}

func (p *parser) callonGrep1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGrep1(stack["pattern"], stack["opt"])
}

func (c *current) onPattern4(s interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "String", "text": s}, nil

}

func (p *parser) callonPattern4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPattern4(stack["s"])
}

func (c *current) onOptionalExprs3() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonOptionalExprs3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalExprs3()
}

func (c *current) onExprs7(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonExprs7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs7(stack["e"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr1(stack["first"], stack["rest"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref14(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": nil, "rhs": to}}, nil

}

func (p *parser) callonDeref14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref14(stack["to"])
}

func (c *current) onDeref23(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref23(stack["expr"])
}

func (c *current) onDeref29(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref29(stack["id"])
}

func (c *current) onPrimary7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary7(stack["expr"])
}

func (c *current) onPrimary15(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary15(stack["expr"])
}

func (c *current) onOverExpr1(exprs, locals, scope interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OverExpr", "locals": locals, "exprs": exprs, "scope": scope}, nil

}

func (p *parser) callonOverExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverExpr1(stack["exprs"], stack["locals"], stack["scope"])
}

func (c *current) onRecord1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RecordExpr", "elems": elems}, nil

}

func (p *parser) callonRecord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecord1(stack["elems"])
}

func (c *current) onRecordElems2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonRecordElems2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems2(stack["first"], stack["rest"])
}

func (c *current) onRecordElems9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonRecordElems9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElems9()
}

func (c *current) onRecordElemTail1(elem interface{}) (interface{}, error) {
	return elem, nil
}

func (p *parser) callonRecordElemTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordElemTail1(stack["elem"])
}

func (c *current) onSpread1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Spread", "expr": expr}, nil

}

func (p *parser) callonSpread1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpread1(stack["expr"])
}

func (c *current) onField1(name, value interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Field", "name": name, "value": value}, nil

}

func (p *parser) callonField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField1(stack["name"], stack["value"])
}

func (c *current) onArray1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ArrayExpr", "elems": elems}, nil

}

func (p *parser) callonArray1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArray1(stack["elems"])
}

func (c *current) onSet1(elems interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SetExpr", "elems": elems}, nil

}

func (p *parser) callonSet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSet1(stack["elems"])
}

func (c *current) onVectorElems8(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonVectorElems8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems8(stack["e"])
}

func (c *current) onVectorElems2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonVectorElems2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems2(stack["first"], stack["rest"])
}

func (c *current) onVectorElems15() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonVectorElems15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElems15()
}

func (c *current) onVectorElem3(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "VectorValue", "expr": e}, nil
}

func (p *parser) callonVectorElem3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVectorElem3(stack["e"])
}

func (c *current) onMap1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "MapExpr", "entries": exprs}, nil

}

func (p *parser) callonMap1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMap1(stack["exprs"])
}

func (c *current) onEntries2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonEntries2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries2(stack["first"], stack["rest"])
}

func (c *current) onEntries9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonEntries9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries9()
}

func (c *current) onEntryTail1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonEntryTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntryTail1(stack["e"])
}

func (c *current) onEntry1(key, value interface{}) (interface{}, error) {
	return map[string]interface{}{"key": key, "value": value}, nil

}

func (p *parser) callonEntry1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntry1(stack["key"], stack["value"])
}

func (c *current) onSQLOp1(selection, from, joins, where, groupby, having, orderby, limit interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "SQLExpr",

		"select": selection,

		"from": from,

		"joins": joins,

		"where": where,

		"group_by": groupby,

		"having": having,

		"order_by": orderby,

		"limit": limit}, nil

}

func (p *parser) callonSQLOp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOp1(stack["selection"], stack["from"], stack["joins"], stack["where"], stack["groupby"], stack["having"], stack["orderby"], stack["limit"])
}

func (c *current) onSQLSelect2() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLSelect2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect2()
}

func (c *current) onSQLSelect7(assignments interface{}) (interface{}, error) {
	return assignments, nil
}

func (p *parser) callonSQLSelect7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect7(stack["assignments"])
}

func (c *current) onSQLAssignment1(rhs, opt interface{}) (interface{}, error) {
	var m = map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": rhs}
	if opt != nil {
		m["lhs"] = opt.([]interface{})[3]
	}
	return m, nil

}

func (p *parser) callonSQLAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment1(stack["rhs"], stack["opt"])
}

func (c *current) onSQLAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments7(stack["expr"])
}

func (c *current) onSQLAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSQLFrom2(table, alias interface{}) (interface{}, error) {
	return map[string]interface{}{"table": table, "alias": alias}, nil

}

func (p *parser) callonSQLFrom2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom2(stack["table"], stack["alias"])
}

func (c *current) onSQLFrom12() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLFrom12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom12()
}

func (c *current) onSQLAlias2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias2(stack["id"])
}

func (c *current) onSQLAlias9(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias9(stack["id"])
}

func (c *current) onSQLJoins7(join interface{}) (interface{}, error) {
	return join, nil
}

func (p *parser) callonSQLJoins7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins7(stack["join"])
}

func (c *current) onSQLJoins1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLJoins1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins1(stack["first"], stack["rest"])
}

func (c *current) onSQLJoin1(style, table, alias, leftKey, rightKey interface{}) (interface{}, error) {
	return map[string]interface{}{

		"table": table,

		"style": style,

		"left_key": leftKey,

		"right_key": rightKey,

		"alias": alias}, nil

}

func (p *parser) callonSQLJoin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoin1(stack["style"], stack["table"], stack["alias"], stack["leftKey"], stack["rightKey"])
}

func (c *current) onSQLJoinStyle2(style interface{}) (interface{}, error) {
	return style, nil
}

func (p *parser) callonSQLJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle2(stack["style"])
}

func (c *current) onSQLJoinStyle11() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonSQLJoinStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle11()
}

func (c *current) onSQLWhere1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLWhere1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLWhere1(stack["expr"])
}

func (c *current) onSQLGroupBy1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonSQLGroupBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLGroupBy1(stack["columns"])
}

func (c *current) onSQLHaving1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLHaving1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLHaving1(stack["expr"])
}

func (c *current) onSQLOrderBy1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SQLOrderBy", "keys": keys, "order": order}, nil

}

func (p *parser) callonSQLOrderBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrderBy1(stack["keys"], stack["order"])
}

func (c *current) onSQLOrder2(dir interface{}) (interface{}, error) {
	return dir, nil
}

func (p *parser) callonSQLOrder2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder2(stack["dir"])
}

func (c *current) onSQLOrder9() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonSQLOrder9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder9()
}

func (c *current) onSQLLimit2(count interface{}) (interface{}, error) {
	return count, nil
}

func (p *parser) callonSQLLimit2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit2(stack["count"])
}

func (c *current) onSQLLimit9() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonSQLLimit9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit9()
}

func (c *current) onSELECT1() (interface{}, error) {
	return "select", nil
}

func (p *parser) callonSELECT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSELECT1()
}

func (c *current) onAS1() (interface{}, error) {
	return "as", nil
}

func (p *parser) callonAS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAS1()
}

func (c *current) onFROM1() (interface{}, error) {
	return "from", nil
}

func (p *parser) callonFROM1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFROM1()
}

func (c *current) onJOIN1() (interface{}, error) {
	return "join", nil
}

func (p *parser) callonJOIN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJOIN1()
}

func (c *current) onWHERE1() (interface{}, error) {
	return "where", nil
}

func (p *parser) callonWHERE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWHERE1()
}

func (c *current) onGROUP1() (interface{}, error) {
	return "group", nil
}

func (p *parser) callonGROUP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGROUP1()
}

func (c *current) onBY1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonBY1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBY1()
}

func (c *current) onHAVING1() (interface{}, error) {
	return "having", nil
}

func (p *parser) callonHAVING1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHAVING1()
}

func (c *current) onORDER1() (interface{}, error) {
	return "order", nil
}

func (p *parser) callonORDER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onORDER1()
}

func (c *current) onON1() (interface{}, error) {
	return "on", nil
}

func (p *parser) callonON1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onON1()
}

func (c *current) onLIMIT1() (interface{}, error) {
	return "limit", nil
}

func (p *parser) callonLIMIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIMIT1()
}

func (c *current) onASC1() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonASC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onASC1()
}

func (c *current) onDESC1() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonDESC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDESC1()
}

func (c *current) onANTI1() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonANTI1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onANTI1()
}

func (c *current) onLEFT1() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonLEFT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLEFT1()
}

func (c *current) onRIGHT1() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonRIGHT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRIGHT1()
}

func (c *current) onINNER1() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonINNER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINNER1()
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "float64", "text": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "int64", "text": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "null", "text": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onBytesLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bytes", "text": string(c.text)}, nil

}

func (p *parser) callonBytesLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBytesLiteral1()
}

func (c *current) onTypeLiteral1(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonTypeLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeLiteral1(stack["typ"])
}

func (c *current) onCastType3(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonCastType3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCastType3(stack["typ"])
}

func (c *current) onAmbiguousType2(name interface{}) (interface{}, error) {
	return name, nil
}

func (p *parser) callonAmbiguousType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType2(stack["name"])
}

func (c *current) onAmbiguousType8(name, opt interface{}) (interface{}, error) {
	if opt != nil {
		return map[string]interface{}{"kind": "TypeDef", "name": name, "type": opt.([]interface{})[3]}, nil
	}
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType8(stack["name"], stack["opt"])
}

func (c *current) onAmbiguousType19(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType19(stack["name"])
}

func (c *current) onAmbiguousType22(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonAmbiguousType22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType22(stack["u"])
}

func (c *current) onTypeUnion1(types interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeUnion", "types": types}, nil

}

func (p *parser) callonTypeUnion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeUnion1(stack["types"])
}

func (c *current) onTypeList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeList1(stack["first"], stack["rest"])
}

func (c *current) onTypeListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeListTail1(stack["typ"])
}

func (c *current) onComplexType2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType2(stack["fields"])
}

func (c *current) onComplexType10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexType10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType10(stack["typ"])
}

func (c *current) onComplexType18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexType18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType18(stack["typ"])
}

func (c *current) onComplexType26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexType26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType26(stack["keyType"], stack["valType"])
}

func (c *current) onTemplateLiteral1(v interface{}) (interface{}, error) {
	if len(v.([]interface{})) == 0 {
		return map[string]interface{}{"kind": "Primitive", "type": "string", "text": ""}, nil
	}
	return makeTemplateExprChain(v), nil

}

func (p *parser) callonTemplateLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteral1(stack["v"])
}

func (c *current) onTemplateLiteralParts2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts2(stack["v"])
}

func (c *current) onTemplateLiteralParts9(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts9(stack["v"])
}

func (c *current) onTemplateDoubleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateDoubleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedPart3(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar2(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar7(stack["v"])
}

func (c *current) onTemplateSingleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateSingleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedPart3(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar2(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar7(stack["v"])
}

func (c *current) onTemplateExpr1(e interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "Cast",

		"expr": e,

		"type": map[string]interface{}{

			"kind": "TypeValue",

			"value": map[string]interface{}{"kind": "TypePrimitive", "name": "string"}}}, nil

}

func (p *parser) callonTemplateExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateExpr1(stack["e"])
}

func (c *current) onPrimitiveType1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveType1()
}

func (c *current) onTypeFieldList2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList2(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldList9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonTypeFieldList9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList9()
}

func (c *current) onTypeFieldListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTail1(stack["typ"])
}

func (c *current) onTypeField1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeField1(stack["name"], stack["typ"])
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return "in", nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onIdentifierName19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName19()
}

func (c *current) onIdentifierName21(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName21(stack["id"])
}

func (c *current) onIdentifierNames7(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierNames7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierNames7(stack["id"])
}

func (c *current) onIdentifierNames1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonIdentifierNames1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierNames1(stack["first"], stack["rest"])
}

func (c *current) onTime1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "time", "text": string(c.text)}, nil

}

func (p *parser) callonTime1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTime1()
}

func (c *current) onDuration1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "duration", "text": string(c.text)}, nil

}

func (p *parser) callonDuration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDuration1()
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onFloatString22() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFloatString22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString22()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordChars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordChars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordChars1()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onGlobPattern1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil

}

func (p *parser) callonGlobPattern1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobPattern1(stack["head"], stack["tail"])
}

func (c *current) onGlobStart4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonGlobStart4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobStart4()
}

func (c *current) onGlobEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonGlobEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEsc1(stack["s"])
}

func (c *current) onGlobEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonGlobEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape2()
}

func (c *current) onGlobEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonGlobEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape4()
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onSingleCharEscape3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleCharEscape3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape3()
}

func (c *current) onSingleCharEscape6() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape6()
}

func (c *current) onSingleCharEscape8() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape8()
}

func (c *current) onSingleCharEscape10() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape10()
}

func (c *current) onSingleCharEscape12() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape12()
}

func (c *current) onSingleCharEscape14() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape14()
}

func (c *current) onSingleCharEscape16() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape16()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexpPattern1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexpPattern1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpPattern1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
