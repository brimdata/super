// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/brimdata/zed/reglob"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 7, col: 1, offset: 26},
			expr: &actionExpr{
				pos: position{line: 7, col: 9, offset: 34},
				run: (*parser).callonstart1,
				expr: &seqExpr{
					pos: position{line: 7, col: 9, offset: 34},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 7, col: 9, offset: 34},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 7, col: 12, offset: 37},
							label: "ast",
							expr: &ruleRefExpr{
								pos:  position{line: 7, col: 16, offset: 41},
								name: "Z",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 18, offset: 43},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 21, offset: 46},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Z",
			pos:  position{line: 13, col: 1, offset: 355},
			expr: &choiceExpr{
				pos: position{line: 14, col: 5, offset: 435},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 14, col: 5, offset: 435},
						run: (*parser).callonZ2,
						expr: &seqExpr{
							pos: position{line: 14, col: 5, offset: 435},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 14, col: 5, offset: 435},
									label: "decls",
									expr: &oneOrMoreExpr{
										pos: position{line: 14, col: 11, offset: 441},
										expr: &ruleRefExpr{
											pos:  position{line: 14, col: 11, offset: 441},
											name: "Decl",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 14, col: 17, offset: 447},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 14, col: 20, offset: 450},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 14, col: 26, offset: 456},
										name: "Operation",
									},
								},
								&labeledExpr{
									pos:   position{line: 14, col: 36, offset: 466},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 14, col: 41, offset: 471},
										expr: &ruleRefExpr{
											pos:  position{line: 14, col: 41, offset: 471},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 22, col: 5, offset: 744},
						name: "Sequential",
					},
				},
			},
		},
		{
			name: "Decl",
			pos:  position{line: 24, col: 1, offset: 756},
			expr: &actionExpr{
				pos: position{line: 24, col: 8, offset: 763},
				run: (*parser).callonDecl1,
				expr: &seqExpr{
					pos: position{line: 24, col: 8, offset: 763},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 24, col: 8, offset: 763},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 24, col: 11, offset: 766},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 24, col: 13, offset: 768},
								name: "AnyDecl",
							},
						},
					},
				},
			},
		},
		{
			name: "AnyDecl",
			pos:  position{line: 26, col: 1, offset: 795},
			expr: &choiceExpr{
				pos: position{line: 27, col: 5, offset: 807},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 27, col: 5, offset: 807},
						run: (*parser).callonAnyDecl2,
						expr: &seqExpr{
							pos: position{line: 27, col: 5, offset: 807},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 27, col: 5, offset: 807},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 13, offset: 815},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 15, offset: 817},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 18, offset: 820},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 33, offset: 835},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 27, col: 36, offset: 838},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 40, offset: 842},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 43, offset: 845},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 48, offset: 850},
										name: "Expr",
									},
								},
								&choiceExpr{
									pos: position{line: 27, col: 55, offset: 857},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 27, col: 55, offset: 857},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 27, col: 55, offset: 857},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 27, col: 58, offset: 860},
													val:        ";",
													ignoreCase: false,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 27, col: 64, offset: 866},
											name: "EOL",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 30, col: 5, offset: 964},
						run: (*parser).callonAnyDecl18,
						expr: &seqExpr{
							pos: position{line: 30, col: 5, offset: 964},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 30, col: 5, offset: 964},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 12, offset: 971},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 14, offset: 973},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 30, col: 17, offset: 976},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 32, offset: 991},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 30, col: 35, offset: 994},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 39, offset: 998},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 42, offset: 1001},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 30, col: 46, offset: 1005},
										name: "Type",
									},
								},
								&choiceExpr{
									pos: position{line: 30, col: 53, offset: 1012},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 30, col: 53, offset: 1012},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 30, col: 53, offset: 1012},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 30, col: 56, offset: 1015},
													val:        ";",
													ignoreCase: false,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 30, col: 62, offset: 1021},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Sequential",
			pos:  position{line: 34, col: 1, offset: 1118},
			expr: &choiceExpr{
				pos: position{line: 35, col: 5, offset: 1133},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 35, col: 5, offset: 1133},
						run: (*parser).callonSequential2,
						expr: &seqExpr{
							pos: position{line: 35, col: 5, offset: 1133},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 35, col: 5, offset: 1133},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 35, col: 11, offset: 1139},
										name: "Operation",
									},
								},
								&labeledExpr{
									pos:   position{line: 35, col: 21, offset: 1149},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 35, col: 26, offset: 1154},
										expr: &ruleRefExpr{
											pos:  position{line: 35, col: 26, offset: 1154},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 38, col: 5, offset: 1312},
						run: (*parser).callonSequential9,
						expr: &labeledExpr{
							pos:   position{line: 38, col: 5, offset: 1312},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 38, col: 8, offset: 1315},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "SequentialTail",
			pos:  position{line: 42, col: 1, offset: 1425},
			expr: &actionExpr{
				pos: position{line: 42, col: 18, offset: 1442},
				run: (*parser).callonSequentialTail1,
				expr: &seqExpr{
					pos: position{line: 42, col: 18, offset: 1442},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 42, col: 18, offset: 1442},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 21, offset: 1445},
							name: "Pipe",
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 26, offset: 1450},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 42, col: 29, offset: 1453},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 31, offset: 1455},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Parallel",
			pos:  position{line: 44, col: 1, offset: 1484},
			expr: &actionExpr{
				pos: position{line: 45, col: 5, offset: 1497},
				run: (*parser).callonParallel1,
				expr: &seqExpr{
					pos: position{line: 45, col: 5, offset: 1497},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 45, col: 5, offset: 1497},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 45, col: 8, offset: 1500},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 45, col: 13, offset: 1505},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 45, col: 16, offset: 1508},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 45, col: 18, offset: 1510},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 45, col: 29, offset: 1521},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 45, col: 32, offset: 1524},
							val:        ";",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromTrunk",
			pos:  position{line: 47, col: 1, offset: 1547},
			expr: &actionExpr{
				pos: position{line: 48, col: 5, offset: 1561},
				run: (*parser).callonFromTrunk1,
				expr: &seqExpr{
					pos: position{line: 48, col: 5, offset: 1561},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 48, col: 5, offset: 1561},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 48, col: 8, offset: 1564},
							label: "source",
							expr: &ruleRefExpr{
								pos:  position{line: 48, col: 15, offset: 1571},
								name: "FromSource",
							},
						},
						&labeledExpr{
							pos:   position{line: 48, col: 27, offset: 1583},
							label: "seq",
							expr: &zeroOrOneExpr{
								pos: position{line: 48, col: 31, offset: 1587},
								expr: &ruleRefExpr{
									pos:  position{line: 48, col: 31, offset: 1587},
									name: "FromTrunkSeq",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 48, col: 45, offset: 1601},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 48, col: 48, offset: 1604},
							val:        ";",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromTrunkSeq",
			pos:  position{line: 52, col: 1, offset: 1705},
			expr: &actionExpr{
				pos: position{line: 53, col: 5, offset: 1722},
				run: (*parser).callonFromTrunkSeq1,
				expr: &seqExpr{
					pos: position{line: 53, col: 5, offset: 1722},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 53, col: 5, offset: 1722},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 53, col: 8, offset: 1725},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 53, col: 13, offset: 1730},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 53, col: 16, offset: 1733},
							label: "seq",
							expr: &ruleRefExpr{
								pos:  position{line: 53, col: 20, offset: 1737},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "FromSource",
			pos:  position{line: 55, col: 1, offset: 1769},
			expr: &choiceExpr{
				pos: position{line: 56, col: 5, offset: 1784},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 56, col: 5, offset: 1784},
						name: "FileProc",
					},
					&ruleRefExpr{
						pos:  position{line: 57, col: 5, offset: 1797},
						name: "HTTPProc",
					},
					&ruleRefExpr{
						pos:  position{line: 58, col: 5, offset: 1810},
						name: "PassProc",
					},
					&ruleRefExpr{
						pos:  position{line: 59, col: 5, offset: 1823},
						name: "PoolBody",
					},
				},
			},
		},
		{
			name: "Operation",
			pos:  position{line: 61, col: 1, offset: 1833},
			expr: &choiceExpr{
				pos: position{line: 62, col: 5, offset: 1847},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 62, col: 5, offset: 1847},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 62, col: 5, offset: 1847},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 62, col: 5, offset: 1847},
									val:        "split",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 62, col: 13, offset: 1855},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 62, col: 16, offset: 1858},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 62, col: 20, offset: 1862},
									label: "procArray",
									expr: &oneOrMoreExpr{
										pos: position{line: 62, col: 30, offset: 1872},
										expr: &ruleRefExpr{
											pos:  position{line: 62, col: 30, offset: 1872},
											name: "Parallel",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 62, col: 40, offset: 1882},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 62, col: 43, offset: 1885},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 65, col: 5, offset: 1982},
						run: (*parser).callonOperation12,
						expr: &seqExpr{
							pos: position{line: 65, col: 5, offset: 1982},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 65, col: 5, offset: 1982},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 65, col: 14, offset: 1991},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 65, col: 16, offset: 1993},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 65, col: 21, offset: 1998},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 65, col: 26, offset: 2003},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 65, col: 28, offset: 2005},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 65, col: 32, offset: 2009},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 65, col: 38, offset: 2015},
										expr: &ruleRefExpr{
											pos:  position{line: 65, col: 38, offset: 2015},
											name: "SwitchLiteralClause",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 65, col: 59, offset: 2036},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 65, col: 62, offset: 2039},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 68, col: 5, offset: 2144},
						run: (*parser).callonOperation25,
						expr: &seqExpr{
							pos: position{line: 68, col: 5, offset: 2144},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 68, col: 5, offset: 2144},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 68, col: 14, offset: 2153},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 68, col: 17, offset: 2156},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 68, col: 21, offset: 2160},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 68, col: 27, offset: 2166},
										expr: &ruleRefExpr{
											pos:  position{line: 68, col: 27, offset: 2166},
											name: "SwitchSearchBooleanClause",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 68, col: 54, offset: 2193},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 68, col: 57, offset: 2196},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 71, col: 5, offset: 2300},
						run: (*parser).callonOperation35,
						expr: &seqExpr{
							pos: position{line: 71, col: 5, offset: 2300},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 71, col: 5, offset: 2300},
									val:        "from",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 71, col: 12, offset: 2307},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 71, col: 15, offset: 2310},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 71, col: 19, offset: 2314},
									label: "trunks",
									expr: &oneOrMoreExpr{
										pos: position{line: 71, col: 26, offset: 2321},
										expr: &ruleRefExpr{
											pos:  position{line: 71, col: 26, offset: 2321},
											name: "FromTrunk",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 71, col: 37, offset: 2332},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 71, col: 40, offset: 2335},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 74, col: 5, offset: 2426},
						name: "Operator",
					},
					&actionExpr{
						pos: position{line: 75, col: 5, offset: 2439},
						run: (*parser).callonOperation46,
						expr: &seqExpr{
							pos: position{line: 75, col: 5, offset: 2439},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 75, col: 5, offset: 2439},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 75, col: 7, offset: 2441},
										name: "Function",
									},
								},
								&andExpr{
									pos: position{line: 75, col: 16, offset: 2450},
									expr: &ruleRefExpr{
										pos:  position{line: 75, col: 17, offset: 2451},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 76, col: 5, offset: 2481},
						run: (*parser).callonOperation52,
						expr: &seqExpr{
							pos: position{line: 76, col: 5, offset: 2481},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 76, col: 5, offset: 2481},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 76, col: 7, offset: 2483},
										name: "OpAssignment",
									},
								},
								&andExpr{
									pos: position{line: 76, col: 20, offset: 2496},
									expr: &ruleRefExpr{
										pos:  position{line: 76, col: 21, offset: 2497},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 77, col: 5, offset: 2527},
						run: (*parser).callonOperation58,
						expr: &seqExpr{
							pos: position{line: 77, col: 5, offset: 2527},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 77, col: 5, offset: 2527},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 77, col: 7, offset: 2529},
										name: "Aggregation",
									},
								},
								&andExpr{
									pos: position{line: 77, col: 19, offset: 2541},
									expr: &ruleRefExpr{
										pos:  position{line: 77, col: 20, offset: 2542},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 78, col: 5, offset: 2573},
						run: (*parser).callonOperation64,
						expr: &seqExpr{
							pos: position{line: 78, col: 5, offset: 2573},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 78, col: 5, offset: 2573},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 78, col: 10, offset: 2578},
										name: "SearchBoolean",
									},
								},
								&notExpr{
									pos: position{line: 78, col: 24, offset: 2592},
									expr: &ruleRefExpr{
										pos:  position{line: 78, col: 25, offset: 2593},
										name: "AggGuard",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchLiteralClause",
			pos:  position{line: 82, col: 1, offset: 2684},
			expr: &actionExpr{
				pos: position{line: 83, col: 5, offset: 2708},
				run: (*parser).callonSwitchLiteralClause1,
				expr: &seqExpr{
					pos: position{line: 83, col: 5, offset: 2708},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 83, col: 5, offset: 2708},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 83, col: 8, offset: 2711},
							label: "expr",
							expr: &choiceExpr{
								pos: position{line: 83, col: 14, offset: 2717},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 83, col: 14, offset: 2717},
										name: "DefaultToken",
									},
									&ruleRefExpr{
										pos:  position{line: 83, col: 29, offset: 2732},
										name: "Literal",
									},
									&ruleRefExpr{
										pos:  position{line: 83, col: 39, offset: 2742},
										name: "Identifier",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 83, col: 51, offset: 2754},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 83, col: 54, offset: 2757},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 83, col: 59, offset: 2762},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 83, col: 62, offset: 2765},
							label: "proc",
							expr: &ruleRefExpr{
								pos:  position{line: 83, col: 67, offset: 2770},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 83, col: 78, offset: 2781},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 83, col: 81, offset: 2784},
							val:        ";",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SwitchSearchBooleanClause",
			pos:  position{line: 87, col: 1, offset: 2866},
			expr: &actionExpr{
				pos: position{line: 88, col: 5, offset: 2896},
				run: (*parser).callonSwitchSearchBooleanClause1,
				expr: &seqExpr{
					pos: position{line: 88, col: 5, offset: 2896},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 88, col: 5, offset: 2896},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 88, col: 8, offset: 2899},
							label: "expr",
							expr: &choiceExpr{
								pos: position{line: 88, col: 14, offset: 2905},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 88, col: 14, offset: 2905},
										name: "DefaultToken",
									},
									&ruleRefExpr{
										pos:  position{line: 88, col: 29, offset: 2920},
										name: "SearchBoolean",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 88, col: 44, offset: 2935},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 88, col: 47, offset: 2938},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 88, col: 52, offset: 2943},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 88, col: 55, offset: 2946},
							label: "proc",
							expr: &ruleRefExpr{
								pos:  position{line: 88, col: 60, offset: 2951},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 88, col: 71, offset: 2962},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 88, col: 74, offset: 2965},
							val:        ";",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DefaultToken",
			pos:  position{line: 92, col: 1, offset: 3047},
			expr: &actionExpr{
				pos: position{line: 92, col: 16, offset: 3062},
				run: (*parser).callonDefaultToken1,
				expr: &litMatcher{
					pos:        position{line: 92, col: 16, offset: 3062},
					val:        "default",
					ignoreCase: true,
				},
			},
		},
		{
			name: "EndOfOp",
			pos:  position{line: 94, col: 1, offset: 3094},
			expr: &seqExpr{
				pos: position{line: 94, col: 11, offset: 3104},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 94, col: 11, offset: 3104},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 94, col: 15, offset: 3108},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 94, col: 15, offset: 3108},
								name: "Pipe",
							},
							&litMatcher{
								pos:        position{line: 94, col: 22, offset: 3115},
								val:        "=>",
								ignoreCase: false,
							},
							&charClassMatcher{
								pos:        position{line: 94, col: 29, offset: 3122},
								val:        "[);]",
								chars:      []rune{')', ';'},
								ignoreCase: false,
								inverted:   false,
							},
							&ruleRefExpr{
								pos:  position{line: 94, col: 36, offset: 3129},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "Pipe",
			pos:  position{line: 95, col: 1, offset: 3134},
			expr: &seqExpr{
				pos: position{line: 95, col: 8, offset: 3141},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 95, col: 8, offset: 3141},
						val:        "|",
						ignoreCase: false,
					},
					&notExpr{
						pos: position{line: 95, col: 12, offset: 3145},
						expr: &choiceExpr{
							pos: position{line: 95, col: 14, offset: 3147},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 95, col: 14, offset: 3147},
									val:        "{",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 95, col: 20, offset: 3153},
									val:        "[",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 97, col: 1, offset: 3159},
			expr: &seqExpr{
				pos: position{line: 97, col: 13, offset: 3171},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 97, col: 13, offset: 3171},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 97, col: 17, offset: 3175},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 97, col: 18, offset: 3176},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 97, col: 18, offset: 3176},
										expr: &litMatcher{
											pos:        position{line: 97, col: 19, offset: 3177},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 97, col: 24, offset: 3182},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 97, col: 38, offset: 3196},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 97, col: 57, offset: 3215},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 97, col: 82, offset: 3240},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 97, col: 88, offset: 3246},
								val:        "(",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 97, col: 94, offset: 3252},
								val:        "[",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 97, col: 100, offset: 3258},
								val:        "matches",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 99, col: 1, offset: 3270},
			expr: &actionExpr{
				pos: position{line: 99, col: 14, offset: 3283},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 99, col: 15, offset: 3284},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 99, col: 15, offset: 3284},
							val:        "==",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 99, col: 22, offset: 3291},
							val:        "!=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 99, col: 29, offset: 3298},
							val:        "in",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 99, col: 36, offset: 3305},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 99, col: 43, offset: 3312},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 99, col: 49, offset: 3318},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 99, col: 56, offset: 3325},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AggGuard",
			pos:  position{line: 101, col: 1, offset: 3362},
			expr: &choiceExpr{
				pos: position{line: 101, col: 12, offset: 3373},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 101, col: 13, offset: 3374},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 101, col: 13, offset: 3374},
								name: "_",
							},
							&choiceExpr{
								pos: position{line: 101, col: 16, offset: 3377},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 101, col: 16, offset: 3377},
										name: "ByToken",
									},
									&litMatcher{
										pos:        position{line: 101, col: 26, offset: 3387},
										val:        "-with",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 101, col: 35, offset: 3396},
								name: "EOT",
							},
						},
					},
					&seqExpr{
						pos: position{line: 101, col: 43, offset: 3404},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 101, col: 43, offset: 3404},
								name: "__",
							},
							&litMatcher{
								pos:        position{line: 101, col: 46, offset: 3407},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 103, col: 1, offset: 3413},
			expr: &actionExpr{
				pos: position{line: 104, col: 5, offset: 3431},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 104, col: 5, offset: 3431},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 104, col: 5, offset: 3431},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 104, col: 11, offset: 3437},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 104, col: 21, offset: 3447},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 104, col: 26, offset: 3452},
								expr: &ruleRefExpr{
									pos:  position{line: 104, col: 26, offset: 3452},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 108, col: 1, offset: 3526},
			expr: &actionExpr{
				pos: position{line: 108, col: 16, offset: 3541},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 108, col: 16, offset: 3541},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 108, col: 16, offset: 3541},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 108, col: 18, offset: 3543},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 108, col: 26, offset: 3551},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 108, col: 28, offset: 3553},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 108, col: 30, offset: 3555},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 110, col: 1, offset: 3605},
			expr: &actionExpr{
				pos: position{line: 111, col: 5, offset: 3619},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 111, col: 5, offset: 3619},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 111, col: 5, offset: 3619},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 111, col: 11, offset: 3625},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 112, col: 5, offset: 3642},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 112, col: 10, offset: 3647},
								expr: &actionExpr{
									pos: position{line: 112, col: 11, offset: 3648},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 112, col: 11, offset: 3648},
										exprs: []interface{}{
											&zeroOrOneExpr{
												pos: position{line: 112, col: 11, offset: 3648},
												expr: &seqExpr{
													pos: position{line: 112, col: 12, offset: 3649},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 112, col: 12, offset: 3649},
															name: "_",
														},
														&ruleRefExpr{
															pos:  position{line: 112, col: 14, offset: 3651},
															name: "AndToken",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 112, col: 25, offset: 3662},
												name: "_",
											},
											&notExpr{
												pos: position{line: 112, col: 27, offset: 3664},
												expr: &ruleRefExpr{
													pos:  position{line: 112, col: 28, offset: 3665},
													name: "OrToken",
												},
											},
											&labeledExpr{
												pos:   position{line: 112, col: 36, offset: 3673},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 112, col: 41, offset: 3678},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 116, col: 1, offset: 3794},
			expr: &choiceExpr{
				pos: position{line: 117, col: 5, offset: 3811},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 117, col: 5, offset: 3811},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 117, col: 5, offset: 3811},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 117, col: 6, offset: 3812},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 117, col: 6, offset: 3812},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 117, col: 6, offset: 3812},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 117, col: 15, offset: 3821},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 117, col: 19, offset: 3825},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 117, col: 19, offset: 3825},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 117, col: 23, offset: 3829},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 117, col: 27, offset: 3833},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 117, col: 29, offset: 3835},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 120, col: 5, offset: 3947},
						run: (*parser).callonSearchFactor13,
						expr: &seqExpr{
							pos: position{line: 120, col: 5, offset: 3947},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 120, col: 5, offset: 3947},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 120, col: 9, offset: 3951},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 120, col: 12, offset: 3954},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 120, col: 17, offset: 3959},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 120, col: 31, offset: 3973},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 120, col: 34, offset: 3976},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 121, col: 5, offset: 4005},
						name: "SearchExpr",
					},
				},
			},
		},
		{
			name: "TBD",
			pos:  position{line: 124, col: 1, offset: 4018},
			expr: &choiceExpr{
				pos: position{line: 125, col: 5, offset: 4026},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 125, col: 5, offset: 4026},
						run: (*parser).callonTBD2,
						expr: &seqExpr{
							pos: position{line: 125, col: 5, offset: 4026},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 125, col: 5, offset: 4026},
									val:        "*",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 125, col: 9, offset: 4030},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 125, col: 12, offset: 4033},
									label: "compareOp",
									expr: &ruleRefExpr{
										pos:  position{line: 125, col: 22, offset: 4043},
										name: "EqualityToken",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 125, col: 36, offset: 4057},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 125, col: 39, offset: 4060},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 125, col: 41, offset: 4062},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 152, col: 5, offset: 4744},
						run: (*parser).callonTBD11,
						expr: &seqExpr{
							pos: position{line: 152, col: 5, offset: 4744},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 152, col: 5, offset: 4744},
									label: "match",
									expr: &ruleRefExpr{
										pos:  position{line: 152, col: 11, offset: 4750},
										name: "PatternMatch",
									},
								},
								&notExpr{
									pos: position{line: 152, col: 24, offset: 4763},
									expr: &ruleRefExpr{
										pos:  position{line: 152, col: 25, offset: 4764},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 153, col: 5, offset: 4800},
						run: (*parser).callonTBD17,
						expr: &seqExpr{
							pos: position{line: 153, col: 5, offset: 4800},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 153, col: 5, offset: 4800},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 153, col: 7, offset: 4802},
										name: "SearchValue",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 153, col: 19, offset: 4814},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 153, col: 21, offset: 4816},
									name: "InToken",
								},
								&ruleRefExpr{
									pos:  position{line: 153, col: 29, offset: 4824},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 153, col: 31, offset: 4826},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 181, col: 1, offset: 5505},
			expr: &choiceExpr{
				pos: position{line: 182, col: 5, offset: 5520},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 182, col: 5, offset: 5520},
						run: (*parser).callonSearchExpr2,
						expr: &labeledExpr{
							pos:   position{line: 182, col: 5, offset: 5520},
							label: "search",
							expr: &ruleRefExpr{
								pos:  position{line: 182, col: 12, offset: 5527},
								name: "PatternSearch",
							},
						},
					},
					&actionExpr{
						pos: position{line: 183, col: 5, offset: 5568},
						run: (*parser).callonSearchExpr5,
						expr: &seqExpr{
							pos: position{line: 183, col: 5, offset: 5568},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 183, col: 5, offset: 5568},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 183, col: 7, offset: 5570},
										name: "SearchValue",
									},
								},
								&notExpr{
									pos: position{line: 183, col: 19, offset: 5582},
									expr: &ruleRefExpr{
										pos:  position{line: 183, col: 20, offset: 5583},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 186, col: 5, offset: 5700},
						run: (*parser).callonSearchExpr11,
						expr: &seqExpr{
							pos: position{line: 186, col: 5, offset: 5700},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 186, col: 5, offset: 5700},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 186, col: 9, offset: 5704},
									expr: &ruleRefExpr{
										pos:  position{line: 186, col: 10, offset: 5705},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 189, col: 5, offset: 5821},
						name: "EqualityCompareExpr",
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 191, col: 1, offset: 5842},
			expr: &choiceExpr{
				pos: position{line: 192, col: 5, offset: 5858},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 192, col: 5, offset: 5858},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 193, col: 5, offset: 5870},
						run: (*parser).callonSearchValue3,
						expr: &seqExpr{
							pos: position{line: 193, col: 5, offset: 5870},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 193, col: 5, offset: 5870},
									expr: &ruleRefExpr{
										pos:  position{line: 193, col: 6, offset: 5871},
										name: "Regexp",
									},
								},
								&labeledExpr{
									pos:   position{line: 193, col: 13, offset: 5878},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 193, col: 15, offset: 5880},
										name: "KeyWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PatternSearch",
			pos:  position{line: 197, col: 1, offset: 5988},
			expr: &actionExpr{
				pos: position{line: 198, col: 5, offset: 6006},
				run: (*parser).callonPatternSearch1,
				expr: &labeledExpr{
					pos:   position{line: 198, col: 5, offset: 6006},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 198, col: 13, offset: 6014},
						name: "Pattern",
					},
				},
			},
		},
		{
			name: "PatternMatch",
			pos:  position{line: 202, col: 1, offset: 6116},
			expr: &actionExpr{
				pos: position{line: 203, col: 5, offset: 6133},
				run: (*parser).callonPatternMatch1,
				expr: &seqExpr{
					pos: position{line: 203, col: 5, offset: 6133},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 203, col: 5, offset: 6133},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 203, col: 7, offset: 6135},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 203, col: 12, offset: 6140},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 203, col: 14, offset: 6142},
							val:        "matches",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 203, col: 25, offset: 6153},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 203, col: 28, offset: 6156},
							label: "pattern",
							expr: &ruleRefExpr{
								pos:  position{line: 203, col: 36, offset: 6164},
								name: "Pattern",
							},
						},
					},
				},
			},
		},
		{
			name: "Pattern",
			pos:  position{line: 207, col: 1, offset: 6276},
			expr: &choiceExpr{
				pos: position{line: 207, col: 11, offset: 6286},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 207, col: 11, offset: 6286},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 207, col: 20, offset: 6295},
						name: "Glob",
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 211, col: 1, offset: 6327},
			expr: &choiceExpr{
				pos: position{line: 212, col: 5, offset: 6343},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 212, col: 5, offset: 6343},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 212, col: 5, offset: 6343},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 212, col: 5, offset: 6343},
									expr: &ruleRefExpr{
										pos:  position{line: 212, col: 5, offset: 6343},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 212, col: 16, offset: 6354},
									label: "every",
									expr: &zeroOrOneExpr{
										pos: position{line: 212, col: 22, offset: 6360},
										expr: &ruleRefExpr{
											pos:  position{line: 212, col: 22, offset: 6360},
											name: "EveryDur",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 212, col: 32, offset: 6370},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 212, col: 37, offset: 6375},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 212, col: 49, offset: 6387},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 212, col: 55, offset: 6393},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 215, col: 5, offset: 6538},
						run: (*parser).callonAggregation13,
						expr: &seqExpr{
							pos: position{line: 215, col: 5, offset: 6538},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 215, col: 5, offset: 6538},
									expr: &ruleRefExpr{
										pos:  position{line: 215, col: 5, offset: 6538},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 215, col: 16, offset: 6549},
									label: "every",
									expr: &zeroOrOneExpr{
										pos: position{line: 215, col: 22, offset: 6555},
										expr: &ruleRefExpr{
											pos:  position{line: 215, col: 22, offset: 6555},
											name: "EveryDur",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 215, col: 32, offset: 6565},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 215, col: 37, offset: 6570},
										name: "AggAssignments",
									},
								},
								&labeledExpr{
									pos:   position{line: 215, col: 52, offset: 6585},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 215, col: 57, offset: 6590},
										expr: &seqExpr{
											pos: position{line: 215, col: 58, offset: 6591},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 215, col: 58, offset: 6591},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 215, col: 60, offset: 6593},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 215, col: 74, offset: 6607},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 215, col: 80, offset: 6613},
										name: "LimitArg",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Summarize",
			pos:  position{line: 223, col: 1, offset: 6846},
			expr: &seqExpr{
				pos: position{line: 223, col: 13, offset: 6858},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 223, col: 13, offset: 6858},
						val:        "summarize",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 223, col: 25, offset: 6870},
						name: "_",
					},
				},
			},
		},
		{
			name: "EveryDur",
			pos:  position{line: 225, col: 1, offset: 6873},
			expr: &actionExpr{
				pos: position{line: 226, col: 5, offset: 6886},
				run: (*parser).callonEveryDur1,
				expr: &seqExpr{
					pos: position{line: 226, col: 5, offset: 6886},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 226, col: 5, offset: 6886},
							val:        "every",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 226, col: 14, offset: 6895},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 226, col: 16, offset: 6897},
							label: "dur",
							expr: &ruleRefExpr{
								pos:  position{line: 226, col: 20, offset: 6901},
								name: "Duration",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 226, col: 29, offset: 6910},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 228, col: 1, offset: 6933},
			expr: &actionExpr{
				pos: position{line: 229, col: 5, offset: 6949},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 229, col: 5, offset: 6949},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 229, col: 5, offset: 6949},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 229, col: 13, offset: 6957},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 229, col: 15, offset: 6959},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 229, col: 23, offset: 6967},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 231, col: 1, offset: 7008},
			expr: &choiceExpr{
				pos: position{line: 232, col: 5, offset: 7021},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 232, col: 5, offset: 7021},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 232, col: 5, offset: 7021},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 232, col: 5, offset: 7021},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 232, col: 7, offset: 7023},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 232, col: 14, offset: 7030},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 232, col: 16, offset: 7032},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 232, col: 25, offset: 7041},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 232, col: 27, offset: 7043},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 232, col: 33, offset: 7049},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 233, col: 5, offset: 7080},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 233, col: 5, offset: 7080},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 238, col: 1, offset: 7340},
			expr: &choiceExpr{
				pos: position{line: 239, col: 5, offset: 7359},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 239, col: 5, offset: 7359},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 240, col: 5, offset: 7374},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 240, col: 5, offset: 7374},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 240, col: 10, offset: 7379},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 242, col: 1, offset: 7471},
			expr: &actionExpr{
				pos: position{line: 243, col: 5, offset: 7491},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 243, col: 5, offset: 7491},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 243, col: 5, offset: 7491},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 243, col: 11, offset: 7497},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 243, col: 26, offset: 7512},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 243, col: 31, offset: 7517},
								expr: &actionExpr{
									pos: position{line: 243, col: 32, offset: 7518},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 243, col: 32, offset: 7518},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 243, col: 32, offset: 7518},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 243, col: 35, offset: 7521},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 243, col: 39, offset: 7525},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 243, col: 42, offset: 7528},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 243, col: 47, offset: 7533},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignment",
			pos:  position{line: 247, col: 1, offset: 7655},
			expr: &choiceExpr{
				pos: position{line: 248, col: 5, offset: 7673},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 248, col: 5, offset: 7673},
						run: (*parser).callonAggAssignment2,
						expr: &seqExpr{
							pos: position{line: 248, col: 5, offset: 7673},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 248, col: 5, offset: 7673},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 248, col: 10, offset: 7678},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 248, col: 15, offset: 7683},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 248, col: 18, offset: 7686},
									val:        ":=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 248, col: 23, offset: 7691},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 248, col: 26, offset: 7694},
									label: "agg",
									expr: &ruleRefExpr{
										pos:  position{line: 248, col: 30, offset: 7698},
										name: "Agg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 251, col: 5, offset: 7802},
						run: (*parser).callonAggAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 251, col: 5, offset: 7802},
							label: "agg",
							expr: &ruleRefExpr{
								pos:  position{line: 251, col: 9, offset: 7806},
								name: "Agg",
							},
						},
					},
				},
			},
		},
		{
			name: "Agg",
			pos:  position{line: 255, col: 1, offset: 7906},
			expr: &actionExpr{
				pos: position{line: 256, col: 5, offset: 7914},
				run: (*parser).callonAgg1,
				expr: &seqExpr{
					pos: position{line: 256, col: 5, offset: 7914},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 256, col: 5, offset: 7914},
							expr: &ruleRefExpr{
								pos:  position{line: 256, col: 6, offset: 7915},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 256, col: 16, offset: 7925},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 256, col: 19, offset: 7928},
								name: "AggName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 256, col: 27, offset: 7936},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 256, col: 30, offset: 7939},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 256, col: 34, offset: 7943},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 256, col: 37, offset: 7946},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 256, col: 42, offset: 7951},
								expr: &ruleRefExpr{
									pos:  position{line: 256, col: 42, offset: 7951},
									name: "Expr",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 256, col: 49, offset: 7958},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 256, col: 52, offset: 7961},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 256, col: 56, offset: 7965},
							expr: &seqExpr{
								pos: position{line: 256, col: 58, offset: 7967},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 256, col: 58, offset: 7967},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 256, col: 61, offset: 7970},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 256, col: 66, offset: 7975},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 256, col: 72, offset: 7981},
								expr: &ruleRefExpr{
									pos:  position{line: 256, col: 72, offset: 7981},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggName",
			pos:  position{line: 264, col: 1, offset: 8171},
			expr: &choiceExpr{
				pos: position{line: 265, col: 5, offset: 8183},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 265, col: 5, offset: 8183},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 266, col: 5, offset: 8202},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 267, col: 5, offset: 8215},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 269, col: 1, offset: 8224},
			expr: &actionExpr{
				pos: position{line: 269, col: 15, offset: 8238},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 269, col: 15, offset: 8238},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 269, col: 15, offset: 8238},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 269, col: 17, offset: 8240},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 269, col: 25, offset: 8248},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 269, col: 27, offset: 8250},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 269, col: 32, offset: 8255},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignments",
			pos:  position{line: 271, col: 1, offset: 8291},
			expr: &actionExpr{
				pos: position{line: 272, col: 5, offset: 8310},
				run: (*parser).callonAggAssignments1,
				expr: &seqExpr{
					pos: position{line: 272, col: 5, offset: 8310},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 272, col: 5, offset: 8310},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 272, col: 11, offset: 8316},
								name: "AggAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 272, col: 25, offset: 8330},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 272, col: 30, offset: 8335},
								expr: &seqExpr{
									pos: position{line: 272, col: 31, offset: 8336},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 272, col: 31, offset: 8336},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 272, col: 34, offset: 8339},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 272, col: 38, offset: 8343},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 272, col: 41, offset: 8346},
											name: "AggAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 282, col: 1, offset: 8582},
			expr: &choiceExpr{
				pos: position{line: 283, col: 5, offset: 8595},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 283, col: 5, offset: 8595},
						name: "SortProc",
					},
					&ruleRefExpr{
						pos:  position{line: 284, col: 5, offset: 8608},
						name: "TopProc",
					},
					&ruleRefExpr{
						pos:  position{line: 285, col: 5, offset: 8620},
						name: "CutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 286, col: 5, offset: 8632},
						name: "PickProc",
					},
					&ruleRefExpr{
						pos:  position{line: 287, col: 5, offset: 8645},
						name: "DropProc",
					},
					&ruleRefExpr{
						pos:  position{line: 288, col: 5, offset: 8658},
						name: "HeadProc",
					},
					&ruleRefExpr{
						pos:  position{line: 289, col: 5, offset: 8671},
						name: "TailProc",
					},
					&ruleRefExpr{
						pos:  position{line: 290, col: 5, offset: 8684},
						name: "FilterProc",
					},
					&ruleRefExpr{
						pos:  position{line: 291, col: 5, offset: 8699},
						name: "UniqProc",
					},
					&ruleRefExpr{
						pos:  position{line: 292, col: 5, offset: 8712},
						name: "PutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 293, col: 5, offset: 8724},
						name: "RenameProc",
					},
					&ruleRefExpr{
						pos:  position{line: 294, col: 5, offset: 8739},
						name: "FuseProc",
					},
					&ruleRefExpr{
						pos:  position{line: 295, col: 5, offset: 8752},
						name: "ShapeProc",
					},
					&ruleRefExpr{
						pos:  position{line: 296, col: 5, offset: 8766},
						name: "JoinProc",
					},
					&ruleRefExpr{
						pos:  position{line: 297, col: 5, offset: 8779},
						name: "SampleProc",
					},
					&ruleRefExpr{
						pos:  position{line: 298, col: 5, offset: 8794},
						name: "SQLProc",
					},
					&ruleRefExpr{
						pos:  position{line: 299, col: 5, offset: 8806},
						name: "FromProc",
					},
					&ruleRefExpr{
						pos:  position{line: 300, col: 5, offset: 8819},
						name: "PassProc",
					},
					&ruleRefExpr{
						pos:  position{line: 301, col: 5, offset: 8832},
						name: "ExplodeProc",
					},
					&ruleRefExpr{
						pos:  position{line: 302, col: 5, offset: 8848},
						name: "OverProc",
					},
					&ruleRefExpr{
						pos:  position{line: 303, col: 5, offset: 8861},
						name: "YieldProc",
					},
				},
			},
		},
		{
			name: "SortProc",
			pos:  position{line: 305, col: 1, offset: 8872},
			expr: &actionExpr{
				pos: position{line: 306, col: 5, offset: 8885},
				run: (*parser).callonSortProc1,
				expr: &seqExpr{
					pos: position{line: 306, col: 5, offset: 8885},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 306, col: 5, offset: 8885},
							val:        "sort",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 306, col: 13, offset: 8893},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 306, col: 18, offset: 8898},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 306, col: 27, offset: 8907},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 306, col: 32, offset: 8912},
								expr: &actionExpr{
									pos: position{line: 306, col: 33, offset: 8913},
									run: (*parser).callonSortProc8,
									expr: &seqExpr{
										pos: position{line: 306, col: 33, offset: 8913},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 306, col: 33, offset: 8913},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 306, col: 35, offset: 8915},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 306, col: 37, offset: 8917},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 320, col: 1, offset: 9336},
			expr: &actionExpr{
				pos: position{line: 320, col: 12, offset: 9347},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 320, col: 12, offset: 9347},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 320, col: 17, offset: 9352},
						expr: &actionExpr{
							pos: position{line: 320, col: 18, offset: 9353},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 320, col: 18, offset: 9353},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 320, col: 18, offset: 9353},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 320, col: 20, offset: 9355},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 320, col: 22, offset: 9357},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 322, col: 1, offset: 9413},
			expr: &choiceExpr{
				pos: position{line: 323, col: 5, offset: 9425},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 323, col: 5, offset: 9425},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 323, col: 5, offset: 9425},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 324, col: 5, offset: 9500},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 324, col: 5, offset: 9500},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 324, col: 5, offset: 9500},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 324, col: 14, offset: 9509},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 324, col: 16, offset: 9511},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 324, col: 23, offset: 9518},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 324, col: 24, offset: 9519},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 324, col: 24, offset: 9519},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 324, col: 34, offset: 9529},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopProc",
			pos:  position{line: 326, col: 1, offset: 9643},
			expr: &actionExpr{
				pos: position{line: 327, col: 5, offset: 9655},
				run: (*parser).callonTopProc1,
				expr: &seqExpr{
					pos: position{line: 327, col: 5, offset: 9655},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 327, col: 5, offset: 9655},
							val:        "top",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 327, col: 12, offset: 9662},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 327, col: 18, offset: 9668},
								expr: &actionExpr{
									pos: position{line: 327, col: 19, offset: 9669},
									run: (*parser).callonTopProc6,
									expr: &seqExpr{
										pos: position{line: 327, col: 19, offset: 9669},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 327, col: 19, offset: 9669},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 327, col: 21, offset: 9671},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 327, col: 23, offset: 9673},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 327, col: 47, offset: 9697},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 327, col: 53, offset: 9703},
								expr: &seqExpr{
									pos: position{line: 327, col: 54, offset: 9704},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 327, col: 54, offset: 9704},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 327, col: 56, offset: 9706},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 327, col: 67, offset: 9717},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 327, col: 74, offset: 9724},
								expr: &actionExpr{
									pos: position{line: 327, col: 75, offset: 9725},
									run: (*parser).callonTopProc18,
									expr: &seqExpr{
										pos: position{line: 327, col: 75, offset: 9725},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 327, col: 75, offset: 9725},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 327, col: 77, offset: 9727},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 327, col: 79, offset: 9729},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutProc",
			pos:  position{line: 341, col: 1, offset: 10074},
			expr: &actionExpr{
				pos: position{line: 342, col: 5, offset: 10086},
				run: (*parser).callonCutProc1,
				expr: &seqExpr{
					pos: position{line: 342, col: 5, offset: 10086},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 342, col: 5, offset: 10086},
							val:        "cut",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 342, col: 12, offset: 10093},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 342, col: 14, offset: 10095},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 342, col: 19, offset: 10100},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "PickProc",
			pos:  position{line: 346, col: 1, offset: 10195},
			expr: &actionExpr{
				pos: position{line: 347, col: 5, offset: 10208},
				run: (*parser).callonPickProc1,
				expr: &seqExpr{
					pos: position{line: 347, col: 5, offset: 10208},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 347, col: 5, offset: 10208},
							val:        "pick",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 347, col: 13, offset: 10216},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 347, col: 15, offset: 10218},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 347, col: 20, offset: 10223},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropProc",
			pos:  position{line: 351, col: 1, offset: 10319},
			expr: &actionExpr{
				pos: position{line: 352, col: 5, offset: 10332},
				run: (*parser).callonDropProc1,
				expr: &seqExpr{
					pos: position{line: 352, col: 5, offset: 10332},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 352, col: 5, offset: 10332},
							val:        "drop",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 352, col: 13, offset: 10340},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 352, col: 15, offset: 10342},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 352, col: 20, offset: 10347},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadProc",
			pos:  position{line: 356, col: 1, offset: 10438},
			expr: &choiceExpr{
				pos: position{line: 357, col: 5, offset: 10451},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 357, col: 5, offset: 10451},
						run: (*parser).callonHeadProc2,
						expr: &seqExpr{
							pos: position{line: 357, col: 5, offset: 10451},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 357, col: 5, offset: 10451},
									val:        "head",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 357, col: 13, offset: 10459},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 357, col: 15, offset: 10461},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 357, col: 21, offset: 10467},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 358, col: 5, offset: 10547},
						run: (*parser).callonHeadProc8,
						expr: &litMatcher{
							pos:        position{line: 358, col: 5, offset: 10547},
							val:        "head",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "TailProc",
			pos:  position{line: 360, col: 1, offset: 10623},
			expr: &choiceExpr{
				pos: position{line: 361, col: 5, offset: 10636},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 361, col: 5, offset: 10636},
						run: (*parser).callonTailProc2,
						expr: &seqExpr{
							pos: position{line: 361, col: 5, offset: 10636},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 361, col: 5, offset: 10636},
									val:        "tail",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 361, col: 13, offset: 10644},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 361, col: 15, offset: 10646},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 361, col: 21, offset: 10652},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 362, col: 5, offset: 10732},
						run: (*parser).callonTailProc8,
						expr: &litMatcher{
							pos:        position{line: 362, col: 5, offset: 10732},
							val:        "tail",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "FilterProc",
			pos:  position{line: 364, col: 1, offset: 10808},
			expr: &actionExpr{
				pos: position{line: 365, col: 5, offset: 10823},
				run: (*parser).callonFilterProc1,
				expr: &seqExpr{
					pos: position{line: 365, col: 5, offset: 10823},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 365, col: 5, offset: 10823},
							val:        "filter",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 365, col: 15, offset: 10833},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 365, col: 17, offset: 10835},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 365, col: 20, offset: 10838},
								name: "Filter",
							},
						},
					},
				},
			},
		},
		{
			name: "Filter",
			pos:  position{line: 369, col: 1, offset: 10875},
			expr: &actionExpr{
				pos: position{line: 370, col: 5, offset: 10886},
				run: (*parser).callonFilter1,
				expr: &labeledExpr{
					pos:   position{line: 370, col: 5, offset: 10886},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 370, col: 10, offset: 10891},
						name: "SearchBoolean",
					},
				},
			},
		},
		{
			name: "UniqProc",
			pos:  position{line: 374, col: 1, offset: 10987},
			expr: &choiceExpr{
				pos: position{line: 375, col: 5, offset: 11000},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 375, col: 5, offset: 11000},
						run: (*parser).callonUniqProc2,
						expr: &seqExpr{
							pos: position{line: 375, col: 5, offset: 11000},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 375, col: 5, offset: 11000},
									val:        "uniq",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 375, col: 13, offset: 11008},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 375, col: 15, offset: 11010},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 378, col: 5, offset: 11099},
						run: (*parser).callonUniqProc7,
						expr: &litMatcher{
							pos:        position{line: 378, col: 5, offset: 11099},
							val:        "uniq",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "PutProc",
			pos:  position{line: 382, col: 1, offset: 11189},
			expr: &actionExpr{
				pos: position{line: 383, col: 5, offset: 11201},
				run: (*parser).callonPutProc1,
				expr: &seqExpr{
					pos: position{line: 383, col: 5, offset: 11201},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 383, col: 5, offset: 11201},
							val:        "put",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 383, col: 12, offset: 11208},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 383, col: 14, offset: 11210},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 383, col: 19, offset: 11215},
								name: "Assignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameProc",
			pos:  position{line: 387, col: 1, offset: 11306},
			expr: &actionExpr{
				pos: position{line: 388, col: 5, offset: 11321},
				run: (*parser).callonRenameProc1,
				expr: &seqExpr{
					pos: position{line: 388, col: 5, offset: 11321},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 388, col: 5, offset: 11321},
							val:        "rename",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 388, col: 15, offset: 11331},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 388, col: 17, offset: 11333},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 388, col: 23, offset: 11339},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 388, col: 34, offset: 11350},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 388, col: 39, offset: 11355},
								expr: &actionExpr{
									pos: position{line: 388, col: 40, offset: 11356},
									run: (*parser).callonRenameProc9,
									expr: &seqExpr{
										pos: position{line: 388, col: 40, offset: 11356},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 388, col: 40, offset: 11356},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 388, col: 43, offset: 11359},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 388, col: 47, offset: 11363},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 388, col: 50, offset: 11366},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 388, col: 53, offset: 11369},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseProc",
			pos:  position{line: 396, col: 1, offset: 11778},
			expr: &actionExpr{
				pos: position{line: 397, col: 5, offset: 11791},
				run: (*parser).callonFuseProc1,
				expr: &seqExpr{
					pos: position{line: 397, col: 5, offset: 11791},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 397, col: 5, offset: 11791},
							val:        "fuse",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 397, col: 13, offset: 11799},
							expr: &seqExpr{
								pos: position{line: 397, col: 15, offset: 11801},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 397, col: 15, offset: 11801},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 397, col: 18, offset: 11804},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShapeProc",
			pos:  position{line: 401, col: 1, offset: 11875},
			expr: &actionExpr{
				pos: position{line: 402, col: 5, offset: 11889},
				run: (*parser).callonShapeProc1,
				expr: &litMatcher{
					pos:        position{line: 402, col: 5, offset: 11889},
					val:        "shape",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JoinProc",
			pos:  position{line: 406, col: 1, offset: 11965},
			expr: &choiceExpr{
				pos: position{line: 407, col: 5, offset: 11978},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 407, col: 5, offset: 11978},
						run: (*parser).callonJoinProc2,
						expr: &seqExpr{
							pos: position{line: 407, col: 5, offset: 11978},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 407, col: 5, offset: 11978},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 407, col: 11, offset: 11984},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 407, col: 21, offset: 11994},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 407, col: 29, offset: 12002},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 407, col: 31, offset: 12004},
									name: "ON",
								},
								&ruleRefExpr{
									pos:  position{line: 407, col: 34, offset: 12007},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 407, col: 36, offset: 12009},
									label: "leftKey",
									expr: &ruleRefExpr{
										pos:  position{line: 407, col: 44, offset: 12017},
										name: "JoinKey",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 407, col: 52, offset: 12025},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 407, col: 55, offset: 12028},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 407, col: 59, offset: 12032},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 407, col: 62, offset: 12035},
									label: "rightKey",
									expr: &ruleRefExpr{
										pos:  position{line: 407, col: 71, offset: 12044},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 407, col: 79, offset: 12052},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 407, col: 87, offset: 12060},
										expr: &seqExpr{
											pos: position{line: 407, col: 88, offset: 12061},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 407, col: 88, offset: 12061},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 407, col: 90, offset: 12063},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 414, col: 5, offset: 12329},
						run: (*parser).callonJoinProc22,
						expr: &seqExpr{
							pos: position{line: 414, col: 5, offset: 12329},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 414, col: 5, offset: 12329},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 414, col: 11, offset: 12335},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 414, col: 22, offset: 12346},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 414, col: 30, offset: 12354},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 414, col: 32, offset: 12356},
									name: "ON",
								},
								&ruleRefExpr{
									pos:  position{line: 414, col: 35, offset: 12359},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 414, col: 37, offset: 12361},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 414, col: 41, offset: 12365},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 414, col: 49, offset: 12373},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 414, col: 57, offset: 12381},
										expr: &seqExpr{
											pos: position{line: 414, col: 58, offset: 12382},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 414, col: 58, offset: 12382},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 414, col: 60, offset: 12384},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinStyle",
			pos:  position{line: 422, col: 1, offset: 12638},
			expr: &choiceExpr{
				pos: position{line: 423, col: 5, offset: 12652},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 423, col: 5, offset: 12652},
						run: (*parser).callonJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 423, col: 5, offset: 12652},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 423, col: 5, offset: 12652},
									val:        "anti",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 423, col: 13, offset: 12660},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 424, col: 5, offset: 12690},
						run: (*parser).callonJoinStyle6,
						expr: &seqExpr{
							pos: position{line: 424, col: 5, offset: 12690},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 424, col: 5, offset: 12690},
									val:        "inner",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 424, col: 14, offset: 12699},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 425, col: 5, offset: 12729},
						run: (*parser).callonJoinStyle10,
						expr: &seqExpr{
							pos: position{line: 425, col: 5, offset: 12729},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 425, col: 5, offset: 12729},
									val:        "left",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 425, col: 14, offset: 12738},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 426, col: 5, offset: 12767},
						run: (*parser).callonJoinStyle14,
						expr: &seqExpr{
							pos: position{line: 426, col: 5, offset: 12767},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 426, col: 5, offset: 12767},
									val:        "right",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 426, col: 14, offset: 12776},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 427, col: 5, offset: 12806},
						run: (*parser).callonJoinStyle18,
						expr: &litMatcher{
							pos:        position{line: 427, col: 5, offset: 12806},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 429, col: 1, offset: 12842},
			expr: &choiceExpr{
				pos: position{line: 430, col: 5, offset: 12854},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 430, col: 5, offset: 12854},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 431, col: 5, offset: 12863},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 431, col: 5, offset: 12863},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 431, col: 5, offset: 12863},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 431, col: 9, offset: 12867},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 431, col: 14, offset: 12872},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 431, col: 19, offset: 12877},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SampleProc",
			pos:  position{line: 433, col: 1, offset: 12903},
			expr: &actionExpr{
				pos: position{line: 434, col: 5, offset: 12918},
				run: (*parser).callonSampleProc1,
				expr: &seqExpr{
					pos: position{line: 434, col: 5, offset: 12918},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 434, col: 5, offset: 12918},
							val:        "sample",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 434, col: 15, offset: 12928},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 434, col: 17, offset: 12930},
								name: "SampleExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "OpAssignment",
			pos:  position{line: 476, col: 1, offset: 14485},
			expr: &actionExpr{
				pos: position{line: 477, col: 5, offset: 14502},
				run: (*parser).callonOpAssignment1,
				expr: &labeledExpr{
					pos:   position{line: 477, col: 5, offset: 14502},
					label: "a",
					expr: &ruleRefExpr{
						pos:  position{line: 477, col: 7, offset: 14504},
						name: "Assignments",
					},
				},
			},
		},
		{
			name: "SampleExpr",
			pos:  position{line: 481, col: 1, offset: 14604},
			expr: &choiceExpr{
				pos: position{line: 482, col: 5, offset: 14619},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 482, col: 5, offset: 14619},
						run: (*parser).callonSampleExpr2,
						expr: &seqExpr{
							pos: position{line: 482, col: 5, offset: 14619},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 482, col: 5, offset: 14619},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 482, col: 7, offset: 14621},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 482, col: 12, offset: 14626},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 483, col: 5, offset: 14655},
						run: (*parser).callonSampleExpr7,
						expr: &litMatcher{
							pos:        position{line: 483, col: 5, offset: 14655},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromProc",
			pos:  position{line: 485, col: 1, offset: 14713},
			expr: &actionExpr{
				pos: position{line: 486, col: 5, offset: 14726},
				run: (*parser).callonFromProc1,
				expr: &labeledExpr{
					pos:   position{line: 486, col: 5, offset: 14726},
					label: "source",
					expr: &ruleRefExpr{
						pos:  position{line: 486, col: 12, offset: 14733},
						name: "FromAny",
					},
				},
			},
		},
		{
			name: "FromAny",
			pos:  position{line: 490, col: 1, offset: 14889},
			expr: &choiceExpr{
				pos: position{line: 491, col: 5, offset: 14901},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 491, col: 5, offset: 14901},
						name: "FileProc",
					},
					&ruleRefExpr{
						pos:  position{line: 492, col: 5, offset: 14914},
						name: "HTTPProc",
					},
					&ruleRefExpr{
						pos:  position{line: 493, col: 5, offset: 14927},
						name: "PoolProc",
					},
				},
			},
		},
		{
			name: "FileProc",
			pos:  position{line: 495, col: 1, offset: 14937},
			expr: &actionExpr{
				pos: position{line: 496, col: 5, offset: 14950},
				run: (*parser).callonFileProc1,
				expr: &seqExpr{
					pos: position{line: 496, col: 5, offset: 14950},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 496, col: 5, offset: 14950},
							val:        "file",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 496, col: 13, offset: 14958},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 496, col: 15, offset: 14960},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 496, col: 20, offset: 14965},
								name: "Path",
							},
						},
						&labeledExpr{
							pos:   position{line: 496, col: 25, offset: 14970},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 496, col: 32, offset: 14977},
								expr: &ruleRefExpr{
									pos:  position{line: 496, col: 32, offset: 14977},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 496, col: 43, offset: 14988},
							label: "layout",
							expr: &zeroOrOneExpr{
								pos: position{line: 496, col: 50, offset: 14995},
								expr: &ruleRefExpr{
									pos:  position{line: 496, col: 50, offset: 14995},
									name: "LayoutArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PoolProc",
			pos:  position{line: 500, col: 1, offset: 15124},
			expr: &actionExpr{
				pos: position{line: 501, col: 5, offset: 15137},
				run: (*parser).callonPoolProc1,
				expr: &seqExpr{
					pos: position{line: 501, col: 5, offset: 15137},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 501, col: 5, offset: 15137},
							val:        "from",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 501, col: 13, offset: 15145},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 501, col: 15, offset: 15147},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 501, col: 20, offset: 15152},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolBody",
			pos:  position{line: 503, col: 1, offset: 15183},
			expr: &actionExpr{
				pos: position{line: 504, col: 5, offset: 15196},
				run: (*parser).callonPoolBody1,
				expr: &seqExpr{
					pos: position{line: 504, col: 5, offset: 15196},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 504, col: 5, offset: 15196},
							label: "spec",
							expr: &ruleRefExpr{
								pos:  position{line: 504, col: 10, offset: 15201},
								name: "PoolSpec",
							},
						},
						&labeledExpr{
							pos:   position{line: 504, col: 19, offset: 15210},
							label: "at",
							expr: &zeroOrOneExpr{
								pos: position{line: 504, col: 22, offset: 15213},
								expr: &ruleRefExpr{
									pos:  position{line: 504, col: 22, offset: 15213},
									name: "PoolAt",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 504, col: 30, offset: 15221},
							label: "over",
							expr: &zeroOrOneExpr{
								pos: position{line: 504, col: 35, offset: 15226},
								expr: &ruleRefExpr{
									pos:  position{line: 504, col: 35, offset: 15226},
									name: "PoolRange",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 504, col: 46, offset: 15237},
							label: "order",
							expr: &zeroOrOneExpr{
								pos: position{line: 504, col: 52, offset: 15243},
								expr: &ruleRefExpr{
									pos:  position{line: 504, col: 52, offset: 15243},
									name: "OrderArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "HTTPProc",
			pos:  position{line: 508, col: 1, offset: 15379},
			expr: &actionExpr{
				pos: position{line: 509, col: 5, offset: 15392},
				run: (*parser).callonHTTPProc1,
				expr: &seqExpr{
					pos: position{line: 509, col: 5, offset: 15392},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 509, col: 5, offset: 15392},
							val:        "get",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 509, col: 12, offset: 15399},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 509, col: 14, offset: 15401},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 509, col: 18, offset: 15405},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 509, col: 22, offset: 15409},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 509, col: 29, offset: 15416},
								expr: &ruleRefExpr{
									pos:  position{line: 509, col: 29, offset: 15416},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 509, col: 40, offset: 15427},
							label: "layout",
							expr: &zeroOrOneExpr{
								pos: position{line: 509, col: 47, offset: 15434},
								expr: &ruleRefExpr{
									pos:  position{line: 509, col: 47, offset: 15434},
									name: "LayoutArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 513, col: 1, offset: 15560},
			expr: &actionExpr{
				pos: position{line: 513, col: 7, offset: 15566},
				run: (*parser).callonURL1,
				expr: &seqExpr{
					pos: position{line: 513, col: 7, offset: 15566},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 513, col: 8, offset: 15567},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 513, col: 8, offset: 15567},
									val:        "http:",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 513, col: 18, offset: 15577},
									val:        "https:",
									ignoreCase: false,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 513, col: 28, offset: 15587},
							name: "Path",
						},
					},
				},
			},
		},
		{
			name: "Path",
			pos:  position{line: 515, col: 1, offset: 15624},
			expr: &choiceExpr{
				pos: position{line: 516, col: 5, offset: 15633},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 516, col: 5, offset: 15633},
						run: (*parser).callonPath2,
						expr: &labeledExpr{
							pos:   position{line: 516, col: 5, offset: 15633},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 516, col: 7, offset: 15635},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 517, col: 5, offset: 15670},
						run: (*parser).callonPath5,
						expr: &oneOrMoreExpr{
							pos: position{line: 517, col: 5, offset: 15670},
							expr: &charClassMatcher{
								pos:        position{line: 517, col: 5, offset: 15670},
								val:        "[0-9a-zA-Z!@$%^&*()_=<>,./?:[\\]{}~|+-]",
								chars:      []rune{'!', '@', '$', '%', '^', '&', '*', '(', ')', '_', '=', '<', '>', ',', '.', '/', '?', ':', '[', ']', '{', '}', '~', '|', '+', '-'},
								ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PoolAt",
			pos:  position{line: 520, col: 1, offset: 15775},
			expr: &actionExpr{
				pos: position{line: 521, col: 5, offset: 15786},
				run: (*parser).callonPoolAt1,
				expr: &seqExpr{
					pos: position{line: 521, col: 5, offset: 15786},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 521, col: 5, offset: 15786},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 521, col: 7, offset: 15788},
							val:        "at",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 521, col: 13, offset: 15794},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 521, col: 15, offset: 15796},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 521, col: 18, offset: 15799},
								name: "KSUID",
							},
						},
					},
				},
			},
		},
		{
			name: "KSUID",
			pos:  position{line: 524, col: 1, offset: 15865},
			expr: &actionExpr{
				pos: position{line: 524, col: 9, offset: 15873},
				run: (*parser).callonKSUID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 524, col: 9, offset: 15873},
					expr: &charClassMatcher{
						pos:        position{line: 524, col: 10, offset: 15874},
						val:        "[0-9a-zA-Z]",
						ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "PoolRange",
			pos:  position{line: 526, col: 1, offset: 15920},
			expr: &actionExpr{
				pos: position{line: 527, col: 5, offset: 15934},
				run: (*parser).callonPoolRange1,
				expr: &seqExpr{
					pos: position{line: 527, col: 5, offset: 15934},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 527, col: 5, offset: 15934},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 527, col: 7, offset: 15936},
							val:        "range",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 527, col: 16, offset: 15945},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 527, col: 18, offset: 15947},
							label: "lower",
							expr: &ruleRefExpr{
								pos:  position{line: 527, col: 24, offset: 15953},
								name: "Literal",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 527, col: 32, offset: 15961},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 527, col: 34, offset: 15963},
							val:        "to",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 527, col: 40, offset: 15969},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 527, col: 42, offset: 15971},
							label: "upper",
							expr: &ruleRefExpr{
								pos:  position{line: 527, col: 48, offset: 15977},
								name: "Literal",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolSpec",
			pos:  position{line: 531, col: 1, offset: 16082},
			expr: &choiceExpr{
				pos: position{line: 532, col: 5, offset: 16095},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 532, col: 5, offset: 16095},
						run: (*parser).callonPoolSpec2,
						expr: &seqExpr{
							pos: position{line: 532, col: 5, offset: 16095},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 532, col: 5, offset: 16095},
									label: "pool",
									expr: &ruleRefExpr{
										pos:  position{line: 532, col: 10, offset: 16100},
										name: "PoolName",
									},
								},
								&labeledExpr{
									pos:   position{line: 532, col: 19, offset: 16109},
									label: "commit",
									expr: &zeroOrOneExpr{
										pos: position{line: 532, col: 26, offset: 16116},
										expr: &ruleRefExpr{
											pos:  position{line: 532, col: 26, offset: 16116},
											name: "PoolCommit",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 532, col: 38, offset: 16128},
									label: "meta",
									expr: &zeroOrOneExpr{
										pos: position{line: 532, col: 43, offset: 16133},
										expr: &ruleRefExpr{
											pos:  position{line: 532, col: 43, offset: 16133},
											name: "PoolMeta",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 535, col: 5, offset: 16242},
						run: (*parser).callonPoolSpec12,
						expr: &labeledExpr{
							pos:   position{line: 535, col: 5, offset: 16242},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 535, col: 10, offset: 16247},
								name: "PoolMeta",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolCommit",
			pos:  position{line: 539, col: 1, offset: 16348},
			expr: &actionExpr{
				pos: position{line: 540, col: 5, offset: 16363},
				run: (*parser).callonPoolCommit1,
				expr: &seqExpr{
					pos: position{line: 540, col: 5, offset: 16363},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 540, col: 5, offset: 16363},
							val:        "@",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 540, col: 9, offset: 16367},
							label: "commit",
							expr: &ruleRefExpr{
								pos:  position{line: 540, col: 16, offset: 16374},
								name: "PoolName",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolMeta",
			pos:  position{line: 542, col: 1, offset: 16407},
			expr: &actionExpr{
				pos: position{line: 543, col: 5, offset: 16420},
				run: (*parser).callonPoolMeta1,
				expr: &seqExpr{
					pos: position{line: 543, col: 5, offset: 16420},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 543, col: 5, offset: 16420},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 543, col: 9, offset: 16424},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 543, col: 14, offset: 16429},
								name: "PoolIdentifier",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolName",
			pos:  position{line: 545, col: 1, offset: 16466},
			expr: &choiceExpr{
				pos: position{line: 546, col: 5, offset: 16479},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 546, col: 5, offset: 16479},
						name: "PoolIdentifier",
					},
					&ruleRefExpr{
						pos:  position{line: 547, col: 5, offset: 16498},
						name: "KSUID",
					},
					&ruleRefExpr{
						pos:  position{line: 548, col: 5, offset: 16508},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "PoolIdentifier",
			pos:  position{line: 550, col: 1, offset: 16522},
			expr: &actionExpr{
				pos: position{line: 551, col: 5, offset: 16541},
				run: (*parser).callonPoolIdentifier1,
				expr: &seqExpr{
					pos: position{line: 551, col: 5, offset: 16541},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 551, col: 6, offset: 16542},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 551, col: 6, offset: 16542},
									name: "IdentifierStart",
								},
								&litMatcher{
									pos:        position{line: 551, col: 24, offset: 16560},
									val:        ".",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 551, col: 29, offset: 16565},
							expr: &choiceExpr{
								pos: position{line: 551, col: 30, offset: 16566},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 551, col: 30, offset: 16566},
										name: "IdentifierRest",
									},
									&litMatcher{
										pos:        position{line: 551, col: 47, offset: 16583},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LayoutArg",
			pos:  position{line: 553, col: 1, offset: 16622},
			expr: &actionExpr{
				pos: position{line: 554, col: 5, offset: 16636},
				run: (*parser).callonLayoutArg1,
				expr: &seqExpr{
					pos: position{line: 554, col: 5, offset: 16636},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 554, col: 5, offset: 16636},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 554, col: 7, offset: 16638},
							val:        "order",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 554, col: 16, offset: 16647},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 554, col: 18, offset: 16649},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 554, col: 23, offset: 16654},
								name: "FieldExprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 554, col: 34, offset: 16665},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 554, col: 40, offset: 16671},
								name: "OrderSuffix",
							},
						},
					},
				},
			},
		},
		{
			name: "FormatArg",
			pos:  position{line: 558, col: 1, offset: 16781},
			expr: &actionExpr{
				pos: position{line: 559, col: 5, offset: 16795},
				run: (*parser).callonFormatArg1,
				expr: &seqExpr{
					pos: position{line: 559, col: 5, offset: 16795},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 559, col: 5, offset: 16795},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 559, col: 7, offset: 16797},
							val:        "format",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 559, col: 17, offset: 16807},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 559, col: 19, offset: 16809},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 559, col: 23, offset: 16813},
								name: "IdentifierName",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderSuffix",
			pos:  position{line: 561, col: 1, offset: 16849},
			expr: &choiceExpr{
				pos: position{line: 562, col: 5, offset: 16865},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 562, col: 5, offset: 16865},
						run: (*parser).callonOrderSuffix2,
						expr: &litMatcher{
							pos:        position{line: 562, col: 5, offset: 16865},
							val:        ":asc",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 563, col: 5, offset: 16900},
						run: (*parser).callonOrderSuffix4,
						expr: &litMatcher{
							pos:        position{line: 563, col: 5, offset: 16900},
							val:        ":desc",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 564, col: 5, offset: 16937},
						run: (*parser).callonOrderSuffix6,
						expr: &litMatcher{
							pos:        position{line: 564, col: 5, offset: 16937},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OrderArg",
			pos:  position{line: 566, col: 1, offset: 16963},
			expr: &choiceExpr{
				pos: position{line: 567, col: 5, offset: 16976},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 567, col: 5, offset: 16976},
						run: (*parser).callonOrderArg2,
						expr: &seqExpr{
							pos: position{line: 567, col: 5, offset: 16976},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 567, col: 5, offset: 16976},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 567, col: 7, offset: 16978},
									val:        "order",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 567, col: 16, offset: 16987},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 567, col: 18, offset: 16989},
									val:        "asc",
									ignoreCase: true,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 568, col: 5, offset: 17023},
						run: (*parser).callonOrderArg8,
						expr: &seqExpr{
							pos: position{line: 568, col: 5, offset: 17023},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 568, col: 5, offset: 17023},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 568, col: 7, offset: 17025},
									val:        "order",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 568, col: 16, offset: 17034},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 568, col: 18, offset: 17036},
									val:        "desc",
									ignoreCase: true,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassProc",
			pos:  position{line: 570, col: 1, offset: 17069},
			expr: &actionExpr{
				pos: position{line: 571, col: 5, offset: 17082},
				run: (*parser).callonPassProc1,
				expr: &litMatcher{
					pos:        position{line: 571, col: 5, offset: 17082},
					val:        "pass",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ExplodeProc",
			pos:  position{line: 577, col: 1, offset: 17277},
			expr: &actionExpr{
				pos: position{line: 578, col: 5, offset: 17293},
				run: (*parser).callonExplodeProc1,
				expr: &seqExpr{
					pos: position{line: 578, col: 5, offset: 17293},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 578, col: 5, offset: 17293},
							val:        "explode",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 578, col: 16, offset: 17304},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 578, col: 18, offset: 17306},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 578, col: 23, offset: 17311},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 578, col: 29, offset: 17317},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 578, col: 33, offset: 17321},
								name: "TypeArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 578, col: 41, offset: 17329},
							label: "as",
							expr: &zeroOrOneExpr{
								pos: position{line: 578, col: 44, offset: 17332},
								expr: &ruleRefExpr{
									pos:  position{line: 578, col: 44, offset: 17332},
									name: "AsArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OverProc",
			pos:  position{line: 582, col: 1, offset: 17444},
			expr: &actionExpr{
				pos: position{line: 583, col: 5, offset: 17457},
				run: (*parser).callonOverProc1,
				expr: &seqExpr{
					pos: position{line: 583, col: 5, offset: 17457},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 583, col: 5, offset: 17457},
							val:        "over",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 583, col: 13, offset: 17465},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 583, col: 15, offset: 17467},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 583, col: 21, offset: 17473},
								name: "Exprs",
							},
						},
					},
				},
			},
		},
		{
			name: "YieldProc",
			pos:  position{line: 587, col: 1, offset: 17556},
			expr: &actionExpr{
				pos: position{line: 588, col: 5, offset: 17570},
				run: (*parser).callonYieldProc1,
				expr: &seqExpr{
					pos: position{line: 588, col: 5, offset: 17570},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 588, col: 5, offset: 17570},
							val:        "yield",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 588, col: 14, offset: 17579},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 588, col: 16, offset: 17581},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 588, col: 22, offset: 17587},
								name: "Exprs",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeArg",
			pos:  position{line: 592, col: 1, offset: 17671},
			expr: &actionExpr{
				pos: position{line: 593, col: 5, offset: 17683},
				run: (*parser).callonTypeArg1,
				expr: &seqExpr{
					pos: position{line: 593, col: 5, offset: 17683},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 593, col: 5, offset: 17683},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 593, col: 7, offset: 17685},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 593, col: 10, offset: 17688},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 593, col: 12, offset: 17690},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 593, col: 16, offset: 17694},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "AsArg",
			pos:  position{line: 595, col: 1, offset: 17719},
			expr: &actionExpr{
				pos: position{line: 596, col: 5, offset: 17729},
				run: (*parser).callonAsArg1,
				expr: &seqExpr{
					pos: position{line: 596, col: 5, offset: 17729},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 596, col: 5, offset: 17729},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 596, col: 7, offset: 17731},
							name: "AS",
						},
						&ruleRefExpr{
							pos:  position{line: 596, col: 10, offset: 17734},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 596, col: 12, offset: 17736},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 596, col: 16, offset: 17740},
								name: "Lval",
							},
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 600, col: 1, offset: 17791},
			expr: &ruleRefExpr{
				pos:  position{line: 600, col: 8, offset: 17798},
				name: "DerefExpr",
			},
		},
		{
			name: "Lvals",
			pos:  position{line: 602, col: 1, offset: 17809},
			expr: &actionExpr{
				pos: position{line: 603, col: 5, offset: 17819},
				run: (*parser).callonLvals1,
				expr: &seqExpr{
					pos: position{line: 603, col: 5, offset: 17819},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 603, col: 5, offset: 17819},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 603, col: 11, offset: 17825},
								name: "Lval",
							},
						},
						&labeledExpr{
							pos:   position{line: 603, col: 16, offset: 17830},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 603, col: 21, offset: 17835},
								expr: &actionExpr{
									pos: position{line: 603, col: 22, offset: 17836},
									run: (*parser).callonLvals7,
									expr: &seqExpr{
										pos: position{line: 603, col: 22, offset: 17836},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 603, col: 22, offset: 17836},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 603, col: 25, offset: 17839},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 603, col: 29, offset: 17843},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 603, col: 32, offset: 17846},
												label: "lval",
												expr: &ruleRefExpr{
													pos:  position{line: 603, col: 37, offset: 17851},
													name: "Lval",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 607, col: 1, offset: 17963},
			expr: &ruleRefExpr{
				pos:  position{line: 607, col: 13, offset: 17975},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 609, col: 1, offset: 17981},
			expr: &actionExpr{
				pos: position{line: 610, col: 5, offset: 17996},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 610, col: 5, offset: 17996},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 610, col: 5, offset: 17996},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 610, col: 11, offset: 18002},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 610, col: 21, offset: 18012},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 610, col: 26, offset: 18017},
								expr: &seqExpr{
									pos: position{line: 610, col: 27, offset: 18018},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 610, col: 27, offset: 18018},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 610, col: 30, offset: 18021},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 610, col: 34, offset: 18025},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 610, col: 37, offset: 18028},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignments",
			pos:  position{line: 620, col: 1, offset: 18227},
			expr: &actionExpr{
				pos: position{line: 621, col: 5, offset: 18243},
				run: (*parser).callonAssignments1,
				expr: &seqExpr{
					pos: position{line: 621, col: 5, offset: 18243},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 621, col: 5, offset: 18243},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 621, col: 11, offset: 18249},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 621, col: 22, offset: 18260},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 621, col: 27, offset: 18265},
								expr: &actionExpr{
									pos: position{line: 621, col: 28, offset: 18266},
									run: (*parser).callonAssignments7,
									expr: &seqExpr{
										pos: position{line: 621, col: 28, offset: 18266},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 621, col: 28, offset: 18266},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 621, col: 31, offset: 18269},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 621, col: 35, offset: 18273},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 621, col: 38, offset: 18276},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 621, col: 40, offset: 18278},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 625, col: 1, offset: 18389},
			expr: &actionExpr{
				pos: position{line: 626, col: 5, offset: 18404},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 626, col: 5, offset: 18404},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 626, col: 5, offset: 18404},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 626, col: 9, offset: 18408},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 626, col: 14, offset: 18413},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 626, col: 17, offset: 18416},
							val:        ":=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 626, col: 22, offset: 18421},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 626, col: 25, offset: 18424},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 626, col: 29, offset: 18428},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 628, col: 1, offset: 18519},
			expr: &ruleRefExpr{
				pos:  position{line: 628, col: 8, offset: 18526},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 630, col: 1, offset: 18543},
			expr: &choiceExpr{
				pos: position{line: 631, col: 5, offset: 18563},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 631, col: 5, offset: 18563},
						run: (*parser).callonConditionalExpr2,
						expr: &seqExpr{
							pos: position{line: 631, col: 5, offset: 18563},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 631, col: 5, offset: 18563},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 631, col: 15, offset: 18573},
										name: "LogicalOrExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 631, col: 29, offset: 18587},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 631, col: 32, offset: 18590},
									val:        "?",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 631, col: 36, offset: 18594},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 631, col: 39, offset: 18597},
									label: "thenClause",
									expr: &ruleRefExpr{
										pos:  position{line: 631, col: 50, offset: 18608},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 631, col: 55, offset: 18613},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 631, col: 58, offset: 18616},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 631, col: 62, offset: 18620},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 631, col: 65, offset: 18623},
									label: "elseClause",
									expr: &ruleRefExpr{
										pos:  position{line: 631, col: 76, offset: 18634},
										name: "Expr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 634, col: 5, offset: 18774},
						name: "LogicalOrExpr",
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 636, col: 1, offset: 18789},
			expr: &actionExpr{
				pos: position{line: 637, col: 5, offset: 18807},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 637, col: 5, offset: 18807},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 637, col: 5, offset: 18807},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 637, col: 11, offset: 18813},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 638, col: 5, offset: 18832},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 638, col: 10, offset: 18837},
								expr: &actionExpr{
									pos: position{line: 638, col: 11, offset: 18838},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 638, col: 11, offset: 18838},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 638, col: 11, offset: 18838},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 638, col: 14, offset: 18841},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 638, col: 17, offset: 18844},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 638, col: 25, offset: 18852},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 638, col: 28, offset: 18855},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 638, col: 33, offset: 18860},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 642, col: 1, offset: 18978},
			expr: &actionExpr{
				pos: position{line: 643, col: 5, offset: 18997},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 643, col: 5, offset: 18997},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 643, col: 5, offset: 18997},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 643, col: 11, offset: 19003},
								name: "EqualityCompareExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 644, col: 5, offset: 19027},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 644, col: 10, offset: 19032},
								expr: &actionExpr{
									pos: position{line: 644, col: 11, offset: 19033},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 644, col: 11, offset: 19033},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 644, col: 11, offset: 19033},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 644, col: 14, offset: 19036},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 644, col: 17, offset: 19039},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 644, col: 26, offset: 19048},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 644, col: 29, offset: 19051},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 644, col: 34, offset: 19056},
													name: "EqualityCompareExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityCompareExpr",
			pos:  position{line: 648, col: 1, offset: 19179},
			expr: &choiceExpr{
				pos: position{line: 649, col: 5, offset: 19203},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 649, col: 5, offset: 19203},
						name: "PatternMatch",
					},
					&actionExpr{
						pos: position{line: 650, col: 5, offset: 19220},
						run: (*parser).callonEqualityCompareExpr3,
						expr: &seqExpr{
							pos: position{line: 650, col: 5, offset: 19220},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 650, col: 5, offset: 19220},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 650, col: 11, offset: 19226},
										name: "RelativeExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 651, col: 5, offset: 19243},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 651, col: 10, offset: 19248},
										expr: &actionExpr{
											pos: position{line: 651, col: 11, offset: 19249},
											run: (*parser).callonEqualityCompareExpr9,
											expr: &seqExpr{
												pos: position{line: 651, col: 11, offset: 19249},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 651, col: 11, offset: 19249},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 651, col: 14, offset: 19252},
														label: "comp",
														expr: &ruleRefExpr{
															pos:  position{line: 651, col: 19, offset: 19257},
															name: "EqualityComparator",
														},
													},
													&ruleRefExpr{
														pos:  position{line: 651, col: 38, offset: 19276},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 651, col: 41, offset: 19279},
														label: "expr",
														expr: &ruleRefExpr{
															pos:  position{line: 651, col: 46, offset: 19284},
															name: "RelativeExpr",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityOperator",
			pos:  position{line: 655, col: 1, offset: 19402},
			expr: &choiceExpr{
				pos: position{line: 656, col: 5, offset: 19423},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 656, col: 5, offset: 19423},
						run: (*parser).callonEqualityOperator2,
						expr: &litMatcher{
							pos:        position{line: 656, col: 5, offset: 19423},
							val:        "==",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 657, col: 5, offset: 19452},
						run: (*parser).callonEqualityOperator4,
						expr: &litMatcher{
							pos:        position{line: 657, col: 5, offset: 19452},
							val:        "!=",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "EqualityComparator",
			pos:  position{line: 659, col: 1, offset: 19489},
			expr: &choiceExpr{
				pos: position{line: 660, col: 5, offset: 19512},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 660, col: 5, offset: 19512},
						name: "EqualityOperator",
					},
					&actionExpr{
						pos: position{line: 661, col: 5, offset: 19533},
						run: (*parser).callonEqualityComparator3,
						expr: &seqExpr{
							pos: position{line: 661, col: 5, offset: 19533},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 661, col: 5, offset: 19533},
									val:        "in",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 661, col: 10, offset: 19538},
									expr: &ruleRefExpr{
										pos:  position{line: 661, col: 11, offset: 19539},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeExpr",
			pos:  position{line: 663, col: 1, offset: 19586},
			expr: &actionExpr{
				pos: position{line: 664, col: 5, offset: 19603},
				run: (*parser).callonRelativeExpr1,
				expr: &seqExpr{
					pos: position{line: 664, col: 5, offset: 19603},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 664, col: 5, offset: 19603},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 664, col: 11, offset: 19609},
								name: "AdditiveExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 665, col: 5, offset: 19626},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 665, col: 10, offset: 19631},
								expr: &actionExpr{
									pos: position{line: 665, col: 11, offset: 19632},
									run: (*parser).callonRelativeExpr7,
									expr: &seqExpr{
										pos: position{line: 665, col: 11, offset: 19632},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 665, col: 11, offset: 19632},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 665, col: 14, offset: 19635},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 665, col: 17, offset: 19638},
													name: "RelativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 665, col: 34, offset: 19655},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 665, col: 37, offset: 19658},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 665, col: 42, offset: 19663},
													name: "AdditiveExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeOperator",
			pos:  position{line: 669, col: 1, offset: 19779},
			expr: &actionExpr{
				pos: position{line: 669, col: 20, offset: 19798},
				run: (*parser).callonRelativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 669, col: 21, offset: 19799},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 669, col: 21, offset: 19799},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 669, col: 28, offset: 19806},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 669, col: 34, offset: 19812},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 669, col: 41, offset: 19819},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 671, col: 1, offset: 19856},
			expr: &actionExpr{
				pos: position{line: 672, col: 5, offset: 19873},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 672, col: 5, offset: 19873},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 672, col: 5, offset: 19873},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 672, col: 11, offset: 19879},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 673, col: 5, offset: 19902},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 673, col: 10, offset: 19907},
								expr: &actionExpr{
									pos: position{line: 673, col: 11, offset: 19908},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 673, col: 11, offset: 19908},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 673, col: 11, offset: 19908},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 673, col: 14, offset: 19911},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 673, col: 17, offset: 19914},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 673, col: 34, offset: 19931},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 673, col: 37, offset: 19934},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 673, col: 42, offset: 19939},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 677, col: 1, offset: 20061},
			expr: &actionExpr{
				pos: position{line: 677, col: 20, offset: 20080},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 677, col: 21, offset: 20081},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 677, col: 21, offset: 20081},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 677, col: 27, offset: 20087},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 679, col: 1, offset: 20124},
			expr: &actionExpr{
				pos: position{line: 680, col: 5, offset: 20147},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 680, col: 5, offset: 20147},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 680, col: 5, offset: 20147},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 680, col: 11, offset: 20153},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 681, col: 5, offset: 20165},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 681, col: 10, offset: 20170},
								expr: &actionExpr{
									pos: position{line: 681, col: 11, offset: 20171},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 681, col: 11, offset: 20171},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 681, col: 11, offset: 20171},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 681, col: 14, offset: 20174},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 681, col: 17, offset: 20177},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 681, col: 40, offset: 20200},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 681, col: 43, offset: 20203},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 681, col: 48, offset: 20208},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 685, col: 1, offset: 20319},
			expr: &actionExpr{
				pos: position{line: 685, col: 26, offset: 20344},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 685, col: 27, offset: 20345},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 685, col: 27, offset: 20345},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 685, col: 33, offset: 20351},
							val:        "/",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 685, col: 39, offset: 20357},
							val:        "%",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 687, col: 1, offset: 20394},
			expr: &choiceExpr{
				pos: position{line: 688, col: 5, offset: 20406},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 688, col: 5, offset: 20406},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 688, col: 5, offset: 20406},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 688, col: 5, offset: 20406},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 688, col: 9, offset: 20410},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 688, col: 12, offset: 20413},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 688, col: 14, offset: 20415},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 691, col: 5, offset: 20524},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 693, col: 1, offset: 20534},
			expr: &choiceExpr{
				pos: position{line: 694, col: 5, offset: 20547},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 694, col: 5, offset: 20547},
						name: "SelectExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 695, col: 5, offset: 20562},
						name: "MatchExpr",
					},
					&actionExpr{
						pos: position{line: 696, col: 5, offset: 20576},
						run: (*parser).callonFuncExpr4,
						expr: &seqExpr{
							pos: position{line: 696, col: 5, offset: 20576},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 696, col: 5, offset: 20576},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 696, col: 11, offset: 20582},
										name: "Cast",
									},
								},
								&labeledExpr{
									pos:   position{line: 696, col: 16, offset: 20587},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 696, col: 21, offset: 20592},
										expr: &ruleRefExpr{
											pos:  position{line: 696, col: 22, offset: 20593},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 699, col: 5, offset: 20664},
						run: (*parser).callonFuncExpr11,
						expr: &seqExpr{
							pos: position{line: 699, col: 5, offset: 20664},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 699, col: 5, offset: 20664},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 699, col: 11, offset: 20670},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 699, col: 20, offset: 20679},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 699, col: 25, offset: 20684},
										expr: &ruleRefExpr{
											pos:  position{line: 699, col: 26, offset: 20685},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 702, col: 5, offset: 20756},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 703, col: 5, offset: 20770},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FuncGuard",
			pos:  position{line: 705, col: 1, offset: 20779},
			expr: &seqExpr{
				pos: position{line: 705, col: 13, offset: 20791},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 705, col: 13, offset: 20791},
						name: "NotFuncs",
					},
					&ruleRefExpr{
						pos:  position{line: 705, col: 22, offset: 20800},
						name: "__",
					},
					&litMatcher{
						pos:        position{line: 705, col: 25, offset: 20803},
						val:        "(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "NotFuncs",
			pos:  position{line: 707, col: 1, offset: 20808},
			expr: &choiceExpr{
				pos: position{line: 708, col: 5, offset: 20821},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 708, col: 5, offset: 20821},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 709, col: 5, offset: 20831},
						val:        "match",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 710, col: 5, offset: 20843},
						val:        "select",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 711, col: 5, offset: 20856},
						val:        "type",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "MatchExpr",
			pos:  position{line: 713, col: 1, offset: 20864},
			expr: &actionExpr{
				pos: position{line: 714, col: 5, offset: 20878},
				run: (*parser).callonMatchExpr1,
				expr: &seqExpr{
					pos: position{line: 714, col: 5, offset: 20878},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 714, col: 5, offset: 20878},
							val:        "match",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 714, col: 13, offset: 20886},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 714, col: 16, offset: 20889},
							val:        "(",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 714, col: 20, offset: 20893},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 714, col: 25, offset: 20898},
								name: "SearchBoolean",
							},
						},
						&litMatcher{
							pos:        position{line: 714, col: 39, offset: 20912},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SelectExpr",
			pos:  position{line: 716, col: 1, offset: 20938},
			expr: &actionExpr{
				pos: position{line: 717, col: 5, offset: 20953},
				run: (*parser).callonSelectExpr1,
				expr: &seqExpr{
					pos: position{line: 717, col: 5, offset: 20953},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 717, col: 5, offset: 20953},
							val:        "select",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 717, col: 14, offset: 20962},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 717, col: 17, offset: 20965},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 717, col: 21, offset: 20969},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 717, col: 24, offset: 20972},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 717, col: 29, offset: 20977},
								name: "Exprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 717, col: 35, offset: 20983},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 717, col: 38, offset: 20986},
							val:        ")",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 717, col: 42, offset: 20990},
							label: "methods",
							expr: &zeroOrOneExpr{
								pos: position{line: 717, col: 50, offset: 20998},
								expr: &ruleRefExpr{
									pos:  position{line: 717, col: 50, offset: 20998},
									name: "Methods",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Methods",
			pos:  position{line: 725, col: 1, offset: 21397},
			expr: &actionExpr{
				pos: position{line: 726, col: 5, offset: 21409},
				run: (*parser).callonMethods1,
				expr: &labeledExpr{
					pos:   position{line: 726, col: 5, offset: 21409},
					label: "methods",
					expr: &oneOrMoreExpr{
						pos: position{line: 726, col: 13, offset: 21417},
						expr: &ruleRefExpr{
							pos:  position{line: 726, col: 13, offset: 21417},
							name: "Method",
						},
					},
				},
			},
		},
		{
			name: "Method",
			pos:  position{line: 728, col: 1, offset: 21450},
			expr: &actionExpr{
				pos: position{line: 729, col: 5, offset: 21461},
				run: (*parser).callonMethod1,
				expr: &seqExpr{
					pos: position{line: 729, col: 5, offset: 21461},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 729, col: 5, offset: 21461},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 729, col: 8, offset: 21464},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 729, col: 12, offset: 21468},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 729, col: 15, offset: 21471},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 729, col: 17, offset: 21473},
								name: "Function",
							},
						},
					},
				},
			},
		},
		{
			name: "Cast",
			pos:  position{line: 731, col: 1, offset: 21501},
			expr: &actionExpr{
				pos: position{line: 732, col: 5, offset: 21510},
				run: (*parser).callonCast1,
				expr: &seqExpr{
					pos: position{line: 732, col: 5, offset: 21510},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 732, col: 5, offset: 21510},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 732, col: 9, offset: 21514},
								name: "CastType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 732, col: 18, offset: 21523},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 732, col: 21, offset: 21526},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 732, col: 25, offset: 21530},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 732, col: 28, offset: 21533},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 732, col: 33, offset: 21538},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 732, col: 38, offset: 21543},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 732, col: 41, offset: 21546},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 736, col: 1, offset: 21643},
			expr: &actionExpr{
				pos: position{line: 737, col: 5, offset: 21656},
				run: (*parser).callonFunction1,
				expr: &seqExpr{
					pos: position{line: 737, col: 5, offset: 21656},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 737, col: 5, offset: 21656},
							expr: &ruleRefExpr{
								pos:  position{line: 737, col: 6, offset: 21657},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 737, col: 16, offset: 21667},
							label: "fn",
							expr: &ruleRefExpr{
								pos:  position{line: 737, col: 19, offset: 21670},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 737, col: 34, offset: 21685},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 737, col: 37, offset: 21688},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 737, col: 41, offset: 21692},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 737, col: 44, offset: 21695},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 737, col: 49, offset: 21700},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 737, col: 63, offset: 21714},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 737, col: 66, offset: 21717},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OptionalExprs",
			pos:  position{line: 741, col: 1, offset: 21813},
			expr: &choiceExpr{
				pos: position{line: 742, col: 5, offset: 21831},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 742, col: 5, offset: 21831},
						name: "Exprs",
					},
					&actionExpr{
						pos: position{line: 743, col: 5, offset: 21841},
						run: (*parser).callonOptionalExprs3,
						expr: &ruleRefExpr{
							pos:  position{line: 743, col: 5, offset: 21841},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 745, col: 1, offset: 21877},
			expr: &actionExpr{
				pos: position{line: 746, col: 5, offset: 21887},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 746, col: 5, offset: 21887},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 746, col: 5, offset: 21887},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 746, col: 11, offset: 21893},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 746, col: 16, offset: 21898},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 746, col: 21, offset: 21903},
								expr: &actionExpr{
									pos: position{line: 746, col: 22, offset: 21904},
									run: (*parser).callonExprs7,
									expr: &seqExpr{
										pos: position{line: 746, col: 22, offset: 21904},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 746, col: 22, offset: 21904},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 746, col: 25, offset: 21907},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 746, col: 29, offset: 21911},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 746, col: 32, offset: 21914},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 746, col: 34, offset: 21916},
													name: "Expr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 750, col: 1, offset: 22025},
			expr: &actionExpr{
				pos: position{line: 750, col: 13, offset: 22037},
				run: (*parser).callonDerefExpr1,
				expr: &seqExpr{
					pos: position{line: 750, col: 13, offset: 22037},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 750, col: 13, offset: 22037},
							expr: &ruleRefExpr{
								pos:  position{line: 750, col: 14, offset: 22038},
								name: "IP6",
							},
						},
						&labeledExpr{
							pos:   position{line: 750, col: 18, offset: 22042},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 750, col: 20, offset: 22044},
								name: "DerefExprPattern",
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExprPattern",
			pos:  position{line: 752, col: 1, offset: 22080},
			expr: &choiceExpr{
				pos: position{line: 753, col: 5, offset: 22101},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 753, col: 5, offset: 22101},
						run: (*parser).callonDerefExprPattern2,
						expr: &seqExpr{
							pos: position{line: 753, col: 5, offset: 22101},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 753, col: 5, offset: 22101},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 753, col: 11, offset: 22107},
										name: "DotID",
									},
								},
								&labeledExpr{
									pos:   position{line: 753, col: 17, offset: 22113},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 753, col: 22, offset: 22118},
										expr: &ruleRefExpr{
											pos:  position{line: 753, col: 23, offset: 22119},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 756, col: 5, offset: 22190},
						run: (*parser).callonDerefExprPattern9,
						expr: &seqExpr{
							pos: position{line: 756, col: 5, offset: 22190},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 756, col: 5, offset: 22190},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 756, col: 11, offset: 22196},
										name: "RootRecord",
									},
								},
								&labeledExpr{
									pos:   position{line: 756, col: 22, offset: 22207},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 756, col: 27, offset: 22212},
										expr: &ruleRefExpr{
											pos:  position{line: 756, col: 28, offset: 22213},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 759, col: 5, offset: 22284},
						run: (*parser).callonDerefExprPattern16,
						expr: &seqExpr{
							pos: position{line: 759, col: 5, offset: 22284},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 759, col: 5, offset: 22284},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 759, col: 11, offset: 22290},
										name: "Identifier",
									},
								},
								&labeledExpr{
									pos:   position{line: 759, col: 22, offset: 22301},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 759, col: 27, offset: 22306},
										expr: &ruleRefExpr{
											pos:  position{line: 759, col: 28, offset: 22307},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 762, col: 5, offset: 22378},
						run: (*parser).callonDerefExprPattern23,
						expr: &litMatcher{
							pos:        position{line: 762, col: 5, offset: 22378},
							val:        ".",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RootRecord",
			pos:  position{line: 766, col: 1, offset: 22447},
			expr: &actionExpr{
				pos: position{line: 766, col: 14, offset: 22460},
				run: (*parser).callonRootRecord1,
				expr: &litMatcher{
					pos:        position{line: 766, col: 14, offset: 22460},
					val:        "this",
					ignoreCase: false,
				},
			},
		},
		{
			name: "DotID",
			pos:  position{line: 768, col: 1, offset: 22522},
			expr: &choiceExpr{
				pos: position{line: 769, col: 5, offset: 22532},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 769, col: 5, offset: 22532},
						run: (*parser).callonDotID2,
						expr: &seqExpr{
							pos: position{line: 769, col: 5, offset: 22532},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 769, col: 5, offset: 22532},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 769, col: 9, offset: 22536},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 769, col: 15, offset: 22542},
										name: "Identifier",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 778, col: 5, offset: 22758},
						run: (*parser).callonDotID7,
						expr: &seqExpr{
							pos: position{line: 778, col: 5, offset: 22758},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 778, col: 5, offset: 22758},
									val:        ".",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 778, col: 9, offset: 22762},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 778, col: 13, offset: 22766},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 778, col: 18, offset: 22771},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 778, col: 23, offset: 22776},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 788, col: 1, offset: 22981},
			expr: &choiceExpr{
				pos: position{line: 789, col: 5, offset: 22991},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 789, col: 5, offset: 22991},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 789, col: 5, offset: 22991},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 789, col: 5, offset: 22991},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 789, col: 9, offset: 22995},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 789, col: 14, offset: 23000},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 789, col: 27, offset: 23013},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 789, col: 30, offset: 23016},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 789, col: 34, offset: 23020},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 789, col: 37, offset: 23023},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 789, col: 40, offset: 23026},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 789, col: 53, offset: 23039},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 795, col: 5, offset: 23210},
						run: (*parser).callonDeref13,
						expr: &seqExpr{
							pos: position{line: 795, col: 5, offset: 23210},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 795, col: 5, offset: 23210},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 795, col: 9, offset: 23214},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 795, col: 12, offset: 23217},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 795, col: 16, offset: 23221},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 795, col: 19, offset: 23224},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 795, col: 22, offset: 23227},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 795, col: 35, offset: 23240},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 801, col: 5, offset: 23411},
						run: (*parser).callonDeref22,
						expr: &seqExpr{
							pos: position{line: 801, col: 5, offset: 23411},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 801, col: 5, offset: 23411},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 801, col: 9, offset: 23415},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 801, col: 14, offset: 23420},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 801, col: 27, offset: 23433},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 801, col: 30, offset: 23436},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 801, col: 34, offset: 23440},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 801, col: 37, offset: 23443},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 807, col: 5, offset: 23616},
						run: (*parser).callonDeref31,
						expr: &seqExpr{
							pos: position{line: 807, col: 5, offset: 23616},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 807, col: 5, offset: 23616},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 807, col: 9, offset: 23620},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 807, col: 14, offset: 23625},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 807, col: 19, offset: 23630},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 808, col: 5, offset: 23679},
						run: (*parser).callonDeref37,
						expr: &seqExpr{
							pos: position{line: 808, col: 5, offset: 23679},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 808, col: 5, offset: 23679},
									val:        ".",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 808, col: 9, offset: 23683},
									expr: &litMatcher{
										pos:        position{line: 808, col: 11, offset: 23685},
										val:        ".",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 808, col: 16, offset: 23690},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 808, col: 19, offset: 23693},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 810, col: 1, offset: 23744},
			expr: &choiceExpr{
				pos: position{line: 811, col: 5, offset: 23756},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 811, col: 5, offset: 23756},
						name: "Record",
					},
					&ruleRefExpr{
						pos:  position{line: 812, col: 5, offset: 23767},
						name: "Array",
					},
					&ruleRefExpr{
						pos:  position{line: 813, col: 5, offset: 23777},
						name: "Set",
					},
					&ruleRefExpr{
						pos:  position{line: 814, col: 5, offset: 23785},
						name: "Map",
					},
					&ruleRefExpr{
						pos:  position{line: 815, col: 5, offset: 23793},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 816, col: 5, offset: 23805},
						run: (*parser).callonPrimary7,
						expr: &seqExpr{
							pos: position{line: 816, col: 5, offset: 23805},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 816, col: 5, offset: 23805},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 816, col: 9, offset: 23809},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 816, col: 12, offset: 23812},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 816, col: 17, offset: 23817},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 816, col: 22, offset: 23822},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 816, col: 25, offset: 23825},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Record",
			pos:  position{line: 818, col: 1, offset: 23851},
			expr: &actionExpr{
				pos: position{line: 819, col: 5, offset: 23862},
				run: (*parser).callonRecord1,
				expr: &seqExpr{
					pos: position{line: 819, col: 5, offset: 23862},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 819, col: 5, offset: 23862},
							val:        "{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 819, col: 9, offset: 23866},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 819, col: 12, offset: 23869},
							label: "fields",
							expr: &ruleRefExpr{
								pos:  position{line: 819, col: 19, offset: 23876},
								name: "Fields",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 819, col: 26, offset: 23883},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 819, col: 29, offset: 23886},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Fields",
			pos:  position{line: 823, col: 1, offset: 23979},
			expr: &actionExpr{
				pos: position{line: 824, col: 5, offset: 23990},
				run: (*parser).callonFields1,
				expr: &seqExpr{
					pos: position{line: 824, col: 5, offset: 23990},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 824, col: 5, offset: 23990},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 824, col: 11, offset: 23996},
								name: "Field",
							},
						},
						&labeledExpr{
							pos:   position{line: 824, col: 17, offset: 24002},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 824, col: 22, offset: 24007},
								expr: &ruleRefExpr{
									pos:  position{line: 824, col: 22, offset: 24007},
									name: "FieldTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldTail",
			pos:  position{line: 828, col: 1, offset: 24098},
			expr: &actionExpr{
				pos: position{line: 828, col: 13, offset: 24110},
				run: (*parser).callonFieldTail1,
				expr: &seqExpr{
					pos: position{line: 828, col: 13, offset: 24110},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 828, col: 13, offset: 24110},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 828, col: 16, offset: 24113},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 828, col: 20, offset: 24117},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 828, col: 23, offset: 24120},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 828, col: 25, offset: 24122},
								name: "Field",
							},
						},
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 830, col: 1, offset: 24147},
			expr: &actionExpr{
				pos: position{line: 831, col: 5, offset: 24157},
				run: (*parser).callonField1,
				expr: &seqExpr{
					pos: position{line: 831, col: 5, offset: 24157},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 831, col: 5, offset: 24157},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 831, col: 10, offset: 24162},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 831, col: 20, offset: 24172},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 831, col: 23, offset: 24175},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 831, col: 27, offset: 24179},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 831, col: 30, offset: 24182},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 831, col: 36, offset: 24188},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Array",
			pos:  position{line: 835, col: 1, offset: 24273},
			expr: &actionExpr{
				pos: position{line: 836, col: 5, offset: 24283},
				run: (*parser).callonArray1,
				expr: &seqExpr{
					pos: position{line: 836, col: 5, offset: 24283},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 836, col: 5, offset: 24283},
							val:        "[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 836, col: 9, offset: 24287},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 836, col: 12, offset: 24290},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 836, col: 18, offset: 24296},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 836, col: 32, offset: 24310},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 836, col: 35, offset: 24313},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Set",
			pos:  position{line: 840, col: 1, offset: 24403},
			expr: &actionExpr{
				pos: position{line: 841, col: 5, offset: 24411},
				run: (*parser).callonSet1,
				expr: &seqExpr{
					pos: position{line: 841, col: 5, offset: 24411},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 841, col: 5, offset: 24411},
							val:        "|[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 841, col: 10, offset: 24416},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 841, col: 13, offset: 24419},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 841, col: 19, offset: 24425},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 841, col: 33, offset: 24439},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 841, col: 36, offset: 24442},
							val:        "]|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Map",
			pos:  position{line: 845, col: 1, offset: 24531},
			expr: &actionExpr{
				pos: position{line: 846, col: 5, offset: 24539},
				run: (*parser).callonMap1,
				expr: &seqExpr{
					pos: position{line: 846, col: 5, offset: 24539},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 846, col: 5, offset: 24539},
							val:        "|{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 846, col: 10, offset: 24544},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 846, col: 13, offset: 24547},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 846, col: 19, offset: 24553},
								name: "Entries",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 846, col: 27, offset: 24561},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 846, col: 30, offset: 24564},
							val:        "}|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Entries",
			pos:  position{line: 850, col: 1, offset: 24655},
			expr: &choiceExpr{
				pos: position{line: 851, col: 5, offset: 24667},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 851, col: 5, offset: 24667},
						run: (*parser).callonEntries2,
						expr: &seqExpr{
							pos: position{line: 851, col: 5, offset: 24667},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 851, col: 5, offset: 24667},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 851, col: 11, offset: 24673},
										name: "Entry",
									},
								},
								&labeledExpr{
									pos:   position{line: 851, col: 17, offset: 24679},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 851, col: 22, offset: 24684},
										expr: &ruleRefExpr{
											pos:  position{line: 851, col: 22, offset: 24684},
											name: "EntryTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 854, col: 5, offset: 24778},
						run: (*parser).callonEntries9,
						expr: &ruleRefExpr{
							pos:  position{line: 854, col: 5, offset: 24778},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "EntryTail",
			pos:  position{line: 857, col: 1, offset: 24815},
			expr: &actionExpr{
				pos: position{line: 857, col: 13, offset: 24827},
				run: (*parser).callonEntryTail1,
				expr: &seqExpr{
					pos: position{line: 857, col: 13, offset: 24827},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 857, col: 13, offset: 24827},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 857, col: 16, offset: 24830},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 857, col: 20, offset: 24834},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 857, col: 23, offset: 24837},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 857, col: 25, offset: 24839},
								name: "Entry",
							},
						},
					},
				},
			},
		},
		{
			name: "Entry",
			pos:  position{line: 859, col: 1, offset: 24864},
			expr: &actionExpr{
				pos: position{line: 860, col: 5, offset: 24874},
				run: (*parser).callonEntry1,
				expr: &seqExpr{
					pos: position{line: 860, col: 5, offset: 24874},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 860, col: 5, offset: 24874},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 860, col: 9, offset: 24878},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 860, col: 14, offset: 24883},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 860, col: 17, offset: 24886},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 860, col: 21, offset: 24890},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 860, col: 24, offset: 24893},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 860, col: 30, offset: 24899},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLProc",
			pos:  position{line: 866, col: 1, offset: 25006},
			expr: &actionExpr{
				pos: position{line: 867, col: 5, offset: 25018},
				run: (*parser).callonSQLProc1,
				expr: &seqExpr{
					pos: position{line: 867, col: 5, offset: 25018},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 867, col: 5, offset: 25018},
							label: "selection",
							expr: &ruleRefExpr{
								pos:  position{line: 867, col: 15, offset: 25028},
								name: "SQLSelect",
							},
						},
						&labeledExpr{
							pos:   position{line: 868, col: 5, offset: 25042},
							label: "from",
							expr: &zeroOrOneExpr{
								pos: position{line: 868, col: 10, offset: 25047},
								expr: &ruleRefExpr{
									pos:  position{line: 868, col: 10, offset: 25047},
									name: "SQLFrom",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 869, col: 5, offset: 25060},
							label: "joins",
							expr: &zeroOrOneExpr{
								pos: position{line: 869, col: 11, offset: 25066},
								expr: &ruleRefExpr{
									pos:  position{line: 869, col: 11, offset: 25066},
									name: "SQLJoins",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 870, col: 5, offset: 25080},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 870, col: 11, offset: 25086},
								expr: &ruleRefExpr{
									pos:  position{line: 870, col: 11, offset: 25086},
									name: "SQLWhere",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 871, col: 5, offset: 25100},
							label: "groupby",
							expr: &zeroOrOneExpr{
								pos: position{line: 871, col: 13, offset: 25108},
								expr: &ruleRefExpr{
									pos:  position{line: 871, col: 13, offset: 25108},
									name: "SQLGroupBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 872, col: 5, offset: 25124},
							label: "having",
							expr: &zeroOrOneExpr{
								pos: position{line: 872, col: 12, offset: 25131},
								expr: &ruleRefExpr{
									pos:  position{line: 872, col: 12, offset: 25131},
									name: "SQLHaving",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 873, col: 5, offset: 25146},
							label: "orderby",
							expr: &zeroOrOneExpr{
								pos: position{line: 873, col: 13, offset: 25154},
								expr: &ruleRefExpr{
									pos:  position{line: 873, col: 13, offset: 25154},
									name: "SQLOrderBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 874, col: 5, offset: 25170},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 874, col: 11, offset: 25176},
								name: "SQLLimit",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLSelect",
			pos:  position{line: 898, col: 1, offset: 25543},
			expr: &choiceExpr{
				pos: position{line: 899, col: 5, offset: 25557},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 899, col: 5, offset: 25557},
						run: (*parser).callonSQLSelect2,
						expr: &seqExpr{
							pos: position{line: 899, col: 5, offset: 25557},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 899, col: 5, offset: 25557},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 899, col: 12, offset: 25564},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 899, col: 14, offset: 25566},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 900, col: 5, offset: 25594},
						run: (*parser).callonSQLSelect7,
						expr: &seqExpr{
							pos: position{line: 900, col: 5, offset: 25594},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 900, col: 5, offset: 25594},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 900, col: 12, offset: 25601},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 900, col: 14, offset: 25603},
									label: "assignments",
									expr: &ruleRefExpr{
										pos:  position{line: 900, col: 26, offset: 25615},
										name: "SQLAssignments",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignment",
			pos:  position{line: 902, col: 1, offset: 25659},
			expr: &choiceExpr{
				pos: position{line: 903, col: 5, offset: 25677},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 903, col: 5, offset: 25677},
						run: (*parser).callonSQLAssignment2,
						expr: &seqExpr{
							pos: position{line: 903, col: 5, offset: 25677},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 903, col: 5, offset: 25677},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 903, col: 9, offset: 25681},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 903, col: 14, offset: 25686},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 903, col: 16, offset: 25688},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 903, col: 19, offset: 25691},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 903, col: 21, offset: 25693},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 903, col: 25, offset: 25697},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 904, col: 5, offset: 25791},
						run: (*parser).callonSQLAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 904, col: 5, offset: 25791},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 904, col: 10, offset: 25796},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignments",
			pos:  position{line: 906, col: 1, offset: 25888},
			expr: &actionExpr{
				pos: position{line: 907, col: 5, offset: 25907},
				run: (*parser).callonSQLAssignments1,
				expr: &seqExpr{
					pos: position{line: 907, col: 5, offset: 25907},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 907, col: 5, offset: 25907},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 907, col: 11, offset: 25913},
								name: "SQLAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 907, col: 25, offset: 25927},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 907, col: 30, offset: 25932},
								expr: &actionExpr{
									pos: position{line: 907, col: 31, offset: 25933},
									run: (*parser).callonSQLAssignments7,
									expr: &seqExpr{
										pos: position{line: 907, col: 31, offset: 25933},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 907, col: 31, offset: 25933},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 907, col: 34, offset: 25936},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 907, col: 38, offset: 25940},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 907, col: 41, offset: 25943},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 907, col: 46, offset: 25948},
													name: "SQLAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLFrom",
			pos:  position{line: 911, col: 1, offset: 26069},
			expr: &choiceExpr{
				pos: position{line: 912, col: 5, offset: 26081},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 912, col: 5, offset: 26081},
						run: (*parser).callonSQLFrom2,
						expr: &seqExpr{
							pos: position{line: 912, col: 5, offset: 26081},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 912, col: 5, offset: 26081},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 912, col: 7, offset: 26083},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 912, col: 12, offset: 26088},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 912, col: 14, offset: 26090},
									label: "table",
									expr: &ruleRefExpr{
										pos:  position{line: 912, col: 20, offset: 26096},
										name: "SQLTable",
									},
								},
								&labeledExpr{
									pos:   position{line: 912, col: 29, offset: 26105},
									label: "alias",
									expr: &zeroOrOneExpr{
										pos: position{line: 912, col: 35, offset: 26111},
										expr: &ruleRefExpr{
											pos:  position{line: 912, col: 35, offset: 26111},
											name: "SQLAlias",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 915, col: 5, offset: 26206},
						run: (*parser).callonSQLFrom12,
						expr: &seqExpr{
							pos: position{line: 915, col: 5, offset: 26206},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 915, col: 5, offset: 26206},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 915, col: 7, offset: 26208},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 915, col: 12, offset: 26213},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 915, col: 14, offset: 26215},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAlias",
			pos:  position{line: 917, col: 1, offset: 26240},
			expr: &choiceExpr{
				pos: position{line: 918, col: 5, offset: 26253},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 918, col: 5, offset: 26253},
						run: (*parser).callonSQLAlias2,
						expr: &seqExpr{
							pos: position{line: 918, col: 5, offset: 26253},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 918, col: 5, offset: 26253},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 918, col: 7, offset: 26255},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 918, col: 10, offset: 26258},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 918, col: 12, offset: 26260},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 918, col: 15, offset: 26263},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 919, col: 5, offset: 26291},
						run: (*parser).callonSQLAlias9,
						expr: &seqExpr{
							pos: position{line: 919, col: 5, offset: 26291},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 919, col: 5, offset: 26291},
									name: "_",
								},
								&notExpr{
									pos: position{line: 919, col: 7, offset: 26293},
									expr: &seqExpr{
										pos: position{line: 919, col: 9, offset: 26295},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 919, col: 9, offset: 26295},
												name: "SQLTokenSentinels",
											},
											&ruleRefExpr{
												pos:  position{line: 919, col: 27, offset: 26313},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 919, col: 30, offset: 26316},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 919, col: 33, offset: 26319},
										name: "Lval",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLTable",
			pos:  position{line: 921, col: 1, offset: 26344},
			expr: &ruleRefExpr{
				pos:  position{line: 922, col: 5, offset: 26357},
				name: "Expr",
			},
		},
		{
			name: "SQLJoins",
			pos:  position{line: 924, col: 1, offset: 26363},
			expr: &actionExpr{
				pos: position{line: 925, col: 5, offset: 26376},
				run: (*parser).callonSQLJoins1,
				expr: &seqExpr{
					pos: position{line: 925, col: 5, offset: 26376},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 925, col: 5, offset: 26376},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 925, col: 11, offset: 26382},
								name: "SQLJoin",
							},
						},
						&labeledExpr{
							pos:   position{line: 925, col: 19, offset: 26390},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 925, col: 24, offset: 26395},
								expr: &actionExpr{
									pos: position{line: 925, col: 25, offset: 26396},
									run: (*parser).callonSQLJoins7,
									expr: &labeledExpr{
										pos:   position{line: 925, col: 25, offset: 26396},
										label: "join",
										expr: &ruleRefExpr{
											pos:  position{line: 925, col: 30, offset: 26401},
											name: "SQLJoin",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoin",
			pos:  position{line: 929, col: 1, offset: 26516},
			expr: &actionExpr{
				pos: position{line: 930, col: 5, offset: 26528},
				run: (*parser).callonSQLJoin1,
				expr: &seqExpr{
					pos: position{line: 930, col: 5, offset: 26528},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 930, col: 5, offset: 26528},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 930, col: 11, offset: 26534},
								name: "SQLJoinStyle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 930, col: 24, offset: 26547},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 930, col: 26, offset: 26549},
							name: "JOIN",
						},
						&ruleRefExpr{
							pos:  position{line: 930, col: 31, offset: 26554},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 930, col: 33, offset: 26556},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 930, col: 39, offset: 26562},
								name: "SQLTable",
							},
						},
						&labeledExpr{
							pos:   position{line: 930, col: 48, offset: 26571},
							label: "alias",
							expr: &zeroOrOneExpr{
								pos: position{line: 930, col: 54, offset: 26577},
								expr: &ruleRefExpr{
									pos:  position{line: 930, col: 54, offset: 26577},
									name: "SQLAlias",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 930, col: 64, offset: 26587},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 930, col: 66, offset: 26589},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 930, col: 69, offset: 26592},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 930, col: 71, offset: 26594},
							label: "leftKey",
							expr: &ruleRefExpr{
								pos:  position{line: 930, col: 79, offset: 26602},
								name: "JoinKey",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 930, col: 87, offset: 26610},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 930, col: 90, offset: 26613},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 930, col: 94, offset: 26617},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 930, col: 97, offset: 26620},
							label: "rightKey",
							expr: &ruleRefExpr{
								pos:  position{line: 930, col: 106, offset: 26629},
								name: "JoinKey",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoinStyle",
			pos:  position{line: 949, col: 1, offset: 26864},
			expr: &choiceExpr{
				pos: position{line: 950, col: 5, offset: 26881},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 950, col: 5, offset: 26881},
						run: (*parser).callonSQLJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 950, col: 5, offset: 26881},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 950, col: 5, offset: 26881},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 950, col: 7, offset: 26883},
									label: "style",
									expr: &choiceExpr{
										pos: position{line: 950, col: 14, offset: 26890},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 950, col: 14, offset: 26890},
												name: "ANTI",
											},
											&ruleRefExpr{
												pos:  position{line: 950, col: 21, offset: 26897},
												name: "INNER",
											},
											&ruleRefExpr{
												pos:  position{line: 950, col: 29, offset: 26905},
												name: "LEFT",
											},
											&ruleRefExpr{
												pos:  position{line: 950, col: 36, offset: 26912},
												name: "RIGHT",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 951, col: 5, offset: 26945},
						run: (*parser).callonSQLJoinStyle11,
						expr: &litMatcher{
							pos:        position{line: 951, col: 5, offset: 26945},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLWhere",
			pos:  position{line: 953, col: 1, offset: 26973},
			expr: &actionExpr{
				pos: position{line: 954, col: 5, offset: 26986},
				run: (*parser).callonSQLWhere1,
				expr: &seqExpr{
					pos: position{line: 954, col: 5, offset: 26986},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 954, col: 5, offset: 26986},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 954, col: 7, offset: 26988},
							name: "WHERE",
						},
						&ruleRefExpr{
							pos:  position{line: 954, col: 13, offset: 26994},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 954, col: 15, offset: 26996},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 954, col: 20, offset: 27001},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLGroupBy",
			pos:  position{line: 956, col: 1, offset: 27037},
			expr: &actionExpr{
				pos: position{line: 957, col: 5, offset: 27052},
				run: (*parser).callonSQLGroupBy1,
				expr: &seqExpr{
					pos: position{line: 957, col: 5, offset: 27052},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 957, col: 5, offset: 27052},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 957, col: 7, offset: 27054},
							name: "GROUP",
						},
						&ruleRefExpr{
							pos:  position{line: 957, col: 13, offset: 27060},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 957, col: 15, offset: 27062},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 957, col: 18, offset: 27065},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 957, col: 20, offset: 27067},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 957, col: 28, offset: 27075},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLHaving",
			pos:  position{line: 959, col: 1, offset: 27111},
			expr: &actionExpr{
				pos: position{line: 960, col: 5, offset: 27125},
				run: (*parser).callonSQLHaving1,
				expr: &seqExpr{
					pos: position{line: 960, col: 5, offset: 27125},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 960, col: 5, offset: 27125},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 960, col: 7, offset: 27127},
							name: "HAVING",
						},
						&ruleRefExpr{
							pos:  position{line: 960, col: 14, offset: 27134},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 960, col: 16, offset: 27136},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 960, col: 21, offset: 27141},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrderBy",
			pos:  position{line: 962, col: 1, offset: 27177},
			expr: &actionExpr{
				pos: position{line: 963, col: 5, offset: 27192},
				run: (*parser).callonSQLOrderBy1,
				expr: &seqExpr{
					pos: position{line: 963, col: 5, offset: 27192},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 963, col: 5, offset: 27192},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 963, col: 7, offset: 27194},
							name: "ORDER",
						},
						&ruleRefExpr{
							pos:  position{line: 963, col: 13, offset: 27200},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 963, col: 15, offset: 27202},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 963, col: 18, offset: 27205},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 963, col: 20, offset: 27207},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 963, col: 25, offset: 27212},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 963, col: 31, offset: 27218},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 963, col: 37, offset: 27224},
								name: "SQLOrder",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrder",
			pos:  position{line: 967, col: 1, offset: 27334},
			expr: &choiceExpr{
				pos: position{line: 968, col: 5, offset: 27347},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 968, col: 5, offset: 27347},
						run: (*parser).callonSQLOrder2,
						expr: &seqExpr{
							pos: position{line: 968, col: 5, offset: 27347},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 968, col: 5, offset: 27347},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 968, col: 7, offset: 27349},
									label: "dir",
									expr: &choiceExpr{
										pos: position{line: 968, col: 12, offset: 27354},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 968, col: 12, offset: 27354},
												name: "ASC",
											},
											&ruleRefExpr{
												pos:  position{line: 968, col: 18, offset: 27360},
												name: "DESC",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 969, col: 5, offset: 27390},
						run: (*parser).callonSQLOrder9,
						expr: &litMatcher{
							pos:        position{line: 969, col: 5, offset: 27390},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLLimit",
			pos:  position{line: 971, col: 1, offset: 27416},
			expr: &choiceExpr{
				pos: position{line: 972, col: 5, offset: 27429},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 972, col: 5, offset: 27429},
						run: (*parser).callonSQLLimit2,
						expr: &seqExpr{
							pos: position{line: 972, col: 5, offset: 27429},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 972, col: 5, offset: 27429},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 972, col: 7, offset: 27431},
									name: "LIMIT",
								},
								&ruleRefExpr{
									pos:  position{line: 972, col: 13, offset: 27437},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 972, col: 15, offset: 27439},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 972, col: 21, offset: 27445},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 973, col: 5, offset: 27476},
						run: (*parser).callonSQLLimit9,
						expr: &litMatcher{
							pos:        position{line: 973, col: 5, offset: 27476},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SELECT",
			pos:  position{line: 975, col: 1, offset: 27498},
			expr: &actionExpr{
				pos: position{line: 975, col: 10, offset: 27507},
				run: (*parser).callonSELECT1,
				expr: &litMatcher{
					pos:        position{line: 975, col: 10, offset: 27507},
					val:        "select",
					ignoreCase: true,
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 976, col: 1, offset: 27542},
			expr: &actionExpr{
				pos: position{line: 976, col: 6, offset: 27547},
				run: (*parser).callonAS1,
				expr: &litMatcher{
					pos:        position{line: 976, col: 6, offset: 27547},
					val:        "as",
					ignoreCase: true,
				},
			},
		},
		{
			name: "FROM",
			pos:  position{line: 977, col: 1, offset: 27574},
			expr: &actionExpr{
				pos: position{line: 977, col: 8, offset: 27581},
				run: (*parser).callonFROM1,
				expr: &litMatcher{
					pos:        position{line: 977, col: 8, offset: 27581},
					val:        "from",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JOIN",
			pos:  position{line: 978, col: 1, offset: 27612},
			expr: &actionExpr{
				pos: position{line: 978, col: 8, offset: 27619},
				run: (*parser).callonJOIN1,
				expr: &litMatcher{
					pos:        position{line: 978, col: 8, offset: 27619},
					val:        "join",
					ignoreCase: true,
				},
			},
		},
		{
			name: "WHERE",
			pos:  position{line: 979, col: 1, offset: 27650},
			expr: &actionExpr{
				pos: position{line: 979, col: 9, offset: 27658},
				run: (*parser).callonWHERE1,
				expr: &litMatcher{
					pos:        position{line: 979, col: 9, offset: 27658},
					val:        "where",
					ignoreCase: true,
				},
			},
		},
		{
			name: "GROUP",
			pos:  position{line: 980, col: 1, offset: 27691},
			expr: &actionExpr{
				pos: position{line: 980, col: 9, offset: 27699},
				run: (*parser).callonGROUP1,
				expr: &litMatcher{
					pos:        position{line: 980, col: 9, offset: 27699},
					val:        "group",
					ignoreCase: true,
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 981, col: 1, offset: 27732},
			expr: &ruleRefExpr{
				pos:  position{line: 981, col: 6, offset: 27737},
				name: "ByToken",
			},
		},
		{
			name: "HAVING",
			pos:  position{line: 982, col: 1, offset: 27745},
			expr: &actionExpr{
				pos: position{line: 982, col: 10, offset: 27754},
				run: (*parser).callonHAVING1,
				expr: &litMatcher{
					pos:        position{line: 982, col: 10, offset: 27754},
					val:        "having",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ORDER",
			pos:  position{line: 983, col: 1, offset: 27789},
			expr: &actionExpr{
				pos: position{line: 983, col: 9, offset: 27797},
				run: (*parser).callonORDER1,
				expr: &litMatcher{
					pos:        position{line: 983, col: 9, offset: 27797},
					val:        "order",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ON",
			pos:  position{line: 984, col: 1, offset: 27830},
			expr: &actionExpr{
				pos: position{line: 984, col: 6, offset: 27835},
				run: (*parser).callonON1,
				expr: &litMatcher{
					pos:        position{line: 984, col: 6, offset: 27835},
					val:        "on",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LIMIT",
			pos:  position{line: 985, col: 1, offset: 27862},
			expr: &actionExpr{
				pos: position{line: 985, col: 9, offset: 27870},
				run: (*parser).callonLIMIT1,
				expr: &litMatcher{
					pos:        position{line: 985, col: 9, offset: 27870},
					val:        "limit",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ASC",
			pos:  position{line: 986, col: 1, offset: 27903},
			expr: &actionExpr{
				pos: position{line: 986, col: 7, offset: 27909},
				run: (*parser).callonASC1,
				expr: &litMatcher{
					pos:        position{line: 986, col: 7, offset: 27909},
					val:        "asc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "DESC",
			pos:  position{line: 987, col: 1, offset: 27938},
			expr: &actionExpr{
				pos: position{line: 987, col: 8, offset: 27945},
				run: (*parser).callonDESC1,
				expr: &litMatcher{
					pos:        position{line: 987, col: 8, offset: 27945},
					val:        "desc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ANTI",
			pos:  position{line: 988, col: 1, offset: 27976},
			expr: &actionExpr{
				pos: position{line: 988, col: 8, offset: 27983},
				run: (*parser).callonANTI1,
				expr: &litMatcher{
					pos:        position{line: 988, col: 8, offset: 27983},
					val:        "anti",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LEFT",
			pos:  position{line: 989, col: 1, offset: 28014},
			expr: &actionExpr{
				pos: position{line: 989, col: 8, offset: 28021},
				run: (*parser).callonLEFT1,
				expr: &litMatcher{
					pos:        position{line: 989, col: 8, offset: 28021},
					val:        "left",
					ignoreCase: true,
				},
			},
		},
		{
			name: "RIGHT",
			pos:  position{line: 990, col: 1, offset: 28052},
			expr: &actionExpr{
				pos: position{line: 990, col: 9, offset: 28060},
				run: (*parser).callonRIGHT1,
				expr: &litMatcher{
					pos:        position{line: 990, col: 9, offset: 28060},
					val:        "right",
					ignoreCase: true,
				},
			},
		},
		{
			name: "INNER",
			pos:  position{line: 991, col: 1, offset: 28093},
			expr: &actionExpr{
				pos: position{line: 991, col: 9, offset: 28101},
				run: (*parser).callonINNER1,
				expr: &litMatcher{
					pos:        position{line: 991, col: 9, offset: 28101},
					val:        "inner",
					ignoreCase: true,
				},
			},
		},
		{
			name: "SQLTokenSentinels",
			pos:  position{line: 993, col: 1, offset: 28135},
			expr: &choiceExpr{
				pos: position{line: 994, col: 5, offset: 28157},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 994, col: 5, offset: 28157},
						name: "SELECT",
					},
					&ruleRefExpr{
						pos:  position{line: 994, col: 14, offset: 28166},
						name: "AS",
					},
					&ruleRefExpr{
						pos:  position{line: 994, col: 19, offset: 28171},
						name: "FROM",
					},
					&ruleRefExpr{
						pos:  position{line: 994, col: 27, offset: 28179},
						name: "JOIN",
					},
					&ruleRefExpr{
						pos:  position{line: 994, col: 34, offset: 28186},
						name: "WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 994, col: 42, offset: 28194},
						name: "GROUP",
					},
					&ruleRefExpr{
						pos:  position{line: 994, col: 50, offset: 28202},
						name: "HAVING",
					},
					&ruleRefExpr{
						pos:  position{line: 994, col: 59, offset: 28211},
						name: "ORDER",
					},
					&ruleRefExpr{
						pos:  position{line: 994, col: 67, offset: 28219},
						name: "LIMIT",
					},
					&ruleRefExpr{
						pos:  position{line: 994, col: 75, offset: 28227},
						name: "ON",
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 998, col: 1, offset: 28253},
			expr: &choiceExpr{
				pos: position{line: 999, col: 5, offset: 28265},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 999, col: 5, offset: 28265},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1000, col: 5, offset: 28281},
						name: "StringLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1001, col: 5, offset: 28299},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1002, col: 5, offset: 28317},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1003, col: 5, offset: 28336},
						name: "BytesLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1004, col: 5, offset: 28353},
						name: "Duration",
					},
					&ruleRefExpr{
						pos:  position{line: 1005, col: 5, offset: 28366},
						name: "Time",
					},
					&ruleRefExpr{
						pos:  position{line: 1006, col: 5, offset: 28375},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1007, col: 5, offset: 28392},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1008, col: 5, offset: 28411},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1009, col: 5, offset: 28430},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "StringLiteral",
			pos:  position{line: 1011, col: 1, offset: 28443},
			expr: &actionExpr{
				pos: position{line: 1012, col: 5, offset: 28461},
				run: (*parser).callonStringLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1012, col: 5, offset: 28461},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1012, col: 7, offset: 28463},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 1016, col: 1, offset: 28576},
			expr: &choiceExpr{
				pos: position{line: 1017, col: 5, offset: 28594},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1017, col: 5, offset: 28594},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 1017, col: 5, offset: 28594},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1017, col: 5, offset: 28594},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1017, col: 7, offset: 28596},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 1017, col: 14, offset: 28603},
									expr: &ruleRefExpr{
										pos:  position{line: 1017, col: 15, offset: 28604},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1020, col: 5, offset: 28719},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 1020, col: 5, offset: 28719},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1020, col: 7, offset: 28721},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 1024, col: 1, offset: 28825},
			expr: &choiceExpr{
				pos: position{line: 1025, col: 5, offset: 28844},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1025, col: 5, offset: 28844},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 1025, col: 5, offset: 28844},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1025, col: 5, offset: 28844},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1025, col: 7, offset: 28846},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 1025, col: 11, offset: 28850},
									expr: &ruleRefExpr{
										pos:  position{line: 1025, col: 12, offset: 28851},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1028, col: 5, offset: 28965},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 1028, col: 5, offset: 28965},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1028, col: 7, offset: 28967},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 1032, col: 1, offset: 29066},
			expr: &actionExpr{
				pos: position{line: 1033, col: 5, offset: 29083},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1033, col: 5, offset: 29083},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1033, col: 7, offset: 29085},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 1037, col: 1, offset: 29198},
			expr: &actionExpr{
				pos: position{line: 1038, col: 5, offset: 29217},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1038, col: 5, offset: 29217},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1038, col: 7, offset: 29219},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 1042, col: 1, offset: 29328},
			expr: &choiceExpr{
				pos: position{line: 1043, col: 5, offset: 29347},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1043, col: 5, offset: 29347},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 1043, col: 5, offset: 29347},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1044, col: 5, offset: 29460},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 1044, col: 5, offset: 29460},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 1046, col: 1, offset: 29571},
			expr: &actionExpr{
				pos: position{line: 1047, col: 5, offset: 29587},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 1047, col: 5, offset: 29587},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "BytesLiteral",
			pos:  position{line: 1049, col: 1, offset: 29693},
			expr: &actionExpr{
				pos: position{line: 1050, col: 5, offset: 29710},
				run: (*parser).callonBytesLiteral1,
				expr: &seqExpr{
					pos: position{line: 1050, col: 5, offset: 29710},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1050, col: 5, offset: 29710},
							val:        "0x",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1050, col: 10, offset: 29715},
							expr: &ruleRefExpr{
								pos:  position{line: 1050, col: 10, offset: 29715},
								name: "HexDigit",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeLiteral",
			pos:  position{line: 1054, col: 1, offset: 29830},
			expr: &actionExpr{
				pos: position{line: 1055, col: 5, offset: 29846},
				run: (*parser).callonTypeLiteral1,
				expr: &seqExpr{
					pos: position{line: 1055, col: 5, offset: 29846},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1055, col: 5, offset: 29846},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1055, col: 9, offset: 29850},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1055, col: 13, offset: 29854},
								name: "Type",
							},
						},
						&litMatcher{
							pos:        position{line: 1055, col: 18, offset: 29859},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "CastType",
			pos:  position{line: 1059, col: 1, offset: 29948},
			expr: &choiceExpr{
				pos: position{line: 1060, col: 5, offset: 29961},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1060, col: 5, offset: 29961},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1061, col: 5, offset: 29977},
						name: "PrimitiveType",
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 1063, col: 1, offset: 29992},
			expr: &choiceExpr{
				pos: position{line: 1064, col: 5, offset: 30001},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1064, col: 5, offset: 30001},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1065, col: 5, offset: 30017},
						name: "AmbiguousType",
					},
					&ruleRefExpr{
						pos:  position{line: 1066, col: 5, offset: 30035},
						name: "ComplexType",
					},
				},
			},
		},
		{
			name: "AmbiguousType",
			pos:  position{line: 1068, col: 1, offset: 30048},
			expr: &choiceExpr{
				pos: position{line: 1069, col: 5, offset: 30066},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1069, col: 5, offset: 30066},
						run: (*parser).callonAmbiguousType2,
						expr: &seqExpr{
							pos: position{line: 1069, col: 5, offset: 30066},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1069, col: 5, offset: 30066},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1069, col: 10, offset: 30071},
										name: "PrimitiveType",
									},
								},
								&notExpr{
									pos: position{line: 1069, col: 24, offset: 30085},
									expr: &ruleRefExpr{
										pos:  position{line: 1069, col: 25, offset: 30086},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1070, col: 5, offset: 30126},
						run: (*parser).callonAmbiguousType8,
						expr: &seqExpr{
							pos: position{line: 1070, col: 5, offset: 30126},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1070, col: 5, offset: 30126},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1070, col: 10, offset: 30131},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1070, col: 25, offset: 30146},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1070, col: 28, offset: 30149},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1070, col: 32, offset: 30153},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1070, col: 35, offset: 30156},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1070, col: 39, offset: 30160},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1070, col: 42, offset: 30163},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1070, col: 46, offset: 30167},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1070, col: 51, offset: 30172},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1070, col: 54, offset: 30175},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1073, col: 5, offset: 30276},
						run: (*parser).callonAmbiguousType21,
						expr: &labeledExpr{
							pos:   position{line: 1073, col: 5, offset: 30276},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1073, col: 10, offset: 30281},
								name: "IdentifierName",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1076, col: 5, offset: 30383},
						run: (*parser).callonAmbiguousType24,
						expr: &seqExpr{
							pos: position{line: 1076, col: 5, offset: 30383},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1076, col: 5, offset: 30383},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1076, col: 9, offset: 30387},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1076, col: 12, offset: 30390},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 1076, col: 14, offset: 30392},
										name: "TypeUnion",
									},
								},
								&litMatcher{
									pos:        position{line: 1076, col: 25, offset: 30403},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeUnion",
			pos:  position{line: 1078, col: 1, offset: 30426},
			expr: &actionExpr{
				pos: position{line: 1079, col: 5, offset: 30440},
				run: (*parser).callonTypeUnion1,
				expr: &labeledExpr{
					pos:   position{line: 1079, col: 5, offset: 30440},
					label: "types",
					expr: &ruleRefExpr{
						pos:  position{line: 1079, col: 11, offset: 30446},
						name: "TypeList",
					},
				},
			},
		},
		{
			name: "TypeList",
			pos:  position{line: 1083, col: 1, offset: 30542},
			expr: &actionExpr{
				pos: position{line: 1084, col: 5, offset: 30555},
				run: (*parser).callonTypeList1,
				expr: &seqExpr{
					pos: position{line: 1084, col: 5, offset: 30555},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1084, col: 5, offset: 30555},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1084, col: 11, offset: 30561},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 1084, col: 16, offset: 30566},
							label: "rest",
							expr: &oneOrMoreExpr{
								pos: position{line: 1084, col: 21, offset: 30571},
								expr: &ruleRefExpr{
									pos:  position{line: 1084, col: 21, offset: 30571},
									name: "TypeListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeListTail",
			pos:  position{line: 1088, col: 1, offset: 30665},
			expr: &actionExpr{
				pos: position{line: 1088, col: 16, offset: 30680},
				run: (*parser).callonTypeListTail1,
				expr: &seqExpr{
					pos: position{line: 1088, col: 16, offset: 30680},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1088, col: 16, offset: 30680},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1088, col: 19, offset: 30683},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1088, col: 23, offset: 30687},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1088, col: 26, offset: 30690},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1088, col: 30, offset: 30694},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexType",
			pos:  position{line: 1090, col: 1, offset: 30720},
			expr: &choiceExpr{
				pos: position{line: 1091, col: 5, offset: 30736},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1091, col: 5, offset: 30736},
						run: (*parser).callonComplexType2,
						expr: &seqExpr{
							pos: position{line: 1091, col: 5, offset: 30736},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1091, col: 5, offset: 30736},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1091, col: 9, offset: 30740},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1091, col: 12, offset: 30743},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 1091, col: 19, offset: 30750},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1091, col: 33, offset: 30764},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1091, col: 36, offset: 30767},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1094, col: 5, offset: 30862},
						run: (*parser).callonComplexType10,
						expr: &seqExpr{
							pos: position{line: 1094, col: 5, offset: 30862},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1094, col: 5, offset: 30862},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1094, col: 9, offset: 30866},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1094, col: 12, offset: 30869},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1094, col: 16, offset: 30873},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1094, col: 21, offset: 30878},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1094, col: 24, offset: 30881},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1097, col: 5, offset: 30970},
						run: (*parser).callonComplexType18,
						expr: &seqExpr{
							pos: position{line: 1097, col: 5, offset: 30970},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1097, col: 5, offset: 30970},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1097, col: 10, offset: 30975},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1097, col: 14, offset: 30979},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1097, col: 18, offset: 30983},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1097, col: 23, offset: 30988},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1097, col: 26, offset: 30991},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1100, col: 5, offset: 31079},
						run: (*parser).callonComplexType26,
						expr: &seqExpr{
							pos: position{line: 1100, col: 5, offset: 31079},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1100, col: 5, offset: 31079},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1100, col: 10, offset: 31084},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1100, col: 13, offset: 31087},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 1100, col: 21, offset: 31095},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1100, col: 26, offset: 31100},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1100, col: 29, offset: 31103},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1100, col: 33, offset: 31107},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1100, col: 36, offset: 31110},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 1100, col: 44, offset: 31118},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1100, col: 49, offset: 31123},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1100, col: 52, offset: 31126},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 1104, col: 1, offset: 31240},
			expr: &actionExpr{
				pos: position{line: 1105, col: 5, offset: 31258},
				run: (*parser).callonPrimitiveType1,
				expr: &choiceExpr{
					pos: position{line: 1105, col: 9, offset: 31262},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 1105, col: 9, offset: 31262},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1105, col: 19, offset: 31272},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1105, col: 30, offset: 31283},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1105, col: 41, offset: 31294},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1106, col: 9, offset: 31311},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1106, col: 18, offset: 31320},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1106, col: 28, offset: 31330},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1106, col: 38, offset: 31340},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1107, col: 9, offset: 31356},
							val:        "float32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1107, col: 21, offset: 31368},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1108, col: 9, offset: 31386},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1108, col: 18, offset: 31395},
							val:        "string",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1109, col: 9, offset: 31412},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1109, col: 22, offset: 31425},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1110, col: 9, offset: 31440},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1111, col: 9, offset: 31456},
							val:        "bstring",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1112, col: 9, offset: 31474},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1112, col: 16, offset: 31481},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1113, col: 9, offset: 31495},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1113, col: 18, offset: 31504},
							val:        "error",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1113, col: 28, offset: 31514},
							val:        "null",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldList",
			pos:  position{line: 1117, col: 1, offset: 31630},
			expr: &actionExpr{
				pos: position{line: 1118, col: 5, offset: 31648},
				run: (*parser).callonTypeFieldList1,
				expr: &seqExpr{
					pos: position{line: 1118, col: 5, offset: 31648},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1118, col: 5, offset: 31648},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1118, col: 11, offset: 31654},
								name: "TypeField",
							},
						},
						&labeledExpr{
							pos:   position{line: 1118, col: 21, offset: 31664},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1118, col: 26, offset: 31669},
								expr: &ruleRefExpr{
									pos:  position{line: 1118, col: 26, offset: 31669},
									name: "TypeFieldListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTail",
			pos:  position{line: 1122, col: 1, offset: 31768},
			expr: &actionExpr{
				pos: position{line: 1122, col: 21, offset: 31788},
				run: (*parser).callonTypeFieldListTail1,
				expr: &seqExpr{
					pos: position{line: 1122, col: 21, offset: 31788},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1122, col: 21, offset: 31788},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1122, col: 24, offset: 31791},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1122, col: 28, offset: 31795},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1122, col: 31, offset: 31798},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1122, col: 35, offset: 31802},
								name: "TypeField",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeField",
			pos:  position{line: 1124, col: 1, offset: 31833},
			expr: &actionExpr{
				pos: position{line: 1125, col: 5, offset: 31847},
				run: (*parser).callonTypeField1,
				expr: &seqExpr{
					pos: position{line: 1125, col: 5, offset: 31847},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1125, col: 5, offset: 31847},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1125, col: 10, offset: 31852},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1125, col: 20, offset: 31862},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1125, col: 23, offset: 31865},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1125, col: 27, offset: 31869},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1125, col: 30, offset: 31872},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1125, col: 34, offset: 31876},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 1129, col: 1, offset: 31958},
			expr: &choiceExpr{
				pos: position{line: 1130, col: 5, offset: 31972},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1130, col: 5, offset: 31972},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 1131, col: 5, offset: 31991},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "EqualityToken",
			pos:  position{line: 1133, col: 1, offset: 32005},
			expr: &choiceExpr{
				pos: position{line: 1134, col: 5, offset: 32023},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1134, col: 5, offset: 32023},
						name: "EqualityOperator",
					},
					&ruleRefExpr{
						pos:  position{line: 1134, col: 24, offset: 32042},
						name: "RelativeOperator",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 1136, col: 1, offset: 32060},
			expr: &actionExpr{
				pos: position{line: 1136, col: 12, offset: 32071},
				run: (*parser).callonAndToken1,
				expr: &seqExpr{
					pos: position{line: 1136, col: 12, offset: 32071},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1136, col: 12, offset: 32071},
							val:        "and",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1136, col: 19, offset: 32078},
							expr: &ruleRefExpr{
								pos:  position{line: 1136, col: 20, offset: 32079},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 1137, col: 1, offset: 32116},
			expr: &actionExpr{
				pos: position{line: 1137, col: 11, offset: 32126},
				run: (*parser).callonOrToken1,
				expr: &seqExpr{
					pos: position{line: 1137, col: 11, offset: 32126},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1137, col: 11, offset: 32126},
							val:        "or",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1137, col: 17, offset: 32132},
							expr: &ruleRefExpr{
								pos:  position{line: 1137, col: 18, offset: 32133},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 1138, col: 1, offset: 32169},
			expr: &actionExpr{
				pos: position{line: 1138, col: 11, offset: 32179},
				run: (*parser).callonInToken1,
				expr: &seqExpr{
					pos: position{line: 1138, col: 11, offset: 32179},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1138, col: 11, offset: 32179},
							val:        "in",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1138, col: 17, offset: 32185},
							expr: &ruleRefExpr{
								pos:  position{line: 1138, col: 18, offset: 32186},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 1139, col: 1, offset: 32222},
			expr: &actionExpr{
				pos: position{line: 1139, col: 12, offset: 32233},
				run: (*parser).callonNotToken1,
				expr: &seqExpr{
					pos: position{line: 1139, col: 12, offset: 32233},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1139, col: 12, offset: 32233},
							val:        "not",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1139, col: 19, offset: 32240},
							expr: &ruleRefExpr{
								pos:  position{line: 1139, col: 20, offset: 32241},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 1140, col: 1, offset: 32278},
			expr: &actionExpr{
				pos: position{line: 1140, col: 11, offset: 32288},
				run: (*parser).callonByToken1,
				expr: &seqExpr{
					pos: position{line: 1140, col: 11, offset: 32288},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1140, col: 11, offset: 32288},
							val:        "by",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1140, col: 17, offset: 32294},
							expr: &ruleRefExpr{
								pos:  position{line: 1140, col: 18, offset: 32295},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 1142, col: 1, offset: 32332},
			expr: &charClassMatcher{
				pos:        position{line: 1142, col: 19, offset: 32350},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 1144, col: 1, offset: 32362},
			expr: &choiceExpr{
				pos: position{line: 1144, col: 18, offset: 32379},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1144, col: 18, offset: 32379},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 1144, col: 36, offset: 32397},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 1146, col: 1, offset: 32404},
			expr: &actionExpr{
				pos: position{line: 1147, col: 5, offset: 32419},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 1147, col: 5, offset: 32419},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 1147, col: 8, offset: 32422},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 1149, col: 1, offset: 32503},
			expr: &choiceExpr{
				pos: position{line: 1150, col: 5, offset: 32522},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1150, col: 5, offset: 32522},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 1150, col: 5, offset: 32522},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1150, col: 5, offset: 32522},
									expr: &seqExpr{
										pos: position{line: 1150, col: 7, offset: 32524},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1150, col: 7, offset: 32524},
												name: "IDGuard",
											},
											&notExpr{
												pos: position{line: 1150, col: 15, offset: 32532},
												expr: &ruleRefExpr{
													pos:  position{line: 1150, col: 16, offset: 32533},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1150, col: 32, offset: 32549},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1150, col: 48, offset: 32565},
									expr: &ruleRefExpr{
										pos:  position{line: 1150, col: 48, offset: 32565},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1151, col: 5, offset: 32617},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 1151, col: 5, offset: 32617},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1152, col: 5, offset: 32656},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 1152, col: 5, offset: 32656},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1152, col: 5, offset: 32656},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1152, col: 10, offset: 32661},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1152, col: 13, offset: 32664},
										name: "IDGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1154, col: 5, offset: 32755},
						run: (*parser).callonIdentifierName19,
						expr: &litMatcher{
							pos:        position{line: 1154, col: 5, offset: 32755},
							val:        "type",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1155, col: 5, offset: 32797},
						run: (*parser).callonIdentifierName21,
						expr: &seqExpr{
							pos: position{line: 1155, col: 5, offset: 32797},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1155, col: 5, offset: 32797},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1155, col: 8, offset: 32800},
										name: "SQLTokenSentinels",
									},
								},
								&andExpr{
									pos: position{line: 1155, col: 26, offset: 32818},
									expr: &seqExpr{
										pos: position{line: 1155, col: 28, offset: 32820},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1155, col: 28, offset: 32820},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1155, col: 31, offset: 32823},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IDGuard",
			pos:  position{line: 1157, col: 1, offset: 32848},
			expr: &choiceExpr{
				pos: position{line: 1158, col: 5, offset: 32860},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1158, col: 5, offset: 32860},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1159, col: 5, offset: 32879},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "Time",
			pos:  position{line: 1161, col: 1, offset: 32892},
			expr: &actionExpr{
				pos: position{line: 1162, col: 5, offset: 32901},
				run: (*parser).callonTime1,
				expr: &seqExpr{
					pos: position{line: 1162, col: 5, offset: 32901},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1162, col: 5, offset: 32901},
							name: "FullDate",
						},
						&litMatcher{
							pos:        position{line: 1162, col: 14, offset: 32910},
							val:        "T",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1162, col: 18, offset: 32914},
							name: "FullTime",
						},
					},
				},
			},
		},
		{
			name: "FullDate",
			pos:  position{line: 1166, col: 1, offset: 33034},
			expr: &seqExpr{
				pos: position{line: 1166, col: 12, offset: 33045},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1166, col: 12, offset: 33045},
						name: "D4",
					},
					&litMatcher{
						pos:        position{line: 1166, col: 15, offset: 33048},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1166, col: 19, offset: 33052},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1166, col: 22, offset: 33055},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1166, col: 26, offset: 33059},
						name: "D2",
					},
				},
			},
		},
		{
			name: "D4",
			pos:  position{line: 1168, col: 1, offset: 33063},
			expr: &seqExpr{
				pos: position{line: 1168, col: 6, offset: 33068},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1168, col: 6, offset: 33068},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1168, col: 11, offset: 33073},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1168, col: 16, offset: 33078},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1168, col: 21, offset: 33083},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "D2",
			pos:  position{line: 1169, col: 1, offset: 33089},
			expr: &seqExpr{
				pos: position{line: 1169, col: 6, offset: 33094},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1169, col: 6, offset: 33094},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1169, col: 11, offset: 33099},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "FullTime",
			pos:  position{line: 1171, col: 1, offset: 33106},
			expr: &seqExpr{
				pos: position{line: 1171, col: 12, offset: 33117},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1171, col: 12, offset: 33117},
						name: "PartialTime",
					},
					&ruleRefExpr{
						pos:  position{line: 1171, col: 24, offset: 33129},
						name: "TimeOffset",
					},
				},
			},
		},
		{
			name: "PartialTime",
			pos:  position{line: 1173, col: 1, offset: 33141},
			expr: &seqExpr{
				pos: position{line: 1173, col: 15, offset: 33155},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1173, col: 15, offset: 33155},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1173, col: 18, offset: 33158},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1173, col: 22, offset: 33162},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1173, col: 25, offset: 33165},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1173, col: 29, offset: 33169},
						name: "D2",
					},
					&zeroOrOneExpr{
						pos: position{line: 1173, col: 32, offset: 33172},
						expr: &seqExpr{
							pos: position{line: 1173, col: 33, offset: 33173},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1173, col: 33, offset: 33173},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1173, col: 37, offset: 33177},
									expr: &charClassMatcher{
										pos:        position{line: 1173, col: 37, offset: 33177},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeOffset",
			pos:  position{line: 1175, col: 1, offset: 33187},
			expr: &choiceExpr{
				pos: position{line: 1176, col: 5, offset: 33202},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1176, col: 5, offset: 33202},
						val:        "Z",
						ignoreCase: false,
					},
					&seqExpr{
						pos: position{line: 1177, col: 5, offset: 33210},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 1177, col: 6, offset: 33211},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1177, col: 6, offset: 33211},
										val:        "+",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 1177, col: 12, offset: 33217},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1177, col: 17, offset: 33222},
								name: "D2",
							},
							&litMatcher{
								pos:        position{line: 1177, col: 20, offset: 33225},
								val:        ":",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 1177, col: 24, offset: 33229},
								name: "D2",
							},
							&zeroOrOneExpr{
								pos: position{line: 1177, col: 27, offset: 33232},
								expr: &seqExpr{
									pos: position{line: 1177, col: 28, offset: 33233},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1177, col: 28, offset: 33233},
											val:        ".",
											ignoreCase: false,
										},
										&oneOrMoreExpr{
											pos: position{line: 1177, col: 32, offset: 33237},
											expr: &charClassMatcher{
												pos:        position{line: 1177, col: 32, offset: 33237},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 1179, col: 1, offset: 33247},
			expr: &actionExpr{
				pos: position{line: 1180, col: 5, offset: 33260},
				run: (*parser).callonDuration1,
				expr: &seqExpr{
					pos: position{line: 1180, col: 5, offset: 33260},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1180, col: 5, offset: 33260},
							expr: &litMatcher{
								pos:        position{line: 1180, col: 5, offset: 33260},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1180, col: 10, offset: 33265},
							expr: &seqExpr{
								pos: position{line: 1180, col: 11, offset: 33266},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1180, col: 11, offset: 33266},
										name: "Decimal",
									},
									&ruleRefExpr{
										pos:  position{line: 1180, col: 19, offset: 33274},
										name: "TimeUnit",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Decimal",
			pos:  position{line: 1184, col: 1, offset: 33400},
			expr: &seqExpr{
				pos: position{line: 1184, col: 11, offset: 33410},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1184, col: 11, offset: 33410},
						name: "UInt",
					},
					&zeroOrOneExpr{
						pos: position{line: 1184, col: 16, offset: 33415},
						expr: &seqExpr{
							pos: position{line: 1184, col: 17, offset: 33416},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1184, col: 17, offset: 33416},
									val:        ".",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1184, col: 21, offset: 33420},
									name: "UInt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeUnit",
			pos:  position{line: 1186, col: 1, offset: 33428},
			expr: &choiceExpr{
				pos: position{line: 1187, col: 5, offset: 33441},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1187, col: 5, offset: 33441},
						val:        "ns",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1188, col: 5, offset: 33451},
						val:        "us",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1189, col: 5, offset: 33461},
						val:        "ms",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1190, col: 5, offset: 33471},
						val:        "s",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1191, col: 5, offset: 33480},
						val:        "m",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1192, col: 5, offset: 33489},
						val:        "h",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1193, col: 5, offset: 33498},
						val:        "d",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1194, col: 5, offset: 33507},
						val:        "w",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1195, col: 5, offset: 33516},
						val:        "y",
						ignoreCase: true,
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 1197, col: 1, offset: 33522},
			expr: &actionExpr{
				pos: position{line: 1198, col: 5, offset: 33529},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 1198, col: 5, offset: 33529},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1198, col: 5, offset: 33529},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1198, col: 10, offset: 33534},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1198, col: 14, offset: 33538},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1198, col: 19, offset: 33543},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1198, col: 23, offset: 33547},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1198, col: 28, offset: 33552},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1198, col: 32, offset: 33556},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 1200, col: 1, offset: 33593},
			expr: &actionExpr{
				pos: position{line: 1201, col: 5, offset: 33601},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 1201, col: 5, offset: 33601},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1201, col: 5, offset: 33601},
							expr: &seqExpr{
								pos: position{line: 1201, col: 8, offset: 33604},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1201, col: 8, offset: 33604},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 1201, col: 12, offset: 33608},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 1201, col: 16, offset: 33612},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 1201, col: 20, offset: 33616},
										expr: &choiceExpr{
											pos: position{line: 1201, col: 22, offset: 33618},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1201, col: 22, offset: 33618},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 1201, col: 33, offset: 33629},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1201, col: 39, offset: 33635},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1201, col: 41, offset: 33637},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 1205, col: 1, offset: 33801},
			expr: &choiceExpr{
				pos: position{line: 1206, col: 5, offset: 33819},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1206, col: 5, offset: 33819},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 1206, col: 5, offset: 33819},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1206, col: 5, offset: 33819},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 1206, col: 7, offset: 33821},
										expr: &ruleRefExpr{
											pos:  position{line: 1206, col: 7, offset: 33821},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1206, col: 17, offset: 33831},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1206, col: 19, offset: 33833},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1209, col: 5, offset: 33897},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 1209, col: 5, offset: 33897},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1209, col: 5, offset: 33897},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1209, col: 7, offset: 33899},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1209, col: 11, offset: 33903},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1209, col: 13, offset: 33905},
										expr: &ruleRefExpr{
											pos:  position{line: 1209, col: 13, offset: 33905},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1209, col: 23, offset: 33915},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1209, col: 28, offset: 33920},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1209, col: 30, offset: 33922},
										expr: &ruleRefExpr{
											pos:  position{line: 1209, col: 30, offset: 33922},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1209, col: 40, offset: 33932},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 1209, col: 42, offset: 33934},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1212, col: 5, offset: 34033},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 1212, col: 5, offset: 34033},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1212, col: 5, offset: 34033},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1212, col: 10, offset: 34038},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1212, col: 12, offset: 34040},
										expr: &ruleRefExpr{
											pos:  position{line: 1212, col: 12, offset: 34040},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1212, col: 22, offset: 34050},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1212, col: 24, offset: 34052},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1215, col: 5, offset: 34123},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 1215, col: 5, offset: 34123},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1215, col: 5, offset: 34123},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1215, col: 7, offset: 34125},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1215, col: 11, offset: 34129},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1215, col: 13, offset: 34131},
										expr: &ruleRefExpr{
											pos:  position{line: 1215, col: 13, offset: 34131},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1215, col: 23, offset: 34141},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1218, col: 5, offset: 34209},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 1218, col: 5, offset: 34209},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 1222, col: 1, offset: 34246},
			expr: &choiceExpr{
				pos: position{line: 1223, col: 5, offset: 34258},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1223, col: 5, offset: 34258},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 1224, col: 5, offset: 34265},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 1226, col: 1, offset: 34270},
			expr: &actionExpr{
				pos: position{line: 1226, col: 12, offset: 34281},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 1226, col: 12, offset: 34281},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1226, col: 12, offset: 34281},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1226, col: 16, offset: 34285},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1226, col: 18, offset: 34287},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 1228, col: 1, offset: 34325},
			expr: &actionExpr{
				pos: position{line: 1228, col: 12, offset: 34336},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 1228, col: 12, offset: 34336},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1228, col: 12, offset: 34336},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1228, col: 14, offset: 34338},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 1228, col: 18, offset: 34342},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 1230, col: 1, offset: 34380},
			expr: &actionExpr{
				pos: position{line: 1231, col: 5, offset: 34391},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 1231, col: 5, offset: 34391},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1231, col: 5, offset: 34391},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1231, col: 7, offset: 34393},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 1231, col: 10, offset: 34396},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1231, col: 14, offset: 34400},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1231, col: 16, offset: 34402},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 1235, col: 1, offset: 34475},
			expr: &actionExpr{
				pos: position{line: 1236, col: 5, offset: 34486},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 1236, col: 5, offset: 34486},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1236, col: 5, offset: 34486},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1236, col: 7, offset: 34488},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 1236, col: 11, offset: 34492},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1236, col: 15, offset: 34496},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1236, col: 17, offset: 34498},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 1240, col: 1, offset: 34561},
			expr: &actionExpr{
				pos: position{line: 1241, col: 4, offset: 34569},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 1241, col: 4, offset: 34569},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 1241, col: 6, offset: 34571},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 1243, col: 1, offset: 34611},
			expr: &choiceExpr{
				pos: position{line: 1244, col: 5, offset: 34625},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1244, col: 5, offset: 34625},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 1245, col: 5, offset: 34640},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 1247, col: 1, offset: 34656},
			expr: &actionExpr{
				pos: position{line: 1247, col: 14, offset: 34669},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1247, col: 14, offset: 34669},
					expr: &charClassMatcher{
						pos:        position{line: 1247, col: 14, offset: 34669},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 1249, col: 1, offset: 34708},
			expr: &actionExpr{
				pos: position{line: 1250, col: 5, offset: 34727},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 1250, col: 5, offset: 34727},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1250, col: 5, offset: 34727},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1250, col: 9, offset: 34731},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 1252, col: 1, offset: 34774},
			expr: &choiceExpr{
				pos: position{line: 1253, col: 5, offset: 34790},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1253, col: 5, offset: 34790},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 1253, col: 5, offset: 34790},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1253, col: 5, offset: 34790},
									expr: &litMatcher{
										pos:        position{line: 1253, col: 5, offset: 34790},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1253, col: 10, offset: 34795},
									expr: &charClassMatcher{
										pos:        position{line: 1253, col: 10, offset: 34795},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 1253, col: 17, offset: 34802},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1253, col: 21, offset: 34806},
									expr: &charClassMatcher{
										pos:        position{line: 1253, col: 21, offset: 34806},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1253, col: 28, offset: 34813},
									expr: &ruleRefExpr{
										pos:  position{line: 1253, col: 28, offset: 34813},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1256, col: 5, offset: 34872},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 1256, col: 5, offset: 34872},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1256, col: 5, offset: 34872},
									expr: &litMatcher{
										pos:        position{line: 1256, col: 5, offset: 34872},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1256, col: 10, offset: 34877},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1256, col: 14, offset: 34881},
									expr: &charClassMatcher{
										pos:        position{line: 1256, col: 14, offset: 34881},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1256, col: 21, offset: 34888},
									expr: &ruleRefExpr{
										pos:  position{line: 1256, col: 21, offset: 34888},
										name: "ExponentPart",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 1260, col: 1, offset: 34944},
			expr: &seqExpr{
				pos: position{line: 1260, col: 16, offset: 34959},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1260, col: 16, offset: 34959},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 1260, col: 21, offset: 34964},
						expr: &charClassMatcher{
							pos:        position{line: 1260, col: 21, offset: 34964},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1260, col: 27, offset: 34970},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 1262, col: 1, offset: 34982},
			expr: &actionExpr{
				pos: position{line: 1262, col: 7, offset: 34988},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1262, col: 7, offset: 34988},
					expr: &ruleRefExpr{
						pos:  position{line: 1262, col: 7, offset: 34988},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 1264, col: 1, offset: 35030},
			expr: &charClassMatcher{
				pos:        position{line: 1264, col: 12, offset: 35041},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1267, col: 1, offset: 35055},
			expr: &choiceExpr{
				pos: position{line: 1268, col: 5, offset: 35072},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1268, col: 5, offset: 35072},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 1268, col: 5, offset: 35072},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1268, col: 5, offset: 35072},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1268, col: 9, offset: 35076},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1268, col: 11, offset: 35078},
										expr: &ruleRefExpr{
											pos:  position{line: 1268, col: 11, offset: 35078},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1268, col: 29, offset: 35096},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1269, col: 5, offset: 35133},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 1269, col: 5, offset: 35133},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1269, col: 5, offset: 35133},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1269, col: 9, offset: 35137},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1269, col: 11, offset: 35139},
										expr: &ruleRefExpr{
											pos:  position{line: 1269, col: 11, offset: 35139},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1269, col: 29, offset: 35157},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 1271, col: 1, offset: 35191},
			expr: &choiceExpr{
				pos: position{line: 1272, col: 5, offset: 35212},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1272, col: 5, offset: 35212},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1272, col: 5, offset: 35212},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1272, col: 5, offset: 35212},
									expr: &choiceExpr{
										pos: position{line: 1272, col: 7, offset: 35214},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1272, col: 7, offset: 35214},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1272, col: 13, offset: 35220},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1272, col: 26, offset: 35233,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1273, col: 5, offset: 35270},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1273, col: 5, offset: 35270},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1273, col: 5, offset: 35270},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1273, col: 10, offset: 35275},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1273, col: 12, offset: 35277},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 1275, col: 1, offset: 35311},
			expr: &actionExpr{
				pos: position{line: 1276, col: 5, offset: 35323},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 1276, col: 5, offset: 35323},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1276, col: 5, offset: 35323},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1276, col: 10, offset: 35328},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1276, col: 23, offset: 35341},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1276, col: 28, offset: 35346},
								expr: &ruleRefExpr{
									pos:  position{line: 1276, col: 28, offset: 35346},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 1278, col: 1, offset: 35408},
			expr: &choiceExpr{
				pos: position{line: 1279, col: 5, offset: 35425},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1279, col: 5, offset: 35425},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1280, col: 5, offset: 35442},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordChars",
			pos:  position{line: 1282, col: 1, offset: 35454},
			expr: &actionExpr{
				pos: position{line: 1282, col: 16, offset: 35469},
				run: (*parser).callonKeyWordChars1,
				expr: &charClassMatcher{
					pos:        position{line: 1282, col: 16, offset: 35469},
					val:        "[a-zA-Z_.:/%#@~]",
					chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
					ranges:     []rune{'a', 'z', 'A', 'Z'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 1284, col: 1, offset: 35518},
			expr: &choiceExpr{
				pos: position{line: 1285, col: 5, offset: 35534},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1285, col: 5, offset: 35534},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 1286, col: 5, offset: 35551},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 1288, col: 1, offset: 35558},
			expr: &actionExpr{
				pos: position{line: 1288, col: 14, offset: 35571},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 1288, col: 14, offset: 35571},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1288, col: 14, offset: 35571},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1288, col: 19, offset: 35576},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1288, col: 22, offset: 35579},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1288, col: 22, offset: 35579},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1288, col: 38, offset: 35595},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Glob",
			pos:  position{line: 1290, col: 1, offset: 35631},
			expr: &actionExpr{
				pos: position{line: 1291, col: 5, offset: 35640},
				run: (*parser).callonGlob1,
				expr: &seqExpr{
					pos: position{line: 1291, col: 5, offset: 35640},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1291, col: 5, offset: 35640},
							expr: &ruleRefExpr{
								pos:  position{line: 1291, col: 6, offset: 35641},
								name: "GlobProperStart",
							},
						},
						&andExpr{
							pos: position{line: 1291, col: 22, offset: 35657},
							expr: &ruleRefExpr{
								pos:  position{line: 1291, col: 23, offset: 35658},
								name: "GlobHasStar",
							},
						},
						&labeledExpr{
							pos:   position{line: 1291, col: 35, offset: 35670},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1291, col: 40, offset: 35675},
								name: "GlobStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1291, col: 50, offset: 35685},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1291, col: 55, offset: 35690},
								expr: &ruleRefExpr{
									pos:  position{line: 1291, col: 55, offset: 35690},
									name: "GlobRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobProperStart",
			pos:  position{line: 1295, col: 1, offset: 35774},
			expr: &seqExpr{
				pos: position{line: 1295, col: 19, offset: 35792},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1295, col: 19, offset: 35792},
						expr: &litMatcher{
							pos:        position{line: 1295, col: 19, offset: 35792},
							val:        "*",
							ignoreCase: false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1295, col: 24, offset: 35797},
						name: "KeyWordStart",
					},
				},
			},
		},
		{
			name: "GlobHasStar",
			pos:  position{line: 1296, col: 1, offset: 35810},
			expr: &seqExpr{
				pos: position{line: 1296, col: 15, offset: 35824},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1296, col: 15, offset: 35824},
						expr: &ruleRefExpr{
							pos:  position{line: 1296, col: 15, offset: 35824},
							name: "KeyWordRest",
						},
					},
					&litMatcher{
						pos:        position{line: 1296, col: 28, offset: 35837},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "GlobStart",
			pos:  position{line: 1298, col: 1, offset: 35842},
			expr: &choiceExpr{
				pos: position{line: 1299, col: 5, offset: 35856},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1299, col: 5, offset: 35856},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1300, col: 5, offset: 35873},
						name: "GlobEsc",
					},
					&actionExpr{
						pos: position{line: 1301, col: 5, offset: 35885},
						run: (*parser).callonGlobStart4,
						expr: &litMatcher{
							pos:        position{line: 1301, col: 5, offset: 35885},
							val:        "*",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GlobRest",
			pos:  position{line: 1303, col: 1, offset: 35909},
			expr: &choiceExpr{
				pos: position{line: 1304, col: 5, offset: 35922},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1304, col: 5, offset: 35922},
						name: "GlobStart",
					},
					&charClassMatcher{
						pos:        position{line: 1305, col: 5, offset: 35936},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "GlobEsc",
			pos:  position{line: 1307, col: 1, offset: 35943},
			expr: &actionExpr{
				pos: position{line: 1307, col: 11, offset: 35953},
				run: (*parser).callonGlobEsc1,
				expr: &seqExpr{
					pos: position{line: 1307, col: 11, offset: 35953},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1307, col: 11, offset: 35953},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1307, col: 16, offset: 35958},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1307, col: 19, offset: 35961},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1307, col: 19, offset: 35961},
										name: "GlobEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1307, col: 32, offset: 35974},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobEscape",
			pos:  position{line: 1309, col: 1, offset: 36010},
			expr: &choiceExpr{
				pos: position{line: 1310, col: 5, offset: 36025},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1310, col: 5, offset: 36025},
						run: (*parser).callonGlobEscape2,
						expr: &litMatcher{
							pos:        position{line: 1310, col: 5, offset: 36025},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1311, col: 5, offset: 36053},
						run: (*parser).callonGlobEscape4,
						expr: &litMatcher{
							pos:        position{line: 1311, col: 5, offset: 36053},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1312, col: 5, offset: 36083},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 1315, col: 1, offset: 36090},
			expr: &choiceExpr{
				pos: position{line: 1316, col: 5, offset: 36111},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1316, col: 5, offset: 36111},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1316, col: 5, offset: 36111},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1316, col: 5, offset: 36111},
									expr: &choiceExpr{
										pos: position{line: 1316, col: 7, offset: 36113},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1316, col: 7, offset: 36113},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1316, col: 13, offset: 36119},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1316, col: 26, offset: 36132,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1317, col: 5, offset: 36169},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1317, col: 5, offset: 36169},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1317, col: 5, offset: 36169},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1317, col: 10, offset: 36174},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1317, col: 12, offset: 36176},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 1319, col: 1, offset: 36210},
			expr: &choiceExpr{
				pos: position{line: 1320, col: 5, offset: 36229},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1320, col: 5, offset: 36229},
						run: (*parser).callonEscapeSequence2,
						expr: &seqExpr{
							pos: position{line: 1320, col: 5, offset: 36229},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1320, col: 5, offset: 36229},
									val:        "x",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1320, col: 9, offset: 36233},
									name: "HexDigit",
								},
								&ruleRefExpr{
									pos:  position{line: 1320, col: 18, offset: 36242},
									name: "HexDigit",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1321, col: 5, offset: 36293},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 1322, col: 5, offset: 36314},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 1324, col: 1, offset: 36329},
			expr: &choiceExpr{
				pos: position{line: 1325, col: 5, offset: 36350},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1325, col: 5, offset: 36350},
						val:        "'",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1326, col: 5, offset: 36358},
						run: (*parser).callonSingleCharEscape3,
						expr: &litMatcher{
							pos:        position{line: 1326, col: 5, offset: 36358},
							val:        "\"",
							ignoreCase: false,
						},
					},
					&litMatcher{
						pos:        position{line: 1327, col: 5, offset: 36398},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1328, col: 5, offset: 36407},
						run: (*parser).callonSingleCharEscape6,
						expr: &litMatcher{
							pos:        position{line: 1328, col: 5, offset: 36407},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1329, col: 5, offset: 36436},
						run: (*parser).callonSingleCharEscape8,
						expr: &litMatcher{
							pos:        position{line: 1329, col: 5, offset: 36436},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1330, col: 5, offset: 36465},
						run: (*parser).callonSingleCharEscape10,
						expr: &litMatcher{
							pos:        position{line: 1330, col: 5, offset: 36465},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1331, col: 5, offset: 36494},
						run: (*parser).callonSingleCharEscape12,
						expr: &litMatcher{
							pos:        position{line: 1331, col: 5, offset: 36494},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1332, col: 5, offset: 36523},
						run: (*parser).callonSingleCharEscape14,
						expr: &litMatcher{
							pos:        position{line: 1332, col: 5, offset: 36523},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1333, col: 5, offset: 36552},
						run: (*parser).callonSingleCharEscape16,
						expr: &litMatcher{
							pos:        position{line: 1333, col: 5, offset: 36552},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 1335, col: 1, offset: 36578},
			expr: &choiceExpr{
				pos: position{line: 1336, col: 5, offset: 36596},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1336, col: 5, offset: 36596},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 1336, col: 5, offset: 36596},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1337, col: 5, offset: 36624},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 1337, col: 5, offset: 36624},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1338, col: 5, offset: 36652},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 1340, col: 1, offset: 36658},
			expr: &choiceExpr{
				pos: position{line: 1341, col: 5, offset: 36676},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1341, col: 5, offset: 36676},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 1341, col: 5, offset: 36676},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1341, col: 5, offset: 36676},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1341, col: 9, offset: 36680},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1341, col: 16, offset: 36687},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1341, col: 16, offset: 36687},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1341, col: 25, offset: 36696},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1341, col: 34, offset: 36705},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1341, col: 43, offset: 36714},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1344, col: 5, offset: 36777},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 1344, col: 5, offset: 36777},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1344, col: 5, offset: 36777},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1344, col: 9, offset: 36781},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1344, col: 13, offset: 36785},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1344, col: 20, offset: 36792},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1344, col: 20, offset: 36792},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 1344, col: 29, offset: 36801},
												expr: &ruleRefExpr{
													pos:  position{line: 1344, col: 29, offset: 36801},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1344, col: 39, offset: 36811},
												expr: &ruleRefExpr{
													pos:  position{line: 1344, col: 39, offset: 36811},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1344, col: 49, offset: 36821},
												expr: &ruleRefExpr{
													pos:  position{line: 1344, col: 49, offset: 36821},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1344, col: 59, offset: 36831},
												expr: &ruleRefExpr{
													pos:  position{line: 1344, col: 59, offset: 36831},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1344, col: 69, offset: 36841},
												expr: &ruleRefExpr{
													pos:  position{line: 1344, col: 69, offset: 36841},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1344, col: 80, offset: 36852},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 1348, col: 1, offset: 36906},
			expr: &actionExpr{
				pos: position{line: 1349, col: 5, offset: 36917},
				run: (*parser).callonRegexp1,
				expr: &seqExpr{
					pos: position{line: 1349, col: 5, offset: 36917},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1349, col: 5, offset: 36917},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1349, col: 9, offset: 36921},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1349, col: 14, offset: 36926},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 1349, col: 25, offset: 36937},
							val:        "/",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1349, col: 29, offset: 36941},
							expr: &ruleRefExpr{
								pos:  position{line: 1349, col: 30, offset: 36942},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 1351, col: 1, offset: 36977},
			expr: &actionExpr{
				pos: position{line: 1352, col: 5, offset: 36992},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1352, col: 5, offset: 36992},
					expr: &choiceExpr{
						pos: position{line: 1352, col: 6, offset: 36993},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 1352, col: 6, offset: 36993},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&seqExpr{
								pos: position{line: 1352, col: 15, offset: 37002},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1352, col: 15, offset: 37002},
										val:        "\\",
										ignoreCase: false,
									},
									&anyMatcher{
										line: 1352, col: 20, offset: 37007,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 1354, col: 1, offset: 37043},
			expr: &charClassMatcher{
				pos:        position{line: 1355, col: 5, offset: 37059},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 1357, col: 1, offset: 37074},
			expr: &oneOrMoreExpr{
				pos: position{line: 1357, col: 6, offset: 37079},
				expr: &ruleRefExpr{
					pos:  position{line: 1357, col: 6, offset: 37079},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1359, col: 1, offset: 37090},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1359, col: 6, offset: 37095},
				expr: &ruleRefExpr{
					pos:  position{line: 1359, col: 6, offset: 37095},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 1361, col: 1, offset: 37106},
			expr: &choiceExpr{
				pos: position{line: 1362, col: 5, offset: 37119},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1362, col: 5, offset: 37119},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 1363, col: 5, offset: 37134},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 1364, col: 5, offset: 37153},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 1366, col: 1, offset: 37162},
			expr: &anyMatcher{
				line: 1367, col: 5, offset: 37182,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 1369, col: 1, offset: 37185},
			expr: &choiceExpr{
				pos: position{line: 1370, col: 5, offset: 37213},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1370, col: 5, offset: 37213},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1371, col: 5, offset: 37222},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1372, col: 5, offset: 37231},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1373, col: 5, offset: 37240},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1374, col: 5, offset: 37248},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1375, col: 5, offset: 37261},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 1377, col: 1, offset: 37271},
			expr: &charClassMatcher{
				pos:        position{line: 1378, col: 5, offset: 37290},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 1384, col: 1, offset: 37620},
			expr: &ruleRefExpr{
				pos:  position{line: 1387, col: 5, offset: 37691},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1389, col: 1, offset: 37710},
			expr: &seqExpr{
				pos: position{line: 1390, col: 5, offset: 37731},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1390, col: 5, offset: 37731},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1390, col: 10, offset: 37736},
						expr: &seqExpr{
							pos: position{line: 1390, col: 11, offset: 37737},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1390, col: 11, offset: 37737},
									expr: &litMatcher{
										pos:        position{line: 1390, col: 12, offset: 37738},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1390, col: 17, offset: 37743},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1390, col: 35, offset: 37761},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1392, col: 1, offset: 37767},
			expr: &seqExpr{
				pos: position{line: 1393, col: 5, offset: 37789},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1393, col: 5, offset: 37789},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1393, col: 10, offset: 37794},
						expr: &seqExpr{
							pos: position{line: 1393, col: 11, offset: 37795},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1393, col: 11, offset: 37795},
									expr: &ruleRefExpr{
										pos:  position{line: 1393, col: 12, offset: 37796},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1393, col: 27, offset: 37811},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1395, col: 1, offset: 37830},
			expr: &seqExpr{
				pos: position{line: 1395, col: 7, offset: 37836},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1395, col: 7, offset: 37836},
						expr: &ruleRefExpr{
							pos:  position{line: 1395, col: 7, offset: 37836},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1395, col: 19, offset: 37848},
						name: "LineTerminator",
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 1397, col: 1, offset: 37864},
			expr: &choiceExpr{
				pos: position{line: 1397, col: 7, offset: 37870},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1397, col: 7, offset: 37870},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 1397, col: 11, offset: 37874},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1399, col: 1, offset: 37879},
			expr: &notExpr{
				pos: position{line: 1399, col: 7, offset: 37885},
				expr: &anyMatcher{
					line: 1399, col: 8, offset: 37886,
				},
			},
		},
	},
}

func (c *current) onstart1(ast interface{}) (interface{}, error) {
	return ast, nil
}

func (p *parser) callonstart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart1(stack["ast"])
}

func (c *current) onZ2(decls, first, rest interface{}) (interface{}, error) {
	var procs = decls.([]interface{})
	procs = append(procs, first)
	for _, p := range rest.([]interface{}) {
		procs = append(procs, p)
	}
	return map[string]interface{}{"kind": "Sequential", "procs": procs}, nil

}

func (p *parser) callonZ2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onZ2(stack["decls"], stack["first"], stack["rest"])
}

func (c *current) onDecl1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonDecl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDecl1(stack["v"])
}

func (c *current) onAnyDecl2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Const", "name": id, "expr": expr}, nil

}

func (p *parser) callonAnyDecl2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyDecl2(stack["id"], stack["expr"])
}

func (c *current) onAnyDecl18(id, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeProc", "name": id, "type": typ}, nil

}

func (p *parser) callonAnyDecl18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyDecl18(stack["id"], stack["typ"])
}

func (c *current) onSequential2(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonSequential2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential2(stack["first"], stack["rest"])
}

func (c *current) onSequential9(op interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": []interface{}{op}}, nil

}

func (p *parser) callonSequential9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential9(stack["op"])
}

func (c *current) onSequentialTail1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonSequentialTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequentialTail1(stack["p"])
}

func (c *current) onParallel1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonParallel1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallel1(stack["s"])
}

func (c *current) onFromTrunk1(source, seq interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Trunk", "source": source, "seq": seq}, nil

}

func (p *parser) callonFromTrunk1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromTrunk1(stack["source"], stack["seq"])
}

func (c *current) onFromTrunkSeq1(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonFromTrunkSeq1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromTrunkSeq1(stack["seq"])
}

func (c *current) onOperation2(procArray interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Parallel", "procs": procArray}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["procArray"])
}

func (c *current) onOperation12(expr, cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": expr, "cases": cases}, nil

}

func (p *parser) callonOperation12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation12(stack["expr"], stack["cases"])
}

func (c *current) onOperation25(cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": nil, "cases": cases}, nil

}

func (p *parser) callonOperation25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation25(stack["cases"])
}

func (c *current) onOperation35(trunks interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": trunks}, nil

}

func (p *parser) callonOperation35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation35(stack["trunks"])
}

func (c *current) onOperation46(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonOperation46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation46(stack["f"])
}

func (c *current) onOperation52(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation52(stack["a"])
}

func (c *current) onOperation58(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation58(stack["a"])
}

func (c *current) onOperation64(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Filter", "expr": expr}, nil

}

func (p *parser) callonOperation64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation64(stack["expr"])
}

func (c *current) onSwitchLiteralClause1(expr, proc interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": expr, "proc": proc}, nil

}

func (p *parser) callonSwitchLiteralClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchLiteralClause1(stack["expr"], stack["proc"])
}

func (c *current) onSwitchSearchBooleanClause1(expr, proc interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": expr, "proc": proc}, nil

}

func (p *parser) callonSwitchSearchBooleanClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchSearchBooleanClause1(stack["expr"], stack["proc"])
}

func (c *current) onDefaultToken1() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonDefaultToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultToken1()
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor13(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor13(stack["expr"])
}

func (c *current) onTBD2(compareOp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": "or",

		"args": []interface{}{

			map[string]interface{}{"kind": "SelectExpr",

				"selectors": []interface{}{map[string]interface{}{"kind": "Root"}},

				"methods": []interface{}{

					map[string]interface{}{"kind": "Call", "name": "map",

						"args": []interface{}{map[string]interface{}{"kind": "BinaryExpr", "op": "=",

							"lhs": map[string]interface{}{"kind": "ID", "name": "$"},

							"rhs": v}}}}}}}, nil

}

func (p *parser) callonTBD2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTBD2(stack["compareOp"], stack["v"])
}

func (c *current) onTBD11(match interface{}) (interface{}, error) {
	return match, nil
}

func (p *parser) callonTBD11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTBD11(stack["match"])
}

func (c *current) onTBD17(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": "or",

		"args": []interface{}{

			map[string]interface{}{"kind": "SelectExpr",

				"selectors": []interface{}{map[string]interface{}{"kind": "Root"}},

				"methods": []interface{}{

					map[string]interface{}{"kind": "Call", "name": "map",

						"args": []interface{}{map[string]interface{}{"kind": "BinaryExpr", "op": "in",

							"rhs": map[string]interface{}{"kind": "ID", "name": "$"},

							"lhs": v}}}}}}}, nil

}

func (p *parser) callonTBD17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTBD17(stack["v"])
}

func (c *current) onSearchExpr2(search interface{}) (interface{}, error) {
	return search, nil
}

func (p *parser) callonSearchExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr2(stack["search"])
}

func (c *current) onSearchExpr5(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Search", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonSearchExpr5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr5(stack["v"])
}

func (c *current) onSearchExpr11() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil

}

func (p *parser) callonSearchExpr11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr11()
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onPatternSearch1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RegexpSearch", "pattern": pattern}, nil

}

func (p *parser) callonPatternSearch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternSearch1(stack["pattern"])
}

func (c *current) onPatternMatch1(f, pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RegexpMatch", "pattern": pattern, "expr": f}, nil

}

func (p *parser) callonPatternMatch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternMatch1(stack["f"], stack["pattern"])
}

func (c *current) onAggregation2(every, keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Summarize", "keys": keys, "aggs": nil, "duration": every, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["every"], stack["keys"], stack["limit"])
}

func (c *current) onAggregation13(every, aggs, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"kind": "Summarize", "keys": nil, "aggs": aggs, "duration": every, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation13(stack["every"], stack["aggs"], stack["keys"], stack["limit"])
}

func (c *current) onEveryDur1(dur interface{}) (interface{}, error) {
	return dur, nil
}

func (p *parser) callonEveryDur1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEveryDur1(stack["dur"])
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAggAssignment2(lval, agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lval, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment2(stack["lval"], stack["agg"])
}

func (c *current) onAggAssignment11(agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment11(stack["agg"])
}

func (c *current) onAgg1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"kind": "Agg", "name": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonAgg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAgg1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onAggAssignments1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonAggAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSortProc8(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc8(stack["l"])
}

func (c *current) onSortProc1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var proc = map[string]interface{}{"kind": "Sort", "args": list, "order": "asc", "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		proc["order"] = "desc"
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			proc["nullsfirst"] = true
		}
	}
	return proc, nil

}

func (p *parser) callonSortProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopProc6(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopProc6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc6(stack["n"])
}

func (c *current) onTopProc18(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopProc18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc18(stack["f"])
}

func (c *current) onTopProc1(limit, flush, fields interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Top", "limit": 0, "args": nil, "flush": false}
	if limit != nil {
		proc["limit"] = limit
	}
	if fields != nil {
		proc["args"] = fields
	}
	if flush != nil {
		proc["flush"] = true
	}
	return proc, nil

}

func (p *parser) callonTopProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cut", "args": args}, nil

}

func (p *parser) callonCutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutProc1(stack["args"])
}

func (c *current) onPickProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pick", "args": args}, nil

}

func (p *parser) callonPickProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPickProc1(stack["args"])
}

func (c *current) onDropProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Drop", "args": args}, nil

}

func (p *parser) callonDropProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropProc1(stack["args"])
}

func (c *current) onHeadProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": count}, nil
}

func (p *parser) callonHeadProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc2(stack["count"])
}

func (c *current) onHeadProc8() (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": 1}, nil
}

func (p *parser) callonHeadProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc8()
}

func (c *current) onTailProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": count}, nil
}

func (p *parser) callonTailProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc2(stack["count"])
}

func (c *current) onTailProc8() (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": 1}, nil
}

func (p *parser) callonTailProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc8()
}

func (c *current) onFilterProc1(op interface{}) (interface{}, error) {
	return op, nil

}

func (p *parser) callonFilterProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilterProc1(stack["op"])
}

func (c *current) onFilter1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Filter", "expr": expr}, nil

}

func (p *parser) callonFilter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilter1(stack["expr"])
}

func (c *current) onUniqProc2() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": true}, nil

}

func (p *parser) callonUniqProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc2()
}

func (c *current) onUniqProc7() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": false}, nil

}

func (p *parser) callonUniqProc7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc7()
}

func (c *current) onPutProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Put", "args": args}, nil

}

func (p *parser) callonPutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutProc1(stack["args"])
}

func (c *current) onRenameProc9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameProc9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc9(stack["cl"])
}

func (c *current) onRenameProc1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Rename", "args": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc1(stack["first"], stack["rest"])
}

func (c *current) onFuseProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Fuse"}, nil

}

func (p *parser) callonFuseProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseProc1()
}

func (c *current) onShapeProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Shape"}, nil

}

func (p *parser) callonShapeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShapeProc1()
}

func (c *current) onJoinProc2(style, leftKey, rightKey, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Join", "style": style, "left_key": leftKey, "right_key": rightKey, "args": nil}
	if columns != nil {
		proc["args"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc2(stack["style"], stack["leftKey"], stack["rightKey"], stack["columns"])
}

func (c *current) onJoinProc22(style, key, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Join", "style": style, "left_key": key, "right_key": key, "args": nil}
	if columns != nil {
		proc["args"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc22(stack["style"], stack["key"], stack["columns"])
}

func (c *current) onJoinStyle2() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle2()
}

func (c *current) onJoinStyle6() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle6()
}

func (c *current) onJoinStyle10() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle10()
}

func (c *current) onJoinStyle14() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonJoinStyle14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle14()
}

func (c *current) onJoinStyle18() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle18()
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onSampleProc1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": []interface{}{

		map[string]interface{}{"kind": "Summarize",

			"keys": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "shape"},

				"rhs": map[string]interface{}{"kind": "Call", "name": "typeof",

					"args": []interface{}{e}}}},

			"aggs": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "sample"},

				"rhs": map[string]interface{}{"kind": "Agg",

					"name": "any",

					"expr": e,

					"where": nil}}},

			"duration": nil, "limit": 0},

		map[string]interface{}{"kind": "Cut",

			"args": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": nil,

				"rhs": map[string]interface{}{"kind": "ID", "name": "sample"}}}}}}, nil

}

func (p *parser) callonSampleProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleProc1(stack["e"])
}

func (c *current) onOpAssignment1(a interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpAssignment", "assignments": a}, nil

}

func (p *parser) callonOpAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpAssignment1(stack["a"])
}

func (c *current) onSampleExpr2(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonSampleExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr2(stack["lval"])
}

func (c *current) onSampleExpr7() (interface{}, error) {
	return map[string]interface{}{"kind": "Root"}, nil
}

func (p *parser) callonSampleExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr7()
}

func (c *current) onFromProc1(source interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": []interface{}{map[string]interface{}{"kind": "Trunk", "source": source}}}, nil

}

func (p *parser) callonFromProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromProc1(stack["source"])
}

func (c *current) onFileProc1(path, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "File", "path": path, "format": format, "layout": layout}, nil

}

func (p *parser) callonFileProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileProc1(stack["path"], stack["format"], stack["layout"])
}

func (c *current) onPoolProc1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonPoolProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolProc1(stack["body"])
}

func (c *current) onPoolBody1(spec, at, over, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pool", "spec": spec, "at": at, "range": over, "scan_order": order}, nil

}

func (p *parser) callonPoolBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBody1(stack["spec"], stack["at"], stack["over"], stack["order"])
}

func (c *current) onHTTPProc1(url, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "HTTP", "url": url, "format": format, "layout": layout}, nil

}

func (p *parser) callonHTTPProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHTTPProc1(stack["url"], stack["format"], stack["layout"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onPath2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonPath2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath2(stack["v"])
}

func (c *current) onPath5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPath5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath5()
}

func (c *current) onPoolAt1(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonPoolAt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolAt1(stack["id"])
}

func (c *current) onKSUID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKSUID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKSUID1()
}

func (c *current) onPoolRange1(lower, upper interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Range", "lower": lower, "upper": upper}, nil

}

func (p *parser) callonPoolRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolRange1(stack["lower"], stack["upper"])
}

func (c *current) onPoolSpec2(pool, commit, meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": pool, "commit": commit, "meta": meta}, nil

}

func (p *parser) callonPoolSpec2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec2(stack["pool"], stack["commit"], stack["meta"])
}

func (c *current) onPoolSpec12(meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": nil, "commit": nil, "meta": meta}, nil

}

func (p *parser) callonPoolSpec12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec12(stack["meta"])
}

func (c *current) onPoolCommit1(commit interface{}) (interface{}, error) {
	return commit, nil
}

func (p *parser) callonPoolCommit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolCommit1(stack["commit"])
}

func (c *current) onPoolMeta1(meta interface{}) (interface{}, error) {
	return meta, nil
}

func (p *parser) callonPoolMeta1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolMeta1(stack["meta"])
}

func (c *current) onPoolIdentifier1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPoolIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolIdentifier1()
}

func (c *current) onLayoutArg1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Layout", "keys": keys, "order": order}, nil

}

func (p *parser) callonLayoutArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLayoutArg1(stack["keys"], stack["order"])
}

func (c *current) onFormatArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonFormatArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArg1(stack["val"])
}

func (c *current) onOrderSuffix2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix2()
}

func (c *current) onOrderSuffix4() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderSuffix4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix4()
}

func (c *current) onOrderSuffix6() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix6()
}

func (c *current) onOrderArg2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg2()
}

func (c *current) onOrderArg8() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderArg8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg8()
}

func (c *current) onPassProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Pass"}, nil

}

func (p *parser) callonPassProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassProc1()
}

func (c *current) onExplodeProc1(args, typ, as interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Explode", "args": args, "as": as, "type": typ}, nil

}

func (p *parser) callonExplodeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplodeProc1(stack["args"], stack["typ"], stack["as"])
}

func (c *current) onOverProc1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Over", "exprs": exprs}, nil

}

func (p *parser) callonOverProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverProc1(stack["exprs"])
}

func (c *current) onYieldProc1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Yield", "exprs": exprs}, nil

}

func (p *parser) callonYieldProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYieldProc1(stack["exprs"])
}

func (c *current) onTypeArg1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeArg1(stack["typ"])
}

func (c *current) onAsArg1(lhs interface{}) (interface{}, error) {
	return lhs, nil
}

func (p *parser) callonAsArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsArg1(stack["lhs"])
}

func (c *current) onLvals7(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonLvals7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals7(stack["lval"])
}

func (c *current) onLvals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLvals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals1(stack["first"], stack["rest"])
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignments7(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments7(stack["a"])
}

func (c *current) onAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr2(condition, thenClause, elseClause interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Conditional", "cond": condition, "then": thenClause, "else": elseClause}, nil

}

func (p *parser) callonConditionalExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr2(stack["condition"], stack["thenClause"], stack["elseClause"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onEqualityCompareExpr9(comp, expr interface{}) (interface{}, error) {
	return []interface{}{comp, expr}, nil
}

func (p *parser) callonEqualityCompareExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr9(stack["comp"], stack["expr"])
}

func (c *current) onEqualityCompareExpr3(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonEqualityCompareExpr3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr3(stack["first"], stack["rest"])
}

func (c *current) onEqualityOperator2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonEqualityOperator2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator2()
}

func (c *current) onEqualityOperator4() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityOperator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator4()
}

func (c *current) onEqualityComparator3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityComparator3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityComparator3()
}

func (c *current) onRelativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonRelativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onRelativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonRelativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onRelativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeOperator1()
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onFuncExpr4(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr4(stack["first"], stack["rest"])
}

func (c *current) onFuncExpr11(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr11(stack["first"], stack["rest"])
}

func (c *current) onMatchExpr1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonMatchExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchExpr1(stack["expr"])
}

func (c *current) onSelectExpr1(args, methods interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SelectExpr", "selectors": args, "methods": methods}, nil

}

func (p *parser) callonSelectExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectExpr1(stack["args"], stack["methods"])
}

func (c *current) onMethods1(methods interface{}) (interface{}, error) {
	return methods, nil
}

func (p *parser) callonMethods1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethods1(stack["methods"])
}

func (c *current) onMethod1(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonMethod1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethod1(stack["f"])
}

func (c *current) onCast1(typ, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": expr, "type": typ}, nil

}

func (p *parser) callonCast1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCast1(stack["typ"], stack["expr"])
}

func (c *current) onFunction1(fn, args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": fn, "args": args}, nil

}

func (p *parser) callonFunction1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction1(stack["fn"], stack["args"])
}

func (c *current) onOptionalExprs3() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonOptionalExprs3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalExprs3()
}

func (c *current) onExprs7(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonExprs7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs7(stack["e"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonDerefExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr1(stack["e"])
}

func (c *current) onDerefExprPattern2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExprPattern2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExprPattern2(stack["first"], stack["rest"])
}

func (c *current) onDerefExprPattern9(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExprPattern9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExprPattern9(stack["first"], stack["rest"])
}

func (c *current) onDerefExprPattern16(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExprPattern16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExprPattern16(stack["first"], stack["rest"])
}

func (c *current) onDerefExprPattern23() (interface{}, error) {
	return map[string]interface{}{"kind": "Root"}, nil

}

func (p *parser) callonDerefExprPattern23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExprPattern23()
}

func (c *current) onRootRecord1() (interface{}, error) {
	return map[string]interface{}{"kind": "Root"}, nil
}

func (p *parser) callonRootRecord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRootRecord1()
}

func (c *current) onDotID2(field interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": ".",

		"lhs": map[string]interface{}{"kind": "Root"},

		"rhs": field}, nil

}

func (p *parser) callonDotID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotID2(stack["field"])
}

func (c *current) onDotID7(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": "[",

		"lhs": map[string]interface{}{"kind": "Root"},

		"rhs": expr}, nil

}

func (p *parser) callonDotID7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotID7(stack["expr"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref13(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": nil, "rhs": to}}, nil

}

func (p *parser) callonDeref13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref13(stack["to"])
}

func (c *current) onDeref22(from interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": nil}}, nil

}

func (p *parser) callonDeref22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref22(stack["from"])
}

func (c *current) onDeref31(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref31(stack["expr"])
}

func (c *current) onDeref37(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref37(stack["id"])
}

func (c *current) onPrimary7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary7(stack["expr"])
}

func (c *current) onRecord1(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RecordExpr", "fields": fields}, nil

}

func (p *parser) callonRecord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecord1(stack["fields"])
}

func (c *current) onFields1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFields1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFields1(stack["first"], stack["rest"])
}

func (c *current) onFieldTail1(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonFieldTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldTail1(stack["f"])
}

func (c *current) onField1(name, value interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "value": value}, nil

}

func (p *parser) callonField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField1(stack["name"], stack["value"])
}

func (c *current) onArray1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ArrayExpr", "exprs": exprs}, nil

}

func (p *parser) callonArray1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArray1(stack["exprs"])
}

func (c *current) onSet1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SetExpr", "exprs": exprs}, nil

}

func (p *parser) callonSet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSet1(stack["exprs"])
}

func (c *current) onMap1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "MapExpr", "entries": exprs}, nil

}

func (p *parser) callonMap1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMap1(stack["exprs"])
}

func (c *current) onEntries2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonEntries2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries2(stack["first"], stack["rest"])
}

func (c *current) onEntries9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonEntries9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries9()
}

func (c *current) onEntryTail1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonEntryTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntryTail1(stack["e"])
}

func (c *current) onEntry1(key, value interface{}) (interface{}, error) {
	return map[string]interface{}{"key": key, "value": value}, nil

}

func (p *parser) callonEntry1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntry1(stack["key"], stack["value"])
}

func (c *current) onSQLProc1(selection, from, joins, where, groupby, having, orderby, limit interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "SQLExpr",

		"select": selection,

		"from": from,

		"joins": joins,

		"where": where,

		"group_by": groupby,

		"having": having,

		"order_by": orderby,

		"limit": limit}, nil

}

func (p *parser) callonSQLProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLProc1(stack["selection"], stack["from"], stack["joins"], stack["where"], stack["groupby"], stack["having"], stack["orderby"], stack["limit"])
}

func (c *current) onSQLSelect2() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLSelect2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect2()
}

func (c *current) onSQLSelect7(assignments interface{}) (interface{}, error) {
	return assignments, nil
}

func (p *parser) callonSQLSelect7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect7(stack["assignments"])
}

func (c *current) onSQLAssignment2(rhs, lhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonSQLAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment2(stack["rhs"], stack["lhs"])
}

func (c *current) onSQLAssignment11(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonSQLAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment11(stack["expr"])
}

func (c *current) onSQLAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments7(stack["expr"])
}

func (c *current) onSQLAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSQLFrom2(table, alias interface{}) (interface{}, error) {
	return map[string]interface{}{"table": table, "alias": alias}, nil

}

func (p *parser) callonSQLFrom2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom2(stack["table"], stack["alias"])
}

func (c *current) onSQLFrom12() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLFrom12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom12()
}

func (c *current) onSQLAlias2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias2(stack["id"])
}

func (c *current) onSQLAlias9(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias9(stack["id"])
}

func (c *current) onSQLJoins7(join interface{}) (interface{}, error) {
	return join, nil
}

func (p *parser) callonSQLJoins7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins7(stack["join"])
}

func (c *current) onSQLJoins1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLJoins1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins1(stack["first"], stack["rest"])
}

func (c *current) onSQLJoin1(style, table, alias, leftKey, rightKey interface{}) (interface{}, error) {
	return map[string]interface{}{

		"table": table,

		"style": style,

		"left_key": leftKey,

		"right_key": rightKey,

		"alias": alias}, nil

}

func (p *parser) callonSQLJoin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoin1(stack["style"], stack["table"], stack["alias"], stack["leftKey"], stack["rightKey"])
}

func (c *current) onSQLJoinStyle2(style interface{}) (interface{}, error) {
	return style, nil
}

func (p *parser) callonSQLJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle2(stack["style"])
}

func (c *current) onSQLJoinStyle11() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonSQLJoinStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle11()
}

func (c *current) onSQLWhere1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLWhere1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLWhere1(stack["expr"])
}

func (c *current) onSQLGroupBy1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonSQLGroupBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLGroupBy1(stack["columns"])
}

func (c *current) onSQLHaving1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLHaving1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLHaving1(stack["expr"])
}

func (c *current) onSQLOrderBy1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SQLOrderBy", "keys": keys, "order": order}, nil

}

func (p *parser) callonSQLOrderBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrderBy1(stack["keys"], stack["order"])
}

func (c *current) onSQLOrder2(dir interface{}) (interface{}, error) {
	return dir, nil
}

func (p *parser) callonSQLOrder2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder2(stack["dir"])
}

func (c *current) onSQLOrder9() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonSQLOrder9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder9()
}

func (c *current) onSQLLimit2(count interface{}) (interface{}, error) {
	return count, nil
}

func (p *parser) callonSQLLimit2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit2(stack["count"])
}

func (c *current) onSQLLimit9() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonSQLLimit9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit9()
}

func (c *current) onSELECT1() (interface{}, error) {
	return "select", nil
}

func (p *parser) callonSELECT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSELECT1()
}

func (c *current) onAS1() (interface{}, error) {
	return "as", nil
}

func (p *parser) callonAS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAS1()
}

func (c *current) onFROM1() (interface{}, error) {
	return "from", nil
}

func (p *parser) callonFROM1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFROM1()
}

func (c *current) onJOIN1() (interface{}, error) {
	return "join", nil
}

func (p *parser) callonJOIN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJOIN1()
}

func (c *current) onWHERE1() (interface{}, error) {
	return "where", nil
}

func (p *parser) callonWHERE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWHERE1()
}

func (c *current) onGROUP1() (interface{}, error) {
	return "group", nil
}

func (p *parser) callonGROUP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGROUP1()
}

func (c *current) onHAVING1() (interface{}, error) {
	return "having", nil
}

func (p *parser) callonHAVING1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHAVING1()
}

func (c *current) onORDER1() (interface{}, error) {
	return "order", nil
}

func (p *parser) callonORDER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onORDER1()
}

func (c *current) onON1() (interface{}, error) {
	return "on", nil
}

func (p *parser) callonON1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onON1()
}

func (c *current) onLIMIT1() (interface{}, error) {
	return "limit", nil
}

func (p *parser) callonLIMIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIMIT1()
}

func (c *current) onASC1() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonASC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onASC1()
}

func (c *current) onDESC1() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonDESC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDESC1()
}

func (c *current) onANTI1() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonANTI1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onANTI1()
}

func (c *current) onLEFT1() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonLEFT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLEFT1()
}

func (c *current) onRIGHT1() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonRIGHT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRIGHT1()
}

func (c *current) onINNER1() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonINNER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINNER1()
}

func (c *current) onStringLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonStringLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringLiteral1(stack["v"])
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "float64", "text": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "int64", "text": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "null", "text": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onBytesLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bytes", "text": string(c.text)}, nil

}

func (p *parser) callonBytesLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBytesLiteral1()
}

func (c *current) onTypeLiteral1(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonTypeLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeLiteral1(stack["typ"])
}

func (c *current) onAmbiguousType2(name interface{}) (interface{}, error) {
	return name, nil
}

func (p *parser) callonAmbiguousType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType2(stack["name"])
}

func (c *current) onAmbiguousType8(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeDef", "name": name, "type": typ}, nil

}

func (p *parser) callonAmbiguousType8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType8(stack["name"], stack["typ"])
}

func (c *current) onAmbiguousType21(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType21(stack["name"])
}

func (c *current) onAmbiguousType24(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonAmbiguousType24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType24(stack["u"])
}

func (c *current) onTypeUnion1(types interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeUnion", "types": types}, nil

}

func (p *parser) callonTypeUnion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeUnion1(stack["types"])
}

func (c *current) onTypeList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeList1(stack["first"], stack["rest"])
}

func (c *current) onTypeListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeListTail1(stack["typ"])
}

func (c *current) onComplexType2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType2(stack["fields"])
}

func (c *current) onComplexType10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexType10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType10(stack["typ"])
}

func (c *current) onComplexType18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexType18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType18(stack["typ"])
}

func (c *current) onComplexType26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexType26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType26(stack["keyType"], stack["valType"])
}

func (c *current) onPrimitiveType1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveType1()
}

func (c *current) onTypeFieldList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList1(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTail1(stack["typ"])
}

func (c *current) onTypeField1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeField1(stack["name"], stack["typ"])
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return "in", nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onIdentifierName19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName19()
}

func (c *current) onIdentifierName21(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName21(stack["id"])
}

func (c *current) onTime1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "time", "text": string(c.text)}, nil

}

func (p *parser) callonTime1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTime1()
}

func (c *current) onDuration1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "duration", "text": string(c.text)}, nil

}

func (p *parser) callonDuration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDuration1()
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordChars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordChars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordChars1()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onGlob1(head, tail interface{}) (interface{}, error) {
	return reglob.Reglob(head.(string) + joinChars(tail)), nil

}

func (p *parser) callonGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlob1(stack["head"], stack["tail"])
}

func (c *current) onGlobStart4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonGlobStart4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobStart4()
}

func (c *current) onGlobEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonGlobEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEsc1(stack["s"])
}

func (c *current) onGlobEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonGlobEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape2()
}

func (c *current) onGlobEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonGlobEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape4()
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onEscapeSequence2() (interface{}, error) {
	return "\\" + string(c.text), nil
}

func (p *parser) callonEscapeSequence2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapeSequence2()
}

func (c *current) onSingleCharEscape3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleCharEscape3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape3()
}

func (c *current) onSingleCharEscape6() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape6()
}

func (c *current) onSingleCharEscape8() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape8()
}

func (c *current) onSingleCharEscape10() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape10()
}

func (c *current) onSingleCharEscape12() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape12()
}

func (c *current) onSingleCharEscape14() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape14()
}

func (c *current) onSingleCharEscape16() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape16()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexp1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
