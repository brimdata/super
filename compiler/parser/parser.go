// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/brimdata/zed/reglob"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 7, col: 1, offset: 26},
			expr: &actionExpr{
				pos: position{line: 7, col: 9, offset: 34},
				run: (*parser).callonstart1,
				expr: &seqExpr{
					pos: position{line: 7, col: 9, offset: 34},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 7, col: 9, offset: 34},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 7, col: 12, offset: 37},
							label: "ast",
							expr: &ruleRefExpr{
								pos:  position{line: 7, col: 16, offset: 41},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 27, offset: 52},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 30, offset: 55},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Sequential",
			pos:  position{line: 9, col: 1, offset: 80},
			expr: &choiceExpr{
				pos: position{line: 10, col: 5, offset: 95},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 10, col: 5, offset: 95},
						run: (*parser).callonSequential2,
						expr: &seqExpr{
							pos: position{line: 10, col: 5, offset: 95},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 10, col: 5, offset: 95},
									label: "consts",
									expr: &ruleRefExpr{
										pos:  position{line: 10, col: 12, offset: 102},
										name: "Consts",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 10, col: 19, offset: 109},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 10, col: 22, offset: 112},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 10, col: 28, offset: 118},
										name: "Operation",
									},
								},
								&labeledExpr{
									pos:   position{line: 10, col: 38, offset: 128},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 10, col: 43, offset: 133},
										expr: &ruleRefExpr{
											pos:  position{line: 10, col: 43, offset: 133},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 13, col: 5, offset: 308},
						run: (*parser).callonSequential12,
						expr: &seqExpr{
							pos: position{line: 13, col: 5, offset: 308},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 13, col: 5, offset: 308},
									label: "consts",
									expr: &ruleRefExpr{
										pos:  position{line: 13, col: 12, offset: 315},
										name: "Consts",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 13, col: 19, offset: 322},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 13, col: 22, offset: 325},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 13, col: 25, offset: 328},
										name: "Operation",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SequentialTail",
			pos:  position{line: 17, col: 1, offset: 455},
			expr: &actionExpr{
				pos: position{line: 17, col: 18, offset: 472},
				run: (*parser).callonSequentialTail1,
				expr: &seqExpr{
					pos: position{line: 17, col: 18, offset: 472},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 17, col: 18, offset: 472},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 21, offset: 475},
							name: "Pipe",
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 26, offset: 480},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 17, col: 29, offset: 483},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 31, offset: 485},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Consts",
			pos:  position{line: 19, col: 1, offset: 514},
			expr: &choiceExpr{
				pos: position{line: 20, col: 5, offset: 525},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 20, col: 5, offset: 525},
						expr: &ruleRefExpr{
							pos:  position{line: 20, col: 5, offset: 525},
							name: "Const",
						},
					},
					&actionExpr{
						pos: position{line: 21, col: 5, offset: 536},
						run: (*parser).callonConsts4,
						expr: &ruleRefExpr{
							pos:  position{line: 21, col: 5, offset: 536},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Const",
			pos:  position{line: 23, col: 1, offset: 572},
			expr: &actionExpr{
				pos: position{line: 23, col: 9, offset: 580},
				run: (*parser).callonConst1,
				expr: &seqExpr{
					pos: position{line: 23, col: 9, offset: 580},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 23, col: 9, offset: 580},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 23, col: 12, offset: 583},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 23, col: 14, offset: 585},
								name: "ConstDef",
							},
						},
					},
				},
			},
		},
		{
			name: "ConstDef",
			pos:  position{line: 25, col: 1, offset: 613},
			expr: &choiceExpr{
				pos: position{line: 26, col: 5, offset: 626},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 26, col: 5, offset: 626},
						run: (*parser).callonConstDef2,
						expr: &seqExpr{
							pos: position{line: 26, col: 5, offset: 626},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 26, col: 5, offset: 626},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 26, col: 13, offset: 634},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 26, col: 15, offset: 636},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 26, col: 18, offset: 639},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 26, col: 33, offset: 654},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 26, col: 36, offset: 657},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 26, col: 40, offset: 661},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 26, col: 43, offset: 664},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 26, col: 48, offset: 669},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 29, col: 5, offset: 751},
						run: (*parser).callonConstDef13,
						expr: &seqExpr{
							pos: position{line: 29, col: 5, offset: 751},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 29, col: 5, offset: 751},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 29, col: 12, offset: 758},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 29, col: 14, offset: 760},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 29, col: 17, offset: 763},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 29, col: 32, offset: 778},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 29, col: 35, offset: 781},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 29, col: 39, offset: 785},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 29, col: 42, offset: 788},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 29, col: 46, offset: 792},
										name: "Type",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operation",
			pos:  position{line: 39, col: 1, offset: 1016},
			expr: &choiceExpr{
				pos: position{line: 40, col: 5, offset: 1030},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 40, col: 5, offset: 1030},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 40, col: 5, offset: 1030},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 40, col: 5, offset: 1030},
									val:        "split",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 40, col: 13, offset: 1038},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 40, col: 16, offset: 1041},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 40, col: 20, offset: 1045},
									label: "procArray",
									expr: &oneOrMoreExpr{
										pos: position{line: 40, col: 30, offset: 1055},
										expr: &ruleRefExpr{
											pos:  position{line: 40, col: 30, offset: 1055},
											name: "SplitLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 40, col: 40, offset: 1065},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 40, col: 43, offset: 1068},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 43, col: 5, offset: 1165},
						run: (*parser).callonOperation12,
						expr: &seqExpr{
							pos: position{line: 43, col: 5, offset: 1165},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 43, col: 5, offset: 1165},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 43, col: 14, offset: 1174},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 43, col: 16, offset: 1176},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 43, col: 21, offset: 1181},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 43, col: 26, offset: 1186},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 43, col: 28, offset: 1188},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 43, col: 32, offset: 1192},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 43, col: 38, offset: 1198},
										expr: &ruleRefExpr{
											pos:  position{line: 43, col: 38, offset: 1198},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 43, col: 49, offset: 1209},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 43, col: 52, offset: 1212},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 46, col: 5, offset: 1317},
						run: (*parser).callonOperation25,
						expr: &seqExpr{
							pos: position{line: 46, col: 5, offset: 1317},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 46, col: 5, offset: 1317},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 46, col: 14, offset: 1326},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 46, col: 17, offset: 1329},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 46, col: 21, offset: 1333},
									label: "cases",
									expr: &oneOrMoreExpr{
										pos: position{line: 46, col: 27, offset: 1339},
										expr: &ruleRefExpr{
											pos:  position{line: 46, col: 27, offset: 1339},
											name: "SwitchLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 46, col: 38, offset: 1350},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 46, col: 41, offset: 1353},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 49, col: 5, offset: 1457},
						run: (*parser).callonOperation35,
						expr: &seqExpr{
							pos: position{line: 49, col: 5, offset: 1457},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 49, col: 5, offset: 1457},
									val:        "from",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 49, col: 12, offset: 1464},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 49, col: 15, offset: 1467},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 49, col: 19, offset: 1471},
									label: "trunks",
									expr: &oneOrMoreExpr{
										pos: position{line: 49, col: 26, offset: 1478},
										expr: &ruleRefExpr{
											pos:  position{line: 49, col: 26, offset: 1478},
											name: "FromLeg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 49, col: 35, offset: 1487},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 49, col: 38, offset: 1490},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&labeledExpr{
						pos:   position{line: 52, col: 5, offset: 1581},
						label: "op",
						expr: &ruleRefExpr{
							pos:  position{line: 52, col: 8, offset: 1584},
							name: "Operator",
						},
					},
					&actionExpr{
						pos: position{line: 53, col: 5, offset: 1597},
						run: (*parser).callonOperation47,
						expr: &seqExpr{
							pos: position{line: 53, col: 5, offset: 1597},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 53, col: 5, offset: 1597},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 53, col: 7, offset: 1599},
										name: "Function",
									},
								},
								&andExpr{
									pos: position{line: 53, col: 16, offset: 1608},
									expr: &ruleRefExpr{
										pos:  position{line: 53, col: 17, offset: 1609},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 54, col: 5, offset: 1639},
						run: (*parser).callonOperation53,
						expr: &seqExpr{
							pos: position{line: 54, col: 5, offset: 1639},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 54, col: 5, offset: 1639},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 54, col: 7, offset: 1641},
										name: "OpAssignment",
									},
								},
								&andExpr{
									pos: position{line: 54, col: 20, offset: 1654},
									expr: &ruleRefExpr{
										pos:  position{line: 54, col: 21, offset: 1655},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 55, col: 5, offset: 1685},
						run: (*parser).callonOperation59,
						expr: &seqExpr{
							pos: position{line: 55, col: 5, offset: 1685},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 55, col: 5, offset: 1685},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 55, col: 7, offset: 1687},
										name: "Aggregation",
									},
								},
								&andExpr{
									pos: position{line: 55, col: 19, offset: 1699},
									expr: &ruleRefExpr{
										pos:  position{line: 55, col: 20, offset: 1700},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 56, col: 5, offset: 1731},
						run: (*parser).callonOperation65,
						expr: &seqExpr{
							pos: position{line: 56, col: 5, offset: 1731},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 56, col: 5, offset: 1731},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 56, col: 10, offset: 1736},
										name: "SearchBoolean",
									},
								},
								&notExpr{
									pos: position{line: 56, col: 24, offset: 1750},
									expr: &ruleRefExpr{
										pos:  position{line: 56, col: 25, offset: 1751},
										name: "AggGuard",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EndOfOp",
			pos:  position{line: 60, col: 1, offset: 1842},
			expr: &seqExpr{
				pos: position{line: 60, col: 11, offset: 1852},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 60, col: 11, offset: 1852},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 60, col: 15, offset: 1856},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 60, col: 15, offset: 1856},
								name: "Pipe",
							},
							&ruleRefExpr{
								pos:  position{line: 60, col: 22, offset: 1863},
								name: "SearchKeywordGuard",
							},
							&litMatcher{
								pos:        position{line: 60, col: 43, offset: 1884},
								val:        "=>",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 60, col: 50, offset: 1891},
								val:        ")",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 60, col: 56, offset: 1897},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "Pipe",
			pos:  position{line: 61, col: 1, offset: 1902},
			expr: &seqExpr{
				pos: position{line: 61, col: 8, offset: 1909},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 61, col: 8, offset: 1909},
						val:        "|",
						ignoreCase: false,
					},
					&notExpr{
						pos: position{line: 61, col: 12, offset: 1913},
						expr: &choiceExpr{
							pos: position{line: 61, col: 14, offset: 1915},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 61, col: 14, offset: 1915},
									val:        "{",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 61, col: 20, offset: 1921},
									val:        "[",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SplitLeg",
			pos:  position{line: 63, col: 1, offset: 1927},
			expr: &actionExpr{
				pos: position{line: 64, col: 5, offset: 1940},
				run: (*parser).callonSplitLeg1,
				expr: &seqExpr{
					pos: position{line: 64, col: 5, offset: 1940},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 64, col: 5, offset: 1940},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 64, col: 8, offset: 1943},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 64, col: 13, offset: 1948},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 64, col: 16, offset: 1951},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 64, col: 18, offset: 1953},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchLeg",
			pos:  position{line: 66, col: 1, offset: 1983},
			expr: &actionExpr{
				pos: position{line: 67, col: 5, offset: 1997},
				run: (*parser).callonSwitchLeg1,
				expr: &seqExpr{
					pos: position{line: 67, col: 5, offset: 1997},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 67, col: 5, offset: 1997},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 67, col: 8, offset: 2000},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 67, col: 13, offset: 2005},
								name: "Case",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 67, col: 18, offset: 2010},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 67, col: 21, offset: 2013},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 67, col: 26, offset: 2018},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 67, col: 29, offset: 2021},
							label: "proc",
							expr: &ruleRefExpr{
								pos:  position{line: 67, col: 34, offset: 2026},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "Case",
			pos:  position{line: 71, col: 1, offset: 2115},
			expr: &choiceExpr{
				pos: position{line: 72, col: 5, offset: 2124},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 72, col: 5, offset: 2124},
						run: (*parser).callonCase2,
						expr: &seqExpr{
							pos: position{line: 72, col: 5, offset: 2124},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 72, col: 5, offset: 2124},
									val:        "case",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 72, col: 12, offset: 2131},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 72, col: 14, offset: 2133},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 72, col: 19, offset: 2138},
										name: "Expr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 73, col: 5, offset: 2168},
						run: (*parser).callonCase8,
						expr: &litMatcher{
							pos:        position{line: 73, col: 5, offset: 2168},
							val:        "default",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromLeg",
			pos:  position{line: 75, col: 1, offset: 2199},
			expr: &choiceExpr{
				pos: position{line: 76, col: 5, offset: 2211},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 76, col: 5, offset: 2211},
						run: (*parser).callonFromLeg2,
						expr: &seqExpr{
							pos: position{line: 76, col: 5, offset: 2211},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 76, col: 5, offset: 2211},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 76, col: 8, offset: 2214},
									label: "source",
									expr: &ruleRefExpr{
										pos:  position{line: 76, col: 15, offset: 2221},
										name: "FromHead",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 76, col: 24, offset: 2230},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 76, col: 28, offset: 2234},
									label: "seq",
									expr: &ruleRefExpr{
										pos:  position{line: 76, col: 32, offset: 2238},
										name: "Sequential",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 79, col: 5, offset: 2349},
						run: (*parser).callonFromLeg10,
						expr: &seqExpr{
							pos: position{line: 79, col: 5, offset: 2349},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 79, col: 5, offset: 2349},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 79, col: 8, offset: 2352},
									label: "source",
									expr: &ruleRefExpr{
										pos:  position{line: 79, col: 15, offset: 2359},
										name: "FromSource",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FromHead",
			pos:  position{line: 83, col: 1, offset: 2467},
			expr: &actionExpr{
				pos: position{line: 84, col: 5, offset: 2480},
				run: (*parser).callonFromHead1,
				expr: &seqExpr{
					pos: position{line: 84, col: 5, offset: 2480},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 84, col: 5, offset: 2480},
							label: "src",
							expr: &ruleRefExpr{
								pos:  position{line: 84, col: 9, offset: 2484},
								name: "FromSource",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 84, col: 20, offset: 2495},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 84, col: 23, offset: 2498},
							val:        "=>",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromSource",
			pos:  position{line: 86, col: 1, offset: 2524},
			expr: &choiceExpr{
				pos: position{line: 87, col: 5, offset: 2539},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 87, col: 5, offset: 2539},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 88, col: 5, offset: 2548},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 89, col: 5, offset: 2556},
						name: "Pool",
					},
					&ruleRefExpr{
						pos:  position{line: 90, col: 5, offset: 2565},
						name: "PassProc",
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 92, col: 1, offset: 2575},
			expr: &seqExpr{
				pos: position{line: 92, col: 13, offset: 2587},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 92, col: 13, offset: 2587},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 92, col: 17, offset: 2591},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 92, col: 18, offset: 2592},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 92, col: 18, offset: 2592},
										expr: &litMatcher{
											pos:        position{line: 92, col: 19, offset: 2593},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 92, col: 24, offset: 2598},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 92, col: 38, offset: 2612},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 92, col: 57, offset: 2631},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 92, col: 82, offset: 2656},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 92, col: 88, offset: 2662},
								val:        "(",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 92, col: 94, offset: 2668},
								val:        "[",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 92, col: 100, offset: 2674},
								val:        "matches",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 94, col: 1, offset: 2686},
			expr: &actionExpr{
				pos: position{line: 94, col: 14, offset: 2699},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 94, col: 15, offset: 2700},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 94, col: 15, offset: 2700},
							val:        "==",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 94, col: 22, offset: 2707},
							val:        "!=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 94, col: 29, offset: 2714},
							val:        "in",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 94, col: 36, offset: 2721},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 94, col: 43, offset: 2728},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 94, col: 49, offset: 2734},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 94, col: 56, offset: 2741},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AggGuard",
			pos:  position{line: 96, col: 1, offset: 2778},
			expr: &choiceExpr{
				pos: position{line: 96, col: 12, offset: 2789},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 96, col: 13, offset: 2790},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 96, col: 13, offset: 2790},
								name: "_",
							},
							&choiceExpr{
								pos: position{line: 96, col: 16, offset: 2793},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 96, col: 16, offset: 2793},
										name: "ByToken",
									},
									&litMatcher{
										pos:        position{line: 96, col: 26, offset: 2803},
										val:        "-with",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 96, col: 35, offset: 2812},
								name: "EOT",
							},
						},
					},
					&seqExpr{
						pos: position{line: 96, col: 43, offset: 2820},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 96, col: 43, offset: 2820},
								name: "__",
							},
							&litMatcher{
								pos:        position{line: 96, col: 46, offset: 2823},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 98, col: 1, offset: 2829},
			expr: &actionExpr{
				pos: position{line: 99, col: 5, offset: 2847},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 99, col: 5, offset: 2847},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 99, col: 5, offset: 2847},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 99, col: 11, offset: 2853},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 99, col: 21, offset: 2863},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 99, col: 26, offset: 2868},
								expr: &ruleRefExpr{
									pos:  position{line: 99, col: 26, offset: 2868},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 103, col: 1, offset: 2942},
			expr: &actionExpr{
				pos: position{line: 103, col: 16, offset: 2957},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 103, col: 16, offset: 2957},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 103, col: 16, offset: 2957},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 103, col: 18, offset: 2959},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 103, col: 26, offset: 2967},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 103, col: 28, offset: 2969},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 103, col: 30, offset: 2971},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 105, col: 1, offset: 3021},
			expr: &actionExpr{
				pos: position{line: 106, col: 5, offset: 3035},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 106, col: 5, offset: 3035},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 106, col: 5, offset: 3035},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 106, col: 11, offset: 3041},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 107, col: 5, offset: 3058},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 107, col: 10, offset: 3063},
								expr: &actionExpr{
									pos: position{line: 107, col: 11, offset: 3064},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 107, col: 11, offset: 3064},
										exprs: []interface{}{
											&zeroOrOneExpr{
												pos: position{line: 107, col: 11, offset: 3064},
												expr: &seqExpr{
													pos: position{line: 107, col: 12, offset: 3065},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 107, col: 12, offset: 3065},
															name: "_",
														},
														&ruleRefExpr{
															pos:  position{line: 107, col: 14, offset: 3067},
															name: "AndToken",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 107, col: 25, offset: 3078},
												name: "_",
											},
											&notExpr{
												pos: position{line: 107, col: 27, offset: 3080},
												expr: &choiceExpr{
													pos: position{line: 107, col: 29, offset: 3082},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 107, col: 29, offset: 3082},
															name: "OrToken",
														},
														&ruleRefExpr{
															pos:  position{line: 107, col: 39, offset: 3092},
															name: "SearchKeywordGuard",
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 107, col: 59, offset: 3112},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 107, col: 64, offset: 3117},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchKeywordGuard",
			pos:  position{line: 111, col: 1, offset: 3233},
			expr: &choiceExpr{
				pos: position{line: 112, col: 5, offset: 3256},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 112, col: 5, offset: 3256},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 112, col: 5, offset: 3256},
								name: "FromHead",
							},
							&ruleRefExpr{
								pos:  position{line: 112, col: 14, offset: 3265},
								name: "__",
							},
						},
					},
					&seqExpr{
						pos: position{line: 113, col: 5, offset: 3272},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 113, col: 5, offset: 3272},
								name: "Case",
							},
							&ruleRefExpr{
								pos:  position{line: 113, col: 10, offset: 3277},
								name: "__",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 115, col: 1, offset: 3281},
			expr: &choiceExpr{
				pos: position{line: 116, col: 5, offset: 3298},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 116, col: 5, offset: 3298},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 116, col: 5, offset: 3298},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 116, col: 6, offset: 3299},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 116, col: 6, offset: 3299},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 116, col: 6, offset: 3299},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 116, col: 15, offset: 3308},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 116, col: 19, offset: 3312},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 116, col: 19, offset: 3312},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 116, col: 23, offset: 3316},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 116, col: 27, offset: 3320},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 116, col: 29, offset: 3322},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 119, col: 5, offset: 3434},
						run: (*parser).callonSearchFactor13,
						expr: &seqExpr{
							pos: position{line: 119, col: 5, offset: 3434},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 119, col: 5, offset: 3434},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 119, col: 9, offset: 3438},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 119, col: 12, offset: 3441},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 119, col: 17, offset: 3446},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 119, col: 31, offset: 3460},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 119, col: 34, offset: 3463},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 120, col: 5, offset: 3492},
						name: "SearchExpr",
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 122, col: 1, offset: 3504},
			expr: &choiceExpr{
				pos: position{line: 123, col: 5, offset: 3519},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 123, col: 5, offset: 3519},
						run: (*parser).callonSearchExpr2,
						expr: &labeledExpr{
							pos:   position{line: 123, col: 5, offset: 3519},
							label: "search",
							expr: &ruleRefExpr{
								pos:  position{line: 123, col: 12, offset: 3526},
								name: "PatternSearch",
							},
						},
					},
					&actionExpr{
						pos: position{line: 124, col: 5, offset: 3567},
						run: (*parser).callonSearchExpr5,
						expr: &seqExpr{
							pos: position{line: 124, col: 5, offset: 3567},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 124, col: 5, offset: 3567},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 124, col: 7, offset: 3569},
										name: "SearchValue",
									},
								},
								&notExpr{
									pos: position{line: 124, col: 19, offset: 3581},
									expr: &ruleRefExpr{
										pos:  position{line: 124, col: 20, offset: 3582},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 127, col: 5, offset: 3699},
						run: (*parser).callonSearchExpr11,
						expr: &seqExpr{
							pos: position{line: 127, col: 5, offset: 3699},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 127, col: 5, offset: 3699},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 127, col: 9, offset: 3703},
									expr: &ruleRefExpr{
										pos:  position{line: 127, col: 10, offset: 3704},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 130, col: 5, offset: 3820},
						name: "EqualityCompareExpr",
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 132, col: 1, offset: 3841},
			expr: &choiceExpr{
				pos: position{line: 133, col: 5, offset: 3857},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 133, col: 5, offset: 3857},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 134, col: 5, offset: 3869},
						run: (*parser).callonSearchValue3,
						expr: &seqExpr{
							pos: position{line: 134, col: 5, offset: 3869},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 134, col: 5, offset: 3869},
									expr: &ruleRefExpr{
										pos:  position{line: 134, col: 6, offset: 3870},
										name: "Regexp",
									},
								},
								&labeledExpr{
									pos:   position{line: 134, col: 13, offset: 3877},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 134, col: 15, offset: 3879},
										name: "KeyWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PatternSearch",
			pos:  position{line: 138, col: 1, offset: 3987},
			expr: &actionExpr{
				pos: position{line: 139, col: 5, offset: 4005},
				run: (*parser).callonPatternSearch1,
				expr: &labeledExpr{
					pos:   position{line: 139, col: 5, offset: 4005},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 139, col: 13, offset: 4013},
						name: "Pattern",
					},
				},
			},
		},
		{
			name: "PatternMatch",
			pos:  position{line: 143, col: 1, offset: 4115},
			expr: &actionExpr{
				pos: position{line: 144, col: 5, offset: 4132},
				run: (*parser).callonPatternMatch1,
				expr: &seqExpr{
					pos: position{line: 144, col: 5, offset: 4132},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 144, col: 5, offset: 4132},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 144, col: 7, offset: 4134},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 144, col: 12, offset: 4139},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 144, col: 14, offset: 4141},
							val:        "matches",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 144, col: 25, offset: 4152},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 144, col: 28, offset: 4155},
							label: "pattern",
							expr: &ruleRefExpr{
								pos:  position{line: 144, col: 36, offset: 4163},
								name: "Pattern",
							},
						},
					},
				},
			},
		},
		{
			name: "Pattern",
			pos:  position{line: 148, col: 1, offset: 4275},
			expr: &choiceExpr{
				pos: position{line: 148, col: 11, offset: 4285},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 148, col: 11, offset: 4285},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 148, col: 20, offset: 4294},
						name: "Glob",
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 152, col: 1, offset: 4326},
			expr: &choiceExpr{
				pos: position{line: 153, col: 5, offset: 4342},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 153, col: 5, offset: 4342},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 153, col: 5, offset: 4342},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 153, col: 5, offset: 4342},
									expr: &ruleRefExpr{
										pos:  position{line: 153, col: 5, offset: 4342},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 153, col: 16, offset: 4353},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 153, col: 21, offset: 4358},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 153, col: 33, offset: 4370},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 153, col: 39, offset: 4376},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 156, col: 5, offset: 4502},
						run: (*parser).callonAggregation10,
						expr: &seqExpr{
							pos: position{line: 156, col: 5, offset: 4502},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 156, col: 5, offset: 4502},
									expr: &ruleRefExpr{
										pos:  position{line: 156, col: 5, offset: 4502},
										name: "Summarize",
									},
								},
								&labeledExpr{
									pos:   position{line: 156, col: 16, offset: 4513},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 156, col: 21, offset: 4518},
										name: "AggAssignments",
									},
								},
								&labeledExpr{
									pos:   position{line: 156, col: 36, offset: 4533},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 156, col: 41, offset: 4538},
										expr: &seqExpr{
											pos: position{line: 156, col: 42, offset: 4539},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 156, col: 42, offset: 4539},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 156, col: 44, offset: 4541},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 156, col: 58, offset: 4555},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 156, col: 64, offset: 4561},
										name: "LimitArg",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Summarize",
			pos:  position{line: 164, col: 1, offset: 4775},
			expr: &seqExpr{
				pos: position{line: 164, col: 13, offset: 4787},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 164, col: 13, offset: 4787},
						val:        "summarize",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 164, col: 25, offset: 4799},
						name: "_",
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 166, col: 1, offset: 4802},
			expr: &actionExpr{
				pos: position{line: 167, col: 5, offset: 4818},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 167, col: 5, offset: 4818},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 167, col: 5, offset: 4818},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 167, col: 13, offset: 4826},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 167, col: 15, offset: 4828},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 167, col: 23, offset: 4836},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 169, col: 1, offset: 4877},
			expr: &choiceExpr{
				pos: position{line: 170, col: 5, offset: 4890},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 170, col: 5, offset: 4890},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 170, col: 5, offset: 4890},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 170, col: 5, offset: 4890},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 170, col: 7, offset: 4892},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 170, col: 14, offset: 4899},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 170, col: 16, offset: 4901},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 170, col: 25, offset: 4910},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 170, col: 27, offset: 4912},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 170, col: 33, offset: 4918},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 171, col: 5, offset: 4949},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 171, col: 5, offset: 4949},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 176, col: 1, offset: 5209},
			expr: &choiceExpr{
				pos: position{line: 177, col: 5, offset: 5228},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 177, col: 5, offset: 5228},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 178, col: 5, offset: 5243},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 178, col: 5, offset: 5243},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 178, col: 10, offset: 5248},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 180, col: 1, offset: 5340},
			expr: &actionExpr{
				pos: position{line: 181, col: 5, offset: 5360},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 181, col: 5, offset: 5360},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 181, col: 5, offset: 5360},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 181, col: 11, offset: 5366},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 181, col: 26, offset: 5381},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 181, col: 31, offset: 5386},
								expr: &actionExpr{
									pos: position{line: 181, col: 32, offset: 5387},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 181, col: 32, offset: 5387},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 181, col: 32, offset: 5387},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 181, col: 35, offset: 5390},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 181, col: 39, offset: 5394},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 181, col: 42, offset: 5397},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 181, col: 47, offset: 5402},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignment",
			pos:  position{line: 185, col: 1, offset: 5524},
			expr: &choiceExpr{
				pos: position{line: 186, col: 5, offset: 5542},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 186, col: 5, offset: 5542},
						run: (*parser).callonAggAssignment2,
						expr: &seqExpr{
							pos: position{line: 186, col: 5, offset: 5542},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 186, col: 5, offset: 5542},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 186, col: 10, offset: 5547},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 186, col: 15, offset: 5552},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 186, col: 18, offset: 5555},
									val:        ":=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 186, col: 23, offset: 5560},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 186, col: 26, offset: 5563},
									label: "agg",
									expr: &ruleRefExpr{
										pos:  position{line: 186, col: 30, offset: 5567},
										name: "Agg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 189, col: 5, offset: 5671},
						run: (*parser).callonAggAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 189, col: 5, offset: 5671},
							label: "agg",
							expr: &ruleRefExpr{
								pos:  position{line: 189, col: 9, offset: 5675},
								name: "Agg",
							},
						},
					},
				},
			},
		},
		{
			name: "Agg",
			pos:  position{line: 193, col: 1, offset: 5775},
			expr: &actionExpr{
				pos: position{line: 194, col: 5, offset: 5783},
				run: (*parser).callonAgg1,
				expr: &seqExpr{
					pos: position{line: 194, col: 5, offset: 5783},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 194, col: 5, offset: 5783},
							expr: &ruleRefExpr{
								pos:  position{line: 194, col: 6, offset: 5784},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 194, col: 16, offset: 5794},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 194, col: 19, offset: 5797},
								name: "AggName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 194, col: 27, offset: 5805},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 194, col: 30, offset: 5808},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 194, col: 34, offset: 5812},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 194, col: 37, offset: 5815},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 194, col: 42, offset: 5820},
								expr: &ruleRefExpr{
									pos:  position{line: 194, col: 42, offset: 5820},
									name: "Expr",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 194, col: 49, offset: 5827},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 194, col: 52, offset: 5830},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 194, col: 56, offset: 5834},
							expr: &seqExpr{
								pos: position{line: 194, col: 58, offset: 5836},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 194, col: 58, offset: 5836},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 194, col: 61, offset: 5839},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 194, col: 66, offset: 5844},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 194, col: 72, offset: 5850},
								expr: &ruleRefExpr{
									pos:  position{line: 194, col: 72, offset: 5850},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggName",
			pos:  position{line: 202, col: 1, offset: 6040},
			expr: &choiceExpr{
				pos: position{line: 203, col: 5, offset: 6052},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 203, col: 5, offset: 6052},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 204, col: 5, offset: 6071},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 205, col: 5, offset: 6084},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 207, col: 1, offset: 6093},
			expr: &actionExpr{
				pos: position{line: 207, col: 15, offset: 6107},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 207, col: 15, offset: 6107},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 207, col: 15, offset: 6107},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 207, col: 17, offset: 6109},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 207, col: 25, offset: 6117},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 207, col: 27, offset: 6119},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 207, col: 32, offset: 6124},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignments",
			pos:  position{line: 209, col: 1, offset: 6160},
			expr: &actionExpr{
				pos: position{line: 210, col: 5, offset: 6179},
				run: (*parser).callonAggAssignments1,
				expr: &seqExpr{
					pos: position{line: 210, col: 5, offset: 6179},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 210, col: 5, offset: 6179},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 210, col: 11, offset: 6185},
								name: "AggAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 210, col: 25, offset: 6199},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 210, col: 30, offset: 6204},
								expr: &seqExpr{
									pos: position{line: 210, col: 31, offset: 6205},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 210, col: 31, offset: 6205},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 210, col: 34, offset: 6208},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 210, col: 38, offset: 6212},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 210, col: 41, offset: 6215},
											name: "AggAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 220, col: 1, offset: 6451},
			expr: &choiceExpr{
				pos: position{line: 221, col: 5, offset: 6464},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 221, col: 5, offset: 6464},
						name: "SortProc",
					},
					&ruleRefExpr{
						pos:  position{line: 222, col: 5, offset: 6477},
						name: "TopProc",
					},
					&ruleRefExpr{
						pos:  position{line: 223, col: 5, offset: 6489},
						name: "CutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 224, col: 5, offset: 6501},
						name: "DropProc",
					},
					&ruleRefExpr{
						pos:  position{line: 225, col: 5, offset: 6514},
						name: "HeadProc",
					},
					&ruleRefExpr{
						pos:  position{line: 226, col: 5, offset: 6527},
						name: "TailProc",
					},
					&ruleRefExpr{
						pos:  position{line: 227, col: 5, offset: 6540},
						name: "FilterProc",
					},
					&ruleRefExpr{
						pos:  position{line: 228, col: 5, offset: 6555},
						name: "UniqProc",
					},
					&ruleRefExpr{
						pos:  position{line: 229, col: 5, offset: 6568},
						name: "PutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 230, col: 5, offset: 6580},
						name: "RenameProc",
					},
					&ruleRefExpr{
						pos:  position{line: 231, col: 5, offset: 6595},
						name: "FuseProc",
					},
					&ruleRefExpr{
						pos:  position{line: 232, col: 5, offset: 6608},
						name: "ShapeProc",
					},
					&ruleRefExpr{
						pos:  position{line: 233, col: 5, offset: 6622},
						name: "JoinProc",
					},
					&ruleRefExpr{
						pos:  position{line: 234, col: 5, offset: 6635},
						name: "SampleProc",
					},
					&ruleRefExpr{
						pos:  position{line: 235, col: 5, offset: 6650},
						name: "SQLProc",
					},
					&ruleRefExpr{
						pos:  position{line: 236, col: 5, offset: 6662},
						name: "FromProc",
					},
					&ruleRefExpr{
						pos:  position{line: 237, col: 5, offset: 6675},
						name: "PassProc",
					},
					&ruleRefExpr{
						pos:  position{line: 238, col: 5, offset: 6688},
						name: "ExplodeProc",
					},
					&ruleRefExpr{
						pos:  position{line: 239, col: 5, offset: 6704},
						name: "LetProc",
					},
					&ruleRefExpr{
						pos:  position{line: 240, col: 5, offset: 6716},
						name: "MergeProc",
					},
					&ruleRefExpr{
						pos:  position{line: 241, col: 5, offset: 6730},
						name: "OverProc",
					},
					&ruleRefExpr{
						pos:  position{line: 242, col: 5, offset: 6743},
						name: "YieldProc",
					},
				},
			},
		},
		{
			name: "SortProc",
			pos:  position{line: 244, col: 1, offset: 6754},
			expr: &actionExpr{
				pos: position{line: 245, col: 5, offset: 6767},
				run: (*parser).callonSortProc1,
				expr: &seqExpr{
					pos: position{line: 245, col: 5, offset: 6767},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 245, col: 5, offset: 6767},
							val:        "sort",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 245, col: 13, offset: 6775},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 245, col: 18, offset: 6780},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 245, col: 27, offset: 6789},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 245, col: 32, offset: 6794},
								expr: &actionExpr{
									pos: position{line: 245, col: 33, offset: 6795},
									run: (*parser).callonSortProc8,
									expr: &seqExpr{
										pos: position{line: 245, col: 33, offset: 6795},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 245, col: 33, offset: 6795},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 245, col: 35, offset: 6797},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 245, col: 37, offset: 6799},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 259, col: 1, offset: 7218},
			expr: &actionExpr{
				pos: position{line: 259, col: 12, offset: 7229},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 259, col: 12, offset: 7229},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 259, col: 17, offset: 7234},
						expr: &actionExpr{
							pos: position{line: 259, col: 18, offset: 7235},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 259, col: 18, offset: 7235},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 259, col: 18, offset: 7235},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 259, col: 20, offset: 7237},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 259, col: 22, offset: 7239},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 261, col: 1, offset: 7295},
			expr: &choiceExpr{
				pos: position{line: 262, col: 5, offset: 7307},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 262, col: 5, offset: 7307},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 262, col: 5, offset: 7307},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 263, col: 5, offset: 7382},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 263, col: 5, offset: 7382},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 263, col: 5, offset: 7382},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 263, col: 14, offset: 7391},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 263, col: 16, offset: 7393},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 263, col: 23, offset: 7400},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 263, col: 24, offset: 7401},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 263, col: 24, offset: 7401},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 263, col: 34, offset: 7411},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopProc",
			pos:  position{line: 265, col: 1, offset: 7525},
			expr: &actionExpr{
				pos: position{line: 266, col: 5, offset: 7537},
				run: (*parser).callonTopProc1,
				expr: &seqExpr{
					pos: position{line: 266, col: 5, offset: 7537},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 266, col: 5, offset: 7537},
							val:        "top",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 266, col: 12, offset: 7544},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 266, col: 18, offset: 7550},
								expr: &actionExpr{
									pos: position{line: 266, col: 19, offset: 7551},
									run: (*parser).callonTopProc6,
									expr: &seqExpr{
										pos: position{line: 266, col: 19, offset: 7551},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 266, col: 19, offset: 7551},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 266, col: 21, offset: 7553},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 266, col: 23, offset: 7555},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 266, col: 47, offset: 7579},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 266, col: 53, offset: 7585},
								expr: &seqExpr{
									pos: position{line: 266, col: 54, offset: 7586},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 266, col: 54, offset: 7586},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 266, col: 56, offset: 7588},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 266, col: 67, offset: 7599},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 266, col: 74, offset: 7606},
								expr: &actionExpr{
									pos: position{line: 266, col: 75, offset: 7607},
									run: (*parser).callonTopProc18,
									expr: &seqExpr{
										pos: position{line: 266, col: 75, offset: 7607},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 266, col: 75, offset: 7607},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 266, col: 77, offset: 7609},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 266, col: 79, offset: 7611},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutProc",
			pos:  position{line: 280, col: 1, offset: 7956},
			expr: &actionExpr{
				pos: position{line: 281, col: 5, offset: 7968},
				run: (*parser).callonCutProc1,
				expr: &seqExpr{
					pos: position{line: 281, col: 5, offset: 7968},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 281, col: 5, offset: 7968},
							val:        "cut",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 281, col: 12, offset: 7975},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 281, col: 14, offset: 7977},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 281, col: 19, offset: 7982},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropProc",
			pos:  position{line: 285, col: 1, offset: 8077},
			expr: &actionExpr{
				pos: position{line: 286, col: 5, offset: 8090},
				run: (*parser).callonDropProc1,
				expr: &seqExpr{
					pos: position{line: 286, col: 5, offset: 8090},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 286, col: 5, offset: 8090},
							val:        "drop",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 286, col: 13, offset: 8098},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 286, col: 15, offset: 8100},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 286, col: 20, offset: 8105},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadProc",
			pos:  position{line: 290, col: 1, offset: 8196},
			expr: &choiceExpr{
				pos: position{line: 291, col: 5, offset: 8209},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 291, col: 5, offset: 8209},
						run: (*parser).callonHeadProc2,
						expr: &seqExpr{
							pos: position{line: 291, col: 5, offset: 8209},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 291, col: 5, offset: 8209},
									val:        "head",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 291, col: 13, offset: 8217},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 291, col: 15, offset: 8219},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 291, col: 21, offset: 8225},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 292, col: 5, offset: 8305},
						run: (*parser).callonHeadProc8,
						expr: &litMatcher{
							pos:        position{line: 292, col: 5, offset: 8305},
							val:        "head",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "TailProc",
			pos:  position{line: 294, col: 1, offset: 8381},
			expr: &choiceExpr{
				pos: position{line: 295, col: 5, offset: 8394},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 295, col: 5, offset: 8394},
						run: (*parser).callonTailProc2,
						expr: &seqExpr{
							pos: position{line: 295, col: 5, offset: 8394},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 295, col: 5, offset: 8394},
									val:        "tail",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 295, col: 13, offset: 8402},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 295, col: 15, offset: 8404},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 295, col: 21, offset: 8410},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 296, col: 5, offset: 8490},
						run: (*parser).callonTailProc8,
						expr: &litMatcher{
							pos:        position{line: 296, col: 5, offset: 8490},
							val:        "tail",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "FilterProc",
			pos:  position{line: 298, col: 1, offset: 8566},
			expr: &actionExpr{
				pos: position{line: 299, col: 5, offset: 8581},
				run: (*parser).callonFilterProc1,
				expr: &seqExpr{
					pos: position{line: 299, col: 5, offset: 8581},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 299, col: 5, offset: 8581},
							val:        "filter",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 299, col: 15, offset: 8591},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 299, col: 17, offset: 8593},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 299, col: 20, offset: 8596},
								name: "Filter",
							},
						},
					},
				},
			},
		},
		{
			name: "Filter",
			pos:  position{line: 303, col: 1, offset: 8633},
			expr: &actionExpr{
				pos: position{line: 304, col: 5, offset: 8644},
				run: (*parser).callonFilter1,
				expr: &labeledExpr{
					pos:   position{line: 304, col: 5, offset: 8644},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 304, col: 10, offset: 8649},
						name: "SearchBoolean",
					},
				},
			},
		},
		{
			name: "UniqProc",
			pos:  position{line: 308, col: 1, offset: 8745},
			expr: &choiceExpr{
				pos: position{line: 309, col: 5, offset: 8758},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 309, col: 5, offset: 8758},
						run: (*parser).callonUniqProc2,
						expr: &seqExpr{
							pos: position{line: 309, col: 5, offset: 8758},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 309, col: 5, offset: 8758},
									val:        "uniq",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 309, col: 13, offset: 8766},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 309, col: 15, offset: 8768},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 312, col: 5, offset: 8857},
						run: (*parser).callonUniqProc7,
						expr: &litMatcher{
							pos:        position{line: 312, col: 5, offset: 8857},
							val:        "uniq",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "PutProc",
			pos:  position{line: 316, col: 1, offset: 8947},
			expr: &actionExpr{
				pos: position{line: 317, col: 5, offset: 8959},
				run: (*parser).callonPutProc1,
				expr: &seqExpr{
					pos: position{line: 317, col: 5, offset: 8959},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 317, col: 5, offset: 8959},
							val:        "put",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 317, col: 12, offset: 8966},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 317, col: 14, offset: 8968},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 317, col: 19, offset: 8973},
								name: "Assignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameProc",
			pos:  position{line: 321, col: 1, offset: 9064},
			expr: &actionExpr{
				pos: position{line: 322, col: 5, offset: 9079},
				run: (*parser).callonRenameProc1,
				expr: &seqExpr{
					pos: position{line: 322, col: 5, offset: 9079},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 322, col: 5, offset: 9079},
							val:        "rename",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 322, col: 15, offset: 9089},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 322, col: 17, offset: 9091},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 322, col: 23, offset: 9097},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 322, col: 34, offset: 9108},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 322, col: 39, offset: 9113},
								expr: &actionExpr{
									pos: position{line: 322, col: 40, offset: 9114},
									run: (*parser).callonRenameProc9,
									expr: &seqExpr{
										pos: position{line: 322, col: 40, offset: 9114},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 322, col: 40, offset: 9114},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 322, col: 43, offset: 9117},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 322, col: 47, offset: 9121},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 322, col: 50, offset: 9124},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 322, col: 53, offset: 9127},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseProc",
			pos:  position{line: 330, col: 1, offset: 9536},
			expr: &actionExpr{
				pos: position{line: 331, col: 5, offset: 9549},
				run: (*parser).callonFuseProc1,
				expr: &seqExpr{
					pos: position{line: 331, col: 5, offset: 9549},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 331, col: 5, offset: 9549},
							val:        "fuse",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 331, col: 13, offset: 9557},
							expr: &seqExpr{
								pos: position{line: 331, col: 15, offset: 9559},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 331, col: 15, offset: 9559},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 331, col: 18, offset: 9562},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShapeProc",
			pos:  position{line: 335, col: 1, offset: 9633},
			expr: &actionExpr{
				pos: position{line: 336, col: 5, offset: 9647},
				run: (*parser).callonShapeProc1,
				expr: &litMatcher{
					pos:        position{line: 336, col: 5, offset: 9647},
					val:        "shape",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JoinProc",
			pos:  position{line: 340, col: 1, offset: 9723},
			expr: &choiceExpr{
				pos: position{line: 341, col: 5, offset: 9736},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 341, col: 5, offset: 9736},
						run: (*parser).callonJoinProc2,
						expr: &seqExpr{
							pos: position{line: 341, col: 5, offset: 9736},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 341, col: 5, offset: 9736},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 341, col: 11, offset: 9742},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 341, col: 21, offset: 9752},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 341, col: 29, offset: 9760},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 341, col: 31, offset: 9762},
									name: "ON",
								},
								&ruleRefExpr{
									pos:  position{line: 341, col: 34, offset: 9765},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 341, col: 36, offset: 9767},
									label: "leftKey",
									expr: &ruleRefExpr{
										pos:  position{line: 341, col: 44, offset: 9775},
										name: "JoinKey",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 341, col: 52, offset: 9783},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 341, col: 55, offset: 9786},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 341, col: 59, offset: 9790},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 341, col: 62, offset: 9793},
									label: "rightKey",
									expr: &ruleRefExpr{
										pos:  position{line: 341, col: 71, offset: 9802},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 341, col: 79, offset: 9810},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 341, col: 87, offset: 9818},
										expr: &seqExpr{
											pos: position{line: 341, col: 88, offset: 9819},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 341, col: 88, offset: 9819},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 341, col: 90, offset: 9821},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 348, col: 5, offset: 10087},
						run: (*parser).callonJoinProc22,
						expr: &seqExpr{
							pos: position{line: 348, col: 5, offset: 10087},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 348, col: 5, offset: 10087},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 348, col: 11, offset: 10093},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 348, col: 22, offset: 10104},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 348, col: 30, offset: 10112},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 348, col: 32, offset: 10114},
									name: "ON",
								},
								&ruleRefExpr{
									pos:  position{line: 348, col: 35, offset: 10117},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 348, col: 37, offset: 10119},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 348, col: 41, offset: 10123},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 348, col: 49, offset: 10131},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 348, col: 57, offset: 10139},
										expr: &seqExpr{
											pos: position{line: 348, col: 58, offset: 10140},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 348, col: 58, offset: 10140},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 348, col: 60, offset: 10142},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinStyle",
			pos:  position{line: 356, col: 1, offset: 10396},
			expr: &choiceExpr{
				pos: position{line: 357, col: 5, offset: 10410},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 357, col: 5, offset: 10410},
						run: (*parser).callonJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 357, col: 5, offset: 10410},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 357, col: 5, offset: 10410},
									val:        "anti",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 357, col: 13, offset: 10418},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 358, col: 5, offset: 10448},
						run: (*parser).callonJoinStyle6,
						expr: &seqExpr{
							pos: position{line: 358, col: 5, offset: 10448},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 358, col: 5, offset: 10448},
									val:        "inner",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 358, col: 14, offset: 10457},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 359, col: 5, offset: 10487},
						run: (*parser).callonJoinStyle10,
						expr: &seqExpr{
							pos: position{line: 359, col: 5, offset: 10487},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 359, col: 5, offset: 10487},
									val:        "left",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 359, col: 14, offset: 10496},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 360, col: 5, offset: 10525},
						run: (*parser).callonJoinStyle14,
						expr: &seqExpr{
							pos: position{line: 360, col: 5, offset: 10525},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 360, col: 5, offset: 10525},
									val:        "right",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 360, col: 14, offset: 10534},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 361, col: 5, offset: 10564},
						run: (*parser).callonJoinStyle18,
						expr: &litMatcher{
							pos:        position{line: 361, col: 5, offset: 10564},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 363, col: 1, offset: 10600},
			expr: &choiceExpr{
				pos: position{line: 364, col: 5, offset: 10612},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 364, col: 5, offset: 10612},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 365, col: 5, offset: 10621},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 365, col: 5, offset: 10621},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 365, col: 5, offset: 10621},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 365, col: 9, offset: 10625},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 365, col: 14, offset: 10630},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 365, col: 19, offset: 10635},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SampleProc",
			pos:  position{line: 367, col: 1, offset: 10661},
			expr: &actionExpr{
				pos: position{line: 368, col: 5, offset: 10676},
				run: (*parser).callonSampleProc1,
				expr: &seqExpr{
					pos: position{line: 368, col: 5, offset: 10676},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 368, col: 5, offset: 10676},
							val:        "sample",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 368, col: 15, offset: 10686},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 368, col: 17, offset: 10688},
								name: "SampleExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "OpAssignment",
			pos:  position{line: 412, col: 1, offset: 12304},
			expr: &actionExpr{
				pos: position{line: 413, col: 5, offset: 12321},
				run: (*parser).callonOpAssignment1,
				expr: &labeledExpr{
					pos:   position{line: 413, col: 5, offset: 12321},
					label: "a",
					expr: &ruleRefExpr{
						pos:  position{line: 413, col: 7, offset: 12323},
						name: "Assignments",
					},
				},
			},
		},
		{
			name: "SampleExpr",
			pos:  position{line: 417, col: 1, offset: 12423},
			expr: &choiceExpr{
				pos: position{line: 418, col: 5, offset: 12438},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 418, col: 5, offset: 12438},
						run: (*parser).callonSampleExpr2,
						expr: &seqExpr{
							pos: position{line: 418, col: 5, offset: 12438},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 418, col: 5, offset: 12438},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 418, col: 7, offset: 12440},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 418, col: 12, offset: 12445},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 419, col: 5, offset: 12474},
						run: (*parser).callonSampleExpr7,
						expr: &litMatcher{
							pos:        position{line: 419, col: 5, offset: 12474},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FromProc",
			pos:  position{line: 421, col: 1, offset: 12545},
			expr: &actionExpr{
				pos: position{line: 422, col: 5, offset: 12558},
				run: (*parser).callonFromProc1,
				expr: &labeledExpr{
					pos:   position{line: 422, col: 5, offset: 12558},
					label: "source",
					expr: &ruleRefExpr{
						pos:  position{line: 422, col: 12, offset: 12565},
						name: "FromAny",
					},
				},
			},
		},
		{
			name: "FromAny",
			pos:  position{line: 426, col: 1, offset: 12721},
			expr: &choiceExpr{
				pos: position{line: 427, col: 5, offset: 12733},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 427, col: 5, offset: 12733},
						name: "File",
					},
					&ruleRefExpr{
						pos:  position{line: 428, col: 5, offset: 12742},
						name: "Get",
					},
					&ruleRefExpr{
						pos:  position{line: 429, col: 5, offset: 12750},
						name: "From",
					},
				},
			},
		},
		{
			name: "File",
			pos:  position{line: 431, col: 1, offset: 12756},
			expr: &actionExpr{
				pos: position{line: 432, col: 5, offset: 12765},
				run: (*parser).callonFile1,
				expr: &seqExpr{
					pos: position{line: 432, col: 5, offset: 12765},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 432, col: 5, offset: 12765},
							val:        "file",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 432, col: 13, offset: 12773},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 432, col: 15, offset: 12775},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 432, col: 20, offset: 12780},
								name: "Path",
							},
						},
						&labeledExpr{
							pos:   position{line: 432, col: 25, offset: 12785},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 432, col: 32, offset: 12792},
								expr: &ruleRefExpr{
									pos:  position{line: 432, col: 32, offset: 12792},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 432, col: 43, offset: 12803},
							label: "layout",
							expr: &zeroOrOneExpr{
								pos: position{line: 432, col: 50, offset: 12810},
								expr: &ruleRefExpr{
									pos:  position{line: 432, col: 50, offset: 12810},
									name: "LayoutArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "From",
			pos:  position{line: 436, col: 1, offset: 12939},
			expr: &actionExpr{
				pos: position{line: 437, col: 5, offset: 12948},
				run: (*parser).callonFrom1,
				expr: &seqExpr{
					pos: position{line: 437, col: 5, offset: 12948},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 437, col: 5, offset: 12948},
							val:        "from",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 437, col: 13, offset: 12956},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 437, col: 15, offset: 12958},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 437, col: 20, offset: 12963},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "Pool",
			pos:  position{line: 439, col: 1, offset: 12994},
			expr: &actionExpr{
				pos: position{line: 440, col: 5, offset: 13003},
				run: (*parser).callonPool1,
				expr: &seqExpr{
					pos: position{line: 440, col: 5, offset: 13003},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 440, col: 5, offset: 13003},
							val:        "pool",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 440, col: 13, offset: 13011},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 440, col: 15, offset: 13013},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 440, col: 20, offset: 13018},
								name: "PoolBody",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolBody",
			pos:  position{line: 442, col: 1, offset: 13049},
			expr: &actionExpr{
				pos: position{line: 443, col: 5, offset: 13062},
				run: (*parser).callonPoolBody1,
				expr: &seqExpr{
					pos: position{line: 443, col: 5, offset: 13062},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 443, col: 5, offset: 13062},
							label: "spec",
							expr: &ruleRefExpr{
								pos:  position{line: 443, col: 10, offset: 13067},
								name: "PoolSpec",
							},
						},
						&labeledExpr{
							pos:   position{line: 443, col: 19, offset: 13076},
							label: "at",
							expr: &zeroOrOneExpr{
								pos: position{line: 443, col: 22, offset: 13079},
								expr: &ruleRefExpr{
									pos:  position{line: 443, col: 22, offset: 13079},
									name: "PoolAt",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 443, col: 30, offset: 13087},
							label: "over",
							expr: &zeroOrOneExpr{
								pos: position{line: 443, col: 35, offset: 13092},
								expr: &ruleRefExpr{
									pos:  position{line: 443, col: 35, offset: 13092},
									name: "PoolRange",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 443, col: 46, offset: 13103},
							label: "order",
							expr: &zeroOrOneExpr{
								pos: position{line: 443, col: 52, offset: 13109},
								expr: &ruleRefExpr{
									pos:  position{line: 443, col: 52, offset: 13109},
									name: "OrderArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Get",
			pos:  position{line: 447, col: 1, offset: 13245},
			expr: &actionExpr{
				pos: position{line: 448, col: 5, offset: 13253},
				run: (*parser).callonGet1,
				expr: &seqExpr{
					pos: position{line: 448, col: 5, offset: 13253},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 448, col: 5, offset: 13253},
							val:        "get",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 448, col: 12, offset: 13260},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 448, col: 14, offset: 13262},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 448, col: 18, offset: 13266},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 448, col: 22, offset: 13270},
							label: "format",
							expr: &zeroOrOneExpr{
								pos: position{line: 448, col: 29, offset: 13277},
								expr: &ruleRefExpr{
									pos:  position{line: 448, col: 29, offset: 13277},
									name: "FormatArg",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 448, col: 40, offset: 13288},
							label: "layout",
							expr: &zeroOrOneExpr{
								pos: position{line: 448, col: 47, offset: 13295},
								expr: &ruleRefExpr{
									pos:  position{line: 448, col: 47, offset: 13295},
									name: "LayoutArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 452, col: 1, offset: 13421},
			expr: &actionExpr{
				pos: position{line: 452, col: 7, offset: 13427},
				run: (*parser).callonURL1,
				expr: &seqExpr{
					pos: position{line: 452, col: 7, offset: 13427},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 452, col: 8, offset: 13428},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 452, col: 8, offset: 13428},
									val:        "http:",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 452, col: 18, offset: 13438},
									val:        "https:",
									ignoreCase: false,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 452, col: 28, offset: 13448},
							name: "Path",
						},
					},
				},
			},
		},
		{
			name: "Path",
			pos:  position{line: 454, col: 1, offset: 13485},
			expr: &choiceExpr{
				pos: position{line: 455, col: 5, offset: 13494},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 455, col: 5, offset: 13494},
						run: (*parser).callonPath2,
						expr: &labeledExpr{
							pos:   position{line: 455, col: 5, offset: 13494},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 455, col: 7, offset: 13496},
								name: "QuotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 456, col: 5, offset: 13531},
						run: (*parser).callonPath5,
						expr: &oneOrMoreExpr{
							pos: position{line: 456, col: 5, offset: 13531},
							expr: &charClassMatcher{
								pos:        position{line: 456, col: 5, offset: 13531},
								val:        "[0-9a-zA-Z!@$%^&*()_=<>,./?:[\\]{}~|+-]",
								chars:      []rune{'!', '@', '$', '%', '^', '&', '*', '(', ')', '_', '=', '<', '>', ',', '.', '/', '?', ':', '[', ']', '{', '}', '~', '|', '+', '-'},
								ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PoolAt",
			pos:  position{line: 459, col: 1, offset: 13636},
			expr: &actionExpr{
				pos: position{line: 460, col: 5, offset: 13647},
				run: (*parser).callonPoolAt1,
				expr: &seqExpr{
					pos: position{line: 460, col: 5, offset: 13647},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 460, col: 5, offset: 13647},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 460, col: 7, offset: 13649},
							val:        "at",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 460, col: 13, offset: 13655},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 460, col: 15, offset: 13657},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 460, col: 18, offset: 13660},
								name: "KSUID",
							},
						},
					},
				},
			},
		},
		{
			name: "KSUID",
			pos:  position{line: 463, col: 1, offset: 13726},
			expr: &actionExpr{
				pos: position{line: 463, col: 9, offset: 13734},
				run: (*parser).callonKSUID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 463, col: 9, offset: 13734},
					expr: &charClassMatcher{
						pos:        position{line: 463, col: 10, offset: 13735},
						val:        "[0-9a-zA-Z]",
						ranges:     []rune{'0', '9', 'a', 'z', 'A', 'Z'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "PoolRange",
			pos:  position{line: 465, col: 1, offset: 13781},
			expr: &actionExpr{
				pos: position{line: 466, col: 5, offset: 13795},
				run: (*parser).callonPoolRange1,
				expr: &seqExpr{
					pos: position{line: 466, col: 5, offset: 13795},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 466, col: 5, offset: 13795},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 466, col: 7, offset: 13797},
							val:        "range",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 466, col: 16, offset: 13806},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 466, col: 18, offset: 13808},
							label: "lower",
							expr: &ruleRefExpr{
								pos:  position{line: 466, col: 24, offset: 13814},
								name: "Literal",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 466, col: 32, offset: 13822},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 466, col: 34, offset: 13824},
							val:        "to",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 466, col: 40, offset: 13830},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 466, col: 42, offset: 13832},
							label: "upper",
							expr: &ruleRefExpr{
								pos:  position{line: 466, col: 48, offset: 13838},
								name: "Literal",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolSpec",
			pos:  position{line: 470, col: 1, offset: 13943},
			expr: &choiceExpr{
				pos: position{line: 471, col: 5, offset: 13956},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 471, col: 5, offset: 13956},
						run: (*parser).callonPoolSpec2,
						expr: &seqExpr{
							pos: position{line: 471, col: 5, offset: 13956},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 471, col: 5, offset: 13956},
									label: "pool",
									expr: &ruleRefExpr{
										pos:  position{line: 471, col: 10, offset: 13961},
										name: "PoolName",
									},
								},
								&labeledExpr{
									pos:   position{line: 471, col: 19, offset: 13970},
									label: "commit",
									expr: &zeroOrOneExpr{
										pos: position{line: 471, col: 26, offset: 13977},
										expr: &ruleRefExpr{
											pos:  position{line: 471, col: 26, offset: 13977},
											name: "PoolCommit",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 471, col: 38, offset: 13989},
									label: "meta",
									expr: &zeroOrOneExpr{
										pos: position{line: 471, col: 43, offset: 13994},
										expr: &ruleRefExpr{
											pos:  position{line: 471, col: 43, offset: 13994},
											name: "PoolMeta",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 474, col: 5, offset: 14103},
						run: (*parser).callonPoolSpec12,
						expr: &labeledExpr{
							pos:   position{line: 474, col: 5, offset: 14103},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 474, col: 10, offset: 14108},
								name: "PoolMeta",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolCommit",
			pos:  position{line: 478, col: 1, offset: 14209},
			expr: &actionExpr{
				pos: position{line: 479, col: 5, offset: 14224},
				run: (*parser).callonPoolCommit1,
				expr: &seqExpr{
					pos: position{line: 479, col: 5, offset: 14224},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 479, col: 5, offset: 14224},
							val:        "@",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 479, col: 9, offset: 14228},
							label: "commit",
							expr: &ruleRefExpr{
								pos:  position{line: 479, col: 16, offset: 14235},
								name: "PoolName",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolMeta",
			pos:  position{line: 481, col: 1, offset: 14268},
			expr: &actionExpr{
				pos: position{line: 482, col: 5, offset: 14281},
				run: (*parser).callonPoolMeta1,
				expr: &seqExpr{
					pos: position{line: 482, col: 5, offset: 14281},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 482, col: 5, offset: 14281},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 482, col: 9, offset: 14285},
							label: "meta",
							expr: &ruleRefExpr{
								pos:  position{line: 482, col: 14, offset: 14290},
								name: "PoolIdentifier",
							},
						},
					},
				},
			},
		},
		{
			name: "PoolName",
			pos:  position{line: 484, col: 1, offset: 14327},
			expr: &choiceExpr{
				pos: position{line: 485, col: 5, offset: 14340},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 485, col: 5, offset: 14340},
						name: "PoolIdentifier",
					},
					&ruleRefExpr{
						pos:  position{line: 486, col: 5, offset: 14359},
						name: "KSUID",
					},
					&ruleRefExpr{
						pos:  position{line: 487, col: 5, offset: 14369},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "PoolIdentifier",
			pos:  position{line: 489, col: 1, offset: 14383},
			expr: &actionExpr{
				pos: position{line: 490, col: 5, offset: 14402},
				run: (*parser).callonPoolIdentifier1,
				expr: &seqExpr{
					pos: position{line: 490, col: 5, offset: 14402},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 490, col: 6, offset: 14403},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 490, col: 6, offset: 14403},
									name: "IdentifierStart",
								},
								&litMatcher{
									pos:        position{line: 490, col: 24, offset: 14421},
									val:        ".",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 490, col: 29, offset: 14426},
							expr: &choiceExpr{
								pos: position{line: 490, col: 30, offset: 14427},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 490, col: 30, offset: 14427},
										name: "IdentifierRest",
									},
									&litMatcher{
										pos:        position{line: 490, col: 47, offset: 14444},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LayoutArg",
			pos:  position{line: 492, col: 1, offset: 14483},
			expr: &actionExpr{
				pos: position{line: 493, col: 5, offset: 14497},
				run: (*parser).callonLayoutArg1,
				expr: &seqExpr{
					pos: position{line: 493, col: 5, offset: 14497},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 493, col: 5, offset: 14497},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 493, col: 7, offset: 14499},
							val:        "order",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 493, col: 16, offset: 14508},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 493, col: 18, offset: 14510},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 493, col: 23, offset: 14515},
								name: "FieldExprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 493, col: 34, offset: 14526},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 493, col: 40, offset: 14532},
								name: "OrderSuffix",
							},
						},
					},
				},
			},
		},
		{
			name: "FormatArg",
			pos:  position{line: 497, col: 1, offset: 14642},
			expr: &actionExpr{
				pos: position{line: 498, col: 5, offset: 14656},
				run: (*parser).callonFormatArg1,
				expr: &seqExpr{
					pos: position{line: 498, col: 5, offset: 14656},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 498, col: 5, offset: 14656},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 498, col: 7, offset: 14658},
							val:        "format",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 498, col: 17, offset: 14668},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 498, col: 19, offset: 14670},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 498, col: 23, offset: 14674},
								name: "IdentifierName",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderSuffix",
			pos:  position{line: 500, col: 1, offset: 14710},
			expr: &choiceExpr{
				pos: position{line: 501, col: 5, offset: 14726},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 501, col: 5, offset: 14726},
						run: (*parser).callonOrderSuffix2,
						expr: &litMatcher{
							pos:        position{line: 501, col: 5, offset: 14726},
							val:        ":asc",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 502, col: 5, offset: 14761},
						run: (*parser).callonOrderSuffix4,
						expr: &litMatcher{
							pos:        position{line: 502, col: 5, offset: 14761},
							val:        ":desc",
							ignoreCase: true,
						},
					},
					&actionExpr{
						pos: position{line: 503, col: 5, offset: 14798},
						run: (*parser).callonOrderSuffix6,
						expr: &litMatcher{
							pos:        position{line: 503, col: 5, offset: 14798},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OrderArg",
			pos:  position{line: 505, col: 1, offset: 14824},
			expr: &choiceExpr{
				pos: position{line: 506, col: 5, offset: 14837},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 506, col: 5, offset: 14837},
						run: (*parser).callonOrderArg2,
						expr: &seqExpr{
							pos: position{line: 506, col: 5, offset: 14837},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 506, col: 5, offset: 14837},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 506, col: 7, offset: 14839},
									val:        "order",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 506, col: 16, offset: 14848},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 506, col: 18, offset: 14850},
									val:        "asc",
									ignoreCase: true,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 507, col: 5, offset: 14884},
						run: (*parser).callonOrderArg8,
						expr: &seqExpr{
							pos: position{line: 507, col: 5, offset: 14884},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 507, col: 5, offset: 14884},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 507, col: 7, offset: 14886},
									val:        "order",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 507, col: 16, offset: 14895},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 507, col: 18, offset: 14897},
									val:        "desc",
									ignoreCase: true,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassProc",
			pos:  position{line: 509, col: 1, offset: 14930},
			expr: &actionExpr{
				pos: position{line: 510, col: 5, offset: 14943},
				run: (*parser).callonPassProc1,
				expr: &litMatcher{
					pos:        position{line: 510, col: 5, offset: 14943},
					val:        "pass",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ExplodeProc",
			pos:  position{line: 516, col: 1, offset: 15138},
			expr: &actionExpr{
				pos: position{line: 517, col: 5, offset: 15154},
				run: (*parser).callonExplodeProc1,
				expr: &seqExpr{
					pos: position{line: 517, col: 5, offset: 15154},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 517, col: 5, offset: 15154},
							val:        "explode",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 517, col: 16, offset: 15165},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 517, col: 18, offset: 15167},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 517, col: 23, offset: 15172},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 517, col: 29, offset: 15178},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 517, col: 33, offset: 15182},
								name: "TypeArg",
							},
						},
						&labeledExpr{
							pos:   position{line: 517, col: 41, offset: 15190},
							label: "as",
							expr: &zeroOrOneExpr{
								pos: position{line: 517, col: 44, offset: 15193},
								expr: &ruleRefExpr{
									pos:  position{line: 517, col: 44, offset: 15193},
									name: "AsArg",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MergeProc",
			pos:  position{line: 521, col: 1, offset: 15305},
			expr: &actionExpr{
				pos: position{line: 522, col: 5, offset: 15319},
				run: (*parser).callonMergeProc1,
				expr: &seqExpr{
					pos: position{line: 522, col: 5, offset: 15319},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 522, col: 5, offset: 15319},
							val:        "merge",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 522, col: 14, offset: 15328},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 522, col: 16, offset: 15330},
							label: "field",
							expr: &ruleRefExpr{
								pos:  position{line: 522, col: 22, offset: 15336},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "OverProc",
			pos:  position{line: 526, col: 1, offset: 15419},
			expr: &choiceExpr{
				pos: position{line: 527, col: 5, offset: 15432},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 527, col: 5, offset: 15432},
						run: (*parser).callonOverProc2,
						expr: &labeledExpr{
							pos:   position{line: 527, col: 5, offset: 15432},
							label: "over",
							expr: &ruleRefExpr{
								pos:  position{line: 527, col: 10, offset: 15437},
								name: "ScopedOver",
							},
						},
					},
					&actionExpr{
						pos: position{line: 530, col: 5, offset: 15542},
						run: (*parser).callonOverProc5,
						expr: &seqExpr{
							pos: position{line: 530, col: 5, offset: 15542},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 530, col: 5, offset: 15542},
									val:        "over",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 530, col: 13, offset: 15550},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 530, col: 15, offset: 15552},
									label: "exprs",
									expr: &ruleRefExpr{
										pos:  position{line: 530, col: 21, offset: 15558},
										name: "Exprs",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ScopedOver",
			pos:  position{line: 534, col: 1, offset: 15666},
			expr: &actionExpr{
				pos: position{line: 535, col: 5, offset: 15681},
				run: (*parser).callonScopedOver1,
				expr: &seqExpr{
					pos: position{line: 535, col: 5, offset: 15681},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 535, col: 5, offset: 15681},
							val:        "over",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 535, col: 13, offset: 15689},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 535, col: 15, offset: 15691},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 535, col: 21, offset: 15697},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 535, col: 27, offset: 15703},
							label: "as",
							expr: &ruleRefExpr{
								pos:  position{line: 535, col: 30, offset: 15706},
								name: "As",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 535, col: 33, offset: 15709},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 535, col: 36, offset: 15712},
							label: "scope",
							expr: &ruleRefExpr{
								pos:  position{line: 535, col: 42, offset: 15718},
								name: "Scope",
							},
						},
					},
				},
			},
		},
		{
			name: "OverWith",
			pos:  position{line: 539, col: 1, offset: 15828},
			expr: &actionExpr{
				pos: position{line: 540, col: 5, offset: 15841},
				run: (*parser).callonOverWith1,
				expr: &seqExpr{
					pos: position{line: 540, col: 5, offset: 15841},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 540, col: 5, offset: 15841},
							val:        "over",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 540, col: 13, offset: 15849},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 540, col: 15, offset: 15851},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 540, col: 21, offset: 15857},
								name: "Exprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 540, col: 27, offset: 15863},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 540, col: 29, offset: 15865},
							val:        "with",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 540, col: 36, offset: 15872},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 540, col: 38, offset: 15874},
							label: "locals",
							expr: &ruleRefExpr{
								pos:  position{line: 540, col: 45, offset: 15881},
								name: "LetAssignments",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 540, col: 60, offset: 15896},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 540, col: 63, offset: 15899},
							label: "scope",
							expr: &ruleRefExpr{
								pos:  position{line: 540, col: 69, offset: 15905},
								name: "Scope",
							},
						},
					},
				},
			},
		},
		{
			name: "As",
			pos:  position{line: 544, col: 1, offset: 16077},
			expr: &choiceExpr{
				pos: position{line: 545, col: 5, offset: 16084},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 545, col: 5, offset: 16084},
						run: (*parser).callonAs2,
						expr: &seqExpr{
							pos: position{line: 545, col: 5, offset: 16084},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 545, col: 5, offset: 16084},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 545, col: 7, offset: 16086},
									val:        "as",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 545, col: 12, offset: 16091},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 545, col: 14, offset: 16093},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 545, col: 17, offset: 16096},
										name: "IdentifierName",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 546, col: 5, offset: 16134},
						run: (*parser).callonAs9,
						expr: &litMatcher{
							pos:        position{line: 546, col: 5, offset: 16134},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LetProc",
			pos:  position{line: 548, col: 1, offset: 16157},
			expr: &choiceExpr{
				pos: position{line: 549, col: 5, offset: 16169},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 549, col: 5, offset: 16169},
						run: (*parser).callonLetProc2,
						expr: &seqExpr{
							pos: position{line: 549, col: 5, offset: 16169},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 549, col: 5, offset: 16169},
									val:        "let",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 549, col: 12, offset: 16176},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 549, col: 14, offset: 16178},
									label: "locals",
									expr: &ruleRefExpr{
										pos:  position{line: 549, col: 21, offset: 16185},
										name: "LetAssignments",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 549, col: 36, offset: 16200},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 549, col: 39, offset: 16203},
									label: "over",
									expr: &ruleRefExpr{
										pos:  position{line: 549, col: 44, offset: 16208},
										name: "ScopedOver",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 552, col: 5, offset: 16316},
						name: "OverWith",
					},
				},
			},
		},
		{
			name: "Scope",
			pos:  position{line: 554, col: 1, offset: 16326},
			expr: &actionExpr{
				pos: position{line: 554, col: 9, offset: 16334},
				run: (*parser).callonScope1,
				expr: &seqExpr{
					pos: position{line: 554, col: 9, offset: 16334},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 554, col: 9, offset: 16334},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 554, col: 14, offset: 16339},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 554, col: 17, offset: 16342},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 554, col: 21, offset: 16346},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 554, col: 24, offset: 16349},
							label: "seq",
							expr: &ruleRefExpr{
								pos:  position{line: 554, col: 28, offset: 16353},
								name: "Sequential",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 554, col: 39, offset: 16364},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 554, col: 42, offset: 16367},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LetAssignments",
			pos:  position{line: 556, col: 1, offset: 16392},
			expr: &actionExpr{
				pos: position{line: 557, col: 5, offset: 16411},
				run: (*parser).callonLetAssignments1,
				expr: &seqExpr{
					pos: position{line: 557, col: 5, offset: 16411},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 557, col: 5, offset: 16411},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 557, col: 11, offset: 16417},
								name: "LetAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 557, col: 25, offset: 16431},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 557, col: 30, offset: 16436},
								expr: &actionExpr{
									pos: position{line: 557, col: 31, offset: 16437},
									run: (*parser).callonLetAssignments7,
									expr: &seqExpr{
										pos: position{line: 557, col: 31, offset: 16437},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 557, col: 31, offset: 16437},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 557, col: 34, offset: 16440},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 557, col: 38, offset: 16444},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 557, col: 41, offset: 16447},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 557, col: 43, offset: 16449},
													name: "LetAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LetAssignment",
			pos:  position{line: 561, col: 1, offset: 16567},
			expr: &actionExpr{
				pos: position{line: 561, col: 17, offset: 16583},
				run: (*parser).callonLetAssignment1,
				expr: &seqExpr{
					pos: position{line: 561, col: 17, offset: 16583},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 561, col: 17, offset: 16583},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 561, col: 20, offset: 16586},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 561, col: 35, offset: 16601},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 561, col: 38, offset: 16604},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 561, col: 42, offset: 16608},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 561, col: 45, offset: 16611},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 561, col: 50, offset: 16616},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "YieldProc",
			pos:  position{line: 565, col: 1, offset: 16695},
			expr: &actionExpr{
				pos: position{line: 566, col: 5, offset: 16709},
				run: (*parser).callonYieldProc1,
				expr: &seqExpr{
					pos: position{line: 566, col: 5, offset: 16709},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 566, col: 5, offset: 16709},
							val:        "yield",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 566, col: 14, offset: 16718},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 566, col: 16, offset: 16720},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 566, col: 22, offset: 16726},
								name: "Exprs",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeArg",
			pos:  position{line: 570, col: 1, offset: 16810},
			expr: &actionExpr{
				pos: position{line: 571, col: 5, offset: 16822},
				run: (*parser).callonTypeArg1,
				expr: &seqExpr{
					pos: position{line: 571, col: 5, offset: 16822},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 571, col: 5, offset: 16822},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 571, col: 7, offset: 16824},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 571, col: 10, offset: 16827},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 571, col: 12, offset: 16829},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 571, col: 16, offset: 16833},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "AsArg",
			pos:  position{line: 573, col: 1, offset: 16858},
			expr: &actionExpr{
				pos: position{line: 574, col: 5, offset: 16868},
				run: (*parser).callonAsArg1,
				expr: &seqExpr{
					pos: position{line: 574, col: 5, offset: 16868},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 574, col: 5, offset: 16868},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 574, col: 7, offset: 16870},
							name: "AS",
						},
						&ruleRefExpr{
							pos:  position{line: 574, col: 10, offset: 16873},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 574, col: 12, offset: 16875},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 574, col: 16, offset: 16879},
								name: "Lval",
							},
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 578, col: 1, offset: 16930},
			expr: &ruleRefExpr{
				pos:  position{line: 578, col: 8, offset: 16937},
				name: "DerefExpr",
			},
		},
		{
			name: "Lvals",
			pos:  position{line: 580, col: 1, offset: 16948},
			expr: &actionExpr{
				pos: position{line: 581, col: 5, offset: 16958},
				run: (*parser).callonLvals1,
				expr: &seqExpr{
					pos: position{line: 581, col: 5, offset: 16958},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 581, col: 5, offset: 16958},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 581, col: 11, offset: 16964},
								name: "Lval",
							},
						},
						&labeledExpr{
							pos:   position{line: 581, col: 16, offset: 16969},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 581, col: 21, offset: 16974},
								expr: &actionExpr{
									pos: position{line: 581, col: 22, offset: 16975},
									run: (*parser).callonLvals7,
									expr: &seqExpr{
										pos: position{line: 581, col: 22, offset: 16975},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 581, col: 22, offset: 16975},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 581, col: 25, offset: 16978},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 581, col: 29, offset: 16982},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 581, col: 32, offset: 16985},
												label: "lval",
												expr: &ruleRefExpr{
													pos:  position{line: 581, col: 37, offset: 16990},
													name: "Lval",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 585, col: 1, offset: 17102},
			expr: &ruleRefExpr{
				pos:  position{line: 585, col: 13, offset: 17114},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 587, col: 1, offset: 17120},
			expr: &actionExpr{
				pos: position{line: 588, col: 5, offset: 17135},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 588, col: 5, offset: 17135},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 588, col: 5, offset: 17135},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 588, col: 11, offset: 17141},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 588, col: 21, offset: 17151},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 588, col: 26, offset: 17156},
								expr: &seqExpr{
									pos: position{line: 588, col: 27, offset: 17157},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 588, col: 27, offset: 17157},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 588, col: 30, offset: 17160},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 588, col: 34, offset: 17164},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 588, col: 37, offset: 17167},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignments",
			pos:  position{line: 598, col: 1, offset: 17366},
			expr: &actionExpr{
				pos: position{line: 599, col: 5, offset: 17382},
				run: (*parser).callonAssignments1,
				expr: &seqExpr{
					pos: position{line: 599, col: 5, offset: 17382},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 599, col: 5, offset: 17382},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 599, col: 11, offset: 17388},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 599, col: 22, offset: 17399},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 599, col: 27, offset: 17404},
								expr: &actionExpr{
									pos: position{line: 599, col: 28, offset: 17405},
									run: (*parser).callonAssignments7,
									expr: &seqExpr{
										pos: position{line: 599, col: 28, offset: 17405},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 599, col: 28, offset: 17405},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 599, col: 31, offset: 17408},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 599, col: 35, offset: 17412},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 599, col: 38, offset: 17415},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 599, col: 40, offset: 17417},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 603, col: 1, offset: 17528},
			expr: &actionExpr{
				pos: position{line: 604, col: 5, offset: 17543},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 604, col: 5, offset: 17543},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 604, col: 5, offset: 17543},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 604, col: 9, offset: 17547},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 604, col: 14, offset: 17552},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 604, col: 17, offset: 17555},
							val:        ":=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 604, col: 22, offset: 17560},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 604, col: 25, offset: 17563},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 604, col: 29, offset: 17567},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 606, col: 1, offset: 17658},
			expr: &ruleRefExpr{
				pos:  position{line: 606, col: 8, offset: 17665},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 608, col: 1, offset: 17682},
			expr: &choiceExpr{
				pos: position{line: 609, col: 5, offset: 17702},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 609, col: 5, offset: 17702},
						run: (*parser).callonConditionalExpr2,
						expr: &seqExpr{
							pos: position{line: 609, col: 5, offset: 17702},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 609, col: 5, offset: 17702},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 609, col: 15, offset: 17712},
										name: "LogicalOrExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 609, col: 29, offset: 17726},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 609, col: 32, offset: 17729},
									val:        "?",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 609, col: 36, offset: 17733},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 609, col: 39, offset: 17736},
									label: "thenClause",
									expr: &ruleRefExpr{
										pos:  position{line: 609, col: 50, offset: 17747},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 609, col: 55, offset: 17752},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 609, col: 58, offset: 17755},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 609, col: 62, offset: 17759},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 609, col: 65, offset: 17762},
									label: "elseClause",
									expr: &ruleRefExpr{
										pos:  position{line: 609, col: 76, offset: 17773},
										name: "Expr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 612, col: 5, offset: 17913},
						name: "LogicalOrExpr",
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 614, col: 1, offset: 17928},
			expr: &actionExpr{
				pos: position{line: 615, col: 5, offset: 17946},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 615, col: 5, offset: 17946},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 615, col: 5, offset: 17946},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 615, col: 11, offset: 17952},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 616, col: 5, offset: 17971},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 616, col: 10, offset: 17976},
								expr: &actionExpr{
									pos: position{line: 616, col: 11, offset: 17977},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 616, col: 11, offset: 17977},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 616, col: 11, offset: 17977},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 616, col: 14, offset: 17980},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 616, col: 17, offset: 17983},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 616, col: 25, offset: 17991},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 616, col: 28, offset: 17994},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 616, col: 33, offset: 17999},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 620, col: 1, offset: 18117},
			expr: &actionExpr{
				pos: position{line: 621, col: 5, offset: 18136},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 621, col: 5, offset: 18136},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 621, col: 5, offset: 18136},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 621, col: 11, offset: 18142},
								name: "EqualityCompareExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 622, col: 5, offset: 18166},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 622, col: 10, offset: 18171},
								expr: &actionExpr{
									pos: position{line: 622, col: 11, offset: 18172},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 622, col: 11, offset: 18172},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 622, col: 11, offset: 18172},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 622, col: 14, offset: 18175},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 622, col: 17, offset: 18178},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 622, col: 26, offset: 18187},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 622, col: 29, offset: 18190},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 622, col: 34, offset: 18195},
													name: "EqualityCompareExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityCompareExpr",
			pos:  position{line: 626, col: 1, offset: 18318},
			expr: &choiceExpr{
				pos: position{line: 627, col: 5, offset: 18342},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 627, col: 5, offset: 18342},
						name: "PatternMatch",
					},
					&actionExpr{
						pos: position{line: 628, col: 5, offset: 18359},
						run: (*parser).callonEqualityCompareExpr3,
						expr: &seqExpr{
							pos: position{line: 628, col: 5, offset: 18359},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 628, col: 5, offset: 18359},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 628, col: 11, offset: 18365},
										name: "RelativeExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 629, col: 5, offset: 18382},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 629, col: 10, offset: 18387},
										expr: &actionExpr{
											pos: position{line: 629, col: 11, offset: 18388},
											run: (*parser).callonEqualityCompareExpr9,
											expr: &seqExpr{
												pos: position{line: 629, col: 11, offset: 18388},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 629, col: 11, offset: 18388},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 629, col: 14, offset: 18391},
														label: "comp",
														expr: &ruleRefExpr{
															pos:  position{line: 629, col: 19, offset: 18396},
															name: "EqualityComparator",
														},
													},
													&ruleRefExpr{
														pos:  position{line: 629, col: 38, offset: 18415},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 629, col: 41, offset: 18418},
														label: "expr",
														expr: &ruleRefExpr{
															pos:  position{line: 629, col: 46, offset: 18423},
															name: "RelativeExpr",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityOperator",
			pos:  position{line: 633, col: 1, offset: 18541},
			expr: &choiceExpr{
				pos: position{line: 634, col: 5, offset: 18562},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 634, col: 5, offset: 18562},
						run: (*parser).callonEqualityOperator2,
						expr: &litMatcher{
							pos:        position{line: 634, col: 5, offset: 18562},
							val:        "==",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 635, col: 5, offset: 18591},
						run: (*parser).callonEqualityOperator4,
						expr: &litMatcher{
							pos:        position{line: 635, col: 5, offset: 18591},
							val:        "!=",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "EqualityComparator",
			pos:  position{line: 637, col: 1, offset: 18628},
			expr: &choiceExpr{
				pos: position{line: 638, col: 5, offset: 18651},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 638, col: 5, offset: 18651},
						name: "EqualityOperator",
					},
					&actionExpr{
						pos: position{line: 639, col: 5, offset: 18672},
						run: (*parser).callonEqualityComparator3,
						expr: &seqExpr{
							pos: position{line: 639, col: 5, offset: 18672},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 639, col: 5, offset: 18672},
									val:        "in",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 639, col: 10, offset: 18677},
									expr: &ruleRefExpr{
										pos:  position{line: 639, col: 11, offset: 18678},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeExpr",
			pos:  position{line: 641, col: 1, offset: 18725},
			expr: &actionExpr{
				pos: position{line: 642, col: 5, offset: 18742},
				run: (*parser).callonRelativeExpr1,
				expr: &seqExpr{
					pos: position{line: 642, col: 5, offset: 18742},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 642, col: 5, offset: 18742},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 642, col: 11, offset: 18748},
								name: "AdditiveExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 643, col: 5, offset: 18765},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 643, col: 10, offset: 18770},
								expr: &actionExpr{
									pos: position{line: 643, col: 11, offset: 18771},
									run: (*parser).callonRelativeExpr7,
									expr: &seqExpr{
										pos: position{line: 643, col: 11, offset: 18771},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 643, col: 11, offset: 18771},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 643, col: 14, offset: 18774},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 643, col: 17, offset: 18777},
													name: "RelativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 643, col: 34, offset: 18794},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 643, col: 37, offset: 18797},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 643, col: 42, offset: 18802},
													name: "AdditiveExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeOperator",
			pos:  position{line: 647, col: 1, offset: 18918},
			expr: &actionExpr{
				pos: position{line: 647, col: 20, offset: 18937},
				run: (*parser).callonRelativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 647, col: 21, offset: 18938},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 647, col: 21, offset: 18938},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 647, col: 28, offset: 18945},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 647, col: 34, offset: 18951},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 647, col: 41, offset: 18958},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 649, col: 1, offset: 18995},
			expr: &actionExpr{
				pos: position{line: 650, col: 5, offset: 19012},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 650, col: 5, offset: 19012},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 650, col: 5, offset: 19012},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 650, col: 11, offset: 19018},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 651, col: 5, offset: 19041},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 651, col: 10, offset: 19046},
								expr: &actionExpr{
									pos: position{line: 651, col: 11, offset: 19047},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 651, col: 11, offset: 19047},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 651, col: 11, offset: 19047},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 651, col: 14, offset: 19050},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 651, col: 17, offset: 19053},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 651, col: 34, offset: 19070},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 651, col: 37, offset: 19073},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 651, col: 42, offset: 19078},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 655, col: 1, offset: 19200},
			expr: &actionExpr{
				pos: position{line: 655, col: 20, offset: 19219},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 655, col: 21, offset: 19220},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 655, col: 21, offset: 19220},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 655, col: 27, offset: 19226},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 657, col: 1, offset: 19263},
			expr: &actionExpr{
				pos: position{line: 658, col: 5, offset: 19286},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 658, col: 5, offset: 19286},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 658, col: 5, offset: 19286},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 658, col: 11, offset: 19292},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 659, col: 5, offset: 19304},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 659, col: 10, offset: 19309},
								expr: &actionExpr{
									pos: position{line: 659, col: 11, offset: 19310},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 659, col: 11, offset: 19310},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 659, col: 11, offset: 19310},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 659, col: 14, offset: 19313},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 659, col: 17, offset: 19316},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 659, col: 40, offset: 19339},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 659, col: 43, offset: 19342},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 659, col: 48, offset: 19347},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 663, col: 1, offset: 19458},
			expr: &actionExpr{
				pos: position{line: 663, col: 26, offset: 19483},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 663, col: 27, offset: 19484},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 663, col: 27, offset: 19484},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 663, col: 33, offset: 19490},
							val:        "/",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 663, col: 39, offset: 19496},
							val:        "%",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 665, col: 1, offset: 19533},
			expr: &choiceExpr{
				pos: position{line: 666, col: 5, offset: 19545},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 666, col: 5, offset: 19545},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 666, col: 5, offset: 19545},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 666, col: 5, offset: 19545},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 666, col: 9, offset: 19549},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 666, col: 12, offset: 19552},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 666, col: 14, offset: 19554},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 669, col: 5, offset: 19663},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 671, col: 1, offset: 19673},
			expr: &choiceExpr{
				pos: position{line: 672, col: 5, offset: 19686},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 672, col: 5, offset: 19686},
						name: "MatchExpr",
					},
					&actionExpr{
						pos: position{line: 673, col: 5, offset: 19700},
						run: (*parser).callonFuncExpr3,
						expr: &seqExpr{
							pos: position{line: 673, col: 5, offset: 19700},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 673, col: 5, offset: 19700},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 673, col: 11, offset: 19706},
										name: "Cast",
									},
								},
								&labeledExpr{
									pos:   position{line: 673, col: 16, offset: 19711},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 673, col: 21, offset: 19716},
										expr: &ruleRefExpr{
											pos:  position{line: 673, col: 22, offset: 19717},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 676, col: 5, offset: 19788},
						run: (*parser).callonFuncExpr10,
						expr: &seqExpr{
							pos: position{line: 676, col: 5, offset: 19788},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 676, col: 5, offset: 19788},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 676, col: 11, offset: 19794},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 676, col: 20, offset: 19803},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 676, col: 25, offset: 19808},
										expr: &ruleRefExpr{
											pos:  position{line: 676, col: 26, offset: 19809},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 679, col: 5, offset: 19880},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 680, col: 5, offset: 19894},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FuncGuard",
			pos:  position{line: 682, col: 1, offset: 19903},
			expr: &seqExpr{
				pos: position{line: 682, col: 13, offset: 19915},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 682, col: 13, offset: 19915},
						name: "NotFuncs",
					},
					&ruleRefExpr{
						pos:  position{line: 682, col: 22, offset: 19924},
						name: "__",
					},
					&litMatcher{
						pos:        position{line: 682, col: 25, offset: 19927},
						val:        "(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "NotFuncs",
			pos:  position{line: 684, col: 1, offset: 19932},
			expr: &choiceExpr{
				pos: position{line: 685, col: 5, offset: 19945},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 685, col: 5, offset: 19945},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 686, col: 5, offset: 19955},
						val:        "search",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 687, col: 5, offset: 19968},
						val:        "select",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 688, col: 5, offset: 19981},
						val:        "type",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "MatchExpr",
			pos:  position{line: 690, col: 1, offset: 19989},
			expr: &actionExpr{
				pos: position{line: 691, col: 5, offset: 20003},
				run: (*parser).callonMatchExpr1,
				expr: &seqExpr{
					pos: position{line: 691, col: 5, offset: 20003},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 691, col: 5, offset: 20003},
							val:        "search",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 691, col: 14, offset: 20012},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 691, col: 17, offset: 20015},
							val:        "(",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 691, col: 21, offset: 20019},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 691, col: 26, offset: 20024},
								name: "SearchBoolean",
							},
						},
						&litMatcher{
							pos:        position{line: 691, col: 40, offset: 20038},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Cast",
			pos:  position{line: 693, col: 1, offset: 20064},
			expr: &actionExpr{
				pos: position{line: 694, col: 5, offset: 20073},
				run: (*parser).callonCast1,
				expr: &seqExpr{
					pos: position{line: 694, col: 5, offset: 20073},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 694, col: 5, offset: 20073},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 694, col: 9, offset: 20077},
								name: "CastType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 694, col: 18, offset: 20086},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 694, col: 21, offset: 20089},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 694, col: 25, offset: 20093},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 694, col: 28, offset: 20096},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 694, col: 33, offset: 20101},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 694, col: 38, offset: 20106},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 694, col: 41, offset: 20109},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 698, col: 1, offset: 20206},
			expr: &actionExpr{
				pos: position{line: 699, col: 5, offset: 20219},
				run: (*parser).callonFunction1,
				expr: &seqExpr{
					pos: position{line: 699, col: 5, offset: 20219},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 699, col: 5, offset: 20219},
							expr: &ruleRefExpr{
								pos:  position{line: 699, col: 6, offset: 20220},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 699, col: 16, offset: 20230},
							label: "fn",
							expr: &ruleRefExpr{
								pos:  position{line: 699, col: 19, offset: 20233},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 699, col: 34, offset: 20248},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 699, col: 37, offset: 20251},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 699, col: 41, offset: 20255},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 699, col: 44, offset: 20258},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 699, col: 49, offset: 20263},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 699, col: 63, offset: 20277},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 699, col: 66, offset: 20280},
							val:        ")",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 699, col: 70, offset: 20284},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 699, col: 76, offset: 20290},
								expr: &ruleRefExpr{
									pos:  position{line: 699, col: 76, offset: 20290},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OptionalExprs",
			pos:  position{line: 703, col: 1, offset: 20411},
			expr: &choiceExpr{
				pos: position{line: 704, col: 5, offset: 20429},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 704, col: 5, offset: 20429},
						name: "Exprs",
					},
					&actionExpr{
						pos: position{line: 705, col: 5, offset: 20439},
						run: (*parser).callonOptionalExprs3,
						expr: &ruleRefExpr{
							pos:  position{line: 705, col: 5, offset: 20439},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 707, col: 1, offset: 20475},
			expr: &actionExpr{
				pos: position{line: 708, col: 5, offset: 20485},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 708, col: 5, offset: 20485},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 708, col: 5, offset: 20485},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 708, col: 11, offset: 20491},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 708, col: 16, offset: 20496},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 708, col: 21, offset: 20501},
								expr: &actionExpr{
									pos: position{line: 708, col: 22, offset: 20502},
									run: (*parser).callonExprs7,
									expr: &seqExpr{
										pos: position{line: 708, col: 22, offset: 20502},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 708, col: 22, offset: 20502},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 708, col: 25, offset: 20505},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 708, col: 29, offset: 20509},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 708, col: 32, offset: 20512},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 708, col: 34, offset: 20514},
													name: "Expr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 712, col: 1, offset: 20623},
			expr: &actionExpr{
				pos: position{line: 712, col: 13, offset: 20635},
				run: (*parser).callonDerefExpr1,
				expr: &seqExpr{
					pos: position{line: 712, col: 13, offset: 20635},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 712, col: 13, offset: 20635},
							expr: &ruleRefExpr{
								pos:  position{line: 712, col: 14, offset: 20636},
								name: "IP6",
							},
						},
						&labeledExpr{
							pos:   position{line: 712, col: 18, offset: 20640},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 712, col: 20, offset: 20642},
								name: "DerefExprPattern",
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExprPattern",
			pos:  position{line: 714, col: 1, offset: 20678},
			expr: &choiceExpr{
				pos: position{line: 715, col: 5, offset: 20699},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 715, col: 5, offset: 20699},
						run: (*parser).callonDerefExprPattern2,
						expr: &seqExpr{
							pos: position{line: 715, col: 5, offset: 20699},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 715, col: 5, offset: 20699},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 715, col: 11, offset: 20705},
										name: "DotID",
									},
								},
								&labeledExpr{
									pos:   position{line: 715, col: 17, offset: 20711},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 715, col: 22, offset: 20716},
										expr: &ruleRefExpr{
											pos:  position{line: 715, col: 23, offset: 20717},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 718, col: 5, offset: 20788},
						run: (*parser).callonDerefExprPattern9,
						expr: &seqExpr{
							pos: position{line: 718, col: 5, offset: 20788},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 718, col: 5, offset: 20788},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 718, col: 11, offset: 20794},
										name: "This",
									},
								},
								&labeledExpr{
									pos:   position{line: 718, col: 16, offset: 20799},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 718, col: 21, offset: 20804},
										expr: &ruleRefExpr{
											pos:  position{line: 718, col: 22, offset: 20805},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 721, col: 5, offset: 20876},
						run: (*parser).callonDerefExprPattern16,
						expr: &seqExpr{
							pos: position{line: 721, col: 5, offset: 20876},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 721, col: 5, offset: 20876},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 721, col: 11, offset: 20882},
										name: "Identifier",
									},
								},
								&labeledExpr{
									pos:   position{line: 721, col: 22, offset: 20893},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 721, col: 27, offset: 20898},
										expr: &ruleRefExpr{
											pos:  position{line: 721, col: 28, offset: 20899},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 724, col: 5, offset: 20970},
						run: (*parser).callonDerefExprPattern23,
						expr: &litMatcher{
							pos:        position{line: 724, col: 5, offset: 20970},
							val:        ".",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "This",
			pos:  position{line: 728, col: 1, offset: 21051},
			expr: &actionExpr{
				pos: position{line: 728, col: 8, offset: 21058},
				run: (*parser).callonThis1,
				expr: &litMatcher{
					pos:        position{line: 728, col: 8, offset: 21058},
					val:        "this",
					ignoreCase: false,
				},
			},
		},
		{
			name: "DotID",
			pos:  position{line: 730, col: 1, offset: 21132},
			expr: &choiceExpr{
				pos: position{line: 731, col: 5, offset: 21142},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 731, col: 5, offset: 21142},
						run: (*parser).callonDotID2,
						expr: &seqExpr{
							pos: position{line: 731, col: 5, offset: 21142},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 731, col: 5, offset: 21142},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 731, col: 9, offset: 21146},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 731, col: 15, offset: 21152},
										name: "Identifier",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 740, col: 5, offset: 21380},
						run: (*parser).callonDotID7,
						expr: &seqExpr{
							pos: position{line: 740, col: 5, offset: 21380},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 740, col: 5, offset: 21380},
									val:        ".",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 740, col: 9, offset: 21384},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 740, col: 13, offset: 21388},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 740, col: 18, offset: 21393},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 740, col: 23, offset: 21398},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 750, col: 1, offset: 21615},
			expr: &choiceExpr{
				pos: position{line: 751, col: 5, offset: 21625},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 751, col: 5, offset: 21625},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 751, col: 5, offset: 21625},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 751, col: 5, offset: 21625},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 751, col: 9, offset: 21629},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 751, col: 14, offset: 21634},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 751, col: 27, offset: 21647},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 751, col: 30, offset: 21650},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 751, col: 34, offset: 21654},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 751, col: 37, offset: 21657},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 751, col: 40, offset: 21660},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 751, col: 53, offset: 21673},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 757, col: 5, offset: 21844},
						run: (*parser).callonDeref13,
						expr: &seqExpr{
							pos: position{line: 757, col: 5, offset: 21844},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 757, col: 5, offset: 21844},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 757, col: 9, offset: 21848},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 757, col: 12, offset: 21851},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 757, col: 16, offset: 21855},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 757, col: 19, offset: 21858},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 757, col: 22, offset: 21861},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 757, col: 35, offset: 21874},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 763, col: 5, offset: 22045},
						run: (*parser).callonDeref22,
						expr: &seqExpr{
							pos: position{line: 763, col: 5, offset: 22045},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 763, col: 5, offset: 22045},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 763, col: 9, offset: 22049},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 763, col: 14, offset: 22054},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 763, col: 27, offset: 22067},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 763, col: 30, offset: 22070},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 763, col: 34, offset: 22074},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 763, col: 37, offset: 22077},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 769, col: 5, offset: 22250},
						run: (*parser).callonDeref31,
						expr: &seqExpr{
							pos: position{line: 769, col: 5, offset: 22250},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 769, col: 5, offset: 22250},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 769, col: 9, offset: 22254},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 769, col: 14, offset: 22259},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 769, col: 19, offset: 22264},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 770, col: 5, offset: 22313},
						run: (*parser).callonDeref37,
						expr: &seqExpr{
							pos: position{line: 770, col: 5, offset: 22313},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 770, col: 5, offset: 22313},
									val:        ".",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 770, col: 9, offset: 22317},
									expr: &litMatcher{
										pos:        position{line: 770, col: 11, offset: 22319},
										val:        ".",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 770, col: 16, offset: 22324},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 770, col: 19, offset: 22327},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 772, col: 1, offset: 22378},
			expr: &choiceExpr{
				pos: position{line: 773, col: 5, offset: 22390},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 773, col: 5, offset: 22390},
						name: "Record",
					},
					&ruleRefExpr{
						pos:  position{line: 774, col: 5, offset: 22401},
						name: "Array",
					},
					&ruleRefExpr{
						pos:  position{line: 775, col: 5, offset: 22411},
						name: "Set",
					},
					&ruleRefExpr{
						pos:  position{line: 776, col: 5, offset: 22419},
						name: "Map",
					},
					&ruleRefExpr{
						pos:  position{line: 777, col: 5, offset: 22427},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 778, col: 5, offset: 22439},
						run: (*parser).callonPrimary7,
						expr: &seqExpr{
							pos: position{line: 778, col: 5, offset: 22439},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 778, col: 5, offset: 22439},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 778, col: 9, offset: 22443},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 778, col: 12, offset: 22446},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 778, col: 17, offset: 22451},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 778, col: 22, offset: 22456},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 778, col: 25, offset: 22459},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Record",
			pos:  position{line: 780, col: 1, offset: 22485},
			expr: &choiceExpr{
				pos: position{line: 781, col: 5, offset: 22496},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 781, col: 5, offset: 22496},
						run: (*parser).callonRecord2,
						expr: &seqExpr{
							pos: position{line: 781, col: 5, offset: 22496},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 781, col: 5, offset: 22496},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 781, col: 9, offset: 22500},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 781, col: 12, offset: 22503},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 781, col: 17, offset: 22508},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 781, col: 22, offset: 22513},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 781, col: 24, offset: 22515},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 781, col: 31, offset: 22522},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 781, col: 33, offset: 22524},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 781, col: 40, offset: 22531},
										name: "Fields",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 781, col: 47, offset: 22538},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 781, col: 50, offset: 22541},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 784, col: 5, offset: 22649},
						run: (*parser).callonRecord15,
						expr: &seqExpr{
							pos: position{line: 784, col: 5, offset: 22649},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 784, col: 5, offset: 22649},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 784, col: 9, offset: 22653},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 784, col: 12, offset: 22656},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 784, col: 19, offset: 22663},
										name: "Fields",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 784, col: 26, offset: 22670},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 784, col: 29, offset: 22673},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Fields",
			pos:  position{line: 788, col: 1, offset: 22777},
			expr: &choiceExpr{
				pos: position{line: 789, col: 5, offset: 22788},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 789, col: 5, offset: 22788},
						run: (*parser).callonFields2,
						expr: &seqExpr{
							pos: position{line: 789, col: 5, offset: 22788},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 789, col: 5, offset: 22788},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 789, col: 11, offset: 22794},
										name: "Field",
									},
								},
								&labeledExpr{
									pos:   position{line: 789, col: 17, offset: 22800},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 789, col: 22, offset: 22805},
										expr: &ruleRefExpr{
											pos:  position{line: 789, col: 22, offset: 22805},
											name: "FieldTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 792, col: 5, offset: 22899},
						run: (*parser).callonFields9,
						expr: &ruleRefExpr{
							pos:  position{line: 792, col: 5, offset: 22899},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "FieldTail",
			pos:  position{line: 794, col: 1, offset: 22935},
			expr: &actionExpr{
				pos: position{line: 794, col: 13, offset: 22947},
				run: (*parser).callonFieldTail1,
				expr: &seqExpr{
					pos: position{line: 794, col: 13, offset: 22947},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 794, col: 13, offset: 22947},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 794, col: 16, offset: 22950},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 794, col: 20, offset: 22954},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 794, col: 23, offset: 22957},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 794, col: 25, offset: 22959},
								name: "Field",
							},
						},
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 796, col: 1, offset: 22984},
			expr: &actionExpr{
				pos: position{line: 797, col: 5, offset: 22994},
				run: (*parser).callonField1,
				expr: &seqExpr{
					pos: position{line: 797, col: 5, offset: 22994},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 797, col: 5, offset: 22994},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 797, col: 10, offset: 22999},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 797, col: 20, offset: 23009},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 797, col: 23, offset: 23012},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 797, col: 27, offset: 23016},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 797, col: 30, offset: 23019},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 797, col: 36, offset: 23025},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Array",
			pos:  position{line: 801, col: 1, offset: 23110},
			expr: &actionExpr{
				pos: position{line: 802, col: 5, offset: 23120},
				run: (*parser).callonArray1,
				expr: &seqExpr{
					pos: position{line: 802, col: 5, offset: 23120},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 802, col: 5, offset: 23120},
							val:        "[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 802, col: 9, offset: 23124},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 802, col: 12, offset: 23127},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 802, col: 18, offset: 23133},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 802, col: 32, offset: 23147},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 802, col: 35, offset: 23150},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Set",
			pos:  position{line: 806, col: 1, offset: 23240},
			expr: &actionExpr{
				pos: position{line: 807, col: 5, offset: 23248},
				run: (*parser).callonSet1,
				expr: &seqExpr{
					pos: position{line: 807, col: 5, offset: 23248},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 807, col: 5, offset: 23248},
							val:        "|[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 807, col: 10, offset: 23253},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 807, col: 13, offset: 23256},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 807, col: 19, offset: 23262},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 807, col: 33, offset: 23276},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 807, col: 36, offset: 23279},
							val:        "]|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Map",
			pos:  position{line: 811, col: 1, offset: 23368},
			expr: &actionExpr{
				pos: position{line: 812, col: 5, offset: 23376},
				run: (*parser).callonMap1,
				expr: &seqExpr{
					pos: position{line: 812, col: 5, offset: 23376},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 812, col: 5, offset: 23376},
							val:        "|{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 812, col: 10, offset: 23381},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 812, col: 13, offset: 23384},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 812, col: 19, offset: 23390},
								name: "Entries",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 812, col: 27, offset: 23398},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 812, col: 30, offset: 23401},
							val:        "}|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Entries",
			pos:  position{line: 816, col: 1, offset: 23492},
			expr: &choiceExpr{
				pos: position{line: 817, col: 5, offset: 23504},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 817, col: 5, offset: 23504},
						run: (*parser).callonEntries2,
						expr: &seqExpr{
							pos: position{line: 817, col: 5, offset: 23504},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 817, col: 5, offset: 23504},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 817, col: 11, offset: 23510},
										name: "Entry",
									},
								},
								&labeledExpr{
									pos:   position{line: 817, col: 17, offset: 23516},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 817, col: 22, offset: 23521},
										expr: &ruleRefExpr{
											pos:  position{line: 817, col: 22, offset: 23521},
											name: "EntryTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 820, col: 5, offset: 23615},
						run: (*parser).callonEntries9,
						expr: &ruleRefExpr{
							pos:  position{line: 820, col: 5, offset: 23615},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "EntryTail",
			pos:  position{line: 823, col: 1, offset: 23652},
			expr: &actionExpr{
				pos: position{line: 823, col: 13, offset: 23664},
				run: (*parser).callonEntryTail1,
				expr: &seqExpr{
					pos: position{line: 823, col: 13, offset: 23664},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 823, col: 13, offset: 23664},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 823, col: 16, offset: 23667},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 823, col: 20, offset: 23671},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 823, col: 23, offset: 23674},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 823, col: 25, offset: 23676},
								name: "Entry",
							},
						},
					},
				},
			},
		},
		{
			name: "Entry",
			pos:  position{line: 825, col: 1, offset: 23701},
			expr: &actionExpr{
				pos: position{line: 826, col: 5, offset: 23711},
				run: (*parser).callonEntry1,
				expr: &seqExpr{
					pos: position{line: 826, col: 5, offset: 23711},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 826, col: 5, offset: 23711},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 826, col: 9, offset: 23715},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 826, col: 14, offset: 23720},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 826, col: 17, offset: 23723},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 826, col: 21, offset: 23727},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 826, col: 24, offset: 23730},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 826, col: 30, offset: 23736},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLProc",
			pos:  position{line: 832, col: 1, offset: 23843},
			expr: &actionExpr{
				pos: position{line: 833, col: 5, offset: 23855},
				run: (*parser).callonSQLProc1,
				expr: &seqExpr{
					pos: position{line: 833, col: 5, offset: 23855},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 833, col: 5, offset: 23855},
							label: "selection",
							expr: &ruleRefExpr{
								pos:  position{line: 833, col: 15, offset: 23865},
								name: "SQLSelect",
							},
						},
						&labeledExpr{
							pos:   position{line: 834, col: 5, offset: 23879},
							label: "from",
							expr: &zeroOrOneExpr{
								pos: position{line: 834, col: 10, offset: 23884},
								expr: &ruleRefExpr{
									pos:  position{line: 834, col: 10, offset: 23884},
									name: "SQLFrom",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 835, col: 5, offset: 23897},
							label: "joins",
							expr: &zeroOrOneExpr{
								pos: position{line: 835, col: 11, offset: 23903},
								expr: &ruleRefExpr{
									pos:  position{line: 835, col: 11, offset: 23903},
									name: "SQLJoins",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 836, col: 5, offset: 23917},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 836, col: 11, offset: 23923},
								expr: &ruleRefExpr{
									pos:  position{line: 836, col: 11, offset: 23923},
									name: "SQLWhere",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 837, col: 5, offset: 23937},
							label: "groupby",
							expr: &zeroOrOneExpr{
								pos: position{line: 837, col: 13, offset: 23945},
								expr: &ruleRefExpr{
									pos:  position{line: 837, col: 13, offset: 23945},
									name: "SQLGroupBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 838, col: 5, offset: 23961},
							label: "having",
							expr: &zeroOrOneExpr{
								pos: position{line: 838, col: 12, offset: 23968},
								expr: &ruleRefExpr{
									pos:  position{line: 838, col: 12, offset: 23968},
									name: "SQLHaving",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 839, col: 5, offset: 23983},
							label: "orderby",
							expr: &zeroOrOneExpr{
								pos: position{line: 839, col: 13, offset: 23991},
								expr: &ruleRefExpr{
									pos:  position{line: 839, col: 13, offset: 23991},
									name: "SQLOrderBy",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 840, col: 5, offset: 24007},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 840, col: 11, offset: 24013},
								name: "SQLLimit",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLSelect",
			pos:  position{line: 864, col: 1, offset: 24380},
			expr: &choiceExpr{
				pos: position{line: 865, col: 5, offset: 24394},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 865, col: 5, offset: 24394},
						run: (*parser).callonSQLSelect2,
						expr: &seqExpr{
							pos: position{line: 865, col: 5, offset: 24394},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 865, col: 5, offset: 24394},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 865, col: 12, offset: 24401},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 865, col: 14, offset: 24403},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 866, col: 5, offset: 24431},
						run: (*parser).callonSQLSelect7,
						expr: &seqExpr{
							pos: position{line: 866, col: 5, offset: 24431},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 866, col: 5, offset: 24431},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 866, col: 12, offset: 24438},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 866, col: 14, offset: 24440},
									label: "assignments",
									expr: &ruleRefExpr{
										pos:  position{line: 866, col: 26, offset: 24452},
										name: "SQLAssignments",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignment",
			pos:  position{line: 868, col: 1, offset: 24496},
			expr: &choiceExpr{
				pos: position{line: 869, col: 5, offset: 24514},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 869, col: 5, offset: 24514},
						run: (*parser).callonSQLAssignment2,
						expr: &seqExpr{
							pos: position{line: 869, col: 5, offset: 24514},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 869, col: 5, offset: 24514},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 869, col: 9, offset: 24518},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 869, col: 14, offset: 24523},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 869, col: 16, offset: 24525},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 869, col: 19, offset: 24528},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 869, col: 21, offset: 24530},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 869, col: 25, offset: 24534},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 870, col: 5, offset: 24628},
						run: (*parser).callonSQLAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 870, col: 5, offset: 24628},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 870, col: 10, offset: 24633},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignments",
			pos:  position{line: 872, col: 1, offset: 24725},
			expr: &actionExpr{
				pos: position{line: 873, col: 5, offset: 24744},
				run: (*parser).callonSQLAssignments1,
				expr: &seqExpr{
					pos: position{line: 873, col: 5, offset: 24744},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 873, col: 5, offset: 24744},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 873, col: 11, offset: 24750},
								name: "SQLAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 873, col: 25, offset: 24764},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 873, col: 30, offset: 24769},
								expr: &actionExpr{
									pos: position{line: 873, col: 31, offset: 24770},
									run: (*parser).callonSQLAssignments7,
									expr: &seqExpr{
										pos: position{line: 873, col: 31, offset: 24770},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 873, col: 31, offset: 24770},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 873, col: 34, offset: 24773},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 873, col: 38, offset: 24777},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 873, col: 41, offset: 24780},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 873, col: 46, offset: 24785},
													name: "SQLAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLFrom",
			pos:  position{line: 877, col: 1, offset: 24906},
			expr: &choiceExpr{
				pos: position{line: 878, col: 5, offset: 24918},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 878, col: 5, offset: 24918},
						run: (*parser).callonSQLFrom2,
						expr: &seqExpr{
							pos: position{line: 878, col: 5, offset: 24918},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 878, col: 5, offset: 24918},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 878, col: 7, offset: 24920},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 878, col: 12, offset: 24925},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 878, col: 14, offset: 24927},
									label: "table",
									expr: &ruleRefExpr{
										pos:  position{line: 878, col: 20, offset: 24933},
										name: "SQLTable",
									},
								},
								&labeledExpr{
									pos:   position{line: 878, col: 29, offset: 24942},
									label: "alias",
									expr: &zeroOrOneExpr{
										pos: position{line: 878, col: 35, offset: 24948},
										expr: &ruleRefExpr{
											pos:  position{line: 878, col: 35, offset: 24948},
											name: "SQLAlias",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 881, col: 5, offset: 25043},
						run: (*parser).callonSQLFrom12,
						expr: &seqExpr{
							pos: position{line: 881, col: 5, offset: 25043},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 881, col: 5, offset: 25043},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 881, col: 7, offset: 25045},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 881, col: 12, offset: 25050},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 881, col: 14, offset: 25052},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAlias",
			pos:  position{line: 883, col: 1, offset: 25077},
			expr: &choiceExpr{
				pos: position{line: 884, col: 5, offset: 25090},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 884, col: 5, offset: 25090},
						run: (*parser).callonSQLAlias2,
						expr: &seqExpr{
							pos: position{line: 884, col: 5, offset: 25090},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 884, col: 5, offset: 25090},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 884, col: 7, offset: 25092},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 884, col: 10, offset: 25095},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 884, col: 12, offset: 25097},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 884, col: 15, offset: 25100},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 885, col: 5, offset: 25128},
						run: (*parser).callonSQLAlias9,
						expr: &seqExpr{
							pos: position{line: 885, col: 5, offset: 25128},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 885, col: 5, offset: 25128},
									name: "_",
								},
								&notExpr{
									pos: position{line: 885, col: 7, offset: 25130},
									expr: &seqExpr{
										pos: position{line: 885, col: 9, offset: 25132},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 885, col: 9, offset: 25132},
												name: "SQLTokenSentinels",
											},
											&ruleRefExpr{
												pos:  position{line: 885, col: 27, offset: 25150},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 885, col: 30, offset: 25153},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 885, col: 33, offset: 25156},
										name: "Lval",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLTable",
			pos:  position{line: 887, col: 1, offset: 25181},
			expr: &ruleRefExpr{
				pos:  position{line: 888, col: 5, offset: 25194},
				name: "Expr",
			},
		},
		{
			name: "SQLJoins",
			pos:  position{line: 890, col: 1, offset: 25200},
			expr: &actionExpr{
				pos: position{line: 891, col: 5, offset: 25213},
				run: (*parser).callonSQLJoins1,
				expr: &seqExpr{
					pos: position{line: 891, col: 5, offset: 25213},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 891, col: 5, offset: 25213},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 891, col: 11, offset: 25219},
								name: "SQLJoin",
							},
						},
						&labeledExpr{
							pos:   position{line: 891, col: 19, offset: 25227},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 891, col: 24, offset: 25232},
								expr: &actionExpr{
									pos: position{line: 891, col: 25, offset: 25233},
									run: (*parser).callonSQLJoins7,
									expr: &labeledExpr{
										pos:   position{line: 891, col: 25, offset: 25233},
										label: "join",
										expr: &ruleRefExpr{
											pos:  position{line: 891, col: 30, offset: 25238},
											name: "SQLJoin",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoin",
			pos:  position{line: 895, col: 1, offset: 25353},
			expr: &actionExpr{
				pos: position{line: 896, col: 5, offset: 25365},
				run: (*parser).callonSQLJoin1,
				expr: &seqExpr{
					pos: position{line: 896, col: 5, offset: 25365},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 896, col: 5, offset: 25365},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 896, col: 11, offset: 25371},
								name: "SQLJoinStyle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 896, col: 24, offset: 25384},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 896, col: 26, offset: 25386},
							name: "JOIN",
						},
						&ruleRefExpr{
							pos:  position{line: 896, col: 31, offset: 25391},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 896, col: 33, offset: 25393},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 896, col: 39, offset: 25399},
								name: "SQLTable",
							},
						},
						&labeledExpr{
							pos:   position{line: 896, col: 48, offset: 25408},
							label: "alias",
							expr: &zeroOrOneExpr{
								pos: position{line: 896, col: 54, offset: 25414},
								expr: &ruleRefExpr{
									pos:  position{line: 896, col: 54, offset: 25414},
									name: "SQLAlias",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 896, col: 64, offset: 25424},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 896, col: 66, offset: 25426},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 896, col: 69, offset: 25429},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 896, col: 71, offset: 25431},
							label: "leftKey",
							expr: &ruleRefExpr{
								pos:  position{line: 896, col: 79, offset: 25439},
								name: "JoinKey",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 896, col: 87, offset: 25447},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 896, col: 90, offset: 25450},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 896, col: 94, offset: 25454},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 896, col: 97, offset: 25457},
							label: "rightKey",
							expr: &ruleRefExpr{
								pos:  position{line: 896, col: 106, offset: 25466},
								name: "JoinKey",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoinStyle",
			pos:  position{line: 915, col: 1, offset: 25701},
			expr: &choiceExpr{
				pos: position{line: 916, col: 5, offset: 25718},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 916, col: 5, offset: 25718},
						run: (*parser).callonSQLJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 916, col: 5, offset: 25718},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 916, col: 5, offset: 25718},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 916, col: 7, offset: 25720},
									label: "style",
									expr: &choiceExpr{
										pos: position{line: 916, col: 14, offset: 25727},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 916, col: 14, offset: 25727},
												name: "ANTI",
											},
											&ruleRefExpr{
												pos:  position{line: 916, col: 21, offset: 25734},
												name: "INNER",
											},
											&ruleRefExpr{
												pos:  position{line: 916, col: 29, offset: 25742},
												name: "LEFT",
											},
											&ruleRefExpr{
												pos:  position{line: 916, col: 36, offset: 25749},
												name: "RIGHT",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 917, col: 5, offset: 25782},
						run: (*parser).callonSQLJoinStyle11,
						expr: &litMatcher{
							pos:        position{line: 917, col: 5, offset: 25782},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLWhere",
			pos:  position{line: 919, col: 1, offset: 25810},
			expr: &actionExpr{
				pos: position{line: 920, col: 5, offset: 25823},
				run: (*parser).callonSQLWhere1,
				expr: &seqExpr{
					pos: position{line: 920, col: 5, offset: 25823},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 920, col: 5, offset: 25823},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 920, col: 7, offset: 25825},
							name: "WHERE",
						},
						&ruleRefExpr{
							pos:  position{line: 920, col: 13, offset: 25831},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 920, col: 15, offset: 25833},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 920, col: 20, offset: 25838},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLGroupBy",
			pos:  position{line: 922, col: 1, offset: 25874},
			expr: &actionExpr{
				pos: position{line: 923, col: 5, offset: 25889},
				run: (*parser).callonSQLGroupBy1,
				expr: &seqExpr{
					pos: position{line: 923, col: 5, offset: 25889},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 923, col: 5, offset: 25889},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 923, col: 7, offset: 25891},
							name: "GROUP",
						},
						&ruleRefExpr{
							pos:  position{line: 923, col: 13, offset: 25897},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 923, col: 15, offset: 25899},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 923, col: 18, offset: 25902},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 923, col: 20, offset: 25904},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 923, col: 28, offset: 25912},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLHaving",
			pos:  position{line: 925, col: 1, offset: 25948},
			expr: &actionExpr{
				pos: position{line: 926, col: 5, offset: 25962},
				run: (*parser).callonSQLHaving1,
				expr: &seqExpr{
					pos: position{line: 926, col: 5, offset: 25962},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 926, col: 5, offset: 25962},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 926, col: 7, offset: 25964},
							name: "HAVING",
						},
						&ruleRefExpr{
							pos:  position{line: 926, col: 14, offset: 25971},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 926, col: 16, offset: 25973},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 926, col: 21, offset: 25978},
								name: "LogicalOrExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrderBy",
			pos:  position{line: 928, col: 1, offset: 26014},
			expr: &actionExpr{
				pos: position{line: 929, col: 5, offset: 26029},
				run: (*parser).callonSQLOrderBy1,
				expr: &seqExpr{
					pos: position{line: 929, col: 5, offset: 26029},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 929, col: 5, offset: 26029},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 929, col: 7, offset: 26031},
							name: "ORDER",
						},
						&ruleRefExpr{
							pos:  position{line: 929, col: 13, offset: 26037},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 929, col: 15, offset: 26039},
							name: "BY",
						},
						&ruleRefExpr{
							pos:  position{line: 929, col: 18, offset: 26042},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 929, col: 20, offset: 26044},
							label: "keys",
							expr: &ruleRefExpr{
								pos:  position{line: 929, col: 25, offset: 26049},
								name: "Exprs",
							},
						},
						&labeledExpr{
							pos:   position{line: 929, col: 31, offset: 26055},
							label: "order",
							expr: &ruleRefExpr{
								pos:  position{line: 929, col: 37, offset: 26061},
								name: "SQLOrder",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLOrder",
			pos:  position{line: 933, col: 1, offset: 26171},
			expr: &choiceExpr{
				pos: position{line: 934, col: 5, offset: 26184},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 934, col: 5, offset: 26184},
						run: (*parser).callonSQLOrder2,
						expr: &seqExpr{
							pos: position{line: 934, col: 5, offset: 26184},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 934, col: 5, offset: 26184},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 934, col: 7, offset: 26186},
									label: "dir",
									expr: &choiceExpr{
										pos: position{line: 934, col: 12, offset: 26191},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 934, col: 12, offset: 26191},
												name: "ASC",
											},
											&ruleRefExpr{
												pos:  position{line: 934, col: 18, offset: 26197},
												name: "DESC",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 935, col: 5, offset: 26227},
						run: (*parser).callonSQLOrder9,
						expr: &litMatcher{
							pos:        position{line: 935, col: 5, offset: 26227},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLLimit",
			pos:  position{line: 937, col: 1, offset: 26253},
			expr: &choiceExpr{
				pos: position{line: 938, col: 5, offset: 26266},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 938, col: 5, offset: 26266},
						run: (*parser).callonSQLLimit2,
						expr: &seqExpr{
							pos: position{line: 938, col: 5, offset: 26266},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 938, col: 5, offset: 26266},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 938, col: 7, offset: 26268},
									name: "LIMIT",
								},
								&ruleRefExpr{
									pos:  position{line: 938, col: 13, offset: 26274},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 938, col: 15, offset: 26276},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 938, col: 21, offset: 26282},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 939, col: 5, offset: 26313},
						run: (*parser).callonSQLLimit9,
						expr: &litMatcher{
							pos:        position{line: 939, col: 5, offset: 26313},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SELECT",
			pos:  position{line: 941, col: 1, offset: 26335},
			expr: &actionExpr{
				pos: position{line: 941, col: 10, offset: 26344},
				run: (*parser).callonSELECT1,
				expr: &litMatcher{
					pos:        position{line: 941, col: 10, offset: 26344},
					val:        "select",
					ignoreCase: true,
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 942, col: 1, offset: 26379},
			expr: &actionExpr{
				pos: position{line: 942, col: 6, offset: 26384},
				run: (*parser).callonAS1,
				expr: &litMatcher{
					pos:        position{line: 942, col: 6, offset: 26384},
					val:        "as",
					ignoreCase: true,
				},
			},
		},
		{
			name: "FROM",
			pos:  position{line: 943, col: 1, offset: 26411},
			expr: &actionExpr{
				pos: position{line: 943, col: 8, offset: 26418},
				run: (*parser).callonFROM1,
				expr: &litMatcher{
					pos:        position{line: 943, col: 8, offset: 26418},
					val:        "from",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JOIN",
			pos:  position{line: 944, col: 1, offset: 26449},
			expr: &actionExpr{
				pos: position{line: 944, col: 8, offset: 26456},
				run: (*parser).callonJOIN1,
				expr: &litMatcher{
					pos:        position{line: 944, col: 8, offset: 26456},
					val:        "join",
					ignoreCase: true,
				},
			},
		},
		{
			name: "WHERE",
			pos:  position{line: 945, col: 1, offset: 26487},
			expr: &actionExpr{
				pos: position{line: 945, col: 9, offset: 26495},
				run: (*parser).callonWHERE1,
				expr: &litMatcher{
					pos:        position{line: 945, col: 9, offset: 26495},
					val:        "where",
					ignoreCase: true,
				},
			},
		},
		{
			name: "GROUP",
			pos:  position{line: 946, col: 1, offset: 26528},
			expr: &actionExpr{
				pos: position{line: 946, col: 9, offset: 26536},
				run: (*parser).callonGROUP1,
				expr: &litMatcher{
					pos:        position{line: 946, col: 9, offset: 26536},
					val:        "group",
					ignoreCase: true,
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 947, col: 1, offset: 26569},
			expr: &ruleRefExpr{
				pos:  position{line: 947, col: 6, offset: 26574},
				name: "ByToken",
			},
		},
		{
			name: "HAVING",
			pos:  position{line: 948, col: 1, offset: 26582},
			expr: &actionExpr{
				pos: position{line: 948, col: 10, offset: 26591},
				run: (*parser).callonHAVING1,
				expr: &litMatcher{
					pos:        position{line: 948, col: 10, offset: 26591},
					val:        "having",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ORDER",
			pos:  position{line: 949, col: 1, offset: 26626},
			expr: &actionExpr{
				pos: position{line: 949, col: 9, offset: 26634},
				run: (*parser).callonORDER1,
				expr: &litMatcher{
					pos:        position{line: 949, col: 9, offset: 26634},
					val:        "order",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ON",
			pos:  position{line: 950, col: 1, offset: 26667},
			expr: &actionExpr{
				pos: position{line: 950, col: 6, offset: 26672},
				run: (*parser).callonON1,
				expr: &litMatcher{
					pos:        position{line: 950, col: 6, offset: 26672},
					val:        "on",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LIMIT",
			pos:  position{line: 951, col: 1, offset: 26699},
			expr: &actionExpr{
				pos: position{line: 951, col: 9, offset: 26707},
				run: (*parser).callonLIMIT1,
				expr: &litMatcher{
					pos:        position{line: 951, col: 9, offset: 26707},
					val:        "limit",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ASC",
			pos:  position{line: 952, col: 1, offset: 26740},
			expr: &actionExpr{
				pos: position{line: 952, col: 7, offset: 26746},
				run: (*parser).callonASC1,
				expr: &litMatcher{
					pos:        position{line: 952, col: 7, offset: 26746},
					val:        "asc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "DESC",
			pos:  position{line: 953, col: 1, offset: 26775},
			expr: &actionExpr{
				pos: position{line: 953, col: 8, offset: 26782},
				run: (*parser).callonDESC1,
				expr: &litMatcher{
					pos:        position{line: 953, col: 8, offset: 26782},
					val:        "desc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ANTI",
			pos:  position{line: 954, col: 1, offset: 26813},
			expr: &actionExpr{
				pos: position{line: 954, col: 8, offset: 26820},
				run: (*parser).callonANTI1,
				expr: &litMatcher{
					pos:        position{line: 954, col: 8, offset: 26820},
					val:        "anti",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LEFT",
			pos:  position{line: 955, col: 1, offset: 26851},
			expr: &actionExpr{
				pos: position{line: 955, col: 8, offset: 26858},
				run: (*parser).callonLEFT1,
				expr: &litMatcher{
					pos:        position{line: 955, col: 8, offset: 26858},
					val:        "left",
					ignoreCase: true,
				},
			},
		},
		{
			name: "RIGHT",
			pos:  position{line: 956, col: 1, offset: 26889},
			expr: &actionExpr{
				pos: position{line: 956, col: 9, offset: 26897},
				run: (*parser).callonRIGHT1,
				expr: &litMatcher{
					pos:        position{line: 956, col: 9, offset: 26897},
					val:        "right",
					ignoreCase: true,
				},
			},
		},
		{
			name: "INNER",
			pos:  position{line: 957, col: 1, offset: 26930},
			expr: &actionExpr{
				pos: position{line: 957, col: 9, offset: 26938},
				run: (*parser).callonINNER1,
				expr: &litMatcher{
					pos:        position{line: 957, col: 9, offset: 26938},
					val:        "inner",
					ignoreCase: true,
				},
			},
		},
		{
			name: "SQLTokenSentinels",
			pos:  position{line: 959, col: 1, offset: 26972},
			expr: &choiceExpr{
				pos: position{line: 960, col: 5, offset: 26994},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 960, col: 5, offset: 26994},
						name: "SELECT",
					},
					&ruleRefExpr{
						pos:  position{line: 960, col: 14, offset: 27003},
						name: "AS",
					},
					&ruleRefExpr{
						pos:  position{line: 960, col: 19, offset: 27008},
						name: "FROM",
					},
					&ruleRefExpr{
						pos:  position{line: 960, col: 27, offset: 27016},
						name: "JOIN",
					},
					&ruleRefExpr{
						pos:  position{line: 960, col: 34, offset: 27023},
						name: "WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 960, col: 42, offset: 27031},
						name: "GROUP",
					},
					&ruleRefExpr{
						pos:  position{line: 960, col: 50, offset: 27039},
						name: "HAVING",
					},
					&ruleRefExpr{
						pos:  position{line: 960, col: 59, offset: 27048},
						name: "ORDER",
					},
					&ruleRefExpr{
						pos:  position{line: 960, col: 67, offset: 27056},
						name: "LIMIT",
					},
					&ruleRefExpr{
						pos:  position{line: 960, col: 75, offset: 27064},
						name: "ON",
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 964, col: 1, offset: 27090},
			expr: &choiceExpr{
				pos: position{line: 965, col: 5, offset: 27102},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 965, col: 5, offset: 27102},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 966, col: 5, offset: 27118},
						name: "TemplateLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 967, col: 5, offset: 27138},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 968, col: 5, offset: 27156},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 969, col: 5, offset: 27175},
						name: "BytesLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 970, col: 5, offset: 27192},
						name: "Duration",
					},
					&ruleRefExpr{
						pos:  position{line: 971, col: 5, offset: 27205},
						name: "Time",
					},
					&ruleRefExpr{
						pos:  position{line: 972, col: 5, offset: 27214},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 973, col: 5, offset: 27231},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 974, col: 5, offset: 27250},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 975, col: 5, offset: 27269},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 977, col: 1, offset: 27282},
			expr: &choiceExpr{
				pos: position{line: 978, col: 5, offset: 27300},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 978, col: 5, offset: 27300},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 978, col: 5, offset: 27300},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 978, col: 5, offset: 27300},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 978, col: 7, offset: 27302},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 978, col: 14, offset: 27309},
									expr: &ruleRefExpr{
										pos:  position{line: 978, col: 15, offset: 27310},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 981, col: 5, offset: 27425},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 981, col: 5, offset: 27425},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 981, col: 7, offset: 27427},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 985, col: 1, offset: 27531},
			expr: &choiceExpr{
				pos: position{line: 986, col: 5, offset: 27550},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 986, col: 5, offset: 27550},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 986, col: 5, offset: 27550},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 986, col: 5, offset: 27550},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 986, col: 7, offset: 27552},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 986, col: 11, offset: 27556},
									expr: &ruleRefExpr{
										pos:  position{line: 986, col: 12, offset: 27557},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 989, col: 5, offset: 27671},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 989, col: 5, offset: 27671},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 989, col: 7, offset: 27673},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 993, col: 1, offset: 27772},
			expr: &actionExpr{
				pos: position{line: 994, col: 5, offset: 27789},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 994, col: 5, offset: 27789},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 994, col: 7, offset: 27791},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 998, col: 1, offset: 27904},
			expr: &actionExpr{
				pos: position{line: 999, col: 5, offset: 27923},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 999, col: 5, offset: 27923},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 999, col: 7, offset: 27925},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 1003, col: 1, offset: 28034},
			expr: &choiceExpr{
				pos: position{line: 1004, col: 5, offset: 28053},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1004, col: 5, offset: 28053},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 1004, col: 5, offset: 28053},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1005, col: 5, offset: 28166},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 1005, col: 5, offset: 28166},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 1007, col: 1, offset: 28277},
			expr: &actionExpr{
				pos: position{line: 1008, col: 5, offset: 28293},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 1008, col: 5, offset: 28293},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "BytesLiteral",
			pos:  position{line: 1010, col: 1, offset: 28399},
			expr: &actionExpr{
				pos: position{line: 1011, col: 5, offset: 28416},
				run: (*parser).callonBytesLiteral1,
				expr: &seqExpr{
					pos: position{line: 1011, col: 5, offset: 28416},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1011, col: 5, offset: 28416},
							val:        "0x",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1011, col: 10, offset: 28421},
							expr: &ruleRefExpr{
								pos:  position{line: 1011, col: 10, offset: 28421},
								name: "HexDigit",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeLiteral",
			pos:  position{line: 1015, col: 1, offset: 28536},
			expr: &actionExpr{
				pos: position{line: 1016, col: 5, offset: 28552},
				run: (*parser).callonTypeLiteral1,
				expr: &seqExpr{
					pos: position{line: 1016, col: 5, offset: 28552},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1016, col: 5, offset: 28552},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1016, col: 9, offset: 28556},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1016, col: 13, offset: 28560},
								name: "Type",
							},
						},
						&litMatcher{
							pos:        position{line: 1016, col: 18, offset: 28565},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "CastType",
			pos:  position{line: 1020, col: 1, offset: 28654},
			expr: &choiceExpr{
				pos: position{line: 1021, col: 5, offset: 28667},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1021, col: 5, offset: 28667},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1022, col: 5, offset: 28683},
						name: "PrimitiveType",
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 1024, col: 1, offset: 28698},
			expr: &choiceExpr{
				pos: position{line: 1025, col: 5, offset: 28707},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1025, col: 5, offset: 28707},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1026, col: 5, offset: 28723},
						name: "AmbiguousType",
					},
					&ruleRefExpr{
						pos:  position{line: 1027, col: 5, offset: 28741},
						name: "ComplexType",
					},
				},
			},
		},
		{
			name: "AmbiguousType",
			pos:  position{line: 1029, col: 1, offset: 28754},
			expr: &choiceExpr{
				pos: position{line: 1030, col: 5, offset: 28772},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1030, col: 5, offset: 28772},
						run: (*parser).callonAmbiguousType2,
						expr: &seqExpr{
							pos: position{line: 1030, col: 5, offset: 28772},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1030, col: 5, offset: 28772},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1030, col: 10, offset: 28777},
										name: "PrimitiveType",
									},
								},
								&notExpr{
									pos: position{line: 1030, col: 24, offset: 28791},
									expr: &ruleRefExpr{
										pos:  position{line: 1030, col: 25, offset: 28792},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1031, col: 5, offset: 28832},
						run: (*parser).callonAmbiguousType8,
						expr: &seqExpr{
							pos: position{line: 1031, col: 5, offset: 28832},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1031, col: 5, offset: 28832},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 1031, col: 10, offset: 28837},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1031, col: 25, offset: 28852},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1031, col: 28, offset: 28855},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1031, col: 32, offset: 28859},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1031, col: 35, offset: 28862},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1031, col: 39, offset: 28866},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1031, col: 42, offset: 28869},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1031, col: 46, offset: 28873},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1031, col: 51, offset: 28878},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1031, col: 54, offset: 28881},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1034, col: 5, offset: 28982},
						run: (*parser).callonAmbiguousType21,
						expr: &labeledExpr{
							pos:   position{line: 1034, col: 5, offset: 28982},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1034, col: 10, offset: 28987},
								name: "IdentifierName",
							},
						},
					},
					&actionExpr{
						pos: position{line: 1037, col: 5, offset: 29089},
						run: (*parser).callonAmbiguousType24,
						expr: &seqExpr{
							pos: position{line: 1037, col: 5, offset: 29089},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1037, col: 5, offset: 29089},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1037, col: 9, offset: 29093},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1037, col: 12, offset: 29096},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 1037, col: 14, offset: 29098},
										name: "TypeUnion",
									},
								},
								&litMatcher{
									pos:        position{line: 1037, col: 25, offset: 29109},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeUnion",
			pos:  position{line: 1039, col: 1, offset: 29132},
			expr: &actionExpr{
				pos: position{line: 1040, col: 5, offset: 29146},
				run: (*parser).callonTypeUnion1,
				expr: &labeledExpr{
					pos:   position{line: 1040, col: 5, offset: 29146},
					label: "types",
					expr: &ruleRefExpr{
						pos:  position{line: 1040, col: 11, offset: 29152},
						name: "TypeList",
					},
				},
			},
		},
		{
			name: "TypeList",
			pos:  position{line: 1044, col: 1, offset: 29248},
			expr: &actionExpr{
				pos: position{line: 1045, col: 5, offset: 29261},
				run: (*parser).callonTypeList1,
				expr: &seqExpr{
					pos: position{line: 1045, col: 5, offset: 29261},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1045, col: 5, offset: 29261},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1045, col: 11, offset: 29267},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 1045, col: 16, offset: 29272},
							label: "rest",
							expr: &oneOrMoreExpr{
								pos: position{line: 1045, col: 21, offset: 29277},
								expr: &ruleRefExpr{
									pos:  position{line: 1045, col: 21, offset: 29277},
									name: "TypeListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeListTail",
			pos:  position{line: 1049, col: 1, offset: 29371},
			expr: &actionExpr{
				pos: position{line: 1049, col: 16, offset: 29386},
				run: (*parser).callonTypeListTail1,
				expr: &seqExpr{
					pos: position{line: 1049, col: 16, offset: 29386},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1049, col: 16, offset: 29386},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1049, col: 19, offset: 29389},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1049, col: 23, offset: 29393},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1049, col: 26, offset: 29396},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1049, col: 30, offset: 29400},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexType",
			pos:  position{line: 1051, col: 1, offset: 29426},
			expr: &choiceExpr{
				pos: position{line: 1052, col: 5, offset: 29442},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1052, col: 5, offset: 29442},
						run: (*parser).callonComplexType2,
						expr: &seqExpr{
							pos: position{line: 1052, col: 5, offset: 29442},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1052, col: 5, offset: 29442},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1052, col: 9, offset: 29446},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1052, col: 12, offset: 29449},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 1052, col: 19, offset: 29456},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1052, col: 33, offset: 29470},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1052, col: 36, offset: 29473},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1055, col: 5, offset: 29568},
						run: (*parser).callonComplexType10,
						expr: &seqExpr{
							pos: position{line: 1055, col: 5, offset: 29568},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1055, col: 5, offset: 29568},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1055, col: 9, offset: 29572},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1055, col: 12, offset: 29575},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1055, col: 16, offset: 29579},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1055, col: 21, offset: 29584},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1055, col: 24, offset: 29587},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1058, col: 5, offset: 29676},
						run: (*parser).callonComplexType18,
						expr: &seqExpr{
							pos: position{line: 1058, col: 5, offset: 29676},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1058, col: 5, offset: 29676},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1058, col: 10, offset: 29681},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1058, col: 14, offset: 29685},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1058, col: 18, offset: 29689},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1058, col: 23, offset: 29694},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1058, col: 26, offset: 29697},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1061, col: 5, offset: 29785},
						run: (*parser).callonComplexType26,
						expr: &seqExpr{
							pos: position{line: 1061, col: 5, offset: 29785},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1061, col: 5, offset: 29785},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1061, col: 10, offset: 29790},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1061, col: 13, offset: 29793},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 1061, col: 21, offset: 29801},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1061, col: 26, offset: 29806},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1061, col: 29, offset: 29809},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1061, col: 33, offset: 29813},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1061, col: 36, offset: 29816},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 1061, col: 44, offset: 29824},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1061, col: 49, offset: 29829},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1061, col: 52, offset: 29832},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateLiteral",
			pos:  position{line: 1065, col: 1, offset: 29946},
			expr: &actionExpr{
				pos: position{line: 1066, col: 5, offset: 29966},
				run: (*parser).callonTemplateLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 1066, col: 5, offset: 29966},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 1066, col: 7, offset: 29968},
						name: "TemplateLiteralParts",
					},
				},
			},
		},
		{
			name: "TemplateLiteralParts",
			pos:  position{line: 1073, col: 1, offset: 30163},
			expr: &choiceExpr{
				pos: position{line: 1074, col: 5, offset: 30188},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1074, col: 5, offset: 30188},
						run: (*parser).callonTemplateLiteralParts2,
						expr: &seqExpr{
							pos: position{line: 1074, col: 5, offset: 30188},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1074, col: 5, offset: 30188},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1074, col: 9, offset: 30192},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1074, col: 11, offset: 30194},
										expr: &ruleRefExpr{
											pos:  position{line: 1074, col: 11, offset: 30194},
											name: "TemplateDoubleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1074, col: 37, offset: 30220},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1075, col: 5, offset: 30246},
						run: (*parser).callonTemplateLiteralParts9,
						expr: &seqExpr{
							pos: position{line: 1075, col: 5, offset: 30246},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1075, col: 5, offset: 30246},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1075, col: 9, offset: 30250},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1075, col: 11, offset: 30252},
										expr: &ruleRefExpr{
											pos:  position{line: 1075, col: 11, offset: 30252},
											name: "TemplateSingleQuotedPart",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1075, col: 37, offset: 30278},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedPart",
			pos:  position{line: 1077, col: 1, offset: 30301},
			expr: &choiceExpr{
				pos: position{line: 1078, col: 5, offset: 30330},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1078, col: 5, offset: 30330},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 1079, col: 5, offset: 30347},
						run: (*parser).callonTemplateDoubleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 1079, col: 5, offset: 30347},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1079, col: 7, offset: 30349},
								expr: &ruleRefExpr{
									pos:  position{line: 1079, col: 7, offset: 30349},
									name: "TemplateDoubleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateDoubleQuotedChar",
			pos:  position{line: 1083, col: 1, offset: 30486},
			expr: &choiceExpr{
				pos: position{line: 1084, col: 5, offset: 30515},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1084, col: 5, offset: 30515},
						run: (*parser).callonTemplateDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1084, col: 5, offset: 30515},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1084, col: 5, offset: 30515},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1084, col: 10, offset: 30520},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1084, col: 12, offset: 30522},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1085, col: 5, offset: 30549},
						run: (*parser).callonTemplateDoubleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1085, col: 5, offset: 30549},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1085, col: 5, offset: 30549},
									expr: &litMatcher{
										pos:        position{line: 1085, col: 8, offset: 30552},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1085, col: 15, offset: 30559},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1085, col: 17, offset: 30561},
										name: "DoubleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedPart",
			pos:  position{line: 1087, col: 1, offset: 30597},
			expr: &choiceExpr{
				pos: position{line: 1088, col: 5, offset: 30626},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1088, col: 5, offset: 30626},
						name: "TemplateExpr",
					},
					&actionExpr{
						pos: position{line: 1089, col: 5, offset: 30643},
						run: (*parser).callonTemplateSingleQuotedPart3,
						expr: &labeledExpr{
							pos:   position{line: 1089, col: 5, offset: 30643},
							label: "v",
							expr: &oneOrMoreExpr{
								pos: position{line: 1089, col: 7, offset: 30645},
								expr: &ruleRefExpr{
									pos:  position{line: 1089, col: 7, offset: 30645},
									name: "TemplateSingleQuotedChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateSingleQuotedChar",
			pos:  position{line: 1093, col: 1, offset: 30782},
			expr: &choiceExpr{
				pos: position{line: 1094, col: 5, offset: 30811},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1094, col: 5, offset: 30811},
						run: (*parser).callonTemplateSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1094, col: 5, offset: 30811},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1094, col: 5, offset: 30811},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1094, col: 10, offset: 30816},
									label: "v",
									expr: &litMatcher{
										pos:        position{line: 1094, col: 12, offset: 30818},
										val:        "${",
										ignoreCase: false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1095, col: 5, offset: 30845},
						run: (*parser).callonTemplateSingleQuotedChar7,
						expr: &seqExpr{
							pos: position{line: 1095, col: 5, offset: 30845},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1095, col: 5, offset: 30845},
									expr: &litMatcher{
										pos:        position{line: 1095, col: 8, offset: 30848},
										val:        "${",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 1095, col: 15, offset: 30855},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 1095, col: 17, offset: 30857},
										name: "SingleQuotedChar",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TemplateExpr",
			pos:  position{line: 1097, col: 1, offset: 30893},
			expr: &actionExpr{
				pos: position{line: 1098, col: 5, offset: 30910},
				run: (*parser).callonTemplateExpr1,
				expr: &seqExpr{
					pos: position{line: 1098, col: 5, offset: 30910},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1098, col: 5, offset: 30910},
							val:        "${",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1098, col: 10, offset: 30915},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1098, col: 13, offset: 30918},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 1098, col: 15, offset: 30920},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1098, col: 20, offset: 30925},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1098, col: 23, offset: 30928},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 1100, col: 1, offset: 30951},
			expr: &actionExpr{
				pos: position{line: 1101, col: 5, offset: 30969},
				run: (*parser).callonPrimitiveType1,
				expr: &choiceExpr{
					pos: position{line: 1101, col: 9, offset: 30973},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 1101, col: 9, offset: 30973},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1101, col: 19, offset: 30983},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1101, col: 30, offset: 30994},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1101, col: 41, offset: 31005},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1102, col: 9, offset: 31022},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1102, col: 18, offset: 31031},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1102, col: 28, offset: 31041},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1102, col: 38, offset: 31051},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1103, col: 9, offset: 31067},
							val:        "float32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1103, col: 21, offset: 31079},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1104, col: 9, offset: 31097},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1104, col: 18, offset: 31106},
							val:        "string",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1105, col: 9, offset: 31123},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1105, col: 22, offset: 31136},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1106, col: 9, offset: 31151},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1107, col: 9, offset: 31167},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1107, col: 16, offset: 31174},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1108, col: 9, offset: 31188},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1108, col: 18, offset: 31197},
							val:        "error",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1108, col: 28, offset: 31207},
							val:        "null",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldList",
			pos:  position{line: 1112, col: 1, offset: 31323},
			expr: &actionExpr{
				pos: position{line: 1113, col: 5, offset: 31341},
				run: (*parser).callonTypeFieldList1,
				expr: &seqExpr{
					pos: position{line: 1113, col: 5, offset: 31341},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1113, col: 5, offset: 31341},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1113, col: 11, offset: 31347},
								name: "TypeField",
							},
						},
						&labeledExpr{
							pos:   position{line: 1113, col: 21, offset: 31357},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1113, col: 26, offset: 31362},
								expr: &ruleRefExpr{
									pos:  position{line: 1113, col: 26, offset: 31362},
									name: "TypeFieldListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTail",
			pos:  position{line: 1117, col: 1, offset: 31461},
			expr: &actionExpr{
				pos: position{line: 1117, col: 21, offset: 31481},
				run: (*parser).callonTypeFieldListTail1,
				expr: &seqExpr{
					pos: position{line: 1117, col: 21, offset: 31481},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1117, col: 21, offset: 31481},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1117, col: 24, offset: 31484},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1117, col: 28, offset: 31488},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1117, col: 31, offset: 31491},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1117, col: 35, offset: 31495},
								name: "TypeField",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeField",
			pos:  position{line: 1119, col: 1, offset: 31526},
			expr: &actionExpr{
				pos: position{line: 1120, col: 5, offset: 31540},
				run: (*parser).callonTypeField1,
				expr: &seqExpr{
					pos: position{line: 1120, col: 5, offset: 31540},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1120, col: 5, offset: 31540},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1120, col: 10, offset: 31545},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1120, col: 20, offset: 31555},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1120, col: 23, offset: 31558},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1120, col: 27, offset: 31562},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1120, col: 30, offset: 31565},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1120, col: 34, offset: 31569},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 1124, col: 1, offset: 31651},
			expr: &choiceExpr{
				pos: position{line: 1125, col: 5, offset: 31665},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1125, col: 5, offset: 31665},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 1126, col: 5, offset: 31684},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "EqualityToken",
			pos:  position{line: 1128, col: 1, offset: 31698},
			expr: &choiceExpr{
				pos: position{line: 1129, col: 5, offset: 31716},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1129, col: 5, offset: 31716},
						name: "EqualityOperator",
					},
					&ruleRefExpr{
						pos:  position{line: 1129, col: 24, offset: 31735},
						name: "RelativeOperator",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 1131, col: 1, offset: 31753},
			expr: &actionExpr{
				pos: position{line: 1131, col: 12, offset: 31764},
				run: (*parser).callonAndToken1,
				expr: &seqExpr{
					pos: position{line: 1131, col: 12, offset: 31764},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1131, col: 12, offset: 31764},
							val:        "and",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1131, col: 19, offset: 31771},
							expr: &ruleRefExpr{
								pos:  position{line: 1131, col: 20, offset: 31772},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 1132, col: 1, offset: 31809},
			expr: &actionExpr{
				pos: position{line: 1132, col: 11, offset: 31819},
				run: (*parser).callonOrToken1,
				expr: &seqExpr{
					pos: position{line: 1132, col: 11, offset: 31819},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1132, col: 11, offset: 31819},
							val:        "or",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1132, col: 17, offset: 31825},
							expr: &ruleRefExpr{
								pos:  position{line: 1132, col: 18, offset: 31826},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 1133, col: 1, offset: 31862},
			expr: &actionExpr{
				pos: position{line: 1133, col: 11, offset: 31872},
				run: (*parser).callonInToken1,
				expr: &seqExpr{
					pos: position{line: 1133, col: 11, offset: 31872},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1133, col: 11, offset: 31872},
							val:        "in",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1133, col: 17, offset: 31878},
							expr: &ruleRefExpr{
								pos:  position{line: 1133, col: 18, offset: 31879},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 1134, col: 1, offset: 31915},
			expr: &actionExpr{
				pos: position{line: 1134, col: 12, offset: 31926},
				run: (*parser).callonNotToken1,
				expr: &seqExpr{
					pos: position{line: 1134, col: 12, offset: 31926},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1134, col: 12, offset: 31926},
							val:        "not",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1134, col: 19, offset: 31933},
							expr: &ruleRefExpr{
								pos:  position{line: 1134, col: 20, offset: 31934},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 1135, col: 1, offset: 31971},
			expr: &actionExpr{
				pos: position{line: 1135, col: 11, offset: 31981},
				run: (*parser).callonByToken1,
				expr: &seqExpr{
					pos: position{line: 1135, col: 11, offset: 31981},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1135, col: 11, offset: 31981},
							val:        "by",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1135, col: 17, offset: 31987},
							expr: &ruleRefExpr{
								pos:  position{line: 1135, col: 18, offset: 31988},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 1137, col: 1, offset: 32025},
			expr: &charClassMatcher{
				pos:        position{line: 1137, col: 19, offset: 32043},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 1139, col: 1, offset: 32055},
			expr: &choiceExpr{
				pos: position{line: 1139, col: 18, offset: 32072},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1139, col: 18, offset: 32072},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 1139, col: 36, offset: 32090},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 1141, col: 1, offset: 32097},
			expr: &actionExpr{
				pos: position{line: 1142, col: 5, offset: 32112},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 1142, col: 5, offset: 32112},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 1142, col: 8, offset: 32115},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 1144, col: 1, offset: 32196},
			expr: &choiceExpr{
				pos: position{line: 1145, col: 5, offset: 32215},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1145, col: 5, offset: 32215},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 1145, col: 5, offset: 32215},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1145, col: 5, offset: 32215},
									expr: &seqExpr{
										pos: position{line: 1145, col: 7, offset: 32217},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1145, col: 7, offset: 32217},
												name: "IDGuard",
											},
											&notExpr{
												pos: position{line: 1145, col: 15, offset: 32225},
												expr: &ruleRefExpr{
													pos:  position{line: 1145, col: 16, offset: 32226},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1145, col: 32, offset: 32242},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1145, col: 48, offset: 32258},
									expr: &ruleRefExpr{
										pos:  position{line: 1145, col: 48, offset: 32258},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1146, col: 5, offset: 32310},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 1146, col: 5, offset: 32310},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1147, col: 5, offset: 32349},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 1147, col: 5, offset: 32349},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1147, col: 5, offset: 32349},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1147, col: 10, offset: 32354},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1147, col: 13, offset: 32357},
										name: "IDGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1149, col: 5, offset: 32448},
						run: (*parser).callonIdentifierName19,
						expr: &litMatcher{
							pos:        position{line: 1149, col: 5, offset: 32448},
							val:        "type",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1150, col: 5, offset: 32490},
						run: (*parser).callonIdentifierName21,
						expr: &seqExpr{
							pos: position{line: 1150, col: 5, offset: 32490},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1150, col: 5, offset: 32490},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1150, col: 8, offset: 32493},
										name: "SQLTokenSentinels",
									},
								},
								&andExpr{
									pos: position{line: 1150, col: 26, offset: 32511},
									expr: &seqExpr{
										pos: position{line: 1150, col: 28, offset: 32513},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1150, col: 28, offset: 32513},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1150, col: 31, offset: 32516},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IDGuard",
			pos:  position{line: 1152, col: 1, offset: 32541},
			expr: &choiceExpr{
				pos: position{line: 1153, col: 5, offset: 32553},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1153, col: 5, offset: 32553},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1154, col: 5, offset: 32572},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "Time",
			pos:  position{line: 1156, col: 1, offset: 32585},
			expr: &actionExpr{
				pos: position{line: 1157, col: 5, offset: 32594},
				run: (*parser).callonTime1,
				expr: &seqExpr{
					pos: position{line: 1157, col: 5, offset: 32594},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1157, col: 5, offset: 32594},
							name: "FullDate",
						},
						&litMatcher{
							pos:        position{line: 1157, col: 14, offset: 32603},
							val:        "T",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1157, col: 18, offset: 32607},
							name: "FullTime",
						},
					},
				},
			},
		},
		{
			name: "FullDate",
			pos:  position{line: 1161, col: 1, offset: 32727},
			expr: &seqExpr{
				pos: position{line: 1161, col: 12, offset: 32738},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1161, col: 12, offset: 32738},
						name: "D4",
					},
					&litMatcher{
						pos:        position{line: 1161, col: 15, offset: 32741},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1161, col: 19, offset: 32745},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1161, col: 22, offset: 32748},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1161, col: 26, offset: 32752},
						name: "D2",
					},
				},
			},
		},
		{
			name: "D4",
			pos:  position{line: 1163, col: 1, offset: 32756},
			expr: &seqExpr{
				pos: position{line: 1163, col: 6, offset: 32761},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1163, col: 6, offset: 32761},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1163, col: 11, offset: 32766},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1163, col: 16, offset: 32771},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1163, col: 21, offset: 32776},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "D2",
			pos:  position{line: 1164, col: 1, offset: 32782},
			expr: &seqExpr{
				pos: position{line: 1164, col: 6, offset: 32787},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1164, col: 6, offset: 32787},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1164, col: 11, offset: 32792},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "FullTime",
			pos:  position{line: 1166, col: 1, offset: 32799},
			expr: &seqExpr{
				pos: position{line: 1166, col: 12, offset: 32810},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1166, col: 12, offset: 32810},
						name: "PartialTime",
					},
					&ruleRefExpr{
						pos:  position{line: 1166, col: 24, offset: 32822},
						name: "TimeOffset",
					},
				},
			},
		},
		{
			name: "PartialTime",
			pos:  position{line: 1168, col: 1, offset: 32834},
			expr: &seqExpr{
				pos: position{line: 1168, col: 15, offset: 32848},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1168, col: 15, offset: 32848},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1168, col: 18, offset: 32851},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1168, col: 22, offset: 32855},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1168, col: 25, offset: 32858},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1168, col: 29, offset: 32862},
						name: "D2",
					},
					&zeroOrOneExpr{
						pos: position{line: 1168, col: 32, offset: 32865},
						expr: &seqExpr{
							pos: position{line: 1168, col: 33, offset: 32866},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1168, col: 33, offset: 32866},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1168, col: 37, offset: 32870},
									expr: &charClassMatcher{
										pos:        position{line: 1168, col: 37, offset: 32870},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeOffset",
			pos:  position{line: 1170, col: 1, offset: 32880},
			expr: &choiceExpr{
				pos: position{line: 1171, col: 5, offset: 32895},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1171, col: 5, offset: 32895},
						val:        "Z",
						ignoreCase: false,
					},
					&seqExpr{
						pos: position{line: 1172, col: 5, offset: 32903},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 1172, col: 6, offset: 32904},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1172, col: 6, offset: 32904},
										val:        "+",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 1172, col: 12, offset: 32910},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1172, col: 17, offset: 32915},
								name: "D2",
							},
							&litMatcher{
								pos:        position{line: 1172, col: 20, offset: 32918},
								val:        ":",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 1172, col: 24, offset: 32922},
								name: "D2",
							},
							&zeroOrOneExpr{
								pos: position{line: 1172, col: 27, offset: 32925},
								expr: &seqExpr{
									pos: position{line: 1172, col: 28, offset: 32926},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1172, col: 28, offset: 32926},
											val:        ".",
											ignoreCase: false,
										},
										&oneOrMoreExpr{
											pos: position{line: 1172, col: 32, offset: 32930},
											expr: &charClassMatcher{
												pos:        position{line: 1172, col: 32, offset: 32930},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 1174, col: 1, offset: 32940},
			expr: &actionExpr{
				pos: position{line: 1175, col: 5, offset: 32953},
				run: (*parser).callonDuration1,
				expr: &seqExpr{
					pos: position{line: 1175, col: 5, offset: 32953},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1175, col: 5, offset: 32953},
							expr: &litMatcher{
								pos:        position{line: 1175, col: 5, offset: 32953},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1175, col: 10, offset: 32958},
							expr: &seqExpr{
								pos: position{line: 1175, col: 11, offset: 32959},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1175, col: 11, offset: 32959},
										name: "Decimal",
									},
									&ruleRefExpr{
										pos:  position{line: 1175, col: 19, offset: 32967},
										name: "TimeUnit",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Decimal",
			pos:  position{line: 1179, col: 1, offset: 33093},
			expr: &seqExpr{
				pos: position{line: 1179, col: 11, offset: 33103},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1179, col: 11, offset: 33103},
						name: "UInt",
					},
					&zeroOrOneExpr{
						pos: position{line: 1179, col: 16, offset: 33108},
						expr: &seqExpr{
							pos: position{line: 1179, col: 17, offset: 33109},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1179, col: 17, offset: 33109},
									val:        ".",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1179, col: 21, offset: 33113},
									name: "UInt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeUnit",
			pos:  position{line: 1181, col: 1, offset: 33121},
			expr: &choiceExpr{
				pos: position{line: 1182, col: 5, offset: 33134},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1182, col: 5, offset: 33134},
						val:        "ns",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1183, col: 5, offset: 33144},
						val:        "us",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1184, col: 5, offset: 33154},
						val:        "ms",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1185, col: 5, offset: 33164},
						val:        "s",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1186, col: 5, offset: 33173},
						val:        "m",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1187, col: 5, offset: 33182},
						val:        "h",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1188, col: 5, offset: 33191},
						val:        "d",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1189, col: 5, offset: 33200},
						val:        "w",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1190, col: 5, offset: 33209},
						val:        "y",
						ignoreCase: true,
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 1192, col: 1, offset: 33215},
			expr: &actionExpr{
				pos: position{line: 1193, col: 5, offset: 33222},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 1193, col: 5, offset: 33222},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1193, col: 5, offset: 33222},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1193, col: 10, offset: 33227},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1193, col: 14, offset: 33231},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1193, col: 19, offset: 33236},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1193, col: 23, offset: 33240},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1193, col: 28, offset: 33245},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1193, col: 32, offset: 33249},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 1195, col: 1, offset: 33286},
			expr: &actionExpr{
				pos: position{line: 1196, col: 5, offset: 33294},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 1196, col: 5, offset: 33294},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1196, col: 5, offset: 33294},
							expr: &seqExpr{
								pos: position{line: 1196, col: 8, offset: 33297},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1196, col: 8, offset: 33297},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 1196, col: 12, offset: 33301},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 1196, col: 16, offset: 33305},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 1196, col: 20, offset: 33309},
										expr: &choiceExpr{
											pos: position{line: 1196, col: 22, offset: 33311},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1196, col: 22, offset: 33311},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 1196, col: 33, offset: 33322},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1196, col: 39, offset: 33328},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1196, col: 41, offset: 33330},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 1200, col: 1, offset: 33494},
			expr: &choiceExpr{
				pos: position{line: 1201, col: 5, offset: 33512},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1201, col: 5, offset: 33512},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 1201, col: 5, offset: 33512},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1201, col: 5, offset: 33512},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 1201, col: 7, offset: 33514},
										expr: &ruleRefExpr{
											pos:  position{line: 1201, col: 7, offset: 33514},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1201, col: 17, offset: 33524},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1201, col: 19, offset: 33526},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1204, col: 5, offset: 33590},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 1204, col: 5, offset: 33590},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1204, col: 5, offset: 33590},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1204, col: 7, offset: 33592},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1204, col: 11, offset: 33596},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1204, col: 13, offset: 33598},
										expr: &ruleRefExpr{
											pos:  position{line: 1204, col: 13, offset: 33598},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1204, col: 23, offset: 33608},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1204, col: 28, offset: 33613},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1204, col: 30, offset: 33615},
										expr: &ruleRefExpr{
											pos:  position{line: 1204, col: 30, offset: 33615},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1204, col: 40, offset: 33625},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 1204, col: 42, offset: 33627},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1207, col: 5, offset: 33726},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 1207, col: 5, offset: 33726},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1207, col: 5, offset: 33726},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1207, col: 10, offset: 33731},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1207, col: 12, offset: 33733},
										expr: &ruleRefExpr{
											pos:  position{line: 1207, col: 12, offset: 33733},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1207, col: 22, offset: 33743},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1207, col: 24, offset: 33745},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1210, col: 5, offset: 33816},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 1210, col: 5, offset: 33816},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1210, col: 5, offset: 33816},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1210, col: 7, offset: 33818},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1210, col: 11, offset: 33822},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1210, col: 13, offset: 33824},
										expr: &ruleRefExpr{
											pos:  position{line: 1210, col: 13, offset: 33824},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1210, col: 23, offset: 33834},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1213, col: 5, offset: 33902},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 1213, col: 5, offset: 33902},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 1217, col: 1, offset: 33939},
			expr: &choiceExpr{
				pos: position{line: 1218, col: 5, offset: 33951},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1218, col: 5, offset: 33951},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 1219, col: 5, offset: 33958},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 1221, col: 1, offset: 33963},
			expr: &actionExpr{
				pos: position{line: 1221, col: 12, offset: 33974},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 1221, col: 12, offset: 33974},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1221, col: 12, offset: 33974},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1221, col: 16, offset: 33978},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1221, col: 18, offset: 33980},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 1223, col: 1, offset: 34018},
			expr: &actionExpr{
				pos: position{line: 1223, col: 12, offset: 34029},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 1223, col: 12, offset: 34029},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1223, col: 12, offset: 34029},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1223, col: 14, offset: 34031},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 1223, col: 18, offset: 34035},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 1225, col: 1, offset: 34073},
			expr: &actionExpr{
				pos: position{line: 1226, col: 5, offset: 34084},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 1226, col: 5, offset: 34084},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1226, col: 5, offset: 34084},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1226, col: 7, offset: 34086},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 1226, col: 10, offset: 34089},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1226, col: 14, offset: 34093},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1226, col: 16, offset: 34095},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 1230, col: 1, offset: 34168},
			expr: &actionExpr{
				pos: position{line: 1231, col: 5, offset: 34179},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 1231, col: 5, offset: 34179},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1231, col: 5, offset: 34179},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1231, col: 7, offset: 34181},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 1231, col: 11, offset: 34185},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1231, col: 15, offset: 34189},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1231, col: 17, offset: 34191},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 1235, col: 1, offset: 34254},
			expr: &actionExpr{
				pos: position{line: 1236, col: 4, offset: 34262},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 1236, col: 4, offset: 34262},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 1236, col: 6, offset: 34264},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 1238, col: 1, offset: 34304},
			expr: &choiceExpr{
				pos: position{line: 1239, col: 5, offset: 34318},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1239, col: 5, offset: 34318},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 1240, col: 5, offset: 34333},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 1242, col: 1, offset: 34349},
			expr: &actionExpr{
				pos: position{line: 1242, col: 14, offset: 34362},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1242, col: 14, offset: 34362},
					expr: &charClassMatcher{
						pos:        position{line: 1242, col: 14, offset: 34362},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 1244, col: 1, offset: 34401},
			expr: &actionExpr{
				pos: position{line: 1245, col: 5, offset: 34420},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 1245, col: 5, offset: 34420},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1245, col: 5, offset: 34420},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1245, col: 9, offset: 34424},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 1247, col: 1, offset: 34467},
			expr: &choiceExpr{
				pos: position{line: 1248, col: 5, offset: 34483},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1248, col: 5, offset: 34483},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 1248, col: 5, offset: 34483},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1248, col: 5, offset: 34483},
									expr: &litMatcher{
										pos:        position{line: 1248, col: 5, offset: 34483},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1248, col: 10, offset: 34488},
									expr: &charClassMatcher{
										pos:        position{line: 1248, col: 10, offset: 34488},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 1248, col: 17, offset: 34495},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1248, col: 21, offset: 34499},
									expr: &charClassMatcher{
										pos:        position{line: 1248, col: 21, offset: 34499},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1248, col: 28, offset: 34506},
									expr: &ruleRefExpr{
										pos:  position{line: 1248, col: 28, offset: 34506},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1251, col: 5, offset: 34565},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 1251, col: 5, offset: 34565},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1251, col: 5, offset: 34565},
									expr: &litMatcher{
										pos:        position{line: 1251, col: 5, offset: 34565},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1251, col: 10, offset: 34570},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1251, col: 14, offset: 34574},
									expr: &charClassMatcher{
										pos:        position{line: 1251, col: 14, offset: 34574},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1251, col: 21, offset: 34581},
									expr: &ruleRefExpr{
										pos:  position{line: 1251, col: 21, offset: 34581},
										name: "ExponentPart",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 1255, col: 1, offset: 34637},
			expr: &seqExpr{
				pos: position{line: 1255, col: 16, offset: 34652},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1255, col: 16, offset: 34652},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 1255, col: 21, offset: 34657},
						expr: &charClassMatcher{
							pos:        position{line: 1255, col: 21, offset: 34657},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1255, col: 27, offset: 34663},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 1257, col: 1, offset: 34675},
			expr: &actionExpr{
				pos: position{line: 1257, col: 7, offset: 34681},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1257, col: 7, offset: 34681},
					expr: &ruleRefExpr{
						pos:  position{line: 1257, col: 7, offset: 34681},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 1259, col: 1, offset: 34723},
			expr: &charClassMatcher{
				pos:        position{line: 1259, col: 12, offset: 34734},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1261, col: 1, offset: 34747},
			expr: &choiceExpr{
				pos: position{line: 1262, col: 5, offset: 34764},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1262, col: 5, offset: 34764},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 1262, col: 5, offset: 34764},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1262, col: 5, offset: 34764},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1262, col: 9, offset: 34768},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1262, col: 11, offset: 34770},
										expr: &ruleRefExpr{
											pos:  position{line: 1262, col: 11, offset: 34770},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1262, col: 29, offset: 34788},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1263, col: 5, offset: 34825},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 1263, col: 5, offset: 34825},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1263, col: 5, offset: 34825},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1263, col: 9, offset: 34829},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1263, col: 11, offset: 34831},
										expr: &ruleRefExpr{
											pos:  position{line: 1263, col: 11, offset: 34831},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1263, col: 29, offset: 34849},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 1265, col: 1, offset: 34883},
			expr: &choiceExpr{
				pos: position{line: 1266, col: 5, offset: 34904},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1266, col: 5, offset: 34904},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1266, col: 5, offset: 34904},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1266, col: 5, offset: 34904},
									expr: &choiceExpr{
										pos: position{line: 1266, col: 7, offset: 34906},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1266, col: 7, offset: 34906},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1266, col: 13, offset: 34912},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1266, col: 26, offset: 34925,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1267, col: 5, offset: 34962},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1267, col: 5, offset: 34962},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1267, col: 5, offset: 34962},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1267, col: 10, offset: 34967},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1267, col: 12, offset: 34969},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 1269, col: 1, offset: 35003},
			expr: &actionExpr{
				pos: position{line: 1270, col: 5, offset: 35015},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 1270, col: 5, offset: 35015},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1270, col: 5, offset: 35015},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1270, col: 10, offset: 35020},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1270, col: 23, offset: 35033},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1270, col: 28, offset: 35038},
								expr: &ruleRefExpr{
									pos:  position{line: 1270, col: 28, offset: 35038},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 1272, col: 1, offset: 35100},
			expr: &choiceExpr{
				pos: position{line: 1273, col: 5, offset: 35117},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1273, col: 5, offset: 35117},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1274, col: 5, offset: 35134},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordChars",
			pos:  position{line: 1276, col: 1, offset: 35146},
			expr: &actionExpr{
				pos: position{line: 1276, col: 16, offset: 35161},
				run: (*parser).callonKeyWordChars1,
				expr: &charClassMatcher{
					pos:        position{line: 1276, col: 16, offset: 35161},
					val:        "[a-zA-Z_.:/%#@~]",
					chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
					ranges:     []rune{'a', 'z', 'A', 'Z'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 1278, col: 1, offset: 35210},
			expr: &choiceExpr{
				pos: position{line: 1279, col: 5, offset: 35226},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1279, col: 5, offset: 35226},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 1280, col: 5, offset: 35243},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 1282, col: 1, offset: 35250},
			expr: &actionExpr{
				pos: position{line: 1282, col: 14, offset: 35263},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 1282, col: 14, offset: 35263},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1282, col: 14, offset: 35263},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1282, col: 19, offset: 35268},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1282, col: 22, offset: 35271},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1282, col: 22, offset: 35271},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1282, col: 38, offset: 35287},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Glob",
			pos:  position{line: 1284, col: 1, offset: 35323},
			expr: &actionExpr{
				pos: position{line: 1285, col: 5, offset: 35332},
				run: (*parser).callonGlob1,
				expr: &seqExpr{
					pos: position{line: 1285, col: 5, offset: 35332},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1285, col: 5, offset: 35332},
							expr: &ruleRefExpr{
								pos:  position{line: 1285, col: 6, offset: 35333},
								name: "GlobProperStart",
							},
						},
						&andExpr{
							pos: position{line: 1285, col: 22, offset: 35349},
							expr: &ruleRefExpr{
								pos:  position{line: 1285, col: 23, offset: 35350},
								name: "GlobHasStar",
							},
						},
						&labeledExpr{
							pos:   position{line: 1285, col: 35, offset: 35362},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1285, col: 40, offset: 35367},
								name: "GlobStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1285, col: 50, offset: 35377},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1285, col: 55, offset: 35382},
								expr: &ruleRefExpr{
									pos:  position{line: 1285, col: 55, offset: 35382},
									name: "GlobRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobProperStart",
			pos:  position{line: 1289, col: 1, offset: 35466},
			expr: &seqExpr{
				pos: position{line: 1289, col: 19, offset: 35484},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1289, col: 19, offset: 35484},
						expr: &litMatcher{
							pos:        position{line: 1289, col: 19, offset: 35484},
							val:        "*",
							ignoreCase: false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1289, col: 24, offset: 35489},
						name: "KeyWordStart",
					},
				},
			},
		},
		{
			name: "GlobHasStar",
			pos:  position{line: 1290, col: 1, offset: 35502},
			expr: &seqExpr{
				pos: position{line: 1290, col: 15, offset: 35516},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1290, col: 15, offset: 35516},
						expr: &ruleRefExpr{
							pos:  position{line: 1290, col: 15, offset: 35516},
							name: "KeyWordRest",
						},
					},
					&litMatcher{
						pos:        position{line: 1290, col: 28, offset: 35529},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "GlobStart",
			pos:  position{line: 1292, col: 1, offset: 35534},
			expr: &choiceExpr{
				pos: position{line: 1293, col: 5, offset: 35548},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1293, col: 5, offset: 35548},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1294, col: 5, offset: 35565},
						name: "GlobEsc",
					},
					&actionExpr{
						pos: position{line: 1295, col: 5, offset: 35577},
						run: (*parser).callonGlobStart4,
						expr: &litMatcher{
							pos:        position{line: 1295, col: 5, offset: 35577},
							val:        "*",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GlobRest",
			pos:  position{line: 1297, col: 1, offset: 35601},
			expr: &choiceExpr{
				pos: position{line: 1298, col: 5, offset: 35614},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1298, col: 5, offset: 35614},
						name: "GlobStart",
					},
					&charClassMatcher{
						pos:        position{line: 1299, col: 5, offset: 35628},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "GlobEsc",
			pos:  position{line: 1301, col: 1, offset: 35635},
			expr: &actionExpr{
				pos: position{line: 1301, col: 11, offset: 35645},
				run: (*parser).callonGlobEsc1,
				expr: &seqExpr{
					pos: position{line: 1301, col: 11, offset: 35645},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1301, col: 11, offset: 35645},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1301, col: 16, offset: 35650},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1301, col: 19, offset: 35653},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1301, col: 19, offset: 35653},
										name: "GlobEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1301, col: 32, offset: 35666},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobEscape",
			pos:  position{line: 1303, col: 1, offset: 35702},
			expr: &choiceExpr{
				pos: position{line: 1304, col: 5, offset: 35717},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1304, col: 5, offset: 35717},
						run: (*parser).callonGlobEscape2,
						expr: &litMatcher{
							pos:        position{line: 1304, col: 5, offset: 35717},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1305, col: 5, offset: 35745},
						run: (*parser).callonGlobEscape4,
						expr: &litMatcher{
							pos:        position{line: 1305, col: 5, offset: 35745},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1306, col: 5, offset: 35775},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 1309, col: 1, offset: 35782},
			expr: &choiceExpr{
				pos: position{line: 1310, col: 5, offset: 35803},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1310, col: 5, offset: 35803},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1310, col: 5, offset: 35803},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1310, col: 5, offset: 35803},
									expr: &choiceExpr{
										pos: position{line: 1310, col: 7, offset: 35805},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1310, col: 7, offset: 35805},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1310, col: 13, offset: 35811},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1310, col: 26, offset: 35824,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1311, col: 5, offset: 35861},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1311, col: 5, offset: 35861},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1311, col: 5, offset: 35861},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1311, col: 10, offset: 35866},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1311, col: 12, offset: 35868},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 1313, col: 1, offset: 35902},
			expr: &choiceExpr{
				pos: position{line: 1314, col: 5, offset: 35921},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1314, col: 5, offset: 35921},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 1315, col: 5, offset: 35942},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 1317, col: 1, offset: 35957},
			expr: &choiceExpr{
				pos: position{line: 1318, col: 5, offset: 35978},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1318, col: 5, offset: 35978},
						val:        "'",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1319, col: 5, offset: 35986},
						run: (*parser).callonSingleCharEscape3,
						expr: &litMatcher{
							pos:        position{line: 1319, col: 5, offset: 35986},
							val:        "\"",
							ignoreCase: false,
						},
					},
					&litMatcher{
						pos:        position{line: 1320, col: 5, offset: 36026},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1321, col: 5, offset: 36035},
						run: (*parser).callonSingleCharEscape6,
						expr: &litMatcher{
							pos:        position{line: 1321, col: 5, offset: 36035},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1322, col: 5, offset: 36064},
						run: (*parser).callonSingleCharEscape8,
						expr: &litMatcher{
							pos:        position{line: 1322, col: 5, offset: 36064},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1323, col: 5, offset: 36093},
						run: (*parser).callonSingleCharEscape10,
						expr: &litMatcher{
							pos:        position{line: 1323, col: 5, offset: 36093},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1324, col: 5, offset: 36122},
						run: (*parser).callonSingleCharEscape12,
						expr: &litMatcher{
							pos:        position{line: 1324, col: 5, offset: 36122},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1325, col: 5, offset: 36151},
						run: (*parser).callonSingleCharEscape14,
						expr: &litMatcher{
							pos:        position{line: 1325, col: 5, offset: 36151},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1326, col: 5, offset: 36180},
						run: (*parser).callonSingleCharEscape16,
						expr: &litMatcher{
							pos:        position{line: 1326, col: 5, offset: 36180},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 1328, col: 1, offset: 36206},
			expr: &choiceExpr{
				pos: position{line: 1329, col: 5, offset: 36224},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1329, col: 5, offset: 36224},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 1329, col: 5, offset: 36224},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1330, col: 5, offset: 36252},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 1330, col: 5, offset: 36252},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1331, col: 5, offset: 36280},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 1333, col: 1, offset: 36286},
			expr: &choiceExpr{
				pos: position{line: 1334, col: 5, offset: 36304},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1334, col: 5, offset: 36304},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 1334, col: 5, offset: 36304},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1334, col: 5, offset: 36304},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1334, col: 9, offset: 36308},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1334, col: 16, offset: 36315},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1334, col: 16, offset: 36315},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1334, col: 25, offset: 36324},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1334, col: 34, offset: 36333},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1334, col: 43, offset: 36342},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1337, col: 5, offset: 36405},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 1337, col: 5, offset: 36405},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1337, col: 5, offset: 36405},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1337, col: 9, offset: 36409},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1337, col: 13, offset: 36413},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1337, col: 20, offset: 36420},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1337, col: 20, offset: 36420},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 1337, col: 29, offset: 36429},
												expr: &ruleRefExpr{
													pos:  position{line: 1337, col: 29, offset: 36429},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1337, col: 39, offset: 36439},
												expr: &ruleRefExpr{
													pos:  position{line: 1337, col: 39, offset: 36439},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1337, col: 49, offset: 36449},
												expr: &ruleRefExpr{
													pos:  position{line: 1337, col: 49, offset: 36449},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1337, col: 59, offset: 36459},
												expr: &ruleRefExpr{
													pos:  position{line: 1337, col: 59, offset: 36459},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1337, col: 69, offset: 36469},
												expr: &ruleRefExpr{
													pos:  position{line: 1337, col: 69, offset: 36469},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1337, col: 80, offset: 36480},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 1341, col: 1, offset: 36534},
			expr: &actionExpr{
				pos: position{line: 1342, col: 5, offset: 36545},
				run: (*parser).callonRegexp1,
				expr: &seqExpr{
					pos: position{line: 1342, col: 5, offset: 36545},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1342, col: 5, offset: 36545},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1342, col: 9, offset: 36549},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1342, col: 14, offset: 36554},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 1342, col: 25, offset: 36565},
							val:        "/",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1342, col: 29, offset: 36569},
							expr: &ruleRefExpr{
								pos:  position{line: 1342, col: 30, offset: 36570},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 1344, col: 1, offset: 36605},
			expr: &actionExpr{
				pos: position{line: 1345, col: 5, offset: 36620},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1345, col: 5, offset: 36620},
					expr: &choiceExpr{
						pos: position{line: 1345, col: 6, offset: 36621},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 1345, col: 6, offset: 36621},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&seqExpr{
								pos: position{line: 1345, col: 15, offset: 36630},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1345, col: 15, offset: 36630},
										val:        "\\",
										ignoreCase: false,
									},
									&anyMatcher{
										line: 1345, col: 20, offset: 36635,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 1347, col: 1, offset: 36671},
			expr: &charClassMatcher{
				pos:        position{line: 1348, col: 5, offset: 36687},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 1350, col: 1, offset: 36702},
			expr: &oneOrMoreExpr{
				pos: position{line: 1350, col: 6, offset: 36707},
				expr: &ruleRefExpr{
					pos:  position{line: 1350, col: 6, offset: 36707},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1352, col: 1, offset: 36718},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1352, col: 6, offset: 36723},
				expr: &ruleRefExpr{
					pos:  position{line: 1352, col: 6, offset: 36723},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 1354, col: 1, offset: 36734},
			expr: &choiceExpr{
				pos: position{line: 1355, col: 5, offset: 36747},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1355, col: 5, offset: 36747},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 1356, col: 5, offset: 36762},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 1357, col: 5, offset: 36781},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 1359, col: 1, offset: 36790},
			expr: &anyMatcher{
				line: 1360, col: 5, offset: 36810,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 1362, col: 1, offset: 36813},
			expr: &choiceExpr{
				pos: position{line: 1363, col: 5, offset: 36841},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1363, col: 5, offset: 36841},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1364, col: 5, offset: 36850},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1365, col: 5, offset: 36859},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1366, col: 5, offset: 36868},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1367, col: 5, offset: 36876},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1368, col: 5, offset: 36889},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 1370, col: 1, offset: 36899},
			expr: &charClassMatcher{
				pos:        position{line: 1371, col: 5, offset: 36918},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 1377, col: 1, offset: 37248},
			expr: &ruleRefExpr{
				pos:  position{line: 1380, col: 5, offset: 37319},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1382, col: 1, offset: 37338},
			expr: &seqExpr{
				pos: position{line: 1383, col: 5, offset: 37359},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1383, col: 5, offset: 37359},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1383, col: 10, offset: 37364},
						expr: &seqExpr{
							pos: position{line: 1383, col: 11, offset: 37365},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1383, col: 11, offset: 37365},
									expr: &litMatcher{
										pos:        position{line: 1383, col: 12, offset: 37366},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1383, col: 17, offset: 37371},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1383, col: 35, offset: 37389},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1385, col: 1, offset: 37395},
			expr: &seqExpr{
				pos: position{line: 1386, col: 5, offset: 37417},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1386, col: 5, offset: 37417},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1386, col: 10, offset: 37422},
						expr: &seqExpr{
							pos: position{line: 1386, col: 11, offset: 37423},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1386, col: 11, offset: 37423},
									expr: &ruleRefExpr{
										pos:  position{line: 1386, col: 12, offset: 37424},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1386, col: 27, offset: 37439},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1388, col: 1, offset: 37458},
			expr: &seqExpr{
				pos: position{line: 1388, col: 7, offset: 37464},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1388, col: 7, offset: 37464},
						expr: &ruleRefExpr{
							pos:  position{line: 1388, col: 7, offset: 37464},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1388, col: 19, offset: 37476},
						name: "LineTerminator",
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 1390, col: 1, offset: 37492},
			expr: &choiceExpr{
				pos: position{line: 1390, col: 7, offset: 37498},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1390, col: 7, offset: 37498},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 1390, col: 11, offset: 37502},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1392, col: 1, offset: 37507},
			expr: &notExpr{
				pos: position{line: 1392, col: 7, offset: 37513},
				expr: &anyMatcher{
					line: 1392, col: 8, offset: 37514,
				},
			},
		},
	},
}

func (c *current) onstart1(ast interface{}) (interface{}, error) {
	return ast, nil
}

func (p *parser) callonstart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart1(stack["ast"])
}

func (c *current) onSequential2(consts, first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": append([]interface{}{first}, (rest.([]interface{}))...), "consts": consts}, nil

}

func (p *parser) callonSequential2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential2(stack["consts"], stack["first"], stack["rest"])
}

func (c *current) onSequential12(consts, op interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": []interface{}{op}, "consts": consts}, nil

}

func (p *parser) callonSequential12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential12(stack["consts"], stack["op"])
}

func (c *current) onSequentialTail1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonSequentialTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequentialTail1(stack["p"])
}

func (c *current) onConsts4() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonConsts4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConsts4()
}

func (c *current) onConst1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonConst1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConst1(stack["v"])
}

func (c *current) onConstDef2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"name": id, "expr": expr}, nil

}

func (p *parser) callonConstDef2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDef2(stack["id"], stack["expr"])
}

func (c *current) onConstDef13(id, typ interface{}) (interface{}, error) {
	return map[string]interface{}{

		"name": id,

		"expr": map[string]interface{}{"kind": "TypeValue", "value": map[string]interface{}{"kind": "TypeDef", "name": id, "type": typ}}}, nil

}

func (p *parser) callonConstDef13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstDef13(stack["id"], stack["typ"])
}

func (c *current) onOperation2(procArray interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Parallel", "procs": procArray}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["procArray"])
}

func (c *current) onOperation12(expr, cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": expr, "cases": cases}, nil

}

func (p *parser) callonOperation12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation12(stack["expr"], stack["cases"])
}

func (c *current) onOperation25(cases interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "expr": nil, "cases": cases}, nil

}

func (p *parser) callonOperation25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation25(stack["cases"])
}

func (c *current) onOperation35(trunks interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": trunks}, nil

}

func (p *parser) callonOperation35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation35(stack["trunks"])
}

func (c *current) onOperation47(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonOperation47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation47(stack["f"])
}

func (c *current) onOperation53(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation53(stack["a"])
}

func (c *current) onOperation59(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation59(stack["a"])
}

func (c *current) onOperation65(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Filter", "expr": expr}, nil

}

func (p *parser) callonOperation65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation65(stack["expr"])
}

func (c *current) onSplitLeg1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSplitLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSplitLeg1(stack["s"])
}

func (c *current) onSwitchLeg1(expr, proc interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": expr, "proc": proc}, nil

}

func (p *parser) callonSwitchLeg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchLeg1(stack["expr"], stack["proc"])
}

func (c *current) onCase2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonCase2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase2(stack["expr"])
}

func (c *current) onCase8() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonCase8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCase8()
}

func (c *current) onFromLeg2(source, seq interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Trunk", "source": source, "seq": seq}, nil

}

func (p *parser) callonFromLeg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromLeg2(stack["source"], stack["seq"])
}

func (c *current) onFromLeg10(source interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Trunk", "source": source, "seq": nil}, nil

}

func (p *parser) callonFromLeg10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromLeg10(stack["source"])
}

func (c *current) onFromHead1(src interface{}) (interface{}, error) {
	return src, nil
}

func (p *parser) callonFromHead1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromHead1(stack["src"])
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor13(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor13(stack["expr"])
}

func (c *current) onSearchExpr2(search interface{}) (interface{}, error) {
	return search, nil
}

func (p *parser) callonSearchExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr2(stack["search"])
}

func (c *current) onSearchExpr5(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Search", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonSearchExpr5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr5(stack["v"])
}

func (c *current) onSearchExpr11() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil

}

func (p *parser) callonSearchExpr11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr11()
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onPatternSearch1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RegexpSearch", "pattern": pattern}, nil

}

func (p *parser) callonPatternSearch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternSearch1(stack["pattern"])
}

func (c *current) onPatternMatch1(f, pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RegexpMatch", "pattern": pattern, "expr": f}, nil

}

func (p *parser) callonPatternMatch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternMatch1(stack["f"], stack["pattern"])
}

func (c *current) onAggregation2(keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Summarize", "keys": keys, "aggs": nil, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["keys"], stack["limit"])
}

func (c *current) onAggregation10(aggs, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"kind": "Summarize", "keys": nil, "aggs": aggs, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation10(stack["aggs"], stack["keys"], stack["limit"])
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAggAssignment2(lval, agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lval, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment2(stack["lval"], stack["agg"])
}

func (c *current) onAggAssignment11(agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment11(stack["agg"])
}

func (c *current) onAgg1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"kind": "Agg", "name": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonAgg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAgg1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onAggAssignments1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonAggAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSortProc8(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc8(stack["l"])
}

func (c *current) onSortProc1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var proc = map[string]interface{}{"kind": "Sort", "args": list, "order": "asc", "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		proc["order"] = "desc"
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			proc["nullsfirst"] = true
		}
	}
	return proc, nil

}

func (p *parser) callonSortProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopProc6(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopProc6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc6(stack["n"])
}

func (c *current) onTopProc18(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopProc18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc18(stack["f"])
}

func (c *current) onTopProc1(limit, flush, fields interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Top", "limit": 0, "args": nil, "flush": false}
	if limit != nil {
		proc["limit"] = limit
	}
	if fields != nil {
		proc["args"] = fields
	}
	if flush != nil {
		proc["flush"] = true
	}
	return proc, nil

}

func (p *parser) callonTopProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cut", "args": args}, nil

}

func (p *parser) callonCutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutProc1(stack["args"])
}

func (c *current) onDropProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Drop", "args": args}, nil

}

func (p *parser) callonDropProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropProc1(stack["args"])
}

func (c *current) onHeadProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": count}, nil
}

func (p *parser) callonHeadProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc2(stack["count"])
}

func (c *current) onHeadProc8() (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": 1}, nil
}

func (p *parser) callonHeadProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc8()
}

func (c *current) onTailProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": count}, nil
}

func (p *parser) callonTailProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc2(stack["count"])
}

func (c *current) onTailProc8() (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": 1}, nil
}

func (p *parser) callonTailProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc8()
}

func (c *current) onFilterProc1(op interface{}) (interface{}, error) {
	return op, nil

}

func (p *parser) callonFilterProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilterProc1(stack["op"])
}

func (c *current) onFilter1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Filter", "expr": expr}, nil

}

func (p *parser) callonFilter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilter1(stack["expr"])
}

func (c *current) onUniqProc2() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": true}, nil

}

func (p *parser) callonUniqProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc2()
}

func (c *current) onUniqProc7() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": false}, nil

}

func (p *parser) callonUniqProc7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc7()
}

func (c *current) onPutProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Put", "args": args}, nil

}

func (p *parser) callonPutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutProc1(stack["args"])
}

func (c *current) onRenameProc9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameProc9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc9(stack["cl"])
}

func (c *current) onRenameProc1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Rename", "args": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc1(stack["first"], stack["rest"])
}

func (c *current) onFuseProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Fuse"}, nil

}

func (p *parser) callonFuseProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseProc1()
}

func (c *current) onShapeProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Shape"}, nil

}

func (p *parser) callonShapeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShapeProc1()
}

func (c *current) onJoinProc2(style, leftKey, rightKey, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Join", "style": style, "left_key": leftKey, "right_key": rightKey, "args": nil}
	if columns != nil {
		proc["args"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc2(stack["style"], stack["leftKey"], stack["rightKey"], stack["columns"])
}

func (c *current) onJoinProc22(style, key, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Join", "style": style, "left_key": key, "right_key": key, "args": nil}
	if columns != nil {
		proc["args"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc22(stack["style"], stack["key"], stack["columns"])
}

func (c *current) onJoinStyle2() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle2()
}

func (c *current) onJoinStyle6() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle6()
}

func (c *current) onJoinStyle10() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle10()
}

func (c *current) onJoinStyle14() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonJoinStyle14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle14()
}

func (c *current) onJoinStyle18() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle18()
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onSampleProc1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "consts": []interface{}{}, "procs": []interface{}{

		map[string]interface{}{"kind": "Summarize",

			"keys": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "shape"},

				"rhs": map[string]interface{}{"kind": "Call", "name": "typeof",

					"args": []interface{}{e},

					"where": nil}}},

			"aggs": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "sample"},

				"rhs": map[string]interface{}{"kind": "Agg",

					"name": "any",

					"expr": e,

					"where": nil}}},

			"limit": 0},

		map[string]interface{}{"kind": "Cut",

			"args": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": nil,

				"rhs": map[string]interface{}{"kind": "ID", "name": "sample"}}}}}}, nil

}

func (p *parser) callonSampleProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleProc1(stack["e"])
}

func (c *current) onOpAssignment1(a interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "OpAssignment", "assignments": a}, nil

}

func (p *parser) callonOpAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpAssignment1(stack["a"])
}

func (c *current) onSampleExpr2(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonSampleExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr2(stack["lval"])
}

func (c *current) onSampleExpr7() (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": "this"}, nil
}

func (p *parser) callonSampleExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr7()
}

func (c *current) onFromProc1(source interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "From", "trunks": []interface{}{map[string]interface{}{"kind": "Trunk", "source": source}}}, nil

}

func (p *parser) callonFromProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromProc1(stack["source"])
}

func (c *current) onFile1(path, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "File", "path": path, "format": format, "layout": layout}, nil

}

func (p *parser) callonFile1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile1(stack["path"], stack["format"], stack["layout"])
}

func (c *current) onFrom1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonFrom1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFrom1(stack["body"])
}

func (c *current) onPool1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonPool1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPool1(stack["body"])
}

func (c *current) onPoolBody1(spec, at, over, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pool", "spec": spec, "at": at, "range": over, "scan_order": order}, nil

}

func (p *parser) callonPoolBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolBody1(stack["spec"], stack["at"], stack["over"], stack["order"])
}

func (c *current) onGet1(url, format, layout interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "HTTP", "url": url, "format": format, "layout": layout}, nil

}

func (p *parser) callonGet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGet1(stack["url"], stack["format"], stack["layout"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onPath2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonPath2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath2(stack["v"])
}

func (c *current) onPath5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPath5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPath5()
}

func (c *current) onPoolAt1(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonPoolAt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolAt1(stack["id"])
}

func (c *current) onKSUID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKSUID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKSUID1()
}

func (c *current) onPoolRange1(lower, upper interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Range", "lower": lower, "upper": upper}, nil

}

func (p *parser) callonPoolRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolRange1(stack["lower"], stack["upper"])
}

func (c *current) onPoolSpec2(pool, commit, meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": pool, "commit": commit, "meta": meta}, nil

}

func (p *parser) callonPoolSpec2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec2(stack["pool"], stack["commit"], stack["meta"])
}

func (c *current) onPoolSpec12(meta interface{}) (interface{}, error) {
	return map[string]interface{}{"pool": nil, "commit": nil, "meta": meta}, nil

}

func (p *parser) callonPoolSpec12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolSpec12(stack["meta"])
}

func (c *current) onPoolCommit1(commit interface{}) (interface{}, error) {
	return commit, nil
}

func (p *parser) callonPoolCommit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolCommit1(stack["commit"])
}

func (c *current) onPoolMeta1(meta interface{}) (interface{}, error) {
	return meta, nil
}

func (p *parser) callonPoolMeta1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolMeta1(stack["meta"])
}

func (c *current) onPoolIdentifier1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPoolIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPoolIdentifier1()
}

func (c *current) onLayoutArg1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Layout", "keys": keys, "order": order}, nil

}

func (p *parser) callonLayoutArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLayoutArg1(stack["keys"], stack["order"])
}

func (c *current) onFormatArg1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonFormatArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFormatArg1(stack["val"])
}

func (c *current) onOrderSuffix2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix2()
}

func (c *current) onOrderSuffix4() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderSuffix4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix4()
}

func (c *current) onOrderSuffix6() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderSuffix6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderSuffix6()
}

func (c *current) onOrderArg2() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonOrderArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg2()
}

func (c *current) onOrderArg8() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonOrderArg8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderArg8()
}

func (c *current) onPassProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Pass"}, nil

}

func (p *parser) callonPassProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassProc1()
}

func (c *current) onExplodeProc1(args, typ, as interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Explode", "args": args, "as": as, "type": typ}, nil

}

func (p *parser) callonExplodeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplodeProc1(stack["args"], stack["typ"], stack["as"])
}

func (c *current) onMergeProc1(field interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Merge", "field": field}, nil

}

func (p *parser) callonMergeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMergeProc1(stack["field"])
}

func (c *current) onOverProc2(over interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Let", "locals": nil, "over": over}, nil

}

func (p *parser) callonOverProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverProc2(stack["over"])
}

func (c *current) onOverProc5(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Over", "exprs": exprs, "scope": nil, "as": ""}, nil

}

func (p *parser) callonOverProc5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverProc5(stack["exprs"])
}

func (c *current) onScopedOver1(exprs, as, scope interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Over", "exprs": exprs, "scope": scope, "as": as}, nil

}

func (p *parser) callonScopedOver1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScopedOver1(stack["exprs"], stack["as"], stack["scope"])
}

func (c *current) onOverWith1(exprs, locals, scope interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Let", "locals": locals, "over": map[string]interface{}{"kind": "Over", "exprs": exprs, "scope": scope, "as": ""}}, nil

}

func (p *parser) callonOverWith1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOverWith1(stack["exprs"], stack["locals"], stack["scope"])
}

func (c *current) onAs2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonAs2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAs2(stack["id"])
}

func (c *current) onAs9() (interface{}, error) {
	return "", nil
}

func (p *parser) callonAs9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAs9()
}

func (c *current) onLetProc2(locals, over interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Let", "locals": locals, "over": over}, nil

}

func (p *parser) callonLetProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetProc2(stack["locals"], stack["over"])
}

func (c *current) onScope1(seq interface{}) (interface{}, error) {
	return seq, nil
}

func (p *parser) callonScope1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScope1(stack["seq"])
}

func (c *current) onLetAssignments7(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonLetAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetAssignments7(stack["a"])
}

func (c *current) onLetAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLetAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetAssignments1(stack["first"], stack["rest"])
}

func (c *current) onLetAssignment1(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"name": id, "expr": expr}, nil

}

func (p *parser) callonLetAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetAssignment1(stack["id"], stack["expr"])
}

func (c *current) onYieldProc1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Yield", "exprs": exprs}, nil

}

func (p *parser) callonYieldProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYieldProc1(stack["exprs"])
}

func (c *current) onTypeArg1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeArg1(stack["typ"])
}

func (c *current) onAsArg1(lhs interface{}) (interface{}, error) {
	return lhs, nil
}

func (p *parser) callonAsArg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsArg1(stack["lhs"])
}

func (c *current) onLvals7(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonLvals7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals7(stack["lval"])
}

func (c *current) onLvals1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonLvals1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLvals1(stack["first"], stack["rest"])
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignments7(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments7(stack["a"])
}

func (c *current) onAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr2(condition, thenClause, elseClause interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Conditional", "cond": condition, "then": thenClause, "else": elseClause}, nil

}

func (p *parser) callonConditionalExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr2(stack["condition"], stack["thenClause"], stack["elseClause"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onEqualityCompareExpr9(comp, expr interface{}) (interface{}, error) {
	return []interface{}{comp, expr}, nil
}

func (p *parser) callonEqualityCompareExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr9(stack["comp"], stack["expr"])
}

func (c *current) onEqualityCompareExpr3(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonEqualityCompareExpr3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr3(stack["first"], stack["rest"])
}

func (c *current) onEqualityOperator2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonEqualityOperator2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator2()
}

func (c *current) onEqualityOperator4() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityOperator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator4()
}

func (c *current) onEqualityComparator3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityComparator3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityComparator3()
}

func (c *current) onRelativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonRelativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onRelativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonRelativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onRelativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeOperator1()
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onFuncExpr3(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr3(stack["first"], stack["rest"])
}

func (c *current) onFuncExpr10(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr10(stack["first"], stack["rest"])
}

func (c *current) onMatchExpr1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonMatchExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchExpr1(stack["expr"])
}

func (c *current) onCast1(typ, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": expr, "type": typ}, nil

}

func (p *parser) callonCast1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCast1(stack["typ"], stack["expr"])
}

func (c *current) onFunction1(fn, args, where interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": fn, "args": args, "where": where}, nil

}

func (p *parser) callonFunction1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction1(stack["fn"], stack["args"], stack["where"])
}

func (c *current) onOptionalExprs3() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonOptionalExprs3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalExprs3()
}

func (c *current) onExprs7(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonExprs7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs7(stack["e"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonDerefExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr1(stack["e"])
}

func (c *current) onDerefExprPattern2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExprPattern2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExprPattern2(stack["first"], stack["rest"])
}

func (c *current) onDerefExprPattern9(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExprPattern9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExprPattern9(stack["first"], stack["rest"])
}

func (c *current) onDerefExprPattern16(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExprPattern16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExprPattern16(stack["first"], stack["rest"])
}

func (c *current) onDerefExprPattern23() (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": "this"}, nil

}

func (p *parser) callonDerefExprPattern23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExprPattern23()
}

func (c *current) onThis1() (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": "this"}, nil
}

func (p *parser) callonThis1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThis1()
}

func (c *current) onDotID2(field interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": ".",

		"lhs": map[string]interface{}{"kind": "ID", "name": "this"},

		"rhs": field}, nil

}

func (p *parser) callonDotID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotID2(stack["field"])
}

func (c *current) onDotID7(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": "[",

		"lhs": map[string]interface{}{"kind": "ID", "name": "this"},

		"rhs": expr}, nil

}

func (p *parser) callonDotID7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotID7(stack["expr"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref13(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": nil, "rhs": to}}, nil

}

func (p *parser) callonDeref13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref13(stack["to"])
}

func (c *current) onDeref22(from interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": nil}}, nil

}

func (p *parser) callonDeref22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref22(stack["from"])
}

func (c *current) onDeref31(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref31(stack["expr"])
}

func (c *current) onDeref37(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref37(stack["id"])
}

func (c *current) onPrimary7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary7(stack["expr"])
}

func (c *current) onRecord2(expr, fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RecordExpr", "fields": fields, "with": expr}, nil

}

func (p *parser) callonRecord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecord2(stack["expr"], stack["fields"])
}

func (c *current) onRecord15(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RecordExpr", "fields": fields, "with": nil}, nil

}

func (p *parser) callonRecord15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecord15(stack["fields"])
}

func (c *current) onFields2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFields2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFields2(stack["first"], stack["rest"])
}

func (c *current) onFields9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonFields9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFields9()
}

func (c *current) onFieldTail1(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonFieldTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldTail1(stack["f"])
}

func (c *current) onField1(name, value interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "value": value}, nil

}

func (p *parser) callonField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField1(stack["name"], stack["value"])
}

func (c *current) onArray1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ArrayExpr", "exprs": exprs}, nil

}

func (p *parser) callonArray1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArray1(stack["exprs"])
}

func (c *current) onSet1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SetExpr", "exprs": exprs}, nil

}

func (p *parser) callonSet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSet1(stack["exprs"])
}

func (c *current) onMap1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "MapExpr", "entries": exprs}, nil

}

func (p *parser) callonMap1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMap1(stack["exprs"])
}

func (c *current) onEntries2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonEntries2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries2(stack["first"], stack["rest"])
}

func (c *current) onEntries9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonEntries9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries9()
}

func (c *current) onEntryTail1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonEntryTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntryTail1(stack["e"])
}

func (c *current) onEntry1(key, value interface{}) (interface{}, error) {
	return map[string]interface{}{"key": key, "value": value}, nil

}

func (p *parser) callonEntry1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntry1(stack["key"], stack["value"])
}

func (c *current) onSQLProc1(selection, from, joins, where, groupby, having, orderby, limit interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "SQLExpr",

		"select": selection,

		"from": from,

		"joins": joins,

		"where": where,

		"group_by": groupby,

		"having": having,

		"order_by": orderby,

		"limit": limit}, nil

}

func (p *parser) callonSQLProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLProc1(stack["selection"], stack["from"], stack["joins"], stack["where"], stack["groupby"], stack["having"], stack["orderby"], stack["limit"])
}

func (c *current) onSQLSelect2() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLSelect2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect2()
}

func (c *current) onSQLSelect7(assignments interface{}) (interface{}, error) {
	return assignments, nil
}

func (p *parser) callonSQLSelect7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect7(stack["assignments"])
}

func (c *current) onSQLAssignment2(rhs, lhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonSQLAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment2(stack["rhs"], stack["lhs"])
}

func (c *current) onSQLAssignment11(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonSQLAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment11(stack["expr"])
}

func (c *current) onSQLAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments7(stack["expr"])
}

func (c *current) onSQLAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSQLFrom2(table, alias interface{}) (interface{}, error) {
	return map[string]interface{}{"table": table, "alias": alias}, nil

}

func (p *parser) callonSQLFrom2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom2(stack["table"], stack["alias"])
}

func (c *current) onSQLFrom12() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLFrom12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom12()
}

func (c *current) onSQLAlias2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias2(stack["id"])
}

func (c *current) onSQLAlias9(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias9(stack["id"])
}

func (c *current) onSQLJoins7(join interface{}) (interface{}, error) {
	return join, nil
}

func (p *parser) callonSQLJoins7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins7(stack["join"])
}

func (c *current) onSQLJoins1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLJoins1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins1(stack["first"], stack["rest"])
}

func (c *current) onSQLJoin1(style, table, alias, leftKey, rightKey interface{}) (interface{}, error) {
	return map[string]interface{}{

		"table": table,

		"style": style,

		"left_key": leftKey,

		"right_key": rightKey,

		"alias": alias}, nil

}

func (p *parser) callonSQLJoin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoin1(stack["style"], stack["table"], stack["alias"], stack["leftKey"], stack["rightKey"])
}

func (c *current) onSQLJoinStyle2(style interface{}) (interface{}, error) {
	return style, nil
}

func (p *parser) callonSQLJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle2(stack["style"])
}

func (c *current) onSQLJoinStyle11() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonSQLJoinStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle11()
}

func (c *current) onSQLWhere1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLWhere1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLWhere1(stack["expr"])
}

func (c *current) onSQLGroupBy1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonSQLGroupBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLGroupBy1(stack["columns"])
}

func (c *current) onSQLHaving1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLHaving1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLHaving1(stack["expr"])
}

func (c *current) onSQLOrderBy1(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SQLOrderBy", "keys": keys, "order": order}, nil

}

func (p *parser) callonSQLOrderBy1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrderBy1(stack["keys"], stack["order"])
}

func (c *current) onSQLOrder2(dir interface{}) (interface{}, error) {
	return dir, nil
}

func (p *parser) callonSQLOrder2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder2(stack["dir"])
}

func (c *current) onSQLOrder9() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonSQLOrder9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder9()
}

func (c *current) onSQLLimit2(count interface{}) (interface{}, error) {
	return count, nil
}

func (p *parser) callonSQLLimit2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit2(stack["count"])
}

func (c *current) onSQLLimit9() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonSQLLimit9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit9()
}

func (c *current) onSELECT1() (interface{}, error) {
	return "select", nil
}

func (p *parser) callonSELECT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSELECT1()
}

func (c *current) onAS1() (interface{}, error) {
	return "as", nil
}

func (p *parser) callonAS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAS1()
}

func (c *current) onFROM1() (interface{}, error) {
	return "from", nil
}

func (p *parser) callonFROM1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFROM1()
}

func (c *current) onJOIN1() (interface{}, error) {
	return "join", nil
}

func (p *parser) callonJOIN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJOIN1()
}

func (c *current) onWHERE1() (interface{}, error) {
	return "where", nil
}

func (p *parser) callonWHERE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWHERE1()
}

func (c *current) onGROUP1() (interface{}, error) {
	return "group", nil
}

func (p *parser) callonGROUP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGROUP1()
}

func (c *current) onHAVING1() (interface{}, error) {
	return "having", nil
}

func (p *parser) callonHAVING1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHAVING1()
}

func (c *current) onORDER1() (interface{}, error) {
	return "order", nil
}

func (p *parser) callonORDER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onORDER1()
}

func (c *current) onON1() (interface{}, error) {
	return "on", nil
}

func (p *parser) callonON1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onON1()
}

func (c *current) onLIMIT1() (interface{}, error) {
	return "limit", nil
}

func (p *parser) callonLIMIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIMIT1()
}

func (c *current) onASC1() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonASC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onASC1()
}

func (c *current) onDESC1() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonDESC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDESC1()
}

func (c *current) onANTI1() (interface{}, error) {
	return "anti", nil
}

func (p *parser) callonANTI1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onANTI1()
}

func (c *current) onLEFT1() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonLEFT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLEFT1()
}

func (c *current) onRIGHT1() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonRIGHT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRIGHT1()
}

func (c *current) onINNER1() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonINNER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINNER1()
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "float64", "text": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "int64", "text": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "null", "text": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onBytesLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bytes", "text": string(c.text)}, nil

}

func (p *parser) callonBytesLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBytesLiteral1()
}

func (c *current) onTypeLiteral1(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonTypeLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeLiteral1(stack["typ"])
}

func (c *current) onAmbiguousType2(name interface{}) (interface{}, error) {
	return name, nil
}

func (p *parser) callonAmbiguousType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType2(stack["name"])
}

func (c *current) onAmbiguousType8(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeDef", "name": name, "type": typ}, nil

}

func (p *parser) callonAmbiguousType8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType8(stack["name"], stack["typ"])
}

func (c *current) onAmbiguousType21(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType21(stack["name"])
}

func (c *current) onAmbiguousType24(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonAmbiguousType24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType24(stack["u"])
}

func (c *current) onTypeUnion1(types interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeUnion", "types": types}, nil

}

func (p *parser) callonTypeUnion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeUnion1(stack["types"])
}

func (c *current) onTypeList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeList1(stack["first"], stack["rest"])
}

func (c *current) onTypeListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeListTail1(stack["typ"])
}

func (c *current) onComplexType2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType2(stack["fields"])
}

func (c *current) onComplexType10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexType10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType10(stack["typ"])
}

func (c *current) onComplexType18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexType18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType18(stack["typ"])
}

func (c *current) onComplexType26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexType26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType26(stack["keyType"], stack["valType"])
}

func (c *current) onTemplateLiteral1(v interface{}) (interface{}, error) {
	if v == nil {
		return map[string]interface{}{"kind": "Primitive", "type": "string", "text": ""}, nil
	}
	return makeTemplateExprChain(v), nil

}

func (p *parser) callonTemplateLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteral1(stack["v"])
}

func (c *current) onTemplateLiteralParts2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts2(stack["v"])
}

func (c *current) onTemplateLiteralParts9(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateLiteralParts9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateLiteralParts9(stack["v"])
}

func (c *current) onTemplateDoubleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateDoubleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedPart3(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar2(stack["v"])
}

func (c *current) onTemplateDoubleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateDoubleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateDoubleQuotedChar7(stack["v"])
}

func (c *current) onTemplateSingleQuotedPart3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": joinChars(v)}, nil

}

func (p *parser) callonTemplateSingleQuotedPart3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedPart3(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar2(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar2(stack["v"])
}

func (c *current) onTemplateSingleQuotedChar7(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonTemplateSingleQuotedChar7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateSingleQuotedChar7(stack["v"])
}

func (c *current) onTemplateExpr1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonTemplateExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTemplateExpr1(stack["e"])
}

func (c *current) onPrimitiveType1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveType1()
}

func (c *current) onTypeFieldList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList1(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTail1(stack["typ"])
}

func (c *current) onTypeField1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeField1(stack["name"], stack["typ"])
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return "in", nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onIdentifierName19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName19()
}

func (c *current) onIdentifierName21(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName21(stack["id"])
}

func (c *current) onTime1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "time", "text": string(c.text)}, nil

}

func (p *parser) callonTime1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTime1()
}

func (c *current) onDuration1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "duration", "text": string(c.text)}, nil

}

func (p *parser) callonDuration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDuration1()
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordChars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordChars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordChars1()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onGlob1(head, tail interface{}) (interface{}, error) {
	return reglob.Reglob(head.(string) + joinChars(tail)), nil

}

func (p *parser) callonGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlob1(stack["head"], stack["tail"])
}

func (c *current) onGlobStart4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonGlobStart4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobStart4()
}

func (c *current) onGlobEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonGlobEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEsc1(stack["s"])
}

func (c *current) onGlobEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonGlobEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape2()
}

func (c *current) onGlobEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonGlobEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape4()
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onSingleCharEscape3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleCharEscape3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape3()
}

func (c *current) onSingleCharEscape6() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape6()
}

func (c *current) onSingleCharEscape8() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape8()
}

func (c *current) onSingleCharEscape10() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape10()
}

func (c *current) onSingleCharEscape12() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape12()
}

func (c *current) onSingleCharEscape14() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape14()
}

func (c *current) onSingleCharEscape16() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape16()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexp1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
