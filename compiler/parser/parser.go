// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/brimdata/zed/reglob"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 7, col: 1, offset: 26},
			expr: &actionExpr{
				pos: position{line: 7, col: 9, offset: 34},
				run: (*parser).callonstart1,
				expr: &seqExpr{
					pos: position{line: 7, col: 9, offset: 34},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 7, col: 9, offset: 34},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 7, col: 12, offset: 37},
							label: "ast",
							expr: &ruleRefExpr{
								pos:  position{line: 7, col: 16, offset: 41},
								name: "Z",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 18, offset: 43},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 21, offset: 46},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Z",
			pos:  position{line: 13, col: 1, offset: 353},
			expr: &choiceExpr{
				pos: position{line: 14, col: 5, offset: 433},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 14, col: 5, offset: 433},
						run: (*parser).callonZ2,
						expr: &seqExpr{
							pos: position{line: 14, col: 5, offset: 433},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 14, col: 5, offset: 433},
									label: "decls",
									expr: &oneOrMoreExpr{
										pos: position{line: 14, col: 11, offset: 439},
										expr: &ruleRefExpr{
											pos:  position{line: 14, col: 11, offset: 439},
											name: "Decl",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 14, col: 17, offset: 445},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 14, col: 20, offset: 448},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 14, col: 26, offset: 454},
										name: "Operation",
									},
								},
								&labeledExpr{
									pos:   position{line: 14, col: 36, offset: 464},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 14, col: 41, offset: 469},
										expr: &ruleRefExpr{
											pos:  position{line: 14, col: 41, offset: 469},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 22, col: 5, offset: 742},
						name: "Sequential",
					},
				},
			},
		},
		{
			name: "Decl",
			pos:  position{line: 24, col: 1, offset: 754},
			expr: &actionExpr{
				pos: position{line: 24, col: 8, offset: 761},
				run: (*parser).callonDecl1,
				expr: &seqExpr{
					pos: position{line: 24, col: 8, offset: 761},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 24, col: 8, offset: 761},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 24, col: 11, offset: 764},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 24, col: 13, offset: 766},
								name: "AnyDecl",
							},
						},
					},
				},
			},
		},
		{
			name: "AnyDecl",
			pos:  position{line: 26, col: 1, offset: 793},
			expr: &choiceExpr{
				pos: position{line: 27, col: 5, offset: 805},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 27, col: 5, offset: 805},
						run: (*parser).callonAnyDecl2,
						expr: &seqExpr{
							pos: position{line: 27, col: 5, offset: 805},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 27, col: 5, offset: 805},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 13, offset: 813},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 15, offset: 815},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 18, offset: 818},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 33, offset: 833},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 27, col: 36, offset: 836},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 40, offset: 840},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 43, offset: 843},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 48, offset: 848},
										name: "Expr",
									},
								},
								&choiceExpr{
									pos: position{line: 27, col: 55, offset: 855},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 27, col: 55, offset: 855},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 27, col: 55, offset: 855},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 27, col: 58, offset: 858},
													val:        ";",
													ignoreCase: false,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 27, col: 64, offset: 864},
											name: "EOL",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 30, col: 5, offset: 962},
						run: (*parser).callonAnyDecl18,
						expr: &seqExpr{
							pos: position{line: 30, col: 5, offset: 962},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 30, col: 5, offset: 962},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 12, offset: 969},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 14, offset: 971},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 30, col: 17, offset: 974},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 32, offset: 989},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 30, col: 35, offset: 992},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 39, offset: 996},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 42, offset: 999},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 30, col: 46, offset: 1003},
										name: "Type",
									},
								},
								&choiceExpr{
									pos: position{line: 30, col: 53, offset: 1010},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 30, col: 53, offset: 1010},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 30, col: 53, offset: 1010},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 30, col: 56, offset: 1013},
													val:        ";",
													ignoreCase: false,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 30, col: 62, offset: 1019},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Sequential",
			pos:  position{line: 34, col: 1, offset: 1116},
			expr: &choiceExpr{
				pos: position{line: 35, col: 5, offset: 1131},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 35, col: 5, offset: 1131},
						run: (*parser).callonSequential2,
						expr: &seqExpr{
							pos: position{line: 35, col: 5, offset: 1131},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 35, col: 5, offset: 1131},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 35, col: 11, offset: 1137},
										name: "Operation",
									},
								},
								&labeledExpr{
									pos:   position{line: 35, col: 21, offset: 1147},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 35, col: 26, offset: 1152},
										expr: &ruleRefExpr{
											pos:  position{line: 35, col: 26, offset: 1152},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 38, col: 5, offset: 1310},
						run: (*parser).callonSequential9,
						expr: &labeledExpr{
							pos:   position{line: 38, col: 5, offset: 1310},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 38, col: 8, offset: 1313},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "SequentialTail",
			pos:  position{line: 42, col: 1, offset: 1423},
			expr: &actionExpr{
				pos: position{line: 42, col: 18, offset: 1440},
				run: (*parser).callonSequentialTail1,
				expr: &seqExpr{
					pos: position{line: 42, col: 18, offset: 1440},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 42, col: 18, offset: 1440},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 21, offset: 1443},
							name: "Pipe",
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 26, offset: 1448},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 42, col: 29, offset: 1451},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 31, offset: 1453},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Parallel",
			pos:  position{line: 44, col: 1, offset: 1482},
			expr: &choiceExpr{
				pos: position{line: 45, col: 5, offset: 1495},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 45, col: 5, offset: 1495},
						run: (*parser).callonParallel2,
						expr: &seqExpr{
							pos: position{line: 45, col: 5, offset: 1495},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 45, col: 5, offset: 1495},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 45, col: 11, offset: 1501},
										name: "Sequential",
									},
								},
								&labeledExpr{
									pos:   position{line: 45, col: 22, offset: 1512},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 45, col: 27, offset: 1517},
										expr: &ruleRefExpr{
											pos:  position{line: 45, col: 27, offset: 1517},
											name: "ParallelTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 48, col: 5, offset: 1618},
						run: (*parser).callonParallel9,
						expr: &labeledExpr{
							pos:   position{line: 48, col: 5, offset: 1618},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 48, col: 11, offset: 1624},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "ParallelTail",
			pos:  position{line: 52, col: 1, offset: 1683},
			expr: &actionExpr{
				pos: position{line: 53, col: 5, offset: 1700},
				run: (*parser).callonParallelTail1,
				expr: &seqExpr{
					pos: position{line: 53, col: 5, offset: 1700},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 53, col: 5, offset: 1700},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 53, col: 8, offset: 1703},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 53, col: 13, offset: 1708},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 53, col: 16, offset: 1711},
							label: "ch",
							expr: &ruleRefExpr{
								pos:  position{line: 53, col: 19, offset: 1714},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchBranch",
			pos:  position{line: 55, col: 1, offset: 1745},
			expr: &choiceExpr{
				pos: position{line: 56, col: 5, offset: 1762},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 56, col: 5, offset: 1762},
						run: (*parser).callonSwitchBranch2,
						expr: &seqExpr{
							pos: position{line: 56, col: 5, offset: 1762},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 56, col: 5, offset: 1762},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 56, col: 8, offset: 1765},
									name: "CaseToken",
								},
								&ruleRefExpr{
									pos:  position{line: 56, col: 18, offset: 1775},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 56, col: 20, offset: 1777},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 56, col: 22, offset: 1779},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 56, col: 36, offset: 1793},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 56, col: 39, offset: 1796},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 56, col: 44, offset: 1801},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 56, col: 47, offset: 1804},
									label: "proc",
									expr: &ruleRefExpr{
										pos:  position{line: 56, col: 52, offset: 1809},
										name: "Sequential",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 59, col: 5, offset: 1898},
						run: (*parser).callonSwitchBranch14,
						expr: &seqExpr{
							pos: position{line: 59, col: 5, offset: 1898},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 59, col: 5, offset: 1898},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 59, col: 8, offset: 1901},
									name: "DefaultToken",
								},
								&ruleRefExpr{
									pos:  position{line: 59, col: 21, offset: 1914},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 59, col: 24, offset: 1917},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 59, col: 29, offset: 1922},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 59, col: 32, offset: 1925},
									label: "proc",
									expr: &ruleRefExpr{
										pos:  position{line: 59, col: 37, offset: 1930},
										name: "Sequential",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Switch",
			pos:  position{line: 63, col: 1, offset: 2090},
			expr: &choiceExpr{
				pos: position{line: 64, col: 5, offset: 2101},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 64, col: 5, offset: 2101},
						run: (*parser).callonSwitch2,
						expr: &seqExpr{
							pos: position{line: 64, col: 5, offset: 2101},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 64, col: 5, offset: 2101},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 64, col: 11, offset: 2107},
										name: "SwitchBranch",
									},
								},
								&labeledExpr{
									pos:   position{line: 64, col: 24, offset: 2120},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 64, col: 29, offset: 2125},
										expr: &ruleRefExpr{
											pos:  position{line: 64, col: 29, offset: 2125},
											name: "SwitchBranch",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 67, col: 5, offset: 2226},
						run: (*parser).callonSwitch9,
						expr: &labeledExpr{
							pos:   position{line: 67, col: 5, offset: 2226},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 67, col: 11, offset: 2232},
								name: "SwitchBranch",
							},
						},
					},
				},
			},
		},
		{
			name: "CaseToken",
			pos:  position{line: 71, col: 1, offset: 2293},
			expr: &litMatcher{
				pos:        position{line: 71, col: 13, offset: 2305},
				val:        "case",
				ignoreCase: true,
			},
		},
		{
			name: "DefaultToken",
			pos:  position{line: 72, col: 1, offset: 2313},
			expr: &litMatcher{
				pos:        position{line: 72, col: 16, offset: 2328},
				val:        "default",
				ignoreCase: true,
			},
		},
		{
			name: "Operation",
			pos:  position{line: 74, col: 1, offset: 2340},
			expr: &choiceExpr{
				pos: position{line: 75, col: 5, offset: 2354},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 75, col: 5, offset: 2354},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 75, col: 5, offset: 2354},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 75, col: 5, offset: 2354},
									val:        "split",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 75, col: 13, offset: 2362},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 75, col: 16, offset: 2365},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 75, col: 20, offset: 2369},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 75, col: 23, offset: 2372},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 75, col: 28, offset: 2377},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 75, col: 31, offset: 2380},
									label: "procArray",
									expr: &ruleRefExpr{
										pos:  position{line: 75, col: 41, offset: 2390},
										name: "Parallel",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 75, col: 50, offset: 2399},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 75, col: 53, offset: 2402},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 78, col: 5, offset: 2499},
						run: (*parser).callonOperation14,
						expr: &seqExpr{
							pos: position{line: 78, col: 5, offset: 2499},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 78, col: 5, offset: 2499},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 78, col: 14, offset: 2508},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 78, col: 17, offset: 2511},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 78, col: 21, offset: 2515},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 78, col: 24, offset: 2518},
									label: "caseArray",
									expr: &ruleRefExpr{
										pos:  position{line: 78, col: 34, offset: 2528},
										name: "Switch",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 78, col: 41, offset: 2535},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 78, col: 44, offset: 2538},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 81, col: 5, offset: 2633},
						name: "Operator",
					},
					&actionExpr{
						pos: position{line: 82, col: 5, offset: 2646},
						run: (*parser).callonOperation25,
						expr: &seqExpr{
							pos: position{line: 82, col: 5, offset: 2646},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 82, col: 5, offset: 2646},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 82, col: 7, offset: 2648},
										name: "Function",
									},
								},
								&andExpr{
									pos: position{line: 82, col: 16, offset: 2657},
									expr: &ruleRefExpr{
										pos:  position{line: 82, col: 17, offset: 2658},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 83, col: 5, offset: 2688},
						run: (*parser).callonOperation31,
						expr: &seqExpr{
							pos: position{line: 83, col: 5, offset: 2688},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 83, col: 5, offset: 2688},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 83, col: 7, offset: 2690},
										name: "Aggregation",
									},
								},
								&andExpr{
									pos: position{line: 83, col: 19, offset: 2702},
									expr: &ruleRefExpr{
										pos:  position{line: 83, col: 20, offset: 2703},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 84, col: 5, offset: 2734},
						run: (*parser).callonOperation37,
						expr: &seqExpr{
							pos: position{line: 84, col: 5, offset: 2734},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 84, col: 5, offset: 2734},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 84, col: 10, offset: 2739},
										name: "SearchBoolean",
									},
								},
								&notExpr{
									pos: position{line: 84, col: 24, offset: 2753},
									expr: &ruleRefExpr{
										pos:  position{line: 84, col: 25, offset: 2754},
										name: "AggGuard",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EndOfOp",
			pos:  position{line: 88, col: 1, offset: 2845},
			expr: &seqExpr{
				pos: position{line: 88, col: 11, offset: 2855},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 88, col: 11, offset: 2855},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 88, col: 15, offset: 2859},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 88, col: 15, offset: 2859},
								name: "Pipe",
							},
							&litMatcher{
								pos:        position{line: 88, col: 22, offset: 2866},
								val:        "=>",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 88, col: 29, offset: 2873},
								val:        ")",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 88, col: 35, offset: 2879},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "Pipe",
			pos:  position{line: 89, col: 1, offset: 2884},
			expr: &seqExpr{
				pos: position{line: 89, col: 8, offset: 2891},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 89, col: 8, offset: 2891},
						val:        "|",
						ignoreCase: false,
					},
					&notExpr{
						pos: position{line: 89, col: 12, offset: 2895},
						expr: &choiceExpr{
							pos: position{line: 89, col: 14, offset: 2897},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 89, col: 14, offset: 2897},
									val:        "{",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 89, col: 20, offset: 2903},
									val:        "[",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 91, col: 1, offset: 2909},
			expr: &seqExpr{
				pos: position{line: 91, col: 13, offset: 2921},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 91, col: 13, offset: 2921},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 91, col: 17, offset: 2925},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 91, col: 18, offset: 2926},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 91, col: 18, offset: 2926},
										expr: &litMatcher{
											pos:        position{line: 91, col: 19, offset: 2927},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 91, col: 24, offset: 2932},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 91, col: 38, offset: 2946},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 91, col: 57, offset: 2965},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 91, col: 82, offset: 2990},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 91, col: 88, offset: 2996},
								val:        "(",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "AggGuard",
			pos:  position{line: 93, col: 1, offset: 3002},
			expr: &choiceExpr{
				pos: position{line: 93, col: 12, offset: 3013},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 93, col: 13, offset: 3014},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 93, col: 13, offset: 3014},
								name: "_",
							},
							&choiceExpr{
								pos: position{line: 93, col: 16, offset: 3017},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 93, col: 16, offset: 3017},
										name: "ByToken",
									},
									&litMatcher{
										pos:        position{line: 93, col: 26, offset: 3027},
										val:        "-with",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 93, col: 35, offset: 3036},
								name: "EOT",
							},
						},
					},
					&seqExpr{
						pos: position{line: 93, col: 43, offset: 3044},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 93, col: 43, offset: 3044},
								name: "__",
							},
							&litMatcher{
								pos:        position{line: 93, col: 46, offset: 3047},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 95, col: 1, offset: 3053},
			expr: &actionExpr{
				pos: position{line: 96, col: 5, offset: 3071},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 96, col: 5, offset: 3071},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 96, col: 5, offset: 3071},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 96, col: 11, offset: 3077},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 96, col: 21, offset: 3087},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 96, col: 26, offset: 3092},
								expr: &ruleRefExpr{
									pos:  position{line: 96, col: 26, offset: 3092},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 100, col: 1, offset: 3166},
			expr: &actionExpr{
				pos: position{line: 100, col: 16, offset: 3181},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 100, col: 16, offset: 3181},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 100, col: 16, offset: 3181},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 100, col: 18, offset: 3183},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 100, col: 26, offset: 3191},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 100, col: 28, offset: 3193},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 100, col: 30, offset: 3195},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 102, col: 1, offset: 3245},
			expr: &actionExpr{
				pos: position{line: 103, col: 5, offset: 3259},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 103, col: 5, offset: 3259},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 103, col: 5, offset: 3259},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 103, col: 11, offset: 3265},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 104, col: 5, offset: 3282},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 104, col: 10, offset: 3287},
								expr: &actionExpr{
									pos: position{line: 104, col: 11, offset: 3288},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 104, col: 11, offset: 3288},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 104, col: 11, offset: 3288},
												name: "__",
											},
											&zeroOrOneExpr{
												pos: position{line: 104, col: 14, offset: 3291},
												expr: &seqExpr{
													pos: position{line: 104, col: 15, offset: 3292},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 104, col: 15, offset: 3292},
															name: "AndToken",
														},
														&ruleRefExpr{
															pos:  position{line: 104, col: 24, offset: 3301},
															name: "_",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 104, col: 28, offset: 3305},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 104, col: 31, offset: 3308},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 104, col: 36, offset: 3313},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 108, col: 1, offset: 3429},
			expr: &choiceExpr{
				pos: position{line: 109, col: 5, offset: 3446},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 109, col: 5, offset: 3446},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 109, col: 5, offset: 3446},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 109, col: 6, offset: 3447},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 109, col: 6, offset: 3447},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 109, col: 6, offset: 3447},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 109, col: 15, offset: 3456},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 109, col: 19, offset: 3460},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 109, col: 19, offset: 3460},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 109, col: 23, offset: 3464},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 109, col: 27, offset: 3468},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 109, col: 29, offset: 3470},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 112, col: 5, offset: 3582},
						name: "ShortCut",
					},
					&ruleRefExpr{
						pos:  position{line: 113, col: 5, offset: 3595},
						name: "SearchExpr",
					},
					&actionExpr{
						pos: position{line: 114, col: 5, offset: 3610},
						run: (*parser).callonSearchFactor15,
						expr: &seqExpr{
							pos: position{line: 114, col: 5, offset: 3610},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 114, col: 5, offset: 3610},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 114, col: 9, offset: 3614},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 114, col: 12, offset: 3617},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 114, col: 17, offset: 3622},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 114, col: 31, offset: 3636},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 114, col: 34, offset: 3639},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShortCut",
			pos:  position{line: 116, col: 1, offset: 3665},
			expr: &choiceExpr{
				pos: position{line: 117, col: 5, offset: 3678},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 117, col: 5, offset: 3678},
						run: (*parser).callonShortCut2,
						expr: &seqExpr{
							pos: position{line: 117, col: 5, offset: 3678},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 117, col: 5, offset: 3678},
									val:        "*",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 117, col: 9, offset: 3682},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 117, col: 12, offset: 3685},
									label: "compareOp",
									expr: &ruleRefExpr{
										pos:  position{line: 117, col: 22, offset: 3695},
										name: "EqualityToken",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 117, col: 36, offset: 3709},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 117, col: 39, offset: 3712},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 117, col: 41, offset: 3714},
										name: "SearchValue",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 144, col: 5, offset: 4403},
						run: (*parser).callonShortCut11,
						expr: &seqExpr{
							pos: position{line: 144, col: 5, offset: 4403},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 144, col: 5, offset: 4403},
									label: "match",
									expr: &ruleRefExpr{
										pos:  position{line: 144, col: 11, offset: 4409},
										name: "PatternMatch",
									},
								},
								&notExpr{
									pos: position{line: 144, col: 24, offset: 4422},
									expr: &ruleRefExpr{
										pos:  position{line: 144, col: 25, offset: 4423},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 145, col: 5, offset: 4459},
						run: (*parser).callonShortCut17,
						expr: &seqExpr{
							pos: position{line: 145, col: 5, offset: 4459},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 145, col: 5, offset: 4459},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 145, col: 7, offset: 4461},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 145, col: 12, offset: 4466},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 145, col: 15, offset: 4469},
									label: "comp",
									expr: &ruleRefExpr{
										pos:  position{line: 145, col: 20, offset: 4474},
										name: "EqualityToken",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 145, col: 34, offset: 4488},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 145, col: 37, offset: 4491},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 145, col: 39, offset: 4493},
										name: "SearchValue",
									},
								},
								&notExpr{
									pos: position{line: 145, col: 51, offset: 4505},
									expr: &ruleRefExpr{
										pos:  position{line: 145, col: 52, offset: 4506},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 148, col: 5, offset: 4620},
						run: (*parser).callonShortCut29,
						expr: &seqExpr{
							pos: position{line: 148, col: 5, offset: 4620},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 148, col: 5, offset: 4620},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 148, col: 7, offset: 4622},
										name: "SearchValue",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 148, col: 19, offset: 4634},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 148, col: 21, offset: 4636},
									name: "InToken",
								},
								&ruleRefExpr{
									pos:  position{line: 148, col: 29, offset: 4644},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 148, col: 31, offset: 4646},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 175, col: 5, offset: 5328},
						run: (*parser).callonShortCut37,
						expr: &seqExpr{
							pos: position{line: 175, col: 5, offset: 5328},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 175, col: 5, offset: 5328},
									expr: &seqExpr{
										pos: position{line: 175, col: 7, offset: 5330},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 175, col: 7, offset: 5330},
												name: "SearchGuard",
											},
											&ruleRefExpr{
												pos:  position{line: 175, col: 19, offset: 5342},
												name: "EOT",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 175, col: 24, offset: 5347},
									label: "search",
									expr: &ruleRefExpr{
										pos:  position{line: 175, col: 31, offset: 5354},
										name: "PatternSearch",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 176, col: 5, offset: 5395},
						run: (*parser).callonShortCut45,
						expr: &seqExpr{
							pos: position{line: 176, col: 5, offset: 5395},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 176, col: 5, offset: 5395},
									expr: &seqExpr{
										pos: position{line: 176, col: 7, offset: 5397},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 176, col: 7, offset: 5397},
												name: "SearchGuard",
											},
											&ruleRefExpr{
												pos:  position{line: 176, col: 19, offset: 5409},
												name: "EOT",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 176, col: 24, offset: 5414},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 176, col: 26, offset: 5416},
										name: "SearchValue",
									},
								},
								&notExpr{
									pos: position{line: 176, col: 38, offset: 5428},
									expr: &ruleRefExpr{
										pos:  position{line: 176, col: 39, offset: 5429},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 179, col: 5, offset: 5546},
						run: (*parser).callonShortCut55,
						expr: &seqExpr{
							pos: position{line: 179, col: 5, offset: 5546},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 179, col: 5, offset: 5546},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 179, col: 9, offset: 5550},
									expr: &ruleRefExpr{
										pos:  position{line: 179, col: 10, offset: 5551},
										name: "ExprGuard",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 183, col: 1, offset: 5664},
			expr: &choiceExpr{
				pos: position{line: 184, col: 5, offset: 5680},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 184, col: 5, offset: 5680},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 185, col: 5, offset: 5692},
						run: (*parser).callonSearchValue3,
						expr: &seqExpr{
							pos: position{line: 185, col: 5, offset: 5692},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 185, col: 5, offset: 5692},
									expr: &ruleRefExpr{
										pos:  position{line: 185, col: 6, offset: 5693},
										name: "Regexp",
									},
								},
								&labeledExpr{
									pos:   position{line: 185, col: 13, offset: 5700},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 185, col: 15, offset: 5702},
										name: "KeyWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PatternSearch",
			pos:  position{line: 189, col: 1, offset: 5810},
			expr: &actionExpr{
				pos: position{line: 190, col: 5, offset: 5828},
				run: (*parser).callonPatternSearch1,
				expr: &labeledExpr{
					pos:   position{line: 190, col: 5, offset: 5828},
					label: "pattern",
					expr: &ruleRefExpr{
						pos:  position{line: 190, col: 13, offset: 5836},
						name: "Pattern",
					},
				},
			},
		},
		{
			name: "PatternMatch",
			pos:  position{line: 194, col: 1, offset: 5938},
			expr: &choiceExpr{
				pos: position{line: 195, col: 5, offset: 5955},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 195, col: 5, offset: 5955},
						run: (*parser).callonPatternMatch2,
						expr: &seqExpr{
							pos: position{line: 195, col: 5, offset: 5955},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 195, col: 5, offset: 5955},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 195, col: 7, offset: 5957},
										name: "Lval",
									},
								},
								&choiceExpr{
									pos: position{line: 195, col: 13, offset: 5963},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 195, col: 14, offset: 5964},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 195, col: 14, offset: 5964},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 195, col: 17, offset: 5967},
													val:        "=",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 195, col: 21, offset: 5971},
													name: "__",
												},
											},
										},
										&seqExpr{
											pos: position{line: 195, col: 28, offset: 5978},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 195, col: 28, offset: 5978},
													name: "_",
												},
												&litMatcher{
													pos:        position{line: 195, col: 30, offset: 5980},
													val:        "in",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 195, col: 35, offset: 5985},
													name: "_",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 195, col: 40, offset: 5990},
									label: "pattern",
									expr: &ruleRefExpr{
										pos:  position{line: 195, col: 48, offset: 5998},
										name: "Pattern",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 198, col: 5, offset: 6113},
						run: (*parser).callonPatternMatch17,
						expr: &seqExpr{
							pos: position{line: 198, col: 5, offset: 6113},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 198, col: 5, offset: 6113},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 198, col: 7, offset: 6115},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 198, col: 12, offset: 6120},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 198, col: 15, offset: 6123},
									val:        "!=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 198, col: 20, offset: 6128},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 198, col: 24, offset: 6132},
									label: "pattern",
									expr: &ruleRefExpr{
										pos:  position{line: 198, col: 32, offset: 6140},
										name: "Pattern",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Pattern",
			pos:  position{line: 205, col: 1, offset: 6349},
			expr: &choiceExpr{
				pos: position{line: 205, col: 11, offset: 6359},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 205, col: 11, offset: 6359},
						name: "Regexp",
					},
					&ruleRefExpr{
						pos:  position{line: 205, col: 20, offset: 6368},
						name: "Glob",
					},
				},
			},
		},
		{
			name: "SearchGuard",
			pos:  position{line: 207, col: 1, offset: 6374},
			expr: &choiceExpr{
				pos: position{line: 208, col: 5, offset: 6390},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 208, col: 5, offset: 6390},
						name: "SQLTokenSentinels",
					},
					&ruleRefExpr{
						pos:  position{line: 209, col: 5, offset: 6412},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 210, col: 5, offset: 6425},
						name: "OrToken",
					},
					&ruleRefExpr{
						pos:  position{line: 211, col: 5, offset: 6437},
						name: "NotToken",
					},
					&ruleRefExpr{
						pos:  position{line: 212, col: 5, offset: 6450},
						name: "InToken",
					},
					&ruleRefExpr{
						pos:  position{line: 213, col: 5, offset: 6462},
						name: "ByToken",
					},
					&ruleRefExpr{
						pos:  position{line: 214, col: 5, offset: 6474},
						name: "CaseToken",
					},
					&ruleRefExpr{
						pos:  position{line: 215, col: 5, offset: 6488},
						name: "DefaultToken",
					},
					&litMatcher{
						pos:        position{line: 216, col: 5, offset: 6505},
						val:        "type(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 220, col: 1, offset: 6562},
			expr: &ruleRefExpr{
				pos:  position{line: 220, col: 14, offset: 6575},
				name: "SearchExprRelative",
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 222, col: 1, offset: 6595},
			expr: &actionExpr{
				pos: position{line: 222, col: 14, offset: 6608},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 222, col: 15, offset: 6609},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 222, col: 15, offset: 6609},
							val:        "=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 222, col: 21, offset: 6615},
							val:        "!=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 222, col: 28, offset: 6622},
							val:        "in",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 222, col: 35, offset: 6629},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 222, col: 42, offset: 6636},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 222, col: 48, offset: 6642},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 222, col: 55, offset: 6649},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SearchExprRelative",
			pos:  position{line: 224, col: 1, offset: 6686},
			expr: &actionExpr{
				pos: position{line: 225, col: 5, offset: 6709},
				run: (*parser).callonSearchExprRelative1,
				expr: &seqExpr{
					pos: position{line: 225, col: 5, offset: 6709},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 225, col: 5, offset: 6709},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 225, col: 11, offset: 6715},
								name: "SearchExprAdd",
							},
						},
						&labeledExpr{
							pos:   position{line: 226, col: 5, offset: 6733},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 226, col: 10, offset: 6738},
								expr: &actionExpr{
									pos: position{line: 226, col: 11, offset: 6739},
									run: (*parser).callonSearchExprRelative7,
									expr: &seqExpr{
										pos: position{line: 226, col: 11, offset: 6739},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 226, col: 11, offset: 6739},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 226, col: 14, offset: 6742},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 226, col: 17, offset: 6745},
													name: "Comparator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 226, col: 28, offset: 6756},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 226, col: 31, offset: 6759},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 226, col: 36, offset: 6764},
													name: "SearchExprAdd",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchExprAdd",
			pos:  position{line: 230, col: 1, offset: 6881},
			expr: &actionExpr{
				pos: position{line: 231, col: 5, offset: 6899},
				run: (*parser).callonSearchExprAdd1,
				expr: &seqExpr{
					pos: position{line: 231, col: 5, offset: 6899},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 231, col: 5, offset: 6899},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 231, col: 11, offset: 6905},
								name: "SearchExprMul",
							},
						},
						&labeledExpr{
							pos:   position{line: 232, col: 5, offset: 6923},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 232, col: 10, offset: 6928},
								expr: &actionExpr{
									pos: position{line: 232, col: 11, offset: 6929},
									run: (*parser).callonSearchExprAdd7,
									expr: &seqExpr{
										pos: position{line: 232, col: 11, offset: 6929},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 232, col: 11, offset: 6929},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 232, col: 14, offset: 6932},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 232, col: 17, offset: 6935},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 232, col: 34, offset: 6952},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 232, col: 37, offset: 6955},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 232, col: 42, offset: 6960},
													name: "SearchExprMul",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchExprMul",
			pos:  position{line: 236, col: 1, offset: 7077},
			expr: &actionExpr{
				pos: position{line: 237, col: 5, offset: 7095},
				run: (*parser).callonSearchExprMul1,
				expr: &seqExpr{
					pos: position{line: 237, col: 5, offset: 7095},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 237, col: 5, offset: 7095},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 237, col: 11, offset: 7101},
								name: "SearchExprCast",
							},
						},
						&labeledExpr{
							pos:   position{line: 238, col: 5, offset: 7120},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 238, col: 10, offset: 7125},
								expr: &actionExpr{
									pos: position{line: 238, col: 11, offset: 7126},
									run: (*parser).callonSearchExprMul7,
									expr: &seqExpr{
										pos: position{line: 238, col: 11, offset: 7126},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 238, col: 11, offset: 7126},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 238, col: 14, offset: 7129},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 238, col: 17, offset: 7132},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 238, col: 40, offset: 7155},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 238, col: 43, offset: 7158},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 238, col: 48, offset: 7163},
													name: "SearchExprCast",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchExprCast",
			pos:  position{line: 242, col: 1, offset: 7281},
			expr: &choiceExpr{
				pos: position{line: 243, col: 5, offset: 7300},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 243, col: 5, offset: 7300},
						run: (*parser).callonSearchExprCast2,
						expr: &seqExpr{
							pos: position{line: 243, col: 5, offset: 7300},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 243, col: 5, offset: 7300},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 243, col: 7, offset: 7302},
										name: "SearchExprFunc",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 243, col: 22, offset: 7317},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 243, col: 25, offset: 7320},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 243, col: 29, offset: 7324},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 243, col: 32, offset: 7327},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 243, col: 36, offset: 7331},
										name: "CastType",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 246, col: 5, offset: 7433},
						name: "SearchExprFunc",
					},
				},
			},
		},
		{
			name: "SearchExprFunc",
			pos:  position{line: 248, col: 1, offset: 7449},
			expr: &choiceExpr{
				pos: position{line: 249, col: 5, offset: 7468},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 249, col: 5, offset: 7468},
						name: "MatchExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 250, col: 5, offset: 7482},
						name: "TypeLiteral",
					},
					&actionExpr{
						pos: position{line: 251, col: 5, offset: 7498},
						run: (*parser).callonSearchExprFunc4,
						expr: &seqExpr{
							pos: position{line: 251, col: 5, offset: 7498},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 251, col: 5, offset: 7498},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 251, col: 11, offset: 7504},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 251, col: 20, offset: 7513},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 251, col: 25, offset: 7518},
										expr: &ruleRefExpr{
											pos:  position{line: 251, col: 26, offset: 7519},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 254, col: 5, offset: 7591},
						name: "Literal",
					},
					&ruleRefExpr{
						pos:  position{line: 255, col: 5, offset: 7603},
						name: "Record",
					},
					&ruleRefExpr{
						pos:  position{line: 256, col: 5, offset: 7614},
						name: "Array",
					},
					&ruleRefExpr{
						pos:  position{line: 257, col: 5, offset: 7624},
						name: "Set",
					},
					&ruleRefExpr{
						pos:  position{line: 258, col: 5, offset: 7632},
						name: "Map",
					},
					&ruleRefExpr{
						pos:  position{line: 259, col: 5, offset: 7640},
						name: "DerefExpr",
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 263, col: 1, offset: 7677},
			expr: &choiceExpr{
				pos: position{line: 264, col: 5, offset: 7693},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 264, col: 5, offset: 7693},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 264, col: 5, offset: 7693},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 264, col: 5, offset: 7693},
									name: "Summarize",
								},
								&labeledExpr{
									pos:   position{line: 264, col: 15, offset: 7703},
									label: "every",
									expr: &ruleRefExpr{
										pos:  position{line: 264, col: 21, offset: 7709},
										name: "EveryDur",
									},
								},
								&labeledExpr{
									pos:   position{line: 264, col: 30, offset: 7718},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 264, col: 35, offset: 7723},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 264, col: 47, offset: 7735},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 264, col: 53, offset: 7741},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 267, col: 5, offset: 7886},
						run: (*parser).callonAggregation11,
						expr: &seqExpr{
							pos: position{line: 267, col: 5, offset: 7886},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 267, col: 5, offset: 7886},
									name: "Summarize",
								},
								&labeledExpr{
									pos:   position{line: 267, col: 15, offset: 7896},
									label: "every",
									expr: &ruleRefExpr{
										pos:  position{line: 267, col: 21, offset: 7902},
										name: "EveryDur",
									},
								},
								&labeledExpr{
									pos:   position{line: 267, col: 30, offset: 7911},
									label: "aggs",
									expr: &ruleRefExpr{
										pos:  position{line: 267, col: 35, offset: 7916},
										name: "AggAssignments",
									},
								},
								&labeledExpr{
									pos:   position{line: 267, col: 50, offset: 7931},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 267, col: 55, offset: 7936},
										expr: &seqExpr{
											pos: position{line: 267, col: 56, offset: 7937},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 267, col: 56, offset: 7937},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 267, col: 58, offset: 7939},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 267, col: 72, offset: 7953},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 267, col: 78, offset: 7959},
										name: "LimitArg",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Summarize",
			pos:  position{line: 275, col: 1, offset: 8192},
			expr: &choiceExpr{
				pos: position{line: 275, col: 13, offset: 8204},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 275, col: 13, offset: 8204},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 275, col: 13, offset: 8204},
								val:        "summarize",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 275, col: 25, offset: 8216},
								name: "_",
							},
						},
					},
					&litMatcher{
						pos:        position{line: 275, col: 29, offset: 8220},
						val:        "",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "EveryDur",
			pos:  position{line: 277, col: 1, offset: 8224},
			expr: &choiceExpr{
				pos: position{line: 278, col: 5, offset: 8237},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 278, col: 5, offset: 8237},
						run: (*parser).callonEveryDur2,
						expr: &seqExpr{
							pos: position{line: 278, col: 5, offset: 8237},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 278, col: 5, offset: 8237},
									val:        "every",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 278, col: 14, offset: 8246},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 278, col: 16, offset: 8248},
									label: "dur",
									expr: &ruleRefExpr{
										pos:  position{line: 278, col: 20, offset: 8252},
										name: "Duration",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 278, col: 29, offset: 8261},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 279, col: 5, offset: 8287},
						run: (*parser).callonEveryDur9,
						expr: &litMatcher{
							pos:        position{line: 279, col: 5, offset: 8287},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 281, col: 1, offset: 8312},
			expr: &actionExpr{
				pos: position{line: 282, col: 5, offset: 8328},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 282, col: 5, offset: 8328},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 282, col: 5, offset: 8328},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 282, col: 13, offset: 8336},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 282, col: 15, offset: 8338},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 282, col: 23, offset: 8346},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 284, col: 1, offset: 8387},
			expr: &choiceExpr{
				pos: position{line: 285, col: 5, offset: 8400},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 285, col: 5, offset: 8400},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 285, col: 5, offset: 8400},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 285, col: 5, offset: 8400},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 285, col: 7, offset: 8402},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 285, col: 14, offset: 8409},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 285, col: 16, offset: 8411},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 285, col: 25, offset: 8420},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 285, col: 27, offset: 8422},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 285, col: 33, offset: 8428},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 286, col: 5, offset: 8459},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 286, col: 5, offset: 8459},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 291, col: 1, offset: 8719},
			expr: &choiceExpr{
				pos: position{line: 292, col: 5, offset: 8738},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 292, col: 5, offset: 8738},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 293, col: 5, offset: 8753},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 293, col: 5, offset: 8753},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 293, col: 10, offset: 8758},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 295, col: 1, offset: 8850},
			expr: &actionExpr{
				pos: position{line: 296, col: 5, offset: 8870},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 296, col: 5, offset: 8870},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 296, col: 5, offset: 8870},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 296, col: 11, offset: 8876},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 296, col: 26, offset: 8891},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 296, col: 31, offset: 8896},
								expr: &actionExpr{
									pos: position{line: 296, col: 32, offset: 8897},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 296, col: 32, offset: 8897},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 296, col: 32, offset: 8897},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 296, col: 35, offset: 8900},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 296, col: 39, offset: 8904},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 296, col: 42, offset: 8907},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 296, col: 47, offset: 8912},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignment",
			pos:  position{line: 300, col: 1, offset: 9034},
			expr: &choiceExpr{
				pos: position{line: 301, col: 5, offset: 9052},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 301, col: 5, offset: 9052},
						run: (*parser).callonAggAssignment2,
						expr: &seqExpr{
							pos: position{line: 301, col: 5, offset: 9052},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 301, col: 5, offset: 9052},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 301, col: 10, offset: 9057},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 301, col: 15, offset: 9062},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 301, col: 18, offset: 9065},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 301, col: 22, offset: 9069},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 301, col: 25, offset: 9072},
									label: "agg",
									expr: &ruleRefExpr{
										pos:  position{line: 301, col: 29, offset: 9076},
										name: "Agg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 304, col: 5, offset: 9180},
						run: (*parser).callonAggAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 304, col: 5, offset: 9180},
							label: "agg",
							expr: &ruleRefExpr{
								pos:  position{line: 304, col: 9, offset: 9184},
								name: "Agg",
							},
						},
					},
				},
			},
		},
		{
			name: "Agg",
			pos:  position{line: 308, col: 1, offset: 9284},
			expr: &actionExpr{
				pos: position{line: 309, col: 5, offset: 9292},
				run: (*parser).callonAgg1,
				expr: &seqExpr{
					pos: position{line: 309, col: 5, offset: 9292},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 309, col: 5, offset: 9292},
							expr: &ruleRefExpr{
								pos:  position{line: 309, col: 6, offset: 9293},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 309, col: 16, offset: 9303},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 309, col: 19, offset: 9306},
								name: "AggName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 309, col: 27, offset: 9314},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 309, col: 30, offset: 9317},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 309, col: 34, offset: 9321},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 309, col: 37, offset: 9324},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 309, col: 42, offset: 9329},
								expr: &ruleRefExpr{
									pos:  position{line: 309, col: 42, offset: 9329},
									name: "Expr",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 309, col: 49, offset: 9336},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 309, col: 52, offset: 9339},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 309, col: 56, offset: 9343},
							expr: &seqExpr{
								pos: position{line: 309, col: 58, offset: 9345},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 309, col: 58, offset: 9345},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 309, col: 61, offset: 9348},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 309, col: 66, offset: 9353},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 309, col: 72, offset: 9359},
								expr: &ruleRefExpr{
									pos:  position{line: 309, col: 72, offset: 9359},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AggName",
			pos:  position{line: 317, col: 1, offset: 9549},
			expr: &choiceExpr{
				pos: position{line: 318, col: 5, offset: 9561},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 318, col: 5, offset: 9561},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 319, col: 5, offset: 9580},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 320, col: 5, offset: 9593},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 322, col: 1, offset: 9602},
			expr: &actionExpr{
				pos: position{line: 322, col: 15, offset: 9616},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 322, col: 15, offset: 9616},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 322, col: 15, offset: 9616},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 322, col: 17, offset: 9618},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 322, col: 25, offset: 9626},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 322, col: 27, offset: 9628},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 322, col: 32, offset: 9633},
								name: "SearchBoolean",
							},
						},
					},
				},
			},
		},
		{
			name: "AggAssignments",
			pos:  position{line: 324, col: 1, offset: 9669},
			expr: &actionExpr{
				pos: position{line: 325, col: 5, offset: 9688},
				run: (*parser).callonAggAssignments1,
				expr: &seqExpr{
					pos: position{line: 325, col: 5, offset: 9688},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 325, col: 5, offset: 9688},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 325, col: 11, offset: 9694},
								name: "AggAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 325, col: 25, offset: 9708},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 325, col: 30, offset: 9713},
								expr: &seqExpr{
									pos: position{line: 325, col: 31, offset: 9714},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 325, col: 31, offset: 9714},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 325, col: 34, offset: 9717},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 325, col: 38, offset: 9721},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 325, col: 41, offset: 9724},
											name: "AggAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 335, col: 1, offset: 9960},
			expr: &choiceExpr{
				pos: position{line: 336, col: 5, offset: 9973},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 336, col: 5, offset: 9973},
						name: "SortProc",
					},
					&ruleRefExpr{
						pos:  position{line: 337, col: 5, offset: 9986},
						name: "TopProc",
					},
					&ruleRefExpr{
						pos:  position{line: 338, col: 5, offset: 9998},
						name: "CutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 339, col: 5, offset: 10010},
						name: "PickProc",
					},
					&ruleRefExpr{
						pos:  position{line: 340, col: 5, offset: 10023},
						name: "DropProc",
					},
					&ruleRefExpr{
						pos:  position{line: 341, col: 5, offset: 10036},
						name: "HeadProc",
					},
					&ruleRefExpr{
						pos:  position{line: 342, col: 5, offset: 10049},
						name: "TailProc",
					},
					&ruleRefExpr{
						pos:  position{line: 343, col: 5, offset: 10062},
						name: "FilterProc",
					},
					&ruleRefExpr{
						pos:  position{line: 344, col: 5, offset: 10077},
						name: "UniqProc",
					},
					&ruleRefExpr{
						pos:  position{line: 345, col: 5, offset: 10090},
						name: "PutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 346, col: 5, offset: 10102},
						name: "RenameProc",
					},
					&ruleRefExpr{
						pos:  position{line: 347, col: 5, offset: 10117},
						name: "FuseProc",
					},
					&ruleRefExpr{
						pos:  position{line: 348, col: 5, offset: 10130},
						name: "ShapeProc",
					},
					&ruleRefExpr{
						pos:  position{line: 349, col: 5, offset: 10144},
						name: "JoinProc",
					},
					&ruleRefExpr{
						pos:  position{line: 350, col: 5, offset: 10157},
						name: "SampleProc",
					},
					&ruleRefExpr{
						pos:  position{line: 351, col: 5, offset: 10172},
						name: "SQLProc",
					},
				},
			},
		},
		{
			name: "SortProc",
			pos:  position{line: 353, col: 1, offset: 10181},
			expr: &actionExpr{
				pos: position{line: 354, col: 5, offset: 10194},
				run: (*parser).callonSortProc1,
				expr: &seqExpr{
					pos: position{line: 354, col: 5, offset: 10194},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 354, col: 5, offset: 10194},
							val:        "sort",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 354, col: 13, offset: 10202},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 354, col: 18, offset: 10207},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 354, col: 27, offset: 10216},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 354, col: 32, offset: 10221},
								expr: &actionExpr{
									pos: position{line: 354, col: 33, offset: 10222},
									run: (*parser).callonSortProc8,
									expr: &seqExpr{
										pos: position{line: 354, col: 33, offset: 10222},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 354, col: 33, offset: 10222},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 354, col: 35, offset: 10224},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 354, col: 37, offset: 10226},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 368, col: 1, offset: 10641},
			expr: &actionExpr{
				pos: position{line: 368, col: 12, offset: 10652},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 368, col: 12, offset: 10652},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 368, col: 17, offset: 10657},
						expr: &actionExpr{
							pos: position{line: 368, col: 18, offset: 10658},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 368, col: 18, offset: 10658},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 368, col: 18, offset: 10658},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 368, col: 20, offset: 10660},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 368, col: 22, offset: 10662},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 370, col: 1, offset: 10718},
			expr: &choiceExpr{
				pos: position{line: 371, col: 5, offset: 10730},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 371, col: 5, offset: 10730},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 371, col: 5, offset: 10730},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 372, col: 5, offset: 10805},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 372, col: 5, offset: 10805},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 372, col: 5, offset: 10805},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 372, col: 14, offset: 10814},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 372, col: 16, offset: 10816},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 372, col: 23, offset: 10823},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 372, col: 24, offset: 10824},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 372, col: 24, offset: 10824},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 372, col: 34, offset: 10834},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopProc",
			pos:  position{line: 374, col: 1, offset: 10948},
			expr: &actionExpr{
				pos: position{line: 375, col: 5, offset: 10960},
				run: (*parser).callonTopProc1,
				expr: &seqExpr{
					pos: position{line: 375, col: 5, offset: 10960},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 375, col: 5, offset: 10960},
							val:        "top",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 375, col: 12, offset: 10967},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 375, col: 18, offset: 10973},
								expr: &actionExpr{
									pos: position{line: 375, col: 19, offset: 10974},
									run: (*parser).callonTopProc6,
									expr: &seqExpr{
										pos: position{line: 375, col: 19, offset: 10974},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 375, col: 19, offset: 10974},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 375, col: 21, offset: 10976},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 375, col: 23, offset: 10978},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 375, col: 47, offset: 11002},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 375, col: 53, offset: 11008},
								expr: &seqExpr{
									pos: position{line: 375, col: 54, offset: 11009},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 375, col: 54, offset: 11009},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 375, col: 56, offset: 11011},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 375, col: 67, offset: 11022},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 375, col: 74, offset: 11029},
								expr: &actionExpr{
									pos: position{line: 375, col: 75, offset: 11030},
									run: (*parser).callonTopProc18,
									expr: &seqExpr{
										pos: position{line: 375, col: 75, offset: 11030},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 375, col: 75, offset: 11030},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 375, col: 77, offset: 11032},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 375, col: 79, offset: 11034},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutProc",
			pos:  position{line: 389, col: 1, offset: 11379},
			expr: &actionExpr{
				pos: position{line: 390, col: 5, offset: 11391},
				run: (*parser).callonCutProc1,
				expr: &seqExpr{
					pos: position{line: 390, col: 5, offset: 11391},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 390, col: 5, offset: 11391},
							val:        "cut",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 390, col: 12, offset: 11398},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 390, col: 14, offset: 11400},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 390, col: 19, offset: 11405},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "PickProc",
			pos:  position{line: 394, col: 1, offset: 11500},
			expr: &actionExpr{
				pos: position{line: 395, col: 5, offset: 11513},
				run: (*parser).callonPickProc1,
				expr: &seqExpr{
					pos: position{line: 395, col: 5, offset: 11513},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 395, col: 5, offset: 11513},
							val:        "pick",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 395, col: 13, offset: 11521},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 395, col: 15, offset: 11523},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 395, col: 20, offset: 11528},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropProc",
			pos:  position{line: 399, col: 1, offset: 11624},
			expr: &actionExpr{
				pos: position{line: 400, col: 5, offset: 11637},
				run: (*parser).callonDropProc1,
				expr: &seqExpr{
					pos: position{line: 400, col: 5, offset: 11637},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 400, col: 5, offset: 11637},
							val:        "drop",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 400, col: 13, offset: 11645},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 400, col: 15, offset: 11647},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 400, col: 20, offset: 11652},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadProc",
			pos:  position{line: 404, col: 1, offset: 11743},
			expr: &choiceExpr{
				pos: position{line: 405, col: 5, offset: 11756},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 405, col: 5, offset: 11756},
						run: (*parser).callonHeadProc2,
						expr: &seqExpr{
							pos: position{line: 405, col: 5, offset: 11756},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 405, col: 5, offset: 11756},
									val:        "head",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 405, col: 13, offset: 11764},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 405, col: 15, offset: 11766},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 405, col: 21, offset: 11772},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 406, col: 5, offset: 11852},
						run: (*parser).callonHeadProc8,
						expr: &litMatcher{
							pos:        position{line: 406, col: 5, offset: 11852},
							val:        "head",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "TailProc",
			pos:  position{line: 408, col: 1, offset: 11928},
			expr: &choiceExpr{
				pos: position{line: 409, col: 5, offset: 11941},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 409, col: 5, offset: 11941},
						run: (*parser).callonTailProc2,
						expr: &seqExpr{
							pos: position{line: 409, col: 5, offset: 11941},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 409, col: 5, offset: 11941},
									val:        "tail",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 409, col: 13, offset: 11949},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 409, col: 15, offset: 11951},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 409, col: 21, offset: 11957},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 410, col: 5, offset: 12037},
						run: (*parser).callonTailProc8,
						expr: &litMatcher{
							pos:        position{line: 410, col: 5, offset: 12037},
							val:        "tail",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "FilterProc",
			pos:  position{line: 412, col: 1, offset: 12113},
			expr: &actionExpr{
				pos: position{line: 413, col: 5, offset: 12128},
				run: (*parser).callonFilterProc1,
				expr: &seqExpr{
					pos: position{line: 413, col: 5, offset: 12128},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 413, col: 5, offset: 12128},
							val:        "filter",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 413, col: 15, offset: 12138},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 413, col: 17, offset: 12140},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 413, col: 20, offset: 12143},
								name: "Filter",
							},
						},
					},
				},
			},
		},
		{
			name: "Filter",
			pos:  position{line: 417, col: 1, offset: 12180},
			expr: &actionExpr{
				pos: position{line: 418, col: 5, offset: 12191},
				run: (*parser).callonFilter1,
				expr: &labeledExpr{
					pos:   position{line: 418, col: 5, offset: 12191},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 418, col: 10, offset: 12196},
						name: "SearchBoolean",
					},
				},
			},
		},
		{
			name: "UniqProc",
			pos:  position{line: 422, col: 1, offset: 12292},
			expr: &choiceExpr{
				pos: position{line: 423, col: 5, offset: 12305},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 423, col: 5, offset: 12305},
						run: (*parser).callonUniqProc2,
						expr: &seqExpr{
							pos: position{line: 423, col: 5, offset: 12305},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 423, col: 5, offset: 12305},
									val:        "uniq",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 423, col: 13, offset: 12313},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 423, col: 15, offset: 12315},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 426, col: 5, offset: 12404},
						run: (*parser).callonUniqProc7,
						expr: &litMatcher{
							pos:        position{line: 426, col: 5, offset: 12404},
							val:        "uniq",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "PutProc",
			pos:  position{line: 430, col: 1, offset: 12494},
			expr: &actionExpr{
				pos: position{line: 431, col: 5, offset: 12506},
				run: (*parser).callonPutProc1,
				expr: &seqExpr{
					pos: position{line: 431, col: 5, offset: 12506},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 431, col: 5, offset: 12506},
							val:        "put",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 431, col: 12, offset: 12513},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 431, col: 14, offset: 12515},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 431, col: 19, offset: 12520},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameProc",
			pos:  position{line: 435, col: 1, offset: 12615},
			expr: &actionExpr{
				pos: position{line: 436, col: 5, offset: 12630},
				run: (*parser).callonRenameProc1,
				expr: &seqExpr{
					pos: position{line: 436, col: 5, offset: 12630},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 436, col: 5, offset: 12630},
							val:        "rename",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 436, col: 15, offset: 12640},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 436, col: 17, offset: 12642},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 436, col: 23, offset: 12648},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 436, col: 34, offset: 12659},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 436, col: 39, offset: 12664},
								expr: &actionExpr{
									pos: position{line: 436, col: 40, offset: 12665},
									run: (*parser).callonRenameProc9,
									expr: &seqExpr{
										pos: position{line: 436, col: 40, offset: 12665},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 436, col: 40, offset: 12665},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 436, col: 43, offset: 12668},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 436, col: 47, offset: 12672},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 436, col: 50, offset: 12675},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 436, col: 53, offset: 12678},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseProc",
			pos:  position{line: 444, col: 1, offset: 13087},
			expr: &actionExpr{
				pos: position{line: 445, col: 5, offset: 13100},
				run: (*parser).callonFuseProc1,
				expr: &seqExpr{
					pos: position{line: 445, col: 5, offset: 13100},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 445, col: 5, offset: 13100},
							val:        "fuse",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 445, col: 13, offset: 13108},
							expr: &seqExpr{
								pos: position{line: 445, col: 15, offset: 13110},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 445, col: 15, offset: 13110},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 445, col: 18, offset: 13113},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShapeProc",
			pos:  position{line: 449, col: 1, offset: 13184},
			expr: &actionExpr{
				pos: position{line: 450, col: 5, offset: 13198},
				run: (*parser).callonShapeProc1,
				expr: &litMatcher{
					pos:        position{line: 450, col: 5, offset: 13198},
					val:        "shape",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JoinProc",
			pos:  position{line: 454, col: 1, offset: 13274},
			expr: &choiceExpr{
				pos: position{line: 455, col: 5, offset: 13287},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 455, col: 5, offset: 13287},
						run: (*parser).callonJoinProc2,
						expr: &seqExpr{
							pos: position{line: 455, col: 5, offset: 13287},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 455, col: 5, offset: 13287},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 455, col: 11, offset: 13293},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 455, col: 21, offset: 13303},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 455, col: 29, offset: 13311},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 455, col: 31, offset: 13313},
									label: "leftKey",
									expr: &ruleRefExpr{
										pos:  position{line: 455, col: 39, offset: 13321},
										name: "JoinKey",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 455, col: 47, offset: 13329},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 455, col: 50, offset: 13332},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 455, col: 54, offset: 13336},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 455, col: 57, offset: 13339},
									label: "rightKey",
									expr: &ruleRefExpr{
										pos:  position{line: 455, col: 66, offset: 13348},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 455, col: 74, offset: 13356},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 455, col: 82, offset: 13364},
										expr: &seqExpr{
											pos: position{line: 455, col: 83, offset: 13365},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 455, col: 83, offset: 13365},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 455, col: 85, offset: 13367},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 462, col: 5, offset: 13633},
						run: (*parser).callonJoinProc20,
						expr: &seqExpr{
							pos: position{line: 462, col: 5, offset: 13633},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 462, col: 5, offset: 13633},
									label: "style",
									expr: &ruleRefExpr{
										pos:  position{line: 462, col: 11, offset: 13639},
										name: "JoinStyle",
									},
								},
								&litMatcher{
									pos:        position{line: 462, col: 22, offset: 13650},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 462, col: 30, offset: 13658},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 462, col: 32, offset: 13660},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 462, col: 36, offset: 13664},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 462, col: 44, offset: 13672},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 462, col: 52, offset: 13680},
										expr: &seqExpr{
											pos: position{line: 462, col: 53, offset: 13681},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 462, col: 53, offset: 13681},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 462, col: 55, offset: 13683},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinStyle",
			pos:  position{line: 470, col: 1, offset: 13937},
			expr: &choiceExpr{
				pos: position{line: 471, col: 5, offset: 13951},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 471, col: 5, offset: 13951},
						run: (*parser).callonJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 471, col: 5, offset: 13951},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 471, col: 5, offset: 13951},
									val:        "inner",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 471, col: 14, offset: 13960},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 472, col: 5, offset: 13990},
						run: (*parser).callonJoinStyle6,
						expr: &seqExpr{
							pos: position{line: 472, col: 5, offset: 13990},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 472, col: 5, offset: 13990},
									val:        "left",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 472, col: 14, offset: 13999},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 473, col: 5, offset: 14028},
						run: (*parser).callonJoinStyle10,
						expr: &seqExpr{
							pos: position{line: 473, col: 5, offset: 14028},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 473, col: 5, offset: 14028},
									val:        "right",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 473, col: 14, offset: 14037},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 474, col: 5, offset: 14067},
						run: (*parser).callonJoinStyle14,
						expr: &litMatcher{
							pos:        position{line: 474, col: 5, offset: 14067},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 476, col: 1, offset: 14103},
			expr: &choiceExpr{
				pos: position{line: 477, col: 5, offset: 14115},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 477, col: 5, offset: 14115},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 478, col: 5, offset: 14124},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 478, col: 5, offset: 14124},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 478, col: 5, offset: 14124},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 478, col: 9, offset: 14128},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 478, col: 14, offset: 14133},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 478, col: 19, offset: 14138},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SampleProc",
			pos:  position{line: 480, col: 1, offset: 14164},
			expr: &actionExpr{
				pos: position{line: 481, col: 5, offset: 14179},
				run: (*parser).callonSampleProc1,
				expr: &seqExpr{
					pos: position{line: 481, col: 5, offset: 14179},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 481, col: 5, offset: 14179},
							val:        "sample",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 481, col: 15, offset: 14189},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 481, col: 17, offset: 14191},
								name: "SampleExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "SampleExpr",
			pos:  position{line: 518, col: 1, offset: 15486},
			expr: &choiceExpr{
				pos: position{line: 519, col: 5, offset: 15501},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 519, col: 5, offset: 15501},
						run: (*parser).callonSampleExpr2,
						expr: &seqExpr{
							pos: position{line: 519, col: 5, offset: 15501},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 519, col: 5, offset: 15501},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 519, col: 7, offset: 15503},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 519, col: 12, offset: 15508},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 520, col: 5, offset: 15537},
						run: (*parser).callonSampleExpr7,
						expr: &litMatcher{
							pos:        position{line: 520, col: 5, offset: 15537},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 524, col: 1, offset: 15620},
			expr: &ruleRefExpr{
				pos:  position{line: 524, col: 8, offset: 15627},
				name: "DerefExpr",
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 526, col: 1, offset: 15638},
			expr: &ruleRefExpr{
				pos:  position{line: 526, col: 13, offset: 15650},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 528, col: 1, offset: 15656},
			expr: &actionExpr{
				pos: position{line: 529, col: 5, offset: 15671},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 529, col: 5, offset: 15671},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 529, col: 5, offset: 15671},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 529, col: 11, offset: 15677},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 529, col: 21, offset: 15687},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 529, col: 26, offset: 15692},
								expr: &seqExpr{
									pos: position{line: 529, col: 27, offset: 15693},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 529, col: 27, offset: 15693},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 529, col: 30, offset: 15696},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 529, col: 34, offset: 15700},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 529, col: 37, offset: 15703},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 539, col: 1, offset: 15902},
			expr: &actionExpr{
				pos: position{line: 540, col: 5, offset: 15917},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 540, col: 5, offset: 15917},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 540, col: 5, offset: 15917},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 540, col: 9, offset: 15921},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 540, col: 14, offset: 15926},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 540, col: 17, offset: 15929},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 540, col: 21, offset: 15933},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 540, col: 24, offset: 15936},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 540, col: 28, offset: 15940},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 542, col: 1, offset: 16031},
			expr: &ruleRefExpr{
				pos:  position{line: 542, col: 8, offset: 16038},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 544, col: 1, offset: 16055},
			expr: &choiceExpr{
				pos: position{line: 545, col: 5, offset: 16075},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 545, col: 5, offset: 16075},
						run: (*parser).callonConditionalExpr2,
						expr: &seqExpr{
							pos: position{line: 545, col: 5, offset: 16075},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 545, col: 5, offset: 16075},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 545, col: 15, offset: 16085},
										name: "LogicalOrExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 545, col: 29, offset: 16099},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 545, col: 32, offset: 16102},
									val:        "?",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 545, col: 36, offset: 16106},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 545, col: 39, offset: 16109},
									label: "thenClause",
									expr: &ruleRefExpr{
										pos:  position{line: 545, col: 50, offset: 16120},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 545, col: 55, offset: 16125},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 545, col: 58, offset: 16128},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 545, col: 62, offset: 16132},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 545, col: 65, offset: 16135},
									label: "elseClause",
									expr: &ruleRefExpr{
										pos:  position{line: 545, col: 76, offset: 16146},
										name: "Expr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 548, col: 5, offset: 16286},
						name: "LogicalOrExpr",
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 550, col: 1, offset: 16301},
			expr: &actionExpr{
				pos: position{line: 551, col: 5, offset: 16319},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 551, col: 5, offset: 16319},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 551, col: 5, offset: 16319},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 551, col: 11, offset: 16325},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 552, col: 5, offset: 16344},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 552, col: 10, offset: 16349},
								expr: &actionExpr{
									pos: position{line: 552, col: 11, offset: 16350},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 552, col: 11, offset: 16350},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 552, col: 11, offset: 16350},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 552, col: 14, offset: 16353},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 552, col: 17, offset: 16356},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 552, col: 25, offset: 16364},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 552, col: 28, offset: 16367},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 552, col: 33, offset: 16372},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 556, col: 1, offset: 16490},
			expr: &actionExpr{
				pos: position{line: 557, col: 5, offset: 16509},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 557, col: 5, offset: 16509},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 557, col: 5, offset: 16509},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 557, col: 11, offset: 16515},
								name: "EqualityCompareExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 558, col: 5, offset: 16539},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 558, col: 10, offset: 16544},
								expr: &actionExpr{
									pos: position{line: 558, col: 11, offset: 16545},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 558, col: 11, offset: 16545},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 558, col: 11, offset: 16545},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 558, col: 14, offset: 16548},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 558, col: 17, offset: 16551},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 558, col: 26, offset: 16560},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 558, col: 29, offset: 16563},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 558, col: 34, offset: 16568},
													name: "EqualityCompareExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityCompareExpr",
			pos:  position{line: 562, col: 1, offset: 16691},
			expr: &actionExpr{
				pos: position{line: 563, col: 5, offset: 16715},
				run: (*parser).callonEqualityCompareExpr1,
				expr: &seqExpr{
					pos: position{line: 563, col: 5, offset: 16715},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 563, col: 5, offset: 16715},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 563, col: 11, offset: 16721},
								name: "RelativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 564, col: 5, offset: 16738},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 564, col: 10, offset: 16743},
								expr: &actionExpr{
									pos: position{line: 564, col: 11, offset: 16744},
									run: (*parser).callonEqualityCompareExpr7,
									expr: &seqExpr{
										pos: position{line: 564, col: 11, offset: 16744},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 564, col: 11, offset: 16744},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 564, col: 14, offset: 16747},
												label: "comp",
												expr: &ruleRefExpr{
													pos:  position{line: 564, col: 19, offset: 16752},
													name: "EqualityComparator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 564, col: 38, offset: 16771},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 564, col: 41, offset: 16774},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 564, col: 46, offset: 16779},
													name: "RelativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityOperator",
			pos:  position{line: 568, col: 1, offset: 16897},
			expr: &actionExpr{
				pos: position{line: 569, col: 5, offset: 16918},
				run: (*parser).callonEqualityOperator1,
				expr: &choiceExpr{
					pos: position{line: 569, col: 6, offset: 16919},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 569, col: 6, offset: 16919},
							val:        "=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 569, col: 12, offset: 16925},
							val:        "!=",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "EqualityComparator",
			pos:  position{line: 571, col: 1, offset: 16963},
			expr: &choiceExpr{
				pos: position{line: 572, col: 5, offset: 16986},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 572, col: 5, offset: 16986},
						name: "EqualityOperator",
					},
					&actionExpr{
						pos: position{line: 573, col: 5, offset: 17007},
						run: (*parser).callonEqualityComparator3,
						expr: &litMatcher{
							pos:        position{line: 573, col: 5, offset: 17007},
							val:        "in",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RelativeExpr",
			pos:  position{line: 575, col: 1, offset: 17044},
			expr: &actionExpr{
				pos: position{line: 576, col: 5, offset: 17061},
				run: (*parser).callonRelativeExpr1,
				expr: &seqExpr{
					pos: position{line: 576, col: 5, offset: 17061},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 576, col: 5, offset: 17061},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 576, col: 11, offset: 17067},
								name: "AdditiveExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 577, col: 5, offset: 17084},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 577, col: 10, offset: 17089},
								expr: &actionExpr{
									pos: position{line: 577, col: 11, offset: 17090},
									run: (*parser).callonRelativeExpr7,
									expr: &seqExpr{
										pos: position{line: 577, col: 11, offset: 17090},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 577, col: 11, offset: 17090},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 577, col: 14, offset: 17093},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 577, col: 17, offset: 17096},
													name: "RelativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 577, col: 34, offset: 17113},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 577, col: 37, offset: 17116},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 577, col: 42, offset: 17121},
													name: "AdditiveExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeOperator",
			pos:  position{line: 581, col: 1, offset: 17237},
			expr: &actionExpr{
				pos: position{line: 581, col: 20, offset: 17256},
				run: (*parser).callonRelativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 581, col: 21, offset: 17257},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 581, col: 21, offset: 17257},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 581, col: 28, offset: 17264},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 581, col: 34, offset: 17270},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 581, col: 41, offset: 17277},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 583, col: 1, offset: 17314},
			expr: &actionExpr{
				pos: position{line: 584, col: 5, offset: 17331},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 584, col: 5, offset: 17331},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 584, col: 5, offset: 17331},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 584, col: 11, offset: 17337},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 585, col: 5, offset: 17360},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 585, col: 10, offset: 17365},
								expr: &actionExpr{
									pos: position{line: 585, col: 11, offset: 17366},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 585, col: 11, offset: 17366},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 585, col: 11, offset: 17366},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 585, col: 14, offset: 17369},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 585, col: 17, offset: 17372},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 585, col: 34, offset: 17389},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 585, col: 37, offset: 17392},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 585, col: 42, offset: 17397},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 589, col: 1, offset: 17519},
			expr: &actionExpr{
				pos: position{line: 589, col: 20, offset: 17538},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 589, col: 21, offset: 17539},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 589, col: 21, offset: 17539},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 589, col: 27, offset: 17545},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 591, col: 1, offset: 17582},
			expr: &actionExpr{
				pos: position{line: 592, col: 5, offset: 17605},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 592, col: 5, offset: 17605},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 592, col: 5, offset: 17605},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 592, col: 11, offset: 17611},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 593, col: 5, offset: 17623},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 593, col: 10, offset: 17628},
								expr: &actionExpr{
									pos: position{line: 593, col: 11, offset: 17629},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 593, col: 11, offset: 17629},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 593, col: 11, offset: 17629},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 593, col: 14, offset: 17632},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 593, col: 17, offset: 17635},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 593, col: 40, offset: 17658},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 593, col: 43, offset: 17661},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 593, col: 48, offset: 17666},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 597, col: 1, offset: 17777},
			expr: &actionExpr{
				pos: position{line: 597, col: 26, offset: 17802},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 597, col: 27, offset: 17803},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 597, col: 27, offset: 17803},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 597, col: 33, offset: 17809},
							val:        "/",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 599, col: 1, offset: 17846},
			expr: &choiceExpr{
				pos: position{line: 600, col: 5, offset: 17858},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 600, col: 5, offset: 17858},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 600, col: 5, offset: 17858},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 600, col: 5, offset: 17858},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 600, col: 9, offset: 17862},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 600, col: 12, offset: 17865},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 600, col: 14, offset: 17867},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 603, col: 5, offset: 17976},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 605, col: 1, offset: 17986},
			expr: &choiceExpr{
				pos: position{line: 606, col: 5, offset: 17999},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 606, col: 5, offset: 17999},
						name: "SelectExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 607, col: 5, offset: 18014},
						name: "MatchExpr",
					},
					&actionExpr{
						pos: position{line: 608, col: 5, offset: 18028},
						run: (*parser).callonFuncExpr4,
						expr: &seqExpr{
							pos: position{line: 608, col: 5, offset: 18028},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 608, col: 5, offset: 18028},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 608, col: 9, offset: 18032},
										name: "TypeLiteral",
									},
								},
								&notExpr{
									pos: position{line: 608, col: 21, offset: 18044},
									expr: &seqExpr{
										pos: position{line: 608, col: 23, offset: 18046},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 608, col: 23, offset: 18046},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 608, col: 26, offset: 18049},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 609, col: 5, offset: 18078},
						run: (*parser).callonFuncExpr12,
						expr: &seqExpr{
							pos: position{line: 609, col: 5, offset: 18078},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 609, col: 5, offset: 18078},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 609, col: 11, offset: 18084},
										name: "Cast",
									},
								},
								&labeledExpr{
									pos:   position{line: 609, col: 16, offset: 18089},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 609, col: 21, offset: 18094},
										expr: &ruleRefExpr{
											pos:  position{line: 609, col: 22, offset: 18095},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 612, col: 5, offset: 18166},
						run: (*parser).callonFuncExpr19,
						expr: &seqExpr{
							pos: position{line: 612, col: 5, offset: 18166},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 612, col: 5, offset: 18166},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 612, col: 11, offset: 18172},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 612, col: 20, offset: 18181},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 612, col: 25, offset: 18186},
										expr: &ruleRefExpr{
											pos:  position{line: 612, col: 26, offset: 18187},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 615, col: 5, offset: 18258},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 616, col: 5, offset: 18272},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FuncGuard",
			pos:  position{line: 618, col: 1, offset: 18281},
			expr: &seqExpr{
				pos: position{line: 618, col: 13, offset: 18293},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 618, col: 13, offset: 18293},
						name: "NotFuncs",
					},
					&ruleRefExpr{
						pos:  position{line: 618, col: 22, offset: 18302},
						name: "__",
					},
					&litMatcher{
						pos:        position{line: 618, col: 25, offset: 18305},
						val:        "(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "NotFuncs",
			pos:  position{line: 620, col: 1, offset: 18310},
			expr: &choiceExpr{
				pos: position{line: 621, col: 5, offset: 18323},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 621, col: 5, offset: 18323},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 622, col: 5, offset: 18333},
						val:        "match",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 623, col: 5, offset: 18345},
						val:        "select",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 624, col: 5, offset: 18358},
						val:        "type",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "MatchExpr",
			pos:  position{line: 626, col: 1, offset: 18366},
			expr: &actionExpr{
				pos: position{line: 627, col: 5, offset: 18380},
				run: (*parser).callonMatchExpr1,
				expr: &seqExpr{
					pos: position{line: 627, col: 5, offset: 18380},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 627, col: 5, offset: 18380},
							val:        "match",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 627, col: 13, offset: 18388},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 627, col: 16, offset: 18391},
							val:        "(",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 627, col: 20, offset: 18395},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 627, col: 25, offset: 18400},
								name: "SearchBoolean",
							},
						},
						&litMatcher{
							pos:        position{line: 627, col: 39, offset: 18414},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SelectExpr",
			pos:  position{line: 629, col: 1, offset: 18440},
			expr: &actionExpr{
				pos: position{line: 630, col: 5, offset: 18455},
				run: (*parser).callonSelectExpr1,
				expr: &seqExpr{
					pos: position{line: 630, col: 5, offset: 18455},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 630, col: 5, offset: 18455},
							val:        "select",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 630, col: 14, offset: 18464},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 630, col: 17, offset: 18467},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 630, col: 21, offset: 18471},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 630, col: 24, offset: 18474},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 630, col: 29, offset: 18479},
								name: "Exprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 630, col: 35, offset: 18485},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 630, col: 38, offset: 18488},
							val:        ")",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 630, col: 42, offset: 18492},
							label: "methods",
							expr: &ruleRefExpr{
								pos:  position{line: 630, col: 50, offset: 18500},
								name: "Methods",
							},
						},
					},
				},
			},
		},
		{
			name: "Methods",
			pos:  position{line: 638, col: 1, offset: 18898},
			expr: &choiceExpr{
				pos: position{line: 639, col: 5, offset: 18910},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 639, col: 5, offset: 18910},
						run: (*parser).callonMethods2,
						expr: &labeledExpr{
							pos:   position{line: 639, col: 5, offset: 18910},
							label: "methods",
							expr: &oneOrMoreExpr{
								pos: position{line: 639, col: 13, offset: 18918},
								expr: &ruleRefExpr{
									pos:  position{line: 639, col: 13, offset: 18918},
									name: "Method",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 640, col: 5, offset: 18954},
						run: (*parser).callonMethods6,
						expr: &litMatcher{
							pos:        position{line: 640, col: 5, offset: 18954},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Method",
			pos:  position{line: 642, col: 1, offset: 18978},
			expr: &actionExpr{
				pos: position{line: 643, col: 5, offset: 18989},
				run: (*parser).callonMethod1,
				expr: &seqExpr{
					pos: position{line: 643, col: 5, offset: 18989},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 643, col: 5, offset: 18989},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 643, col: 8, offset: 18992},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 643, col: 12, offset: 18996},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 643, col: 15, offset: 18999},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 643, col: 17, offset: 19001},
								name: "Function",
							},
						},
					},
				},
			},
		},
		{
			name: "Cast",
			pos:  position{line: 645, col: 1, offset: 19029},
			expr: &actionExpr{
				pos: position{line: 646, col: 5, offset: 19038},
				run: (*parser).callonCast1,
				expr: &seqExpr{
					pos: position{line: 646, col: 5, offset: 19038},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 646, col: 5, offset: 19038},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 646, col: 9, offset: 19042},
								name: "CastType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 646, col: 18, offset: 19051},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 646, col: 21, offset: 19054},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 646, col: 25, offset: 19058},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 646, col: 28, offset: 19061},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 646, col: 33, offset: 19066},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 646, col: 38, offset: 19071},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 646, col: 41, offset: 19074},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 650, col: 1, offset: 19171},
			expr: &actionExpr{
				pos: position{line: 651, col: 5, offset: 19184},
				run: (*parser).callonFunction1,
				expr: &seqExpr{
					pos: position{line: 651, col: 5, offset: 19184},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 651, col: 5, offset: 19184},
							expr: &ruleRefExpr{
								pos:  position{line: 651, col: 6, offset: 19185},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 651, col: 16, offset: 19195},
							label: "fn",
							expr: &ruleRefExpr{
								pos:  position{line: 651, col: 19, offset: 19198},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 651, col: 34, offset: 19213},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 651, col: 37, offset: 19216},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 651, col: 41, offset: 19220},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 651, col: 44, offset: 19223},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 651, col: 49, offset: 19228},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 651, col: 63, offset: 19242},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 651, col: 66, offset: 19245},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OptionalExprs",
			pos:  position{line: 655, col: 1, offset: 19341},
			expr: &choiceExpr{
				pos: position{line: 656, col: 5, offset: 19359},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 656, col: 5, offset: 19359},
						name: "Exprs",
					},
					&actionExpr{
						pos: position{line: 657, col: 5, offset: 19369},
						run: (*parser).callonOptionalExprs3,
						expr: &ruleRefExpr{
							pos:  position{line: 657, col: 5, offset: 19369},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 659, col: 1, offset: 19405},
			expr: &actionExpr{
				pos: position{line: 660, col: 5, offset: 19415},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 660, col: 5, offset: 19415},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 660, col: 5, offset: 19415},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 660, col: 11, offset: 19421},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 660, col: 16, offset: 19426},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 660, col: 21, offset: 19431},
								expr: &actionExpr{
									pos: position{line: 660, col: 22, offset: 19432},
									run: (*parser).callonExprs7,
									expr: &seqExpr{
										pos: position{line: 660, col: 22, offset: 19432},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 660, col: 22, offset: 19432},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 660, col: 25, offset: 19435},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 660, col: 29, offset: 19439},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 660, col: 32, offset: 19442},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 660, col: 34, offset: 19444},
													name: "Expr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 664, col: 1, offset: 19553},
			expr: &choiceExpr{
				pos: position{line: 665, col: 5, offset: 19567},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 665, col: 5, offset: 19567},
						run: (*parser).callonDerefExpr2,
						expr: &seqExpr{
							pos: position{line: 665, col: 5, offset: 19567},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 665, col: 5, offset: 19567},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 665, col: 11, offset: 19573},
										name: "DotID",
									},
								},
								&labeledExpr{
									pos:   position{line: 665, col: 17, offset: 19579},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 665, col: 22, offset: 19584},
										expr: &ruleRefExpr{
											pos:  position{line: 665, col: 23, offset: 19585},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 668, col: 5, offset: 19656},
						run: (*parser).callonDerefExpr9,
						expr: &seqExpr{
							pos: position{line: 668, col: 5, offset: 19656},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 668, col: 5, offset: 19656},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 668, col: 11, offset: 19662},
										name: "RootRecord",
									},
								},
								&labeledExpr{
									pos:   position{line: 668, col: 22, offset: 19673},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 668, col: 27, offset: 19678},
										expr: &ruleRefExpr{
											pos:  position{line: 668, col: 28, offset: 19679},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 671, col: 5, offset: 19750},
						run: (*parser).callonDerefExpr16,
						expr: &seqExpr{
							pos: position{line: 671, col: 5, offset: 19750},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 671, col: 5, offset: 19750},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 671, col: 11, offset: 19756},
										name: "Identifier",
									},
								},
								&labeledExpr{
									pos:   position{line: 671, col: 22, offset: 19767},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 671, col: 27, offset: 19772},
										expr: &ruleRefExpr{
											pos:  position{line: 671, col: 28, offset: 19773},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 674, col: 5, offset: 19844},
						run: (*parser).callonDerefExpr23,
						expr: &litMatcher{
							pos:        position{line: 674, col: 5, offset: 19844},
							val:        ".",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RootRecord",
			pos:  position{line: 678, col: 1, offset: 19913},
			expr: &actionExpr{
				pos: position{line: 678, col: 14, offset: 19926},
				run: (*parser).callonRootRecord1,
				expr: &litMatcher{
					pos:        position{line: 678, col: 14, offset: 19926},
					val:        "this",
					ignoreCase: false,
				},
			},
		},
		{
			name: "DotID",
			pos:  position{line: 680, col: 1, offset: 19988},
			expr: &choiceExpr{
				pos: position{line: 681, col: 5, offset: 19998},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 681, col: 5, offset: 19998},
						run: (*parser).callonDotID2,
						expr: &seqExpr{
							pos: position{line: 681, col: 5, offset: 19998},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 681, col: 5, offset: 19998},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 681, col: 9, offset: 20002},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 681, col: 15, offset: 20008},
										name: "Identifier",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 690, col: 5, offset: 20224},
						run: (*parser).callonDotID7,
						expr: &seqExpr{
							pos: position{line: 690, col: 5, offset: 20224},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 690, col: 5, offset: 20224},
									val:        ".",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 690, col: 9, offset: 20228},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 690, col: 13, offset: 20232},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 690, col: 18, offset: 20237},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 690, col: 23, offset: 20242},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 700, col: 1, offset: 20447},
			expr: &choiceExpr{
				pos: position{line: 701, col: 5, offset: 20457},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 701, col: 5, offset: 20457},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 701, col: 5, offset: 20457},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 701, col: 5, offset: 20457},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 701, col: 9, offset: 20461},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 701, col: 14, offset: 20466},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 701, col: 27, offset: 20479},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 701, col: 30, offset: 20482},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 701, col: 34, offset: 20486},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 701, col: 37, offset: 20489},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 701, col: 40, offset: 20492},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 701, col: 53, offset: 20505},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 707, col: 5, offset: 20676},
						run: (*parser).callonDeref13,
						expr: &seqExpr{
							pos: position{line: 707, col: 5, offset: 20676},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 707, col: 5, offset: 20676},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 707, col: 9, offset: 20680},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 707, col: 12, offset: 20683},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 707, col: 16, offset: 20687},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 707, col: 19, offset: 20690},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 707, col: 22, offset: 20693},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 707, col: 35, offset: 20706},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 713, col: 5, offset: 20877},
						run: (*parser).callonDeref22,
						expr: &seqExpr{
							pos: position{line: 713, col: 5, offset: 20877},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 713, col: 5, offset: 20877},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 713, col: 9, offset: 20881},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 713, col: 14, offset: 20886},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 713, col: 27, offset: 20899},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 713, col: 30, offset: 20902},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 713, col: 34, offset: 20906},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 713, col: 37, offset: 20909},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 719, col: 5, offset: 21082},
						run: (*parser).callonDeref31,
						expr: &seqExpr{
							pos: position{line: 719, col: 5, offset: 21082},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 719, col: 5, offset: 21082},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 719, col: 9, offset: 21086},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 719, col: 14, offset: 21091},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 719, col: 19, offset: 21096},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 720, col: 5, offset: 21145},
						run: (*parser).callonDeref37,
						expr: &seqExpr{
							pos: position{line: 720, col: 5, offset: 21145},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 720, col: 5, offset: 21145},
									val:        ".",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 720, col: 9, offset: 21149},
									expr: &litMatcher{
										pos:        position{line: 720, col: 11, offset: 21151},
										val:        ".",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 720, col: 16, offset: 21156},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 720, col: 19, offset: 21159},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 722, col: 1, offset: 21210},
			expr: &choiceExpr{
				pos: position{line: 723, col: 5, offset: 21222},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 723, col: 5, offset: 21222},
						name: "Literal",
					},
					&ruleRefExpr{
						pos:  position{line: 724, col: 5, offset: 21234},
						name: "Record",
					},
					&ruleRefExpr{
						pos:  position{line: 725, col: 5, offset: 21245},
						name: "Array",
					},
					&ruleRefExpr{
						pos:  position{line: 726, col: 5, offset: 21255},
						name: "Set",
					},
					&ruleRefExpr{
						pos:  position{line: 727, col: 5, offset: 21263},
						name: "Map",
					},
					&actionExpr{
						pos: position{line: 728, col: 5, offset: 21271},
						run: (*parser).callonPrimary7,
						expr: &seqExpr{
							pos: position{line: 728, col: 5, offset: 21271},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 728, col: 5, offset: 21271},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 728, col: 9, offset: 21275},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 728, col: 12, offset: 21278},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 728, col: 17, offset: 21283},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 728, col: 22, offset: 21288},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 728, col: 25, offset: 21291},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Record",
			pos:  position{line: 730, col: 1, offset: 21317},
			expr: &actionExpr{
				pos: position{line: 731, col: 5, offset: 21328},
				run: (*parser).callonRecord1,
				expr: &seqExpr{
					pos: position{line: 731, col: 5, offset: 21328},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 731, col: 5, offset: 21328},
							val:        "{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 731, col: 9, offset: 21332},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 731, col: 12, offset: 21335},
							label: "fields",
							expr: &ruleRefExpr{
								pos:  position{line: 731, col: 19, offset: 21342},
								name: "Fields",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 731, col: 26, offset: 21349},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 731, col: 29, offset: 21352},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Fields",
			pos:  position{line: 735, col: 1, offset: 21445},
			expr: &actionExpr{
				pos: position{line: 736, col: 5, offset: 21456},
				run: (*parser).callonFields1,
				expr: &seqExpr{
					pos: position{line: 736, col: 5, offset: 21456},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 736, col: 5, offset: 21456},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 736, col: 11, offset: 21462},
								name: "Field",
							},
						},
						&labeledExpr{
							pos:   position{line: 736, col: 17, offset: 21468},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 736, col: 22, offset: 21473},
								expr: &ruleRefExpr{
									pos:  position{line: 736, col: 22, offset: 21473},
									name: "FieldTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FieldTail",
			pos:  position{line: 740, col: 1, offset: 21564},
			expr: &actionExpr{
				pos: position{line: 740, col: 13, offset: 21576},
				run: (*parser).callonFieldTail1,
				expr: &seqExpr{
					pos: position{line: 740, col: 13, offset: 21576},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 740, col: 13, offset: 21576},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 740, col: 16, offset: 21579},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 740, col: 20, offset: 21583},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 740, col: 23, offset: 21586},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 740, col: 25, offset: 21588},
								name: "Field",
							},
						},
					},
				},
			},
		},
		{
			name: "Field",
			pos:  position{line: 742, col: 1, offset: 21613},
			expr: &actionExpr{
				pos: position{line: 743, col: 5, offset: 21623},
				run: (*parser).callonField1,
				expr: &seqExpr{
					pos: position{line: 743, col: 5, offset: 21623},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 743, col: 5, offset: 21623},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 743, col: 10, offset: 21628},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 743, col: 20, offset: 21638},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 743, col: 23, offset: 21641},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 743, col: 27, offset: 21645},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 743, col: 30, offset: 21648},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 743, col: 36, offset: 21654},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Array",
			pos:  position{line: 747, col: 1, offset: 21739},
			expr: &actionExpr{
				pos: position{line: 748, col: 5, offset: 21749},
				run: (*parser).callonArray1,
				expr: &seqExpr{
					pos: position{line: 748, col: 5, offset: 21749},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 748, col: 5, offset: 21749},
							val:        "[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 748, col: 9, offset: 21753},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 748, col: 12, offset: 21756},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 748, col: 18, offset: 21762},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 748, col: 32, offset: 21776},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 748, col: 35, offset: 21779},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Set",
			pos:  position{line: 752, col: 1, offset: 21869},
			expr: &actionExpr{
				pos: position{line: 753, col: 5, offset: 21877},
				run: (*parser).callonSet1,
				expr: &seqExpr{
					pos: position{line: 753, col: 5, offset: 21877},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 753, col: 5, offset: 21877},
							val:        "|[",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 753, col: 10, offset: 21882},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 753, col: 13, offset: 21885},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 753, col: 19, offset: 21891},
								name: "OptionalExprs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 753, col: 33, offset: 21905},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 753, col: 36, offset: 21908},
							val:        "]|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Map",
			pos:  position{line: 757, col: 1, offset: 21997},
			expr: &actionExpr{
				pos: position{line: 758, col: 5, offset: 22005},
				run: (*parser).callonMap1,
				expr: &seqExpr{
					pos: position{line: 758, col: 5, offset: 22005},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 758, col: 5, offset: 22005},
							val:        "|{",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 758, col: 10, offset: 22010},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 758, col: 13, offset: 22013},
							label: "exprs",
							expr: &ruleRefExpr{
								pos:  position{line: 758, col: 19, offset: 22019},
								name: "Entries",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 758, col: 27, offset: 22027},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 758, col: 30, offset: 22030},
							val:        "}|",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Entries",
			pos:  position{line: 762, col: 1, offset: 22121},
			expr: &choiceExpr{
				pos: position{line: 763, col: 5, offset: 22133},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 763, col: 5, offset: 22133},
						run: (*parser).callonEntries2,
						expr: &seqExpr{
							pos: position{line: 763, col: 5, offset: 22133},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 763, col: 5, offset: 22133},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 763, col: 11, offset: 22139},
										name: "Entry",
									},
								},
								&labeledExpr{
									pos:   position{line: 763, col: 17, offset: 22145},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 763, col: 22, offset: 22150},
										expr: &ruleRefExpr{
											pos:  position{line: 763, col: 22, offset: 22150},
											name: "EntryTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 766, col: 5, offset: 22244},
						run: (*parser).callonEntries9,
						expr: &ruleRefExpr{
							pos:  position{line: 766, col: 5, offset: 22244},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "EntryTail",
			pos:  position{line: 769, col: 1, offset: 22281},
			expr: &actionExpr{
				pos: position{line: 769, col: 13, offset: 22293},
				run: (*parser).callonEntryTail1,
				expr: &seqExpr{
					pos: position{line: 769, col: 13, offset: 22293},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 769, col: 13, offset: 22293},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 769, col: 16, offset: 22296},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 769, col: 20, offset: 22300},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 769, col: 23, offset: 22303},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 769, col: 25, offset: 22305},
								name: "Entry",
							},
						},
					},
				},
			},
		},
		{
			name: "Entry",
			pos:  position{line: 771, col: 1, offset: 22330},
			expr: &actionExpr{
				pos: position{line: 772, col: 5, offset: 22340},
				run: (*parser).callonEntry1,
				expr: &seqExpr{
					pos: position{line: 772, col: 5, offset: 22340},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 772, col: 5, offset: 22340},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 772, col: 9, offset: 22344},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 772, col: 14, offset: 22349},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 772, col: 17, offset: 22352},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 772, col: 21, offset: 22356},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 772, col: 24, offset: 22359},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 772, col: 30, offset: 22365},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLProc",
			pos:  position{line: 778, col: 1, offset: 22472},
			expr: &actionExpr{
				pos: position{line: 779, col: 5, offset: 22484},
				run: (*parser).callonSQLProc1,
				expr: &seqExpr{
					pos: position{line: 779, col: 5, offset: 22484},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 779, col: 5, offset: 22484},
							label: "selection",
							expr: &ruleRefExpr{
								pos:  position{line: 779, col: 15, offset: 22494},
								name: "SQLSelect",
							},
						},
						&labeledExpr{
							pos:   position{line: 780, col: 5, offset: 22508},
							label: "from",
							expr: &ruleRefExpr{
								pos:  position{line: 780, col: 10, offset: 22513},
								name: "SQLFrom",
							},
						},
						&labeledExpr{
							pos:   position{line: 781, col: 5, offset: 22525},
							label: "joins",
							expr: &ruleRefExpr{
								pos:  position{line: 781, col: 11, offset: 22531},
								name: "SQLJoins",
							},
						},
						&labeledExpr{
							pos:   position{line: 782, col: 5, offset: 22544},
							label: "where",
							expr: &ruleRefExpr{
								pos:  position{line: 782, col: 11, offset: 22550},
								name: "SQLWhere",
							},
						},
						&labeledExpr{
							pos:   position{line: 783, col: 5, offset: 22563},
							label: "groupby",
							expr: &ruleRefExpr{
								pos:  position{line: 783, col: 13, offset: 22571},
								name: "SQLGroupBy",
							},
						},
						&labeledExpr{
							pos:   position{line: 784, col: 5, offset: 22586},
							label: "having",
							expr: &ruleRefExpr{
								pos:  position{line: 784, col: 12, offset: 22593},
								name: "SQLHaving",
							},
						},
						&labeledExpr{
							pos:   position{line: 785, col: 5, offset: 22607},
							label: "orderby",
							expr: &ruleRefExpr{
								pos:  position{line: 785, col: 13, offset: 22615},
								name: "SQLOrderBy",
							},
						},
						&labeledExpr{
							pos:   position{line: 786, col: 5, offset: 22630},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 786, col: 11, offset: 22636},
								name: "SQLLimit",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLSelect",
			pos:  position{line: 810, col: 1, offset: 23003},
			expr: &choiceExpr{
				pos: position{line: 811, col: 5, offset: 23017},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 811, col: 5, offset: 23017},
						run: (*parser).callonSQLSelect2,
						expr: &seqExpr{
							pos: position{line: 811, col: 5, offset: 23017},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 811, col: 5, offset: 23017},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 811, col: 12, offset: 23024},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 811, col: 14, offset: 23026},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 812, col: 5, offset: 23054},
						run: (*parser).callonSQLSelect7,
						expr: &seqExpr{
							pos: position{line: 812, col: 5, offset: 23054},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 812, col: 5, offset: 23054},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 812, col: 12, offset: 23061},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 812, col: 14, offset: 23063},
									label: "assignments",
									expr: &ruleRefExpr{
										pos:  position{line: 812, col: 26, offset: 23075},
										name: "SQLAssignments",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignment",
			pos:  position{line: 814, col: 1, offset: 23119},
			expr: &choiceExpr{
				pos: position{line: 815, col: 5, offset: 23137},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 815, col: 5, offset: 23137},
						run: (*parser).callonSQLAssignment2,
						expr: &seqExpr{
							pos: position{line: 815, col: 5, offset: 23137},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 815, col: 5, offset: 23137},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 815, col: 9, offset: 23141},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 815, col: 14, offset: 23146},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 815, col: 16, offset: 23148},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 815, col: 19, offset: 23151},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 815, col: 21, offset: 23153},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 815, col: 25, offset: 23157},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 816, col: 5, offset: 23251},
						run: (*parser).callonSQLAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 816, col: 5, offset: 23251},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 816, col: 10, offset: 23256},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLAssignments",
			pos:  position{line: 818, col: 1, offset: 23348},
			expr: &actionExpr{
				pos: position{line: 819, col: 5, offset: 23367},
				run: (*parser).callonSQLAssignments1,
				expr: &seqExpr{
					pos: position{line: 819, col: 5, offset: 23367},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 819, col: 5, offset: 23367},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 819, col: 11, offset: 23373},
								name: "SQLAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 819, col: 25, offset: 23387},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 819, col: 30, offset: 23392},
								expr: &actionExpr{
									pos: position{line: 819, col: 31, offset: 23393},
									run: (*parser).callonSQLAssignments7,
									expr: &seqExpr{
										pos: position{line: 819, col: 31, offset: 23393},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 819, col: 31, offset: 23393},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 819, col: 34, offset: 23396},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 819, col: 38, offset: 23400},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 819, col: 41, offset: 23403},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 819, col: 46, offset: 23408},
													name: "SQLAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SQLFrom",
			pos:  position{line: 823, col: 1, offset: 23529},
			expr: &choiceExpr{
				pos: position{line: 824, col: 5, offset: 23541},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 824, col: 5, offset: 23541},
						run: (*parser).callonSQLFrom2,
						expr: &seqExpr{
							pos: position{line: 824, col: 5, offset: 23541},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 824, col: 5, offset: 23541},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 824, col: 7, offset: 23543},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 824, col: 12, offset: 23548},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 824, col: 14, offset: 23550},
									label: "table",
									expr: &ruleRefExpr{
										pos:  position{line: 824, col: 20, offset: 23556},
										name: "SQLTable",
									},
								},
								&labeledExpr{
									pos:   position{line: 824, col: 29, offset: 23565},
									label: "alias",
									expr: &ruleRefExpr{
										pos:  position{line: 824, col: 35, offset: 23571},
										name: "SQLAlias",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 827, col: 5, offset: 23665},
						run: (*parser).callonSQLFrom11,
						expr: &seqExpr{
							pos: position{line: 827, col: 5, offset: 23665},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 827, col: 5, offset: 23665},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 827, col: 7, offset: 23667},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 827, col: 12, offset: 23672},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 827, col: 14, offset: 23674},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 828, col: 5, offset: 23702},
						run: (*parser).callonSQLFrom17,
						expr: &litMatcher{
							pos:        position{line: 828, col: 5, offset: 23702},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLAlias",
			pos:  position{line: 830, col: 1, offset: 23726},
			expr: &choiceExpr{
				pos: position{line: 831, col: 5, offset: 23739},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 831, col: 5, offset: 23739},
						run: (*parser).callonSQLAlias2,
						expr: &seqExpr{
							pos: position{line: 831, col: 5, offset: 23739},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 831, col: 5, offset: 23739},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 831, col: 7, offset: 23741},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 831, col: 10, offset: 23744},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 831, col: 12, offset: 23746},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 831, col: 15, offset: 23749},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 832, col: 5, offset: 23777},
						run: (*parser).callonSQLAlias9,
						expr: &seqExpr{
							pos: position{line: 832, col: 5, offset: 23777},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 832, col: 5, offset: 23777},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 832, col: 7, offset: 23779},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 832, col: 10, offset: 23782},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 833, col: 5, offset: 23810},
						run: (*parser).callonSQLAlias14,
						expr: &litMatcher{
							pos:        position{line: 833, col: 5, offset: 23810},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLTable",
			pos:  position{line: 835, col: 1, offset: 23834},
			expr: &ruleRefExpr{
				pos:  position{line: 836, col: 5, offset: 23847},
				name: "Expr",
			},
		},
		{
			name: "SQLJoins",
			pos:  position{line: 838, col: 1, offset: 23853},
			expr: &choiceExpr{
				pos: position{line: 839, col: 5, offset: 23866},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 839, col: 5, offset: 23866},
						run: (*parser).callonSQLJoins2,
						expr: &seqExpr{
							pos: position{line: 839, col: 5, offset: 23866},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 839, col: 5, offset: 23866},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 839, col: 11, offset: 23872},
										name: "SQLJoin",
									},
								},
								&labeledExpr{
									pos:   position{line: 839, col: 19, offset: 23880},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 839, col: 24, offset: 23885},
										expr: &actionExpr{
											pos: position{line: 839, col: 25, offset: 23886},
											run: (*parser).callonSQLJoins8,
											expr: &labeledExpr{
												pos:   position{line: 839, col: 25, offset: 23886},
												label: "join",
												expr: &ruleRefExpr{
													pos:  position{line: 839, col: 30, offset: 23891},
													name: "SQLJoin",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 842, col: 5, offset: 24009},
						run: (*parser).callonSQLJoins11,
						expr: &litMatcher{
							pos:        position{line: 842, col: 5, offset: 24009},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLJoin",
			pos:  position{line: 844, col: 1, offset: 24033},
			expr: &actionExpr{
				pos: position{line: 845, col: 5, offset: 24045},
				run: (*parser).callonSQLJoin1,
				expr: &seqExpr{
					pos: position{line: 845, col: 5, offset: 24045},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 845, col: 5, offset: 24045},
							label: "style",
							expr: &ruleRefExpr{
								pos:  position{line: 845, col: 11, offset: 24051},
								name: "SQLJoinStyle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 845, col: 24, offset: 24064},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 845, col: 26, offset: 24066},
							name: "JOIN",
						},
						&ruleRefExpr{
							pos:  position{line: 845, col: 31, offset: 24071},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 845, col: 33, offset: 24073},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 845, col: 39, offset: 24079},
								name: "SQLTable",
							},
						},
						&labeledExpr{
							pos:   position{line: 845, col: 48, offset: 24088},
							label: "alias",
							expr: &ruleRefExpr{
								pos:  position{line: 845, col: 54, offset: 24094},
								name: "SQLAlias",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 845, col: 63, offset: 24103},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 845, col: 65, offset: 24105},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 845, col: 68, offset: 24108},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 845, col: 70, offset: 24110},
							label: "leftKey",
							expr: &ruleRefExpr{
								pos:  position{line: 845, col: 78, offset: 24118},
								name: "JoinKey",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 845, col: 86, offset: 24126},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 845, col: 89, offset: 24129},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 845, col: 93, offset: 24133},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 845, col: 96, offset: 24136},
							label: "rightKey",
							expr: &ruleRefExpr{
								pos:  position{line: 845, col: 105, offset: 24145},
								name: "JoinKey",
							},
						},
					},
				},
			},
		},
		{
			name: "SQLJoinStyle",
			pos:  position{line: 864, col: 1, offset: 24380},
			expr: &choiceExpr{
				pos: position{line: 865, col: 5, offset: 24397},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 865, col: 5, offset: 24397},
						run: (*parser).callonSQLJoinStyle2,
						expr: &seqExpr{
							pos: position{line: 865, col: 5, offset: 24397},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 865, col: 5, offset: 24397},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 865, col: 7, offset: 24399},
									label: "style",
									expr: &choiceExpr{
										pos: position{line: 865, col: 14, offset: 24406},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 865, col: 14, offset: 24406},
												name: "LEFT",
											},
											&ruleRefExpr{
												pos:  position{line: 865, col: 21, offset: 24413},
												name: "RIGHT",
											},
											&ruleRefExpr{
												pos:  position{line: 865, col: 29, offset: 24421},
												name: "INNER",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 866, col: 5, offset: 24454},
						run: (*parser).callonSQLJoinStyle10,
						expr: &litMatcher{
							pos:        position{line: 866, col: 5, offset: 24454},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLWhere",
			pos:  position{line: 868, col: 1, offset: 24490},
			expr: &choiceExpr{
				pos: position{line: 869, col: 5, offset: 24503},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 869, col: 5, offset: 24503},
						run: (*parser).callonSQLWhere2,
						expr: &seqExpr{
							pos: position{line: 869, col: 5, offset: 24503},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 869, col: 5, offset: 24503},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 869, col: 7, offset: 24505},
									name: "WHERE",
								},
								&ruleRefExpr{
									pos:  position{line: 869, col: 13, offset: 24511},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 869, col: 15, offset: 24513},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 869, col: 20, offset: 24518},
										name: "SearchBoolean",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 870, col: 5, offset: 24557},
						run: (*parser).callonSQLWhere9,
						expr: &litMatcher{
							pos:        position{line: 870, col: 5, offset: 24557},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLGroupBy",
			pos:  position{line: 872, col: 1, offset: 24581},
			expr: &choiceExpr{
				pos: position{line: 873, col: 5, offset: 24596},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 873, col: 5, offset: 24596},
						run: (*parser).callonSQLGroupBy2,
						expr: &seqExpr{
							pos: position{line: 873, col: 5, offset: 24596},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 873, col: 5, offset: 24596},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 873, col: 7, offset: 24598},
									name: "GROUP",
								},
								&ruleRefExpr{
									pos:  position{line: 873, col: 13, offset: 24604},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 873, col: 15, offset: 24606},
									name: "BY",
								},
								&ruleRefExpr{
									pos:  position{line: 873, col: 18, offset: 24609},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 873, col: 20, offset: 24611},
									label: "columns",
									expr: &ruleRefExpr{
										pos:  position{line: 873, col: 28, offset: 24619},
										name: "FieldExprs",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 874, col: 5, offset: 24658},
						run: (*parser).callonSQLGroupBy11,
						expr: &litMatcher{
							pos:        position{line: 874, col: 5, offset: 24658},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLHaving",
			pos:  position{line: 876, col: 1, offset: 24682},
			expr: &choiceExpr{
				pos: position{line: 877, col: 5, offset: 24696},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 877, col: 5, offset: 24696},
						run: (*parser).callonSQLHaving2,
						expr: &seqExpr{
							pos: position{line: 877, col: 5, offset: 24696},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 877, col: 5, offset: 24696},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 877, col: 7, offset: 24698},
									name: "HAVING",
								},
								&ruleRefExpr{
									pos:  position{line: 877, col: 14, offset: 24705},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 877, col: 16, offset: 24707},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 877, col: 21, offset: 24712},
										name: "SearchBoolean",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 878, col: 5, offset: 24751},
						run: (*parser).callonSQLHaving9,
						expr: &litMatcher{
							pos:        position{line: 878, col: 5, offset: 24751},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLOrderBy",
			pos:  position{line: 880, col: 1, offset: 24775},
			expr: &choiceExpr{
				pos: position{line: 881, col: 5, offset: 24790},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 881, col: 5, offset: 24790},
						run: (*parser).callonSQLOrderBy2,
						expr: &seqExpr{
							pos: position{line: 881, col: 5, offset: 24790},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 881, col: 5, offset: 24790},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 881, col: 7, offset: 24792},
									name: "ORDER",
								},
								&ruleRefExpr{
									pos:  position{line: 881, col: 13, offset: 24798},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 881, col: 15, offset: 24800},
									name: "BY",
								},
								&ruleRefExpr{
									pos:  position{line: 881, col: 18, offset: 24803},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 881, col: 20, offset: 24805},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 881, col: 25, offset: 24810},
										name: "Exprs",
									},
								},
								&labeledExpr{
									pos:   position{line: 881, col: 31, offset: 24816},
									label: "order",
									expr: &ruleRefExpr{
										pos:  position{line: 881, col: 37, offset: 24822},
										name: "SQLOrder",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 884, col: 5, offset: 24935},
						run: (*parser).callonSQLOrderBy13,
						expr: &litMatcher{
							pos:        position{line: 884, col: 5, offset: 24935},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLOrder",
			pos:  position{line: 886, col: 1, offset: 24959},
			expr: &choiceExpr{
				pos: position{line: 887, col: 5, offset: 24972},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 887, col: 5, offset: 24972},
						run: (*parser).callonSQLOrder2,
						expr: &seqExpr{
							pos: position{line: 887, col: 5, offset: 24972},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 887, col: 5, offset: 24972},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 887, col: 7, offset: 24974},
									label: "dir",
									expr: &choiceExpr{
										pos: position{line: 887, col: 12, offset: 24979},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 887, col: 12, offset: 24979},
												name: "ASC",
											},
											&ruleRefExpr{
												pos:  position{line: 887, col: 18, offset: 24985},
												name: "DESC",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 888, col: 5, offset: 25015},
						run: (*parser).callonSQLOrder9,
						expr: &litMatcher{
							pos:        position{line: 888, col: 5, offset: 25015},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SQLLimit",
			pos:  position{line: 890, col: 1, offset: 25041},
			expr: &choiceExpr{
				pos: position{line: 891, col: 5, offset: 25054},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 891, col: 5, offset: 25054},
						run: (*parser).callonSQLLimit2,
						expr: &seqExpr{
							pos: position{line: 891, col: 5, offset: 25054},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 891, col: 5, offset: 25054},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 891, col: 7, offset: 25056},
									name: "LIMIT",
								},
								&ruleRefExpr{
									pos:  position{line: 891, col: 13, offset: 25062},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 891, col: 15, offset: 25064},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 891, col: 21, offset: 25070},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 892, col: 5, offset: 25101},
						run: (*parser).callonSQLLimit9,
						expr: &litMatcher{
							pos:        position{line: 892, col: 5, offset: 25101},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SELECT",
			pos:  position{line: 894, col: 1, offset: 25123},
			expr: &actionExpr{
				pos: position{line: 894, col: 10, offset: 25132},
				run: (*parser).callonSELECT1,
				expr: &litMatcher{
					pos:        position{line: 894, col: 10, offset: 25132},
					val:        "select",
					ignoreCase: true,
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 895, col: 1, offset: 25167},
			expr: &actionExpr{
				pos: position{line: 895, col: 6, offset: 25172},
				run: (*parser).callonAS1,
				expr: &litMatcher{
					pos:        position{line: 895, col: 6, offset: 25172},
					val:        "as",
					ignoreCase: true,
				},
			},
		},
		{
			name: "FROM",
			pos:  position{line: 896, col: 1, offset: 25199},
			expr: &actionExpr{
				pos: position{line: 896, col: 8, offset: 25206},
				run: (*parser).callonFROM1,
				expr: &litMatcher{
					pos:        position{line: 896, col: 8, offset: 25206},
					val:        "from",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JOIN",
			pos:  position{line: 897, col: 1, offset: 25237},
			expr: &actionExpr{
				pos: position{line: 897, col: 8, offset: 25244},
				run: (*parser).callonJOIN1,
				expr: &litMatcher{
					pos:        position{line: 897, col: 8, offset: 25244},
					val:        "join",
					ignoreCase: true,
				},
			},
		},
		{
			name: "WHERE",
			pos:  position{line: 898, col: 1, offset: 25275},
			expr: &actionExpr{
				pos: position{line: 898, col: 9, offset: 25283},
				run: (*parser).callonWHERE1,
				expr: &litMatcher{
					pos:        position{line: 898, col: 9, offset: 25283},
					val:        "where",
					ignoreCase: true,
				},
			},
		},
		{
			name: "GROUP",
			pos:  position{line: 899, col: 1, offset: 25316},
			expr: &actionExpr{
				pos: position{line: 899, col: 9, offset: 25324},
				run: (*parser).callonGROUP1,
				expr: &litMatcher{
					pos:        position{line: 899, col: 9, offset: 25324},
					val:        "group",
					ignoreCase: true,
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 900, col: 1, offset: 25357},
			expr: &ruleRefExpr{
				pos:  position{line: 900, col: 6, offset: 25362},
				name: "ByToken",
			},
		},
		{
			name: "HAVING",
			pos:  position{line: 901, col: 1, offset: 25370},
			expr: &actionExpr{
				pos: position{line: 901, col: 10, offset: 25379},
				run: (*parser).callonHAVING1,
				expr: &litMatcher{
					pos:        position{line: 901, col: 10, offset: 25379},
					val:        "having",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ORDER",
			pos:  position{line: 902, col: 1, offset: 25414},
			expr: &actionExpr{
				pos: position{line: 902, col: 9, offset: 25422},
				run: (*parser).callonORDER1,
				expr: &litMatcher{
					pos:        position{line: 902, col: 9, offset: 25422},
					val:        "order",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ON",
			pos:  position{line: 903, col: 1, offset: 25455},
			expr: &actionExpr{
				pos: position{line: 903, col: 6, offset: 25460},
				run: (*parser).callonON1,
				expr: &litMatcher{
					pos:        position{line: 903, col: 6, offset: 25460},
					val:        "on",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LIMIT",
			pos:  position{line: 904, col: 1, offset: 25487},
			expr: &actionExpr{
				pos: position{line: 904, col: 9, offset: 25495},
				run: (*parser).callonLIMIT1,
				expr: &litMatcher{
					pos:        position{line: 904, col: 9, offset: 25495},
					val:        "limit",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ASC",
			pos:  position{line: 905, col: 1, offset: 25528},
			expr: &actionExpr{
				pos: position{line: 905, col: 7, offset: 25534},
				run: (*parser).callonASC1,
				expr: &litMatcher{
					pos:        position{line: 905, col: 7, offset: 25534},
					val:        "asc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "DESC",
			pos:  position{line: 906, col: 1, offset: 25563},
			expr: &actionExpr{
				pos: position{line: 906, col: 8, offset: 25570},
				run: (*parser).callonDESC1,
				expr: &litMatcher{
					pos:        position{line: 906, col: 8, offset: 25570},
					val:        "desc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LEFT",
			pos:  position{line: 907, col: 1, offset: 25601},
			expr: &actionExpr{
				pos: position{line: 907, col: 8, offset: 25608},
				run: (*parser).callonLEFT1,
				expr: &litMatcher{
					pos:        position{line: 907, col: 8, offset: 25608},
					val:        "left",
					ignoreCase: true,
				},
			},
		},
		{
			name: "RIGHT",
			pos:  position{line: 908, col: 1, offset: 25639},
			expr: &actionExpr{
				pos: position{line: 908, col: 9, offset: 25647},
				run: (*parser).callonRIGHT1,
				expr: &litMatcher{
					pos:        position{line: 908, col: 9, offset: 25647},
					val:        "right",
					ignoreCase: true,
				},
			},
		},
		{
			name: "INNER",
			pos:  position{line: 909, col: 1, offset: 25680},
			expr: &actionExpr{
				pos: position{line: 909, col: 9, offset: 25688},
				run: (*parser).callonINNER1,
				expr: &litMatcher{
					pos:        position{line: 909, col: 9, offset: 25688},
					val:        "inner",
					ignoreCase: true,
				},
			},
		},
		{
			name: "SQLTokenSentinels",
			pos:  position{line: 911, col: 1, offset: 25722},
			expr: &choiceExpr{
				pos: position{line: 912, col: 5, offset: 25744},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 912, col: 5, offset: 25744},
						name: "SELECT",
					},
					&ruleRefExpr{
						pos:  position{line: 912, col: 14, offset: 25753},
						name: "AS",
					},
					&ruleRefExpr{
						pos:  position{line: 912, col: 19, offset: 25758},
						name: "FROM",
					},
					&ruleRefExpr{
						pos:  position{line: 912, col: 27, offset: 25766},
						name: "JOIN",
					},
					&ruleRefExpr{
						pos:  position{line: 912, col: 34, offset: 25773},
						name: "WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 912, col: 42, offset: 25781},
						name: "GROUP",
					},
					&ruleRefExpr{
						pos:  position{line: 912, col: 50, offset: 25789},
						name: "HAVING",
					},
					&ruleRefExpr{
						pos:  position{line: 912, col: 59, offset: 25798},
						name: "ORDER",
					},
					&ruleRefExpr{
						pos:  position{line: 912, col: 67, offset: 25806},
						name: "LIMIT",
					},
					&ruleRefExpr{
						pos:  position{line: 912, col: 75, offset: 25814},
						name: "ON",
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 916, col: 1, offset: 25840},
			expr: &choiceExpr{
				pos: position{line: 917, col: 5, offset: 25852},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 917, col: 5, offset: 25852},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 918, col: 5, offset: 25868},
						name: "StringLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 919, col: 5, offset: 25886},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 920, col: 5, offset: 25904},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 921, col: 5, offset: 25923},
						name: "Duration",
					},
					&ruleRefExpr{
						pos:  position{line: 922, col: 5, offset: 25936},
						name: "Time",
					},
					&ruleRefExpr{
						pos:  position{line: 923, col: 5, offset: 25945},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 924, col: 5, offset: 25962},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 925, col: 5, offset: 25981},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 926, col: 5, offset: 26000},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "StringLiteral",
			pos:  position{line: 928, col: 1, offset: 26013},
			expr: &actionExpr{
				pos: position{line: 929, col: 5, offset: 26031},
				run: (*parser).callonStringLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 929, col: 5, offset: 26031},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 929, col: 7, offset: 26033},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 933, col: 1, offset: 26146},
			expr: &choiceExpr{
				pos: position{line: 934, col: 5, offset: 26164},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 934, col: 5, offset: 26164},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 934, col: 5, offset: 26164},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 934, col: 5, offset: 26164},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 934, col: 7, offset: 26166},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 934, col: 14, offset: 26173},
									expr: &ruleRefExpr{
										pos:  position{line: 934, col: 15, offset: 26174},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 937, col: 5, offset: 26289},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 937, col: 5, offset: 26289},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 937, col: 7, offset: 26291},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 941, col: 1, offset: 26395},
			expr: &choiceExpr{
				pos: position{line: 942, col: 5, offset: 26414},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 942, col: 5, offset: 26414},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 942, col: 5, offset: 26414},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 942, col: 5, offset: 26414},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 942, col: 7, offset: 26416},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 942, col: 11, offset: 26420},
									expr: &ruleRefExpr{
										pos:  position{line: 942, col: 12, offset: 26421},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 945, col: 5, offset: 26535},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 945, col: 5, offset: 26535},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 945, col: 7, offset: 26537},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 949, col: 1, offset: 26636},
			expr: &actionExpr{
				pos: position{line: 950, col: 5, offset: 26653},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 950, col: 5, offset: 26653},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 950, col: 7, offset: 26655},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 954, col: 1, offset: 26768},
			expr: &actionExpr{
				pos: position{line: 955, col: 5, offset: 26787},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 955, col: 5, offset: 26787},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 955, col: 7, offset: 26789},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 959, col: 1, offset: 26898},
			expr: &choiceExpr{
				pos: position{line: 960, col: 5, offset: 26917},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 960, col: 5, offset: 26917},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 960, col: 5, offset: 26917},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 961, col: 5, offset: 27030},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 961, col: 5, offset: 27030},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 963, col: 1, offset: 27141},
			expr: &actionExpr{
				pos: position{line: 964, col: 5, offset: 27157},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 964, col: 5, offset: 27157},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "TypeLiteral",
			pos:  position{line: 966, col: 1, offset: 27263},
			expr: &actionExpr{
				pos: position{line: 967, col: 5, offset: 27279},
				run: (*parser).callonTypeLiteral1,
				expr: &seqExpr{
					pos: position{line: 967, col: 5, offset: 27279},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 967, col: 5, offset: 27279},
							expr: &seqExpr{
								pos: position{line: 967, col: 7, offset: 27281},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 967, col: 7, offset: 27281},
										name: "SQLTokenSentinels",
									},
									&ruleRefExpr{
										pos:  position{line: 967, col: 25, offset: 27299},
										name: "EOT",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 967, col: 30, offset: 27304},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 967, col: 34, offset: 27308},
								name: "TypeExternal",
							},
						},
					},
				},
			},
		},
		{
			name: "CastType",
			pos:  position{line: 971, col: 1, offset: 27406},
			expr: &choiceExpr{
				pos: position{line: 972, col: 5, offset: 27419},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 972, col: 5, offset: 27419},
						name: "TypeExternal",
					},
					&ruleRefExpr{
						pos:  position{line: 973, col: 5, offset: 27436},
						name: "PrimitiveType",
					},
				},
			},
		},
		{
			name: "TypeExternal",
			pos:  position{line: 975, col: 1, offset: 27451},
			expr: &choiceExpr{
				pos: position{line: 976, col: 5, offset: 27468},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 976, col: 5, offset: 27468},
						name: "ExplicitType",
					},
					&ruleRefExpr{
						pos:  position{line: 977, col: 5, offset: 27485},
						name: "ComplexTypeExternal",
					},
					&actionExpr{
						pos: position{line: 978, col: 5, offset: 27509},
						run: (*parser).callonTypeExternal4,
						expr: &seqExpr{
							pos: position{line: 978, col: 5, offset: 27509},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 978, col: 5, offset: 27509},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 978, col: 9, offset: 27513},
										name: "PrimitiveTypeExternal",
									},
								},
								&notExpr{
									pos: position{line: 978, col: 31, offset: 27535},
									expr: &ruleRefExpr{
										pos:  position{line: 978, col: 32, offset: 27536},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 980, col: 1, offset: 27572},
			expr: &choiceExpr{
				pos: position{line: 981, col: 5, offset: 27581},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 981, col: 5, offset: 27581},
						name: "ExplicitType",
					},
					&ruleRefExpr{
						pos:  position{line: 982, col: 5, offset: 27598},
						name: "AmbiguousType",
					},
					&ruleRefExpr{
						pos:  position{line: 983, col: 5, offset: 27616},
						name: "ComplexType",
					},
				},
			},
		},
		{
			name: "ExplicitType",
			pos:  position{line: 985, col: 1, offset: 27629},
			expr: &choiceExpr{
				pos: position{line: 986, col: 5, offset: 27646},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 986, col: 5, offset: 27646},
						run: (*parser).callonExplicitType2,
						expr: &seqExpr{
							pos: position{line: 986, col: 5, offset: 27646},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 986, col: 5, offset: 27646},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 986, col: 12, offset: 27653},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 986, col: 15, offset: 27656},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 986, col: 19, offset: 27660},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 986, col: 22, offset: 27663},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 986, col: 26, offset: 27667},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 986, col: 31, offset: 27672},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 986, col: 34, offset: 27675},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 987, col: 5, offset: 27702},
						run: (*parser).callonExplicitType12,
						expr: &seqExpr{
							pos: position{line: 987, col: 5, offset: 27702},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 987, col: 5, offset: 27702},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 987, col: 12, offset: 27709},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 987, col: 15, offset: 27712},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 987, col: 19, offset: 27716},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 987, col: 22, offset: 27719},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 987, col: 26, offset: 27723},
										name: "TypeUnion",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 987, col: 36, offset: 27733},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 987, col: 39, offset: 27736},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AmbiguousType",
			pos:  position{line: 989, col: 1, offset: 27761},
			expr: &choiceExpr{
				pos: position{line: 990, col: 5, offset: 27779},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 990, col: 5, offset: 27779},
						run: (*parser).callonAmbiguousType2,
						expr: &seqExpr{
							pos: position{line: 990, col: 5, offset: 27779},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 990, col: 5, offset: 27779},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 990, col: 10, offset: 27784},
										name: "PrimitiveType",
									},
								},
								&notExpr{
									pos: position{line: 990, col: 24, offset: 27798},
									expr: &ruleRefExpr{
										pos:  position{line: 990, col: 25, offset: 27799},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 991, col: 5, offset: 27839},
						run: (*parser).callonAmbiguousType8,
						expr: &seqExpr{
							pos: position{line: 991, col: 5, offset: 27839},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 991, col: 5, offset: 27839},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 991, col: 10, offset: 27844},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 991, col: 25, offset: 27859},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 991, col: 28, offset: 27862},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 991, col: 32, offset: 27866},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 991, col: 35, offset: 27869},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 991, col: 39, offset: 27873},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 991, col: 42, offset: 27876},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 991, col: 46, offset: 27880},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 991, col: 51, offset: 27885},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 991, col: 54, offset: 27888},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 994, col: 5, offset: 27989},
						run: (*parser).callonAmbiguousType21,
						expr: &labeledExpr{
							pos:   position{line: 994, col: 5, offset: 27989},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 994, col: 10, offset: 27994},
								name: "IdentifierName",
							},
						},
					},
					&actionExpr{
						pos: position{line: 997, col: 5, offset: 28096},
						run: (*parser).callonAmbiguousType24,
						expr: &seqExpr{
							pos: position{line: 997, col: 5, offset: 28096},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 997, col: 5, offset: 28096},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 997, col: 9, offset: 28100},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 997, col: 12, offset: 28103},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 997, col: 14, offset: 28105},
										name: "TypeUnion",
									},
								},
								&litMatcher{
									pos:        position{line: 997, col: 25, offset: 28116},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeUnion",
			pos:  position{line: 999, col: 1, offset: 28139},
			expr: &actionExpr{
				pos: position{line: 1000, col: 5, offset: 28153},
				run: (*parser).callonTypeUnion1,
				expr: &labeledExpr{
					pos:   position{line: 1000, col: 5, offset: 28153},
					label: "types",
					expr: &ruleRefExpr{
						pos:  position{line: 1000, col: 11, offset: 28159},
						name: "TypeList",
					},
				},
			},
		},
		{
			name: "TypeList",
			pos:  position{line: 1004, col: 1, offset: 28255},
			expr: &actionExpr{
				pos: position{line: 1005, col: 5, offset: 28268},
				run: (*parser).callonTypeList1,
				expr: &seqExpr{
					pos: position{line: 1005, col: 5, offset: 28268},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1005, col: 5, offset: 28268},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1005, col: 11, offset: 28274},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 1005, col: 16, offset: 28279},
							label: "rest",
							expr: &oneOrMoreExpr{
								pos: position{line: 1005, col: 21, offset: 28284},
								expr: &ruleRefExpr{
									pos:  position{line: 1005, col: 21, offset: 28284},
									name: "TypeListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeListTail",
			pos:  position{line: 1009, col: 1, offset: 28378},
			expr: &actionExpr{
				pos: position{line: 1009, col: 16, offset: 28393},
				run: (*parser).callonTypeListTail1,
				expr: &seqExpr{
					pos: position{line: 1009, col: 16, offset: 28393},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1009, col: 16, offset: 28393},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1009, col: 19, offset: 28396},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1009, col: 23, offset: 28400},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1009, col: 26, offset: 28403},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1009, col: 30, offset: 28407},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexType",
			pos:  position{line: 1011, col: 1, offset: 28433},
			expr: &choiceExpr{
				pos: position{line: 1012, col: 5, offset: 28449},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1012, col: 5, offset: 28449},
						run: (*parser).callonComplexType2,
						expr: &seqExpr{
							pos: position{line: 1012, col: 5, offset: 28449},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1012, col: 5, offset: 28449},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1012, col: 9, offset: 28453},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1012, col: 12, offset: 28456},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 1012, col: 19, offset: 28463},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1012, col: 33, offset: 28477},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1012, col: 36, offset: 28480},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1015, col: 5, offset: 28575},
						run: (*parser).callonComplexType10,
						expr: &seqExpr{
							pos: position{line: 1015, col: 5, offset: 28575},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1015, col: 5, offset: 28575},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1015, col: 9, offset: 28579},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1015, col: 12, offset: 28582},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1015, col: 16, offset: 28586},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1015, col: 21, offset: 28591},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1015, col: 24, offset: 28594},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1018, col: 5, offset: 28683},
						run: (*parser).callonComplexType18,
						expr: &seqExpr{
							pos: position{line: 1018, col: 5, offset: 28683},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1018, col: 5, offset: 28683},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1018, col: 10, offset: 28688},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1018, col: 14, offset: 28692},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1018, col: 18, offset: 28696},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1018, col: 23, offset: 28701},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1018, col: 26, offset: 28704},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1021, col: 5, offset: 28792},
						run: (*parser).callonComplexType26,
						expr: &seqExpr{
							pos: position{line: 1021, col: 5, offset: 28792},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1021, col: 5, offset: 28792},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1021, col: 10, offset: 28797},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1021, col: 13, offset: 28800},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 1021, col: 21, offset: 28808},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1021, col: 26, offset: 28813},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1021, col: 29, offset: 28816},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1021, col: 33, offset: 28820},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1021, col: 36, offset: 28823},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 1021, col: 44, offset: 28831},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1021, col: 49, offset: 28836},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1021, col: 52, offset: 28839},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexTypeExternal",
			pos:  position{line: 1025, col: 1, offset: 28953},
			expr: &choiceExpr{
				pos: position{line: 1026, col: 5, offset: 28977},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1026, col: 5, offset: 28977},
						run: (*parser).callonComplexTypeExternal2,
						expr: &seqExpr{
							pos: position{line: 1026, col: 5, offset: 28977},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1026, col: 5, offset: 28977},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1026, col: 9, offset: 28981},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1026, col: 12, offset: 28984},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 1026, col: 19, offset: 28991},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1026, col: 33, offset: 29005},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1026, col: 36, offset: 29008},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1029, col: 5, offset: 29103},
						run: (*parser).callonComplexTypeExternal10,
						expr: &seqExpr{
							pos: position{line: 1029, col: 5, offset: 29103},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1029, col: 5, offset: 29103},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1029, col: 9, offset: 29107},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1029, col: 12, offset: 29110},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1029, col: 16, offset: 29114},
										name: "TypeExternal",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1029, col: 29, offset: 29127},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1029, col: 32, offset: 29130},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1032, col: 5, offset: 29219},
						run: (*parser).callonComplexTypeExternal18,
						expr: &seqExpr{
							pos: position{line: 1032, col: 5, offset: 29219},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1032, col: 5, offset: 29219},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1032, col: 10, offset: 29224},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1032, col: 13, offset: 29227},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 1032, col: 17, offset: 29231},
										name: "TypeExternal",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1032, col: 30, offset: 29244},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1032, col: 33, offset: 29247},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1035, col: 5, offset: 29335},
						run: (*parser).callonComplexTypeExternal26,
						expr: &seqExpr{
							pos: position{line: 1035, col: 5, offset: 29335},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1035, col: 5, offset: 29335},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1035, col: 10, offset: 29340},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1035, col: 13, offset: 29343},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 1035, col: 21, offset: 29351},
										name: "TypeExternal",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1035, col: 34, offset: 29364},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1035, col: 37, offset: 29367},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1035, col: 41, offset: 29371},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 1035, col: 44, offset: 29374},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 1035, col: 52, offset: 29382},
										name: "TypeExternal",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1035, col: 65, offset: 29395},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 1035, col: 68, offset: 29398},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 1039, col: 1, offset: 29512},
			expr: &choiceExpr{
				pos: position{line: 1040, col: 5, offset: 29530},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1040, col: 5, offset: 29530},
						name: "PrimitiveTypeExternal",
					},
					&ruleRefExpr{
						pos:  position{line: 1041, col: 5, offset: 29556},
						name: "PrimitiveTypeInternal",
					},
				},
			},
		},
		{
			name: "PrimitiveTypeExternal",
			pos:  position{line: 1047, col: 1, offset: 29815},
			expr: &actionExpr{
				pos: position{line: 1048, col: 5, offset: 29841},
				run: (*parser).callonPrimitiveTypeExternal1,
				expr: &choiceExpr{
					pos: position{line: 1048, col: 9, offset: 29845},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 1048, col: 9, offset: 29845},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1048, col: 19, offset: 29855},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1048, col: 30, offset: 29866},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1048, col: 41, offset: 29877},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1049, col: 9, offset: 29894},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1049, col: 18, offset: 29903},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1049, col: 28, offset: 29913},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1049, col: 38, offset: 29923},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1050, col: 9, offset: 29939},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1051, col: 9, offset: 29957},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1051, col: 18, offset: 29966},
							val:        "string",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PrimitiveTypeInternal",
			pos:  position{line: 1062, col: 1, offset: 30607},
			expr: &actionExpr{
				pos: position{line: 1063, col: 5, offset: 30633},
				run: (*parser).callonPrimitiveTypeInternal1,
				expr: &choiceExpr{
					pos: position{line: 1063, col: 9, offset: 30637},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 1063, col: 9, offset: 30637},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1063, col: 22, offset: 30650},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1064, col: 9, offset: 30665},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1065, col: 9, offset: 30681},
							val:        "bstring",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1066, col: 9, offset: 30699},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1066, col: 16, offset: 30706},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1067, col: 9, offset: 30720},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1067, col: 18, offset: 30729},
							val:        "error",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1067, col: 28, offset: 30739},
							val:        "null",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldList",
			pos:  position{line: 1071, col: 1, offset: 30855},
			expr: &actionExpr{
				pos: position{line: 1072, col: 5, offset: 30873},
				run: (*parser).callonTypeFieldList1,
				expr: &seqExpr{
					pos: position{line: 1072, col: 5, offset: 30873},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1072, col: 5, offset: 30873},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1072, col: 11, offset: 30879},
								name: "TypeField",
							},
						},
						&labeledExpr{
							pos:   position{line: 1072, col: 21, offset: 30889},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1072, col: 26, offset: 30894},
								expr: &ruleRefExpr{
									pos:  position{line: 1072, col: 26, offset: 30894},
									name: "TypeFieldListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTail",
			pos:  position{line: 1076, col: 1, offset: 30993},
			expr: &actionExpr{
				pos: position{line: 1076, col: 21, offset: 31013},
				run: (*parser).callonTypeFieldListTail1,
				expr: &seqExpr{
					pos: position{line: 1076, col: 21, offset: 31013},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1076, col: 21, offset: 31013},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1076, col: 24, offset: 31016},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1076, col: 28, offset: 31020},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1076, col: 31, offset: 31023},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1076, col: 35, offset: 31027},
								name: "TypeField",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeField",
			pos:  position{line: 1078, col: 1, offset: 31058},
			expr: &actionExpr{
				pos: position{line: 1079, col: 5, offset: 31072},
				run: (*parser).callonTypeField1,
				expr: &seqExpr{
					pos: position{line: 1079, col: 5, offset: 31072},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1079, col: 5, offset: 31072},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1079, col: 10, offset: 31077},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1079, col: 20, offset: 31087},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1079, col: 23, offset: 31090},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1079, col: 27, offset: 31094},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1079, col: 30, offset: 31097},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1079, col: 34, offset: 31101},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListExternal",
			pos:  position{line: 1083, col: 1, offset: 31183},
			expr: &actionExpr{
				pos: position{line: 1084, col: 5, offset: 31209},
				run: (*parser).callonTypeFieldListExternal1,
				expr: &seqExpr{
					pos: position{line: 1084, col: 5, offset: 31209},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1084, col: 5, offset: 31209},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1084, col: 11, offset: 31215},
								name: "TypeField",
							},
						},
						&labeledExpr{
							pos:   position{line: 1084, col: 21, offset: 31225},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1084, col: 26, offset: 31230},
								expr: &ruleRefExpr{
									pos:  position{line: 1084, col: 26, offset: 31230},
									name: "TypeFieldListTailExternal",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTailExternal",
			pos:  position{line: 1088, col: 1, offset: 31337},
			expr: &actionExpr{
				pos: position{line: 1088, col: 29, offset: 31365},
				run: (*parser).callonTypeFieldListTailExternal1,
				expr: &seqExpr{
					pos: position{line: 1088, col: 29, offset: 31365},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1088, col: 29, offset: 31365},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1088, col: 32, offset: 31368},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1088, col: 36, offset: 31372},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1088, col: 39, offset: 31375},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1088, col: 43, offset: 31379},
								name: "TypeFieldExternal",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldExternal",
			pos:  position{line: 1090, col: 1, offset: 31418},
			expr: &actionExpr{
				pos: position{line: 1091, col: 5, offset: 31440},
				run: (*parser).callonTypeFieldExternal1,
				expr: &seqExpr{
					pos: position{line: 1091, col: 5, offset: 31440},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1091, col: 5, offset: 31440},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1091, col: 10, offset: 31445},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1091, col: 20, offset: 31455},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1091, col: 23, offset: 31458},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1091, col: 27, offset: 31462},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1091, col: 30, offset: 31465},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1091, col: 34, offset: 31469},
								name: "TypeExternal",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 1095, col: 1, offset: 31559},
			expr: &choiceExpr{
				pos: position{line: 1096, col: 5, offset: 31573},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1096, col: 5, offset: 31573},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 1097, col: 5, offset: 31592},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "EqualityToken",
			pos:  position{line: 1099, col: 1, offset: 31606},
			expr: &choiceExpr{
				pos: position{line: 1100, col: 5, offset: 31624},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1100, col: 5, offset: 31624},
						name: "EqualityOperator",
					},
					&ruleRefExpr{
						pos:  position{line: 1100, col: 24, offset: 31643},
						name: "RelativeOperator",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 1102, col: 1, offset: 31661},
			expr: &actionExpr{
				pos: position{line: 1102, col: 12, offset: 31672},
				run: (*parser).callonAndToken1,
				expr: &seqExpr{
					pos: position{line: 1102, col: 12, offset: 31672},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1102, col: 12, offset: 31672},
							val:        "and",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1102, col: 19, offset: 31679},
							expr: &ruleRefExpr{
								pos:  position{line: 1102, col: 20, offset: 31680},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 1103, col: 1, offset: 31717},
			expr: &actionExpr{
				pos: position{line: 1103, col: 11, offset: 31727},
				run: (*parser).callonOrToken1,
				expr: &seqExpr{
					pos: position{line: 1103, col: 11, offset: 31727},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1103, col: 11, offset: 31727},
							val:        "or",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1103, col: 17, offset: 31733},
							expr: &ruleRefExpr{
								pos:  position{line: 1103, col: 18, offset: 31734},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 1104, col: 1, offset: 31770},
			expr: &actionExpr{
				pos: position{line: 1104, col: 11, offset: 31780},
				run: (*parser).callonInToken1,
				expr: &seqExpr{
					pos: position{line: 1104, col: 11, offset: 31780},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1104, col: 11, offset: 31780},
							val:        "in",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1104, col: 17, offset: 31786},
							expr: &ruleRefExpr{
								pos:  position{line: 1104, col: 18, offset: 31787},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 1105, col: 1, offset: 31823},
			expr: &actionExpr{
				pos: position{line: 1105, col: 12, offset: 31834},
				run: (*parser).callonNotToken1,
				expr: &seqExpr{
					pos: position{line: 1105, col: 12, offset: 31834},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1105, col: 12, offset: 31834},
							val:        "not",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1105, col: 19, offset: 31841},
							expr: &ruleRefExpr{
								pos:  position{line: 1105, col: 20, offset: 31842},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 1106, col: 1, offset: 31879},
			expr: &actionExpr{
				pos: position{line: 1106, col: 11, offset: 31889},
				run: (*parser).callonByToken1,
				expr: &seqExpr{
					pos: position{line: 1106, col: 11, offset: 31889},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1106, col: 11, offset: 31889},
							val:        "by",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1106, col: 17, offset: 31895},
							expr: &ruleRefExpr{
								pos:  position{line: 1106, col: 18, offset: 31896},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 1108, col: 1, offset: 31933},
			expr: &charClassMatcher{
				pos:        position{line: 1108, col: 19, offset: 31951},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 1110, col: 1, offset: 31963},
			expr: &choiceExpr{
				pos: position{line: 1110, col: 18, offset: 31980},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1110, col: 18, offset: 31980},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 1110, col: 36, offset: 31998},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 1112, col: 1, offset: 32005},
			expr: &actionExpr{
				pos: position{line: 1113, col: 5, offset: 32020},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 1113, col: 5, offset: 32020},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 1113, col: 8, offset: 32023},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 1115, col: 1, offset: 32104},
			expr: &choiceExpr{
				pos: position{line: 1116, col: 5, offset: 32123},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1116, col: 5, offset: 32123},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 1116, col: 5, offset: 32123},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1116, col: 5, offset: 32123},
									expr: &seqExpr{
										pos: position{line: 1116, col: 7, offset: 32125},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1116, col: 7, offset: 32125},
												name: "IDGuard",
											},
											&notExpr{
												pos: position{line: 1116, col: 15, offset: 32133},
												expr: &ruleRefExpr{
													pos:  position{line: 1116, col: 16, offset: 32134},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1116, col: 32, offset: 32150},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1116, col: 48, offset: 32166},
									expr: &ruleRefExpr{
										pos:  position{line: 1116, col: 48, offset: 32166},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1117, col: 5, offset: 32218},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 1117, col: 5, offset: 32218},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1118, col: 5, offset: 32257},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 1118, col: 5, offset: 32257},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1118, col: 5, offset: 32257},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1118, col: 10, offset: 32262},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1118, col: 13, offset: 32265},
										name: "IDGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1120, col: 5, offset: 32356},
						run: (*parser).callonIdentifierName19,
						expr: &litMatcher{
							pos:        position{line: 1120, col: 5, offset: 32356},
							val:        "type",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1121, col: 5, offset: 32398},
						run: (*parser).callonIdentifierName21,
						expr: &seqExpr{
							pos: position{line: 1121, col: 5, offset: 32398},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1121, col: 5, offset: 32398},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1121, col: 8, offset: 32401},
										name: "SQLTokenSentinels",
									},
								},
								&andExpr{
									pos: position{line: 1121, col: 26, offset: 32419},
									expr: &seqExpr{
										pos: position{line: 1121, col: 28, offset: 32421},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1121, col: 28, offset: 32421},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1121, col: 31, offset: 32424},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IDGuard",
			pos:  position{line: 1123, col: 1, offset: 32449},
			expr: &choiceExpr{
				pos: position{line: 1124, col: 5, offset: 32461},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1124, col: 5, offset: 32461},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1125, col: 5, offset: 32480},
						name: "NullLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1126, col: 5, offset: 32496},
						name: "TypeExternal",
					},
					&ruleRefExpr{
						pos:  position{line: 1127, col: 5, offset: 32513},
						name: "SearchGuard",
					},
				},
			},
		},
		{
			name: "Time",
			pos:  position{line: 1129, col: 1, offset: 32526},
			expr: &actionExpr{
				pos: position{line: 1130, col: 5, offset: 32535},
				run: (*parser).callonTime1,
				expr: &seqExpr{
					pos: position{line: 1130, col: 5, offset: 32535},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1130, col: 5, offset: 32535},
							name: "FullDate",
						},
						&litMatcher{
							pos:        position{line: 1130, col: 14, offset: 32544},
							val:        "T",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1130, col: 18, offset: 32548},
							name: "FullTime",
						},
					},
				},
			},
		},
		{
			name: "FullDate",
			pos:  position{line: 1134, col: 1, offset: 32668},
			expr: &seqExpr{
				pos: position{line: 1134, col: 12, offset: 32679},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1134, col: 12, offset: 32679},
						name: "D4",
					},
					&litMatcher{
						pos:        position{line: 1134, col: 15, offset: 32682},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1134, col: 19, offset: 32686},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1134, col: 22, offset: 32689},
						val:        "-",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1134, col: 26, offset: 32693},
						name: "D2",
					},
				},
			},
		},
		{
			name: "D4",
			pos:  position{line: 1136, col: 1, offset: 32697},
			expr: &seqExpr{
				pos: position{line: 1136, col: 6, offset: 32702},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1136, col: 6, offset: 32702},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1136, col: 11, offset: 32707},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1136, col: 16, offset: 32712},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1136, col: 21, offset: 32717},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "D2",
			pos:  position{line: 1137, col: 1, offset: 32723},
			expr: &seqExpr{
				pos: position{line: 1137, col: 6, offset: 32728},
				exprs: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1137, col: 6, offset: 32728},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
					&charClassMatcher{
						pos:        position{line: 1137, col: 11, offset: 32733},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "FullTime",
			pos:  position{line: 1139, col: 1, offset: 32740},
			expr: &seqExpr{
				pos: position{line: 1139, col: 12, offset: 32751},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1139, col: 12, offset: 32751},
						name: "PartialTime",
					},
					&ruleRefExpr{
						pos:  position{line: 1139, col: 24, offset: 32763},
						name: "TimeOffset",
					},
				},
			},
		},
		{
			name: "PartialTime",
			pos:  position{line: 1141, col: 1, offset: 32775},
			expr: &seqExpr{
				pos: position{line: 1141, col: 15, offset: 32789},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1141, col: 15, offset: 32789},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1141, col: 18, offset: 32792},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1141, col: 22, offset: 32796},
						name: "D2",
					},
					&litMatcher{
						pos:        position{line: 1141, col: 25, offset: 32799},
						val:        ":",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1141, col: 29, offset: 32803},
						name: "D2",
					},
					&zeroOrOneExpr{
						pos: position{line: 1141, col: 32, offset: 32806},
						expr: &seqExpr{
							pos: position{line: 1141, col: 33, offset: 32807},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1141, col: 33, offset: 32807},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1141, col: 37, offset: 32811},
									expr: &charClassMatcher{
										pos:        position{line: 1141, col: 37, offset: 32811},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeOffset",
			pos:  position{line: 1143, col: 1, offset: 32821},
			expr: &choiceExpr{
				pos: position{line: 1144, col: 5, offset: 32836},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1144, col: 5, offset: 32836},
						val:        "Z",
						ignoreCase: false,
					},
					&seqExpr{
						pos: position{line: 1145, col: 5, offset: 32844},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 1145, col: 6, offset: 32845},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 1145, col: 6, offset: 32845},
										val:        "+",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 1145, col: 12, offset: 32851},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1145, col: 17, offset: 32856},
								name: "D2",
							},
							&litMatcher{
								pos:        position{line: 1145, col: 20, offset: 32859},
								val:        ":",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 1145, col: 24, offset: 32863},
								name: "D2",
							},
							&zeroOrOneExpr{
								pos: position{line: 1145, col: 27, offset: 32866},
								expr: &seqExpr{
									pos: position{line: 1145, col: 28, offset: 32867},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1145, col: 28, offset: 32867},
											val:        ".",
											ignoreCase: false,
										},
										&oneOrMoreExpr{
											pos: position{line: 1145, col: 32, offset: 32871},
											expr: &charClassMatcher{
												pos:        position{line: 1145, col: 32, offset: 32871},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 1147, col: 1, offset: 32881},
			expr: &actionExpr{
				pos: position{line: 1148, col: 5, offset: 32894},
				run: (*parser).callonDuration1,
				expr: &seqExpr{
					pos: position{line: 1148, col: 5, offset: 32894},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1148, col: 5, offset: 32894},
							expr: &litMatcher{
								pos:        position{line: 1148, col: 5, offset: 32894},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1148, col: 10, offset: 32899},
							expr: &seqExpr{
								pos: position{line: 1148, col: 11, offset: 32900},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1148, col: 11, offset: 32900},
										name: "Decimal",
									},
									&ruleRefExpr{
										pos:  position{line: 1148, col: 19, offset: 32908},
										name: "TimeUnit",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Decimal",
			pos:  position{line: 1152, col: 1, offset: 33034},
			expr: &seqExpr{
				pos: position{line: 1152, col: 11, offset: 33044},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1152, col: 11, offset: 33044},
						name: "UInt",
					},
					&zeroOrOneExpr{
						pos: position{line: 1152, col: 16, offset: 33049},
						expr: &seqExpr{
							pos: position{line: 1152, col: 17, offset: 33050},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1152, col: 17, offset: 33050},
									val:        ".",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1152, col: 21, offset: 33054},
									name: "UInt",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimeUnit",
			pos:  position{line: 1154, col: 1, offset: 33062},
			expr: &choiceExpr{
				pos: position{line: 1155, col: 5, offset: 33075},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1155, col: 5, offset: 33075},
						val:        "ns",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1156, col: 5, offset: 33085},
						val:        "us",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1157, col: 5, offset: 33095},
						val:        "ms",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1158, col: 5, offset: 33105},
						val:        "s",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1159, col: 5, offset: 33114},
						val:        "m",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1160, col: 5, offset: 33123},
						val:        "h",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1161, col: 5, offset: 33132},
						val:        "d",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1162, col: 5, offset: 33141},
						val:        "w",
						ignoreCase: true,
					},
					&litMatcher{
						pos:        position{line: 1163, col: 5, offset: 33150},
						val:        "y",
						ignoreCase: true,
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 1165, col: 1, offset: 33156},
			expr: &actionExpr{
				pos: position{line: 1166, col: 5, offset: 33163},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 1166, col: 5, offset: 33163},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1166, col: 5, offset: 33163},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1166, col: 10, offset: 33168},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1166, col: 14, offset: 33172},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1166, col: 19, offset: 33177},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1166, col: 23, offset: 33181},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1166, col: 28, offset: 33186},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1166, col: 32, offset: 33190},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 1168, col: 1, offset: 33227},
			expr: &actionExpr{
				pos: position{line: 1169, col: 5, offset: 33235},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 1169, col: 5, offset: 33235},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1169, col: 5, offset: 33235},
							expr: &seqExpr{
								pos: position{line: 1169, col: 8, offset: 33238},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1169, col: 8, offset: 33238},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 1169, col: 12, offset: 33242},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 1169, col: 16, offset: 33246},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 1169, col: 20, offset: 33250},
										expr: &choiceExpr{
											pos: position{line: 1169, col: 22, offset: 33252},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1169, col: 22, offset: 33252},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 1169, col: 33, offset: 33263},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1169, col: 39, offset: 33269},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1169, col: 41, offset: 33271},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 1173, col: 1, offset: 33435},
			expr: &choiceExpr{
				pos: position{line: 1174, col: 5, offset: 33453},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1174, col: 5, offset: 33453},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 1174, col: 5, offset: 33453},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1174, col: 5, offset: 33453},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 1174, col: 7, offset: 33455},
										expr: &ruleRefExpr{
											pos:  position{line: 1174, col: 7, offset: 33455},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1174, col: 17, offset: 33465},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1174, col: 19, offset: 33467},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1177, col: 5, offset: 33531},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 1177, col: 5, offset: 33531},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1177, col: 5, offset: 33531},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1177, col: 7, offset: 33533},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1177, col: 11, offset: 33537},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1177, col: 13, offset: 33539},
										expr: &ruleRefExpr{
											pos:  position{line: 1177, col: 13, offset: 33539},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1177, col: 23, offset: 33549},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1177, col: 28, offset: 33554},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1177, col: 30, offset: 33556},
										expr: &ruleRefExpr{
											pos:  position{line: 1177, col: 30, offset: 33556},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1177, col: 40, offset: 33566},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 1177, col: 42, offset: 33568},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1180, col: 5, offset: 33667},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 1180, col: 5, offset: 33667},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1180, col: 5, offset: 33667},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1180, col: 10, offset: 33672},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1180, col: 12, offset: 33674},
										expr: &ruleRefExpr{
											pos:  position{line: 1180, col: 12, offset: 33674},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1180, col: 22, offset: 33684},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1180, col: 24, offset: 33686},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1183, col: 5, offset: 33757},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 1183, col: 5, offset: 33757},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1183, col: 5, offset: 33757},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1183, col: 7, offset: 33759},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1183, col: 11, offset: 33763},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1183, col: 13, offset: 33765},
										expr: &ruleRefExpr{
											pos:  position{line: 1183, col: 13, offset: 33765},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1183, col: 23, offset: 33775},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1186, col: 5, offset: 33843},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 1186, col: 5, offset: 33843},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 1190, col: 1, offset: 33880},
			expr: &choiceExpr{
				pos: position{line: 1191, col: 5, offset: 33892},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1191, col: 5, offset: 33892},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 1192, col: 5, offset: 33899},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 1194, col: 1, offset: 33904},
			expr: &actionExpr{
				pos: position{line: 1194, col: 12, offset: 33915},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 1194, col: 12, offset: 33915},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1194, col: 12, offset: 33915},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1194, col: 16, offset: 33919},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1194, col: 18, offset: 33921},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 1196, col: 1, offset: 33959},
			expr: &actionExpr{
				pos: position{line: 1196, col: 12, offset: 33970},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 1196, col: 12, offset: 33970},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1196, col: 12, offset: 33970},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1196, col: 14, offset: 33972},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 1196, col: 18, offset: 33976},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 1198, col: 1, offset: 34014},
			expr: &actionExpr{
				pos: position{line: 1199, col: 5, offset: 34025},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 1199, col: 5, offset: 34025},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1199, col: 5, offset: 34025},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1199, col: 7, offset: 34027},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 1199, col: 10, offset: 34030},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1199, col: 14, offset: 34034},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1199, col: 16, offset: 34036},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 1203, col: 1, offset: 34109},
			expr: &actionExpr{
				pos: position{line: 1204, col: 5, offset: 34120},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 1204, col: 5, offset: 34120},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1204, col: 5, offset: 34120},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1204, col: 7, offset: 34122},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 1204, col: 11, offset: 34126},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1204, col: 15, offset: 34130},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1204, col: 17, offset: 34132},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 1208, col: 1, offset: 34195},
			expr: &actionExpr{
				pos: position{line: 1209, col: 4, offset: 34203},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 1209, col: 4, offset: 34203},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 1209, col: 6, offset: 34205},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 1211, col: 1, offset: 34245},
			expr: &choiceExpr{
				pos: position{line: 1212, col: 5, offset: 34259},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1212, col: 5, offset: 34259},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 1213, col: 5, offset: 34274},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 1215, col: 1, offset: 34290},
			expr: &actionExpr{
				pos: position{line: 1215, col: 14, offset: 34303},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1215, col: 14, offset: 34303},
					expr: &charClassMatcher{
						pos:        position{line: 1215, col: 14, offset: 34303},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 1217, col: 1, offset: 34342},
			expr: &actionExpr{
				pos: position{line: 1218, col: 5, offset: 34361},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 1218, col: 5, offset: 34361},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1218, col: 5, offset: 34361},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1218, col: 9, offset: 34365},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 1220, col: 1, offset: 34408},
			expr: &choiceExpr{
				pos: position{line: 1221, col: 5, offset: 34424},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1221, col: 5, offset: 34424},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 1221, col: 5, offset: 34424},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1221, col: 5, offset: 34424},
									expr: &litMatcher{
										pos:        position{line: 1221, col: 5, offset: 34424},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1221, col: 10, offset: 34429},
									expr: &charClassMatcher{
										pos:        position{line: 1221, col: 10, offset: 34429},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 1221, col: 17, offset: 34436},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1221, col: 21, offset: 34440},
									expr: &charClassMatcher{
										pos:        position{line: 1221, col: 21, offset: 34440},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1221, col: 28, offset: 34447},
									expr: &ruleRefExpr{
										pos:  position{line: 1221, col: 28, offset: 34447},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1224, col: 5, offset: 34506},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 1224, col: 5, offset: 34506},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1224, col: 5, offset: 34506},
									expr: &litMatcher{
										pos:        position{line: 1224, col: 5, offset: 34506},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1224, col: 10, offset: 34511},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1224, col: 14, offset: 34515},
									expr: &charClassMatcher{
										pos:        position{line: 1224, col: 14, offset: 34515},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1224, col: 21, offset: 34522},
									expr: &ruleRefExpr{
										pos:  position{line: 1224, col: 21, offset: 34522},
										name: "ExponentPart",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 1228, col: 1, offset: 34578},
			expr: &seqExpr{
				pos: position{line: 1228, col: 16, offset: 34593},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1228, col: 16, offset: 34593},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 1228, col: 21, offset: 34598},
						expr: &charClassMatcher{
							pos:        position{line: 1228, col: 21, offset: 34598},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1228, col: 27, offset: 34604},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 1230, col: 1, offset: 34616},
			expr: &actionExpr{
				pos: position{line: 1230, col: 7, offset: 34622},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1230, col: 7, offset: 34622},
					expr: &ruleRefExpr{
						pos:  position{line: 1230, col: 7, offset: 34622},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 1232, col: 1, offset: 34664},
			expr: &charClassMatcher{
				pos:        position{line: 1232, col: 12, offset: 34675},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1235, col: 1, offset: 34689},
			expr: &choiceExpr{
				pos: position{line: 1236, col: 5, offset: 34706},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1236, col: 5, offset: 34706},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 1236, col: 5, offset: 34706},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1236, col: 5, offset: 34706},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1236, col: 9, offset: 34710},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1236, col: 11, offset: 34712},
										expr: &ruleRefExpr{
											pos:  position{line: 1236, col: 11, offset: 34712},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1236, col: 29, offset: 34730},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1237, col: 5, offset: 34767},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 1237, col: 5, offset: 34767},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1237, col: 5, offset: 34767},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1237, col: 9, offset: 34771},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1237, col: 11, offset: 34773},
										expr: &ruleRefExpr{
											pos:  position{line: 1237, col: 11, offset: 34773},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1237, col: 29, offset: 34791},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 1239, col: 1, offset: 34825},
			expr: &choiceExpr{
				pos: position{line: 1240, col: 5, offset: 34846},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1240, col: 5, offset: 34846},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1240, col: 5, offset: 34846},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1240, col: 5, offset: 34846},
									expr: &choiceExpr{
										pos: position{line: 1240, col: 7, offset: 34848},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1240, col: 7, offset: 34848},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1240, col: 13, offset: 34854},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1240, col: 26, offset: 34867,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1241, col: 5, offset: 34904},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1241, col: 5, offset: 34904},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1241, col: 5, offset: 34904},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1241, col: 10, offset: 34909},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1241, col: 12, offset: 34911},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 1243, col: 1, offset: 34945},
			expr: &actionExpr{
				pos: position{line: 1244, col: 5, offset: 34957},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 1244, col: 5, offset: 34957},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1244, col: 5, offset: 34957},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1244, col: 10, offset: 34962},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1244, col: 23, offset: 34975},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1244, col: 28, offset: 34980},
								expr: &ruleRefExpr{
									pos:  position{line: 1244, col: 28, offset: 34980},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 1246, col: 1, offset: 35042},
			expr: &choiceExpr{
				pos: position{line: 1247, col: 5, offset: 35059},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1247, col: 5, offset: 35059},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1248, col: 5, offset: 35076},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordChars",
			pos:  position{line: 1250, col: 1, offset: 35088},
			expr: &actionExpr{
				pos: position{line: 1250, col: 16, offset: 35103},
				run: (*parser).callonKeyWordChars1,
				expr: &charClassMatcher{
					pos:        position{line: 1250, col: 16, offset: 35103},
					val:        "[a-zA-Z_.:/%#@~]",
					chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
					ranges:     []rune{'a', 'z', 'A', 'Z'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 1252, col: 1, offset: 35152},
			expr: &choiceExpr{
				pos: position{line: 1253, col: 5, offset: 35168},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1253, col: 5, offset: 35168},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 1254, col: 5, offset: 35185},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 1256, col: 1, offset: 35192},
			expr: &actionExpr{
				pos: position{line: 1256, col: 14, offset: 35205},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 1256, col: 14, offset: 35205},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1256, col: 14, offset: 35205},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1256, col: 19, offset: 35210},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1256, col: 22, offset: 35213},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1256, col: 22, offset: 35213},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1256, col: 38, offset: 35229},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Glob",
			pos:  position{line: 1258, col: 1, offset: 35265},
			expr: &actionExpr{
				pos: position{line: 1259, col: 5, offset: 35274},
				run: (*parser).callonGlob1,
				expr: &seqExpr{
					pos: position{line: 1259, col: 5, offset: 35274},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1259, col: 5, offset: 35274},
							expr: &ruleRefExpr{
								pos:  position{line: 1259, col: 6, offset: 35275},
								name: "GlobProperStart",
							},
						},
						&andExpr{
							pos: position{line: 1259, col: 22, offset: 35291},
							expr: &ruleRefExpr{
								pos:  position{line: 1259, col: 23, offset: 35292},
								name: "GlobHasStar",
							},
						},
						&labeledExpr{
							pos:   position{line: 1259, col: 35, offset: 35304},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1259, col: 40, offset: 35309},
								name: "GlobStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1259, col: 50, offset: 35319},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1259, col: 55, offset: 35324},
								expr: &ruleRefExpr{
									pos:  position{line: 1259, col: 55, offset: 35324},
									name: "GlobRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobProperStart",
			pos:  position{line: 1263, col: 1, offset: 35408},
			expr: &seqExpr{
				pos: position{line: 1263, col: 19, offset: 35426},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1263, col: 19, offset: 35426},
						expr: &litMatcher{
							pos:        position{line: 1263, col: 19, offset: 35426},
							val:        "*",
							ignoreCase: false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1263, col: 24, offset: 35431},
						name: "KeyWordStart",
					},
				},
			},
		},
		{
			name: "GlobHasStar",
			pos:  position{line: 1264, col: 1, offset: 35444},
			expr: &seqExpr{
				pos: position{line: 1264, col: 15, offset: 35458},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1264, col: 15, offset: 35458},
						expr: &ruleRefExpr{
							pos:  position{line: 1264, col: 15, offset: 35458},
							name: "KeyWordRest",
						},
					},
					&litMatcher{
						pos:        position{line: 1264, col: 28, offset: 35471},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "GlobStart",
			pos:  position{line: 1266, col: 1, offset: 35476},
			expr: &choiceExpr{
				pos: position{line: 1267, col: 5, offset: 35490},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1267, col: 5, offset: 35490},
						name: "KeyWordChars",
					},
					&ruleRefExpr{
						pos:  position{line: 1268, col: 5, offset: 35507},
						name: "GlobEsc",
					},
					&actionExpr{
						pos: position{line: 1269, col: 5, offset: 35519},
						run: (*parser).callonGlobStart4,
						expr: &litMatcher{
							pos:        position{line: 1269, col: 5, offset: 35519},
							val:        "*",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GlobRest",
			pos:  position{line: 1271, col: 1, offset: 35543},
			expr: &choiceExpr{
				pos: position{line: 1272, col: 5, offset: 35556},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1272, col: 5, offset: 35556},
						name: "GlobStart",
					},
					&charClassMatcher{
						pos:        position{line: 1273, col: 5, offset: 35570},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "GlobEsc",
			pos:  position{line: 1275, col: 1, offset: 35577},
			expr: &actionExpr{
				pos: position{line: 1275, col: 11, offset: 35587},
				run: (*parser).callonGlobEsc1,
				expr: &seqExpr{
					pos: position{line: 1275, col: 11, offset: 35587},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1275, col: 11, offset: 35587},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1275, col: 16, offset: 35592},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1275, col: 19, offset: 35595},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1275, col: 19, offset: 35595},
										name: "GlobEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1275, col: 32, offset: 35608},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobEscape",
			pos:  position{line: 1277, col: 1, offset: 35644},
			expr: &choiceExpr{
				pos: position{line: 1278, col: 5, offset: 35659},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1278, col: 5, offset: 35659},
						run: (*parser).callonGlobEscape2,
						expr: &litMatcher{
							pos:        position{line: 1278, col: 5, offset: 35659},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1279, col: 5, offset: 35687},
						run: (*parser).callonGlobEscape4,
						expr: &litMatcher{
							pos:        position{line: 1279, col: 5, offset: 35687},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1280, col: 5, offset: 35717},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 1283, col: 1, offset: 35724},
			expr: &choiceExpr{
				pos: position{line: 1284, col: 5, offset: 35745},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1284, col: 5, offset: 35745},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1284, col: 5, offset: 35745},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1284, col: 5, offset: 35745},
									expr: &choiceExpr{
										pos: position{line: 1284, col: 7, offset: 35747},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1284, col: 7, offset: 35747},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1284, col: 13, offset: 35753},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1284, col: 26, offset: 35766,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1285, col: 5, offset: 35803},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1285, col: 5, offset: 35803},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1285, col: 5, offset: 35803},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1285, col: 10, offset: 35808},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1285, col: 12, offset: 35810},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 1287, col: 1, offset: 35844},
			expr: &choiceExpr{
				pos: position{line: 1288, col: 5, offset: 35863},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1288, col: 5, offset: 35863},
						run: (*parser).callonEscapeSequence2,
						expr: &seqExpr{
							pos: position{line: 1288, col: 5, offset: 35863},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1288, col: 5, offset: 35863},
									val:        "x",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1288, col: 9, offset: 35867},
									name: "HexDigit",
								},
								&ruleRefExpr{
									pos:  position{line: 1288, col: 18, offset: 35876},
									name: "HexDigit",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1289, col: 5, offset: 35927},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 1290, col: 5, offset: 35948},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 1292, col: 1, offset: 35963},
			expr: &choiceExpr{
				pos: position{line: 1293, col: 5, offset: 35984},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1293, col: 5, offset: 35984},
						val:        "'",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1294, col: 5, offset: 35992},
						run: (*parser).callonSingleCharEscape3,
						expr: &litMatcher{
							pos:        position{line: 1294, col: 5, offset: 35992},
							val:        "\"",
							ignoreCase: false,
						},
					},
					&litMatcher{
						pos:        position{line: 1295, col: 5, offset: 36032},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1296, col: 5, offset: 36041},
						run: (*parser).callonSingleCharEscape6,
						expr: &litMatcher{
							pos:        position{line: 1296, col: 5, offset: 36041},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1297, col: 5, offset: 36070},
						run: (*parser).callonSingleCharEscape8,
						expr: &litMatcher{
							pos:        position{line: 1297, col: 5, offset: 36070},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1298, col: 5, offset: 36099},
						run: (*parser).callonSingleCharEscape10,
						expr: &litMatcher{
							pos:        position{line: 1298, col: 5, offset: 36099},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1299, col: 5, offset: 36128},
						run: (*parser).callonSingleCharEscape12,
						expr: &litMatcher{
							pos:        position{line: 1299, col: 5, offset: 36128},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1300, col: 5, offset: 36157},
						run: (*parser).callonSingleCharEscape14,
						expr: &litMatcher{
							pos:        position{line: 1300, col: 5, offset: 36157},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1301, col: 5, offset: 36186},
						run: (*parser).callonSingleCharEscape16,
						expr: &litMatcher{
							pos:        position{line: 1301, col: 5, offset: 36186},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 1303, col: 1, offset: 36212},
			expr: &choiceExpr{
				pos: position{line: 1304, col: 5, offset: 36230},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1304, col: 5, offset: 36230},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 1304, col: 5, offset: 36230},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1305, col: 5, offset: 36258},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 1305, col: 5, offset: 36258},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1306, col: 5, offset: 36286},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 1308, col: 1, offset: 36292},
			expr: &choiceExpr{
				pos: position{line: 1309, col: 5, offset: 36310},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1309, col: 5, offset: 36310},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 1309, col: 5, offset: 36310},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1309, col: 5, offset: 36310},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1309, col: 9, offset: 36314},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1309, col: 16, offset: 36321},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1309, col: 16, offset: 36321},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1309, col: 25, offset: 36330},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1309, col: 34, offset: 36339},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1309, col: 43, offset: 36348},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1312, col: 5, offset: 36411},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 1312, col: 5, offset: 36411},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1312, col: 5, offset: 36411},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1312, col: 9, offset: 36415},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1312, col: 13, offset: 36419},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1312, col: 20, offset: 36426},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1312, col: 20, offset: 36426},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 1312, col: 29, offset: 36435},
												expr: &ruleRefExpr{
													pos:  position{line: 1312, col: 29, offset: 36435},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1312, col: 39, offset: 36445},
												expr: &ruleRefExpr{
													pos:  position{line: 1312, col: 39, offset: 36445},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1312, col: 49, offset: 36455},
												expr: &ruleRefExpr{
													pos:  position{line: 1312, col: 49, offset: 36455},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1312, col: 59, offset: 36465},
												expr: &ruleRefExpr{
													pos:  position{line: 1312, col: 59, offset: 36465},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1312, col: 69, offset: 36475},
												expr: &ruleRefExpr{
													pos:  position{line: 1312, col: 69, offset: 36475},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1312, col: 80, offset: 36486},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 1316, col: 1, offset: 36540},
			expr: &actionExpr{
				pos: position{line: 1317, col: 5, offset: 36551},
				run: (*parser).callonRegexp1,
				expr: &seqExpr{
					pos: position{line: 1317, col: 5, offset: 36551},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1317, col: 5, offset: 36551},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1317, col: 9, offset: 36555},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1317, col: 14, offset: 36560},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 1317, col: 25, offset: 36571},
							val:        "/",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1317, col: 29, offset: 36575},
							expr: &ruleRefExpr{
								pos:  position{line: 1317, col: 30, offset: 36576},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 1319, col: 1, offset: 36611},
			expr: &actionExpr{
				pos: position{line: 1320, col: 5, offset: 36626},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1320, col: 5, offset: 36626},
					expr: &choiceExpr{
						pos: position{line: 1320, col: 6, offset: 36627},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 1320, col: 6, offset: 36627},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&litMatcher{
								pos:        position{line: 1320, col: 13, offset: 36634},
								val:        "\\/",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 1322, col: 1, offset: 36674},
			expr: &charClassMatcher{
				pos:        position{line: 1323, col: 5, offset: 36690},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 1325, col: 1, offset: 36705},
			expr: &oneOrMoreExpr{
				pos: position{line: 1325, col: 6, offset: 36710},
				expr: &ruleRefExpr{
					pos:  position{line: 1325, col: 6, offset: 36710},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1327, col: 1, offset: 36721},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1327, col: 6, offset: 36726},
				expr: &ruleRefExpr{
					pos:  position{line: 1327, col: 6, offset: 36726},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 1329, col: 1, offset: 36737},
			expr: &choiceExpr{
				pos: position{line: 1330, col: 5, offset: 36750},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1330, col: 5, offset: 36750},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 1331, col: 5, offset: 36765},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 1332, col: 5, offset: 36784},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 1334, col: 1, offset: 36793},
			expr: &anyMatcher{
				line: 1335, col: 5, offset: 36813,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 1337, col: 1, offset: 36816},
			expr: &choiceExpr{
				pos: position{line: 1338, col: 5, offset: 36844},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1338, col: 5, offset: 36844},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1339, col: 5, offset: 36853},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1340, col: 5, offset: 36862},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1341, col: 5, offset: 36871},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1342, col: 5, offset: 36879},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1343, col: 5, offset: 36892},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 1345, col: 1, offset: 36902},
			expr: &charClassMatcher{
				pos:        position{line: 1346, col: 5, offset: 36921},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 1352, col: 1, offset: 37251},
			expr: &ruleRefExpr{
				pos:  position{line: 1355, col: 5, offset: 37322},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1357, col: 1, offset: 37341},
			expr: &seqExpr{
				pos: position{line: 1358, col: 5, offset: 37362},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1358, col: 5, offset: 37362},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1358, col: 10, offset: 37367},
						expr: &seqExpr{
							pos: position{line: 1358, col: 11, offset: 37368},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1358, col: 11, offset: 37368},
									expr: &litMatcher{
										pos:        position{line: 1358, col: 12, offset: 37369},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1358, col: 17, offset: 37374},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1358, col: 35, offset: 37392},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1360, col: 1, offset: 37398},
			expr: &seqExpr{
				pos: position{line: 1361, col: 5, offset: 37420},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1361, col: 5, offset: 37420},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1361, col: 10, offset: 37425},
						expr: &seqExpr{
							pos: position{line: 1361, col: 11, offset: 37426},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1361, col: 11, offset: 37426},
									expr: &ruleRefExpr{
										pos:  position{line: 1361, col: 12, offset: 37427},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1361, col: 27, offset: 37442},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1363, col: 1, offset: 37461},
			expr: &seqExpr{
				pos: position{line: 1363, col: 7, offset: 37467},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1363, col: 7, offset: 37467},
						expr: &ruleRefExpr{
							pos:  position{line: 1363, col: 7, offset: 37467},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1363, col: 19, offset: 37479},
						name: "LineTerminator",
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 1365, col: 1, offset: 37495},
			expr: &choiceExpr{
				pos: position{line: 1365, col: 7, offset: 37501},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1365, col: 7, offset: 37501},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 1365, col: 11, offset: 37505},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1367, col: 1, offset: 37510},
			expr: &notExpr{
				pos: position{line: 1367, col: 7, offset: 37516},
				expr: &anyMatcher{
					line: 1367, col: 8, offset: 37517,
				},
			},
		},
	},
}

func (c *current) onstart1(ast interface{}) (interface{}, error) {
	return ast, nil
}

func (p *parser) callonstart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart1(stack["ast"])
}

func (c *current) onZ2(decls, first, rest interface{}) (interface{}, error) {
	var procs = decls.([]interface{})
	procs = append(procs, first)
	for _, p := range rest.([]interface{}) {
		procs = append(procs, p)
	}
	return map[string]interface{}{"kind": "Sequential", "procs": procs}, nil

}

func (p *parser) callonZ2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onZ2(stack["decls"], stack["first"], stack["rest"])
}

func (c *current) onDecl1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonDecl1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDecl1(stack["v"])
}

func (c *current) onAnyDecl2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Const", "name": id, "expr": expr}, nil

}

func (p *parser) callonAnyDecl2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyDecl2(stack["id"], stack["expr"])
}

func (c *current) onAnyDecl18(id, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeProc", "name": id, "type": typ}, nil

}

func (p *parser) callonAnyDecl18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyDecl18(stack["id"], stack["typ"])
}

func (c *current) onSequential2(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonSequential2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential2(stack["first"], stack["rest"])
}

func (c *current) onSequential9(op interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": []interface{}{op}}, nil

}

func (p *parser) callonSequential9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential9(stack["op"])
}

func (c *current) onSequentialTail1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonSequentialTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequentialTail1(stack["p"])
}

func (c *current) onParallel2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonParallel2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallel2(stack["first"], stack["rest"])
}

func (c *current) onParallel9(first interface{}) (interface{}, error) {
	return []interface{}{first}, nil

}

func (p *parser) callonParallel9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallel9(stack["first"])
}

func (c *current) onParallelTail1(ch interface{}) (interface{}, error) {
	return ch, nil
}

func (p *parser) callonParallelTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallelTail1(stack["ch"])
}

func (c *current) onSwitchBranch2(e, proc interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": e, "proc": proc}, nil

}

func (p *parser) callonSwitchBranch2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchBranch2(stack["e"], stack["proc"])
}

func (c *current) onSwitchBranch14(proc interface{}) (interface{}, error) {
	return map[string]interface{}{"expr": map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, "proc": proc}, nil

}

func (p *parser) callonSwitchBranch14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchBranch14(stack["proc"])
}

func (c *current) onSwitch2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSwitch2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitch2(stack["first"], stack["rest"])
}

func (c *current) onSwitch9(first interface{}) (interface{}, error) {
	return []interface{}{first}, nil

}

func (p *parser) callonSwitch9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitch9(stack["first"])
}

func (c *current) onOperation2(procArray interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Parallel", "procs": procArray}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["procArray"])
}

func (c *current) onOperation14(caseArray interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Switch", "cases": caseArray}, nil

}

func (p *parser) callonOperation14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation14(stack["caseArray"])
}

func (c *current) onOperation25(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonOperation25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation25(stack["f"])
}

func (c *current) onOperation31(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation31(stack["a"])
}

func (c *current) onOperation37(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Filter", "expr": expr}, nil

}

func (p *parser) callonOperation37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation37(stack["expr"])
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor15(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor15(stack["expr"])
}

func (c *current) onShortCut2(compareOp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": "or",

		"args": []interface{}{

			map[string]interface{}{"kind": "SelectExpr",

				"selectors": []interface{}{map[string]interface{}{"kind": "Root"}},

				"methods": []interface{}{

					map[string]interface{}{"kind": "Call", "name": "map",

						"args": []interface{}{map[string]interface{}{"kind": "BinaryExpr", "op": "=",

							"lhs": map[string]interface{}{"kind": "ID", "name": "$"},

							"rhs": v}}}}}}}, nil

}

func (p *parser) callonShortCut2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut2(stack["compareOp"], stack["v"])
}

func (c *current) onShortCut11(match interface{}) (interface{}, error) {
	return match, nil
}

func (p *parser) callonShortCut11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut11(stack["match"])
}

func (c *current) onShortCut17(f, comp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": comp, "lhs": f, "rhs": v}, nil

}

func (p *parser) callonShortCut17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut17(stack["f"], stack["comp"], stack["v"])
}

func (c *current) onShortCut29(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": "or",

		"args": []interface{}{

			map[string]interface{}{"kind": "SelectExpr",

				"selectors": []interface{}{map[string]interface{}{"kind": "Root"}},

				"methods": []interface{}{

					map[string]interface{}{"kind": "Call", "name": "map",

						"args": []interface{}{map[string]interface{}{"kind": "BinaryExpr", "op": "in",

							"rhs": map[string]interface{}{"kind": "ID", "name": "$"},

							"lhs": v}}}}}}}, nil

}

func (p *parser) callonShortCut29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut29(stack["v"])
}

func (c *current) onShortCut37(search interface{}) (interface{}, error) {
	return search, nil
}

func (p *parser) callonShortCut37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut37(stack["search"])
}

func (c *current) onShortCut45(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Search", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonShortCut45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut45(stack["v"])
}

func (c *current) onShortCut55() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil

}

func (p *parser) callonShortCut55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut55()
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onPatternSearch1(pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RegexpSearch", "pattern": pattern}, nil

}

func (p *parser) callonPatternSearch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternSearch1(stack["pattern"])
}

func (c *current) onPatternMatch2(f, pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RegexpMatch", "pattern": pattern, "expr": f}, nil

}

func (p *parser) callonPatternMatch2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternMatch2(stack["f"], stack["pattern"])
}

func (c *current) onPatternMatch17(f, pattern interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!",

		"operand": map[string]interface{}{"kind": "RegexpMatch", "pattern": pattern, "expr": f}}, nil

}

func (p *parser) callonPatternMatch17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternMatch17(stack["f"], stack["pattern"])
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchExprRelative7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonSearchExprRelative7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprRelative7(stack["op"], stack["expr"])
}

func (c *current) onSearchExprRelative1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprRelative1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprRelative1(stack["first"], stack["rest"])
}

func (c *current) onSearchExprAdd7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonSearchExprAdd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprAdd7(stack["op"], stack["expr"])
}

func (c *current) onSearchExprAdd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprAdd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprAdd1(stack["first"], stack["rest"])
}

func (c *current) onSearchExprMul7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonSearchExprMul7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprMul7(stack["op"], stack["expr"])
}

func (c *current) onSearchExprMul1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprMul1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprMul1(stack["first"], stack["rest"])
}

func (c *current) onSearchExprCast2(e, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": e, "type": typ}, nil

}

func (p *parser) callonSearchExprCast2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprCast2(stack["e"], stack["typ"])
}

func (c *current) onSearchExprFunc4(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprFunc4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprFunc4(stack["first"], stack["rest"])
}

func (c *current) onAggregation2(every, keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Summarize", "keys": keys, "aggs": nil, "duration": every, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["every"], stack["keys"], stack["limit"])
}

func (c *current) onAggregation11(every, aggs, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"kind": "Summarize", "keys": nil, "aggs": aggs, "duration": every, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation11(stack["every"], stack["aggs"], stack["keys"], stack["limit"])
}

func (c *current) onEveryDur2(dur interface{}) (interface{}, error) {
	return dur, nil
}

func (p *parser) callonEveryDur2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEveryDur2(stack["dur"])
}

func (c *current) onEveryDur9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonEveryDur9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEveryDur9()
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onAggAssignment2(lval, agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lval, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment2(stack["lval"], stack["agg"])
}

func (c *current) onAggAssignment11(agg interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": agg}, nil

}

func (p *parser) callonAggAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignment11(stack["agg"])
}

func (c *current) onAgg1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"kind": "Agg", "name": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonAgg1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAgg1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onAggAssignments1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonAggAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSortProc8(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc8(stack["l"])
}

func (c *current) onSortProc1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var proc = map[string]interface{}{"kind": "Sort", "args": list, "sortdir": 1, "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		proc["sortdir"] = -1
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			proc["nullsfirst"] = true
		}
	}
	return proc, nil

}

func (p *parser) callonSortProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopProc6(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopProc6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc6(stack["n"])
}

func (c *current) onTopProc18(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopProc18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc18(stack["f"])
}

func (c *current) onTopProc1(limit, flush, fields interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Top", "limit": 0, "args": nil, "flush": false}
	if limit != nil {
		proc["limit"] = limit
	}
	if fields != nil {
		proc["args"] = fields
	}
	if flush != nil {
		proc["flush"] = true
	}
	return proc, nil

}

func (p *parser) callonTopProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cut", "args": args}, nil

}

func (p *parser) callonCutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutProc1(stack["args"])
}

func (c *current) onPickProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Pick", "args": args}, nil

}

func (p *parser) callonPickProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPickProc1(stack["args"])
}

func (c *current) onDropProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Drop", "args": args}, nil

}

func (p *parser) callonDropProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropProc1(stack["args"])
}

func (c *current) onHeadProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": count}, nil
}

func (p *parser) callonHeadProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc2(stack["count"])
}

func (c *current) onHeadProc8() (interface{}, error) {
	return map[string]interface{}{"kind": "Head", "count": 1}, nil
}

func (p *parser) callonHeadProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc8()
}

func (c *current) onTailProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": count}, nil
}

func (p *parser) callonTailProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc2(stack["count"])
}

func (c *current) onTailProc8() (interface{}, error) {
	return map[string]interface{}{"kind": "Tail", "count": 1}, nil
}

func (p *parser) callonTailProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc8()
}

func (c *current) onFilterProc1(op interface{}) (interface{}, error) {
	return op, nil

}

func (p *parser) callonFilterProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilterProc1(stack["op"])
}

func (c *current) onFilter1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Filter", "expr": expr}, nil

}

func (p *parser) callonFilter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilter1(stack["expr"])
}

func (c *current) onUniqProc2() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": true}, nil

}

func (p *parser) callonUniqProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc2()
}

func (c *current) onUniqProc7() (interface{}, error) {
	return map[string]interface{}{"kind": "Uniq", "cflag": false}, nil

}

func (p *parser) callonUniqProc7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc7()
}

func (c *current) onPutProc1(args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Put", "args": args}, nil

}

func (p *parser) callonPutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutProc1(stack["args"])
}

func (c *current) onRenameProc9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameProc9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc9(stack["cl"])
}

func (c *current) onRenameProc1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Rename", "args": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc1(stack["first"], stack["rest"])
}

func (c *current) onFuseProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Fuse"}, nil

}

func (p *parser) callonFuseProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseProc1()
}

func (c *current) onShapeProc1() (interface{}, error) {
	return map[string]interface{}{"kind": "Shape"}, nil

}

func (p *parser) callonShapeProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShapeProc1()
}

func (c *current) onJoinProc2(style, leftKey, rightKey, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Join", "style": style, "left_key": leftKey, "right_key": rightKey, "args": nil}
	if columns != nil {
		proc["args"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc2(stack["style"], stack["leftKey"], stack["rightKey"], stack["columns"])
}

func (c *current) onJoinProc20(style, key, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"kind": "Join", "style": style, "left_key": key, "right_key": key, "args": nil}
	if columns != nil {
		proc["args"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc20(stack["style"], stack["key"], stack["columns"])
}

func (c *current) onJoinStyle2() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle2()
}

func (c *current) onJoinStyle6() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonJoinStyle6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle6()
}

func (c *current) onJoinStyle10() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle10()
}

func (c *current) onJoinStyle14() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinStyle14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinStyle14()
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onSampleProc1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Sequential", "procs": []interface{}{

		map[string]interface{}{"kind": "Summarize",

			"keys": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "shape"},

				"rhs": map[string]interface{}{"kind": "Call", "name": "typeof",

					"args": []interface{}{e}}}},

			"aggs": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": map[string]interface{}{"kind": "ID", "name": "sample"},

				"rhs": map[string]interface{}{"kind": "Agg",

					"name": "any",

					"expr": e,

					"where": nil}}},

			"duration": nil, "limit": 0},

		map[string]interface{}{"kind": "Cut",

			"args": []interface{}{map[string]interface{}{"kind": "Assignment",

				"lhs": nil,

				"rhs": map[string]interface{}{"kind": "ID", "name": "sample"}}}}}}, nil

}

func (p *parser) callonSampleProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleProc1(stack["e"])
}

func (c *current) onSampleExpr2(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonSampleExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr2(stack["lval"])
}

func (c *current) onSampleExpr7() (interface{}, error) {
	return map[string]interface{}{"kind": "Root"}, nil
}

func (p *parser) callonSampleExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSampleExpr7()
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr2(condition, thenClause, elseClause interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Conditional", "cond": condition, "then": thenClause, "else": elseClause}, nil

}

func (p *parser) callonConditionalExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr2(stack["condition"], stack["thenClause"], stack["elseClause"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onEqualityCompareExpr7(comp, expr interface{}) (interface{}, error) {
	return []interface{}{comp, expr}, nil
}

func (p *parser) callonEqualityCompareExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr7(stack["comp"], stack["expr"])
}

func (c *current) onEqualityCompareExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonEqualityCompareExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr1(stack["first"], stack["rest"])
}

func (c *current) onEqualityOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator1()
}

func (c *current) onEqualityComparator3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityComparator3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityComparator3()
}

func (c *current) onRelativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonRelativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onRelativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonRelativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onRelativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeOperator1()
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "UnaryExpr", "op": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onFuncExpr4(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonFuncExpr4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr4(stack["typ"])
}

func (c *current) onFuncExpr12(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr12(stack["first"], stack["rest"])
}

func (c *current) onFuncExpr19(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr19(stack["first"], stack["rest"])
}

func (c *current) onMatchExpr1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonMatchExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchExpr1(stack["expr"])
}

func (c *current) onSelectExpr1(args, methods interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SelectExpr", "selectors": args, "methods": methods}, nil

}

func (p *parser) callonSelectExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectExpr1(stack["args"], stack["methods"])
}

func (c *current) onMethods2(methods interface{}) (interface{}, error) {
	return methods, nil
}

func (p *parser) callonMethods2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethods2(stack["methods"])
}

func (c *current) onMethods6() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonMethods6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethods6()
}

func (c *current) onMethod1(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonMethod1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethod1(stack["f"])
}

func (c *current) onCast1(typ, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Cast", "expr": expr, "type": typ}, nil

}

func (p *parser) callonCast1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCast1(stack["typ"], stack["expr"])
}

func (c *current) onFunction1(fn, args interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Call", "name": fn, "args": args}, nil

}

func (p *parser) callonFunction1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction1(stack["fn"], stack["args"])
}

func (c *current) onOptionalExprs3() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonOptionalExprs3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOptionalExprs3()
}

func (c *current) onExprs7(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonExprs7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs7(stack["e"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr2(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr9(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr9(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr16(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr16(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr23() (interface{}, error) {
	return map[string]interface{}{"kind": "Root"}, nil

}

func (p *parser) callonDerefExpr23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr23()
}

func (c *current) onRootRecord1() (interface{}, error) {
	return map[string]interface{}{"kind": "Root"}, nil
}

func (p *parser) callonRootRecord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRootRecord1()
}

func (c *current) onDotID2(field interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": ".",

		"lhs": map[string]interface{}{"kind": "Root"},

		"rhs": field}, nil

}

func (p *parser) callonDotID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotID2(stack["field"])
}

func (c *current) onDotID7(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "BinaryExpr", "op": "[",

		"lhs": map[string]interface{}{"kind": "Root"},

		"rhs": expr}, nil

}

func (p *parser) callonDotID7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotID7(stack["expr"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref13(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": nil, "rhs": to}}, nil

}

func (p *parser) callonDeref13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref13(stack["to"])
}

func (c *current) onDeref22(from interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"kind": "BinaryExpr", "op": ":",

		"lhs": from, "rhs": nil}}, nil

}

func (p *parser) callonDeref22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref22(stack["from"])
}

func (c *current) onDeref31(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref31(stack["expr"])
}

func (c *current) onDeref37(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref37(stack["id"])
}

func (c *current) onPrimary7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary7(stack["expr"])
}

func (c *current) onRecord1(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "RecordExpr", "fields": fields}, nil

}

func (p *parser) callonRecord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecord1(stack["fields"])
}

func (c *current) onFields1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFields1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFields1(stack["first"], stack["rest"])
}

func (c *current) onFieldTail1(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonFieldTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldTail1(stack["f"])
}

func (c *current) onField1(name, value interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "value": value}, nil

}

func (p *parser) callonField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onField1(stack["name"], stack["value"])
}

func (c *current) onArray1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ArrayExpr", "exprs": exprs}, nil

}

func (p *parser) callonArray1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArray1(stack["exprs"])
}

func (c *current) onSet1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SetExpr", "exprs": exprs}, nil

}

func (p *parser) callonSet1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSet1(stack["exprs"])
}

func (c *current) onMap1(exprs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "MapExpr", "entries": exprs}, nil

}

func (p *parser) callonMap1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMap1(stack["exprs"])
}

func (c *current) onEntries2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonEntries2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries2(stack["first"], stack["rest"])
}

func (c *current) onEntries9() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonEntries9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntries9()
}

func (c *current) onEntryTail1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonEntryTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntryTail1(stack["e"])
}

func (c *current) onEntry1(key, value interface{}) (interface{}, error) {
	return map[string]interface{}{"key": key, "value": value}, nil

}

func (p *parser) callonEntry1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEntry1(stack["key"], stack["value"])
}

func (c *current) onSQLProc1(selection, from, joins, where, groupby, having, orderby, limit interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": "SQLExpr",

		"select": selection,

		"from": from,

		"joins": joins,

		"where": where,

		"group_by": groupby,

		"having": having,

		"order_by": orderby,

		"limit": limit}, nil

}

func (p *parser) callonSQLProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLProc1(stack["selection"], stack["from"], stack["joins"], stack["where"], stack["groupby"], stack["having"], stack["orderby"], stack["limit"])
}

func (c *current) onSQLSelect2() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLSelect2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect2()
}

func (c *current) onSQLSelect7(assignments interface{}) (interface{}, error) {
	return assignments, nil
}

func (p *parser) callonSQLSelect7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLSelect7(stack["assignments"])
}

func (c *current) onSQLAssignment2(rhs, lhs interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonSQLAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment2(stack["rhs"], stack["lhs"])
}

func (c *current) onSQLAssignment11(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonSQLAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignment11(stack["expr"])
}

func (c *current) onSQLAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments7(stack["expr"])
}

func (c *current) onSQLAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSQLFrom2(table, alias interface{}) (interface{}, error) {
	return map[string]interface{}{"table": table, "alias": alias}, nil

}

func (p *parser) callonSQLFrom2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom2(stack["table"], stack["alias"])
}

func (c *current) onSQLFrom11() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLFrom11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom11()
}

func (c *current) onSQLFrom17() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLFrom17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLFrom17()
}

func (c *current) onSQLAlias2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias2(stack["id"])
}

func (c *current) onSQLAlias9(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSQLAlias9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias9(stack["id"])
}

func (c *current) onSQLAlias14() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLAlias14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLAlias14()
}

func (c *current) onSQLJoins8(join interface{}) (interface{}, error) {
	return join, nil
}

func (p *parser) callonSQLJoins8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins8(stack["join"])
}

func (c *current) onSQLJoins2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSQLJoins2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins2(stack["first"], stack["rest"])
}

func (c *current) onSQLJoins11() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLJoins11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoins11()
}

func (c *current) onSQLJoin1(style, table, alias, leftKey, rightKey interface{}) (interface{}, error) {
	return map[string]interface{}{

		"table": table,

		"style": style,

		"left_key": leftKey,

		"right_key": rightKey,

		"alias": alias}, nil

}

func (p *parser) callonSQLJoin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoin1(stack["style"], stack["table"], stack["alias"], stack["leftKey"], stack["rightKey"])
}

func (c *current) onSQLJoinStyle2(style interface{}) (interface{}, error) {
	return style, nil
}

func (p *parser) callonSQLJoinStyle2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle2(stack["style"])
}

func (c *current) onSQLJoinStyle10() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonSQLJoinStyle10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLJoinStyle10()
}

func (c *current) onSQLWhere2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLWhere2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLWhere2(stack["expr"])
}

func (c *current) onSQLWhere9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLWhere9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLWhere9()
}

func (c *current) onSQLGroupBy2(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonSQLGroupBy2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLGroupBy2(stack["columns"])
}

func (c *current) onSQLGroupBy11() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLGroupBy11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLGroupBy11()
}

func (c *current) onSQLHaving2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSQLHaving2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLHaving2(stack["expr"])
}

func (c *current) onSQLHaving9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLHaving9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLHaving9()
}

func (c *current) onSQLOrderBy2(keys, order interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "SQLOrderBy", "keys": keys, "order": order}, nil

}

func (p *parser) callonSQLOrderBy2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrderBy2(stack["keys"], stack["order"])
}

func (c *current) onSQLOrderBy13() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSQLOrderBy13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrderBy13()
}

func (c *current) onSQLOrder2(dir interface{}) (interface{}, error) {
	return dir, nil
}

func (p *parser) callonSQLOrder2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder2(stack["dir"])
}

func (c *current) onSQLOrder9() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonSQLOrder9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLOrder9()
}

func (c *current) onSQLLimit2(count interface{}) (interface{}, error) {
	return count, nil
}

func (p *parser) callonSQLLimit2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit2(stack["count"])
}

func (c *current) onSQLLimit9() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonSQLLimit9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSQLLimit9()
}

func (c *current) onSELECT1() (interface{}, error) {
	return "select", nil
}

func (p *parser) callonSELECT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSELECT1()
}

func (c *current) onAS1() (interface{}, error) {
	return "as", nil
}

func (p *parser) callonAS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAS1()
}

func (c *current) onFROM1() (interface{}, error) {
	return "from", nil
}

func (p *parser) callonFROM1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFROM1()
}

func (c *current) onJOIN1() (interface{}, error) {
	return "join", nil
}

func (p *parser) callonJOIN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJOIN1()
}

func (c *current) onWHERE1() (interface{}, error) {
	return "where", nil
}

func (p *parser) callonWHERE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWHERE1()
}

func (c *current) onGROUP1() (interface{}, error) {
	return "group", nil
}

func (p *parser) callonGROUP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGROUP1()
}

func (c *current) onHAVING1() (interface{}, error) {
	return "having", nil
}

func (p *parser) callonHAVING1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHAVING1()
}

func (c *current) onORDER1() (interface{}, error) {
	return "order", nil
}

func (p *parser) callonORDER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onORDER1()
}

func (c *current) onON1() (interface{}, error) {
	return "on", nil
}

func (p *parser) callonON1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onON1()
}

func (c *current) onLIMIT1() (interface{}, error) {
	return "limit", nil
}

func (p *parser) callonLIMIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIMIT1()
}

func (c *current) onASC1() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonASC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onASC1()
}

func (c *current) onDESC1() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonDESC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDESC1()
}

func (c *current) onLEFT1() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonLEFT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLEFT1()
}

func (c *current) onRIGHT1() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonRIGHT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRIGHT1()
}

func (c *current) onINNER1() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonINNER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINNER1()
}

func (c *current) onStringLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "string", "text": v}, nil

}

func (p *parser) callonStringLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringLiteral1(stack["v"])
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "net", "text": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "ip", "text": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "float64", "text": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "int64", "text": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "bool", "text": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "null", "text": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onTypeLiteral1(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeValue", "value": typ}, nil

}

func (p *parser) callonTypeLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeLiteral1(stack["typ"])
}

func (c *current) onTypeExternal4(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeExternal4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeExternal4(stack["typ"])
}

func (c *current) onExplicitType2(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonExplicitType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplicitType2(stack["typ"])
}

func (c *current) onExplicitType12(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonExplicitType12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExplicitType12(stack["typ"])
}

func (c *current) onAmbiguousType2(name interface{}) (interface{}, error) {
	return name, nil
}

func (p *parser) callonAmbiguousType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType2(stack["name"])
}

func (c *current) onAmbiguousType8(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeDef", "name": name, "type": typ}, nil

}

func (p *parser) callonAmbiguousType8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType8(stack["name"], stack["typ"])
}

func (c *current) onAmbiguousType21(name interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType21(stack["name"])
}

func (c *current) onAmbiguousType24(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonAmbiguousType24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType24(stack["u"])
}

func (c *current) onTypeUnion1(types interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeUnion", "types": types}, nil

}

func (p *parser) callonTypeUnion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeUnion1(stack["types"])
}

func (c *current) onTypeList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeList1(stack["first"], stack["rest"])
}

func (c *current) onTypeListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeListTail1(stack["typ"])
}

func (c *current) onComplexType2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType2(stack["fields"])
}

func (c *current) onComplexType10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexType10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType10(stack["typ"])
}

func (c *current) onComplexType18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexType18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType18(stack["typ"])
}

func (c *current) onComplexType26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexType26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType26(stack["keyType"], stack["valType"])
}

func (c *current) onComplexTypeExternal2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexTypeExternal2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexTypeExternal2(stack["fields"])
}

func (c *current) onComplexTypeExternal10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexTypeExternal10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexTypeExternal10(stack["typ"])
}

func (c *current) onComplexTypeExternal18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexTypeExternal18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexTypeExternal18(stack["typ"])
}

func (c *current) onComplexTypeExternal26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexTypeExternal26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexTypeExternal26(stack["keyType"], stack["valType"])
}

func (c *current) onPrimitiveTypeExternal1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveTypeExternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveTypeExternal1()
}

func (c *current) onPrimitiveTypeInternal1() (interface{}, error) {
	return map[string]interface{}{"kind": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveTypeInternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveTypeInternal1()
}

func (c *current) onTypeFieldList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList1(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTail1(stack["typ"])
}

func (c *current) onTypeField1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeField1(stack["name"], stack["typ"])
}

func (c *current) onTypeFieldListExternal1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldListExternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListExternal1(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldListTailExternal1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTailExternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTailExternal1(stack["typ"])
}

func (c *current) onTypeFieldExternal1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeFieldExternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldExternal1(stack["name"], stack["typ"])
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return "in", nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"kind": "ID", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onIdentifierName19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName19()
}

func (c *current) onIdentifierName21(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName21(stack["id"])
}

func (c *current) onTime1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "time", "text": string(c.text)}, nil

}

func (p *parser) callonTime1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTime1()
}

func (c *current) onDuration1() (interface{}, error) {
	return map[string]interface{}{"kind": "Primitive", "type": "duration", "text": string(c.text)}, nil

}

func (p *parser) callonDuration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDuration1()
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordChars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordChars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordChars1()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onGlob1(head, tail interface{}) (interface{}, error) {
	return reglob.Reglob(head.(string) + joinChars(tail)), nil

}

func (p *parser) callonGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlob1(stack["head"], stack["tail"])
}

func (c *current) onGlobStart4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonGlobStart4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobStart4()
}

func (c *current) onGlobEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonGlobEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEsc1(stack["s"])
}

func (c *current) onGlobEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonGlobEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape2()
}

func (c *current) onGlobEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonGlobEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobEscape4()
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onEscapeSequence2() (interface{}, error) {
	return "\\" + string(c.text), nil
}

func (p *parser) callonEscapeSequence2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapeSequence2()
}

func (c *current) onSingleCharEscape3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleCharEscape3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape3()
}

func (c *current) onSingleCharEscape6() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape6()
}

func (c *current) onSingleCharEscape8() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape8()
}

func (c *current) onSingleCharEscape10() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape10()
}

func (c *current) onSingleCharEscape12() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape12()
}

func (c *current) onSingleCharEscape14() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape14()
}

func (c *current) onSingleCharEscape16() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape16()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexp1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
